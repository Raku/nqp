trigger:
- master

pr:
- master

variables:
  # Turn this Powershell console into a developer powershell console.
  # https://intellitect.com/enter-vsdevshell-powershell/
  PWSH_DEV: |
    if ($env:Agent_OS -eq 'Windows_NT') {
      $installPath = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationpath
      $devShell    = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find **\Microsoft.VisualStudio.DevShell.dll
      Import-Module $devShell
      Enter-VsDevShell -VsInstallPath $installPath -SkipAutomaticLocation -DevCmdArguments "-arch=amd64"
    }
  RAKUDO_CHECKOUT_TYPE: master
  NQP_CHECKOUT_TYPE: "rev-$(Build.SourceVersion)-selfrepo"
  MOAR_CHECKOUT_TYPE: downstream
  INSTALL_DIR: install

stages:
- stage: Test
  jobs:
    # Keep the job and matrix entry names as short as possible as the webinterface
    # leaves little space for the name.
    - job: T
      strategy:
       matrix:
         Win_MVM:
           IMAGE_NAME: 'windows-2019'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: ''
         Win_JVM:
           IMAGE_NAME: 'windows-2019'
           BACKEND: 'JVM'
           MOAR_CHECKOUT_TYPE: 'none'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=jvm'
           MOAR_OPTIONS: ''
         Win_MVM_relocatable:
           IMAGE_NAME: 'windows-2019'
           RELOCATABLE: 'yes'
           RAKUDO_OPTIONS: '--relocatable'
           NQP_OPTIONS: '--backends=moar --relocatable'
           MOAR_OPTIONS: '--relocatable'

         Mac_MVM:
           IMAGE_NAME: 'macOS-10.15'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: ''
         Mac_JVM:
           IMAGE_NAME: 'macOS-10.15'
           BACKEND: 'JVM'
           MOAR_CHECKOUT_TYPE: 'none'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=jvm'
           MOAR_OPTIONS: ''
         Mac_MVM_reloc:
           IMAGE_NAME: 'macOS-10.15'
           RELOCATABLE: 'yes'
           RAKUDO_OPTIONS: '--relocatable'
           NQP_OPTIONS: '--backends=moar --relocatable'
           MOAR_OPTIONS: '--relocatable'

         Lin_MVM:
           IMAGE_NAME: 'ubuntu-20.04'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: ''
         Lin_JVM:
           IMAGE_NAME: 'ubuntu-20.04'
           BACKEND: 'JVM'
           MOAR_CHECKOUT_TYPE: 'none'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=jvm'
           MOAR_OPTIONS: ''
         Lin_MVM_reloc:
           IMAGE_NAME: 'ubuntu-20.04'
           RELOCATABLE: 'yes'
           RAKUDO_OPTIONS: '--relocatable'
           NQP_OPTIONS: '--backends=moar --relocatable'
           MOAR_OPTIONS: '--relocatable'

         MVM_Ub_18:
           IMAGE_NAME: 'ubuntu-18.04'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: ''

         MVM_Ub_16:
           IMAGE_NAME: 'ubuntu-16.04'
           RAKUDO_OPTIONS: ''
           NQP_OPTIONS: '--backends=moar'
           MOAR_OPTIONS: ''

      pool:
        vmImage: $(IMAGE_NAME)
      workspace:
        clean: all
      timeoutInMinutes: 180
      steps:

        - pwsh: |
            # Windows has a maximum PATH variable length of 2048 (depending on
            # how it's accessed). The length of PATH in AzureCI is already
            # really tight. We'll run into the limit when we add Java and the
            # MS BuildTools to the path.
            # To work around this, we remove a bunch of stuff we won't need
            # from PATH here.
            $shortened_path = "$(PATH)" -replace ';[^;]*(SeleniumWebDrivers|SQL Server|Mercurial|Amazon|mysql|\\sbt\\|NSIS|Windows Performance Toolkit|php|Subversion)[^;]*(?=(;|$))', ''
            echo "##vso[task.setvariable variable=PATH]$shortened_path"
          displayName: "Shorten PATH on Windows"
          condition: eq( variables['Agent.OS'], 'Windows_NT' )

        - script: |
            echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)"
            echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)/bin:$(PATH)"
          displayName: "Set java version (non-Windows)"
          condition: and(succeeded(), eq( variables['BACKEND'], 'JVM'), ne( variables['Agent.OS'], 'Windows_NT' ) )
        - pwsh: |
            echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)"
            echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)\bin;$(PATH)"
          displayName: "Set java version (Windows)"
          condition: and(succeeded(), eq( variables['BACKEND'], 'JVM'), eq( variables['Agent.OS'], 'Windows_NT' ) )

        - checkout: self
          path: selfrepo
          displayName: Checkout script repo

        - script: perl selfrepo/tools/build/checkout-repos-for-test.pl $(RAKUDO_CHECKOUT_TYPE) $(NQP_CHECKOUT_TYPE) $(MOAR_CHECKOUT_TYPE)
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), ne( variables['BACKEND'], 'JVM'))
          displayName: Checkout repositories (MoarVM)
        - script: perl selfrepo/tools/build/checkout-repos-for-test.pl $(RAKUDO_CHECKOUT_TYPE) $(NQP_CHECKOUT_TYPE) none
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), eq( variables['BACKEND'], 'JVM'))
          displayName: Checkout repositories (JVM)

        # Build MoarVM
        - script: |
            perl Configure.pl --prefix=../$(INSTALL_DIR) $(MOAR_OPTIONS)
            make -j2 install
          workingDirectory: '$(Pipeline.Workspace)/MoarVM'
          condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ), ne( variables['BACKEND'], 'JVM'))
          displayName: Build MoarVM
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            perl Configure.pl --prefix=..\$(INSTALL_DIR) $(MOAR_OPTIONS)
            set CL=/MP
            nmake install
          failOnStderr: false
          workingDirectory: '$(Pipeline.Workspace)/MoarVM'
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ), ne( variables['BACKEND'], 'JVM'))
          displayName: Build MoarVM (Windows)

        # Build NQP
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            perl Configure.pl --prefix=../$(INSTALL_DIR) $(NQP_OPTIONS) --make-install
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: succeeded()
          displayName: Build NQP

        # Build Rakudo
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            perl Configure.pl --prefix=../$(INSTALL_DIR) $(RAKUDO_OPTIONS) --make-install
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: succeeded()
          displayName: Build Rakudo

        # TODO: Should use "install moved" instead of "install-moved". But `prove` currently fails with an executable path that contains a space.
        - pwsh: |
            mv $(INSTALL_DIR) $(INSTALL_DIR)-moved
            echo "##vso[task.setvariable variable=INSTALL_DIR]$(INSTALL_DIR)-moved"
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ) )
          displayName: Move installation

        # Test NQP
        - script: prove -j2 -r -e ../$(INSTALL_DIR)/bin/nqp t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall t/concurrency
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), ne( variables['BACKEND'], 'JVM') )
          displayName: Test NQP
        - pwsh: |
            $install_path = Resolve-Path ../$(INSTALL_DIR)/bin/
            prove -j0 -r -e "$($install_path)nqp" t/nqp t/hll t/qregex t/p5regex t/qast t/jvm t/serialization t/nativecall
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), eq( variables['BACKEND'], 'JVM') )
          displayName: Test NQP (JVM)

        # Test Rakudo
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            $install_path = Resolve-Path ../$(INSTALL_DIR)/bin/
            prove -j2 -e "$($install_path.Path)raku" -vlr t
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), ne( variables['BACKEND'], 'JVM') )
          displayName: Test Rakudo

        - publish: $(Pipeline.Workspace)/$(INSTALL_DIR)
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), ne( variables['BACKEND'], 'JVM') )
          displayName: Publish build artifact

