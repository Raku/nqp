.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1356803026.47425") :anon :lex
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5067 = 'cuid_374_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_375_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_33_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_224_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_245_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_411_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_412_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_413_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_414_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_415_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_416_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_417_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_418_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_358_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_372_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_373_1356803026.47425' 
    capture_lex $P5067 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "$nqpcomp", $P105 
    .lex "@clo", $P106 
    .lex "&MAIN", $P107 
    .lex "&hll-config", $P108 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P105, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P106, $P5003
    .const 'Sub' $P5004 = 'cuid_374_1356803026.47425' 
    capture_lex $P5004
    set $P107, $P5004
    .const 'Sub' $P5005 = 'cuid_375_1356803026.47425' 
    capture_lex $P5005
    set $P108, $P5005
    find_dynamic_lex $P5006, "$*CTXSAVE"
    set ctxsave, $P5006
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5009, $I5002
    set $P5008, $P5009
    unless $I5002 goto if11_end13 
    $P5007 = ctxsave."ctxsave"()
    set $P5008, $P5007
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_33_1356803026.47425' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_224_1356803026.47425' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_245_1356803026.47425' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1444
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3748
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5020
  fallback3748:
    $P5021 = $P5016."operations"()
    set $P104, $P5021
.annotate 'line', 1446
    $P104."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1448
    .const 'Sub' $P5023 = 'cuid_411_1356803026.47425' 
    capture_lex $P5023
    newclosure $P5022, $P5023
    $P104."add_hll_op"("nqp", "preinc", $P5022)
.annotate 'line', 1463
    .const 'Sub' $P5025 = 'cuid_412_1356803026.47425' 
    capture_lex $P5025
    newclosure $P5024, $P5025
    $P104."add_hll_op"("nqp", "predec", $P5024)
.annotate 'line', 1478
    .const 'Sub' $P5027 = 'cuid_413_1356803026.47425' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P104."add_hll_op"("nqp", "postinc", $P5026)
.annotate 'line', 1502
    .const 'Sub' $P5029 = 'cuid_414_1356803026.47425' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P104."add_hll_op"("nqp", "postdec", $P5028)
.annotate 'line', 1526
    .const 'Sub' $P5031 = 'cuid_415_1356803026.47425' 
    capture_lex $P5031
    newclosure $P5030, $P5031
    $P104."add_hll_op"("nqp", "numify", $P5030)
.annotate 'line', 1530
    .const 'Sub' $P5033 = 'cuid_416_1356803026.47425' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P104."add_hll_op"("nqp", "stringify", $P5032)
.annotate 'line', 1534
    .const 'Sub' $P5035 = 'cuid_417_1356803026.47425' 
    capture_lex $P5035
    newclosure $P5034, $P5035
    $P104."add_hll_op"("nqp", "eqaddr", $P5034)
.annotate 'line', 1542
    .const 'Sub' $P5037 = 'cuid_418_1356803026.47425' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P104."add_hll_op"("nqp", "falsey", $P5036)
    .const 'Sub' $P5038 = 'cuid_358_1356803026.47425' 
    capture_lex $P5038
    $P5039 = $P5038()
    .const 'Sub' $P5040 = 'cuid_372_1356803026.47425' 
    capture_lex $P5040
    $P5041 = $P5040()
    .const 'Sub' $P5042 = 'cuid_373_1356803026.47425' 
    capture_lex $P5042
    $P5043 = $P5042()
.annotate 'line', 3235
    nqp_get_sc_object $P5047, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5046, $P5047, "NQP"
    get_who $P5045, $P5046
    set $P5044, $P5045["Compiler"]
    unless_null $P5044, fallback5734
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5048
  fallback5734:
    $P5049 = $P5044."new"()
    set $P105, $P5049
.annotate 'line', 3236
    $P105."language"("nqp")
.annotate 'line', 3237
    nqp_get_sc_object $P5053, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5052, $P5053, "NQP"
    get_who $P5051, $P5052
    set $P5050, $P5051["Grammar"]
    unless_null $P5050, fallback5735
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5050, $P5054
  fallback5735:
    $P105."parsegrammar"($P5050)
.annotate 'line', 3238
    nqp_get_sc_object $P5058, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Actions"]
    unless_null $P5055, fallback5736
    nqp_get_sc_object $P5059, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5059
  fallback5736:
    $P105."parseactions"($P5055)
.annotate 'line', 3239
    $P5060 = $P105."config"()
    "&hll-config"($P5060)
.annotate 'line', 3242
    $P5061 = $P105."commandline_options"()
    set $P106, $P5061
.annotate 'line', 3243
    $P106."push"("parsetrace")
.annotate 'line', 3244
    $P106."push"("setting=s")
.annotate 'line', 3245
    $P106."push"("setting-path=s")
.annotate 'line', 3246
    $P106."push"("module-path=s")
.annotate 'line', 3247
    $P106."push"("vmlibs=s")
.annotate 'line', 3248
    $P106."push"("no-regex-lib")
.annotate 'line', 3249
    $P106."push"("old-regex-lib")
.annotate 'line', 3250
    $P106."push"("dynext=s")
    unless _lex_param_0 goto if1753_end5738 
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5062, "ModuleLoader"
    getinterp $P5064
    set $P5063, $P5064["context"]
    $P5062."set_mainline_module"($P5063)
    .const 'Sub' $P5065 = "cuid_374_1356803026.47425" 
    $P5066 = $P5065(_lex_param_0 :flat)
  if1753_end5738:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_374_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3252
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 3254
    find_lex $P5001, "$nqpcomp"
    $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3257
    find_lex $P5002, "$nqpcomp"
    $P5003 = $P5002."nqpevent"()
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_375_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3261
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2012.12-4-g6143779"
    set _lex_param_0["version"], $P5001
    box $P5002, "2012-12-29T17:43:46Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_33_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5031 = 'cuid_2_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_3_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_4_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_5_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_6_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_7_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_8_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_9_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_10_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_11_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_12_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_16_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_17_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_18_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_19_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_20_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_21_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_22_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_23_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_24_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_25_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_26_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_27_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_28_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_29_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_30_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_31_1356803026.47425' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_32_1356803026.47425' 
    capture_lex $P5031 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1356803026.47425' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1356803026.47425' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1356803026.47425' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1356803026.47425' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1356803026.47425' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_7_1356803026.47425' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_8_1356803026.47425' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_9_1356803026.47425' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_10_1356803026.47425' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1356803026.47425' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_12_1356803026.47425' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1356803026.47425' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1356803026.47425' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_18_1356803026.47425' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_19_1356803026.47425' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_20_1356803026.47425' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_21_1356803026.47425' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_22_1356803026.47425' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_23_1356803026.47425' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_24_1356803026.47425' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_25_1356803026.47425' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_26_1356803026.47425' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_27_1356803026.47425' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_28_1356803026.47425' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_29_1356803026.47425' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_30_1356803026.47425' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_31_1356803026.47425' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_32_1356803026.47425' 
    capture_lex $P5030
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_2_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 30
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5032 = 'cuid_376_1356803026.47425' 
    capture_lex $P5032 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_types", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_object_fixup_list", $P5012
    nqp_decontainerize $P5013, _lex_param_0
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    new $P5015, 'Hash'
    repr_bind_attr_obj $P5013, $P5014, "%!code_stub_sc_idx", $P5015
    find_dynamic_lex $P5018, "%*COMPILING"
    unless_null $P5018, fallback16
    nqp_get_sc_object $P5021, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%COMPILING"]
    unless_null $P5019, fallback17
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%COMPILING"], $P5024
    set $P5019, $P5024
  fallback17:
    unless_null $P5019, vivi_1318
    die "Contextual %*COMPILING not found"
    box $P5025, "Contextual %*COMPILING not found"
    set $P5019, $P5025
  vivi_1318:
    set $P5018, $P5019
  fallback16:
    set $P5017, $P5018["%?OPTIONS"]
    unless_null $P5017, fallback19
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5026
  fallback19:
    set $P5016, $P5017["dynext"]
    unless_null $P5016, fallback20
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5027
  fallback20:
    defined $I5001, $P5016
    box $P5031, $I5001
    set $P5030, $P5031
    unless $I5001 goto if12_end15 
    .const 'Sub' $P5028 = 'cuid_376_1356803026.47425' 
    capture_lex $P5028
    $P5029 = $P5028()
    set $P5030, $P5029
  if12_end15:
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1356803026.47425") :anon :lex :outer("cuid_2_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 37
    .lex "$dynext_path", $P101 
    .lex "@dynext_paths", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    find_dynamic_lex $P5005, "%*COMPILING"
    unless_null $P5005, fallback21
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%COMPILING"]
    unless_null $P5006, fallback22
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%COMPILING"], $P5011
    set $P5006, $P5011
  fallback22:
    unless_null $P5006, vivi_1423
    die "Contextual %*COMPILING not found"
    box $P5012, "Contextual %*COMPILING not found"
    set $P5006, $P5012
  vivi_1423:
    set $P5005, $P5006
  fallback21:
    set $P5004, $P5005["%?OPTIONS"]
    unless_null $P5004, fallback24
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5013
  fallback24:
    set $P5003, $P5004["dynext"]
    unless_null $P5003, fallback25
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5014
  fallback25:
    set $P101, $P5003
    getinterp $P5017
    set $P5016, $P5017[.IGLOBALS_LIB_PATHS]
    unless_null $P5016, fallback26
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5018
  fallback26:
    set $P5015, $P5016[2]
    unless_null $P5015, fallback27
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback27:
    set $P102, $P5015
.annotate 'line', 41
    $P5020 = $P102."push"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_3_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 48
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback28
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback28:
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback29
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback29:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    unless $N5001 goto if15_end31 
.annotate 'line', 49
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback32
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5024
  fallback32:
    set $P101["outer"], $P5017
  if15_end31:
    nqp_decontainerize $P5025, _lex_param_0
    nqp_get_sc_object $P5026, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5027, $P5025, $P5026, "@!BLOCKS"
    nqp_decontainerize $P5028, _lex_param_0
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5030, $P5028, $P5029, "@!BLOCKS"
    set $N5005, $P5030
    set $I5002, $N5005
    set $P5027[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_4_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 57
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 58
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_5_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback33
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5008
  fallback33:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_6_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 67
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 69
    $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_7_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 80
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_377_1356803026.47425' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_34
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if16_end37 
    .const 'Sub' $P5001 = 'cuid_377_1356803026.47425' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if16_end37:
    goto lexotic_35
  lexotic_34:
    .get_results ($P5003)
  lexotic_35:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1356803026.47425") :anon :lex :outer("cuid_7_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 82
    .lex "$setting", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback38
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback39
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback39:
    unless_null $P5004, vivi_1740
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_1740:
    set $P5003, $P5004
  fallback38:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback41
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5011
  fallback41:
.annotate 'line', 87
    find_lex $P5012, "$loader"
    find_lex $P5013, "$setting_name"
    $P5014 = $P5012."load_setting"($P5013)
    set $P5002["outer_ctx"], $P5014
    set $P101, $P5014
.annotate 'line', 90
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."is_precompilation_mode"()
    unless $P5017 goto if18_else42 
.annotate 'line', 91
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback44
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback44:
.annotate 'line', 92
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback45
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback45:
.annotate 'line', 94
    nqp_get_sc_object $P5033, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback46
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5034
  fallback46:
    $P5035 = $P5030."new"("ModuleLoader.pbc" :named("value"))
    $P5036 = $P5025."new"($P5035, "load_bytecode vs" :named("pirop"))
.annotate 'line', 96
    nqp_get_sc_object $P5040, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback47
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5037, $P5041
  fallback47:
.annotate 'line', 98
    nqp_get_sc_object $P5045, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["BVal"]
    unless_null $P5042, fallback48
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5046
  fallback48:
    find_dynamic_lex $P5047, "$*UNIT"
    unless_null $P5047, fallback49
    nqp_get_sc_object $P5050, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$UNIT"]
    unless_null $P5048, fallback50
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5051
  fallback50:
    unless_null $P5048, vivi_1951
    die "Contextual $*UNIT not found"
    box $P5052, "Contextual $*UNIT not found"
    set $P5048, $P5052
  vivi_1951:
    set $P5047, $P5048
  fallback49:
    $P5053 = $P5042."new"($P5047 :named("value"))
.annotate 'line', 99
    nqp_get_sc_object $P5057, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback52
    nqp_get_sc_object $P5058, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5054, $P5058
  fallback52:
.annotate 'line', 101
    nqp_get_sc_object $P5062, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["VM"]
    unless_null $P5059, fallback53
    nqp_get_sc_object $P5063, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5059, $P5063
  fallback53:
.annotate 'line', 103
    nqp_get_sc_object $P5067, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["SVal"]
    unless_null $P5064, fallback54
    nqp_get_sc_object $P5068, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5064, $P5068
  fallback54:
    $P5069 = $P5064."new"("ModuleLoader" :named("value"))
    $P5070 = $P5059."new"($P5069, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 105
    nqp_get_sc_object $P5074, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["SVal"]
    unless_null $P5071, fallback55
    nqp_get_sc_object $P5075, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5071, $P5075
  fallback55:
    find_lex $P5076, "$setting_name"
    $P5077 = $P5071."new"($P5076 :named("value"))
    $P5078 = $P5054."new"($P5070, $P5077, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5079 = $P5037."new"($P5053, $P5078, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5080 = $P5020."new"($P5036, $P5079)
    $P5081 = $P5018."add_load_dependency_task"($P5080 :named("deserialize_past"))
    goto if18_end43
  if18_else42:
.annotate 'line', 110
.annotate 'line', 112
    find_lex $P5083, "self"
    nqp_decontainerize $P5082, $P5083
    nqp_get_sc_object $P5087, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5086, $P5087, "QAST"
    get_who $P5085, $P5086
    set $P5084, $P5085["Op"]
    unless_null $P5084, fallback56
    nqp_get_sc_object $P5088, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5084, $P5088
  fallback56:
.annotate 'line', 114
    nqp_get_sc_object $P5092, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback57
    nqp_get_sc_object $P5093, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5089, $P5093
  fallback57:
    find_dynamic_lex $P5094, "$*UNIT"
    unless_null $P5094, fallback58
    nqp_get_sc_object $P5097, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5096, $P5097
    set $P5095, $P5096["$UNIT"]
    unless_null $P5095, fallback59
    nqp_get_sc_object $P5098, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5095, $P5098
  fallback59:
    unless_null $P5095, vivi_2060
    die "Contextual $*UNIT not found"
    box $P5099, "Contextual $*UNIT not found"
    set $P5095, $P5099
  vivi_2060:
    set $P5094, $P5095
  fallback58:
    $P5100 = $P5089."new"($P5094 :named("value"))
.annotate 'line', 115
    nqp_get_sc_object $P5104, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Op"]
    unless_null $P5101, fallback61
    nqp_get_sc_object $P5105, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5101, $P5105
  fallback61:
.annotate 'line', 117
    nqp_get_sc_object $P5109, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set $P5106, $P5107["VM"]
    unless_null $P5106, fallback62
    nqp_get_sc_object $P5110, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5106, $P5110
  fallback62:
.annotate 'line', 119
    nqp_get_sc_object $P5114, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["SVal"]
    unless_null $P5111, fallback63
    nqp_get_sc_object $P5115, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5111, $P5115
  fallback63:
    $P5116 = $P5111."new"("ModuleLoader" :named("value"))
    $P5117 = $P5106."new"($P5116, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 121
    nqp_get_sc_object $P5121, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["SVal"]
    unless_null $P5118, fallback64
    nqp_get_sc_object $P5122, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5118, $P5122
  fallback64:
    find_lex $P5123, "$setting_name"
    $P5124 = $P5118."new"($P5123 :named("value"))
    $P5125 = $P5101."new"($P5117, $P5124, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5126 = $P5084."new"($P5100, $P5125, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5127 = $P5082."add_fixup_task"($P5126 :named("fixup_past"))
  if18_end43:
    getattribute $P5129, $P101, "lex_pad"
    find_lex $P5128, "RETURN"
    $P5130 = $P5128($P5129)
    .return ($P5130) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_8_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 132
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_65
    .lex "RETURN", $P102
.annotate 'line', 134
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 137
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    unless $P5005 goto if21_end68 
.annotate 'line', 138
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback69
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback69:
.annotate 'line', 139
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback70
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback70:
.annotate 'line', 141
    nqp_get_sc_object $P5020, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback71
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback71:
    $P5022 = $P5017."new"("ModuleLoader.pbc" :named("value"))
    $P5023 = $P5012."new"($P5022, "load_bytecode vs" :named("pirop"))
.annotate 'line', 143
    nqp_get_sc_object $P5027, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback72
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5028
  fallback72:
.annotate 'line', 145
    nqp_get_sc_object $P5032, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback73
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5029, $P5033
  fallback73:
.annotate 'line', 147
    nqp_get_sc_object $P5037, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["SVal"]
    unless_null $P5034, fallback74
    nqp_get_sc_object $P5038, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5034, $P5038
  fallback74:
    $P5039 = $P5034."new"("ModuleLoader" :named("value"))
    $P5040 = $P5029."new"($P5039, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 149
    nqp_get_sc_object $P5044, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback75
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5041, $P5045
  fallback75:
    $P5046 = $P5041."new"(_lex_param_1 :named("value"))
    $P5047 = $P5024."new"($P5040, $P5046, "callmethod" :named("op"), "load_module" :named("name"))
    $P5048 = $P5007."new"($P5023, $P5047)
    $P5049 = $P5006."add_load_dependency_task"($P5048 :named("deserialize_past"))
  if21_end68:
    getattribute $P5051, $P101, "lex_pad"
    find_lex $P5050, "RETURN"
    $P5052 = $P5050($P5051)
    goto lexotic_66
  lexotic_65:
    .get_results ($P5052)
  lexotic_66:
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "import" :subid("cuid_9_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 156
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_378_1356803026.47425' 
    capture_lex $P5009 
    .lex "$target", $P101 
    .lex "self", _lex_param_0 
    .lex "$stash", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 157
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."cur_lexpad"()
    set $P101, $P5003
    set $P5004, _lex_param_1
    iter $P5006, _lex_param_1
  for_next76:
    unless $P5006, for_done78
    shift $P5008, $P5006
  for_redo77:
    .const 'Sub' $P5007 = 'cuid_378_1356803026.47425' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next76
  for_done78:
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1356803026.47425") :anon :lex :outer("cuid_9_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 158
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 159
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$target"
    $P5004 = _lex_param_0."key"()
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5001."install_lexical_symbol"($P5003, $P5004, $P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_10_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 165
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_379_1356803026.47425' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 167
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next79:
    unless $P5008, for_done81
    shift $P5010, $P5008
  for_redo80:
    .const 'Sub' $P5009 = 'cuid_379_1356803026.47425' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next79
  for_done81:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1356803026.47425") :anon :lex :outer("cuid_10_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 171
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_11_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 181
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 183
    _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 184
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback82
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5003
  fallback82:
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback83
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5008
  fallback83:
    $P5009 = $P5004."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5002."push"($P5009)
.annotate 'line', 187
    nqp_get_sc_object $P5013, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Stmts"]
    unless_null $P5010, fallback84
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback84:
.annotate 'line', 188
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback85
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback85:
.annotate 'line', 190
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["VM"]
    unless_null $P5020, fallback86
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback86:
.annotate 'line', 191
    $P5025 = _lex_param_1."cuid"()
    set $S5003, $P5025
    concat $S5002, "    .const \"LexInfo\" %r = \"", $S5003
    concat $S5001, $S5002, "\""
    $P5026 = $P5020."new"($S5001 :named("pir"))
.annotate 'line', 193
    nqp_get_sc_object $P5030, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["SVal"]
    unless_null $P5027, fallback87
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5031
  fallback87:
    $P5032 = $P5027."new"(_lex_param_2 :named("value"))
.annotate 'line', 194
    nqp_get_sc_object $P5036, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["WVal"]
    unless_null $P5033, fallback88
    nqp_get_sc_object $P5037, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5033, $P5037
  fallback88:
    $P5038 = $P5033."new"(_lex_param_3 :named("value"))
    $P5039 = $P5015."new"($P5026, $P5032, $P5038, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 198
    nqp_get_sc_object $P5043, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback89
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5044
  fallback89:
.annotate 'line', 200
    nqp_get_sc_object $P5048, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["VM"]
    unless_null $P5045, fallback90
    nqp_get_sc_object $P5049, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5045, $P5049
  fallback90:
.annotate 'line', 201
    $P5050 = _lex_param_1."cuid"()
    set $S5006, $P5050
    concat $S5005, "    .const \"LexInfo\" %r = \"", $S5006
    concat $S5004, $S5005, "\""
    $P5051 = $P5045."new"($S5004 :named("pir"))
    $P5052 = $P5040."new"($P5051, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P5053 = $P5010."new"($P5039, $P5052)
    set $P101, $P5053
.annotate 'line', 205
    nqp_decontainerize $P5054, _lex_param_0
    $P5055 = $P5054."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5055) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_12_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 210
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 211
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback91
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback91:
.annotate 'line', 213
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback92
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback92:
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback93
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback93:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 214
    nqp_get_sc_object $P5022, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback94
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5023
  fallback94:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 215
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback95
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback95:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 217
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_16_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 222
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("code_type_name") :optional 
    .param int haz_param_1 :opt_flag 
    .const 'Sub' $P5098 = 'cuid_13_1356803026.47425' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_14_1356803026.47425' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_15_1356803026.47425' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_383_1356803026.47425' 
    capture_lex $P5098 
    if haz_param_1, default173
    box $P5097, "NQPRoutine"
    set _lex_param_4, $P5097
  default173:
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    .lex "$code_type_name", _lex_param_4 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_96
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5026, 'ExceptionHandler'
    set_label $P5026, catch_handler_25105
    $P5026.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5026
.annotate 'line', 226
.annotate 'line', 227
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    push $P5009, _lex_param_4
    $P5010 = $P5008."find_sym"($P5009)
    set $P101, $P5010
.annotate 'line', 228
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback98
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback99
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5016
  fallback99:
    unless_null $P5013, vivi_22100
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_22100:
    set $P5012, $P5013
  fallback98:
    get_how $P5011, $P5012
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback101
    nqp_get_sc_object $P5021, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback102
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5022
  fallback102:
    unless_null $P5019, vivi_23103
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_23103:
    set $P5018, $P5019
  fallback101:
    $P5024 = $P5011."name"($P5018)
    set $S5001, $P5024
    set $S5002, _lex_param_4
    isne $I5001, $S5001, $S5002
    box $P5025, $I5001
    set $P102, $P5025
    set $P5027, $P102
    pop_eh 
    goto skip_handler_24104
  catch_handler_25105:
    .get_results ($P5026) 
    set $I10001, 1
    set $P5026["handled"], $I10001
    nqp_get_sc_object $P10001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5026
    pop_upto_eh $P5026
    pop_eh 
    set $P5027, $P10001
    goto skip_handler_24104
  skip_handler_24104:
    .const 'Sub' $P5029 = 'cuid_13_1356803026.47425' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    set $P103, $P5028
.annotate 'line', 271
    nqp_get_sc_object $P5033, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Stmts"]
    unless_null $P5030, fallback134
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5034
  fallback134:
    $P5035 = $P5030."new"()
    set $P104, $P5035
    set $P5036, _lex_param_1["compile_time_dummy"]
    unless_null $P5036, fallback137
    nqp_get_sc_object $P5037, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5037
  fallback137:
    defined $I5002, $P5036
    unless $I5002 goto if29_else135 
.annotate 'line', 274
    set $P5038, _lex_param_1["compile_time_dummy"]
    unless_null $P5038, fallback138
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5039
  fallback138:
    set $P105, $P5038
    goto if29_end136
  if29_else135:
.annotate 'line', 277
    nqp_fresh_stub $P5040, $P103
    set $P105, $P5040
    set $S5003, _lex_param_2
    assign $P105, $S5003
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 284
    nqp_decontainerize $P5041, _lex_param_0
    $P5042 = $P5041."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5042
    nqp_decontainerize $P5043, _lex_param_0
    nqp_get_sc_object $P5044, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5045, $P5043, $P5044, "%!code_stub_sc_idx"
.annotate 'line', 285
    $P5046 = _lex_param_1."cuid"()
    set $S5004, $P5046
    set $P5045[$S5004], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5058, $P102
    unless $P102 goto if30_end140 
.annotate 'line', 291
    nqp_decontainerize $P5047, _lex_param_0
    nqp_get_sc_object $P5048, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5049, $P5047, $P5048, "%!code_object_fixup_list"
.annotate 'line', 292
    $P5050 = _lex_param_1."cuid"()
    set $S5005, $P5050
    set $P5049[$S5005], $P104
.annotate 'line', 293
    nqp_decontainerize $P5051, _lex_param_0
    $P5052 = $P5051."is_precompilation_mode"()
    unless $P5052 goto if31_else141 
    .const 'Sub' $P5054 = 'cuid_14_1356803026.47425' 
    capture_lex $P5054
    newclosure $P5053, $P5054
    setprop $P105, "CLONE_CALLBACK", $P5053
    set $P5057, $P105
    goto if31_end142
  if31_else141:
.annotate 'line', 298
    .const 'Sub' $P5056 = 'cuid_15_1356803026.47425' 
    capture_lex $P5056
    newclosure $P5055, $P5056
    setprop $P105, "CLONE_CALLBACK", $P5055
    set $P5057, $P105
  if31_end142:
    set $P5058, $P5057
  if30_end140:
  if29_end136:
.annotate 'line', 322
    nqp_decontainerize $P5059, _lex_param_0
    $P5059."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if32_else153 
    .const 'Sub' $P5060 = 'cuid_383_1356803026.47425' 
    capture_lex $P5060
    $P5061 = $P5060()
    set $P5096, $P5061
    goto if32_end154
  if32_else153:
.annotate 'line', 362
.annotate 'line', 365
    nqp_get_sc_object $P5065, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["VM"]
    unless_null $P5062, fallback168
    nqp_get_sc_object $P5066, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5062, $P5066
  fallback168:
.annotate 'line', 367
    nqp_get_sc_object $P5070, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["VM"]
    unless_null $P5067, fallback169
    nqp_get_sc_object $P5071, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5067, $P5071
  fallback169:
.annotate 'line', 369
    nqp_get_sc_object $P5075, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback170
    nqp_get_sc_object $P5076, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5072, $P5076
  fallback170:
    nqp_decontainerize $P5077, _lex_param_0
    $P5078 = $P5077."handle"()
    $P5079 = $P5072."new"($P5078 :named("value"))
.annotate 'line', 370
    nqp_get_sc_object $P5083, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["IVal"]
    unless_null $P5080, fallback171
    nqp_get_sc_object $P5084, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5080, $P5084
  fallback171:
    $P5085 = $P5080."new"($P106 :named("value"))
    $P5086 = $P5067."new"($P5079, $P5085, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 372
    nqp_get_sc_object $P5090, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5089, $P5090, "QAST"
    get_who $P5088, $P5089
    set $P5087, $P5088["BVal"]
    unless_null $P5087, fallback172
    nqp_get_sc_object $P5091, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5087, $P5091
  fallback172:
    $P5092 = $P5087."new"(_lex_param_1 :named("value"))
    $P5093 = $P5062."new"($P5086, $P5092, "assign vPP" :named("pirop"))
    $P104."push"($P5093)
    find_lex $P5094, "RETURN"
    $P5095 = $P5094($P105)
    set $P5096, $P5095
  if32_end154:
    goto lexotic_97
  lexotic_96:
    .get_results ($P5096)
  lexotic_97:
    .return ($P5096) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1356803026.47425") :anon :lex :outer("cuid_16_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 235
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5029 = 'cuid_382_1356803026.47425' 
    capture_lex $P5029 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P106, $P5006
.annotate 'line', 237
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5007."unshift"($P5010)
    compreg $P5011, "nqp"
    set $P101, $P5011
.annotate 'line', 239
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["CompUnit"]
    unless_null $P5012, fallback106
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback106:
    find_lex $P5017, "$past"
    $P5018 = $P5012."new"($P5017, "nqp" :named("hll"))
    $P5019 = $P101."post"($P5018)
    set $P102, $P5019
.annotate 'line', 240
    $P5020 = $P101."pir"($P102)
    set $P103, $P5020
.annotate 'line', 241
    $P5021 = $P101."evalpmc"($P103)
    set $P104, $P5021
    elements $I5001, $P104
    box $P5022, $I5001
    set $P105, $P5022
    box $P5023, 0
    set $P106, $P5023
  while26_test107:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto while26_done111 
  while26_redo109:
    .const 'Sub' $P5024 = 'cuid_382_1356803026.47425' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5026, $P5025
    goto while26_test107 
  while26_done111:
.annotate 'line', 267
    $P5028 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1356803026.47425") :anon :lex :outer("cuid_13_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 246
    .const 'Sub' $P5015 = 'cuid_381_1356803026.47425' 
    capture_lex $P5015 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 247
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback112
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback112:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    unless $I5002 goto if27_end114 
    .const 'Sub' $P5011 = 'cuid_381_1356803026.47425' 
    capture_lex $P5011
    $P5012 = $P5011()
  if27_end114:
    find_lex $P5013, "$i"
    set $N5002, $P5013
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5014, $N5001
    store_lex "$i", $P5014
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1356803026.47425") :anon :lex :outer("cuid_382_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 248
    .const 'Sub' $P5067 = 'cuid_380_1356803026.47425' 
    capture_lex $P5067 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 252
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback115
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5009
  fallback115:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5015, $P5012, $P5014, "%!code_object_types"
    find_lex $P5016, "$subid"
    set $S5002, $P5016
    set $P5011, $P5015[$S5002]
    unless_null $P5011, fallback116
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5017
  fallback116:
    find_lex $P5019, "$compiled"
    find_lex $P5020, "$i"
    set $I5001, $P5020
    set $P5018, $P5019[$I5001]
    unless_null $P5018, fallback117
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5021
  fallback117:
    setattribute $P101, $P5011, "$!do", $P5018
    find_lex $P5027, "self"
    nqp_decontainerize $P5026, $P5027
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5029, $P5026, $P5028, "%!code_objects_to_fix_up"
    find_lex $P5030, "$subid"
    set $S5003, $P5030
    set $P5025, $P5029[$S5003]
    unless_null $P5025, fallback118
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5031
  fallback118:
    set $P5022, $P5025
    iter $P5024, $P5025
  for_next121:
    unless $P5024, for_done123
    shift $P5033, $P5024
  for_redo122:
    .const 'Sub' $P5032 = 'cuid_380_1356803026.47425' 
    capture_lex $P5032
    $P5022 = $P5032($P5033)
    goto for_next121
  for_done123:
    find_lex $P5035, "$compiled"
    find_lex $P5036, "$i"
    set $I5002, $P5036
    set $P5034, $P5035[$I5002]
    unless_null $P5034, fallback124
    nqp_get_sc_object $P5037, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5034, $P5037
  fallback124:
    find_lex $P5039, "$compiled"
    find_lex $P5040, "$i"
    set $I5003, $P5040
    set $P5038, $P5039[$I5003]
    unless_null $P5038, fallback125
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5041
  fallback125:
    setprop $P5034, "STATIC_CODE_REF", $P5038
.annotate 'line', 258
    find_lex $P5043, "self"
    nqp_decontainerize $P5042, $P5043
    find_lex $P5046, "self"
    nqp_decontainerize $P5045, $P5046
    nqp_get_sc_object $P5047, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5048, $P5045, $P5047, "%!code_stub_sc_idx"
    find_lex $P5049, "$subid"
    set $S5004, $P5049
    set $P5044, $P5048[$S5004]
    unless_null $P5044, fallback126
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5050
  fallback126:
    find_lex $P5052, "$compiled"
    find_lex $P5053, "$i"
    set $I5004, $P5053
    set $P5051, $P5052[$I5004]
    unless_null $P5051, fallback127
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5051, $P5054
  fallback127:
    $P5042."update_root_code_ref"($P5044, $P5051)
    find_lex $P5057, "self"
    nqp_decontainerize $P5056, $P5057
    nqp_get_sc_object $P5058, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5059, $P5056, $P5058, "%!code_object_fixup_list"
    find_lex $P5060, "$subid"
    set $S5005, $P5060
    set $P5055, $P5059[$S5005]
    unless_null $P5055, fallback128
    nqp_get_sc_object $P5061, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5061
  fallback128:
    set $P102, $P5055
    new $P5065, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5065, while28_handlers132
    push_eh $P5065
  while28_test129:
    $P5062 = $P102."list"()
    set $N5001, $P5062
    box $P5066, $N5001
    set $P5064, $P5066
    unless $N5001 goto while28_done133 
  while28_redo131:
.annotate 'line', 262
    $P5063 = $P102."shift"()
    set $P5064, $P5063
    goto while28_test129 
  while28_handlers132:
    .get_results ($P5065)
    pop_upto_eh $P5065
    getattribute $P5065, $P5065, 'type'
    eq $P5065, .CONTROL_LOOP_NEXT, while28_test129
    eq $P5065, .CONTROL_LOOP_REDO, while28_redo131
  while28_done133:
    pop_eh 
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1356803026.47425") :anon :lex :outer("cuid_381_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_object_types"
    find_lex $P5006, "$subid"
    set $S5001, $P5006
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback119
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5007
  fallback119:
    find_lex $P5010, "$compiled"
    find_lex $P5011, "$i"
    set $I5001, $P5011
    set $P5009, $P5010[$I5001]
    unless_null $P5009, fallback120
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5012
  fallback120:
    clone $P5008, $P5009
    setattribute _lex_param_0, $P5001, "$!do", $P5008
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1356803026.47425") :anon :lex :outer("cuid_16_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 294
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 295
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback143
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5008
  fallback143:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1356803026.47425") :anon :lex :outer("cuid_16_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 299
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 301
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5001."add_object"(_lex_param_2)
.annotate 'line', 302
    find_lex $P5003, "$fixups"
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback144
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5008
  fallback144:
.annotate 'line', 304
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["WVal"]
    unless_null $P5009, fallback145
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5013
  fallback145:
    $P5014 = $P5009."new"(_lex_param_2 :named("value"))
.annotate 'line', 305
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback146
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback146:
    find_lex $P5020, "$code_type"
    $P5021 = $P5015."new"($P5020 :named("value"))
.annotate 'line', 306
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback147
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5026
  fallback147:
    $P5027 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 307
    nqp_get_sc_object $P5031, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["VM"]
    unless_null $P5028, fallback148
    nqp_get_sc_object $P5032, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5032
  fallback148:
.annotate 'line', 309
    nqp_get_sc_object $P5036, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback149
    nqp_get_sc_object $P5037, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5033, $P5037
  fallback149:
    nqp_get_sc_object $P5041, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["BVal"]
    unless_null $P5038, fallback150
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5042
  fallback150:
    find_lex $P5043, "$past"
    $P5044 = $P5038."new"($P5043 :named("value"))
    $P5045 = $P5033."new"($P5044, "clone" :named("op"))
.annotate 'line', 310
    nqp_get_sc_object $P5049, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback151
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5046, $P5050
  fallback151:
    $P5051 = $P5046."new"(_lex_param_2 :named("value"))
    $P5052 = $P5028."new"($P5045, $P5051, "set_sub_code_object 0PP" :named("pirop"))
    $P5053 = $P5004."new"($P5014, $P5021, $P5027, $P5052, "bindattr" :named("op"))
    $P5003."push"($P5053)
.annotate 'line', 315
    find_lex $P5056, "self"
    nqp_decontainerize $P5055, $P5056
    nqp_get_sc_object $P5057, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5058, $P5055, $P5057, "%!code_objects_to_fix_up"
    find_lex $P5059, "$past"
    $P5060 = $P5059."cuid"()
    set $S5001, $P5060
    set $P5054, $P5058[$S5001]
    unless_null $P5054, fallback152
    nqp_get_sc_object $P5061, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5054, $P5061
  fallback152:
    $P5062 = $P5054."push"(_lex_param_2)
    .return ($P5062) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1356803026.47425") :anon :lex :outer("cuid_16_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 326
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    unless $P5007 goto if33_end156 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
  if33_end156:
.annotate 'line', 332
    find_lex $P5011, "self"
    nqp_decontainerize $P5010, $P5011
    $P5012 = $P5010."add_object"($P101)
    set $P102, $P5012
.annotate 'line', 335
    find_lex $P5014, "self"
    nqp_decontainerize $P5013, $P5014
.annotate 'line', 336
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["VM"]
    unless_null $P5015, fallback157
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback157:
.annotate 'line', 338
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["BVal"]
    unless_null $P5020, fallback158
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback158:
    find_lex $P5025, "$past"
    $P5026 = $P5020."new"($P5025 :named("value"))
.annotate 'line', 339
    nqp_get_sc_object $P5030, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["WVal"]
    unless_null $P5027, fallback159
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5031
  fallback159:
    $P5032 = $P5027."new"($P101 :named("value"))
    $P5033 = $P5015."new"($P5026, $P5032, "set_sub_code_object vPP" :named("pirop"))
    $P5013."add_fixup_task"($P5033 :named("deserialize_past"))
.annotate 'line', 343
    find_lex $P5034, "$fixups"
    nqp_get_sc_object $P5038, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback160
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5039
  fallback160:
.annotate 'line', 345
    nqp_get_sc_object $P5043, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["WVal"]
    unless_null $P5040, fallback161
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5044
  fallback161:
    $P5045 = $P5040."new"($P101 :named("value"))
.annotate 'line', 346
    nqp_get_sc_object $P5049, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback162
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5046, $P5050
  fallback162:
    find_lex $P5051, "$code_type"
    $P5052 = $P5046."new"($P5051 :named("value"))
.annotate 'line', 347
    nqp_get_sc_object $P5056, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback163
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5053, $P5057
  fallback163:
    $P5058 = $P5053."new"("$!do" :named("value"))
.annotate 'line', 348
    nqp_get_sc_object $P5062, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["BVal"]
    unless_null $P5059, fallback164
    nqp_get_sc_object $P5063, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5059, $P5063
  fallback164:
    find_lex $P5064, "$past"
    $P5065 = $P5059."new"($P5064 :named("value"))
    $P5066 = $P5035."new"($P5045, $P5052, $P5058, $P5065, "bindattr" :named("op"))
    $P5034."push"($P5066)
.annotate 'line', 350
    find_lex $P5067, "$fixups"
    nqp_get_sc_object $P5071, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5070, $P5071, "QAST"
    get_who $P5069, $P5070
    set $P5068, $P5069["VM"]
    unless_null $P5068, fallback165
    nqp_get_sc_object $P5072, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5068, $P5072
  fallback165:
.annotate 'line', 352
    nqp_get_sc_object $P5076, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["BVal"]
    unless_null $P5073, fallback166
    nqp_get_sc_object $P5077, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5073, $P5077
  fallback166:
    find_lex $P5078, "$past"
    $P5079 = $P5073."new"($P5078 :named("value"))
.annotate 'line', 353
    nqp_get_sc_object $P5083, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["WVal"]
    unless_null $P5080, fallback167
    nqp_get_sc_object $P5084, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5080, $P5084
  fallback167:
    $P5085 = $P5080."new"($P101 :named("value"))
    $P5086 = $P5068."new"($P5079, $P5085, "set_sub_code_object vPP" :named("pirop"))
    $P5067."push"($P5086)
    find_lex $P5088, "self"
    nqp_decontainerize $P5087, $P5088
    nqp_get_sc_object $P5089, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5090, $P5087, $P5089, "%!code_objects_to_fix_up"
.annotate 'line', 357
    find_lex $P5091, "$past"
    $P5092 = $P5091."cuid"()
    set $S5001, $P5092
    new $P5093, 'ResizablePMCArray'
    push $P5093, $P101
    set $P5090[$S5001], $P5093
    find_lex $P5095, "self"
    nqp_decontainerize $P5094, $P5095
    nqp_get_sc_object $P5096, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5097, $P5094, $P5096, "%!code_object_types"
.annotate 'line', 358
    find_lex $P5098, "$past"
    $P5099 = $P5098."cuid"()
    set $S5002, $P5099
    find_lex $P5100, "$code_type"
    set $P5097[$S5002], $P5100
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_17_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 380
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_3 :opt_flag 
    if haz_param_2, default180
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_2, $P5007
  default180:
    if haz_param_3, default181
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_3, $P5008
  default181:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_174
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    unless $I5001 goto if34_end177 
.annotate 'line', 383
    set $P101["name"], _lex_param_2
  if34_end177:
    defined $I5002, _lex_param_3
    unless $I5002 goto if35_end179 
.annotate 'line', 384
    set $P101["repr"], _lex_param_3
  if35_end179:
.annotate 'line', 385
    $P5003 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5003
.annotate 'line', 386
    nqp_decontainerize $P5004, _lex_param_0
    $P5004."add_object"($P102)
    find_lex $P5005, "RETURN"
    $P5006 = $P5005($P102)
    goto lexotic_175
  lexotic_174:
    .get_results ($P5006)
  lexotic_175:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_18_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 397
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 398
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 399
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_19_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 403
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 404
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_20_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 408
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
.annotate 'line', 409
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 410
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_21_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 418
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 420
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 423
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_22_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 427
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 428
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_23_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 431
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 432
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_24_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 436
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 437
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_25_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 441
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_385_1356803026.47425' 
    capture_lex $P5040 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_182
    .lex "RETURN", $P106
.annotate 'line', 443
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback184
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback184:
.annotate 'line', 444
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback185
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback185:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while36_test186:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while36_done190 
  while36_redo188:
    .const 'Sub' $P5022 = 'cuid_385_1356803026.47425' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while36_test186 
  while36_done190:
.annotate 'line', 467
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback207
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback208
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5035
  fallback208:
    unless_null $P5032, vivi_41209
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_41209:
    set $P5031, $P5032
  fallback207:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 470
    $P104()
    new $P5037, 'ResizablePMCArray'
    set_hll_global $P5037, "GLOBAL", $P105
.annotate 'line', 475
    $P101."shift"()
    find_lex $P5038, "RETURN"
    $P5039 = $P5038($P101)
    goto lexotic_183
  lexotic_182:
    .get_results ($P5039)
  lexotic_183:
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1356803026.47425") :anon :lex :outer("cuid_25_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 449
    .const 'Sub' $P5017 = 'cuid_384_1356803026.47425' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 451
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback191
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5010
  fallback191:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next204:
    unless $P5014, for_done206
    shift $P5016, $P5014
  for_redo205:
    .const 'Sub' $P5015 = 'cuid_384_1356803026.47425' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next204
  for_done206:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1356803026.47425") :anon :lex :outer("cuid_385_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 452
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 453
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback196
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5004
  fallback196:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if38_end195 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if38_end195:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if37_end193 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_40203
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 454
.annotate 'line', 455
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback197
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback197:
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback198
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5013
  fallback198:
.annotate 'line', 457
    nqp_get_sc_object $P5017, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback199
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5018
  fallback199:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 458
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback200
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5025
  fallback200:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback201
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5028
  fallback201:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_39202
  catch_handler_40203:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_39202
  skip_handler_39202:
    find_lex $P5034, "%seen"
.annotate 'line', 461
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if37_end193:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_26_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 480
    .param pmc _lex_param_0 
    .const 'Sub' $P5044 = 'cuid_386_1356803026.47425' 
    capture_lex $P5044 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback212
    nqp_get_sc_object $P5013, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback213
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback213:
    unless_null $P5011, vivi_43214
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_43214:
    set $P5010, $P5011
  fallback212:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback215
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5018
  fallback215:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback216
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5019
  fallback216:
    unless $P5008 goto if42_end211 
.annotate 'line', 483
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback217
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback218
    nqp_get_sc_object $P5031, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback218:
    unless_null $P5027, vivi_44219
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_44219:
    set $P5026, $P5027
  fallback217:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback220
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5034
  fallback220:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback221
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5035
  fallback221:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next222:
    unless $P5022, for_done224
    shift $P5037, $P5022
  for_redo223:
    .const 'Sub' $P5036 = 'cuid_386_1356803026.47425' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next222
  for_done224:
  if42_end211:
.annotate 'line', 488
    nqp_get_sc_object $P5041, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback225
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5042
  fallback225:
    $P5043 = $P5038."new"($P101 :named("loadlibs"))
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1356803026.47425") :anon :lex :outer("cuid_26_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 484
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 485
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_27_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 492
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 493
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback226
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback226:
.annotate 'line', 494
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["VM"]
    unless_null $P5007, fallback227
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback227:
    $P5012 = $P5007."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 495
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["VM"]
    unless_null $P5013, fallback228
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5017
  fallback228:
    $P5018 = $P5013."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 496
    nqp_get_sc_object $P5022, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback229
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5023
  fallback229:
.annotate 'line', 498
    nqp_get_sc_object $P5027, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["VM"]
    unless_null $P5024, fallback230
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5028
  fallback230:
    $P5029 = $P5024."new"("getinterp P" :named("pirop"))
.annotate 'line', 499
    nqp_get_sc_object $P5033, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["VM"]
    unless_null $P5030, fallback231
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5034
  fallback231:
    nqp_get_sc_object $P5038, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["SVal"]
    unless_null $P5035, fallback232
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5039
  fallback232:
    $P5040 = $P5035."new"("LexPad" :named("value"))
    $P5041 = $P5030."new"($P5040, "get_class Ps" :named("pirop"))
.annotate 'line', 500
    nqp_get_sc_object $P5045, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback233
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5046
  fallback233:
    nqp_get_sc_object $P5050, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["SVal"]
    unless_null $P5047, fallback234
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5047, $P5051
  fallback234:
    $P5052 = $P5047."new"("NQPLexPad" :named("value"))
    $P5053 = $P5042."new"($P5052, "get_class Ps" :named("pirop"))
    $P5054 = $P5019."new"($P5029, $P5041, $P5053, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5055 = $P5002."new"($P5012, $P5018, $P5054)
    $P5056 = $P5001."add_load_dependency_task"($P5055 :named("deserialize_past"))
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_28_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 506
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 507
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_29_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 512
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 513
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_30_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 518
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_387_1356803026.47425' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_235
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while45_test237:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while45_done241 
  while45_redo239:
    .const 'Sub' $P5006 = 'cuid_387_1356803026.47425' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while45_test237 
  while45_done241:
    box $P5010, 0
    goto lexotic_236
  lexotic_235:
    .get_results ($P5010)
  lexotic_236:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1356803026.47425") :anon :lex :outer("cuid_30_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 520
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 522
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback242
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5010
  fallback242:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if46_end244 
.annotate 'line', 523
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback245
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5015
  fallback245:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if46_end244:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_31_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 531
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5005, 'ExceptionHandler'
    set_label $P5005, catch_handler_48247
    $P5005.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5005
.annotate 'line', 533
.annotate 'line', 534
    nqp_decontainerize $P5003, _lex_param_0
    $P5003."find_sym"(_lex_param_2)
    box $P5004, 1
    set $P101, $P5004
    set $P5006, $P101
    pop_eh 
    goto skip_handler_47246
  catch_handler_48247:
    .get_results ($P5005) 
    set $I10001, 1
    set $P5005["handled"], $I10001
    nqp_get_sc_object $P10001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5005
    pop_upto_eh $P5005
    pop_eh 
    set $P5006, $P10001
    goto skip_handler_47246
  skip_handler_47246:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_32_1356803026.47425") :anon :lex :outer("cuid_33_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 543
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_389_1356803026.47425' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_391_1356803026.47425' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_392_1356803026.47425' 
    capture_lex $P5018 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_248
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    if $N5001 goto unless49_end251 
.annotate 'line', 545
    box $P5002, "Cannot look up empty name"
    die $P5002
  unless49_end251:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    unless $I5001 goto if50_end253 
    .const 'Sub' $P5003 = 'cuid_389_1356803026.47425' 
    capture_lex $P5003
    $P5004 = $P5003()
  if50_end253:
    find_dynamic_lex $P5005, "$*GLOBALish"
    unless_null $P5005, fallback266
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$GLOBALish"]
    unless_null $P5006, fallback267
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5009
  fallback267:
    unless_null $P5006, vivi_54268
    die "Contextual $*GLOBALish not found"
    box $P5010, "Contextual $*GLOBALish not found"
    set $P5006, $P5010
  vivi_54268:
    set $P5005, $P5006
  fallback266:
    set $P101, $P5005
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    unless $I5002 goto if55_end270 
    .const 'Sub' $P5011 = 'cuid_391_1356803026.47425' 
    capture_lex $P5011
    $P5012 = $P5011()
  if55_end270:
    set $P5013, _lex_param_1
    iter $P5015, _lex_param_1
  for_next286:
    unless $P5015, for_done288
    shift $P5017, $P5015
  for_redo287:
    .const 'Sub' $P5016 = 'cuid_392_1356803026.47425' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next286
  for_done288:
    goto lexotic_249
  lexotic_248:
    .get_results ($P101)
  lexotic_249:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1356803026.47425") :anon :lex :outer("cuid_32_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 549
    .const 'Sub' $P5015 = 'cuid_388_1356803026.47425' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback254
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback254:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while51_test255:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while51_done259 
  while51_redo257:
    .const 'Sub' $P5011 = 'cuid_388_1356803026.47425' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while51_test255 
  while51_done259:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1356803026.47425") :anon :lex :outer("cuid_389_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 552
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 554
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback260
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5010
  fallback260:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if52_end262 
.annotate 'line', 555
    exists $I5002, $P101["value"]
    unless $I5002 goto if53_else263 
.annotate 'line', 556
    set $P5014, $P101["value"]
    unless_null $P5014, fallback265
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5015
  fallback265:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if53_end264
  if53_else263:
.annotate 'line', 559
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if53_end264:
    set $P5020, $P5019
  if52_end262:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1356803026.47425") :anon :lex :outer("cuid_32_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 570
    .const 'Sub' $P5015 = 'cuid_390_1356803026.47425' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback271
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback271:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while56_test272:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while56_done276 
  while56_redo274:
    .const 'Sub' $P5011 = 'cuid_390_1356803026.47425' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while56_test272 
  while56_done276:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1356803026.47425") :anon :lex :outer("cuid_391_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 573
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 575
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback277
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5010
  fallback277:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if57_end279 
.annotate 'line', 576
    exists $I5002, $P101["value"]
    unless $I5002 goto if58_else280 
.annotate 'line', 577
    set $P5013, $P101["value"]
    unless_null $P5013, fallback282
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5014
  fallback282:
    store_lex "$result", $P5013
.annotate 'line', 579
    find_lex $P5015, "@name"
    $P5015."shift"()
    box $P5016, 0
    store_lex "$i", $P5016
    set $P5019, $P5016
    goto if58_end281
  if58_else280:
.annotate 'line', 582
    find_lex $P5017, "$first"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if58_end281:
    set $P5020, $P5019
  if57_end279:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1356803026.47425") :anon :lex :outer("cuid_32_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 590
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if59_else283 
.annotate 'line', 591
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback285
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback285:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if59_end284
  if59_else283:
.annotate 'line', 594
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if59_end284:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 605
    .const 'Sub' $P5259 = 'cuid_34_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_35_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_36_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_37_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_38_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_39_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_40_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_42_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_44_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_45_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_46_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_48_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_49_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_50_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_51_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_52_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_53_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_54_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_55_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_56_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_57_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_58_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_59_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_60_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_61_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_62_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_63_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_64_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_66_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_67_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_68_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_69_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_70_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_71_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_72_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_73_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_74_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_75_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_76_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_77_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_78_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_79_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_80_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_81_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_82_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_83_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_84_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_85_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_86_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_87_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_88_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_89_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_92_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_93_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_94_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_95_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_96_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_97_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_98_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_99_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_100_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_101_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_102_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_103_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_104_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_105_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_106_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_107_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_108_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_109_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_110_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_111_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_112_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_113_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_114_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_115_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_116_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_117_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_118_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_119_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_120_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_121_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_122_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_123_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_124_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_125_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_126_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_127_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_128_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_130_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_131_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_132_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_133_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_134_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_135_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_136_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_137_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_138_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_139_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_140_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_141_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_142_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_143_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_144_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_145_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_146_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_147_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_148_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_149_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_150_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_151_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_152_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_153_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_154_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_155_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_156_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_157_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_158_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_159_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_160_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_161_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_162_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_163_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_164_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_165_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_166_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_167_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_168_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_169_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_170_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_171_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_172_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_173_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_174_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_175_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_176_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_177_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_178_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_179_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_180_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_181_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_182_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_183_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_184_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_185_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_186_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_187_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_188_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_189_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_190_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_191_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_192_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_193_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_194_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_195_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_196_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_197_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_198_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_199_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_200_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_201_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_202_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_203_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_204_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_205_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_206_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_207_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_208_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_209_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_210_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_211_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_212_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_213_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_214_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_215_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_216_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_217_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_218_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_219_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_220_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_221_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_222_1356803026.47425' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_223_1356803026.47425' 
    capture_lex $P5259 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1271
.annotate 'line', 1272
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback289
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback289:
    $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1273
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "NQP"
    get_who $P5007, $P5008
    set $P5006, $P5007["Grammar"]
    unless_null $P5006, fallback290
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback290:
    $P5006."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1274
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "NQP"
    get_who $P5012, $P5013
    set $P5011, $P5012["Grammar"]
    unless_null $P5011, fallback291
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback291:
    $P5011."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1275
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Grammar"]
    unless_null $P5016, fallback292
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5020
  fallback292:
    $P5016."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1276
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5023, $P5024, "NQP"
    get_who $P5022, $P5023
    set $P5021, $P5022["Grammar"]
    unless_null $P5021, fallback293
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5025
  fallback293:
    $P5021."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1277
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5028, $P5029, "NQP"
    get_who $P5027, $P5028
    set $P5026, $P5027["Grammar"]
    unless_null $P5026, fallback294
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5030
  fallback294:
    $P5026."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1278
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback295
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5031, $P5035
  fallback295:
    $P5031."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1279
    nqp_get_sc_object $P5039, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5038, $P5039, "NQP"
    get_who $P5037, $P5038
    set $P5036, $P5037["Grammar"]
    unless_null $P5036, fallback296
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5040
  fallback296:
    $P5036."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1280
    nqp_get_sc_object $P5044, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5043, $P5044, "NQP"
    get_who $P5042, $P5043
    set $P5041, $P5042["Grammar"]
    unless_null $P5041, fallback297
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5041, $P5045
  fallback297:
    $P5041."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1281
    nqp_get_sc_object $P5049, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5048, $P5049, "NQP"
    get_who $P5047, $P5048
    set $P5046, $P5047["Grammar"]
    unless_null $P5046, fallback298
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5046, $P5050
  fallback298:
    $P5046."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1282
    nqp_get_sc_object $P5054, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback299
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5051, $P5055
  fallback299:
    $P5051."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1283
    nqp_get_sc_object $P5059, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5058, $P5059, "NQP"
    get_who $P5057, $P5058
    set $P5056, $P5057["Grammar"]
    unless_null $P5056, fallback300
    nqp_get_sc_object $P5060, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5056, $P5060
  fallback300:
    $P5056."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1284
    nqp_get_sc_object $P5064, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback301
    nqp_get_sc_object $P5065, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5061, $P5065
  fallback301:
    $P5061."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1285
    nqp_get_sc_object $P5069, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5068, $P5069, "NQP"
    get_who $P5067, $P5068
    set $P5066, $P5067["Grammar"]
    unless_null $P5066, fallback302
    nqp_get_sc_object $P5070, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5066, $P5070
  fallback302:
    $P5066."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1286
    nqp_get_sc_object $P5074, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5073, $P5074, "NQP"
    get_who $P5072, $P5073
    set $P5071, $P5072["Grammar"]
    unless_null $P5071, fallback303
    nqp_get_sc_object $P5075, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5071, $P5075
  fallback303:
    $P5071."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 605
    .const 'Sub' $P5076 = 'cuid_34_1356803026.47425' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_35_1356803026.47425' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_36_1356803026.47425' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_37_1356803026.47425' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_38_1356803026.47425' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_39_1356803026.47425' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_40_1356803026.47425' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_42_1356803026.47425' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_44_1356803026.47425' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_45_1356803026.47425' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_46_1356803026.47425' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_48_1356803026.47425' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_49_1356803026.47425' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_50_1356803026.47425' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_51_1356803026.47425' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_52_1356803026.47425' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_53_1356803026.47425' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_54_1356803026.47425' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_55_1356803026.47425' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_56_1356803026.47425' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_57_1356803026.47425' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_58_1356803026.47425' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_59_1356803026.47425' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_60_1356803026.47425' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_61_1356803026.47425' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_62_1356803026.47425' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_63_1356803026.47425' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_64_1356803026.47425' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_66_1356803026.47425' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_67_1356803026.47425' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_68_1356803026.47425' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_69_1356803026.47425' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_70_1356803026.47425' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_71_1356803026.47425' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_72_1356803026.47425' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_73_1356803026.47425' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_74_1356803026.47425' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_75_1356803026.47425' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_76_1356803026.47425' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_77_1356803026.47425' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_78_1356803026.47425' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_79_1356803026.47425' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_80_1356803026.47425' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_81_1356803026.47425' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_82_1356803026.47425' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_83_1356803026.47425' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_84_1356803026.47425' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_85_1356803026.47425' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_86_1356803026.47425' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_87_1356803026.47425' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_88_1356803026.47425' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_89_1356803026.47425' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_92_1356803026.47425' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_93_1356803026.47425' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_94_1356803026.47425' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_95_1356803026.47425' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_96_1356803026.47425' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_97_1356803026.47425' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_98_1356803026.47425' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_99_1356803026.47425' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_100_1356803026.47425' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_101_1356803026.47425' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_102_1356803026.47425' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_103_1356803026.47425' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_104_1356803026.47425' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_105_1356803026.47425' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_106_1356803026.47425' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_107_1356803026.47425' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_108_1356803026.47425' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_109_1356803026.47425' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_110_1356803026.47425' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_111_1356803026.47425' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_112_1356803026.47425' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_113_1356803026.47425' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_114_1356803026.47425' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_115_1356803026.47425' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_116_1356803026.47425' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_117_1356803026.47425' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_118_1356803026.47425' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_119_1356803026.47425' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_120_1356803026.47425' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_121_1356803026.47425' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_122_1356803026.47425' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_123_1356803026.47425' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_124_1356803026.47425' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_125_1356803026.47425' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_126_1356803026.47425' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_127_1356803026.47425' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_128_1356803026.47425' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_130_1356803026.47425' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_131_1356803026.47425' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_132_1356803026.47425' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_133_1356803026.47425' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_134_1356803026.47425' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_135_1356803026.47425' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_136_1356803026.47425' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_137_1356803026.47425' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_138_1356803026.47425' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_139_1356803026.47425' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_140_1356803026.47425' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_141_1356803026.47425' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_142_1356803026.47425' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_143_1356803026.47425' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_144_1356803026.47425' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_145_1356803026.47425' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_146_1356803026.47425' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_147_1356803026.47425' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_148_1356803026.47425' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_149_1356803026.47425' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_150_1356803026.47425' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_151_1356803026.47425' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_152_1356803026.47425' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_153_1356803026.47425' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_154_1356803026.47425' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_155_1356803026.47425' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_156_1356803026.47425' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_157_1356803026.47425' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_158_1356803026.47425' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_159_1356803026.47425' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_160_1356803026.47425' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_161_1356803026.47425' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_162_1356803026.47425' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_163_1356803026.47425' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_164_1356803026.47425' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_165_1356803026.47425' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_166_1356803026.47425' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_167_1356803026.47425' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_168_1356803026.47425' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_169_1356803026.47425' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_170_1356803026.47425' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_171_1356803026.47425' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_172_1356803026.47425' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_173_1356803026.47425' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_174_1356803026.47425' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_175_1356803026.47425' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_176_1356803026.47425' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_177_1356803026.47425' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_178_1356803026.47425' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_179_1356803026.47425' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_180_1356803026.47425' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_181_1356803026.47425' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_182_1356803026.47425' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_183_1356803026.47425' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_184_1356803026.47425' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_185_1356803026.47425' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_186_1356803026.47425' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_187_1356803026.47425' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_188_1356803026.47425' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_189_1356803026.47425' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_190_1356803026.47425' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_191_1356803026.47425' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_192_1356803026.47425' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_193_1356803026.47425' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_194_1356803026.47425' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_195_1356803026.47425' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_196_1356803026.47425' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_197_1356803026.47425' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_198_1356803026.47425' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_199_1356803026.47425' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_200_1356803026.47425' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_201_1356803026.47425' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_202_1356803026.47425' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_203_1356803026.47425' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_204_1356803026.47425' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_205_1356803026.47425' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_206_1356803026.47425' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_207_1356803026.47425' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_208_1356803026.47425' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_209_1356803026.47425' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_210_1356803026.47425' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_211_1356803026.47425' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_212_1356803026.47425' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_213_1356803026.47425' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_214_1356803026.47425' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_215_1356803026.47425' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_216_1356803026.47425' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_217_1356803026.47425' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_218_1356803026.47425' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_219_1356803026.47425' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_220_1356803026.47425' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_221_1356803026.47425' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_222_1356803026.47425' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_223_1356803026.47425' 
    capture_lex $P5258
    .return ($P5258) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_34_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 606
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback307
    nqp_get_sc_object $P5022, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback308
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback308:
    unless_null $P5020, vivi_61309
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_61309:
    set $P101, $P5020
  fallback307:
    nqp_get_sc_object $P5030, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback310
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5031
  fallback310:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback311
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback312
    nqp_get_sc_object $P5036, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback312:
    unless_null $P5032, vivi_62313
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_62313:
    set $P101, $P5032
  fallback311:
    nqp_get_sc_object $P5042, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback314
    nqp_get_sc_object $P5043, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5043
  fallback314:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback315
    nqp_get_sc_object $P5046, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback316
    nqp_get_sc_object $P5048, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback316:
    unless_null $P5044, vivi_63317
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_63317:
    set $P101, $P5044
  fallback315:
    nqp_get_sc_object $P5054, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback318
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5051, $P5055
  fallback318:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback319
    nqp_get_sc_object $P5058, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback320
    nqp_get_sc_object $P5060, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback320:
    unless_null $P5056, vivi_64321
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_64321:
    set $P101, $P5056
  fallback319:
    nqp_get_sc_object $P5066, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback322
    nqp_get_sc_object $P5067, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5063, $P5067
  fallback322:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback326
    nqp_get_sc_object $P5077, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback327
    nqp_get_sc_object $P5079, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback327:
    unless_null $P5075, vivi_66328
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_66328:
    set $P102, $P5075
  fallback326:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback329
    nqp_get_sc_object $P5085, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback330
    nqp_get_sc_object $P5087, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback330:
    unless_null $P5083, vivi_67331
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_67331:
    set $P102, $P5083
  fallback329:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
.annotate 'line', 625
    nqp_decontainerize $P5092, _lex_param_0
    $P5093 = $P5092."target"()
    set $S5004, $P5093
    nqp_sha1 $S5003, $S5004
    concat $S5002, $S5003, "-"
    time $N5001
    set $S5005, $N5001
    concat $S5001, $S5002, $S5005
    box $P5094, $S5001
    set $P104, $P5094
    isnull $I5001, $P103
    unless $I5001 goto if68_else332 
.annotate 'line', 628
    nqp_get_sc_object $P5098, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5097, $P5098, "NQP"
    get_who $P5096, $P5097
    set $P5095, $P5096["World"]
    unless_null $P5095, fallback334
    nqp_get_sc_object $P5099, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5095, $P5099
  fallback334:
    $P5100 = $P5095."new"($P104 :named("handle"))
    set $P5107, $P5100
    goto if68_end333
  if68_else332:
.annotate 'line', 629
    nqp_get_sc_object $P5104, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5103, $P5104, "NQP"
    get_who $P5102, $P5103
    set $P5101, $P5102["World"]
    unless_null $P5101, fallback335
    nqp_get_sc_object $P5105, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5101, $P5105
  fallback335:
    $P5106 = $P5101."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5107, $P5106
  if68_end333:
    set $P105, $P5107
    box $P5108, ""
    set $P106, $P5108
    box $P5109, ""
    set $P107, $P5109
    box $P5110, ""
    set $P108, $P5110
    box $P5111, 0
    set $P109, $P5111
    box $P5112, 0
    set $P110, $P5112
    box $P5113, 0
    set $P111, $P5113
.annotate 'line', 638
    nqp_decontainerize $P5121, _lex_param_0
    $P5122 = $P5121."comp_unit"()
    .return ($P5122) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_35_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 643
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx70_tgt
    .local int rx70_pos
    .local int rx70_off
    .local int rx70_eos
    .local int rx70_rep
    .local pmc rx70_cur
    .local pmc rx70_curclass
    .local pmc rx70_bstack
    .local pmc rx70_cstack
    (rx70_cur, rx70_tgt, rx70_pos, rx70_curclass, rx70_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx70_cur
    length rx70_eos, rx70_tgt
    eq $I19, 1, rx70_restart341
    gt rx70_pos, rx70_eos, rx70_fail342
    repr_get_attr_int $I11, self, rx70_curclass, "$!from"
    ne $I11, -1, rxscan71_done348
    goto rxscan71_scan347
  rxscan71_loop346:
    inc rx70_pos
    gt rx70_pos, rx70_eos, rx70_fail342
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!from", rx70_pos
  rxscan71_scan347:
    nqp_rxmark rx70_bstack, rxscan71_loop346, rx70_pos, 0
  rxscan71_done348:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail342
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxmark rx70_bstack, rxquantr73_done351, rx70_pos, 0
  rxquantr73_loop350:
  alt74_0353:
    nqp_rxmark rx70_bstack, alt74_1354, rx70_pos, 0
    add $I11, rx70_pos, 1
    gt $I11, rx70_eos, rx70_fail342
    substr $S10, rx70_tgt, rx70_pos, 1
    ne $S10, ucs4:"-", rx70_fail342
    add rx70_pos, 1
    goto alt74_end352
  alt74_1354:
    ge rx70_pos, rx70_eos, rx70_fail342
    substr $S11, rx70_tgt, rx70_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx70_fail342
    inc rx70_pos
  alt74_end352:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail342
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxpeek $I19, rx70_bstack, rxquantr73_done351
    inc $I19
    inc $I19
    set rx70_rep, rx70_bstack[$I19]
    nqp_rxcommit rx70_bstack, rxquantr73_done351
    inc rx70_rep
    nqp_rxmark rx70_bstack, rxquantr73_done351, rx70_pos, rx70_rep
    goto rxquantr73_loop350
  rxquantr73_done351:
    rx70_cur."!cursor_pass"(rx70_pos, "identifier", 'backtrack'=>1)
    .return (rx70_cur)
  rx70_restart341:
    repr_get_attr_obj rx70_cstack, rx70_cur, rx70_curclass, "$!cstack"
  rx70_fail342:
    unless rx70_bstack, rx70_done340
    pop $I19, rx70_bstack
    if_null rx70_cstack, rx70_cstack_done345
    unless rx70_cstack, rx70_cstack_done345
    dec $I19
    set $P11, rx70_cstack[$I19]
  rx70_cstack_done345:
    pop rx70_rep, rx70_bstack
    pop rx70_pos, rx70_bstack
    pop $I19, rx70_bstack
    lt rx70_pos, -1, rx70_done340
    lt rx70_pos, 0, rx70_fail342
    eq $I19, 0, rx70_fail342
    nqp_islist $I20, rx70_cstack
    unless $I20, rx70_jump343
    elements $I18, rx70_bstack
    le $I18, 0, rx70_cut344
    dec $I18
    set $I18, rx70_bstack[$I18]
  rx70_cut344:
    assign rx70_cstack, $I18
  rx70_jump343:
    jump $I19
  rx70_done340:
    rx70_cur."!cursor_fail"()
    .return (rx70_cur) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_36_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 645
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    (rx76_cur, rx76_tgt, rx76_pos, rx76_curclass, rx76_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart358
    gt rx76_pos, rx76_eos, rx76_fail359
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done365
    goto rxscan77_scan364
  rxscan77_loop363:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail359
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan364:
    nqp_rxmark rx76_bstack, rxscan77_loop363, rx76_pos, 0
  rxscan77_done365:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail359
    nqp_rxmark rx76_bstack, rxsubrule78_pass366, -1, 0
  rxsubrule78_pass366:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxmark rx76_bstack, rxquantr79_done368, rx76_pos, 0
  rxquantr79_loop367:
    add $I11, rx76_pos, 2
    gt $I11, rx76_eos, rx76_fail359
    substr $S10, rx76_tgt, rx76_pos, 2
    ne $S10, ucs4:"::", rx76_fail359
    add rx76_pos, 2
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail359
    nqp_rxmark rx76_bstack, rxsubrule80_pass369, -1, 0
  rxsubrule80_pass369:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxpeek $I19, rx76_bstack, rxquantr79_done368
    inc $I19
    inc $I19
    set rx76_rep, rx76_bstack[$I19]
    nqp_rxcommit rx76_bstack, rxquantr79_done368
    inc rx76_rep
    nqp_rxmark rx76_bstack, rxquantr79_done368, rx76_pos, rx76_rep
    goto rxquantr79_loop367
  rxquantr79_done368:
    rx76_cur."!cursor_pass"(rx76_pos, "name", 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart358:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail359:
    unless rx76_bstack, rx76_done357
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done362
    unless rx76_cstack, rx76_cstack_done362
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done362:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done357
    lt rx76_pos, 0, rx76_fail359
    eq $I19, 0, rx76_fail359
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump360
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut361
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut361:
    assign rx76_cstack, $I18
  rx76_jump360:
    jump $I19
  rx76_done357:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_37_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 647
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    (rx81_cur, rx81_tgt, rx81_pos, rx81_curclass, rx81_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart372
    gt rx81_pos, rx81_eos, rx81_fail373
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done379
    goto rxscan82_scan378
  rxscan82_loop377:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail373
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan378:
    nqp_rxmark rx81_bstack, rxscan82_loop377, rx81_pos, 0
  rxscan82_done379:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail373
    nqp_rxmark rx81_bstack, rxsubrule83_pass380, -1, 0
  rxsubrule83_pass380:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxmark rx81_bstack, rxquantr84_done382, rx81_pos, 0
  rxquantr84_loop381:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail373
    goto rxsubrule85_pass383
  rxsubrule85_back384:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail373
  rxsubrule85_pass383:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule85_back384
    push rx81_bstack, $I11
    push rx81_bstack, 0
    push rx81_bstack, rx81_pos
    elements $I11, rx81_cstack
    push rx81_bstack, $I11
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxpeek $I19, rx81_bstack, rxquantr84_done382
    inc $I19
    inc $I19
    set rx81_rep, rx81_bstack[$I19]
    nqp_rxcommit rx81_bstack, rxquantr84_done382
    inc rx81_rep
  rxquantr84_done382:
    rx81_cur."!cursor_pass"(rx81_pos, "deflongname", 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart372:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail373:
    unless rx81_bstack, rx81_done371
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done376
    unless rx81_cstack, rx81_cstack_done376
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done376:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done371
    lt rx81_pos, 0, rx81_fail373
    eq $I19, 0, rx81_fail373
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump374
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut375
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut375:
    assign rx81_cstack, $I18
  rx81_jump374:
    jump $I19
  rx81_done371:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_38_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 651
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx86_tgt
    .local int rx86_pos
    .local int rx86_off
    .local int rx86_eos
    .local int rx86_rep
    .local pmc rx86_cur
    .local pmc rx86_curclass
    .local pmc rx86_bstack
    .local pmc rx86_cstack
    (rx86_cur, rx86_tgt, rx86_pos, rx86_curclass, rx86_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx86_cur
    length rx86_eos, rx86_tgt
    eq $I19, 1, rx86_restart387
    gt rx86_pos, rx86_eos, rx86_fail388
    repr_get_attr_int $I11, self, rx86_curclass, "$!from"
    ne $I11, -1, rxscan87_done394
    goto rxscan87_scan393
  rxscan87_loop392:
    inc rx86_pos
    gt rx86_pos, rx86_eos, rx86_fail388
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!from", rx86_pos
  rxscan87_scan393:
    nqp_rxmark rx86_bstack, rxscan87_loop392, rx86_pos, 0
  rxscan87_done394:
    nqp_rxmark rx86_bstack, rxquantr88_done396, rx86_pos, 0
  rxquantr88_loop395:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt89_0398
    nqp_push_label $P11, alt89_1403
    nqp_rxmark rx86_bstack, alt89_end397, -1, 0
    rx86_cur."!alt"(rx86_pos, "alt_nfa__1_1356803027.89583", $P11)
    goto rx86_fail388
  alt89_0398:
    nqp_rxmark rx86_bstack, rxquantr90_done400, rx86_pos, 0
  rxquantr90_loop399:
    ge rx86_pos, rx86_eos, rx86_fail388
    substr $S11, rx86_tgt, rx86_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx86_fail388
    inc rx86_pos
    nqp_rxpeek $I19, rx86_bstack, rxquantr90_done400
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr90_done400
    inc rx86_rep
    nqp_rxmark rx86_bstack, rxquantr90_done400, rx86_pos, rx86_rep
    goto rxquantr90_loop399
  rxquantr90_done400:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor91_done401
    ne rx86_pos, rx86_eos, rx86_fail388
    eq rx86_pos, 0, rxanchor91_done401
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail388
  rxanchor91_done401:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail388
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail388
    goto alt89_end397
  alt89_1403:
    nqp_rxmark rx86_bstack, rxquantr93_done405, rx86_pos, 0
  rxquantr93_loop404:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."unv"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail388
    goto rxsubrule94_pass406
  rxsubrule94_back407:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail388
  rxsubrule94_pass406:
    rx86_cstack = rx86_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule94_back407
    push rx86_bstack, $I11
    push rx86_bstack, 0
    push rx86_bstack, rx86_pos
    elements $I11, rx86_cstack
    push rx86_bstack, $I11
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    nqp_rxpeek $I19, rx86_bstack, rxquantr93_done405
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr93_done405
    inc rx86_rep
  rxquantr93_done405:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor95_done408
    ne rx86_pos, rx86_eos, rx86_fail388
    eq rx86_pos, 0, rxanchor95_done408
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail388
  rxanchor95_done408:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail388
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail388
    goto alt89_end397
  alt89_end397:
    nqp_rxpeek $I19, rx86_bstack, rxquantr88_done396
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr88_done396
    inc rx86_rep
  rxquantr88_done396:
    rx86_cur."!cursor_pass"(rx86_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx86_cur)
  rx86_restart387:
    repr_get_attr_obj rx86_cstack, rx86_cur, rx86_curclass, "$!cstack"
  rx86_fail388:
    unless rx86_bstack, rx86_done386
    pop $I19, rx86_bstack
    if_null rx86_cstack, rx86_cstack_done391
    unless rx86_cstack, rx86_cstack_done391
    dec $I19
    set $P11, rx86_cstack[$I19]
  rx86_cstack_done391:
    pop rx86_rep, rx86_bstack
    pop rx86_pos, rx86_bstack
    pop $I19, rx86_bstack
    lt rx86_pos, -1, rx86_done386
    lt rx86_pos, 0, rx86_fail388
    eq $I19, 0, rx86_fail388
    nqp_islist $I20, rx86_cstack
    unless $I20, rx86_jump389
    elements $I18, rx86_bstack
    le $I18, 0, rx86_cut390
    dec $I18
    set $I18, rx86_bstack[$I18]
  rx86_cut390:
    assign rx86_cstack, $I18
  rx86_jump389:
    jump $I19
  rx86_done386:
    rx86_cur."!cursor_fail"()
    .return (rx86_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_39_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 658
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx97_tgt
    .local int rx97_pos
    .local int rx97_off
    .local int rx97_eos
    .local int rx97_rep
    .local pmc rx97_cur
    .local pmc rx97_curclass
    .local pmc rx97_bstack
    .local pmc rx97_cstack
    (rx97_cur, rx97_tgt, rx97_pos, rx97_curclass, rx97_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx97_cur
    length rx97_eos, rx97_tgt
    eq $I19, 1, rx97_restart412
    gt rx97_pos, rx97_eos, rx97_fail413
    repr_get_attr_int $I11, self, rx97_curclass, "$!from"
    ne $I11, -1, rxscan98_done419
    goto rxscan98_scan418
  rxscan98_loop417:
    inc rx97_pos
    gt rx97_pos, rx97_eos, rx97_fail413
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!from", rx97_pos
  rxscan98_scan418:
    nqp_rxmark rx97_bstack, rxscan98_loop417, rx97_pos, 0
  rxscan98_done419:
  alt99_0421:
    nqp_rxmark rx97_bstack, alt99_1422, rx97_pos, 0
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail413
    goto alt99_end420
  alt99_1422:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."ww"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    ge $I11, 0, rx97_fail413
    nqp_rxmark rx97_bstack, rxquantr100_done424, rx97_pos, 0
  rxquantr100_loop423:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt101_0426
    nqp_push_label $P11, alt101_1429
    nqp_push_label $P11, alt101_2432
    nqp_push_label $P11, alt101_3435
    nqp_rxmark rx97_bstack, alt101_end425, -1, 0
    rx97_cur."!alt"(rx97_pos, "alt_nfa__2_1356803027.91348", $P11)
    goto rx97_fail413
  alt101_0426:
    nqp_rxmark rx97_bstack, rxquantr102_done428, -1, 0
  rxquantr102_loop427:
    ge rx97_pos, rx97_eos, rx97_fail413
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx97_fail413
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr102_done428
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr102_done428
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr102_done428, rx97_pos, rx97_rep
    goto rxquantr102_loop427
  rxquantr102_done428:
    goto alt101_end425
  alt101_1429:
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail413
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:"#", rx97_fail413
    add rx97_pos, 1
    nqp_rxmark rx97_bstack, rxquantr103_done431, rx97_pos, 0
  rxquantr103_loop430:
    ge rx97_pos, rx97_eos, rx97_fail413
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, rx97_pos
    if $I11, rx97_fail413
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr103_done431
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr103_done431
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr103_done431, rx97_pos, rx97_rep
    goto rxquantr103_loop430
  rxquantr103_done431:
    goto alt101_end425
  alt101_2432:
    eq rx97_pos, 0, rxanchor104_done433
    ge rx97_pos, rx97_eos, rx97_fail413
    sub $I11, rx97_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, $I11
    unless $I11, rx97_fail413
  rxanchor104_done433:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail413
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    goto alt101_end425
  alt101_3435:
    nqp_rxmark rx97_bstack, rxquantr106_done437, -1, 0
  rxquantr106_loop436:
    ge rx97_pos, rx97_eos, rx97_fail413
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx97_fail413
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr106_done437
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr106_done437
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr106_done437, rx97_pos, rx97_rep
    goto rxquantr106_loop436
  rxquantr106_done437:
    goto alt101_end425
  alt101_end425:
    nqp_rxpeek $I19, rx97_bstack, rxquantr100_done424
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr100_done424
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr100_done424, rx97_pos, rx97_rep
    goto rxquantr100_loop423
  rxquantr100_done424:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail413
  alt99_end420:
    rx97_cur."!cursor_pass"(rx97_pos, "ws", 'backtrack'=>1)
    .return (rx97_cur)
  rx97_restart412:
    repr_get_attr_obj rx97_cstack, rx97_cur, rx97_curclass, "$!cstack"
  rx97_fail413:
    unless rx97_bstack, rx97_done411
    pop $I19, rx97_bstack
    if_null rx97_cstack, rx97_cstack_done416
    unless rx97_cstack, rx97_cstack_done416
    dec $I19
    set $P11, rx97_cstack[$I19]
  rx97_cstack_done416:
    pop rx97_rep, rx97_bstack
    pop rx97_pos, rx97_bstack
    pop $I19, rx97_bstack
    lt rx97_pos, -1, rx97_done411
    lt rx97_pos, 0, rx97_fail413
    eq $I19, 0, rx97_fail413
    nqp_islist $I20, rx97_cstack
    unless $I20, rx97_jump414
    elements $I18, rx97_bstack
    le $I18, 0, rx97_cut415
    dec $I18
    set $I18, rx97_bstack[$I18]
  rx97_cut415:
    assign rx97_cstack, $I18
  rx97_jump414:
    jump $I19
  rx97_done411:
    rx97_cur."!cursor_fail"()
    .return (rx97_cur) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_40_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 669
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1356803026.47425' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx107_tgt
    .local int rx107_pos
    .local int rx107_off
    .local int rx107_eos
    .local int rx107_rep
    .local pmc rx107_cur
    .local pmc rx107_curclass
    .local pmc rx107_bstack
    .local pmc rx107_cstack
    (rx107_cur, rx107_tgt, rx107_pos, rx107_curclass, rx107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx107_cur
    length rx107_eos, rx107_tgt
    eq $I19, 1, rx107_restart440
    gt rx107_pos, rx107_eos, rx107_fail441
    repr_get_attr_int $I11, self, rx107_curclass, "$!from"
    ne $I11, -1, rxscan108_done447
    goto rxscan108_scan446
  rxscan108_loop445:
    inc rx107_pos
    gt rx107_pos, rx107_eos, rx107_fail441
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!from", rx107_pos
  rxscan108_scan446:
    nqp_rxmark rx107_bstack, rxscan108_loop445, rx107_pos, 0
  rxscan108_done447:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt109_0449
    nqp_push_label $P11, alt109_1467
    nqp_push_label $P11, alt109_2472
    nqp_rxmark rx107_bstack, alt109_end448, -1, 0
    rx107_cur."!alt"(rx107_pos, "alt_nfa__4_1356803027.93278", $P11)
    goto rx107_fail441
  alt109_0449:
    eq rx107_pos, 0, rxanchor110_done450
    ge rx107_pos, rx107_eos, rx107_fail441
    sub $I11, rx107_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, $I11
    unless $I11, rx107_fail441
  rxanchor110_done450:
    .const 'Sub' $P5001 = 'cuid_41_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail441
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail441
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    goto alt109_end448
  alt109_1467:
    nqp_rxmark rx107_bstack, rxquantr116_done469, rx107_pos, 0
  rxquantr116_loop468:
    ge rx107_pos, rx107_eos, rx107_fail441
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail441
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr116_done469
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr116_done469
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr116_done469, rx107_pos, rx107_rep
    goto rxquantr116_loop468
  rxquantr116_done469:
    add $I11, rx107_pos, 1
    gt $I11, rx107_eos, rx107_fail441
    substr $S10, rx107_tgt, rx107_pos, 1
    ne $S10, ucs4:"#", rx107_fail441
    add rx107_pos, 1
    nqp_rxmark rx107_bstack, rxquantr117_done471, rx107_pos, 0
  rxquantr117_loop470:
    ge rx107_pos, rx107_eos, rx107_fail441
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, rx107_pos
    if $I11, rx107_fail441
    add rx107_pos, 1
    nqp_rxpeek $I19, rx107_bstack, rxquantr117_done471
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr117_done471
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr117_done471, rx107_pos, rx107_rep
    goto rxquantr117_loop470
  rxquantr117_done471:
    goto alt109_end448
  alt109_2472:
    nqp_rxmark rx107_bstack, rxquantr118_done474, -1, 0
  rxquantr118_loop473:
    ge rx107_pos, rx107_eos, rx107_fail441
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail441
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr118_done474
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr118_done474
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr118_done474, rx107_pos, rx107_rep
    goto rxquantr118_loop473
  rxquantr118_done474:
    goto alt109_end448
  alt109_end448:
    nqp_rxcommit rx107_bstack, alt109_end448
    rx107_cur."!cursor_pass"(rx107_pos, "unv", 'backtrack'=>1)
    .return (rx107_cur)
  rx107_restart440:
    repr_get_attr_obj rx107_cstack, rx107_cur, rx107_curclass, "$!cstack"
  rx107_fail441:
    unless rx107_bstack, rx107_done439
    pop $I19, rx107_bstack
    if_null rx107_cstack, rx107_cstack_done444
    unless rx107_cstack, rx107_cstack_done444
    dec $I19
    set $P11, rx107_cstack[$I19]
  rx107_cstack_done444:
    pop rx107_rep, rx107_bstack
    pop rx107_pos, rx107_bstack
    pop $I19, rx107_bstack
    lt rx107_pos, -1, rx107_done439
    lt rx107_pos, 0, rx107_fail441
    eq $I19, 0, rx107_fail441
    nqp_islist $I20, rx107_cstack
    unless $I20, rx107_jump442
    elements $I18, rx107_bstack
    le $I18, 0, rx107_cut443
    dec $I18
    set $I18, rx107_bstack[$I18]
  rx107_cut443:
    assign rx107_cstack, $I18
  rx107_jump442:
    jump $I19
  rx107_done439:
    rx107_cur."!cursor_fail"()
    .return (rx107_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1356803026.47425") :anon :lex :outer("cuid_40_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx111_tgt
    .local int rx111_pos
    .local int rx111_off
    .local int rx111_eos
    .local int rx111_rep
    .local pmc rx111_cur
    .local pmc rx111_curclass
    .local pmc rx111_bstack
    .local pmc rx111_cstack
    (rx111_cur, rx111_tgt, rx111_pos, rx111_curclass, rx111_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx111_cur
    length rx111_eos, rx111_tgt
    eq $I19, 1, rx111_restart453
    gt rx111_pos, rx111_eos, rx111_fail454
    repr_get_attr_int $I11, self, rx111_curclass, "$!from"
    ne $I11, -1, rxscan112_done460
    goto rxscan112_scan459
  rxscan112_loop458:
    inc rx111_pos
    gt rx111_pos, rx111_eos, rx111_fail454
    repr_bind_attr_int rx111_cur, rx111_curclass, "$!from", rx111_pos
  rxscan112_scan459:
    nqp_rxmark rx111_bstack, rxscan112_loop458, rx111_pos, 0
  rxscan112_done460:
    nqp_rxmark rx111_bstack, rxquantr113_done462, rx111_pos, 0
  rxquantr113_loop461:
    ge rx111_pos, rx111_eos, rx111_fail454
    substr $S11, rx111_tgt, rx111_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx111_fail454
    inc rx111_pos
    nqp_rxpeek $I19, rx111_bstack, rxquantr113_done462
    inc $I19
    inc $I19
    set rx111_rep, rx111_bstack[$I19]
    nqp_rxcommit rx111_bstack, rxquantr113_done462
    inc rx111_rep
    nqp_rxmark rx111_bstack, rxquantr113_done462, rx111_pos, rx111_rep
    goto rxquantr113_loop461
  rxquantr113_done462:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail454
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"=", rx111_fail454
    add rx111_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt114_0464
    nqp_push_label $P11, alt114_1465
    nqp_rxmark rx111_bstack, alt114_end463, -1, 0
    rx111_cur."!alt"(rx111_pos, "alt_nfa__3_1356803027.92376", $P11)
    goto rx111_fail454
  alt114_0464:
    ge rx111_pos, rx111_eos, rx111_fail454
    is_cclass $I11, .CCLASS_WORD, rx111_tgt, rx111_pos
    unless $I11, rx111_fail454
    add rx111_pos, 1
    goto alt114_end463
  alt114_1465:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail454
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"\\", rx111_fail454
    add rx111_pos, 1
    goto alt114_end463
  alt114_end463:
    nqp_rxcommit rx111_bstack, alt114_end463
    rx111_cur."!cursor_pass"(rx111_pos, 'backtrack'=>1)
    .return (rx111_cur)
  rx111_restart453:
    repr_get_attr_obj rx111_cstack, rx111_cur, rx111_curclass, "$!cstack"
  rx111_fail454:
    unless rx111_bstack, rx111_done452
    pop $I19, rx111_bstack
    if_null rx111_cstack, rx111_cstack_done457
    unless rx111_cstack, rx111_cstack_done457
    dec $I19
    set $P11, rx111_cstack[$I19]
  rx111_cstack_done457:
    pop rx111_rep, rx111_bstack
    pop rx111_pos, rx111_bstack
    pop $I19, rx111_bstack
    lt rx111_pos, -1, rx111_done452
    lt rx111_pos, 0, rx111_fail454
    eq $I19, 0, rx111_fail454
    nqp_islist $I20, rx111_cstack
    unless $I20, rx111_jump455
    elements $I18, rx111_bstack
    le $I18, 0, rx111_cut456
    dec $I18
    set $I18, rx111_bstack[$I18]
  rx111_cut456:
    assign rx111_cstack, $I18
  rx111_jump455:
    jump $I19
  rx111_done452:
    rx111_cur."!cursor_fail"()
    .return (rx111_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_42_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 678
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_43_1356803026.47425' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_curclass
    .local pmc rx119_bstack
    .local pmc rx119_cstack
    (rx119_cur, rx119_tgt, rx119_pos, rx119_curclass, rx119_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx119_cur
    length rx119_eos, rx119_tgt
    eq $I19, 1, rx119_restart477
    gt rx119_pos, rx119_eos, rx119_fail478
    repr_get_attr_int $I11, self, rx119_curclass, "$!from"
    ne $I11, -1, rxscan120_done484
    goto rxscan120_scan483
  rxscan120_loop482:
    inc rx119_pos
    gt rx119_pos, rx119_eos, rx119_fail478
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!from", rx119_pos
  rxscan120_scan483:
    nqp_rxmark rx119_bstack, rxscan120_loop482, rx119_pos, 0
  rxscan120_done484:
    eq rx119_pos, 0, rxanchor121_done485
    ge rx119_pos, rx119_eos, rx119_fail478
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail478
  rxanchor121_done485:
    nqp_rxmark rx119_bstack, rxquantr122_done487, rx119_pos, 0
  rxquantr122_loop486:
    ge rx119_pos, rx119_eos, rx119_fail478
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail478
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr122_done487
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr122_done487
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr122_done487, rx119_pos, rx119_rep
    goto rxquantr122_loop486
  rxquantr122_done487:
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"=", rx119_fail478
    add rx119_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt123_0489
    nqp_push_label $P11, alt123_1508
    nqp_push_label $P11, alt123_2527
    nqp_push_label $P11, alt123_3549
    nqp_push_label $P11, alt123_4574
    nqp_rxmark rx119_bstack, alt123_end488, -1, 0
    rx119_cur."!alt"(rx119_pos, "alt_nfa__6_1356803028.05006", $P11)
    goto rx119_fail478
  alt123_0489:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail478
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr124_done491, -1, 0
  rxquantr124_loop490:
    ge rx119_pos, rx119_eos, rx119_fail478
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail478
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr124_done491
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr124_done491
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr124_done491, rx119_pos, rx119_rep
    goto rxquantr124_loop490
  rxquantr124_done491:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail478
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail478
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail478
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail478
  alt126_0494:
    nqp_rxmark rx119_bstack, alt126_1505, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf127_loop495, rx119_pos, rx119_rep
    goto rxquantf127_done496
  rxquantf127_loop495:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail478
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf127_loop495, rx119_pos, rx119_rep
  rxquantf127_done496:
    ge rx119_pos, rx119_eos, rx119_fail478
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr128_done499, rx119_pos, 0
  rxquantr128_loop498:
    ge rx119_pos, rx119_eos, rx119_fail478
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail478
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr128_done499
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr128_done499
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr128_done499, rx119_pos, rx119_rep
    goto rxquantr128_loop498
  rxquantr128_done499:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail478
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr129_done501, -1, 0
  rxquantr129_loop500:
    ge rx119_pos, rx119_eos, rx119_fail478
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail478
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr129_done501
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr129_done501
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr129_done501, rx119_pos, rx119_rep
    goto rxquantr129_loop500
  rxquantr129_done501:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail478
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail478
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail478
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail478
    nqp_rxmark rx119_bstack, rxquantr131_done504, rx119_pos, 0
  rxquantr131_loop503:
    ge rx119_pos, rx119_eos, rx119_fail478
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail478
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr131_done504
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr131_done504
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr131_done504, rx119_pos, rx119_rep
    goto rxquantr131_loop503
  rxquantr131_done504:
    goto alt126_end493
  alt126_1505:
    nqp_rxmark rx119_bstack, rxquantr132_done507, rx119_pos, 0
  rxquantr132_loop506:
    ge rx119_pos, rx119_eos, rx119_fail478
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr132_done507
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr132_done507
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr132_done507, rx119_pos, rx119_rep
    goto rxquantr132_loop506
  rxquantr132_done507:
  alt126_end493:
    goto alt123_end488
  alt123_1508:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail478
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr133_done510, -1, 0
  rxquantr133_loop509:
    ge rx119_pos, rx119_eos, rx119_fail478
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail478
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr133_done510
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr133_done510
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr133_done510, rx119_pos, rx119_rep
    goto rxquantr133_loop509
  rxquantr133_done510:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail478
    nqp_rxmark rx119_bstack, rxsubrule134_pass511, -1, 0
  rxsubrule134_pass511:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_0513:
    nqp_rxmark rx119_bstack, alt135_1525, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf136_loop514, rx119_pos, rx119_rep
    goto rxquantf136_done515
  rxquantf136_loop514:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail478
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf136_loop514, rx119_pos, rx119_rep
  rxquantf136_done515:
    ge rx119_pos, rx119_eos, rx119_fail478
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr137_done518, rx119_pos, 0
  rxquantr137_loop517:
    ge rx119_pos, rx119_eos, rx119_fail478
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail478
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr137_done518
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr137_done518
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr137_done518, rx119_pos, rx119_rep
    goto rxquantr137_loop517
  rxquantr137_done518:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail478
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr138_done520, -1, 0
  rxquantr138_loop519:
    ge rx119_pos, rx119_eos, rx119_fail478
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail478
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr138_done520
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr138_done520
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr138_done520, rx119_pos, rx119_rep
    goto rxquantr138_loop519
  rxquantr138_done520:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail478
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    le rx119_pos, 0, rx119_fail478
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail478
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail478
    nqp_rxmark rx119_bstack, rxquantr141_done524, rx119_pos, 0
  rxquantr141_loop523:
    ge rx119_pos, rx119_eos, rx119_fail478
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail478
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr141_done524
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr141_done524
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr141_done524, rx119_pos, rx119_rep
    goto rxquantr141_loop523
  rxquantr141_done524:
    goto alt135_end512
  alt135_1525:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail478
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_end512:
    goto alt123_end488
  alt123_2527:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail478
    add rx119_pos, 5
    le rx119_pos, 0, rx119_fail478
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail478
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail478
    nqp_rxmark rx119_bstack, rxquantr144_done530, rx119_pos, 0
  rxquantr144_loop529:
    ge rx119_pos, rx119_eos, rx119_fail478
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail478
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr144_done530
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr144_done530
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr144_done530, rx119_pos, rx119_rep
    goto rxquantr144_loop529
  rxquantr144_done530:
  alt145_0532:
    nqp_rxmark rx119_bstack, alt145_1534, rx119_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rxanchor146_done533
    ne rx119_pos, rx119_eos, rx119_fail478
    eq rx119_pos, 0, rxanchor146_done533
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    if $I11, rx119_fail478
  rxanchor146_done533:
    goto alt145_end531
  alt145_1534:
    nqp_rxmark rx119_bstack, alt145_2535, rx119_pos, 0
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"#", rx119_fail478
    add rx119_pos, 1
    goto alt145_end531
  alt145_2535:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail478
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt145_end531:
  alt148_0538:
    nqp_rxmark rx119_bstack, alt148_1547, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf149_loop539, rx119_pos, rx119_rep
    goto rxquantf149_done540
  rxquantf149_loop539:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail478
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf149_loop539, rx119_pos, rx119_rep
  rxquantf149_done540:
    ge rx119_pos, rx119_eos, rx119_fail478
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr150_done543, rx119_pos, 0
  rxquantr150_loop542:
    ge rx119_pos, rx119_eos, rx119_fail478
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail478
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr150_done543
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr150_done543
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr150_done543, rx119_pos, rx119_rep
    goto rxquantr150_loop542
  rxquantr150_done543:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail478
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail478
    add rx119_pos, 4
    le rx119_pos, 0, rx119_fail478
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail478
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail478
    nqp_rxmark rx119_bstack, rxquantr152_done546, rx119_pos, 0
  rxquantr152_loop545:
    ge rx119_pos, rx119_eos, rx119_fail478
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail478
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr152_done546
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr152_done546
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr152_done546, rx119_pos, rx119_rep
    goto rxquantr152_loop545
  rxquantr152_done546:
    goto alt148_end537
  alt148_1547:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail478
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt148_end537:
    goto alt123_end488
  alt123_3549:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail478
    nqp_rxmark rx119_bstack, rxsubrule154_pass550, -1, 0
  rxsubrule154_pass550:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf155_loop551, rx119_pos, rx119_rep
    goto rxquantf155_done552
  rxquantf155_loop551:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail478
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf155_loop551, rx119_pos, rx119_rep
  rxquantf155_done552:
    eq rx119_pos, 0, rxanchor156_done554
    ge rx119_pos, rx119_eos, rx119_fail478
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail478
  rxanchor156_done554:
    .const 'Sub' $P5001 = 'cuid_43_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail478
    goto alt123_end488
  alt123_4574:
  alt164_0576:
    nqp_rxmark rx119_bstack, alt164_1577, rx119_pos, 0
    ge rx119_pos, rx119_eos, rx119_fail478
    is_cclass $I11, .CCLASS_WHITESPACE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail478
    add rx119_pos, 1
    goto alt164_end575
  alt164_1577:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail478
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt164_end575:
    nqp_rxmark rx119_bstack, rxquantr166_done580, rx119_pos, 0
  rxquantr166_loop579:
    ge rx119_pos, rx119_eos, rx119_fail478
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail478
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr166_done580
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr166_done580
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr166_done580, rx119_pos, rx119_rep
    goto rxquantr166_loop579
  rxquantr166_done580:
    goto alt123_end488
  alt123_end488:
    nqp_rxcommit rx119_bstack, alt123_end488
    rx119_cur."!cursor_pass"(rx119_pos, "pod_comment", 'backtrack'=>1)
    .return (rx119_cur)
  rx119_restart477:
    repr_get_attr_obj rx119_cstack, rx119_cur, rx119_curclass, "$!cstack"
  rx119_fail478:
    unless rx119_bstack, rx119_done476
    pop $I19, rx119_bstack
    if_null rx119_cstack, rx119_cstack_done481
    unless rx119_cstack, rx119_cstack_done481
    dec $I19
    set $P11, rx119_cstack[$I19]
  rx119_cstack_done481:
    pop rx119_rep, rx119_bstack
    pop rx119_pos, rx119_bstack
    pop $I19, rx119_bstack
    lt rx119_pos, -1, rx119_done476
    lt rx119_pos, 0, rx119_fail478
    eq $I19, 0, rx119_fail478
    nqp_islist $I20, rx119_cstack
    unless $I20, rx119_jump479
    elements $I18, rx119_bstack
    le $I18, 0, rx119_cut480
    dec $I18
    set $I18, rx119_bstack[$I18]
  rx119_cut480:
    assign rx119_cstack, $I18
  rx119_jump479:
    jump $I19
  rx119_done476:
    rx119_cur."!cursor_fail"()
    .return (rx119_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_43_1356803026.47425") :anon :lex :outer("cuid_42_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx157_tgt
    .local int rx157_pos
    .local int rx157_off
    .local int rx157_eos
    .local int rx157_rep
    .local pmc rx157_cur
    .local pmc rx157_curclass
    .local pmc rx157_bstack
    .local pmc rx157_cstack
    (rx157_cur, rx157_tgt, rx157_pos, rx157_curclass, rx157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx157_cur
    length rx157_eos, rx157_tgt
    eq $I19, 1, rx157_restart557
    gt rx157_pos, rx157_eos, rx157_fail558
    repr_get_attr_int $I11, self, rx157_curclass, "$!from"
    ne $I11, -1, rxscan158_done564
    goto rxscan158_scan563
  rxscan158_loop562:
    inc rx157_pos
    gt rx157_pos, rx157_eos, rx157_fail558
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!from", rx157_pos
  rxscan158_scan563:
    nqp_rxmark rx157_bstack, rxscan158_loop562, rx157_pos, 0
  rxscan158_done564:
    nqp_rxmark rx157_bstack, rxquantr159_done566, rx157_pos, 0
  rxquantr159_loop565:
    ge rx157_pos, rx157_eos, rx157_fail558
    substr $S11, rx157_tgt, rx157_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx157_fail558
    inc rx157_pos
    nqp_rxpeek $I19, rx157_bstack, rxquantr159_done566
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr159_done566
    inc rx157_rep
    nqp_rxmark rx157_bstack, rxquantr159_done566, rx157_pos, rx157_rep
    goto rxquantr159_loop565
  rxquantr159_done566:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt160_0568
    nqp_push_label $P11, alt160_1573
    nqp_rxmark rx157_bstack, alt160_end567, -1, 0
    rx157_cur."!alt"(rx157_pos, "alt_nfa__5_1356803028.03707", $P11)
    goto rx157_fail558
  alt160_0568:
    add $I11, rx157_pos, 1
    gt $I11, rx157_eos, rx157_fail558
    substr $S10, rx157_tgt, rx157_pos, 1
    ne $S10, ucs4:"=", rx157_fail558
    add rx157_pos, 1
    nqp_rxmark rx157_bstack, rxquantr161_done570, rx157_pos, 0
  rxquantr161_loop569:
    add $I11, rx157_pos, 3
    gt $I11, rx157_eos, rx157_fail558
    substr $S10, rx157_tgt, rx157_pos, 3
    ne $S10, ucs4:"cut", rx157_fail558
    add rx157_pos, 3
    le rx157_pos, 0, rx157_fail558
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, rx157_pos
    if $I11, rx157_fail558
    sub $I11, rx157_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, $I11
    unless $I11, rx157_fail558
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx157_curclass, "$!pos"
    lt $I11, 0, rx157_fail558
    repr_get_attr_int rx157_pos, $P11, rx157_curclass, "$!pos"
    nqp_rxpeek $I19, rx157_bstack, rxquantr161_done570
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr161_done570
    inc rx157_rep
  rxquantr161_done570:
    goto alt160_end567
  alt160_1573:
    ge rx157_pos, rx157_eos, rx157_fail558
    is_cclass $I11, .CCLASS_NEWLINE, rx157_tgt, rx157_pos
    unless $I11, rx157_fail558
    substr $S10, rx157_tgt, rx157_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx157_pos, $I11
    add rx157_pos, 1
    goto alt160_end567
  alt160_end567:
    nqp_rxcommit rx157_bstack, alt160_end567
    rx157_cur."!cursor_pass"(rx157_pos, 'backtrack'=>1)
    .return (rx157_cur)
  rx157_restart557:
    repr_get_attr_obj rx157_cstack, rx157_cur, rx157_curclass, "$!cstack"
  rx157_fail558:
    unless rx157_bstack, rx157_done556
    pop $I19, rx157_bstack
    if_null rx157_cstack, rx157_cstack_done561
    unless rx157_cstack, rx157_cstack_done561
    dec $I19
    set $P11, rx157_cstack[$I19]
  rx157_cstack_done561:
    pop rx157_rep, rx157_bstack
    pop rx157_pos, rx157_bstack
    pop $I19, rx157_bstack
    lt rx157_pos, -1, rx157_done556
    lt rx157_pos, 0, rx157_fail558
    eq $I19, 0, rx157_fail558
    nqp_islist $I20, rx157_cstack
    unless $I20, rx157_jump559
    elements $I18, rx157_bstack
    le $I18, 0, rx157_cut560
    dec $I18
    set $I18, rx157_bstack[$I18]
  rx157_cut560:
    assign rx157_cstack, $I18
  rx157_jump559:
    jump $I19
  rx157_done556:
    rx157_cur."!cursor_fail"()
    .return (rx157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_44_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 709
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_393_1356803026.47425' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_394_1356803026.47425' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_396_1356803026.47425' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_397_1356803026.47425' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart583
    gt rx167_pos, rx167_eos, rx167_fail584
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done590
    goto rxscan168_scan589
  rxscan168_loop588:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail584
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan589:
    nqp_rxmark rx167_bstack, rxscan168_loop588, rx167_pos, 0
  rxscan168_done590:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P103, fallback591
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback592
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5013
  fallback592:
    unless_null $P5010, vivi_169593
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_169593:
    set $P103, $P5010
  fallback591:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
.annotate 'line', 714
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback594
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback595
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5019
  fallback595:
    unless_null $P5016, vivi_170596
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_170596:
    set $P5015, $P5016
  fallback594:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
.annotate 'line', 718
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback597
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback598
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5026
  fallback598:
    unless_null $P5023, vivi_171599
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_171599:
    set $P5022, $P5023
  fallback597:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback600
    nqp_get_sc_object $P5032, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback601
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback601:
    unless_null $P5030, vivi_172602
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_172602:
    set $P5029, $P5030
  fallback600:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback603
    nqp_get_sc_object $P5037, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5037
  fallback603:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_393_1356803026.47425' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P105, fallback619
    nqp_get_sc_object $P5044, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback620
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5045
  fallback620:
    unless_null $P5042, vivi_178621
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_178621:
    set $P105, $P5042
  fallback619:
    set $P106, $P105
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_394_1356803026.47425' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P107, fallback631
    nqp_get_sc_object $P5052, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback632
    nqp_get_sc_object $P5053, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5050, $P5053
  fallback632:
    unless_null $P5050, vivi_182633
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_182633:
    set $P107, $P5050
  fallback631:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_396_1356803026.47425' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_397_1356803026.47425' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail584
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail584
    nqp_rxmark rx167_bstack, rxsubrule197_pass677, -1, 0
  rxsubrule197_pass677:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt198_0679:
    nqp_rxmark rx167_bstack, alt198_1681, rx167_pos, 0
    lt rx167_pos, rx167_eos, rx167_fail584
    goto alt198_end678
  alt198_1681:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail584
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt198_end678:
    rx167_cur."!cursor_pass"(rx167_pos, "comp_unit", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart583:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail584:
    unless rx167_bstack, rx167_done582
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done587
    unless rx167_cstack, rx167_cstack_done587
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done587:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done582
    lt rx167_pos, 0, rx167_fail584
    eq $I19, 0, rx167_fail584
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump585
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut586
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut586:
    assign rx167_cstack, $I18
  rx167_jump585:
    jump $I19
  rx167_done582:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1356803026.47425") :anon :lex :outer("cuid_44_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 719

.annotate 'line', 720
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback604
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback605
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback605:
    unless_null $P5003, vivi_173606
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_173606:
    set $P5002, $P5003
  fallback604:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback607
    nqp_get_sc_object $P5011, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback608
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5012
  fallback608:
    unless_null $P5009, vivi_174609
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_174609:
    set $P5008, $P5009
  fallback607:
    $P5001."compose"($P5008)
.annotate 'line', 721
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback610
    nqp_get_sc_object $P5017, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback611
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5018
  fallback611:
    unless_null $P5015, vivi_175612
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_175612:
    set $P5014, $P5015
  fallback610:
    find_dynamic_lex $P5020, "$*UNIT"
    unless_null $P5020, fallback613
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$UNIT"]
    unless_null $P5021, fallback614
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5024
  fallback614:
    unless_null $P5021, vivi_176615
    die "Contextual $*UNIT not found"
    box $P5025, "Contextual $*UNIT not found"
    set $P5021, $P5025
  vivi_176615:
    set $P5020, $P5021
  fallback613:
    find_dynamic_lex $P5026, "$*GLOBALish"
    unless_null $P5026, fallback616
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$GLOBALish"]
    unless_null $P5027, fallback617
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5030
  fallback617:
    unless_null $P5027, vivi_177618
    die "Contextual $*GLOBALish not found"
    box $P5031, "Contextual $*GLOBALish not found"
    set $P5027, $P5031
  vivi_177618:
    set $P5026, $P5027
  fallback616:
    $P5032 = $P5014."install_lexical_symbol"($P5020, "GLOBALish", $P5026)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1356803026.47425") :anon :lex :outer("cuid_44_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 726

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback622
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback623
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback623:
    unless_null $P5002, vivi_179624
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_179624:
    set $P5001, $P5002
  fallback622:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback625
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback626
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5011
  fallback626:
    unless_null $P5008, vivi_180627
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_180627:
    set $P5007, $P5008
  fallback625:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback628
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback629
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5017
  fallback629:
    unless_null $P5014, vivi_181630
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_181630:
    set $P5013, $P5014
  fallback628:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1356803026.47425") :anon :lex :outer("cuid_44_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 730
    .const 'Sub' $P5017 = 'cuid_395_1356803026.47425' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback636
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback637
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback637:
    unless_null $P5004, vivi_184638
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_184638:
    set $P5003, $P5004
  fallback636:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback639
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5011
  fallback639:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback640
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5012
  fallback640:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless183_end635 
    .const 'Sub' $P5013 = 'cuid_395_1356803026.47425' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless183_end635:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1356803026.47425") :anon :lex :outer("cuid_396_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 731
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 732
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback641
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback642
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback642:
    unless_null $P5003, vivi_185643
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_185643:
    set $P5002, $P5003
  fallback641:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback644
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback645
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback645:
    unless_null $P5010, vivi_186646
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_186646:
    set $P5009, $P5010
  fallback644:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback647
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5017
  fallback647:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 733
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback648
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback649
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5024
  fallback649:
    unless_null $P5021, vivi_187650
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_187650:
    set $P5020, $P5021
  fallback648:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback651
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback652
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5030
  fallback652:
    unless_null $P5027, vivi_188653
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_188653:
    set $P5026, $P5027
  fallback651:
    $P5019."compose"($P5026)
.annotate 'line', 734
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback654
    nqp_get_sc_object $P5035, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback655
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5033, $P5036
  fallback655:
    unless_null $P5033, vivi_189656
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_189656:
    set $P5032, $P5033
  fallback654:
    find_dynamic_lex $P5038, "$*UNIT"
    unless_null $P5038, fallback657
    nqp_get_sc_object $P5041, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$UNIT"]
    unless_null $P5039, fallback658
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5042
  fallback658:
    unless_null $P5039, vivi_190659
    die "Contextual $*UNIT not found"
    box $P5043, "Contextual $*UNIT not found"
    set $P5039, $P5043
  vivi_190659:
    set $P5038, $P5039
  fallback657:
    find_dynamic_lex $P5044, "$*EXPORT"
    unless_null $P5044, fallback660
    nqp_get_sc_object $P5047, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$EXPORT"]
    unless_null $P5045, fallback661
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5045, $P5048
  fallback661:
    unless_null $P5045, vivi_191662
    die "Contextual $*EXPORT not found"
    box $P5049, "Contextual $*EXPORT not found"
    set $P5045, $P5049
  vivi_191662:
    set $P5044, $P5045
  fallback660:
    $P5032."install_lexical_symbol"($P5038, "EXPORT", $P5044)
.annotate 'line', 735
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback663
    nqp_get_sc_object $P5053, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback664
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5051, $P5054
  fallback664:
    unless_null $P5051, vivi_192665
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_192665:
    set $P5050, $P5051
  fallback663:
    find_dynamic_lex $P5057, "%*HOW"
    unless_null $P5057, fallback666
    nqp_get_sc_object $P5060, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%HOW"]
    unless_null $P5058, fallback667
    nqp_get_sc_object $P5062, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%HOW"], $P5063
    set $P5058, $P5063
  fallback667:
    unless_null $P5058, vivi_193668
    die "Contextual %*HOW not found"
    box $P5064, "Contextual %*HOW not found"
    set $P5058, $P5064
  vivi_193668:
    set $P5057, $P5058
  fallback666:
    set $P5056, $P5057["knowhow"]
    unless_null $P5056, fallback669
    nqp_get_sc_object $P5065, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5056, $P5065
  fallback669:
    $P5066 = $P5050."pkg_create_mo"($P5056, "DEFAULT" :named("name"))
    set $P101, $P5066
.annotate 'line', 736
    get_how $P5067, $P101
    $P5067."compose"($P101)
    find_dynamic_lex $P5069, "$*EXPORT"
    unless_null $P5069, fallback670
    nqp_get_sc_object $P5072, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$EXPORT"]
    unless_null $P5070, fallback671
    nqp_get_sc_object $P5073, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5070, $P5073
  fallback671:
    unless_null $P5070, vivi_194672
    die "Contextual $*EXPORT not found"
    box $P5074, "Contextual $*EXPORT not found"
    set $P5070, $P5074
  vivi_194672:
    set $P5069, $P5070
  fallback670:
    get_who $P5068, $P5069
    set $P5068["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1356803026.47425") :anon :lex :outer("cuid_44_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 741

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback673
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback674
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback674:
    unless_null $P5002, vivi_195675
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_195675:
    set $P5001, $P5002
  fallback673:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_45_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 749
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx201_tgt
    .local int rx201_pos
    .local int rx201_off
    .local int rx201_eos
    .local int rx201_rep
    .local pmc rx201_cur
    .local pmc rx201_curclass
    .local pmc rx201_bstack
    .local pmc rx201_cstack
    (rx201_cur, rx201_tgt, rx201_pos, rx201_curclass, rx201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx201_cur
    length rx201_eos, rx201_tgt
    eq $I19, 1, rx201_restart685
    gt rx201_pos, rx201_eos, rx201_fail686
    repr_get_attr_int $I11, self, rx201_curclass, "$!from"
    ne $I11, -1, rxscan202_done692
    goto rxscan202_scan691
  rxscan202_loop690:
    inc rx201_pos
    gt rx201_pos, rx201_eos, rx201_fail686
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!from", rx201_pos
  rxscan202_scan691:
    nqp_rxmark rx201_bstack, rxscan202_loop690, rx201_pos, 0
  rxscan202_done692:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt203_0694
    nqp_push_label $P11, alt203_1698
    nqp_rxmark rx201_bstack, alt203_end693, -1, 0
    rx201_cur."!alt"(rx201_pos, "alt_nfa__7_1356803028.14512", $P11)
    goto rx201_fail686
  alt203_0694:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail686
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    lt rx201_pos, rx201_eos, rx201_fail686
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail686
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    goto alt203_end693
  alt203_1698:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail686
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    nqp_rxmark rx201_bstack, rxquantr208_done701, rx201_pos, 0
  rxquantr208_loop700:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."statement"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail686
    nqp_rxmark rx201_bstack, rxsubrule209_pass702, -1, 0
  rxsubrule209_pass702:
    rx201_cstack = rx201_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail686
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail686
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    nqp_rxpeek $I19, rx201_bstack, rxquantr208_done701
    inc $I19
    inc $I19
    set rx201_rep, rx201_bstack[$I19]
    nqp_rxcommit rx201_bstack, rxquantr208_done701
    inc rx201_rep
    nqp_rxmark rx201_bstack, rxquantr208_done701, rx201_pos, rx201_rep
    goto rxquantr208_loop700
  rxquantr208_done701:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail686
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    goto alt203_end693
  alt203_end693:
    rx201_cur."!cursor_pass"(rx201_pos, "statementlist", 'backtrack'=>1)
    .return (rx201_cur)
  rx201_restart685:
    repr_get_attr_obj rx201_cstack, rx201_cur, rx201_curclass, "$!cstack"
  rx201_fail686:
    unless rx201_bstack, rx201_done684
    pop $I19, rx201_bstack
    if_null rx201_cstack, rx201_cstack_done689
    unless rx201_cstack, rx201_cstack_done689
    dec $I19
    set $P11, rx201_cstack[$I19]
  rx201_cstack_done689:
    pop rx201_rep, rx201_bstack
    pop rx201_pos, rx201_bstack
    pop $I19, rx201_bstack
    lt rx201_pos, -1, rx201_done684
    lt rx201_pos, 0, rx201_fail686
    eq $I19, 0, rx201_fail686
    nqp_islist $I20, rx201_cstack
    unless $I20, rx201_jump687
    elements $I18, rx201_bstack
    le $I18, 0, rx201_cut688
    dec $I18
    set $I18, rx201_bstack[$I18]
  rx201_cut688:
    assign rx201_cstack, $I18
  rx201_jump687:
    jump $I19
  rx201_done684:
    rx201_cur."!cursor_fail"()
    .return (rx201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_46_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 754
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_47_1356803026.47425' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart708
    gt rx213_pos, rx213_eos, rx213_fail709
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done715
    goto rxscan214_scan714
  rxscan214_loop713:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail709
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan714:
    nqp_rxmark rx213_bstack, rxscan214_loop713, rx213_pos, 0
  rxscan214_done715:
    .const 'Sub' $P5001 = 'cuid_47_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    ge $I11, 0, rx213_fail709
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt220_0734
    nqp_push_label $P11, alt220_1736
    nqp_rxmark rx213_bstack, alt220_end733, -1, 0
    rx213_cur."!alt"(rx213_pos, "alt_nfa__9_1356803028.16597", $P11)
    goto rx213_fail709
  alt220_0734:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail709
    nqp_rxmark rx213_bstack, rxsubrule221_pass735, -1, 0
  rxsubrule221_pass735:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    goto alt220_end733
  alt220_1736:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail709
    nqp_rxmark rx213_bstack, rxsubrule222_pass737, -1, 0
  rxsubrule222_pass737:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."ws"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail709
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    nqp_rxmark rx213_bstack, rxquantr224_done740, rx213_pos, 0
  rxquantr224_loop739:
  alt225_0742:
    nqp_rxmark rx213_bstack, alt225_1743, rx213_pos, 0
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail709
    goto alt225_end741
  alt225_1743:
    nqp_rxmark rx213_bstack, alt225_2749, rx213_pos, 0
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail709
    nqp_rxmark rx213_bstack, rxsubrule226_pass744, -1, 0
  rxsubrule226_pass744:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    nqp_rxmark rx213_bstack, rxquantr227_done746, rx213_pos, 0
  rxquantr227_loop745:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail709
    goto rxsubrule228_pass747
  rxsubrule228_back748:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail709
  rxsubrule228_pass747:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule228_back748
    push rx213_bstack, $I11
    push rx213_bstack, 0
    push rx213_bstack, rx213_pos
    elements $I11, rx213_cstack
    push rx213_bstack, $I11
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    nqp_rxpeek $I19, rx213_bstack, rxquantr227_done746
    inc $I19
    inc $I19
    set rx213_rep, rx213_bstack[$I19]
    nqp_rxcommit rx213_bstack, rxquantr227_done746
    inc rx213_rep
  rxquantr227_done746:
    goto alt225_end741
  alt225_2749:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail709
    nqp_rxmark rx213_bstack, rxsubrule229_pass750, -1, 0
  rxsubrule229_pass750:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
  alt225_end741:
    nqp_rxpeek $I19, rx213_bstack, rxquantr224_done740
    inc $I19
    inc $I19
    set rx213_rep, rx213_bstack[$I19]
    nqp_rxcommit rx213_bstack, rxquantr224_done740
    inc rx213_rep
  rxquantr224_done740:
    goto alt220_end733
  alt220_end733:
    nqp_rxcommit rx213_bstack, alt220_end733
    rx213_cur."!cursor_pass"(rx213_pos, "statement", 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart708:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail709:
    unless rx213_bstack, rx213_done707
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done712
    unless rx213_cstack, rx213_cstack_done712
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done712:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done707
    lt rx213_pos, 0, rx213_fail709
    eq $I19, 0, rx213_fail709
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump710
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut711
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut711:
    assign rx213_cstack, $I18
  rx213_jump710:
    jump $I19
  rx213_done707:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_47_1356803026.47425") :anon :lex :outer("cuid_46_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx215_tgt
    .local int rx215_pos
    .local int rx215_off
    .local int rx215_eos
    .local int rx215_rep
    .local pmc rx215_cur
    .local pmc rx215_curclass
    .local pmc rx215_bstack
    .local pmc rx215_cstack
    (rx215_cur, rx215_tgt, rx215_pos, rx215_curclass, rx215_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx215_cur
    length rx215_eos, rx215_tgt
    eq $I19, 1, rx215_restart718
    gt rx215_pos, rx215_eos, rx215_fail719
    repr_get_attr_int $I11, self, rx215_curclass, "$!from"
    ne $I11, -1, rxscan216_done725
    goto rxscan216_scan724
  rxscan216_loop723:
    inc rx215_pos
    gt rx215_pos, rx215_eos, rx215_fail719
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!from", rx215_pos
  rxscan216_scan724:
    nqp_rxmark rx215_bstack, rxscan216_loop723, rx215_pos, 0
  rxscan216_done725:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt217_0727
    nqp_push_label $P11, alt217_1731
    nqp_rxmark rx215_bstack, alt217_end726, -1, 0
    rx215_cur."!alt"(rx215_pos, "alt_nfa__8_1356803028.15148", $P11)
    goto rx215_fail719
  alt217_0727:
  alt218_0729:
    nqp_rxmark rx215_bstack, alt218_1730, rx215_pos, 0
    add $I11, rx215_pos, 1
    gt $I11, rx215_eos, rx215_fail719
    substr $S10, rx215_tgt, rx215_pos, 1
    ne $S10, ucs4:"]", rx215_fail719
    add rx215_pos, 1
    goto alt218_end728
  alt218_1730:
    ge rx215_pos, rx215_eos, rx215_fail719
    substr $S11, rx215_tgt, rx215_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx215_fail719
    inc rx215_pos
  alt218_end728:
    goto alt217_end726
  alt217_1731:
    lt rx215_pos, rx215_eos, rx215_fail719
    goto alt217_end726
  alt217_end726:
    rx215_cur."!cursor_pass"(rx215_pos, 'backtrack'=>1)
    .return (rx215_cur)
  rx215_restart718:
    repr_get_attr_obj rx215_cstack, rx215_cur, rx215_curclass, "$!cstack"
  rx215_fail719:
    unless rx215_bstack, rx215_done717
    pop $I19, rx215_bstack
    if_null rx215_cstack, rx215_cstack_done722
    unless rx215_cstack, rx215_cstack_done722
    dec $I19
    set $P11, rx215_cstack[$I19]
  rx215_cstack_done722:
    pop rx215_rep, rx215_bstack
    pop rx215_pos, rx215_bstack
    pop $I19, rx215_bstack
    lt rx215_pos, -1, rx215_done717
    lt rx215_pos, 0, rx215_fail719
    eq $I19, 0, rx215_fail719
    nqp_islist $I20, rx215_cstack
    unless $I20, rx215_jump720
    elements $I18, rx215_bstack
    le $I18, 0, rx215_cut721
    dec $I18
    set $I18, rx215_bstack[$I18]
  rx215_cut721:
    assign rx215_cstack, $I18
  rx215_jump720:
    jump $I19
  rx215_done717:
    rx215_cur."!cursor_fail"()
    .return (rx215_cur) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_48_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 767
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx230_tgt
    .local int rx230_pos
    .local int rx230_off
    .local int rx230_eos
    .local int rx230_rep
    .local pmc rx230_cur
    .local pmc rx230_curclass
    .local pmc rx230_bstack
    .local pmc rx230_cstack
    (rx230_cur, rx230_tgt, rx230_pos, rx230_curclass, rx230_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx230_cur
    length rx230_eos, rx230_tgt
    eq $I19, 1, rx230_restart753
    gt rx230_pos, rx230_eos, rx230_fail754
    repr_get_attr_int $I11, self, rx230_curclass, "$!from"
    ne $I11, -1, rxscan231_done760
    goto rxscan231_scan759
  rxscan231_loop758:
    inc rx230_pos
    gt rx230_pos, rx230_eos, rx230_fail754
    repr_bind_attr_int rx230_cur, rx230_curclass, "$!from", rx230_pos
  rxscan231_scan759:
    nqp_rxmark rx230_bstack, rxscan231_loop758, rx230_pos, 0
  rxscan231_done760:
  alt232_0762:
    nqp_rxmark rx230_bstack, alt232_1763, rx230_pos, 0
    add $I11, rx230_pos, 1
    gt $I11, rx230_eos, rx230_fail754
    substr $S10, rx230_tgt, rx230_pos, 1
    ne $S10, ucs4:";", rx230_fail754
    add rx230_pos, 1
    goto alt232_end761
  alt232_1763:
    nqp_rxmark rx230_bstack, alt232_2764, rx230_pos, 0
    repr_bind_attr_int rx230_cur, rx230_curclass, "$!pos", rx230_pos
    $P11 = rx230_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx230_curclass, "$!pos"
    lt $I11, 0, rx230_fail754
    goto alt232_end761
  alt232_2764:
    nqp_rxmark rx230_bstack, alt232_3765, rx230_pos, 0
    repr_bind_attr_int rx230_cur, rx230_curclass, "$!pos", rx230_pos
    $P11 = rx230_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx230_curclass, "$!pos"
    lt $I11, 0, rx230_fail754
    goto alt232_end761
  alt232_3765:
    lt rx230_pos, rx230_eos, rx230_fail754
  alt232_end761:
    rx230_cur."!cursor_pass"(rx230_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx230_cur)
  rx230_restart753:
    repr_get_attr_obj rx230_cstack, rx230_cur, rx230_curclass, "$!cstack"
  rx230_fail754:
    unless rx230_bstack, rx230_done752
    pop $I19, rx230_bstack
    if_null rx230_cstack, rx230_cstack_done757
    unless rx230_cstack, rx230_cstack_done757
    dec $I19
    set $P11, rx230_cstack[$I19]
  rx230_cstack_done757:
    pop rx230_rep, rx230_bstack
    pop rx230_pos, rx230_bstack
    pop $I19, rx230_bstack
    lt rx230_pos, -1, rx230_done752
    lt rx230_pos, 0, rx230_fail754
    eq $I19, 0, rx230_fail754
    nqp_islist $I20, rx230_cstack
    unless $I20, rx230_jump755
    elements $I18, rx230_bstack
    le $I18, 0, rx230_cut756
    dec $I18
    set $I18, rx230_bstack[$I18]
  rx230_cut756:
    assign rx230_cstack, $I18
  rx230_jump755:
    jump $I19
  rx230_done752:
    rx230_cur."!cursor_fail"()
    .return (rx230_cur) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_49_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 774
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx234_tgt
    .local int rx234_pos
    .local int rx234_off
    .local int rx234_eos
    .local int rx234_rep
    .local pmc rx234_cur
    .local pmc rx234_curclass
    .local pmc rx234_bstack
    .local pmc rx234_cstack
    (rx234_cur, rx234_tgt, rx234_pos, rx234_curclass, rx234_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx234_cur
    length rx234_eos, rx234_tgt
    eq $I19, 1, rx234_restart769
    gt rx234_pos, rx234_eos, rx234_fail770
    repr_get_attr_int $I11, self, rx234_curclass, "$!from"
    ne $I11, -1, rxscan235_done776
    goto rxscan235_scan775
  rxscan235_loop774:
    inc rx234_pos
    gt rx234_pos, rx234_eos, rx234_fail770
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!from", rx234_pos
  rxscan235_scan775:
    nqp_rxmark rx234_bstack, rxscan235_loop774, rx234_pos, 0
  rxscan235_done776:
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail770
    nqp_rxmark rx234_bstack, rxsubrule236_pass777, -1, 0
  rxsubrule236_pass777:
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."ws"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail770
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail770
    nqp_rxmark rx234_bstack, rxsubrule238_pass779, -1, 0
  rxsubrule238_pass779:
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    rx234_cur."!cursor_pass"(rx234_pos, "xblock", 'backtrack'=>1)
    .return (rx234_cur)
  rx234_restart769:
    repr_get_attr_obj rx234_cstack, rx234_cur, rx234_curclass, "$!cstack"
  rx234_fail770:
    unless rx234_bstack, rx234_done768
    pop $I19, rx234_bstack
    if_null rx234_cstack, rx234_cstack_done773
    unless rx234_cstack, rx234_cstack_done773
    dec $I19
    set $P11, rx234_cstack[$I19]
  rx234_cstack_done773:
    pop rx234_rep, rx234_bstack
    pop rx234_pos, rx234_bstack
    pop $I19, rx234_bstack
    lt rx234_pos, -1, rx234_done768
    lt rx234_pos, 0, rx234_fail770
    eq $I19, 0, rx234_fail770
    nqp_islist $I20, rx234_cstack
    unless $I20, rx234_jump771
    elements $I18, rx234_bstack
    le $I18, 0, rx234_cut772
    dec $I18
    set $I18, rx234_bstack[$I18]
  rx234_cut772:
    assign rx234_cstack, $I18
  rx234_jump771:
    jump $I19
  rx234_done768:
    rx234_cur."!cursor_fail"()
    .return (rx234_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_50_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 778
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx239_tgt
    .local int rx239_pos
    .local int rx239_off
    .local int rx239_eos
    .local int rx239_rep
    .local pmc rx239_cur
    .local pmc rx239_curclass
    .local pmc rx239_bstack
    .local pmc rx239_cstack
    (rx239_cur, rx239_tgt, rx239_pos, rx239_curclass, rx239_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx239_cur
    length rx239_eos, rx239_tgt
    eq $I19, 1, rx239_restart782
    gt rx239_pos, rx239_eos, rx239_fail783
    repr_get_attr_int $I11, self, rx239_curclass, "$!from"
    ne $I11, -1, rxscan240_done789
    goto rxscan240_scan788
  rxscan240_loop787:
    inc rx239_pos
    gt rx239_pos, rx239_eos, rx239_fail783
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!from", rx239_pos
  rxscan240_scan788:
    nqp_rxmark rx239_bstack, rxscan240_loop787, rx239_pos, 0
  rxscan240_done789:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt241_0791
    nqp_push_label $P11, alt241_1797
    nqp_push_label $P11, alt241_2800
    nqp_rxmark rx239_bstack, alt241_end790, -1, 0
    rx239_cur."!alt"(rx239_pos, "alt_nfa__10_1356803028.19517", $P11)
    goto rx239_fail783
  alt241_0791:
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail783
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail783
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."signature"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail783
    nqp_rxmark rx239_bstack, rxsubrule244_pass794, -1, 0
  rxsubrule244_pass794:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."ws"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail783
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail783
    nqp_rxmark rx239_bstack, rxsubrule246_pass796, -1, 0
  rxsubrule246_pass796:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    goto alt241_end790
  alt241_1797:
    ge rx239_pos, rx239_eos, rx239_fail783
    substr $S11, rx239_tgt, rx239_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx239_fail783
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail783
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail783
    nqp_rxmark rx239_bstack, rxsubrule248_pass799, -1, 0
  rxsubrule248_pass799:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    goto alt241_end790
  alt241_2800:
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail783
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    goto alt241_end790
  alt241_end790:
    rx239_cur."!cursor_pass"(rx239_pos, "pblock", 'backtrack'=>1)
    .return (rx239_cur)
  rx239_restart782:
    repr_get_attr_obj rx239_cstack, rx239_cur, rx239_curclass, "$!cstack"
  rx239_fail783:
    unless rx239_bstack, rx239_done781
    pop $I19, rx239_bstack
    if_null rx239_cstack, rx239_cstack_done786
    unless rx239_cstack, rx239_cstack_done786
    dec $I19
    set $P11, rx239_cstack[$I19]
  rx239_cstack_done786:
    pop rx239_rep, rx239_bstack
    pop rx239_pos, rx239_bstack
    pop $I19, rx239_bstack
    lt rx239_pos, -1, rx239_done781
    lt rx239_pos, 0, rx239_fail783
    eq $I19, 0, rx239_fail783
    nqp_islist $I20, rx239_cstack
    unless $I20, rx239_jump784
    elements $I18, rx239_bstack
    le $I18, 0, rx239_cut785
    dec $I18
    set $I18, rx239_bstack[$I18]
  rx239_cut785:
    assign rx239_cstack, $I18
  rx239_jump784:
    jump $I19
  rx239_done781:
    rx239_cur."!cursor_fail"()
    .return (rx239_cur) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_51_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 789
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx250_tgt
    .local int rx250_pos
    .local int rx250_off
    .local int rx250_eos
    .local int rx250_rep
    .local pmc rx250_cur
    .local pmc rx250_curclass
    .local pmc rx250_bstack
    .local pmc rx250_cstack
    (rx250_cur, rx250_tgt, rx250_pos, rx250_curclass, rx250_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx250_cur
    length rx250_eos, rx250_tgt
    eq $I19, 1, rx250_restart804
    gt rx250_pos, rx250_eos, rx250_fail805
    repr_get_attr_int $I11, self, rx250_curclass, "$!from"
    ne $I11, -1, rxscan251_done811
    goto rxscan251_scan810
  rxscan251_loop809:
    inc rx250_pos
    gt rx250_pos, rx250_eos, rx250_fail805
    repr_bind_attr_int rx250_cur, rx250_curclass, "$!from", rx250_pos
  rxscan251_scan810:
    nqp_rxmark rx250_bstack, rxscan251_loop809, rx250_pos, 0
  rxscan251_done811:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt252_0813
    nqp_push_label $P11, alt252_1814
    nqp_rxmark rx250_bstack, alt252_end812, -1, 0
    rx250_cur."!alt"(rx250_pos, "alt_nfa__11_1356803028.20112", $P11)
    goto rx250_fail805
  alt252_0813:
    add $I11, rx250_pos, 2
    gt $I11, rx250_eos, rx250_fail805
    substr $S10, rx250_tgt, rx250_pos, 2
    ne $S10, ucs4:"->", rx250_fail805
    add rx250_pos, 2
    goto alt252_end812
  alt252_1814:
    add $I11, rx250_pos, 3
    gt $I11, rx250_eos, rx250_fail805
    substr $S10, rx250_tgt, rx250_pos, 3
    ne $S10, ucs4:"<->", rx250_fail805
    add rx250_pos, 3
    goto alt252_end812
  alt252_end812:
    rx250_cur."!cursor_pass"(rx250_pos, "lambda", 'backtrack'=>1)
    .return (rx250_cur)
  rx250_restart804:
    repr_get_attr_obj rx250_cstack, rx250_cur, rx250_curclass, "$!cstack"
  rx250_fail805:
    unless rx250_bstack, rx250_done803
    pop $I19, rx250_bstack
    if_null rx250_cstack, rx250_cstack_done808
    unless rx250_cstack, rx250_cstack_done808
    dec $I19
    set $P11, rx250_cstack[$I19]
  rx250_cstack_done808:
    pop rx250_rep, rx250_bstack
    pop rx250_pos, rx250_bstack
    pop $I19, rx250_bstack
    lt rx250_pos, -1, rx250_done803
    lt rx250_pos, 0, rx250_fail805
    eq $I19, 0, rx250_fail805
    nqp_islist $I20, rx250_cstack
    unless $I20, rx250_jump806
    elements $I18, rx250_bstack
    le $I18, 0, rx250_cut807
    dec $I18
    set $I18, rx250_bstack[$I18]
  rx250_cut807:
    assign rx250_cstack, $I18
  rx250_jump806:
    jump $I19
  rx250_done803:
    rx250_cur."!cursor_fail"()
    .return (rx250_cur) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_52_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 791
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx253_tgt
    .local int rx253_pos
    .local int rx253_off
    .local int rx253_eos
    .local int rx253_rep
    .local pmc rx253_cur
    .local pmc rx253_curclass
    .local pmc rx253_bstack
    .local pmc rx253_cstack
    (rx253_cur, rx253_tgt, rx253_pos, rx253_curclass, rx253_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx253_cur
    length rx253_eos, rx253_tgt
    eq $I19, 1, rx253_restart817
    gt rx253_pos, rx253_eos, rx253_fail818
    repr_get_attr_int $I11, self, rx253_curclass, "$!from"
    ne $I11, -1, rxscan254_done824
    goto rxscan254_scan823
  rxscan254_loop822:
    inc rx253_pos
    gt rx253_pos, rx253_eos, rx253_fail818
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!from", rx253_pos
  rxscan254_scan823:
    nqp_rxmark rx253_bstack, rxscan254_loop822, rx253_pos, 0
  rxscan254_done824:
  alt255_0826:
    nqp_rxmark rx253_bstack, alt255_1827, rx253_pos, 0
    ge rx253_pos, rx253_eos, rx253_fail818
    substr $S11, rx253_tgt, rx253_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx253_fail818
    goto alt255_end825
  alt255_1827:
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail818
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
  alt255_end825:
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail818
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail818
    nqp_rxmark rx253_bstack, rxsubrule258_pass830, -1, 0
  rxsubrule258_pass830:
    rx253_cstack = rx253_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
    rx253_cur."!cursor_pass"(rx253_pos, "block", 'backtrack'=>1)
    .return (rx253_cur)
  rx253_restart817:
    repr_get_attr_obj rx253_cstack, rx253_cur, rx253_curclass, "$!cstack"
  rx253_fail818:
    unless rx253_bstack, rx253_done816
    pop $I19, rx253_bstack
    if_null rx253_cstack, rx253_cstack_done821
    unless rx253_cstack, rx253_cstack_done821
    dec $I19
    set $P11, rx253_cstack[$I19]
  rx253_cstack_done821:
    pop rx253_rep, rx253_bstack
    pop rx253_pos, rx253_bstack
    pop $I19, rx253_bstack
    lt rx253_pos, -1, rx253_done816
    lt rx253_pos, 0, rx253_fail818
    eq $I19, 0, rx253_fail818
    nqp_islist $I20, rx253_cstack
    unless $I20, rx253_jump819
    elements $I18, rx253_bstack
    le $I18, 0, rx253_cut820
    dec $I18
    set $I18, rx253_bstack[$I18]
  rx253_cut820:
    assign rx253_cstack, $I18
  rx253_jump819:
    jump $I19
  rx253_done816:
    rx253_cur."!cursor_fail"()
    .return (rx253_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_53_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 797
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx259_tgt
    .local int rx259_pos
    .local int rx259_off
    .local int rx259_eos
    .local int rx259_rep
    .local pmc rx259_cur
    .local pmc rx259_curclass
    .local pmc rx259_bstack
    .local pmc rx259_cstack
    (rx259_cur, rx259_tgt, rx259_pos, rx259_curclass, rx259_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx259_cur
    length rx259_eos, rx259_tgt
    eq $I19, 1, rx259_restart833
    gt rx259_pos, rx259_eos, rx259_fail834
    repr_get_attr_int $I11, self, rx259_curclass, "$!from"
    ne $I11, -1, rxscan260_done840
    goto rxscan260_scan839
  rxscan260_loop838:
    inc rx259_pos
    gt rx259_pos, rx259_eos, rx259_fail834
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!from", rx259_pos
  rxscan260_scan839:
    nqp_rxmark rx259_bstack, rxscan260_loop838, rx259_pos, 0
  rxscan260_done840:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    store_lex unicode:"$\x{a2}", rx259_cur
    unless_null $P101, fallback841
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback842
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback842:
    unless_null $P5002, vivi_261843
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_261843:
    set $P101, $P5002
  fallback841:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail834
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt263_0846:
    nqp_rxmark rx259_bstack, alt263_1848, rx259_pos, 0
    add $I11, rx259_pos, 14
    gt $I11, rx259_eos, rx259_fail834
    substr $S10, rx259_tgt, rx259_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx259_fail834
    add rx259_pos, 14
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail834
    nqp_rxmark rx259_bstack, rxsubrule264_pass847, -1, 0
  rxsubrule264_pass847:
    rx259_cstack = rx259_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
    goto alt263_end845
  alt263_1848:
    add $I11, rx259_pos, 1
    gt $I11, rx259_eos, rx259_fail834
    substr $S10, rx259_tgt, rx259_pos, 1
    ne $S10, ucs4:"{", rx259_fail834
    add rx259_pos, 1
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail834
    nqp_rxmark rx259_bstack, rxsubrule265_pass849, -1, 0
  rxsubrule265_pass849:
    rx259_cstack = rx259_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt266_0851:
    nqp_rxmark rx259_bstack, alt266_1852, rx259_pos, 0
    add $I11, rx259_pos, 1
    gt $I11, rx259_eos, rx259_fail834
    substr $S10, rx259_tgt, rx259_pos, 1
    ne $S10, ucs4:"}", rx259_fail834
    add rx259_pos, 1
    goto alt266_end850
  alt266_1852:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail834
    goto rxsubrule267_pass853
  rxsubrule267_back854:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail834
  rxsubrule267_pass853:
    rx259_cstack = rx259_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule267_back854
    push rx259_bstack, $I11
    push rx259_bstack, 0
    push rx259_bstack, rx259_pos
    elements $I11, rx259_cstack
    push rx259_bstack, $I11
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt266_end850:
  alt263_end845:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail834
    rx259_cur."!cursor_pass"(rx259_pos, "blockoid", 'backtrack'=>1)
    .return (rx259_cur)
  rx259_restart833:
    repr_get_attr_obj rx259_cstack, rx259_cur, rx259_curclass, "$!cstack"
  rx259_fail834:
    unless rx259_bstack, rx259_done832
    pop $I19, rx259_bstack
    if_null rx259_cstack, rx259_cstack_done837
    unless rx259_cstack, rx259_cstack_done837
    dec $I19
    set $P11, rx259_cstack[$I19]
  rx259_cstack_done837:
    pop rx259_rep, rx259_bstack
    pop rx259_pos, rx259_bstack
    pop $I19, rx259_bstack
    lt rx259_pos, -1, rx259_done832
    lt rx259_pos, 0, rx259_fail834
    eq $I19, 0, rx259_fail834
    nqp_islist $I20, rx259_cstack
    unless $I20, rx259_jump835
    elements $I18, rx259_bstack
    le $I18, 0, rx259_cut836
    dec $I18
    set $I18, rx259_bstack[$I18]
  rx259_cut836:
    assign rx259_cstack, $I18
  rx259_jump835:
    jump $I19
  rx259_done832:
    rx259_cur."!cursor_fail"()
    .return (rx259_cur) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_54_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 807
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx268_tgt
    .local int rx268_pos
    .local int rx268_off
    .local int rx268_eos
    .local int rx268_rep
    .local pmc rx268_cur
    .local pmc rx268_curclass
    .local pmc rx268_bstack
    .local pmc rx268_cstack
    (rx268_cur, rx268_tgt, rx268_pos, rx268_curclass, rx268_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx268_cur
    length rx268_eos, rx268_tgt
    eq $I19, 1, rx268_restart857
    gt rx268_pos, rx268_eos, rx268_fail858
    repr_get_attr_int $I11, self, rx268_curclass, "$!from"
    ne $I11, -1, rxscan269_done864
    goto rxscan269_scan863
  rxscan269_loop862:
    inc rx268_pos
    gt rx268_pos, rx268_eos, rx268_fail858
    repr_bind_attr_int rx268_cur, rx268_curclass, "$!from", rx268_pos
  rxscan269_scan863:
    nqp_rxmark rx268_bstack, rxscan269_loop862, rx268_pos, 0
  rxscan269_done864:
    rx268_cur."!cursor_pass"(rx268_pos, "newpad", 'backtrack'=>1)
    .return (rx268_cur)
  rx268_restart857:
    repr_get_attr_obj rx268_cstack, rx268_cur, rx268_curclass, "$!cstack"
  rx268_fail858:
    unless rx268_bstack, rx268_done856
    pop $I19, rx268_bstack
    if_null rx268_cstack, rx268_cstack_done861
    unless rx268_cstack, rx268_cstack_done861
    dec $I19
    set $P11, rx268_cstack[$I19]
  rx268_cstack_done861:
    pop rx268_rep, rx268_bstack
    pop rx268_pos, rx268_bstack
    pop $I19, rx268_bstack
    lt rx268_pos, -1, rx268_done856
    lt rx268_pos, 0, rx268_fail858
    eq $I19, 0, rx268_fail858
    nqp_islist $I20, rx268_cstack
    unless $I20, rx268_jump859
    elements $I18, rx268_bstack
    le $I18, 0, rx268_cut860
    dec $I18
    set $I18, rx268_bstack[$I18]
  rx268_cut860:
    assign rx268_cstack, $I18
  rx268_jump859:
    jump $I19
  rx268_done856:
    rx268_cur."!cursor_fail"()
    .return (rx268_cur) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_55_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 808
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx271_tgt
    .local int rx271_pos
    .local int rx271_off
    .local int rx271_eos
    .local int rx271_rep
    .local pmc rx271_cur
    .local pmc rx271_curclass
    .local pmc rx271_bstack
    .local pmc rx271_cstack
    (rx271_cur, rx271_tgt, rx271_pos, rx271_curclass, rx271_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx271_cur
    length rx271_eos, rx271_tgt
    eq $I19, 1, rx271_restart868
    gt rx271_pos, rx271_eos, rx271_fail869
    repr_get_attr_int $I11, self, rx271_curclass, "$!from"
    ne $I11, -1, rxscan272_done875
    goto rxscan272_scan874
  rxscan272_loop873:
    inc rx271_pos
    gt rx271_pos, rx271_eos, rx271_fail869
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!from", rx271_pos
  rxscan272_scan874:
    nqp_rxmark rx271_bstack, rxscan272_loop873, rx271_pos, 0
  rxscan272_done875:
    rx271_cur."!cursor_pass"(rx271_pos, "outerctx", 'backtrack'=>1)
    .return (rx271_cur)
  rx271_restart868:
    repr_get_attr_obj rx271_cstack, rx271_cur, rx271_curclass, "$!cstack"
  rx271_fail869:
    unless rx271_bstack, rx271_done867
    pop $I19, rx271_bstack
    if_null rx271_cstack, rx271_cstack_done872
    unless rx271_cstack, rx271_cstack_done872
    dec $I19
    set $P11, rx271_cstack[$I19]
  rx271_cstack_done872:
    pop rx271_rep, rx271_bstack
    pop rx271_pos, rx271_bstack
    pop $I19, rx271_bstack
    lt rx271_pos, -1, rx271_done867
    lt rx271_pos, 0, rx271_fail869
    eq $I19, 0, rx271_fail869
    nqp_islist $I20, rx271_cstack
    unless $I20, rx271_jump870
    elements $I18, rx271_bstack
    le $I18, 0, rx271_cut871
    dec $I18
    set $I18, rx271_bstack[$I18]
  rx271_cut871:
    assign rx271_cstack, $I18
  rx271_jump870:
    jump $I19
  rx271_done867:
    rx271_cur."!cursor_fail"()
    .return (rx271_cur) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_56_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 809
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx274_tgt
    .local int rx274_pos
    .local int rx274_off
    .local int rx274_eos
    .local int rx274_rep
    .local pmc rx274_cur
    .local pmc rx274_curclass
    .local pmc rx274_bstack
    .local pmc rx274_cstack
    (rx274_cur, rx274_tgt, rx274_pos, rx274_curclass, rx274_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx274_cur
    length rx274_eos, rx274_tgt
    eq $I19, 1, rx274_restart879
    gt rx274_pos, rx274_eos, rx274_fail880
    repr_get_attr_int $I11, self, rx274_curclass, "$!from"
    ne $I11, -1, rxscan275_done886
    goto rxscan275_scan885
  rxscan275_loop884:
    inc rx274_pos
    gt rx274_pos, rx274_eos, rx274_fail880
    repr_bind_attr_int rx274_cur, rx274_curclass, "$!from", rx274_pos
  rxscan275_scan885:
    nqp_rxmark rx274_bstack, rxscan275_loop884, rx274_pos, 0
  rxscan275_done886:
    rx274_cur."!cursor_pass"(rx274_pos, "finishpad", 'backtrack'=>1)
    .return (rx274_cur)
  rx274_restart879:
    repr_get_attr_obj rx274_cstack, rx274_cur, rx274_curclass, "$!cstack"
  rx274_fail880:
    unless rx274_bstack, rx274_done878
    pop $I19, rx274_bstack
    if_null rx274_cstack, rx274_cstack_done883
    unless rx274_cstack, rx274_cstack_done883
    dec $I19
    set $P11, rx274_cstack[$I19]
  rx274_cstack_done883:
    pop rx274_rep, rx274_bstack
    pop rx274_pos, rx274_bstack
    pop $I19, rx274_bstack
    lt rx274_pos, -1, rx274_done878
    lt rx274_pos, 0, rx274_fail880
    eq $I19, 0, rx274_fail880
    nqp_islist $I20, rx274_cstack
    unless $I20, rx274_jump881
    elements $I18, rx274_bstack
    le $I18, 0, rx274_cut882
    dec $I18
    set $I18, rx274_bstack[$I18]
  rx274_cut882:
    assign rx274_cstack, $I18
  rx274_jump881:
    jump $I19
  rx274_done878:
    rx274_cur."!cursor_fail"()
    .return (rx274_cur) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_57_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 810
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx277_tgt
    .local int rx277_pos
    .local int rx277_off
    .local int rx277_eos
    .local int rx277_rep
    .local pmc rx277_cur
    .local pmc rx277_curclass
    .local pmc rx277_bstack
    .local pmc rx277_cstack
    (rx277_cur, rx277_tgt, rx277_pos, rx277_curclass, rx277_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx277_cur
    length rx277_eos, rx277_tgt
    eq $I19, 1, rx277_restart890
    gt rx277_pos, rx277_eos, rx277_fail891
    repr_get_attr_int $I11, self, rx277_curclass, "$!from"
    ne $I11, -1, rxscan278_done897
    goto rxscan278_scan896
  rxscan278_loop895:
    inc rx277_pos
    gt rx277_pos, rx277_eos, rx277_fail891
    repr_bind_attr_int rx277_cur, rx277_curclass, "$!from", rx277_pos
  rxscan278_scan896:
    nqp_rxmark rx277_bstack, rxscan278_loop895, rx277_pos, 0
  rxscan278_done897:
    rx277_cur."!cursor_pass"(rx277_pos, "you_are_here", 'backtrack'=>1)
    .return (rx277_cur)
  rx277_restart890:
    repr_get_attr_obj rx277_cstack, rx277_cur, rx277_curclass, "$!cstack"
  rx277_fail891:
    unless rx277_bstack, rx277_done889
    pop $I19, rx277_bstack
    if_null rx277_cstack, rx277_cstack_done894
    unless rx277_cstack, rx277_cstack_done894
    dec $I19
    set $P11, rx277_cstack[$I19]
  rx277_cstack_done894:
    pop rx277_rep, rx277_bstack
    pop rx277_pos, rx277_bstack
    pop $I19, rx277_bstack
    lt rx277_pos, -1, rx277_done889
    lt rx277_pos, 0, rx277_fail891
    eq $I19, 0, rx277_fail891
    nqp_islist $I20, rx277_cstack
    unless $I20, rx277_jump892
    elements $I18, rx277_bstack
    le $I18, 0, rx277_cut893
    dec $I18
    set $I18, rx277_bstack[$I18]
  rx277_cut893:
    assign rx277_cstack, $I18
  rx277_jump892:
    jump $I19
  rx277_done889:
    rx277_cur."!cursor_fail"()
    .return (rx277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_58_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 812
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_59_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 814
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_curclass
    .local pmc rx280_bstack
    .local pmc rx280_cstack
    (rx280_cur, rx280_tgt, rx280_pos, rx280_curclass, rx280_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx280_cur
    length rx280_eos, rx280_tgt
    eq $I19, 1, rx280_restart901
    gt rx280_pos, rx280_eos, rx280_fail902
    repr_get_attr_int $I11, self, rx280_curclass, "$!from"
    ne $I11, -1, rxscan281_done908
    goto rxscan281_scan907
  rxscan281_loop906:
    inc rx280_pos
    gt rx280_pos, rx280_eos, rx280_fail902
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!from", rx280_pos
  rxscan281_scan907:
    nqp_rxmark rx280_bstack, rxscan281_loop906, rx280_pos, 0
  rxscan281_done908:
    ge rx280_pos, rx280_eos, rx280_fail902
    substr $S11, rx280_tgt, rx280_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx280_fail902
    rx280_cur."!cursor_pass"(rx280_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx280_cur)
  rx280_restart901:
    repr_get_attr_obj rx280_cstack, rx280_cur, rx280_curclass, "$!cstack"
  rx280_fail902:
    unless rx280_bstack, rx280_done900
    pop $I19, rx280_bstack
    if_null rx280_cstack, rx280_cstack_done905
    unless rx280_cstack, rx280_cstack_done905
    dec $I19
    set $P11, rx280_cstack[$I19]
  rx280_cstack_done905:
    pop rx280_rep, rx280_bstack
    pop rx280_pos, rx280_bstack
    pop $I19, rx280_bstack
    lt rx280_pos, -1, rx280_done900
    lt rx280_pos, 0, rx280_fail902
    eq $I19, 0, rx280_fail902
    nqp_islist $I20, rx280_cstack
    unless $I20, rx280_jump903
    elements $I18, rx280_bstack
    le $I18, 0, rx280_cut904
    dec $I18
    set $I18, rx280_bstack[$I18]
  rx280_cut904:
    assign rx280_cstack, $I18
  rx280_jump903:
    jump $I19
  rx280_done900:
    rx280_cur."!cursor_fail"()
    .return (rx280_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_60_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 815
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx282_tgt
    .local int rx282_pos
    .local int rx282_off
    .local int rx282_eos
    .local int rx282_rep
    .local pmc rx282_cur
    .local pmc rx282_curclass
    .local pmc rx282_bstack
    .local pmc rx282_cstack
    (rx282_cur, rx282_tgt, rx282_pos, rx282_curclass, rx282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx282_cur
    length rx282_eos, rx282_tgt
    eq $I19, 1, rx282_restart911
    gt rx282_pos, rx282_eos, rx282_fail912
    repr_get_attr_int $I11, self, rx282_curclass, "$!from"
    ne $I11, -1, rxscan283_done918
    goto rxscan283_scan917
  rxscan283_loop916:
    inc rx282_pos
    gt rx282_pos, rx282_eos, rx282_fail912
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!from", rx282_pos
  rxscan283_scan917:
    nqp_rxmark rx282_bstack, rxscan283_loop916, rx282_pos, 0
  rxscan283_done918:
    ge rx282_pos, rx282_eos, rx282_fail912
    substr $S11, rx282_tgt, rx282_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx282_fail912
    rx282_cur."!cursor_pass"(rx282_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx282_cur)
  rx282_restart911:
    repr_get_attr_obj rx282_cstack, rx282_cur, rx282_curclass, "$!cstack"
  rx282_fail912:
    unless rx282_bstack, rx282_done910
    pop $I19, rx282_bstack
    if_null rx282_cstack, rx282_cstack_done915
    unless rx282_cstack, rx282_cstack_done915
    dec $I19
    set $P11, rx282_cstack[$I19]
  rx282_cstack_done915:
    pop rx282_rep, rx282_bstack
    pop rx282_pos, rx282_bstack
    pop $I19, rx282_bstack
    lt rx282_pos, -1, rx282_done910
    lt rx282_pos, 0, rx282_fail912
    eq $I19, 0, rx282_fail912
    nqp_islist $I20, rx282_cstack
    unless $I20, rx282_jump913
    elements $I18, rx282_bstack
    le $I18, 0, rx282_cut914
    dec $I18
    set $I18, rx282_bstack[$I18]
  rx282_cut914:
    assign rx282_cstack, $I18
  rx282_jump913:
    jump $I19
  rx282_done910:
    rx282_cur."!cursor_fail"()
    .return (rx282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_61_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 819
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_62_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 821
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart921
    gt rx284_pos, rx284_eos, rx284_fail922
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done928
    goto rxscan285_scan927
  rxscan285_loop926:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail922
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan927:
    nqp_rxmark rx284_bstack, rxscan285_loop926, rx284_pos, 0
  rxscan285_done928:
    nqp_rxmark rx284_bstack, rxcap286_fail930, rx284_pos, 0
    add $I11, rx284_pos, 3
    gt $I11, rx284_eos, rx284_fail922
    substr $S10, rx284_tgt, rx284_pos, 3
    ne $S10, ucs4:"use", rx284_fail922
    add rx284_pos, 3
    nqp_rxpeek $I19, rx284_bstack, rxcap286_fail930
    inc $I19
    set $I11, rx284_bstack[$I19]
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx284_pos)
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "sym")
    goto rxcap286_done929
  rxcap286_fail930:
    goto rx284_fail922
  rxcap286_done929:
    ge rx284_pos, rx284_eos, rx284_fail922
    is_cclass $I11, .CCLASS_WHITESPACE, rx284_tgt, rx284_pos
    unless $I11, rx284_fail922
    add rx284_pos, 1
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."ws"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail922
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."name"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail922
    nqp_rxmark rx284_bstack, rxsubrule288_pass932, -1, 0
  rxsubrule288_pass932:
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."ws"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail922
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    rx284_cur."!cursor_pass"(rx284_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart921:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail922:
    unless rx284_bstack, rx284_done920
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done925
    unless rx284_cstack, rx284_cstack_done925
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done925:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done920
    lt rx284_pos, 0, rx284_fail922
    eq $I19, 0, rx284_fail922
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump923
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut924
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut924:
    assign rx284_cstack, $I18
  rx284_jump923:
    jump $I19
  rx284_done920:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_63_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 825
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx290_tgt
    .local int rx290_pos
    .local int rx290_off
    .local int rx290_eos
    .local int rx290_rep
    .local pmc rx290_cur
    .local pmc rx290_curclass
    .local pmc rx290_bstack
    .local pmc rx290_cstack
    (rx290_cur, rx290_tgt, rx290_pos, rx290_curclass, rx290_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx290_cur
    length rx290_eos, rx290_tgt
    eq $I19, 1, rx290_restart936
    gt rx290_pos, rx290_eos, rx290_fail937
    repr_get_attr_int $I11, self, rx290_curclass, "$!from"
    ne $I11, -1, rxscan291_done943
    goto rxscan291_scan942
  rxscan291_loop941:
    inc rx290_pos
    gt rx290_pos, rx290_eos, rx290_fail937
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!from", rx290_pos
  rxscan291_scan942:
    nqp_rxmark rx290_bstack, rxscan291_loop941, rx290_pos, 0
  rxscan291_done943:
    nqp_rxmark rx290_bstack, rxcap292_fail945, rx290_pos, 0
    add $I11, rx290_pos, 2
    gt $I11, rx290_eos, rx290_fail937
    substr $S10, rx290_tgt, rx290_pos, 2
    ne $S10, ucs4:"if", rx290_fail937
    add rx290_pos, 2
    nqp_rxpeek $I19, rx290_bstack, rxcap292_fail945
    inc $I19
    set $I11, rx290_bstack[$I19]
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx290_pos)
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "sym")
    goto rxcap292_done944
  rxcap292_fail945:
    goto rx290_fail937
  rxcap292_done944:
    ge rx290_pos, rx290_eos, rx290_fail937
    is_cclass $I11, .CCLASS_WHITESPACE, rx290_tgt, rx290_pos
    unless $I11, rx290_fail937
    add rx290_pos, 1
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    nqp_rxmark rx290_bstack, rxsubrule294_pass947, -1, 0
  rxsubrule294_pass947:
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxmark rx290_bstack, rxquantr296_done950, rx290_pos, 0
  rxquantr296_loop949:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    add $I11, rx290_pos, 5
    gt $I11, rx290_eos, rx290_fail937
    substr $S10, rx290_tgt, rx290_pos, 5
    ne $S10, ucs4:"elsif", rx290_fail937
    add rx290_pos, 5
    ge rx290_pos, rx290_eos, rx290_fail937
    is_cclass $I11, .CCLASS_WHITESPACE, rx290_tgt, rx290_pos
    unless $I11, rx290_fail937
    add rx290_pos, 1
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    nqp_rxmark rx290_bstack, rxsubrule299_pass953, -1, 0
  rxsubrule299_pass953:
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxpeek $I19, rx290_bstack, rxquantr296_done950
    inc $I19
    inc $I19
    set rx290_rep, rx290_bstack[$I19]
    nqp_rxcommit rx290_bstack, rxquantr296_done950
    inc rx290_rep
    nqp_rxmark rx290_bstack, rxquantr296_done950, rx290_pos, rx290_rep
    goto rxquantr296_loop949
  rxquantr296_done950:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxmark rx290_bstack, rxquantr302_done957, rx290_pos, 0
  rxquantr302_loop956:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    add $I11, rx290_pos, 4
    gt $I11, rx290_eos, rx290_fail937
    substr $S10, rx290_tgt, rx290_pos, 4
    ne $S10, ucs4:"else", rx290_fail937
    add rx290_pos, 4
    ge rx290_pos, rx290_eos, rx290_fail937
    is_cclass $I11, .CCLASS_WHITESPACE, rx290_tgt, rx290_pos
    unless $I11, rx290_fail937
    add rx290_pos, 1
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    nqp_rxmark rx290_bstack, rxsubrule305_pass960, -1, 0
  rxsubrule305_pass960:
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxpeek $I19, rx290_bstack, rxquantr302_done957
    inc $I19
    inc $I19
    set rx290_rep, rx290_bstack[$I19]
    nqp_rxcommit rx290_bstack, rxquantr302_done957
    inc rx290_rep
  rxquantr302_done957:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail937
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    rx290_cur."!cursor_pass"(rx290_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx290_cur)
  rx290_restart936:
    repr_get_attr_obj rx290_cstack, rx290_cur, rx290_curclass, "$!cstack"
  rx290_fail937:
    unless rx290_bstack, rx290_done935
    pop $I19, rx290_bstack
    if_null rx290_cstack, rx290_cstack_done940
    unless rx290_cstack, rx290_cstack_done940
    dec $I19
    set $P11, rx290_cstack[$I19]
  rx290_cstack_done940:
    pop rx290_rep, rx290_bstack
    pop rx290_pos, rx290_bstack
    pop $I19, rx290_bstack
    lt rx290_pos, -1, rx290_done935
    lt rx290_pos, 0, rx290_fail937
    eq $I19, 0, rx290_fail937
    nqp_islist $I20, rx290_cstack
    unless $I20, rx290_jump938
    elements $I18, rx290_bstack
    le $I18, 0, rx290_cut939
    dec $I18
    set $I18, rx290_bstack[$I18]
  rx290_cut939:
    assign rx290_cstack, $I18
  rx290_jump938:
    jump $I19
  rx290_done935:
    rx290_cur."!cursor_fail"()
    .return (rx290_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_64_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 832
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_65_1356803026.47425' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx308_tgt
    .local int rx308_pos
    .local int rx308_off
    .local int rx308_eos
    .local int rx308_rep
    .local pmc rx308_cur
    .local pmc rx308_curclass
    .local pmc rx308_bstack
    .local pmc rx308_cstack
    (rx308_cur, rx308_tgt, rx308_pos, rx308_curclass, rx308_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx308_cur
    length rx308_eos, rx308_tgt
    eq $I19, 1, rx308_restart965
    gt rx308_pos, rx308_eos, rx308_fail966
    repr_get_attr_int $I11, self, rx308_curclass, "$!from"
    ne $I11, -1, rxscan309_done972
    goto rxscan309_scan971
  rxscan309_loop970:
    inc rx308_pos
    gt rx308_pos, rx308_eos, rx308_fail966
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!from", rx308_pos
  rxscan309_scan971:
    nqp_rxmark rx308_bstack, rxscan309_loop970, rx308_pos, 0
  rxscan309_done972:
    nqp_rxmark rx308_bstack, rxcap310_fail974, rx308_pos, 0
    add $I11, rx308_pos, 6
    gt $I11, rx308_eos, rx308_fail966
    substr $S10, rx308_tgt, rx308_pos, 6
    ne $S10, ucs4:"unless", rx308_fail966
    add rx308_pos, 6
    nqp_rxpeek $I19, rx308_bstack, rxcap310_fail974
    inc $I19
    set $I11, rx308_bstack[$I19]
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx308_pos)
    rx308_cstack = rx308_cur."!cursor_capture"($P11, "sym")
    goto rxcap310_done973
  rxcap310_fail974:
    goto rx308_fail966
  rxcap310_done973:
    ge rx308_pos, rx308_eos, rx308_fail966
    is_cclass $I11, .CCLASS_WHITESPACE, rx308_tgt, rx308_pos
    unless $I11, rx308_fail966
    add rx308_pos, 1
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail966
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail966
    nqp_rxmark rx308_bstack, rxsubrule312_pass976, -1, 0
  rxsubrule312_pass976:
    rx308_cstack = rx308_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail966
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
  alt314_0979:
    nqp_rxmark rx308_bstack, alt314_1992, rx308_pos, 0
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail966
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_65_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    ge $I11, 0, rx308_fail966
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail966
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    goto alt314_end978
  alt314_1992:
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail966
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail966
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail966
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
  alt314_end978:
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail966
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    rx308_cur."!cursor_pass"(rx308_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx308_cur)
  rx308_restart965:
    repr_get_attr_obj rx308_cstack, rx308_cur, rx308_curclass, "$!cstack"
  rx308_fail966:
    unless rx308_bstack, rx308_done964
    pop $I19, rx308_bstack
    if_null rx308_cstack, rx308_cstack_done969
    unless rx308_cstack, rx308_cstack_done969
    dec $I19
    set $P11, rx308_cstack[$I19]
  rx308_cstack_done969:
    pop rx308_rep, rx308_bstack
    pop rx308_pos, rx308_bstack
    pop $I19, rx308_bstack
    lt rx308_pos, -1, rx308_done964
    lt rx308_pos, 0, rx308_fail966
    eq $I19, 0, rx308_fail966
    nqp_islist $I20, rx308_cstack
    unless $I20, rx308_jump967
    elements $I18, rx308_bstack
    le $I18, 0, rx308_cut968
    dec $I18
    set $I18, rx308_bstack[$I18]
  rx308_cut968:
    assign rx308_cstack, $I18
  rx308_jump967:
    jump $I19
  rx308_done964:
    rx308_cur."!cursor_fail"()
    .return (rx308_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_65_1356803026.47425") :anon :lex :outer("cuid_64_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx316_tgt
    .local int rx316_pos
    .local int rx316_off
    .local int rx316_eos
    .local int rx316_rep
    .local pmc rx316_cur
    .local pmc rx316_curclass
    .local pmc rx316_bstack
    .local pmc rx316_cstack
    (rx316_cur, rx316_tgt, rx316_pos, rx316_curclass, rx316_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx316_cur
    length rx316_eos, rx316_tgt
    eq $I19, 1, rx316_restart983
    gt rx316_pos, rx316_eos, rx316_fail984
    repr_get_attr_int $I11, self, rx316_curclass, "$!from"
    ne $I11, -1, rxscan317_done990
    goto rxscan317_scan989
  rxscan317_loop988:
    inc rx316_pos
    gt rx316_pos, rx316_eos, rx316_fail984
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!from", rx316_pos
  rxscan317_scan989:
    nqp_rxmark rx316_bstack, rxscan317_loop988, rx316_pos, 0
  rxscan317_done990:
    add $I11, rx316_pos, 4
    gt $I11, rx316_eos, rx316_fail984
    substr $S10, rx316_tgt, rx316_pos, 4
    ne $S10, ucs4:"else", rx316_fail984
    add rx316_pos, 4
    rx316_cur."!cursor_pass"(rx316_pos, 'backtrack'=>1)
    .return (rx316_cur)
  rx316_restart983:
    repr_get_attr_obj rx316_cstack, rx316_cur, rx316_curclass, "$!cstack"
  rx316_fail984:
    unless rx316_bstack, rx316_done982
    pop $I19, rx316_bstack
    if_null rx316_cstack, rx316_cstack_done987
    unless rx316_cstack, rx316_cstack_done987
    dec $I19
    set $P11, rx316_cstack[$I19]
  rx316_cstack_done987:
    pop rx316_rep, rx316_bstack
    pop rx316_pos, rx316_bstack
    pop $I19, rx316_bstack
    lt rx316_pos, -1, rx316_done982
    lt rx316_pos, 0, rx316_fail984
    eq $I19, 0, rx316_fail984
    nqp_islist $I20, rx316_cstack
    unless $I20, rx316_jump985
    elements $I18, rx316_bstack
    le $I18, 0, rx316_cut986
    dec $I18
    set $I18, rx316_bstack[$I18]
  rx316_cut986:
    assign rx316_cstack, $I18
  rx316_jump985:
    jump $I19
  rx316_done982:
    rx316_cur."!cursor_fail"()
    .return (rx316_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_66_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 838
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx323_tgt
    .local int rx323_pos
    .local int rx323_off
    .local int rx323_eos
    .local int rx323_rep
    .local pmc rx323_cur
    .local pmc rx323_curclass
    .local pmc rx323_bstack
    .local pmc rx323_cstack
    (rx323_cur, rx323_tgt, rx323_pos, rx323_curclass, rx323_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx323_cur
    length rx323_eos, rx323_tgt
    eq $I19, 1, rx323_restart999
    gt rx323_pos, rx323_eos, rx323_fail1000
    repr_get_attr_int $I11, self, rx323_curclass, "$!from"
    ne $I11, -1, rxscan324_done1006
    goto rxscan324_scan1005
  rxscan324_loop1004:
    inc rx323_pos
    gt rx323_pos, rx323_eos, rx323_fail1000
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!from", rx323_pos
  rxscan324_scan1005:
    nqp_rxmark rx323_bstack, rxscan324_loop1004, rx323_pos, 0
  rxscan324_done1006:
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    store_lex unicode:"$\x{a2}", rx323_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx323_bstack, rxcap325_fail1008, rx323_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt326_01010
    nqp_push_label $P11, alt326_11011
    nqp_rxmark rx323_bstack, alt326_end1009, -1, 0
    rx323_cur."!alt"(rx323_pos, "alt_nfa__12_1356803028.33976", $P11)
    goto rx323_fail1000
  alt326_01010:
    add $I11, rx323_pos, 5
    gt $I11, rx323_eos, rx323_fail1000
    substr $S10, rx323_tgt, rx323_pos, 5
    ne $S10, ucs4:"while", rx323_fail1000
    add rx323_pos, 5
    goto alt326_end1009
  alt326_11011:
    add $I11, rx323_pos, 5
    gt $I11, rx323_eos, rx323_fail1000
    substr $S10, rx323_tgt, rx323_pos, 5
    ne $S10, ucs4:"until", rx323_fail1000
    add rx323_pos, 5
    goto alt326_end1009
  alt326_end1009:
    nqp_rxcommit rx323_bstack, alt326_end1009
    nqp_rxpeek $I19, rx323_bstack, rxcap325_fail1008
    inc $I19
    set $I11, rx323_bstack[$I19]
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx323_pos)
    rx323_cstack = rx323_cur."!cursor_capture"($P11, "sym")
    goto rxcap325_done1007
  rxcap325_fail1008:
    goto rx323_fail1000
  rxcap325_done1007:
    ge rx323_pos, rx323_eos, rx323_fail1000
    is_cclass $I11, .CCLASS_WHITESPACE, rx323_tgt, rx323_pos
    unless $I11, rx323_fail1000
    add rx323_pos, 1
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."ws"()
    repr_get_attr_int $I11, $P11, rx323_curclass, "$!pos"
    lt $I11, 0, rx323_fail1000
    repr_get_attr_int rx323_pos, $P11, rx323_curclass, "$!pos"
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx323_curclass, "$!pos"
    lt $I11, 0, rx323_fail1000
    nqp_rxmark rx323_bstack, rxsubrule328_pass1013, -1, 0
  rxsubrule328_pass1013:
    rx323_cstack = rx323_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx323_pos, $P11, rx323_curclass, "$!pos"
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."ws"()
    repr_get_attr_int $I11, $P11, rx323_curclass, "$!pos"
    lt $I11, 0, rx323_fail1000
    repr_get_attr_int rx323_pos, $P11, rx323_curclass, "$!pos"
    rx323_cur."!cursor_pass"(rx323_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx323_cur)
  rx323_restart999:
    repr_get_attr_obj rx323_cstack, rx323_cur, rx323_curclass, "$!cstack"
  rx323_fail1000:
    unless rx323_bstack, rx323_done998
    pop $I19, rx323_bstack
    if_null rx323_cstack, rx323_cstack_done1003
    unless rx323_cstack, rx323_cstack_done1003
    dec $I19
    set $P11, rx323_cstack[$I19]
  rx323_cstack_done1003:
    pop rx323_rep, rx323_bstack
    pop rx323_pos, rx323_bstack
    pop $I19, rx323_bstack
    lt rx323_pos, -1, rx323_done998
    lt rx323_pos, 0, rx323_fail1000
    eq $I19, 0, rx323_fail1000
    nqp_islist $I20, rx323_cstack
    unless $I20, rx323_jump1001
    elements $I18, rx323_bstack
    le $I18, 0, rx323_cut1002
    dec $I18
    set $I18, rx323_bstack[$I18]
  rx323_cut1002:
    assign rx323_cstack, $I18
  rx323_jump1001:
    jump $I19
  rx323_done998:
    rx323_cur."!cursor_fail"()
    .return (rx323_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_67_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 844
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx330_tgt
    .local int rx330_pos
    .local int rx330_off
    .local int rx330_eos
    .local int rx330_rep
    .local pmc rx330_cur
    .local pmc rx330_curclass
    .local pmc rx330_bstack
    .local pmc rx330_cstack
    (rx330_cur, rx330_tgt, rx330_pos, rx330_curclass, rx330_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx330_cur
    length rx330_eos, rx330_tgt
    eq $I19, 1, rx330_restart1017
    gt rx330_pos, rx330_eos, rx330_fail1018
    repr_get_attr_int $I11, self, rx330_curclass, "$!from"
    ne $I11, -1, rxscan331_done1024
    goto rxscan331_scan1023
  rxscan331_loop1022:
    inc rx330_pos
    gt rx330_pos, rx330_eos, rx330_fail1018
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!from", rx330_pos
  rxscan331_scan1023:
    nqp_rxmark rx330_bstack, rxscan331_loop1022, rx330_pos, 0
  rxscan331_done1024:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    store_lex unicode:"$\x{a2}", rx330_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx330_bstack, rxcap332_fail1026, rx330_pos, 0
    add $I11, rx330_pos, 6
    gt $I11, rx330_eos, rx330_fail1018
    substr $S10, rx330_tgt, rx330_pos, 6
    ne $S10, ucs4:"repeat", rx330_fail1018
    add rx330_pos, 6
    nqp_rxpeek $I19, rx330_bstack, rxcap332_fail1026
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "sym")
    goto rxcap332_done1025
  rxcap332_fail1026:
    goto rx330_fail1018
  rxcap332_done1025:
    ge rx330_pos, rx330_eos, rx330_fail1018
    is_cclass $I11, .CCLASS_WHITESPACE, rx330_tgt, rx330_pos
    unless $I11, rx330_fail1018
    add rx330_pos, 1
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt334_01029
    nqp_push_label $P11, alt334_11039
    nqp_rxmark rx330_bstack, alt334_end1028, -1, 0
    rx330_cur."!alt"(rx330_pos, "alt_nfa__15_1356803028.36184", $P11)
    goto rx330_fail1018
  alt334_01029:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    nqp_rxmark rx330_bstack, rxcap336_fail1032, rx330_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt337_01034
    nqp_push_label $P11, alt337_11035
    nqp_rxmark rx330_bstack, alt337_end1033, -1, 0
    rx330_cur."!alt"(rx330_pos, "alt_nfa__13_1356803028.36143", $P11)
    goto rx330_fail1018
  alt337_01034:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1018
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"while", rx330_fail1018
    add rx330_pos, 5
    goto alt337_end1033
  alt337_11035:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1018
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"until", rx330_fail1018
    add rx330_pos, 5
    goto alt337_end1033
  alt337_end1033:
    nqp_rxcommit rx330_bstack, alt337_end1033
    nqp_rxpeek $I19, rx330_bstack, rxcap336_fail1032
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "wu")
    goto rxcap336_done1031
  rxcap336_fail1032:
    goto rx330_fail1018
  rxcap336_done1031:
    ge rx330_pos, rx330_eos, rx330_fail1018
    is_cclass $I11, .CCLASS_WHITESPACE, rx330_tgt, rx330_pos
    unless $I11, rx330_fail1018
    add rx330_pos, 1
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    nqp_rxmark rx330_bstack, rxsubrule339_pass1037, -1, 0
  rxsubrule339_pass1037:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    goto alt334_end1028
  alt334_11039:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    nqp_rxmark rx330_bstack, rxsubrule342_pass1041, -1, 0
  rxsubrule342_pass1041:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    nqp_rxmark rx330_bstack, rxcap344_fail1044, rx330_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt345_01046
    nqp_push_label $P11, alt345_11047
    nqp_rxmark rx330_bstack, alt345_end1045, -1, 0
    rx330_cur."!alt"(rx330_pos, "alt_nfa__14_1356803028.36174", $P11)
    goto rx330_fail1018
  alt345_01046:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1018
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"while", rx330_fail1018
    add rx330_pos, 5
    goto alt345_end1045
  alt345_11047:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1018
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"until", rx330_fail1018
    add rx330_pos, 5
    goto alt345_end1045
  alt345_end1045:
    nqp_rxcommit rx330_bstack, alt345_end1045
    nqp_rxpeek $I19, rx330_bstack, rxcap344_fail1044
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "wu")
    goto rxcap344_done1043
  rxcap344_fail1044:
    goto rx330_fail1018
  rxcap344_done1043:
    ge rx330_pos, rx330_eos, rx330_fail1018
    is_cclass $I11, .CCLASS_WHITESPACE, rx330_tgt, rx330_pos
    unless $I11, rx330_fail1018
    add rx330_pos, 1
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    nqp_rxmark rx330_bstack, rxsubrule347_pass1049, -1, 0
  rxsubrule347_pass1049:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    goto alt334_end1028
  alt334_end1028:
    nqp_rxcommit rx330_bstack, alt334_end1028
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1018
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    rx330_cur."!cursor_pass"(rx330_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx330_cur)
  rx330_restart1017:
    repr_get_attr_obj rx330_cstack, rx330_cur, rx330_curclass, "$!cstack"
  rx330_fail1018:
    unless rx330_bstack, rx330_done1016
    pop $I19, rx330_bstack
    if_null rx330_cstack, rx330_cstack_done1021
    unless rx330_cstack, rx330_cstack_done1021
    dec $I19
    set $P11, rx330_cstack[$I19]
  rx330_cstack_done1021:
    pop rx330_rep, rx330_bstack
    pop rx330_pos, rx330_bstack
    pop $I19, rx330_bstack
    lt rx330_pos, -1, rx330_done1016
    lt rx330_pos, 0, rx330_fail1018
    eq $I19, 0, rx330_fail1018
    nqp_islist $I20, rx330_cstack
    unless $I20, rx330_jump1019
    elements $I18, rx330_bstack
    le $I18, 0, rx330_cut1020
    dec $I18
    set $I18, rx330_bstack[$I18]
  rx330_cut1020:
    assign rx330_cstack, $I18
  rx330_jump1019:
    jump $I19
  rx330_done1016:
    rx330_cur."!cursor_fail"()
    .return (rx330_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_68_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 853
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx350_tgt
    .local int rx350_pos
    .local int rx350_off
    .local int rx350_eos
    .local int rx350_rep
    .local pmc rx350_cur
    .local pmc rx350_curclass
    .local pmc rx350_bstack
    .local pmc rx350_cstack
    (rx350_cur, rx350_tgt, rx350_pos, rx350_curclass, rx350_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx350_cur
    length rx350_eos, rx350_tgt
    eq $I19, 1, rx350_restart1054
    gt rx350_pos, rx350_eos, rx350_fail1055
    repr_get_attr_int $I11, self, rx350_curclass, "$!from"
    ne $I11, -1, rxscan351_done1061
    goto rxscan351_scan1060
  rxscan351_loop1059:
    inc rx350_pos
    gt rx350_pos, rx350_eos, rx350_fail1055
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!from", rx350_pos
  rxscan351_scan1060:
    nqp_rxmark rx350_bstack, rxscan351_loop1059, rx350_pos, 0
  rxscan351_done1061:
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    store_lex unicode:"$\x{a2}", rx350_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx350_bstack, rxcap352_fail1063, rx350_pos, 0
    add $I11, rx350_pos, 3
    gt $I11, rx350_eos, rx350_fail1055
    substr $S10, rx350_tgt, rx350_pos, 3
    ne $S10, ucs4:"for", rx350_fail1055
    add rx350_pos, 3
    nqp_rxpeek $I19, rx350_bstack, rxcap352_fail1063
    inc $I19
    set $I11, rx350_bstack[$I19]
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx350_pos)
    rx350_cstack = rx350_cur."!cursor_capture"($P11, "sym")
    goto rxcap352_done1062
  rxcap352_fail1063:
    goto rx350_fail1055
  rxcap352_done1062:
    ge rx350_pos, rx350_eos, rx350_fail1055
    is_cclass $I11, .CCLASS_WHITESPACE, rx350_tgt, rx350_pos
    unless $I11, rx350_fail1055
    add rx350_pos, 1
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."ws"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1055
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1055
    nqp_rxmark rx350_bstack, rxsubrule354_pass1065, -1, 0
  rxsubrule354_pass1065:
    rx350_cstack = rx350_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."ws"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1055
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    rx350_cur."!cursor_pass"(rx350_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx350_cur)
  rx350_restart1054:
    repr_get_attr_obj rx350_cstack, rx350_cur, rx350_curclass, "$!cstack"
  rx350_fail1055:
    unless rx350_bstack, rx350_done1053
    pop $I19, rx350_bstack
    if_null rx350_cstack, rx350_cstack_done1058
    unless rx350_cstack, rx350_cstack_done1058
    dec $I19
    set $P11, rx350_cstack[$I19]
  rx350_cstack_done1058:
    pop rx350_rep, rx350_bstack
    pop rx350_pos, rx350_bstack
    pop $I19, rx350_bstack
    lt rx350_pos, -1, rx350_done1053
    lt rx350_pos, 0, rx350_fail1055
    eq $I19, 0, rx350_fail1055
    nqp_islist $I20, rx350_cstack
    unless $I20, rx350_jump1056
    elements $I18, rx350_bstack
    le $I18, 0, rx350_cut1057
    dec $I18
    set $I18, rx350_bstack[$I18]
  rx350_cut1057:
    assign rx350_cstack, $I18
  rx350_jump1056:
    jump $I19
  rx350_done1053:
    rx350_cur."!cursor_fail"()
    .return (rx350_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_69_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 859
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx356_tgt
    .local int rx356_pos
    .local int rx356_off
    .local int rx356_eos
    .local int rx356_rep
    .local pmc rx356_cur
    .local pmc rx356_curclass
    .local pmc rx356_bstack
    .local pmc rx356_cstack
    (rx356_cur, rx356_tgt, rx356_pos, rx356_curclass, rx356_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx356_cur
    length rx356_eos, rx356_tgt
    eq $I19, 1, rx356_restart1069
    gt rx356_pos, rx356_eos, rx356_fail1070
    repr_get_attr_int $I11, self, rx356_curclass, "$!from"
    ne $I11, -1, rxscan357_done1076
    goto rxscan357_scan1075
  rxscan357_loop1074:
    inc rx356_pos
    gt rx356_pos, rx356_eos, rx356_fail1070
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!from", rx356_pos
  rxscan357_scan1075:
    nqp_rxmark rx356_bstack, rxscan357_loop1074, rx356_pos, 0
  rxscan357_done1076:
    nqp_rxmark rx356_bstack, rxcap358_fail1078, rx356_pos, 0
    add $I11, rx356_pos, 5
    gt $I11, rx356_eos, rx356_fail1070
    substr $S10, rx356_tgt, rx356_pos, 5
    ne $S10, ucs4:"CATCH", rx356_fail1070
    add rx356_pos, 5
    nqp_rxpeek $I19, rx356_bstack, rxcap358_fail1078
    inc $I19
    set $I11, rx356_bstack[$I19]
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx356_pos)
    rx356_cstack = rx356_cur."!cursor_capture"($P11, "sym")
    goto rxcap358_done1077
  rxcap358_fail1078:
    goto rx356_fail1070
  rxcap358_done1077:
    ge rx356_pos, rx356_eos, rx356_fail1070
    is_cclass $I11, .CCLASS_WHITESPACE, rx356_tgt, rx356_pos
    unless $I11, rx356_fail1070
    add rx356_pos, 1
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."ws"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1070
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."block"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1070
    nqp_rxmark rx356_bstack, rxsubrule360_pass1080, -1, 0
  rxsubrule360_pass1080:
    rx356_cstack = rx356_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."ws"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1070
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    rx356_cur."!cursor_pass"(rx356_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx356_cur)
  rx356_restart1069:
    repr_get_attr_obj rx356_cstack, rx356_cur, rx356_curclass, "$!cstack"
  rx356_fail1070:
    unless rx356_bstack, rx356_done1068
    pop $I19, rx356_bstack
    if_null rx356_cstack, rx356_cstack_done1073
    unless rx356_cstack, rx356_cstack_done1073
    dec $I19
    set $P11, rx356_cstack[$I19]
  rx356_cstack_done1073:
    pop rx356_rep, rx356_bstack
    pop rx356_pos, rx356_bstack
    pop $I19, rx356_bstack
    lt rx356_pos, -1, rx356_done1068
    lt rx356_pos, 0, rx356_fail1070
    eq $I19, 0, rx356_fail1070
    nqp_islist $I20, rx356_cstack
    unless $I20, rx356_jump1071
    elements $I18, rx356_bstack
    le $I18, 0, rx356_cut1072
    dec $I18
    set $I18, rx356_bstack[$I18]
  rx356_cut1072:
    assign rx356_cstack, $I18
  rx356_jump1071:
    jump $I19
  rx356_done1068:
    rx356_cur."!cursor_fail"()
    .return (rx356_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_70_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 864
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx362_tgt
    .local int rx362_pos
    .local int rx362_off
    .local int rx362_eos
    .local int rx362_rep
    .local pmc rx362_cur
    .local pmc rx362_curclass
    .local pmc rx362_bstack
    .local pmc rx362_cstack
    (rx362_cur, rx362_tgt, rx362_pos, rx362_curclass, rx362_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx362_cur
    length rx362_eos, rx362_tgt
    eq $I19, 1, rx362_restart1084
    gt rx362_pos, rx362_eos, rx362_fail1085
    repr_get_attr_int $I11, self, rx362_curclass, "$!from"
    ne $I11, -1, rxscan363_done1091
    goto rxscan363_scan1090
  rxscan363_loop1089:
    inc rx362_pos
    gt rx362_pos, rx362_eos, rx362_fail1085
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!from", rx362_pos
  rxscan363_scan1090:
    nqp_rxmark rx362_bstack, rxscan363_loop1089, rx362_pos, 0
  rxscan363_done1091:
    nqp_rxmark rx362_bstack, rxcap364_fail1093, rx362_pos, 0
    add $I11, rx362_pos, 7
    gt $I11, rx362_eos, rx362_fail1085
    substr $S10, rx362_tgt, rx362_pos, 7
    ne $S10, ucs4:"CONTROL", rx362_fail1085
    add rx362_pos, 7
    nqp_rxpeek $I19, rx362_bstack, rxcap364_fail1093
    inc $I19
    set $I11, rx362_bstack[$I19]
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx362_pos)
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "sym")
    goto rxcap364_done1092
  rxcap364_fail1093:
    goto rx362_fail1085
  rxcap364_done1092:
    ge rx362_pos, rx362_eos, rx362_fail1085
    is_cclass $I11, .CCLASS_WHITESPACE, rx362_tgt, rx362_pos
    unless $I11, rx362_fail1085
    add rx362_pos, 1
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."ws"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1085
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."block"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1085
    nqp_rxmark rx362_bstack, rxsubrule366_pass1095, -1, 0
  rxsubrule366_pass1095:
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."ws"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1085
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    rx362_cur."!cursor_pass"(rx362_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx362_cur)
  rx362_restart1084:
    repr_get_attr_obj rx362_cstack, rx362_cur, rx362_curclass, "$!cstack"
  rx362_fail1085:
    unless rx362_bstack, rx362_done1083
    pop $I19, rx362_bstack
    if_null rx362_cstack, rx362_cstack_done1088
    unless rx362_cstack, rx362_cstack_done1088
    dec $I19
    set $P11, rx362_cstack[$I19]
  rx362_cstack_done1088:
    pop rx362_rep, rx362_bstack
    pop rx362_pos, rx362_bstack
    pop $I19, rx362_bstack
    lt rx362_pos, -1, rx362_done1083
    lt rx362_pos, 0, rx362_fail1085
    eq $I19, 0, rx362_fail1085
    nqp_islist $I20, rx362_cstack
    unless $I20, rx362_jump1086
    elements $I18, rx362_bstack
    le $I18, 0, rx362_cut1087
    dec $I18
    set $I18, rx362_bstack[$I18]
  rx362_cut1087:
    assign rx362_cstack, $I18
  rx362_jump1086:
    jump $I19
  rx362_done1083:
    rx362_cur."!cursor_fail"()
    .return (rx362_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_71_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 869
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_72_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 870
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx368_tgt
    .local int rx368_pos
    .local int rx368_off
    .local int rx368_eos
    .local int rx368_rep
    .local pmc rx368_cur
    .local pmc rx368_curclass
    .local pmc rx368_bstack
    .local pmc rx368_cstack
    (rx368_cur, rx368_tgt, rx368_pos, rx368_curclass, rx368_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx368_cur
    length rx368_eos, rx368_tgt
    eq $I19, 1, rx368_restart1099
    gt rx368_pos, rx368_eos, rx368_fail1100
    repr_get_attr_int $I11, self, rx368_curclass, "$!from"
    ne $I11, -1, rxscan369_done1106
    goto rxscan369_scan1105
  rxscan369_loop1104:
    inc rx368_pos
    gt rx368_pos, rx368_eos, rx368_fail1100
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!from", rx368_pos
  rxscan369_scan1105:
    nqp_rxmark rx368_bstack, rxscan369_loop1104, rx368_pos, 0
  rxscan369_done1106:
    nqp_rxmark rx368_bstack, rxcap370_fail1108, rx368_pos, 0
    add $I11, rx368_pos, 5
    gt $I11, rx368_eos, rx368_fail1100
    substr $S10, rx368_tgt, rx368_pos, 5
    ne $S10, ucs4:"BEGIN", rx368_fail1100
    add rx368_pos, 5
    nqp_rxpeek $I19, rx368_bstack, rxcap370_fail1108
    inc $I19
    set $I11, rx368_bstack[$I19]
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx368_pos)
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "sym")
    goto rxcap370_done1107
  rxcap370_fail1108:
    goto rx368_fail1100
  rxcap370_done1107:
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx368_curclass, "$!pos"
    lt $I11, 0, rx368_fail1100
    nqp_rxmark rx368_bstack, rxsubrule371_pass1109, -1, 0
  rxsubrule371_pass1109:
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx368_pos, $P11, rx368_curclass, "$!pos"
    rx368_cur."!cursor_pass"(rx368_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx368_cur)
  rx368_restart1099:
    repr_get_attr_obj rx368_cstack, rx368_cur, rx368_curclass, "$!cstack"
  rx368_fail1100:
    unless rx368_bstack, rx368_done1098
    pop $I19, rx368_bstack
    if_null rx368_cstack, rx368_cstack_done1103
    unless rx368_cstack, rx368_cstack_done1103
    dec $I19
    set $P11, rx368_cstack[$I19]
  rx368_cstack_done1103:
    pop rx368_rep, rx368_bstack
    pop rx368_pos, rx368_bstack
    pop $I19, rx368_bstack
    lt rx368_pos, -1, rx368_done1098
    lt rx368_pos, 0, rx368_fail1100
    eq $I19, 0, rx368_fail1100
    nqp_islist $I20, rx368_cstack
    unless $I20, rx368_jump1101
    elements $I18, rx368_bstack
    le $I18, 0, rx368_cut1102
    dec $I18
    set $I18, rx368_bstack[$I18]
  rx368_cut1102:
    assign rx368_cstack, $I18
  rx368_jump1101:
    jump $I19
  rx368_done1098:
    rx368_cur."!cursor_fail"()
    .return (rx368_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_73_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 871
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx372_tgt
    .local int rx372_pos
    .local int rx372_off
    .local int rx372_eos
    .local int rx372_rep
    .local pmc rx372_cur
    .local pmc rx372_curclass
    .local pmc rx372_bstack
    .local pmc rx372_cstack
    (rx372_cur, rx372_tgt, rx372_pos, rx372_curclass, rx372_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx372_cur
    length rx372_eos, rx372_tgt
    eq $I19, 1, rx372_restart1112
    gt rx372_pos, rx372_eos, rx372_fail1113
    repr_get_attr_int $I11, self, rx372_curclass, "$!from"
    ne $I11, -1, rxscan373_done1119
    goto rxscan373_scan1118
  rxscan373_loop1117:
    inc rx372_pos
    gt rx372_pos, rx372_eos, rx372_fail1113
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!from", rx372_pos
  rxscan373_scan1118:
    nqp_rxmark rx372_bstack, rxscan373_loop1117, rx372_pos, 0
  rxscan373_done1119:
    nqp_rxmark rx372_bstack, rxcap374_fail1121, rx372_pos, 0
    add $I11, rx372_pos, 4
    gt $I11, rx372_eos, rx372_fail1113
    substr $S10, rx372_tgt, rx372_pos, 4
    ne $S10, ucs4:"INIT", rx372_fail1113
    add rx372_pos, 4
    nqp_rxpeek $I19, rx372_bstack, rxcap374_fail1121
    inc $I19
    set $I11, rx372_bstack[$I19]
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx372_pos)
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "sym")
    goto rxcap374_done1120
  rxcap374_fail1121:
    goto rx372_fail1113
  rxcap374_done1120:
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1113
    nqp_rxmark rx372_bstack, rxsubrule375_pass1122, -1, 0
  rxsubrule375_pass1122:
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx372_pos, $P11, rx372_curclass, "$!pos"
    rx372_cur."!cursor_pass"(rx372_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx372_cur)
  rx372_restart1112:
    repr_get_attr_obj rx372_cstack, rx372_cur, rx372_curclass, "$!cstack"
  rx372_fail1113:
    unless rx372_bstack, rx372_done1111
    pop $I19, rx372_bstack
    if_null rx372_cstack, rx372_cstack_done1116
    unless rx372_cstack, rx372_cstack_done1116
    dec $I19
    set $P11, rx372_cstack[$I19]
  rx372_cstack_done1116:
    pop rx372_rep, rx372_bstack
    pop rx372_pos, rx372_bstack
    pop $I19, rx372_bstack
    lt rx372_pos, -1, rx372_done1111
    lt rx372_pos, 0, rx372_fail1113
    eq $I19, 0, rx372_fail1113
    nqp_islist $I20, rx372_cstack
    unless $I20, rx372_jump1114
    elements $I18, rx372_bstack
    le $I18, 0, rx372_cut1115
    dec $I18
    set $I18, rx372_bstack[$I18]
  rx372_cut1115:
    assign rx372_cstack, $I18
  rx372_jump1114:
    jump $I19
  rx372_done1111:
    rx372_cur."!cursor_fail"()
    .return (rx372_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_74_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 873
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx376_tgt
    .local int rx376_pos
    .local int rx376_off
    .local int rx376_eos
    .local int rx376_rep
    .local pmc rx376_cur
    .local pmc rx376_curclass
    .local pmc rx376_bstack
    .local pmc rx376_cstack
    (rx376_cur, rx376_tgt, rx376_pos, rx376_curclass, rx376_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx376_cur
    length rx376_eos, rx376_tgt
    eq $I19, 1, rx376_restart1125
    gt rx376_pos, rx376_eos, rx376_fail1126
    repr_get_attr_int $I11, self, rx376_curclass, "$!from"
    ne $I11, -1, rxscan377_done1132
    goto rxscan377_scan1131
  rxscan377_loop1130:
    inc rx376_pos
    gt rx376_pos, rx376_eos, rx376_fail1126
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!from", rx376_pos
  rxscan377_scan1131:
    nqp_rxmark rx376_bstack, rxscan377_loop1130, rx376_pos, 0
  rxscan377_done1132:
    nqp_rxmark rx376_bstack, rxcap378_fail1134, rx376_pos, 0
    add $I11, rx376_pos, 3
    gt $I11, rx376_eos, rx376_fail1126
    substr $S10, rx376_tgt, rx376_pos, 3
    ne $S10, ucs4:"try", rx376_fail1126
    add rx376_pos, 3
    nqp_rxpeek $I19, rx376_bstack, rxcap378_fail1134
    inc $I19
    set $I11, rx376_bstack[$I19]
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!pos", rx376_pos
    $P11 = rx376_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx376_pos)
    rx376_cstack = rx376_cur."!cursor_capture"($P11, "sym")
    goto rxcap378_done1133
  rxcap378_fail1134:
    goto rx376_fail1126
  rxcap378_done1133:
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!pos", rx376_pos
    $P11 = rx376_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx376_curclass, "$!pos"
    lt $I11, 0, rx376_fail1126
    nqp_rxmark rx376_bstack, rxsubrule379_pass1135, -1, 0
  rxsubrule379_pass1135:
    rx376_cstack = rx376_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx376_pos, $P11, rx376_curclass, "$!pos"
    rx376_cur."!cursor_pass"(rx376_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx376_cur)
  rx376_restart1125:
    repr_get_attr_obj rx376_cstack, rx376_cur, rx376_curclass, "$!cstack"
  rx376_fail1126:
    unless rx376_bstack, rx376_done1124
    pop $I19, rx376_bstack
    if_null rx376_cstack, rx376_cstack_done1129
    unless rx376_cstack, rx376_cstack_done1129
    dec $I19
    set $P11, rx376_cstack[$I19]
  rx376_cstack_done1129:
    pop rx376_rep, rx376_bstack
    pop rx376_pos, rx376_bstack
    pop $I19, rx376_bstack
    lt rx376_pos, -1, rx376_done1124
    lt rx376_pos, 0, rx376_fail1126
    eq $I19, 0, rx376_fail1126
    nqp_islist $I20, rx376_cstack
    unless $I20, rx376_jump1127
    elements $I18, rx376_bstack
    le $I18, 0, rx376_cut1128
    dec $I18
    set $I18, rx376_bstack[$I18]
  rx376_cut1128:
    assign rx376_cstack, $I18
  rx376_jump1127:
    jump $I19
  rx376_done1124:
    rx376_cur."!cursor_fail"()
    .return (rx376_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_75_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 878
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx380_tgt
    .local int rx380_pos
    .local int rx380_off
    .local int rx380_eos
    .local int rx380_rep
    .local pmc rx380_cur
    .local pmc rx380_curclass
    .local pmc rx380_bstack
    .local pmc rx380_cstack
    (rx380_cur, rx380_tgt, rx380_pos, rx380_curclass, rx380_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx380_cur
    length rx380_eos, rx380_tgt
    eq $I19, 1, rx380_restart1138
    gt rx380_pos, rx380_eos, rx380_fail1139
    repr_get_attr_int $I11, self, rx380_curclass, "$!from"
    ne $I11, -1, rxscan381_done1145
    goto rxscan381_scan1144
  rxscan381_loop1143:
    inc rx380_pos
    gt rx380_pos, rx380_eos, rx380_fail1139
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!from", rx380_pos
  rxscan381_scan1144:
    nqp_rxmark rx380_bstack, rxscan381_loop1143, rx380_pos, 0
  rxscan381_done1145:
    ge rx380_pos, rx380_eos, rx380_fail1139
    is_cclass $I11, .CCLASS_WHITESPACE, rx380_tgt, rx380_pos
    unless $I11, rx380_fail1139
    add rx380_pos, 1
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."ws"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1139
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt383_01148
    nqp_push_label $P11, alt383_11150
    nqp_rxmark rx380_bstack, alt383_end1147, -1, 0
    rx380_cur."!alt"(rx380_pos, "alt_nfa__16_1356803028.416", $P11)
    goto rx380_fail1139
  alt383_01148:
    ge rx380_pos, rx380_eos, rx380_fail1139
    substr $S11, rx380_tgt, rx380_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx380_fail1139
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."block"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1139
    nqp_rxmark rx380_bstack, rxsubrule384_pass1149, -1, 0
  rxsubrule384_pass1149:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    goto alt383_end1147
  alt383_11150:
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."statement"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1139
    nqp_rxmark rx380_bstack, rxsubrule385_pass1151, -1, 0
  rxsubrule385_pass1151:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    goto alt383_end1147
  alt383_end1147:
    nqp_rxcommit rx380_bstack, alt383_end1147
    rx380_cur."!cursor_pass"(rx380_pos, "blorst", 'backtrack'=>1)
    .return (rx380_cur)
  rx380_restart1138:
    repr_get_attr_obj rx380_cstack, rx380_cur, rx380_curclass, "$!cstack"
  rx380_fail1139:
    unless rx380_bstack, rx380_done1137
    pop $I19, rx380_bstack
    if_null rx380_cstack, rx380_cstack_done1142
    unless rx380_cstack, rx380_cstack_done1142
    dec $I19
    set $P11, rx380_cstack[$I19]
  rx380_cstack_done1142:
    pop rx380_rep, rx380_bstack
    pop rx380_pos, rx380_bstack
    pop $I19, rx380_bstack
    lt rx380_pos, -1, rx380_done1137
    lt rx380_pos, 0, rx380_fail1139
    eq $I19, 0, rx380_fail1139
    nqp_islist $I20, rx380_cstack
    unless $I20, rx380_jump1140
    elements $I18, rx380_bstack
    le $I18, 0, rx380_cut1141
    dec $I18
    set $I18, rx380_bstack[$I18]
  rx380_cut1141:
    assign rx380_cstack, $I18
  rx380_jump1140:
    jump $I19
  rx380_done1137:
    rx380_cur."!cursor_fail"()
    .return (rx380_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_76_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 884
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_77_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 886
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx386_tgt
    .local int rx386_pos
    .local int rx386_off
    .local int rx386_eos
    .local int rx386_rep
    .local pmc rx386_cur
    .local pmc rx386_curclass
    .local pmc rx386_bstack
    .local pmc rx386_cstack
    (rx386_cur, rx386_tgt, rx386_pos, rx386_curclass, rx386_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx386_cur
    length rx386_eos, rx386_tgt
    eq $I19, 1, rx386_restart1154
    gt rx386_pos, rx386_eos, rx386_fail1155
    repr_get_attr_int $I11, self, rx386_curclass, "$!from"
    ne $I11, -1, rxscan387_done1161
    goto rxscan387_scan1160
  rxscan387_loop1159:
    inc rx386_pos
    gt rx386_pos, rx386_eos, rx386_fail1155
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!from", rx386_pos
  rxscan387_scan1160:
    nqp_rxmark rx386_bstack, rxscan387_loop1159, rx386_pos, 0
  rxscan387_done1161:
    nqp_rxmark rx386_bstack, rxcap388_fail1163, rx386_pos, 0
    add $I11, rx386_pos, 2
    gt $I11, rx386_eos, rx386_fail1155
    substr $S10, rx386_tgt, rx386_pos, 2
    ne $S10, ucs4:"if", rx386_fail1155
    add rx386_pos, 2
    nqp_rxpeek $I19, rx386_bstack, rxcap388_fail1163
    inc $I19
    set $I11, rx386_bstack[$I19]
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx386_pos)
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "sym")
    goto rxcap388_done1162
  rxcap388_fail1163:
    goto rx386_fail1155
  rxcap388_done1162:
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."ws"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1155
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1155
    nqp_rxmark rx386_bstack, rxsubrule390_pass1165, -1, 0
  rxsubrule390_pass1165:
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."ws"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1155
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    rx386_cur."!cursor_pass"(rx386_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx386_cur)
  rx386_restart1154:
    repr_get_attr_obj rx386_cstack, rx386_cur, rx386_curclass, "$!cstack"
  rx386_fail1155:
    unless rx386_bstack, rx386_done1153
    pop $I19, rx386_bstack
    if_null rx386_cstack, rx386_cstack_done1158
    unless rx386_cstack, rx386_cstack_done1158
    dec $I19
    set $P11, rx386_cstack[$I19]
  rx386_cstack_done1158:
    pop rx386_rep, rx386_bstack
    pop rx386_pos, rx386_bstack
    pop $I19, rx386_bstack
    lt rx386_pos, -1, rx386_done1153
    lt rx386_pos, 0, rx386_fail1155
    eq $I19, 0, rx386_fail1155
    nqp_islist $I20, rx386_cstack
    unless $I20, rx386_jump1156
    elements $I18, rx386_bstack
    le $I18, 0, rx386_cut1157
    dec $I18
    set $I18, rx386_bstack[$I18]
  rx386_cut1157:
    assign rx386_cstack, $I18
  rx386_jump1156:
    jump $I19
  rx386_done1153:
    rx386_cur."!cursor_fail"()
    .return (rx386_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_78_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 887
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx392_tgt
    .local int rx392_pos
    .local int rx392_off
    .local int rx392_eos
    .local int rx392_rep
    .local pmc rx392_cur
    .local pmc rx392_curclass
    .local pmc rx392_bstack
    .local pmc rx392_cstack
    (rx392_cur, rx392_tgt, rx392_pos, rx392_curclass, rx392_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx392_cur
    length rx392_eos, rx392_tgt
    eq $I19, 1, rx392_restart1169
    gt rx392_pos, rx392_eos, rx392_fail1170
    repr_get_attr_int $I11, self, rx392_curclass, "$!from"
    ne $I11, -1, rxscan393_done1176
    goto rxscan393_scan1175
  rxscan393_loop1174:
    inc rx392_pos
    gt rx392_pos, rx392_eos, rx392_fail1170
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!from", rx392_pos
  rxscan393_scan1175:
    nqp_rxmark rx392_bstack, rxscan393_loop1174, rx392_pos, 0
  rxscan393_done1176:
    nqp_rxmark rx392_bstack, rxcap394_fail1178, rx392_pos, 0
    add $I11, rx392_pos, 6
    gt $I11, rx392_eos, rx392_fail1170
    substr $S10, rx392_tgt, rx392_pos, 6
    ne $S10, ucs4:"unless", rx392_fail1170
    add rx392_pos, 6
    nqp_rxpeek $I19, rx392_bstack, rxcap394_fail1178
    inc $I19
    set $I11, rx392_bstack[$I19]
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx392_pos)
    rx392_cstack = rx392_cur."!cursor_capture"($P11, "sym")
    goto rxcap394_done1177
  rxcap394_fail1178:
    goto rx392_fail1170
  rxcap394_done1177:
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."ws"()
    repr_get_attr_int $I11, $P11, rx392_curclass, "$!pos"
    lt $I11, 0, rx392_fail1170
    repr_get_attr_int rx392_pos, $P11, rx392_curclass, "$!pos"
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx392_curclass, "$!pos"
    lt $I11, 0, rx392_fail1170
    nqp_rxmark rx392_bstack, rxsubrule396_pass1180, -1, 0
  rxsubrule396_pass1180:
    rx392_cstack = rx392_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx392_pos, $P11, rx392_curclass, "$!pos"
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."ws"()
    repr_get_attr_int $I11, $P11, rx392_curclass, "$!pos"
    lt $I11, 0, rx392_fail1170
    repr_get_attr_int rx392_pos, $P11, rx392_curclass, "$!pos"
    rx392_cur."!cursor_pass"(rx392_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx392_cur)
  rx392_restart1169:
    repr_get_attr_obj rx392_cstack, rx392_cur, rx392_curclass, "$!cstack"
  rx392_fail1170:
    unless rx392_bstack, rx392_done1168
    pop $I19, rx392_bstack
    if_null rx392_cstack, rx392_cstack_done1173
    unless rx392_cstack, rx392_cstack_done1173
    dec $I19
    set $P11, rx392_cstack[$I19]
  rx392_cstack_done1173:
    pop rx392_rep, rx392_bstack
    pop rx392_pos, rx392_bstack
    pop $I19, rx392_bstack
    lt rx392_pos, -1, rx392_done1168
    lt rx392_pos, 0, rx392_fail1170
    eq $I19, 0, rx392_fail1170
    nqp_islist $I20, rx392_cstack
    unless $I20, rx392_jump1171
    elements $I18, rx392_bstack
    le $I18, 0, rx392_cut1172
    dec $I18
    set $I18, rx392_bstack[$I18]
  rx392_cut1172:
    assign rx392_cstack, $I18
  rx392_jump1171:
    jump $I19
  rx392_done1168:
    rx392_cur."!cursor_fail"()
    .return (rx392_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_79_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 889
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_80_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx398_tgt
    .local int rx398_pos
    .local int rx398_off
    .local int rx398_eos
    .local int rx398_rep
    .local pmc rx398_cur
    .local pmc rx398_curclass
    .local pmc rx398_bstack
    .local pmc rx398_cstack
    (rx398_cur, rx398_tgt, rx398_pos, rx398_curclass, rx398_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx398_cur
    length rx398_eos, rx398_tgt
    eq $I19, 1, rx398_restart1184
    gt rx398_pos, rx398_eos, rx398_fail1185
    repr_get_attr_int $I11, self, rx398_curclass, "$!from"
    ne $I11, -1, rxscan399_done1191
    goto rxscan399_scan1190
  rxscan399_loop1189:
    inc rx398_pos
    gt rx398_pos, rx398_eos, rx398_fail1185
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!from", rx398_pos
  rxscan399_scan1190:
    nqp_rxmark rx398_bstack, rxscan399_loop1189, rx398_pos, 0
  rxscan399_done1191:
    nqp_rxmark rx398_bstack, rxcap400_fail1193, rx398_pos, 0
    add $I11, rx398_pos, 5
    gt $I11, rx398_eos, rx398_fail1185
    substr $S10, rx398_tgt, rx398_pos, 5
    ne $S10, ucs4:"while", rx398_fail1185
    add rx398_pos, 5
    nqp_rxpeek $I19, rx398_bstack, rxcap400_fail1193
    inc $I19
    set $I11, rx398_bstack[$I19]
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx398_pos)
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "sym")
    goto rxcap400_done1192
  rxcap400_fail1193:
    goto rx398_fail1185
  rxcap400_done1192:
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."ws"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1185
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1185
    nqp_rxmark rx398_bstack, rxsubrule402_pass1195, -1, 0
  rxsubrule402_pass1195:
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."ws"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1185
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    rx398_cur."!cursor_pass"(rx398_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx398_cur)
  rx398_restart1184:
    repr_get_attr_obj rx398_cstack, rx398_cur, rx398_curclass, "$!cstack"
  rx398_fail1185:
    unless rx398_bstack, rx398_done1183
    pop $I19, rx398_bstack
    if_null rx398_cstack, rx398_cstack_done1188
    unless rx398_cstack, rx398_cstack_done1188
    dec $I19
    set $P11, rx398_cstack[$I19]
  rx398_cstack_done1188:
    pop rx398_rep, rx398_bstack
    pop rx398_pos, rx398_bstack
    pop $I19, rx398_bstack
    lt rx398_pos, -1, rx398_done1183
    lt rx398_pos, 0, rx398_fail1185
    eq $I19, 0, rx398_fail1185
    nqp_islist $I20, rx398_cstack
    unless $I20, rx398_jump1186
    elements $I18, rx398_bstack
    le $I18, 0, rx398_cut1187
    dec $I18
    set $I18, rx398_bstack[$I18]
  rx398_cut1187:
    assign rx398_cstack, $I18
  rx398_jump1186:
    jump $I19
  rx398_done1183:
    rx398_cur."!cursor_fail"()
    .return (rx398_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_81_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 892
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx404_tgt
    .local int rx404_pos
    .local int rx404_off
    .local int rx404_eos
    .local int rx404_rep
    .local pmc rx404_cur
    .local pmc rx404_curclass
    .local pmc rx404_bstack
    .local pmc rx404_cstack
    (rx404_cur, rx404_tgt, rx404_pos, rx404_curclass, rx404_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx404_cur
    length rx404_eos, rx404_tgt
    eq $I19, 1, rx404_restart1199
    gt rx404_pos, rx404_eos, rx404_fail1200
    repr_get_attr_int $I11, self, rx404_curclass, "$!from"
    ne $I11, -1, rxscan405_done1206
    goto rxscan405_scan1205
  rxscan405_loop1204:
    inc rx404_pos
    gt rx404_pos, rx404_eos, rx404_fail1200
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!from", rx404_pos
  rxscan405_scan1205:
    nqp_rxmark rx404_bstack, rxscan405_loop1204, rx404_pos, 0
  rxscan405_done1206:
    nqp_rxmark rx404_bstack, rxcap406_fail1208, rx404_pos, 0
    add $I11, rx404_pos, 5
    gt $I11, rx404_eos, rx404_fail1200
    substr $S10, rx404_tgt, rx404_pos, 5
    ne $S10, ucs4:"until", rx404_fail1200
    add rx404_pos, 5
    nqp_rxpeek $I19, rx404_bstack, rxcap406_fail1208
    inc $I19
    set $I11, rx404_bstack[$I19]
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx404_pos)
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "sym")
    goto rxcap406_done1207
  rxcap406_fail1208:
    goto rx404_fail1200
  rxcap406_done1207:
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."ws"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1200
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1200
    nqp_rxmark rx404_bstack, rxsubrule408_pass1210, -1, 0
  rxsubrule408_pass1210:
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."ws"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1200
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    rx404_cur."!cursor_pass"(rx404_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx404_cur)
  rx404_restart1199:
    repr_get_attr_obj rx404_cstack, rx404_cur, rx404_curclass, "$!cstack"
  rx404_fail1200:
    unless rx404_bstack, rx404_done1198
    pop $I19, rx404_bstack
    if_null rx404_cstack, rx404_cstack_done1203
    unless rx404_cstack, rx404_cstack_done1203
    dec $I19
    set $P11, rx404_cstack[$I19]
  rx404_cstack_done1203:
    pop rx404_rep, rx404_bstack
    pop rx404_pos, rx404_bstack
    pop $I19, rx404_bstack
    lt rx404_pos, -1, rx404_done1198
    lt rx404_pos, 0, rx404_fail1200
    eq $I19, 0, rx404_fail1200
    nqp_islist $I20, rx404_cstack
    unless $I20, rx404_jump1201
    elements $I18, rx404_bstack
    le $I18, 0, rx404_cut1202
    dec $I18
    set $I18, rx404_bstack[$I18]
  rx404_cut1202:
    assign rx404_cstack, $I18
  rx404_jump1201:
    jump $I19
  rx404_done1198:
    rx404_cur."!cursor_fail"()
    .return (rx404_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_82_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 893
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx410_tgt
    .local int rx410_pos
    .local int rx410_off
    .local int rx410_eos
    .local int rx410_rep
    .local pmc rx410_cur
    .local pmc rx410_curclass
    .local pmc rx410_bstack
    .local pmc rx410_cstack
    (rx410_cur, rx410_tgt, rx410_pos, rx410_curclass, rx410_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx410_cur
    length rx410_eos, rx410_tgt
    eq $I19, 1, rx410_restart1214
    gt rx410_pos, rx410_eos, rx410_fail1215
    repr_get_attr_int $I11, self, rx410_curclass, "$!from"
    ne $I11, -1, rxscan411_done1221
    goto rxscan411_scan1220
  rxscan411_loop1219:
    inc rx410_pos
    gt rx410_pos, rx410_eos, rx410_fail1215
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!from", rx410_pos
  rxscan411_scan1220:
    nqp_rxmark rx410_bstack, rxscan411_loop1219, rx410_pos, 0
  rxscan411_done1221:
    nqp_rxmark rx410_bstack, rxcap412_fail1223, rx410_pos, 0
    add $I11, rx410_pos, 3
    gt $I11, rx410_eos, rx410_fail1215
    substr $S10, rx410_tgt, rx410_pos, 3
    ne $S10, ucs4:"for", rx410_fail1215
    add rx410_pos, 3
    nqp_rxpeek $I19, rx410_bstack, rxcap412_fail1223
    inc $I19
    set $I11, rx410_bstack[$I19]
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx410_pos)
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "sym")
    goto rxcap412_done1222
  rxcap412_fail1223:
    goto rx410_fail1215
  rxcap412_done1222:
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."ws"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1215
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1215
    nqp_rxmark rx410_bstack, rxsubrule414_pass1225, -1, 0
  rxsubrule414_pass1225:
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."ws"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1215
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    rx410_cur."!cursor_pass"(rx410_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx410_cur)
  rx410_restart1214:
    repr_get_attr_obj rx410_cstack, rx410_cur, rx410_curclass, "$!cstack"
  rx410_fail1215:
    unless rx410_bstack, rx410_done1213
    pop $I19, rx410_bstack
    if_null rx410_cstack, rx410_cstack_done1218
    unless rx410_cstack, rx410_cstack_done1218
    dec $I19
    set $P11, rx410_cstack[$I19]
  rx410_cstack_done1218:
    pop rx410_rep, rx410_bstack
    pop rx410_pos, rx410_bstack
    pop $I19, rx410_bstack
    lt rx410_pos, -1, rx410_done1213
    lt rx410_pos, 0, rx410_fail1215
    eq $I19, 0, rx410_fail1215
    nqp_islist $I20, rx410_cstack
    unless $I20, rx410_jump1216
    elements $I18, rx410_bstack
    le $I18, 0, rx410_cut1217
    dec $I18
    set $I18, rx410_bstack[$I18]
  rx410_cut1217:
    assign rx410_cstack, $I18
  rx410_jump1216:
    jump $I19
  rx410_done1213:
    rx410_cur."!cursor_fail"()
    .return (rx410_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_83_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 897
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx416_tgt
    .local int rx416_pos
    .local int rx416_off
    .local int rx416_eos
    .local int rx416_rep
    .local pmc rx416_cur
    .local pmc rx416_curclass
    .local pmc rx416_bstack
    .local pmc rx416_cstack
    (rx416_cur, rx416_tgt, rx416_pos, rx416_curclass, rx416_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx416_cur
    length rx416_eos, rx416_tgt
    eq $I19, 1, rx416_restart1229
    gt rx416_pos, rx416_eos, rx416_fail1230
    repr_get_attr_int $I11, self, rx416_curclass, "$!from"
    ne $I11, -1, rxscan417_done1236
    goto rxscan417_scan1235
  rxscan417_loop1234:
    inc rx416_pos
    gt rx416_pos, rx416_eos, rx416_fail1230
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!from", rx416_pos
  rxscan417_scan1235:
    nqp_rxmark rx416_bstack, rxscan417_loop1234, rx416_pos, 0
  rxscan417_done1236:
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!pos", rx416_pos
    $P11 = rx416_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx416_curclass, "$!pos"
    lt $I11, 0, rx416_fail1230
    nqp_rxmark rx416_bstack, rxsubrule418_pass1237, -1, 0
  rxsubrule418_pass1237:
    rx416_cstack = rx416_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx416_pos, $P11, rx416_curclass, "$!pos"
    rx416_cur."!cursor_pass"(rx416_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx416_cur)
  rx416_restart1229:
    repr_get_attr_obj rx416_cstack, rx416_cur, rx416_curclass, "$!cstack"
  rx416_fail1230:
    unless rx416_bstack, rx416_done1228
    pop $I19, rx416_bstack
    if_null rx416_cstack, rx416_cstack_done1233
    unless rx416_cstack, rx416_cstack_done1233
    dec $I19
    set $P11, rx416_cstack[$I19]
  rx416_cstack_done1233:
    pop rx416_rep, rx416_bstack
    pop rx416_pos, rx416_bstack
    pop $I19, rx416_bstack
    lt rx416_pos, -1, rx416_done1228
    lt rx416_pos, 0, rx416_fail1230
    eq $I19, 0, rx416_fail1230
    nqp_islist $I20, rx416_cstack
    unless $I20, rx416_jump1231
    elements $I18, rx416_bstack
    le $I18, 0, rx416_cut1232
    dec $I18
    set $I18, rx416_bstack[$I18]
  rx416_cut1232:
    assign rx416_cstack, $I18
  rx416_jump1231:
    jump $I19
  rx416_done1228:
    rx416_cur."!cursor_fail"()
    .return (rx416_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_84_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 898
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx419_tgt
    .local int rx419_pos
    .local int rx419_off
    .local int rx419_eos
    .local int rx419_rep
    .local pmc rx419_cur
    .local pmc rx419_curclass
    .local pmc rx419_bstack
    .local pmc rx419_cstack
    (rx419_cur, rx419_tgt, rx419_pos, rx419_curclass, rx419_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx419_cur
    length rx419_eos, rx419_tgt
    eq $I19, 1, rx419_restart1240
    gt rx419_pos, rx419_eos, rx419_fail1241
    repr_get_attr_int $I11, self, rx419_curclass, "$!from"
    ne $I11, -1, rxscan420_done1247
    goto rxscan420_scan1246
  rxscan420_loop1245:
    inc rx419_pos
    gt rx419_pos, rx419_eos, rx419_fail1241
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!from", rx419_pos
  rxscan420_scan1246:
    nqp_rxmark rx419_bstack, rxscan420_loop1245, rx419_pos, 0
  rxscan420_done1247:
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail1241
    nqp_rxmark rx419_bstack, rxsubrule421_pass1248, -1, 0
  rxsubrule421_pass1248:
    rx419_cstack = rx419_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    rx419_cur."!cursor_pass"(rx419_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx419_cur)
  rx419_restart1240:
    repr_get_attr_obj rx419_cstack, rx419_cur, rx419_curclass, "$!cstack"
  rx419_fail1241:
    unless rx419_bstack, rx419_done1239
    pop $I19, rx419_bstack
    if_null rx419_cstack, rx419_cstack_done1244
    unless rx419_cstack, rx419_cstack_done1244
    dec $I19
    set $P11, rx419_cstack[$I19]
  rx419_cstack_done1244:
    pop rx419_rep, rx419_bstack
    pop rx419_pos, rx419_bstack
    pop $I19, rx419_bstack
    lt rx419_pos, -1, rx419_done1239
    lt rx419_pos, 0, rx419_fail1241
    eq $I19, 0, rx419_fail1241
    nqp_islist $I20, rx419_cstack
    unless $I20, rx419_jump1242
    elements $I18, rx419_bstack
    le $I18, 0, rx419_cut1243
    dec $I18
    set $I18, rx419_bstack[$I18]
  rx419_cut1243:
    assign rx419_cstack, $I18
  rx419_jump1242:
    jump $I19
  rx419_done1239:
    rx419_cur."!cursor_fail"()
    .return (rx419_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_85_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 899
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx422_tgt
    .local int rx422_pos
    .local int rx422_off
    .local int rx422_eos
    .local int rx422_rep
    .local pmc rx422_cur
    .local pmc rx422_curclass
    .local pmc rx422_bstack
    .local pmc rx422_cstack
    (rx422_cur, rx422_tgt, rx422_pos, rx422_curclass, rx422_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx422_cur
    length rx422_eos, rx422_tgt
    eq $I19, 1, rx422_restart1251
    gt rx422_pos, rx422_eos, rx422_fail1252
    repr_get_attr_int $I11, self, rx422_curclass, "$!from"
    ne $I11, -1, rxscan423_done1258
    goto rxscan423_scan1257
  rxscan423_loop1256:
    inc rx422_pos
    gt rx422_pos, rx422_eos, rx422_fail1252
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!from", rx422_pos
  rxscan423_scan1257:
    nqp_rxmark rx422_bstack, rxscan423_loop1256, rx422_pos, 0
  rxscan423_done1258:
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!pos", rx422_pos
    $P11 = rx422_cur."variable"()
    repr_get_attr_int $I11, $P11, rx422_curclass, "$!pos"
    lt $I11, 0, rx422_fail1252
    nqp_rxmark rx422_bstack, rxsubrule424_pass1259, -1, 0
  rxsubrule424_pass1259:
    rx422_cstack = rx422_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx422_pos, $P11, rx422_curclass, "$!pos"
    rx422_cur."!cursor_pass"(rx422_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx422_cur)
  rx422_restart1251:
    repr_get_attr_obj rx422_cstack, rx422_cur, rx422_curclass, "$!cstack"
  rx422_fail1252:
    unless rx422_bstack, rx422_done1250
    pop $I19, rx422_bstack
    if_null rx422_cstack, rx422_cstack_done1255
    unless rx422_cstack, rx422_cstack_done1255
    dec $I19
    set $P11, rx422_cstack[$I19]
  rx422_cstack_done1255:
    pop rx422_rep, rx422_bstack
    pop rx422_pos, rx422_bstack
    pop $I19, rx422_bstack
    lt rx422_pos, -1, rx422_done1250
    lt rx422_pos, 0, rx422_fail1252
    eq $I19, 0, rx422_fail1252
    nqp_islist $I20, rx422_cstack
    unless $I20, rx422_jump1253
    elements $I18, rx422_bstack
    le $I18, 0, rx422_cut1254
    dec $I18
    set $I18, rx422_bstack[$I18]
  rx422_cut1254:
    assign rx422_cstack, $I18
  rx422_jump1253:
    jump $I19
  rx422_done1250:
    rx422_cur."!cursor_fail"()
    .return (rx422_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_86_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 900
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    (rx425_cur, rx425_tgt, rx425_pos, rx425_curclass, rx425_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1262
    gt rx425_pos, rx425_eos, rx425_fail1263
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1269
    goto rxscan426_scan1268
  rxscan426_loop1267:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1263
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1268:
    nqp_rxmark rx425_bstack, rxscan426_loop1267, rx425_pos, 0
  rxscan426_done1269:
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1263
    nqp_rxmark rx425_bstack, rxsubrule427_pass1270, -1, 0
  rxsubrule427_pass1270:
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    rx425_cur."!cursor_pass"(rx425_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1262:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1263:
    unless rx425_bstack, rx425_done1261
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1266
    unless rx425_cstack, rx425_cstack_done1266
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1266:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1261
    lt rx425_pos, 0, rx425_fail1263
    eq $I19, 0, rx425_fail1263
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1264
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1265
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1265:
    assign rx425_cstack, $I18
  rx425_jump1264:
    jump $I19
  rx425_done1261:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_87_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 901
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_curclass
    .local pmc rx428_bstack
    .local pmc rx428_cstack
    (rx428_cur, rx428_tgt, rx428_pos, rx428_curclass, rx428_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx428_cur
    length rx428_eos, rx428_tgt
    eq $I19, 1, rx428_restart1273
    gt rx428_pos, rx428_eos, rx428_fail1274
    repr_get_attr_int $I11, self, rx428_curclass, "$!from"
    ne $I11, -1, rxscan429_done1280
    goto rxscan429_scan1279
  rxscan429_loop1278:
    inc rx428_pos
    gt rx428_pos, rx428_eos, rx428_fail1274
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!from", rx428_pos
  rxscan429_scan1279:
    nqp_rxmark rx428_bstack, rxscan429_loop1278, rx428_pos, 0
  rxscan429_done1280:
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1274
    nqp_rxmark rx428_bstack, rxsubrule430_pass1281, -1, 0
  rxsubrule430_pass1281:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
    rx428_cur."!cursor_pass"(rx428_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx428_cur)
  rx428_restart1273:
    repr_get_attr_obj rx428_cstack, rx428_cur, rx428_curclass, "$!cstack"
  rx428_fail1274:
    unless rx428_bstack, rx428_done1272
    pop $I19, rx428_bstack
    if_null rx428_cstack, rx428_cstack_done1277
    unless rx428_cstack, rx428_cstack_done1277
    dec $I19
    set $P11, rx428_cstack[$I19]
  rx428_cstack_done1277:
    pop rx428_rep, rx428_bstack
    pop rx428_pos, rx428_bstack
    pop $I19, rx428_bstack
    lt rx428_pos, -1, rx428_done1272
    lt rx428_pos, 0, rx428_fail1274
    eq $I19, 0, rx428_fail1274
    nqp_islist $I20, rx428_cstack
    unless $I20, rx428_jump1275
    elements $I18, rx428_bstack
    le $I18, 0, rx428_cut1276
    dec $I18
    set $I18, rx428_bstack[$I18]
  rx428_cut1276:
    assign rx428_cstack, $I18
  rx428_jump1275:
    jump $I19
  rx428_done1272:
    rx428_cur."!cursor_fail"()
    .return (rx428_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_88_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 902
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    (rx431_cur, rx431_tgt, rx431_pos, rx431_curclass, rx431_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1284
    gt rx431_pos, rx431_eos, rx431_fail1285
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1291
    goto rxscan432_scan1290
  rxscan432_loop1289:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1285
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1290:
    nqp_rxmark rx431_bstack, rxscan432_loop1289, rx431_pos, 0
  rxscan432_done1291:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1285
    nqp_rxmark rx431_bstack, rxsubrule433_pass1292, -1, 0
  rxsubrule433_pass1292:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    rx431_cur."!cursor_pass"(rx431_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1284:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1285:
    unless rx431_bstack, rx431_done1283
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1288
    unless rx431_cstack, rx431_cstack_done1288
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1288:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1283
    lt rx431_pos, 0, rx431_fail1285
    eq $I19, 0, rx431_fail1285
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1286
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1287
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1287:
    assign rx431_cstack, $I18
  rx431_jump1286:
    jump $I19
  rx431_done1283:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_89_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 903
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_90_1356803026.47425' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_91_1356803026.47425' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1295
    gt rx434_pos, rx434_eos, rx434_fail1296
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1302
    goto rxscan435_scan1301
  rxscan435_loop1300:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1296
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1301:
    nqp_rxmark rx434_bstack, rxscan435_loop1300, rx434_pos, 0
  rxscan435_done1302:
    .const 'Sub' $P5001 = 'cuid_90_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1296
    .const 'Sub' $P5002 = 'cuid_91_1356803026.47425' 
    capture_lex $P5002
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    ge $I11, 0, rx434_fail1296
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1296
    nqp_rxmark rx434_bstack, rxsubrule443_pass1332, -1, 0
  rxsubrule443_pass1332:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    rx434_cur."!cursor_pass"(rx434_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1295:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1296:
    unless rx434_bstack, rx434_done1294
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1299
    unless rx434_cstack, rx434_cstack_done1299
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1299:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1294
    lt rx434_pos, 0, rx434_fail1296
    eq $I19, 0, rx434_fail1296
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1297
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1298
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1298:
    assign rx434_cstack, $I18
  rx434_jump1297:
    jump $I19
  rx434_done1294:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1356803026.47425") :anon :lex :outer("cuid_89_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx436_tgt
    .local int rx436_pos
    .local int rx436_off
    .local int rx436_eos
    .local int rx436_rep
    .local pmc rx436_cur
    .local pmc rx436_curclass
    .local pmc rx436_bstack
    .local pmc rx436_cstack
    (rx436_cur, rx436_tgt, rx436_pos, rx436_curclass, rx436_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx436_cur
    length rx436_eos, rx436_tgt
    eq $I19, 1, rx436_restart1305
    gt rx436_pos, rx436_eos, rx436_fail1306
    repr_get_attr_int $I11, self, rx436_curclass, "$!from"
    ne $I11, -1, rxscan437_done1312
    goto rxscan437_scan1311
  rxscan437_loop1310:
    inc rx436_pos
    gt rx436_pos, rx436_eos, rx436_fail1306
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!from", rx436_pos
  rxscan437_scan1311:
    nqp_rxmark rx436_bstack, rxscan437_loop1310, rx436_pos, 0
  rxscan437_done1312:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt438_01314
    nqp_push_label $P11, alt438_11315
    nqp_push_label $P11, alt438_21316
    nqp_rxmark rx436_bstack, alt438_end1313, -1, 0
    rx436_cur."!alt"(rx436_pos, "alt_nfa__17_1356803028.49217", $P11)
    goto rx436_fail1306
  alt438_01314:
    add $I11, rx436_pos, 5
    gt $I11, rx436_eos, rx436_fail1306
    substr $S10, rx436_tgt, rx436_pos, 5
    ne $S10, ucs4:"multi", rx436_fail1306
    add rx436_pos, 5
    goto alt438_end1313
  alt438_11315:
    add $I11, rx436_pos, 5
    gt $I11, rx436_eos, rx436_fail1306
    substr $S10, rx436_tgt, rx436_pos, 5
    ne $S10, ucs4:"proto", rx436_fail1306
    add rx436_pos, 5
    goto alt438_end1313
  alt438_21316:
    add $I11, rx436_pos, 4
    gt $I11, rx436_eos, rx436_fail1306
    substr $S10, rx436_tgt, rx436_pos, 4
    ne $S10, ucs4:"only", rx436_fail1306
    add rx436_pos, 4
    goto alt438_end1313
  alt438_end1313:
    rx436_cur."!cursor_pass"(rx436_pos, 'backtrack'=>1)
    .return (rx436_cur)
  rx436_restart1305:
    repr_get_attr_obj rx436_cstack, rx436_cur, rx436_curclass, "$!cstack"
  rx436_fail1306:
    unless rx436_bstack, rx436_done1304
    pop $I19, rx436_bstack
    if_null rx436_cstack, rx436_cstack_done1309
    unless rx436_cstack, rx436_cstack_done1309
    dec $I19
    set $P11, rx436_cstack[$I19]
  rx436_cstack_done1309:
    pop rx436_rep, rx436_bstack
    pop rx436_pos, rx436_bstack
    pop $I19, rx436_bstack
    lt rx436_pos, -1, rx436_done1304
    lt rx436_pos, 0, rx436_fail1306
    eq $I19, 0, rx436_fail1306
    nqp_islist $I20, rx436_cstack
    unless $I20, rx436_jump1307
    elements $I18, rx436_bstack
    le $I18, 0, rx436_cut1308
    dec $I18
    set $I18, rx436_bstack[$I18]
  rx436_cut1308:
    assign rx436_cstack, $I18
  rx436_jump1307:
    jump $I19
  rx436_done1304:
    rx436_cur."!cursor_fail"()
    .return (rx436_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_91_1356803026.47425") :anon :lex :outer("cuid_89_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx439_tgt
    .local int rx439_pos
    .local int rx439_off
    .local int rx439_eos
    .local int rx439_rep
    .local pmc rx439_cur
    .local pmc rx439_curclass
    .local pmc rx439_bstack
    .local pmc rx439_cstack
    (rx439_cur, rx439_tgt, rx439_pos, rx439_curclass, rx439_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx439_cur
    length rx439_eos, rx439_tgt
    eq $I19, 1, rx439_restart1319
    gt rx439_pos, rx439_eos, rx439_fail1320
    repr_get_attr_int $I11, self, rx439_curclass, "$!from"
    ne $I11, -1, rxscan440_done1326
    goto rxscan440_scan1325
  rxscan440_loop1324:
    inc rx439_pos
    gt rx439_pos, rx439_eos, rx439_fail1320
    repr_bind_attr_int rx439_cur, rx439_curclass, "$!from", rx439_pos
  rxscan440_scan1325:
    nqp_rxmark rx439_bstack, rxscan440_loop1324, rx439_pos, 0
  rxscan440_done1326:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1320
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"proto", rx439_fail1320
    add rx439_pos, 5
    repr_bind_attr_int rx439_cur, rx439_curclass, "$!pos", rx439_pos
    $P11 = rx439_cur."ws"()
    repr_get_attr_int $I11, $P11, rx439_curclass, "$!pos"
    lt $I11, 0, rx439_fail1320
    repr_get_attr_int rx439_pos, $P11, rx439_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt442_01329
    nqp_push_label $P11, alt442_11330
    nqp_push_label $P11, alt442_21331
    nqp_rxmark rx439_bstack, alt442_end1328, -1, 0
    rx439_cur."!alt"(rx439_pos, "alt_nfa__18_1356803028.50029", $P11)
    goto rx439_fail1320
  alt442_01329:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1320
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"regex", rx439_fail1320
    add rx439_pos, 5
    goto alt442_end1328
  alt442_11330:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1320
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"token", rx439_fail1320
    add rx439_pos, 5
    goto alt442_end1328
  alt442_21331:
    add $I11, rx439_pos, 4
    gt $I11, rx439_eos, rx439_fail1320
    substr $S10, rx439_tgt, rx439_pos, 4
    ne $S10, ucs4:"rule", rx439_fail1320
    add rx439_pos, 4
    goto alt442_end1328
  alt442_end1328:
    nqp_rxcommit rx439_bstack, alt442_end1328
    rx439_cur."!cursor_pass"(rx439_pos, 'backtrack'=>1)
    .return (rx439_cur)
  rx439_restart1319:
    repr_get_attr_obj rx439_cstack, rx439_cur, rx439_curclass, "$!cstack"
  rx439_fail1320:
    unless rx439_bstack, rx439_done1318
    pop $I19, rx439_bstack
    if_null rx439_cstack, rx439_cstack_done1323
    unless rx439_cstack, rx439_cstack_done1323
    dec $I19
    set $P11, rx439_cstack[$I19]
  rx439_cstack_done1323:
    pop rx439_rep, rx439_bstack
    pop rx439_pos, rx439_bstack
    pop $I19, rx439_bstack
    lt rx439_pos, -1, rx439_done1318
    lt rx439_pos, 0, rx439_fail1320
    eq $I19, 0, rx439_fail1320
    nqp_islist $I20, rx439_cstack
    unless $I20, rx439_jump1321
    elements $I18, rx439_bstack
    le $I18, 0, rx439_cut1322
    dec $I18
    set $I18, rx439_bstack[$I18]
  rx439_cut1322:
    assign rx439_cstack, $I18
  rx439_jump1321:
    jump $I19
  rx439_done1318:
    rx439_cur."!cursor_fail"()
    .return (rx439_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_92_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 908
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx444_tgt
    .local int rx444_pos
    .local int rx444_off
    .local int rx444_eos
    .local int rx444_rep
    .local pmc rx444_cur
    .local pmc rx444_curclass
    .local pmc rx444_bstack
    .local pmc rx444_cstack
    (rx444_cur, rx444_tgt, rx444_pos, rx444_curclass, rx444_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx444_cur
    length rx444_eos, rx444_tgt
    eq $I19, 1, rx444_restart1335
    gt rx444_pos, rx444_eos, rx444_fail1336
    repr_get_attr_int $I11, self, rx444_curclass, "$!from"
    ne $I11, -1, rxscan445_done1342
    goto rxscan445_scan1341
  rxscan445_loop1340:
    inc rx444_pos
    gt rx444_pos, rx444_eos, rx444_fail1336
    repr_bind_attr_int rx444_cur, rx444_curclass, "$!from", rx444_pos
  rxscan445_scan1341:
    nqp_rxmark rx444_bstack, rxscan445_loop1340, rx444_pos, 0
  rxscan445_done1342:
    repr_bind_attr_int rx444_cur, rx444_curclass, "$!pos", rx444_pos
    $P11 = rx444_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx444_curclass, "$!pos"
    lt $I11, 0, rx444_fail1336
    nqp_rxmark rx444_bstack, rxsubrule446_pass1343, -1, 0
  rxsubrule446_pass1343:
    rx444_cstack = rx444_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx444_pos, $P11, rx444_curclass, "$!pos"
    rx444_cur."!cursor_pass"(rx444_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx444_cur)
  rx444_restart1335:
    repr_get_attr_obj rx444_cstack, rx444_cur, rx444_curclass, "$!cstack"
  rx444_fail1336:
    unless rx444_bstack, rx444_done1334
    pop $I19, rx444_bstack
    if_null rx444_cstack, rx444_cstack_done1339
    unless rx444_cstack, rx444_cstack_done1339
    dec $I19
    set $P11, rx444_cstack[$I19]
  rx444_cstack_done1339:
    pop rx444_rep, rx444_bstack
    pop rx444_pos, rx444_bstack
    pop $I19, rx444_bstack
    lt rx444_pos, -1, rx444_done1334
    lt rx444_pos, 0, rx444_fail1336
    eq $I19, 0, rx444_fail1336
    nqp_islist $I20, rx444_cstack
    unless $I20, rx444_jump1337
    elements $I18, rx444_bstack
    le $I18, 0, rx444_cut1338
    dec $I18
    set $I18, rx444_bstack[$I18]
  rx444_cut1338:
    assign rx444_cstack, $I18
  rx444_jump1337:
    jump $I19
  rx444_done1334:
    rx444_cur."!cursor_fail"()
    .return (rx444_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_93_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 909
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx447_tgt
    .local int rx447_pos
    .local int rx447_off
    .local int rx447_eos
    .local int rx447_rep
    .local pmc rx447_cur
    .local pmc rx447_curclass
    .local pmc rx447_bstack
    .local pmc rx447_cstack
    (rx447_cur, rx447_tgt, rx447_pos, rx447_curclass, rx447_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx447_cur
    length rx447_eos, rx447_tgt
    eq $I19, 1, rx447_restart1346
    gt rx447_pos, rx447_eos, rx447_fail1347
    repr_get_attr_int $I11, self, rx447_curclass, "$!from"
    ne $I11, -1, rxscan448_done1353
    goto rxscan448_scan1352
  rxscan448_loop1351:
    inc rx447_pos
    gt rx447_pos, rx447_eos, rx447_fail1347
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!from", rx447_pos
  rxscan448_scan1352:
    nqp_rxmark rx447_bstack, rxscan448_loop1351, rx447_pos, 0
  rxscan448_done1353:
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!pos", rx447_pos
    $P11 = rx447_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx447_curclass, "$!pos"
    lt $I11, 0, rx447_fail1347
    nqp_rxmark rx447_bstack, rxsubrule449_pass1354, -1, 0
  rxsubrule449_pass1354:
    rx447_cstack = rx447_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx447_pos, $P11, rx447_curclass, "$!pos"
    rx447_cur."!cursor_pass"(rx447_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx447_cur)
  rx447_restart1346:
    repr_get_attr_obj rx447_cstack, rx447_cur, rx447_curclass, "$!cstack"
  rx447_fail1347:
    unless rx447_bstack, rx447_done1345
    pop $I19, rx447_bstack
    if_null rx447_cstack, rx447_cstack_done1350
    unless rx447_cstack, rx447_cstack_done1350
    dec $I19
    set $P11, rx447_cstack[$I19]
  rx447_cstack_done1350:
    pop rx447_rep, rx447_bstack
    pop rx447_pos, rx447_bstack
    pop $I19, rx447_bstack
    lt rx447_pos, -1, rx447_done1345
    lt rx447_pos, 0, rx447_fail1347
    eq $I19, 0, rx447_fail1347
    nqp_islist $I20, rx447_cstack
    unless $I20, rx447_jump1348
    elements $I18, rx447_bstack
    le $I18, 0, rx447_cut1349
    dec $I18
    set $I18, rx447_bstack[$I18]
  rx447_cut1349:
    assign rx447_cstack, $I18
  rx447_jump1348:
    jump $I19
  rx447_done1345:
    rx447_cur."!cursor_fail"()
    .return (rx447_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_94_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 910
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx450_tgt
    .local int rx450_pos
    .local int rx450_off
    .local int rx450_eos
    .local int rx450_rep
    .local pmc rx450_cur
    .local pmc rx450_curclass
    .local pmc rx450_bstack
    .local pmc rx450_cstack
    (rx450_cur, rx450_tgt, rx450_pos, rx450_curclass, rx450_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx450_cur
    length rx450_eos, rx450_tgt
    eq $I19, 1, rx450_restart1357
    gt rx450_pos, rx450_eos, rx450_fail1358
    repr_get_attr_int $I11, self, rx450_curclass, "$!from"
    ne $I11, -1, rxscan451_done1364
    goto rxscan451_scan1363
  rxscan451_loop1362:
    inc rx450_pos
    gt rx450_pos, rx450_eos, rx450_fail1358
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!from", rx450_pos
  rxscan451_scan1363:
    nqp_rxmark rx450_bstack, rxscan451_loop1362, rx450_pos, 0
  rxscan451_done1364:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1358
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1358
    nqp_rxmark rx450_bstack, rxsubrule452_pass1365, -1, 0
  rxsubrule452_pass1365:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    rx450_cur."!cursor_pass"(rx450_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx450_cur)
  rx450_restart1357:
    repr_get_attr_obj rx450_cstack, rx450_cur, rx450_curclass, "$!cstack"
  rx450_fail1358:
    unless rx450_bstack, rx450_done1356
    pop $I19, rx450_bstack
    if_null rx450_cstack, rx450_cstack_done1361
    unless rx450_cstack, rx450_cstack_done1361
    dec $I19
    set $P11, rx450_cstack[$I19]
  rx450_cstack_done1361:
    pop rx450_rep, rx450_bstack
    pop rx450_pos, rx450_bstack
    pop $I19, rx450_bstack
    lt rx450_pos, -1, rx450_done1356
    lt rx450_pos, 0, rx450_fail1358
    eq $I19, 0, rx450_fail1358
    nqp_islist $I20, rx450_cstack
    unless $I20, rx450_jump1359
    elements $I18, rx450_bstack
    le $I18, 0, rx450_cut1360
    dec $I18
    set $I18, rx450_bstack[$I18]
  rx450_cut1360:
    assign rx450_cstack, $I18
  rx450_jump1359:
    jump $I19
  rx450_done1356:
    rx450_cur."!cursor_fail"()
    .return (rx450_cur) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_95_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 912
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx453_tgt
    .local int rx453_pos
    .local int rx453_off
    .local int rx453_eos
    .local int rx453_rep
    .local pmc rx453_cur
    .local pmc rx453_curclass
    .local pmc rx453_bstack
    .local pmc rx453_cstack
    (rx453_cur, rx453_tgt, rx453_pos, rx453_curclass, rx453_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx453_cur
    length rx453_eos, rx453_tgt
    eq $I19, 1, rx453_restart1368
    gt rx453_pos, rx453_eos, rx453_fail1369
    repr_get_attr_int $I11, self, rx453_curclass, "$!from"
    ne $I11, -1, rxscan454_done1375
    goto rxscan454_scan1374
  rxscan454_loop1373:
    inc rx453_pos
    gt rx453_pos, rx453_eos, rx453_fail1369
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!from", rx453_pos
  rxscan454_scan1374:
    nqp_rxmark rx453_bstack, rxscan454_loop1373, rx453_pos, 0
  rxscan454_done1375:
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1369
    nqp_rxmark rx453_bstack, rxsubrule455_pass1376, -1, 0
  rxsubrule455_pass1376:
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    nqp_rxmark rx453_bstack, rxquantr456_done1378, rx453_pos, 0
  rxquantr456_loop1377:
    ge rx453_pos, rx453_eos, rx453_fail1369
    substr $S11, rx453_tgt, rx453_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx453_fail1369
    inc rx453_pos
    nqp_rxpeek $I19, rx453_bstack, rxquantr456_done1378
    inc $I19
    inc $I19
    set rx453_rep, rx453_bstack[$I19]
    nqp_rxcommit rx453_bstack, rxquantr456_done1378
    inc rx453_rep
    nqp_rxmark rx453_bstack, rxquantr456_done1378, rx453_pos, rx453_rep
    goto rxquantr456_loop1377
  rxquantr456_done1378:
    add $I11, rx453_pos, 2
    gt $I11, rx453_eos, rx453_fail1369
    substr $S10, rx453_tgt, rx453_pos, 2
    ne $S10, ucs4:"=>", rx453_fail1369
    add rx453_pos, 2
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."ws"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1369
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1369
    nqp_rxmark rx453_bstack, rxsubrule458_pass1380, -1, 0
  rxsubrule458_pass1380:
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    rx453_cur."!cursor_pass"(rx453_pos, "fatarrow", 'backtrack'=>1)
    .return (rx453_cur)
  rx453_restart1368:
    repr_get_attr_obj rx453_cstack, rx453_cur, rx453_curclass, "$!cstack"
  rx453_fail1369:
    unless rx453_bstack, rx453_done1367
    pop $I19, rx453_bstack
    if_null rx453_cstack, rx453_cstack_done1372
    unless rx453_cstack, rx453_cstack_done1372
    dec $I19
    set $P11, rx453_cstack[$I19]
  rx453_cstack_done1372:
    pop rx453_rep, rx453_bstack
    pop rx453_pos, rx453_bstack
    pop $I19, rx453_bstack
    lt rx453_pos, -1, rx453_done1367
    lt rx453_pos, 0, rx453_fail1369
    eq $I19, 0, rx453_fail1369
    nqp_islist $I20, rx453_cstack
    unless $I20, rx453_jump1370
    elements $I18, rx453_bstack
    le $I18, 0, rx453_cut1371
    dec $I18
    set $I18, rx453_bstack[$I18]
  rx453_cut1371:
    assign rx453_cstack, $I18
  rx453_jump1370:
    jump $I19
  rx453_done1367:
    rx453_cur."!cursor_fail"()
    .return (rx453_cur) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_96_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 916
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx459_tgt
    .local int rx459_pos
    .local int rx459_off
    .local int rx459_eos
    .local int rx459_rep
    .local pmc rx459_cur
    .local pmc rx459_curclass
    .local pmc rx459_bstack
    .local pmc rx459_cstack
    (rx459_cur, rx459_tgt, rx459_pos, rx459_curclass, rx459_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx459_cur
    length rx459_eos, rx459_tgt
    eq $I19, 1, rx459_restart1383
    gt rx459_pos, rx459_eos, rx459_fail1384
    repr_get_attr_int $I11, self, rx459_curclass, "$!from"
    ne $I11, -1, rxscan460_done1390
    goto rxscan460_scan1389
  rxscan460_loop1388:
    inc rx459_pos
    gt rx459_pos, rx459_eos, rx459_fail1384
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!from", rx459_pos
  rxscan460_scan1389:
    nqp_rxmark rx459_bstack, rxscan460_loop1388, rx459_pos, 0
  rxscan460_done1390:
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1384
    substr $S10, rx459_tgt, rx459_pos, 1
    ne $S10, ucs4:":", rx459_fail1384
    add rx459_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt461_01392
    nqp_push_label $P11, alt461_11396
    nqp_push_label $P11, alt461_21402
    nqp_push_label $P11, alt461_31404
    nqp_rxmark rx459_bstack, alt461_end1391, -1, 0
    rx459_cur."!alt"(rx459_pos, "alt_nfa__19_1356803028.5767", $P11)
    goto rx459_fail1384
  alt461_01392:
    nqp_rxmark rx459_bstack, rxcap462_fail1394, rx459_pos, 0
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1384
    substr $S10, rx459_tgt, rx459_pos, 1
    ne $S10, ucs4:"!", rx459_fail1384
    add rx459_pos, 1
    nqp_rxpeek $I19, rx459_bstack, rxcap462_fail1394
    inc $I19
    set $I11, rx459_bstack[$I19]
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx459_pos)
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "not")
    goto rxcap462_done1393
  rxcap462_fail1394:
    goto rx459_fail1384
  rxcap462_done1393:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1384
    nqp_rxmark rx459_bstack, rxsubrule463_pass1395, -1, 0
  rxsubrule463_pass1395:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    goto alt461_end1391
  alt461_11396:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1384
    nqp_rxmark rx459_bstack, rxsubrule464_pass1397, -1, 0
  rxsubrule464_pass1397:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    nqp_rxmark rx459_bstack, rxquantr465_done1399, rx459_pos, 0
  rxquantr465_loop1398:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1384
    goto rxsubrule466_pass1400
  rxsubrule466_back1401:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1384
  rxsubrule466_pass1400:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule466_back1401
    push rx459_bstack, $I11
    push rx459_bstack, 0
    push rx459_bstack, rx459_pos
    elements $I11, rx459_cstack
    push rx459_bstack, $I11
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    nqp_rxpeek $I19, rx459_bstack, rxquantr465_done1399
    inc $I19
    inc $I19
    set rx459_rep, rx459_bstack[$I19]
    nqp_rxcommit rx459_bstack, rxquantr465_done1399
    inc rx459_rep
  rxquantr465_done1399:
    goto alt461_end1391
  alt461_21402:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1384
    nqp_rxmark rx459_bstack, rxsubrule467_pass1403, -1, 0
  rxsubrule467_pass1403:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    goto alt461_end1391
  alt461_31404:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."variable"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1384
    nqp_rxmark rx459_bstack, rxsubrule468_pass1405, -1, 0
  rxsubrule468_pass1405:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    goto alt461_end1391
  alt461_end1391:
    nqp_rxcommit rx459_bstack, alt461_end1391
    rx459_cur."!cursor_pass"(rx459_pos, "colonpair", 'backtrack'=>1)
    .return (rx459_cur)
  rx459_restart1383:
    repr_get_attr_obj rx459_cstack, rx459_cur, rx459_curclass, "$!cstack"
  rx459_fail1384:
    unless rx459_bstack, rx459_done1382
    pop $I19, rx459_bstack
    if_null rx459_cstack, rx459_cstack_done1387
    unless rx459_cstack, rx459_cstack_done1387
    dec $I19
    set $P11, rx459_cstack[$I19]
  rx459_cstack_done1387:
    pop rx459_rep, rx459_bstack
    pop rx459_pos, rx459_bstack
    pop $I19, rx459_bstack
    lt rx459_pos, -1, rx459_done1382
    lt rx459_pos, 0, rx459_fail1384
    eq $I19, 0, rx459_fail1384
    nqp_islist $I20, rx459_cstack
    unless $I20, rx459_jump1385
    elements $I18, rx459_bstack
    le $I18, 0, rx459_cut1386
    dec $I18
    set $I18, rx459_bstack[$I18]
  rx459_cut1386:
    assign rx459_cstack, $I18
  rx459_jump1385:
    jump $I19
  rx459_done1382:
    rx459_cur."!cursor_fail"()
    .return (rx459_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_97_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 926
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx469_tgt
    .local int rx469_pos
    .local int rx469_off
    .local int rx469_eos
    .local int rx469_rep
    .local pmc rx469_cur
    .local pmc rx469_curclass
    .local pmc rx469_bstack
    .local pmc rx469_cstack
    (rx469_cur, rx469_tgt, rx469_pos, rx469_curclass, rx469_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx469_cur
    length rx469_eos, rx469_tgt
    eq $I19, 1, rx469_restart1408
    gt rx469_pos, rx469_eos, rx469_fail1409
    repr_get_attr_int $I11, self, rx469_curclass, "$!from"
    ne $I11, -1, rxscan470_done1415
    goto rxscan470_scan1414
  rxscan470_loop1413:
    inc rx469_pos
    gt rx469_pos, rx469_eos, rx469_fail1409
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!from", rx469_pos
  rxscan470_scan1414:
    nqp_rxmark rx469_bstack, rxscan470_loop1413, rx469_pos, 0
  rxscan470_done1415:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt471_01417
    nqp_push_label $P11, alt471_11424
    nqp_push_label $P11, alt471_21427
    nqp_rxmark rx469_bstack, alt471_end1416, -1, 0
    rx469_cur."!alt"(rx469_pos, "alt_nfa__20_1356803028.59225", $P11)
    goto rx469_fail1409
  alt471_01417:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1409
    nqp_rxmark rx469_bstack, rxsubrule472_pass1418, -1, 0
  rxsubrule472_pass1418:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    nqp_rxmark rx469_bstack, rxquantr473_done1420, rx469_pos, 0
  rxquantr473_loop1419:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1409
    goto rxsubrule474_pass1421
  rxsubrule474_back1422:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1409
  rxsubrule474_pass1421:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule474_back1422
    push rx469_bstack, $I11
    push rx469_bstack, 0
    push rx469_bstack, rx469_pos
    elements $I11, rx469_cstack
    push rx469_bstack, $I11
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    nqp_rxpeek $I19, rx469_bstack, rxquantr473_done1420
    inc $I19
    inc $I19
    set rx469_rep, rx469_bstack[$I19]
    nqp_rxcommit rx469_bstack, rxquantr473_done1420
    inc rx469_rep
  rxquantr473_done1420:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."name"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1409
    nqp_rxmark rx469_bstack, rxsubrule475_pass1423, -1, 0
  rxsubrule475_pass1423:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    goto alt471_end1416
  alt471_11424:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1409
    nqp_rxmark rx469_bstack, rxsubrule476_pass1425, -1, 0
  rxsubrule476_pass1425:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    ge rx469_pos, rx469_eos, rx469_fail1409
    substr $S11, rx469_tgt, rx469_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx469_fail1409
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1409
    nqp_rxmark rx469_bstack, rxsubrule477_pass1426, -1, 0
  rxsubrule477_pass1426:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    goto alt471_end1416
  alt471_21427:
    nqp_rxmark rx469_bstack, rxcap478_fail1429, rx469_pos, 0
    add $I11, rx469_pos, 1
    gt $I11, rx469_eos, rx469_fail1409
    substr $S10, rx469_tgt, rx469_pos, 1
    ne $S10, ucs4:"$", rx469_fail1409
    add rx469_pos, 1
    nqp_rxpeek $I19, rx469_bstack, rxcap478_fail1429
    inc $I19
    set $I11, rx469_bstack[$I19]
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx469_pos)
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sigil")
    goto rxcap478_done1428
  rxcap478_fail1429:
    goto rx469_fail1409
  rxcap478_done1428:
    nqp_rxmark rx469_bstack, rxcap479_fail1431, rx469_pos, 0
    ge rx469_pos, rx469_eos, rx469_fail1409
    substr $S11, rx469_tgt, rx469_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx469_fail1409
    inc rx469_pos
    nqp_rxpeek $I19, rx469_bstack, rxcap479_fail1431
    inc $I19
    set $I11, rx469_bstack[$I19]
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx469_pos)
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap479_done1430
  rxcap479_fail1431:
    goto rx469_fail1409
  rxcap479_done1430:
    goto alt471_end1416
  alt471_end1416:
    rx469_cur."!cursor_pass"(rx469_pos, "variable", 'backtrack'=>1)
    .return (rx469_cur)
  rx469_restart1408:
    repr_get_attr_obj rx469_cstack, rx469_cur, rx469_curclass, "$!cstack"
  rx469_fail1409:
    unless rx469_bstack, rx469_done1407
    pop $I19, rx469_bstack
    if_null rx469_cstack, rx469_cstack_done1412
    unless rx469_cstack, rx469_cstack_done1412
    dec $I19
    set $P11, rx469_cstack[$I19]
  rx469_cstack_done1412:
    pop rx469_rep, rx469_bstack
    pop rx469_pos, rx469_bstack
    pop $I19, rx469_bstack
    lt rx469_pos, -1, rx469_done1407
    lt rx469_pos, 0, rx469_fail1409
    eq $I19, 0, rx469_fail1409
    nqp_islist $I20, rx469_cstack
    unless $I20, rx469_jump1410
    elements $I18, rx469_bstack
    le $I18, 0, rx469_cut1411
    dec $I18
    set $I18, rx469_bstack[$I18]
  rx469_cut1411:
    assign rx469_cstack, $I18
  rx469_jump1410:
    jump $I19
  rx469_done1407:
    rx469_cur."!cursor_fail"()
    .return (rx469_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_98_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 932
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1434
    gt rx480_pos, rx480_eos, rx480_fail1435
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1441
    goto rxscan481_scan1440
  rxscan481_loop1439:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1435
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1440:
    nqp_rxmark rx480_bstack, rxscan481_loop1439, rx480_pos, 0
  rxscan481_done1441:
    ge rx480_pos, rx480_eos, rx480_fail1435
    substr $S11, rx480_tgt, rx480_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx480_fail1435
    inc rx480_pos
    rx480_cur."!cursor_pass"(rx480_pos, "sigil", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1434:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1435:
    unless rx480_bstack, rx480_done1433
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1438
    unless rx480_cstack, rx480_cstack_done1438
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1438:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1433
    lt rx480_pos, 0, rx480_fail1435
    eq $I19, 0, rx480_fail1435
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1436
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1437
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1437:
    assign rx480_cstack, $I18
  rx480_jump1436:
    jump $I19
  rx480_done1433:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_99_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 934
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    (rx482_cur, rx482_tgt, rx482_pos, rx482_curclass, rx482_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1444
    gt rx482_pos, rx482_eos, rx482_fail1445
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1451
    goto rxscan483_scan1450
  rxscan483_loop1449:
    inc rx482_pos
    gt rx482_pos, rx482_eos, rx482_fail1445
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1450:
    nqp_rxmark rx482_bstack, rxscan483_loop1449, rx482_pos, 0
  rxscan483_done1451:
    ge rx482_pos, rx482_eos, rx482_fail1445
    substr $S11, rx482_tgt, rx482_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx482_fail1445
    inc rx482_pos
    rx482_cur."!cursor_pass"(rx482_pos, "twigil", 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1444:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1445:
    unless rx482_bstack, rx482_done1443
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1448
    unless rx482_cstack, rx482_cstack_done1448
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1448:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1443
    lt rx482_pos, 0, rx482_fail1445
    eq $I19, 0, rx482_fail1445
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1446
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1447
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1447:
    assign rx482_cstack, $I18
  rx482_jump1446:
    jump $I19
  rx482_done1443:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_100_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 936
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_101_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 937
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx484_tgt
    .local int rx484_pos
    .local int rx484_off
    .local int rx484_eos
    .local int rx484_rep
    .local pmc rx484_cur
    .local pmc rx484_curclass
    .local pmc rx484_bstack
    .local pmc rx484_cstack
    (rx484_cur, rx484_tgt, rx484_pos, rx484_curclass, rx484_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx484_cur
    length rx484_eos, rx484_tgt
    eq $I19, 1, rx484_restart1454
    gt rx484_pos, rx484_eos, rx484_fail1455
    repr_get_attr_int $I11, self, rx484_curclass, "$!from"
    ne $I11, -1, rxscan485_done1461
    goto rxscan485_scan1460
  rxscan485_loop1459:
    inc rx484_pos
    gt rx484_pos, rx484_eos, rx484_fail1455
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!from", rx484_pos
  rxscan485_scan1460:
    nqp_rxmark rx484_bstack, rxscan485_loop1459, rx484_pos, 0
  rxscan485_done1461:
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    store_lex unicode:"$\x{a2}", rx484_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1462
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1463
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback1463:
    unless_null $P5004, vivi_4861464
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4861464:
    set $P5003, $P5004
  fallback1462:
    set $P101, $P5003
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    store_lex unicode:"$\x{a2}", rx484_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx484_bstack, rxcap487_fail1466, rx484_pos, 0
    add $I11, rx484_pos, 6
    gt $I11, rx484_eos, rx484_fail1455
    substr $S10, rx484_tgt, rx484_pos, 6
    ne $S10, ucs4:"module", rx484_fail1455
    add rx484_pos, 6
    nqp_rxpeek $I19, rx484_bstack, rxcap487_fail1466
    inc $I19
    set $I11, rx484_bstack[$I19]
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    $P11 = rx484_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx484_pos)
    rx484_cstack = rx484_cur."!cursor_capture"($P11, "sym")
    goto rxcap487_done1465
  rxcap487_fail1466:
    goto rx484_fail1455
  rxcap487_done1465:
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    $P11 = rx484_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx484_curclass, "$!pos"
    lt $I11, 0, rx484_fail1455
    nqp_rxmark rx484_bstack, rxsubrule488_pass1467, -1, 0
  rxsubrule488_pass1467:
    rx484_cstack = rx484_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx484_pos, $P11, rx484_curclass, "$!pos"
    rx484_cur."!cursor_pass"(rx484_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx484_cur)
  rx484_restart1454:
    repr_get_attr_obj rx484_cstack, rx484_cur, rx484_curclass, "$!cstack"
  rx484_fail1455:
    unless rx484_bstack, rx484_done1453
    pop $I19, rx484_bstack
    if_null rx484_cstack, rx484_cstack_done1458
    unless rx484_cstack, rx484_cstack_done1458
    dec $I19
    set $P11, rx484_cstack[$I19]
  rx484_cstack_done1458:
    pop rx484_rep, rx484_bstack
    pop rx484_pos, rx484_bstack
    pop $I19, rx484_bstack
    lt rx484_pos, -1, rx484_done1453
    lt rx484_pos, 0, rx484_fail1455
    eq $I19, 0, rx484_fail1455
    nqp_islist $I20, rx484_cstack
    unless $I20, rx484_jump1456
    elements $I18, rx484_bstack
    le $I18, 0, rx484_cut1457
    dec $I18
    set $I18, rx484_bstack[$I18]
  rx484_cut1457:
    assign rx484_cstack, $I18
  rx484_jump1456:
    jump $I19
  rx484_done1453:
    rx484_cur."!cursor_fail"()
    .return (rx484_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_102_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 942
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx489_tgt
    .local int rx489_pos
    .local int rx489_off
    .local int rx489_eos
    .local int rx489_rep
    .local pmc rx489_cur
    .local pmc rx489_curclass
    .local pmc rx489_bstack
    .local pmc rx489_cstack
    (rx489_cur, rx489_tgt, rx489_pos, rx489_curclass, rx489_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx489_cur
    length rx489_eos, rx489_tgt
    eq $I19, 1, rx489_restart1470
    gt rx489_pos, rx489_eos, rx489_fail1471
    repr_get_attr_int $I11, self, rx489_curclass, "$!from"
    ne $I11, -1, rxscan490_done1477
    goto rxscan490_scan1476
  rxscan490_loop1475:
    inc rx489_pos
    gt rx489_pos, rx489_eos, rx489_fail1471
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!from", rx489_pos
  rxscan490_scan1476:
    nqp_rxmark rx489_bstack, rxscan490_loop1475, rx489_pos, 0
  rxscan490_done1477:
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    store_lex unicode:"$\x{a2}", rx489_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1478
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1479
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback1479:
    unless_null $P5004, vivi_4911480
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4911480:
    set $P5003, $P5004
  fallback1478:
    set $P101, $P5003
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    store_lex unicode:"$\x{a2}", rx489_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx489_bstack, rxcap492_fail1482, rx489_pos, 0
    add $I11, rx489_pos, 7
    gt $I11, rx489_eos, rx489_fail1471
    substr $S10, rx489_tgt, rx489_pos, 7
    ne $S10, ucs4:"knowhow", rx489_fail1471
    add rx489_pos, 7
    nqp_rxpeek $I19, rx489_bstack, rxcap492_fail1482
    inc $I19
    set $I11, rx489_bstack[$I19]
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    $P11 = rx489_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx489_pos)
    rx489_cstack = rx489_cur."!cursor_capture"($P11, "sym")
    goto rxcap492_done1481
  rxcap492_fail1482:
    goto rx489_fail1471
  rxcap492_done1481:
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    $P11 = rx489_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx489_curclass, "$!pos"
    lt $I11, 0, rx489_fail1471
    nqp_rxmark rx489_bstack, rxsubrule493_pass1483, -1, 0
  rxsubrule493_pass1483:
    rx489_cstack = rx489_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx489_pos, $P11, rx489_curclass, "$!pos"
    rx489_cur."!cursor_pass"(rx489_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx489_cur)
  rx489_restart1470:
    repr_get_attr_obj rx489_cstack, rx489_cur, rx489_curclass, "$!cstack"
  rx489_fail1471:
    unless rx489_bstack, rx489_done1469
    pop $I19, rx489_bstack
    if_null rx489_cstack, rx489_cstack_done1474
    unless rx489_cstack, rx489_cstack_done1474
    dec $I19
    set $P11, rx489_cstack[$I19]
  rx489_cstack_done1474:
    pop rx489_rep, rx489_bstack
    pop rx489_pos, rx489_bstack
    pop $I19, rx489_bstack
    lt rx489_pos, -1, rx489_done1469
    lt rx489_pos, 0, rx489_fail1471
    eq $I19, 0, rx489_fail1471
    nqp_islist $I20, rx489_cstack
    unless $I20, rx489_jump1472
    elements $I18, rx489_bstack
    le $I18, 0, rx489_cut1473
    dec $I18
    set $I18, rx489_bstack[$I18]
  rx489_cut1473:
    assign rx489_cstack, $I18
  rx489_jump1472:
    jump $I19
  rx489_done1469:
    rx489_cur."!cursor_fail"()
    .return (rx489_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_103_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 947
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx494_tgt
    .local int rx494_pos
    .local int rx494_off
    .local int rx494_eos
    .local int rx494_rep
    .local pmc rx494_cur
    .local pmc rx494_curclass
    .local pmc rx494_bstack
    .local pmc rx494_cstack
    (rx494_cur, rx494_tgt, rx494_pos, rx494_curclass, rx494_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx494_cur
    length rx494_eos, rx494_tgt
    eq $I19, 1, rx494_restart1486
    gt rx494_pos, rx494_eos, rx494_fail1487
    repr_get_attr_int $I11, self, rx494_curclass, "$!from"
    ne $I11, -1, rxscan495_done1493
    goto rxscan495_scan1492
  rxscan495_loop1491:
    inc rx494_pos
    gt rx494_pos, rx494_eos, rx494_fail1487
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!from", rx494_pos
  rxscan495_scan1492:
    nqp_rxmark rx494_bstack, rxscan495_loop1491, rx494_pos, 0
  rxscan495_done1493:
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    store_lex unicode:"$\x{a2}", rx494_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1494
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1495
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback1495:
    unless_null $P5004, vivi_4961496
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4961496:
    set $P5003, $P5004
  fallback1494:
    set $P101, $P5003
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    store_lex unicode:"$\x{a2}", rx494_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx494_bstack, rxcap497_fail1498, rx494_pos, 0
    add $I11, rx494_pos, 5
    gt $I11, rx494_eos, rx494_fail1487
    substr $S10, rx494_tgt, rx494_pos, 5
    ne $S10, ucs4:"class", rx494_fail1487
    add rx494_pos, 5
    nqp_rxpeek $I19, rx494_bstack, rxcap497_fail1498
    inc $I19
    set $I11, rx494_bstack[$I19]
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    $P11 = rx494_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx494_pos)
    rx494_cstack = rx494_cur."!cursor_capture"($P11, "sym")
    goto rxcap497_done1497
  rxcap497_fail1498:
    goto rx494_fail1487
  rxcap497_done1497:
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    $P11 = rx494_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx494_curclass, "$!pos"
    lt $I11, 0, rx494_fail1487
    nqp_rxmark rx494_bstack, rxsubrule498_pass1499, -1, 0
  rxsubrule498_pass1499:
    rx494_cstack = rx494_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx494_pos, $P11, rx494_curclass, "$!pos"
    rx494_cur."!cursor_pass"(rx494_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx494_cur)
  rx494_restart1486:
    repr_get_attr_obj rx494_cstack, rx494_cur, rx494_curclass, "$!cstack"
  rx494_fail1487:
    unless rx494_bstack, rx494_done1485
    pop $I19, rx494_bstack
    if_null rx494_cstack, rx494_cstack_done1490
    unless rx494_cstack, rx494_cstack_done1490
    dec $I19
    set $P11, rx494_cstack[$I19]
  rx494_cstack_done1490:
    pop rx494_rep, rx494_bstack
    pop rx494_pos, rx494_bstack
    pop $I19, rx494_bstack
    lt rx494_pos, -1, rx494_done1485
    lt rx494_pos, 0, rx494_fail1487
    eq $I19, 0, rx494_fail1487
    nqp_islist $I20, rx494_cstack
    unless $I20, rx494_jump1488
    elements $I18, rx494_bstack
    le $I18, 0, rx494_cut1489
    dec $I18
    set $I18, rx494_bstack[$I18]
  rx494_cut1489:
    assign rx494_cstack, $I18
  rx494_jump1488:
    jump $I19
  rx494_done1485:
    rx494_cur."!cursor_fail"()
    .return (rx494_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_104_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 952
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx499_tgt
    .local int rx499_pos
    .local int rx499_off
    .local int rx499_eos
    .local int rx499_rep
    .local pmc rx499_cur
    .local pmc rx499_curclass
    .local pmc rx499_bstack
    .local pmc rx499_cstack
    (rx499_cur, rx499_tgt, rx499_pos, rx499_curclass, rx499_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx499_cur
    length rx499_eos, rx499_tgt
    eq $I19, 1, rx499_restart1502
    gt rx499_pos, rx499_eos, rx499_fail1503
    repr_get_attr_int $I11, self, rx499_curclass, "$!from"
    ne $I11, -1, rxscan500_done1509
    goto rxscan500_scan1508
  rxscan500_loop1507:
    inc rx499_pos
    gt rx499_pos, rx499_eos, rx499_fail1503
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!from", rx499_pos
  rxscan500_scan1508:
    nqp_rxmark rx499_bstack, rxscan500_loop1507, rx499_pos, 0
  rxscan500_done1509:
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    store_lex unicode:"$\x{a2}", rx499_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1510
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1511
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback1511:
    unless_null $P5004, vivi_5011512
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5011512:
    set $P5003, $P5004
  fallback1510:
    set $P101, $P5003
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    store_lex unicode:"$\x{a2}", rx499_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx499_bstack, rxcap502_fail1514, rx499_pos, 0
    add $I11, rx499_pos, 7
    gt $I11, rx499_eos, rx499_fail1503
    substr $S10, rx499_tgt, rx499_pos, 7
    ne $S10, ucs4:"grammar", rx499_fail1503
    add rx499_pos, 7
    nqp_rxpeek $I19, rx499_bstack, rxcap502_fail1514
    inc $I19
    set $I11, rx499_bstack[$I19]
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    $P11 = rx499_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx499_pos)
    rx499_cstack = rx499_cur."!cursor_capture"($P11, "sym")
    goto rxcap502_done1513
  rxcap502_fail1514:
    goto rx499_fail1503
  rxcap502_done1513:
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    $P11 = rx499_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx499_curclass, "$!pos"
    lt $I11, 0, rx499_fail1503
    nqp_rxmark rx499_bstack, rxsubrule503_pass1515, -1, 0
  rxsubrule503_pass1515:
    rx499_cstack = rx499_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx499_pos, $P11, rx499_curclass, "$!pos"
    rx499_cur."!cursor_pass"(rx499_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx499_cur)
  rx499_restart1502:
    repr_get_attr_obj rx499_cstack, rx499_cur, rx499_curclass, "$!cstack"
  rx499_fail1503:
    unless rx499_bstack, rx499_done1501
    pop $I19, rx499_bstack
    if_null rx499_cstack, rx499_cstack_done1506
    unless rx499_cstack, rx499_cstack_done1506
    dec $I19
    set $P11, rx499_cstack[$I19]
  rx499_cstack_done1506:
    pop rx499_rep, rx499_bstack
    pop rx499_pos, rx499_bstack
    pop $I19, rx499_bstack
    lt rx499_pos, -1, rx499_done1501
    lt rx499_pos, 0, rx499_fail1503
    eq $I19, 0, rx499_fail1503
    nqp_islist $I20, rx499_cstack
    unless $I20, rx499_jump1504
    elements $I18, rx499_bstack
    le $I18, 0, rx499_cut1505
    dec $I18
    set $I18, rx499_bstack[$I18]
  rx499_cut1505:
    assign rx499_cstack, $I18
  rx499_jump1504:
    jump $I19
  rx499_done1501:
    rx499_cur."!cursor_fail"()
    .return (rx499_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_105_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 957
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx504_tgt
    .local int rx504_pos
    .local int rx504_off
    .local int rx504_eos
    .local int rx504_rep
    .local pmc rx504_cur
    .local pmc rx504_curclass
    .local pmc rx504_bstack
    .local pmc rx504_cstack
    (rx504_cur, rx504_tgt, rx504_pos, rx504_curclass, rx504_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx504_cur
    length rx504_eos, rx504_tgt
    eq $I19, 1, rx504_restart1518
    gt rx504_pos, rx504_eos, rx504_fail1519
    repr_get_attr_int $I11, self, rx504_curclass, "$!from"
    ne $I11, -1, rxscan505_done1525
    goto rxscan505_scan1524
  rxscan505_loop1523:
    inc rx504_pos
    gt rx504_pos, rx504_eos, rx504_fail1519
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!from", rx504_pos
  rxscan505_scan1524:
    nqp_rxmark rx504_bstack, rxscan505_loop1523, rx504_pos, 0
  rxscan505_done1525:
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    store_lex unicode:"$\x{a2}", rx504_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1526
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1527
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback1527:
    unless_null $P5004, vivi_5061528
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5061528:
    set $P5003, $P5004
  fallback1526:
    set $P101, $P5003
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    store_lex unicode:"$\x{a2}", rx504_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx504_bstack, rxcap507_fail1530, rx504_pos, 0
    add $I11, rx504_pos, 4
    gt $I11, rx504_eos, rx504_fail1519
    substr $S10, rx504_tgt, rx504_pos, 4
    ne $S10, ucs4:"role", rx504_fail1519
    add rx504_pos, 4
    nqp_rxpeek $I19, rx504_bstack, rxcap507_fail1530
    inc $I19
    set $I11, rx504_bstack[$I19]
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    $P11 = rx504_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx504_pos)
    rx504_cstack = rx504_cur."!cursor_capture"($P11, "sym")
    goto rxcap507_done1529
  rxcap507_fail1530:
    goto rx504_fail1519
  rxcap507_done1529:
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    $P11 = rx504_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx504_curclass, "$!pos"
    lt $I11, 0, rx504_fail1519
    nqp_rxmark rx504_bstack, rxsubrule508_pass1531, -1, 0
  rxsubrule508_pass1531:
    rx504_cstack = rx504_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx504_pos, $P11, rx504_curclass, "$!pos"
    rx504_cur."!cursor_pass"(rx504_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx504_cur)
  rx504_restart1518:
    repr_get_attr_obj rx504_cstack, rx504_cur, rx504_curclass, "$!cstack"
  rx504_fail1519:
    unless rx504_bstack, rx504_done1517
    pop $I19, rx504_bstack
    if_null rx504_cstack, rx504_cstack_done1522
    unless rx504_cstack, rx504_cstack_done1522
    dec $I19
    set $P11, rx504_cstack[$I19]
  rx504_cstack_done1522:
    pop rx504_rep, rx504_bstack
    pop rx504_pos, rx504_bstack
    pop $I19, rx504_bstack
    lt rx504_pos, -1, rx504_done1517
    lt rx504_pos, 0, rx504_fail1519
    eq $I19, 0, rx504_fail1519
    nqp_islist $I20, rx504_cstack
    unless $I20, rx504_jump1520
    elements $I18, rx504_bstack
    le $I18, 0, rx504_cut1521
    dec $I18
    set $I18, rx504_bstack[$I18]
  rx504_cut1521:
    assign rx504_cstack, $I18
  rx504_jump1520:
    jump $I19
  rx504_done1517:
    rx504_cur."!cursor_fail"()
    .return (rx504_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_106_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 962
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx509_tgt
    .local int rx509_pos
    .local int rx509_off
    .local int rx509_eos
    .local int rx509_rep
    .local pmc rx509_cur
    .local pmc rx509_curclass
    .local pmc rx509_bstack
    .local pmc rx509_cstack
    (rx509_cur, rx509_tgt, rx509_pos, rx509_curclass, rx509_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx509_cur
    length rx509_eos, rx509_tgt
    eq $I19, 1, rx509_restart1534
    gt rx509_pos, rx509_eos, rx509_fail1535
    repr_get_attr_int $I11, self, rx509_curclass, "$!from"
    ne $I11, -1, rxscan510_done1541
    goto rxscan510_scan1540
  rxscan510_loop1539:
    inc rx509_pos
    gt rx509_pos, rx509_eos, rx509_fail1535
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!from", rx509_pos
  rxscan510_scan1540:
    nqp_rxmark rx509_bstack, rxscan510_loop1539, rx509_pos, 0
  rxscan510_done1541:
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    store_lex unicode:"$\x{a2}", rx509_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1542
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1543
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback1543:
    unless_null $P5004, vivi_5111544
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5111544:
    set $P5003, $P5004
  fallback1542:
    set $P101, $P5003
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    store_lex unicode:"$\x{a2}", rx509_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx509_bstack, rxcap512_fail1546, rx509_pos, 0
    add $I11, rx509_pos, 6
    gt $I11, rx509_eos, rx509_fail1535
    substr $S10, rx509_tgt, rx509_pos, 6
    ne $S10, ucs4:"native", rx509_fail1535
    add rx509_pos, 6
    nqp_rxpeek $I19, rx509_bstack, rxcap512_fail1546
    inc $I19
    set $I11, rx509_bstack[$I19]
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    $P11 = rx509_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx509_pos)
    rx509_cstack = rx509_cur."!cursor_capture"($P11, "sym")
    goto rxcap512_done1545
  rxcap512_fail1546:
    goto rx509_fail1535
  rxcap512_done1545:
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    $P11 = rx509_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx509_curclass, "$!pos"
    lt $I11, 0, rx509_fail1535
    nqp_rxmark rx509_bstack, rxsubrule513_pass1547, -1, 0
  rxsubrule513_pass1547:
    rx509_cstack = rx509_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx509_pos, $P11, rx509_curclass, "$!pos"
    rx509_cur."!cursor_pass"(rx509_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx509_cur)
  rx509_restart1534:
    repr_get_attr_obj rx509_cstack, rx509_cur, rx509_curclass, "$!cstack"
  rx509_fail1535:
    unless rx509_bstack, rx509_done1533
    pop $I19, rx509_bstack
    if_null rx509_cstack, rx509_cstack_done1538
    unless rx509_cstack, rx509_cstack_done1538
    dec $I19
    set $P11, rx509_cstack[$I19]
  rx509_cstack_done1538:
    pop rx509_rep, rx509_bstack
    pop rx509_pos, rx509_bstack
    pop $I19, rx509_bstack
    lt rx509_pos, -1, rx509_done1533
    lt rx509_pos, 0, rx509_fail1535
    eq $I19, 0, rx509_fail1535
    nqp_islist $I20, rx509_cstack
    unless $I20, rx509_jump1536
    elements $I18, rx509_bstack
    le $I18, 0, rx509_cut1537
    dec $I18
    set $I18, rx509_bstack[$I18]
  rx509_cut1537:
    assign rx509_cstack, $I18
  rx509_jump1536:
    jump $I19
  rx509_done1533:
    rx509_cur."!cursor_fail"()
    .return (rx509_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_107_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 967
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx514_tgt
    .local int rx514_pos
    .local int rx514_off
    .local int rx514_eos
    .local int rx514_rep
    .local pmc rx514_cur
    .local pmc rx514_curclass
    .local pmc rx514_bstack
    .local pmc rx514_cstack
    (rx514_cur, rx514_tgt, rx514_pos, rx514_curclass, rx514_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx514_cur
    length rx514_eos, rx514_tgt
    eq $I19, 1, rx514_restart1550
    gt rx514_pos, rx514_eos, rx514_fail1551
    repr_get_attr_int $I11, self, rx514_curclass, "$!from"
    ne $I11, -1, rxscan515_done1557
    goto rxscan515_scan1556
  rxscan515_loop1555:
    inc rx514_pos
    gt rx514_pos, rx514_eos, rx514_fail1551
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!from", rx514_pos
  rxscan515_scan1556:
    nqp_rxmark rx514_bstack, rxscan515_loop1555, rx514_pos, 0
  rxscan515_done1557:
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    store_lex unicode:"$\x{a2}", rx514_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1558
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1559
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback1559:
    unless_null $P5004, vivi_5161560
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5161560:
    set $P5003, $P5004
  fallback1558:
    set $P101, $P5003
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    store_lex unicode:"$\x{a2}", rx514_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx514_bstack, rxcap517_fail1562, rx514_pos, 0
    add $I11, rx514_pos, 4
    gt $I11, rx514_eos, rx514_fail1551
    substr $S10, rx514_tgt, rx514_pos, 4
    ne $S10, ucs4:"stub", rx514_fail1551
    add rx514_pos, 4
    nqp_rxpeek $I19, rx514_bstack, rxcap517_fail1562
    inc $I19
    set $I11, rx514_bstack[$I19]
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx514_pos)
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "sym")
    goto rxcap517_done1561
  rxcap517_fail1562:
    goto rx514_fail1551
  rxcap517_done1561:
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1551
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."name"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1551
    nqp_rxmark rx514_bstack, rxsubrule519_pass1564, -1, 0
  rxsubrule519_pass1564:
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1551
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 9
    gt $I11, rx514_eos, rx514_fail1551
    substr $S10, rx514_tgt, rx514_pos, 9
    ne $S10, ucs4:"metaclass", rx514_fail1551
    add rx514_pos, 9
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1551
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."name"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1551
    nqp_rxmark rx514_bstack, rxsubrule522_pass1567, -1, 0
  rxsubrule522_pass1567:
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1551
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 1
    gt $I11, rx514_eos, rx514_fail1551
    substr $S10, rx514_tgt, rx514_pos, 1
    ne $S10, ucs4:"{", rx514_fail1551
    add rx514_pos, 1
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1551
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 3
    gt $I11, rx514_eos, rx514_fail1551
    substr $S10, rx514_tgt, rx514_pos, 3
    ne $S10, ucs4:"...", rx514_fail1551
    add rx514_pos, 3
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1551
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 1
    gt $I11, rx514_eos, rx514_fail1551
    substr $S10, rx514_tgt, rx514_pos, 1
    ne $S10, ucs4:"}", rx514_fail1551
    add rx514_pos, 1
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1551
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    rx514_cur."!cursor_pass"(rx514_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx514_cur)
  rx514_restart1550:
    repr_get_attr_obj rx514_cstack, rx514_cur, rx514_curclass, "$!cstack"
  rx514_fail1551:
    unless rx514_bstack, rx514_done1549
    pop $I19, rx514_bstack
    if_null rx514_cstack, rx514_cstack_done1554
    unless rx514_cstack, rx514_cstack_done1554
    dec $I19
    set $P11, rx514_cstack[$I19]
  rx514_cstack_done1554:
    pop rx514_rep, rx514_bstack
    pop rx514_pos, rx514_bstack
    pop $I19, rx514_bstack
    lt rx514_pos, -1, rx514_done1549
    lt rx514_pos, 0, rx514_fail1551
    eq $I19, 0, rx514_fail1551
    nqp_islist $I20, rx514_cstack
    unless $I20, rx514_jump1552
    elements $I18, rx514_bstack
    le $I18, 0, rx514_cut1553
    dec $I18
    set $I18, rx514_bstack[$I18]
  rx514_cut1553:
    assign rx514_cstack, $I18
  rx514_jump1552:
    jump $I19
  rx514_done1549:
    rx514_cur."!cursor_fail"()
    .return (rx514_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_108_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 975
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_398_1356803026.47425' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_399_1356803026.47425' 
    capture_lex $P5021 
    .lex "$*PACKAGE", $P101 
    .lex "$OUTER", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx527_tgt
    .local int rx527_pos
    .local int rx527_off
    .local int rx527_eos
    .local int rx527_rep
    .local pmc rx527_cur
    .local pmc rx527_curclass
    .local pmc rx527_bstack
    .local pmc rx527_cstack
    (rx527_cur, rx527_tgt, rx527_pos, rx527_curclass, rx527_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx527_cur
    length rx527_eos, rx527_tgt
    eq $I19, 1, rx527_restart1574
    gt rx527_pos, rx527_eos, rx527_fail1575
    repr_get_attr_int $I11, self, rx527_curclass, "$!from"
    ne $I11, -1, rxscan528_done1581
    goto rxscan528_scan1580
  rxscan528_loop1579:
    inc rx527_pos
    gt rx527_pos, rx527_eos, rx527_fail1575
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!from", rx527_pos
  rxscan528_scan1580:
    nqp_rxmark rx527_bstack, rxscan528_loop1579, rx527_pos, 0
  rxscan528_done1581:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
    unless_null $P101, fallback1583
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PACKAGE"]
    unless_null $P5003, fallback1584
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback1584:
    unless_null $P5003, vivi_5301585
    die "Contextual $*PACKAGE not found"
    box $P5007, "Contextual $*PACKAGE not found"
    set $P5003, $P5007
  vivi_5301585:
    set $P101, $P5003
  fallback1583:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
.annotate 'line', 977
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback1587
    nqp_get_sc_object $P5011, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback1588
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5012
  fallback1588:
    unless_null $P5009, vivi_5321589
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_5321589:
    set $P5008, $P5009
  fallback1587:
    $P5014 = $P5008."cur_lexpad"()
    set $P102, $P5014
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."name"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    nqp_rxmark rx527_bstack, rxsubrule534_pass1591, -1, 0
  rxsubrule534_pass1591:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr538_done1596, rx527_pos, 0
  rxquantr538_loop1595:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_398_1356803026.47425' 
    capture_lex $P5016
    $P5017 = $P5016()
    unless $P5017, rx527_fail1575
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1575
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:"[", rx527_fail1575
    add rx527_pos, 1
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."role_params"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    nqp_rxmark rx527_bstack, rxsubrule543_pass1603, -1, 0
  rxsubrule543_pass1603:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "role_params")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt544_01605:
    nqp_rxmark rx527_bstack, alt544_11606, rx527_pos, 0
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1575
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:"]", rx527_fail1575
    add rx527_pos, 1
    goto alt544_end1604
  alt544_11606:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."FAILGOAL"("']'")
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    goto rxsubrule545_pass1607
  rxsubrule545_back1608:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
  rxsubrule545_pass1607:
    rx527_cstack = rx527_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule545_back1608
    push rx527_bstack, $I11
    push rx527_bstack, 0
    push rx527_bstack, rx527_pos
    elements $I11, rx527_cstack
    push rx527_bstack, $I11
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt544_end1604:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr538_done1596
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr538_done1596
    inc rx527_rep
  rxquantr538_done1596:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr548_done1612, rx527_pos, 0
  rxquantr548_loop1611:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 2
    gt $I11, rx527_eos, rx527_fail1575
    substr $S10, rx527_tgt, rx527_pos, 2
    ne $S10, ucs4:"is", rx527_fail1575
    add rx527_pos, 2
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 5
    gt $I11, rx527_eos, rx527_fail1575
    substr $S10, rx527_tgt, rx527_pos, 5
    ne $S10, ucs4:"repr(", rx527_fail1575
    add rx527_pos, 5
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    nqp_rxmark rx527_bstack, rxsubrule552_pass1616, -1, 0
  rxsubrule552_pass1616:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1575
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:")", rx527_fail1575
    add rx527_pos, 1
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr548_done1612
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr548_done1612
    inc rx527_rep
  rxquantr548_done1612:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
    $P5018 = $P103."MATCH"()
    set $P104, $P5018
    .const 'Sub' $P5019 = 'cuid_399_1356803026.47425' 
    capture_lex $P5019
    $P5020 = $P5019()
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr577_done1706, rx527_pos, 0
  rxquantr577_loop1705:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxcap579_fail1709, rx527_pos, 0
    add $I11, rx527_pos, 9
    gt $I11, rx527_eos, rx527_fail1575
    substr $S10, rx527_tgt, rx527_pos, 9
    ne $S10, ucs4:"is export", rx527_fail1575
    add rx527_pos, 9
    nqp_rxpeek $I19, rx527_bstack, rxcap579_fail1709
    inc $I19
    set $I11, rx527_bstack[$I19]
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx527_pos)
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "export")
    goto rxcap579_done1708
  rxcap579_fail1709:
    goto rx527_fail1575
  rxcap579_done1708:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr577_done1706
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr577_done1706
    inc rx527_rep
  rxquantr577_done1706:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr582_done1713, rx527_pos, 0
  rxquantr582_loop1712:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 2
    gt $I11, rx527_eos, rx527_fail1575
    substr $S10, rx527_tgt, rx527_pos, 2
    ne $S10, ucs4:"is", rx527_fail1575
    add rx527_pos, 2
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."name"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    nqp_rxmark rx527_bstack, rxsubrule585_pass1716, -1, 0
  rxsubrule585_pass1716:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr582_done1713
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr582_done1713
    inc rx527_rep
  rxquantr582_done1713:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr588_done1720, rx527_pos, 0
  rxquantr588_loop1719:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 4
    gt $I11, rx527_eos, rx527_fail1575
    substr $S10, rx527_tgt, rx527_pos, 4
    ne $S10, ucs4:"does", rx527_fail1575
    add rx527_pos, 4
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."name"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    nqp_rxmark rx527_bstack, rxsubrule591_pass1723, -1, 0
  rxsubrule591_pass1723:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr588_done1720
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr588_done1720
    inc rx527_rep
    nqp_rxmark rx527_bstack, rxquantr588_done1720, rx527_pos, rx527_rep
    goto rxquantr588_loop1719
  rxquantr588_done1720:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt594_01727:
    nqp_rxmark rx527_bstack, alt594_11742, rx527_pos, 0
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1575
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:";", rx527_fail1575
    add rx527_pos, 1
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    nqp_rxmark rx527_bstack, rxsubrule597_pass1730, -1, 0
  rxsubrule597_pass1730:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt599_01733:
    nqp_rxmark rx527_bstack, alt599_11737, rx527_pos, 0
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    lt rx527_pos, rx527_eos, rx527_fail1575
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    goto alt599_end1732
  alt599_11737:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt599_end1732:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    goto alt594_end1726
  alt594_11742:
    nqp_rxmark rx527_bstack, alt594_21747, rx527_pos, 0
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    ge rx527_pos, rx527_eos, rx527_fail1575
    substr $S11, rx527_tgt, rx527_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx527_fail1575
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    nqp_rxmark rx527_bstack, rxsubrule609_pass1745, -1, 0
  rxsubrule609_pass1745:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    goto alt594_end1726
  alt594_21747:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt594_end1726:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1575
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    rx527_cur."!cursor_pass"(rx527_pos, "package_def", 'backtrack'=>1)
    .return (rx527_cur)
  rx527_restart1574:
    repr_get_attr_obj rx527_cstack, rx527_cur, rx527_curclass, "$!cstack"
  rx527_fail1575:
    unless rx527_bstack, rx527_done1573
    pop $I19, rx527_bstack
    if_null rx527_cstack, rx527_cstack_done1578
    unless rx527_cstack, rx527_cstack_done1578
    dec $I19
    set $P11, rx527_cstack[$I19]
  rx527_cstack_done1578:
    pop rx527_rep, rx527_bstack
    pop rx527_pos, rx527_bstack
    pop $I19, rx527_bstack
    lt rx527_pos, -1, rx527_done1573
    lt rx527_pos, 0, rx527_fail1575
    eq $I19, 0, rx527_fail1575
    nqp_islist $I20, rx527_cstack
    unless $I20, rx527_jump1576
    elements $I18, rx527_bstack
    le $I18, 0, rx527_cut1577
    dec $I18
    set $I18, rx527_bstack[$I18]
  rx527_cut1577:
    assign rx527_cstack, $I18
  rx527_jump1576:
    jump $I19
  rx527_done1573:
    rx527_cur."!cursor_fail"()
    .return (rx527_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1356803026.47425") :anon :lex :outer("cuid_108_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 981

    find_dynamic_lex $P5001, "$*PKGDECL"
    unless_null $P5001, fallback1598
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PKGDECL"]
    unless_null $P5002, fallback1599
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback1599:
    unless_null $P5002, vivi_5401600
    die "Contextual $*PKGDECL not found"
    box $P5006, "Contextual $*PKGDECL not found"
    set $P5002, $P5006
  vivi_5401600:
    set $P5001, $P5002
  fallback1598:
    set $S5001, $P5001
    iseq $I5001, $S5001, "role"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1356803026.47425") :anon :lex :outer("cuid_108_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 984
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1620
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5004
  fallback1620:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1621
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback1621:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1624
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5009
  fallback1624:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1625
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5010
  fallback1625:
    unless $P5007 goto if556_end1623 
.annotate 'line', 989
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1626
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5017
  fallback1626:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1627
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5018
  fallback1627:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1628
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5019
  fallback1628:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1629
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5020
  fallback1629:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1630
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5021
  fallback1630:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1631
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5022
  fallback1631:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
  if556_end1623:
.annotate 'line', 992
    find_dynamic_lex $P5024, "$*W"
    unless_null $P5024, fallback1632
    nqp_get_sc_object $P5027, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$W"]
    unless_null $P5025, fallback1633
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5028
  fallback1633:
    unless_null $P5025, vivi_5571634
    die "Contextual $*W not found"
    box $P5029, "Contextual $*W not found"
    set $P5025, $P5029
  vivi_5571634:
    set $P5024, $P5025
  fallback1632:
    find_dynamic_lex $P5031, "%*HOW"
    unless_null $P5031, fallback1635
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%HOW"]
    unless_null $P5032, fallback1636
    nqp_get_sc_object $P5036, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%HOW"], $P5037
    set $P5032, $P5037
  fallback1636:
    unless_null $P5032, vivi_5581637
    die "Contextual %*HOW not found"
    box $P5038, "Contextual %*HOW not found"
    set $P5032, $P5038
  vivi_5581637:
    set $P5031, $P5032
  fallback1635:
    find_dynamic_lex $P5039, "$*PKGDECL"
    unless_null $P5039, fallback1638
    nqp_get_sc_object $P5042, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$PKGDECL"]
    unless_null $P5040, fallback1639
    nqp_get_sc_object $P5043, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5043
  fallback1639:
    unless_null $P5040, vivi_5591640
    die "Contextual $*PKGDECL not found"
    box $P5044, "Contextual $*PKGDECL not found"
    set $P5040, $P5044
  vivi_5591640:
    set $P5039, $P5040
  fallback1638:
    set $S5003, $P5039
    set $P5030, $P5031[$S5003]
    unless_null $P5030, fallback1641
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5045
  fallback1641:
    $P5046 = $P5024."pkg_create_mo"($P5030, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5046
    find_dynamic_lex $P5047, "$*SCOPE"
    unless_null $P5047, fallback1646
    nqp_get_sc_object $P5050, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$SCOPE"]
    unless_null $P5048, fallback1647
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5051
  fallback1647:
    unless_null $P5048, vivi_5621648
    die "Contextual $*SCOPE not found"
    box $P5052, "Contextual $*SCOPE not found"
    set $P5048, $P5052
  vivi_5621648:
    set $P5047, $P5048
  fallback1646:
    set $S5004, $P5047
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless561_end1645 
    find_dynamic_lex $P5053, "$*SCOPE"
    unless_null $P5053, fallback1649
    nqp_get_sc_object $P5056, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$SCOPE"]
    unless_null $P5054, fallback1650
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5054, $P5057
  fallback1650:
    unless_null $P5054, vivi_5631651
    die "Contextual $*SCOPE not found"
    box $P5058, "Contextual $*SCOPE not found"
    set $P5054, $P5058
  vivi_5631651:
    set $P5053, $P5054
  fallback1649:
    set $S5005, $P5053
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless561_end1645:
    unless $I5003 goto if560_else1642 
.annotate 'line', 995
.annotate 'line', 996
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback1652
    nqp_get_sc_object $P5062, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback1653
    nqp_get_sc_object $P5063, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5060, $P5063
  fallback1653:
    unless_null $P5060, vivi_5641654
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_5641654:
    set $P5059, $P5060
  fallback1652:
    find_dynamic_lex $P5065, "$*OUTERPACKAGE"
    unless_null $P5065, fallback1655
    nqp_get_sc_object $P5068, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$OUTERPACKAGE"]
    unless_null $P5066, fallback1656
    nqp_get_sc_object $P5069, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5066, $P5069
  fallback1656:
    unless_null $P5066, vivi_5651657
    die "Contextual $*OUTERPACKAGE not found"
    box $P5070, "Contextual $*OUTERPACKAGE not found"
    set $P5066, $P5070
  vivi_5651657:
    set $P5065, $P5066
  fallback1655:
    find_lex $P5073, "$/"
    unless_null $P5073, fallback1658
    nqp_get_sc_object $P5074, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5073, $P5074
  fallback1658:
    set $P5072, $P5073["name"]
    unless_null $P5072, fallback1659
    nqp_get_sc_object $P5075, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5072, $P5075
  fallback1659:
    set $P5071, $P5072["identifier"]
    unless_null $P5071, fallback1660
    nqp_get_sc_object $P5076, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5071, $P5076
  fallback1660:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback1661
    nqp_get_sc_object $P5080, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback1662
    nqp_get_sc_object $P5081, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5078, $P5081
  fallback1662:
    unless_null $P5078, vivi_5661663
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_5661663:
    set $P5077, $P5078
  fallback1661:
    $P5059."install_package_symbol"($P5065, $P5071, $P5077)
    find_lex $P5085, "$/"
    unless_null $P5085, fallback1666
    nqp_get_sc_object $P5086, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5085, $P5086
  fallback1666:
    set $P5084, $P5085["name"]
    unless_null $P5084, fallback1667
    nqp_get_sc_object $P5087, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5084, $P5087
  fallback1667:
    set $P5083, $P5084["identifier"]
    unless_null $P5083, fallback1668
    nqp_get_sc_object $P5088, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5083, $P5088
  fallback1668:
    set $N5001, $P5083
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5112, $I5004
    set $P5111, $P5112
    unless $I5004 goto if567_end1665 
.annotate 'line', 997
.annotate 'line', 998
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback1669
    nqp_get_sc_object $P5092, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback1670
    nqp_get_sc_object $P5093, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5090, $P5093
  fallback1670:
    unless_null $P5090, vivi_5681671
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_5681671:
    set $P5089, $P5090
  fallback1669:
    find_lex $P5095, "$OUTER"
    find_lex $P5099, "$/"
    unless_null $P5099, fallback1672
    nqp_get_sc_object $P5100, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5099, $P5100
  fallback1672:
    set $P5098, $P5099["name"]
    unless_null $P5098, fallback1673
    nqp_get_sc_object $P5101, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5098, $P5101
  fallback1673:
    set $P5097, $P5098["identifier"]
    unless_null $P5097, fallback1674
    nqp_get_sc_object $P5102, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5097, $P5102
  fallback1674:
    set $P5096, $P5097[0]
    unless_null $P5096, fallback1675
    nqp_get_sc_object $P5103, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5096, $P5103
  fallback1675:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback1676
    nqp_get_sc_object $P5107, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback1677
    nqp_get_sc_object $P5108, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5105, $P5108
  fallback1677:
    unless_null $P5105, vivi_5691678
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_5691678:
    set $P5104, $P5105
  fallback1676:
    $P5110 = $P5089."install_lexical_symbol"($P5095, $P5096, $P5104)
    set $P5111, $P5110
  if567_end1665:
    set $P5163, $P5111
    goto if560_end1643
  if560_else1642:
    find_dynamic_lex $P5113, "$*SCOPE"
    unless_null $P5113, fallback1681
    nqp_get_sc_object $P5116, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$SCOPE"]
    unless_null $P5114, fallback1682
    nqp_get_sc_object $P5117, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5114, $P5117
  fallback1682:
    unless_null $P5114, vivi_5711683
    die "Contextual $*SCOPE not found"
    box $P5118, "Contextual $*SCOPE not found"
    set $P5114, $P5118
  vivi_5711683:
    set $P5113, $P5114
  fallback1681:
    set $S5006, $P5113
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if570_else1679 
.annotate 'line', 1001
    find_lex $P5121, "$/"
    unless_null $P5121, fallback1686
    nqp_get_sc_object $P5122, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5121, $P5122
  fallback1686:
    set $P5120, $P5121["name"]
    unless_null $P5120, fallback1687
    nqp_get_sc_object $P5123, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5120, $P5123
  fallback1687:
    set $P5119, $P5120["identifier"]
    unless_null $P5119, fallback1688
    nqp_get_sc_object $P5124, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5119, $P5124
  fallback1688:
    set $N5003, $P5119
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if572_end1685 
.annotate 'line', 1002
.annotate 'line', 1003
    find_lex $P5126, "$/"
    unless_null $P5126, fallback1689
    nqp_get_sc_object $P5127, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5126, $P5127
  fallback1689:
    set $P5125, $P5126["name"]
    unless_null $P5125, fallback1690
    nqp_get_sc_object $P5128, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5125, $P5128
  fallback1690:
    $P5129 = $P5125."CURSOR"()
    $P5130 = $P5129."panic"("A my scoped package cannot have a multi-part name yet")
  if572_end1685:
.annotate 'line', 1005
    find_dynamic_lex $P5131, "$*W"
    unless_null $P5131, fallback1691
    nqp_get_sc_object $P5134, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5133, $P5134
    set $P5132, $P5133["$W"]
    unless_null $P5132, fallback1692
    nqp_get_sc_object $P5135, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5132, $P5135
  fallback1692:
    unless_null $P5132, vivi_5731693
    die "Contextual $*W not found"
    box $P5136, "Contextual $*W not found"
    set $P5132, $P5136
  vivi_5731693:
    set $P5131, $P5132
  fallback1691:
    find_lex $P5137, "$OUTER"
    find_lex $P5141, "$/"
    unless_null $P5141, fallback1694
    nqp_get_sc_object $P5142, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5141, $P5142
  fallback1694:
    set $P5140, $P5141["name"]
    unless_null $P5140, fallback1695
    nqp_get_sc_object $P5143, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5140, $P5143
  fallback1695:
    set $P5139, $P5140["identifier"]
    unless_null $P5139, fallback1696
    nqp_get_sc_object $P5144, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5139, $P5144
  fallback1696:
    set $P5138, $P5139[0]
    unless_null $P5138, fallback1697
    nqp_get_sc_object $P5145, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5138, $P5145
  fallback1697:
    find_dynamic_lex $P5146, "$*PACKAGE"
    unless_null $P5146, fallback1698
    nqp_get_sc_object $P5149, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$PACKAGE"]
    unless_null $P5147, fallback1699
    nqp_get_sc_object $P5150, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5147, $P5150
  fallback1699:
    unless_null $P5147, vivi_5741700
    die "Contextual $*PACKAGE not found"
    box $P5151, "Contextual $*PACKAGE not found"
    set $P5147, $P5151
  vivi_5741700:
    set $P5146, $P5147
  fallback1698:
    $P5152 = $P5131."install_lexical_symbol"($P5137, $P5138, $P5146)
    set $P5162, $P5152
    goto if570_end1680
  if570_else1679:
.annotate 'line', 1007
.annotate 'line', 1008
    find_lex $P5153, "$/"
    $P5154 = $P5153."CURSOR"()
    find_dynamic_lex $P5155, "$*SCOPE"
    unless_null $P5155, fallback1701
    nqp_get_sc_object $P5158, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5157, $P5158
    set $P5156, $P5157["$SCOPE"]
    unless_null $P5156, fallback1702
    nqp_get_sc_object $P5159, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5156, $P5159
  fallback1702:
    unless_null $P5156, vivi_5751703
    die "Contextual $*SCOPE not found"
    box $P5160, "Contextual $*SCOPE not found"
    set $P5156, $P5160
  vivi_5751703:
    set $P5155, $P5156
  fallback1701:
    set $S5008, $P5155
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5161 = $P5154."panic"($S5007)
    set $P5162, $P5161
  if570_end1680:
    set $P5163, $P5162
  if560_end1643:
    .return ($P5163) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_109_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1022
    .param pmc _lex_param_0 
    .lex "$*SCOPE", $P101 
    .lex "$*IN_DECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx615_tgt
    .local int rx615_pos
    .local int rx615_off
    .local int rx615_eos
    .local int rx615_rep
    .local pmc rx615_cur
    .local pmc rx615_curclass
    .local pmc rx615_bstack
    .local pmc rx615_cstack
    (rx615_cur, rx615_tgt, rx615_pos, rx615_curclass, rx615_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx615_cur
    length rx615_eos, rx615_tgt
    eq $I19, 1, rx615_restart1754
    gt rx615_pos, rx615_eos, rx615_fail1755
    repr_get_attr_int $I11, self, rx615_curclass, "$!from"
    ne $I11, -1, rxscan616_done1761
    goto rxscan616_scan1760
  rxscan616_loop1759:
    inc rx615_pos
    gt rx615_pos, rx615_eos, rx615_fail1755
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!from", rx615_pos
  rxscan616_scan1760:
    nqp_rxmark rx615_bstack, rxscan616_loop1759, rx615_pos, 0
  rxscan616_done1761:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1755
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    store_lex unicode:"$\x{a2}", rx615_cur
    box $P5003, "my"
    set $P101, $P5003
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1755
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    store_lex unicode:"$\x{a2}", rx615_cur
    box $P5004, "variable"
    set $P102, $P5004
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1755
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    nqp_rxmark rx615_bstack, rxquantr620_done1766, -1, 0
  rxquantr620_loop1765:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1755
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."variable"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1755
    nqp_rxmark rx615_bstack, rxsubrule622_pass1768, -1, 0
  rxsubrule622_pass1768:
    rx615_cstack = rx615_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1755
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    nqp_rxpeek $I19, rx615_bstack, rxquantr620_done1766
    inc $I19
    inc $I19
    set rx615_rep, rx615_bstack[$I19]
    nqp_rxcommit rx615_bstack, rxquantr620_done1766
    inc rx615_rep
    nqp_rxmark rx615_bstack, rxquantr620_done1766, rx615_pos, rx615_rep
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1755
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    add $I11, rx615_pos, 1
    gt $I11, rx615_eos, rx615_fail1755
    substr $S10, rx615_tgt, rx615_pos, 1
    ne $S10, ucs4:",", rx615_fail1755
    add rx615_pos, 1
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1755
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    goto rxquantr620_loop1765
  rxquantr620_done1766:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1755
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    rx615_cur."!cursor_pass"(rx615_pos, "role_params", 'backtrack'=>1)
    .return (rx615_cur)
  rx615_restart1754:
    repr_get_attr_obj rx615_cstack, rx615_cur, rx615_curclass, "$!cstack"
  rx615_fail1755:
    unless rx615_bstack, rx615_done1753
    pop $I19, rx615_bstack
    if_null rx615_cstack, rx615_cstack_done1758
    unless rx615_cstack, rx615_cstack_done1758
    dec $I19
    set $P11, rx615_cstack[$I19]
  rx615_cstack_done1758:
    pop rx615_rep, rx615_bstack
    pop rx615_pos, rx615_bstack
    pop $I19, rx615_bstack
    lt rx615_pos, -1, rx615_done1753
    lt rx615_pos, 0, rx615_fail1755
    eq $I19, 0, rx615_fail1755
    nqp_islist $I20, rx615_cstack
    unless $I20, rx615_jump1756
    elements $I18, rx615_bstack
    le $I18, 0, rx615_cut1757
    dec $I18
    set $I18, rx615_bstack[$I18]
  rx615_cut1757:
    assign rx615_cstack, $I18
  rx615_jump1756:
    jump $I19
  rx615_done1753:
    rx615_cur."!cursor_fail"()
    .return (rx615_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_110_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1028
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_111_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1029
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx627_tgt
    .local int rx627_pos
    .local int rx627_off
    .local int rx627_eos
    .local int rx627_rep
    .local pmc rx627_cur
    .local pmc rx627_curclass
    .local pmc rx627_bstack
    .local pmc rx627_cstack
    (rx627_cur, rx627_tgt, rx627_pos, rx627_curclass, rx627_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx627_cur
    length rx627_eos, rx627_tgt
    eq $I19, 1, rx627_restart1775
    gt rx627_pos, rx627_eos, rx627_fail1776
    repr_get_attr_int $I11, self, rx627_curclass, "$!from"
    ne $I11, -1, rxscan628_done1782
    goto rxscan628_scan1781
  rxscan628_loop1780:
    inc rx627_pos
    gt rx627_pos, rx627_eos, rx627_fail1776
    repr_bind_attr_int rx627_cur, rx627_curclass, "$!from", rx627_pos
  rxscan628_scan1781:
    nqp_rxmark rx627_bstack, rxscan628_loop1780, rx627_pos, 0
  rxscan628_done1782:
    nqp_rxmark rx627_bstack, rxcap629_fail1784, rx627_pos, 0
    add $I11, rx627_pos, 2
    gt $I11, rx627_eos, rx627_fail1776
    substr $S10, rx627_tgt, rx627_pos, 2
    ne $S10, ucs4:"my", rx627_fail1776
    add rx627_pos, 2
    nqp_rxpeek $I19, rx627_bstack, rxcap629_fail1784
    inc $I19
    set $I11, rx627_bstack[$I19]
    repr_bind_attr_int rx627_cur, rx627_curclass, "$!pos", rx627_pos
    $P11 = rx627_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx627_pos)
    rx627_cstack = rx627_cur."!cursor_capture"($P11, "sym")
    goto rxcap629_done1783
  rxcap629_fail1784:
    goto rx627_fail1776
  rxcap629_done1783:
    repr_bind_attr_int rx627_cur, rx627_curclass, "$!pos", rx627_pos
    $P11 = rx627_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx627_curclass, "$!pos"
    lt $I11, 0, rx627_fail1776
    nqp_rxmark rx627_bstack, rxsubrule630_pass1785, -1, 0
  rxsubrule630_pass1785:
    rx627_cstack = rx627_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx627_pos, $P11, rx627_curclass, "$!pos"
    rx627_cur."!cursor_pass"(rx627_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx627_cur)
  rx627_restart1775:
    repr_get_attr_obj rx627_cstack, rx627_cur, rx627_curclass, "$!cstack"
  rx627_fail1776:
    unless rx627_bstack, rx627_done1774
    pop $I19, rx627_bstack
    if_null rx627_cstack, rx627_cstack_done1779
    unless rx627_cstack, rx627_cstack_done1779
    dec $I19
    set $P11, rx627_cstack[$I19]
  rx627_cstack_done1779:
    pop rx627_rep, rx627_bstack
    pop rx627_pos, rx627_bstack
    pop $I19, rx627_bstack
    lt rx627_pos, -1, rx627_done1774
    lt rx627_pos, 0, rx627_fail1776
    eq $I19, 0, rx627_fail1776
    nqp_islist $I20, rx627_cstack
    unless $I20, rx627_jump1777
    elements $I18, rx627_bstack
    le $I18, 0, rx627_cut1778
    dec $I18
    set $I18, rx627_bstack[$I18]
  rx627_cut1778:
    assign rx627_cstack, $I18
  rx627_jump1777:
    jump $I19
  rx627_done1774:
    rx627_cur."!cursor_fail"()
    .return (rx627_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_112_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1030
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx631_tgt
    .local int rx631_pos
    .local int rx631_off
    .local int rx631_eos
    .local int rx631_rep
    .local pmc rx631_cur
    .local pmc rx631_curclass
    .local pmc rx631_bstack
    .local pmc rx631_cstack
    (rx631_cur, rx631_tgt, rx631_pos, rx631_curclass, rx631_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx631_cur
    length rx631_eos, rx631_tgt
    eq $I19, 1, rx631_restart1788
    gt rx631_pos, rx631_eos, rx631_fail1789
    repr_get_attr_int $I11, self, rx631_curclass, "$!from"
    ne $I11, -1, rxscan632_done1795
    goto rxscan632_scan1794
  rxscan632_loop1793:
    inc rx631_pos
    gt rx631_pos, rx631_eos, rx631_fail1789
    repr_bind_attr_int rx631_cur, rx631_curclass, "$!from", rx631_pos
  rxscan632_scan1794:
    nqp_rxmark rx631_bstack, rxscan632_loop1793, rx631_pos, 0
  rxscan632_done1795:
    nqp_rxmark rx631_bstack, rxcap633_fail1797, rx631_pos, 0
    add $I11, rx631_pos, 3
    gt $I11, rx631_eos, rx631_fail1789
    substr $S10, rx631_tgt, rx631_pos, 3
    ne $S10, ucs4:"our", rx631_fail1789
    add rx631_pos, 3
    nqp_rxpeek $I19, rx631_bstack, rxcap633_fail1797
    inc $I19
    set $I11, rx631_bstack[$I19]
    repr_bind_attr_int rx631_cur, rx631_curclass, "$!pos", rx631_pos
    $P11 = rx631_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx631_pos)
    rx631_cstack = rx631_cur."!cursor_capture"($P11, "sym")
    goto rxcap633_done1796
  rxcap633_fail1797:
    goto rx631_fail1789
  rxcap633_done1796:
    repr_bind_attr_int rx631_cur, rx631_curclass, "$!pos", rx631_pos
    $P11 = rx631_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx631_curclass, "$!pos"
    lt $I11, 0, rx631_fail1789
    nqp_rxmark rx631_bstack, rxsubrule634_pass1798, -1, 0
  rxsubrule634_pass1798:
    rx631_cstack = rx631_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx631_pos, $P11, rx631_curclass, "$!pos"
    rx631_cur."!cursor_pass"(rx631_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx631_cur)
  rx631_restart1788:
    repr_get_attr_obj rx631_cstack, rx631_cur, rx631_curclass, "$!cstack"
  rx631_fail1789:
    unless rx631_bstack, rx631_done1787
    pop $I19, rx631_bstack
    if_null rx631_cstack, rx631_cstack_done1792
    unless rx631_cstack, rx631_cstack_done1792
    dec $I19
    set $P11, rx631_cstack[$I19]
  rx631_cstack_done1792:
    pop rx631_rep, rx631_bstack
    pop rx631_pos, rx631_bstack
    pop $I19, rx631_bstack
    lt rx631_pos, -1, rx631_done1787
    lt rx631_pos, 0, rx631_fail1789
    eq $I19, 0, rx631_fail1789
    nqp_islist $I20, rx631_cstack
    unless $I20, rx631_jump1790
    elements $I18, rx631_bstack
    le $I18, 0, rx631_cut1791
    dec $I18
    set $I18, rx631_bstack[$I18]
  rx631_cut1791:
    assign rx631_cstack, $I18
  rx631_jump1790:
    jump $I19
  rx631_done1787:
    rx631_cur."!cursor_fail"()
    .return (rx631_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_113_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1031
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx635_tgt
    .local int rx635_pos
    .local int rx635_off
    .local int rx635_eos
    .local int rx635_rep
    .local pmc rx635_cur
    .local pmc rx635_curclass
    .local pmc rx635_bstack
    .local pmc rx635_cstack
    (rx635_cur, rx635_tgt, rx635_pos, rx635_curclass, rx635_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx635_cur
    length rx635_eos, rx635_tgt
    eq $I19, 1, rx635_restart1801
    gt rx635_pos, rx635_eos, rx635_fail1802
    repr_get_attr_int $I11, self, rx635_curclass, "$!from"
    ne $I11, -1, rxscan636_done1808
    goto rxscan636_scan1807
  rxscan636_loop1806:
    inc rx635_pos
    gt rx635_pos, rx635_eos, rx635_fail1802
    repr_bind_attr_int rx635_cur, rx635_curclass, "$!from", rx635_pos
  rxscan636_scan1807:
    nqp_rxmark rx635_bstack, rxscan636_loop1806, rx635_pos, 0
  rxscan636_done1808:
    nqp_rxmark rx635_bstack, rxcap637_fail1810, rx635_pos, 0
    add $I11, rx635_pos, 3
    gt $I11, rx635_eos, rx635_fail1802
    substr $S10, rx635_tgt, rx635_pos, 3
    ne $S10, ucs4:"has", rx635_fail1802
    add rx635_pos, 3
    nqp_rxpeek $I19, rx635_bstack, rxcap637_fail1810
    inc $I19
    set $I11, rx635_bstack[$I19]
    repr_bind_attr_int rx635_cur, rx635_curclass, "$!pos", rx635_pos
    $P11 = rx635_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx635_pos)
    rx635_cstack = rx635_cur."!cursor_capture"($P11, "sym")
    goto rxcap637_done1809
  rxcap637_fail1810:
    goto rx635_fail1802
  rxcap637_done1809:
    repr_bind_attr_int rx635_cur, rx635_curclass, "$!pos", rx635_pos
    $P11 = rx635_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx635_curclass, "$!pos"
    lt $I11, 0, rx635_fail1802
    nqp_rxmark rx635_bstack, rxsubrule638_pass1811, -1, 0
  rxsubrule638_pass1811:
    rx635_cstack = rx635_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx635_pos, $P11, rx635_curclass, "$!pos"
    rx635_cur."!cursor_pass"(rx635_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx635_cur)
  rx635_restart1801:
    repr_get_attr_obj rx635_cstack, rx635_cur, rx635_curclass, "$!cstack"
  rx635_fail1802:
    unless rx635_bstack, rx635_done1800
    pop $I19, rx635_bstack
    if_null rx635_cstack, rx635_cstack_done1805
    unless rx635_cstack, rx635_cstack_done1805
    dec $I19
    set $P11, rx635_cstack[$I19]
  rx635_cstack_done1805:
    pop rx635_rep, rx635_bstack
    pop rx635_pos, rx635_bstack
    pop $I19, rx635_bstack
    lt rx635_pos, -1, rx635_done1800
    lt rx635_pos, 0, rx635_fail1802
    eq $I19, 0, rx635_fail1802
    nqp_islist $I20, rx635_cstack
    unless $I20, rx635_jump1803
    elements $I18, rx635_bstack
    le $I18, 0, rx635_cut1804
    dec $I18
    set $I18, rx635_bstack[$I18]
  rx635_cut1804:
    assign rx635_cstack, $I18
  rx635_jump1803:
    jump $I19
  rx635_done1800:
    rx635_cur."!cursor_fail"()
    .return (rx635_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_114_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1033
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx639_tgt
    .local int rx639_pos
    .local int rx639_off
    .local int rx639_eos
    .local int rx639_rep
    .local pmc rx639_cur
    .local pmc rx639_curclass
    .local pmc rx639_bstack
    .local pmc rx639_cstack
    (rx639_cur, rx639_tgt, rx639_pos, rx639_curclass, rx639_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx639_cur
    length rx639_eos, rx639_tgt
    eq $I19, 1, rx639_restart1814
    gt rx639_pos, rx639_eos, rx639_fail1815
    repr_get_attr_int $I11, self, rx639_curclass, "$!from"
    ne $I11, -1, rxscan640_done1821
    goto rxscan640_scan1820
  rxscan640_loop1819:
    inc rx639_pos
    gt rx639_pos, rx639_eos, rx639_fail1815
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!from", rx639_pos
  rxscan640_scan1820:
    nqp_rxmark rx639_bstack, rxscan640_loop1819, rx639_pos, 0
  rxscan640_done1821:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt641_01823
    nqp_push_label $P11, alt641_11827
    nqp_push_label $P11, alt641_21831
    nqp_rxmark rx639_bstack, alt641_end1822, -1, 0
    rx639_cur."!alt"(rx639_pos, "alt_nfa__21_1356803028.91165", $P11)
    goto rx639_fail1815
  alt641_01823:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1815
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1815
    nqp_rxmark rx639_bstack, rxsubrule643_pass1825, -1, 0
  rxsubrule643_pass1825:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1815
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt641_end1822
  alt641_11827:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1815
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1815
    nqp_rxmark rx639_bstack, rxsubrule646_pass1829, -1, 0
  rxsubrule646_pass1829:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1815
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt641_end1822
  alt641_21831:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1815
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1815
    nqp_rxmark rx639_bstack, rxsubrule649_pass1833, -1, 0
  rxsubrule649_pass1833:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1815
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt641_end1822
  alt641_end1822:
    rx639_cur."!cursor_pass"(rx639_pos, "scoped", 'backtrack'=>1)
    .return (rx639_cur)
  rx639_restart1814:
    repr_get_attr_obj rx639_cstack, rx639_cur, rx639_curclass, "$!cstack"
  rx639_fail1815:
    unless rx639_bstack, rx639_done1813
    pop $I19, rx639_bstack
    if_null rx639_cstack, rx639_cstack_done1818
    unless rx639_cstack, rx639_cstack_done1818
    dec $I19
    set $P11, rx639_cstack[$I19]
  rx639_cstack_done1818:
    pop rx639_rep, rx639_bstack
    pop rx639_pos, rx639_bstack
    pop $I19, rx639_bstack
    lt rx639_pos, -1, rx639_done1813
    lt rx639_pos, 0, rx639_fail1815
    eq $I19, 0, rx639_fail1815
    nqp_islist $I20, rx639_cstack
    unless $I20, rx639_jump1816
    elements $I18, rx639_bstack
    le $I18, 0, rx639_cut1817
    dec $I18
    set $I18, rx639_bstack[$I18]
  rx639_cut1817:
    assign rx639_cstack, $I18
  rx639_jump1816:
    jump $I19
  rx639_done1813:
    rx639_cur."!cursor_fail"()
    .return (rx639_cur) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_115_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1039
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_400_1356803026.47425' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx651_tgt
    .local int rx651_pos
    .local int rx651_off
    .local int rx651_eos
    .local int rx651_rep
    .local pmc rx651_cur
    .local pmc rx651_curclass
    .local pmc rx651_bstack
    .local pmc rx651_cstack
    (rx651_cur, rx651_tgt, rx651_pos, rx651_curclass, rx651_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx651_cur
    length rx651_eos, rx651_tgt
    eq $I19, 1, rx651_restart1837
    gt rx651_pos, rx651_eos, rx651_fail1838
    repr_get_attr_int $I11, self, rx651_curclass, "$!from"
    ne $I11, -1, rxscan652_done1844
    goto rxscan652_scan1843
  rxscan652_loop1842:
    inc rx651_pos
    gt rx651_pos, rx651_eos, rx651_fail1838
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!from", rx651_pos
  rxscan652_scan1843:
    nqp_rxmark rx651_bstack, rxscan652_loop1842, rx651_pos, 0
  rxscan652_done1844:
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!pos", rx651_pos
    $P11 = rx651_cur."name"()
    repr_get_attr_int $I11, $P11, rx651_curclass, "$!pos"
    lt $I11, 0, rx651_fail1838
    nqp_rxmark rx651_bstack, rxsubrule653_pass1845, -1, 0
  rxsubrule653_pass1845:
    rx651_cstack = rx651_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx651_pos, $P11, rx651_curclass, "$!pos"
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!pos", rx651_pos
    store_lex unicode:"$\x{a2}", rx651_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_400_1356803026.47425' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx651_fail1838
    rx651_cur."!cursor_pass"(rx651_pos, "typename", 'backtrack'=>1)
    .return (rx651_cur)
  rx651_restart1837:
    repr_get_attr_obj rx651_cstack, rx651_cur, rx651_curclass, "$!cstack"
  rx651_fail1838:
    unless rx651_bstack, rx651_done1836
    pop $I19, rx651_bstack
    if_null rx651_cstack, rx651_cstack_done1841
    unless rx651_cstack, rx651_cstack_done1841
    dec $I19
    set $P11, rx651_cstack[$I19]
  rx651_cstack_done1841:
    pop rx651_rep, rx651_bstack
    pop rx651_pos, rx651_bstack
    pop $I19, rx651_bstack
    lt rx651_pos, -1, rx651_done1836
    lt rx651_pos, 0, rx651_fail1838
    eq $I19, 0, rx651_fail1838
    nqp_islist $I20, rx651_cstack
    unless $I20, rx651_jump1839
    elements $I18, rx651_bstack
    le $I18, 0, rx651_cut1840
    dec $I18
    set $I18, rx651_bstack[$I18]
  rx651_cut1840:
    assign rx651_cstack, $I18
  rx651_jump1839:
    jump $I19
  rx651_done1836:
    rx651_cur."!cursor_fail"()
    .return (rx651_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1356803026.47425") :anon :lex :outer("cuid_115_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1041

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1846
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1847
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback1847:
    unless_null $P5002, vivi_6541848
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6541848:
    set $P5001, $P5002
  fallback1846:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1849
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5011
  fallback1849:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1850
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5012
  fallback1850:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1851
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5013
  fallback1851:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_116_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1044
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx655_tgt
    .local int rx655_pos
    .local int rx655_off
    .local int rx655_eos
    .local int rx655_rep
    .local pmc rx655_cur
    .local pmc rx655_curclass
    .local pmc rx655_bstack
    .local pmc rx655_cstack
    (rx655_cur, rx655_tgt, rx655_pos, rx655_curclass, rx655_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx655_cur
    length rx655_eos, rx655_tgt
    eq $I19, 1, rx655_restart1854
    gt rx655_pos, rx655_eos, rx655_fail1855
    repr_get_attr_int $I11, self, rx655_curclass, "$!from"
    ne $I11, -1, rxscan656_done1861
    goto rxscan656_scan1860
  rxscan656_loop1859:
    inc rx655_pos
    gt rx655_pos, rx655_eos, rx655_fail1855
    repr_bind_attr_int rx655_cur, rx655_curclass, "$!from", rx655_pos
  rxscan656_scan1860:
    nqp_rxmark rx655_bstack, rxscan656_loop1859, rx655_pos, 0
  rxscan656_done1861:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt657_01863
    nqp_push_label $P11, alt657_11865
    nqp_rxmark rx655_bstack, alt657_end1862, -1, 0
    rx655_cur."!alt"(rx655_pos, "alt_nfa__22_1356803028.92747", $P11)
    goto rx655_fail1855
  alt657_01863:
    repr_bind_attr_int rx655_cur, rx655_curclass, "$!pos", rx655_pos
    $P11 = rx655_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx655_curclass, "$!pos"
    lt $I11, 0, rx655_fail1855
    nqp_rxmark rx655_bstack, rxsubrule658_pass1864, -1, 0
  rxsubrule658_pass1864:
    rx655_cstack = rx655_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx655_pos, $P11, rx655_curclass, "$!pos"
    goto alt657_end1862
  alt657_11865:
    repr_bind_attr_int rx655_cur, rx655_curclass, "$!pos", rx655_pos
    $P11 = rx655_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx655_curclass, "$!pos"
    lt $I11, 0, rx655_fail1855
    nqp_rxmark rx655_bstack, rxsubrule659_pass1866, -1, 0
  rxsubrule659_pass1866:
    rx655_cstack = rx655_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx655_pos, $P11, rx655_curclass, "$!pos"
    goto alt657_end1862
  alt657_end1862:
    rx655_cur."!cursor_pass"(rx655_pos, "declarator", 'backtrack'=>1)
    .return (rx655_cur)
  rx655_restart1854:
    repr_get_attr_obj rx655_cstack, rx655_cur, rx655_curclass, "$!cstack"
  rx655_fail1855:
    unless rx655_bstack, rx655_done1853
    pop $I19, rx655_bstack
    if_null rx655_cstack, rx655_cstack_done1858
    unless rx655_cstack, rx655_cstack_done1858
    dec $I19
    set $P11, rx655_cstack[$I19]
  rx655_cstack_done1858:
    pop rx655_rep, rx655_bstack
    pop rx655_pos, rx655_bstack
    pop $I19, rx655_bstack
    lt rx655_pos, -1, rx655_done1853
    lt rx655_pos, 0, rx655_fail1855
    eq $I19, 0, rx655_fail1855
    nqp_islist $I20, rx655_cstack
    unless $I20, rx655_jump1856
    elements $I18, rx655_bstack
    le $I18, 0, rx655_cut1857
    dec $I18
    set $I18, rx655_bstack[$I18]
  rx655_cut1857:
    assign rx655_cstack, $I18
  rx655_jump1856:
    jump $I19
  rx655_done1853:
    rx655_cur."!cursor_fail"()
    .return (rx655_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_117_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1049
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_401_1356803026.47425' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx660_tgt
    .local int rx660_pos
    .local int rx660_off
    .local int rx660_eos
    .local int rx660_rep
    .local pmc rx660_cur
    .local pmc rx660_curclass
    .local pmc rx660_bstack
    .local pmc rx660_cstack
    (rx660_cur, rx660_tgt, rx660_pos, rx660_curclass, rx660_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx660_cur
    length rx660_eos, rx660_tgt
    eq $I19, 1, rx660_restart1869
    gt rx660_pos, rx660_eos, rx660_fail1870
    repr_get_attr_int $I11, self, rx660_curclass, "$!from"
    ne $I11, -1, rxscan661_done1876
    goto rxscan661_scan1875
  rxscan661_loop1874:
    inc rx660_pos
    gt rx660_pos, rx660_eos, rx660_fail1870
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!from", rx660_pos
  rxscan661_scan1875:
    nqp_rxmark rx660_bstack, rxscan661_loop1874, rx660_pos, 0
  rxscan661_done1876:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxmark rx660_bstack, rxquantr663_done1879, rx660_pos, 0
  rxquantr663_loop1878:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."typename"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
    goto rxsubrule664_pass1880
  rxsubrule664_back1881:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
  rxsubrule664_pass1880:
    rx660_cstack = rx660_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule664_back1881
    push rx660_bstack, $I11
    push rx660_bstack, 0
    push rx660_bstack, rx660_pos
    elements $I11, rx660_cstack
    push rx660_bstack, $I11
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxpeek $I19, rx660_bstack, rxquantr663_done1879
    inc $I19
    inc $I19
    set rx660_rep, rx660_bstack[$I19]
    nqp_rxcommit rx660_bstack, rxquantr663_done1879
    inc rx660_rep
  rxquantr663_done1879:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    store_lex unicode:"$\x{a2}", rx660_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."variable"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
    nqp_rxmark rx660_bstack, rxsubrule667_pass1884, -1, 0
  rxsubrule667_pass1884:
    rx660_cstack = rx660_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    store_lex unicode:"$\x{a2}", rx660_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_401_1356803026.47425' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxmark rx660_bstack, rxquantr670_done1888, rx660_pos, 0
  rxquantr670_loop1887:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."trait"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
    goto rxsubrule671_pass1889
  rxsubrule671_back1890:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
  rxsubrule671_pass1889:
    rx660_cstack = rx660_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule671_back1890
    push rx660_bstack, $I11
    push rx660_bstack, 0
    push rx660_bstack, rx660_pos
    elements $I11, rx660_cstack
    push rx660_bstack, $I11
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxpeek $I19, rx660_bstack, rxquantr670_done1888
    inc $I19
    inc $I19
    set rx660_rep, rx660_bstack[$I19]
    nqp_rxcommit rx660_bstack, rxquantr670_done1888
    inc rx660_rep
    nqp_rxmark rx660_bstack, rxquantr670_done1888, rx660_pos, rx660_rep
    goto rxquantr670_loop1887
  rxquantr670_done1888:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1870
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    rx660_cur."!cursor_pass"(rx660_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx660_cur)
  rx660_restart1869:
    repr_get_attr_obj rx660_cstack, rx660_cur, rx660_curclass, "$!cstack"
  rx660_fail1870:
    unless rx660_bstack, rx660_done1868
    pop $I19, rx660_bstack
    if_null rx660_cstack, rx660_cstack_done1873
    unless rx660_cstack, rx660_cstack_done1873
    dec $I19
    set $P11, rx660_cstack[$I19]
  rx660_cstack_done1873:
    pop rx660_rep, rx660_bstack
    pop rx660_pos, rx660_bstack
    pop $I19, rx660_bstack
    lt rx660_pos, -1, rx660_done1868
    lt rx660_pos, 0, rx660_fail1870
    eq $I19, 0, rx660_fail1870
    nqp_islist $I20, rx660_cstack
    unless $I20, rx660_jump1871
    elements $I18, rx660_bstack
    le $I18, 0, rx660_cut1872
    dec $I18
    set $I18, rx660_bstack[$I18]
  rx660_cut1872:
    assign rx660_cstack, $I18
  rx660_jump1871:
    jump $I19
  rx660_done1868:
    rx660_cur."!cursor_fail"()
    .return (rx660_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1356803026.47425") :anon :lex :outer("cuid_117_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1053

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_118_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1057
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_119_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1058
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx673_tgt
    .local int rx673_pos
    .local int rx673_off
    .local int rx673_eos
    .local int rx673_rep
    .local pmc rx673_cur
    .local pmc rx673_curclass
    .local pmc rx673_bstack
    .local pmc rx673_cstack
    (rx673_cur, rx673_tgt, rx673_pos, rx673_curclass, rx673_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx673_cur
    length rx673_eos, rx673_tgt
    eq $I19, 1, rx673_restart1894
    gt rx673_pos, rx673_eos, rx673_fail1895
    repr_get_attr_int $I11, self, rx673_curclass, "$!from"
    ne $I11, -1, rxscan674_done1901
    goto rxscan674_scan1900
  rxscan674_loop1899:
    inc rx673_pos
    gt rx673_pos, rx673_eos, rx673_fail1895
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!from", rx673_pos
  rxscan674_scan1900:
    nqp_rxmark rx673_bstack, rxscan674_loop1899, rx673_pos, 0
  rxscan674_done1901:
    nqp_rxmark rx673_bstack, rxcap675_fail1903, rx673_pos, 0
    add $I11, rx673_pos, 3
    gt $I11, rx673_eos, rx673_fail1895
    substr $S10, rx673_tgt, rx673_pos, 3
    ne $S10, ucs4:"sub", rx673_fail1895
    add rx673_pos, 3
    nqp_rxpeek $I19, rx673_bstack, rxcap675_fail1903
    inc $I19
    set $I11, rx673_bstack[$I19]
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx673_pos)
    rx673_cstack = rx673_cur."!cursor_capture"($P11, "sym")
    goto rxcap675_done1902
  rxcap675_fail1903:
    goto rx673_fail1895
  rxcap675_done1902:
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx673_curclass, "$!pos"
    lt $I11, 0, rx673_fail1895
    nqp_rxmark rx673_bstack, rxsubrule676_pass1904, -1, 0
  rxsubrule676_pass1904:
    rx673_cstack = rx673_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx673_pos, $P11, rx673_curclass, "$!pos"
    rx673_cur."!cursor_pass"(rx673_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx673_cur)
  rx673_restart1894:
    repr_get_attr_obj rx673_cstack, rx673_cur, rx673_curclass, "$!cstack"
  rx673_fail1895:
    unless rx673_bstack, rx673_done1893
    pop $I19, rx673_bstack
    if_null rx673_cstack, rx673_cstack_done1898
    unless rx673_cstack, rx673_cstack_done1898
    dec $I19
    set $P11, rx673_cstack[$I19]
  rx673_cstack_done1898:
    pop rx673_rep, rx673_bstack
    pop rx673_pos, rx673_bstack
    pop $I19, rx673_bstack
    lt rx673_pos, -1, rx673_done1893
    lt rx673_pos, 0, rx673_fail1895
    eq $I19, 0, rx673_fail1895
    nqp_islist $I20, rx673_cstack
    unless $I20, rx673_jump1896
    elements $I18, rx673_bstack
    le $I18, 0, rx673_cut1897
    dec $I18
    set $I18, rx673_bstack[$I18]
  rx673_cut1897:
    assign rx673_cstack, $I18
  rx673_jump1896:
    jump $I19
  rx673_done1893:
    rx673_cur."!cursor_fail"()
    .return (rx673_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_120_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1059
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx677_tgt
    .local int rx677_pos
    .local int rx677_off
    .local int rx677_eos
    .local int rx677_rep
    .local pmc rx677_cur
    .local pmc rx677_curclass
    .local pmc rx677_bstack
    .local pmc rx677_cstack
    (rx677_cur, rx677_tgt, rx677_pos, rx677_curclass, rx677_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx677_cur
    length rx677_eos, rx677_tgt
    eq $I19, 1, rx677_restart1907
    gt rx677_pos, rx677_eos, rx677_fail1908
    repr_get_attr_int $I11, self, rx677_curclass, "$!from"
    ne $I11, -1, rxscan678_done1914
    goto rxscan678_scan1913
  rxscan678_loop1912:
    inc rx677_pos
    gt rx677_pos, rx677_eos, rx677_fail1908
    repr_bind_attr_int rx677_cur, rx677_curclass, "$!from", rx677_pos
  rxscan678_scan1913:
    nqp_rxmark rx677_bstack, rxscan678_loop1912, rx677_pos, 0
  rxscan678_done1914:
    nqp_rxmark rx677_bstack, rxcap679_fail1916, rx677_pos, 0
    add $I11, rx677_pos, 6
    gt $I11, rx677_eos, rx677_fail1908
    substr $S10, rx677_tgt, rx677_pos, 6
    ne $S10, ucs4:"method", rx677_fail1908
    add rx677_pos, 6
    nqp_rxpeek $I19, rx677_bstack, rxcap679_fail1916
    inc $I19
    set $I11, rx677_bstack[$I19]
    repr_bind_attr_int rx677_cur, rx677_curclass, "$!pos", rx677_pos
    $P11 = rx677_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx677_pos)
    rx677_cstack = rx677_cur."!cursor_capture"($P11, "sym")
    goto rxcap679_done1915
  rxcap679_fail1916:
    goto rx677_fail1908
  rxcap679_done1915:
    repr_bind_attr_int rx677_cur, rx677_curclass, "$!pos", rx677_pos
    $P11 = rx677_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx677_curclass, "$!pos"
    lt $I11, 0, rx677_fail1908
    nqp_rxmark rx677_bstack, rxsubrule680_pass1917, -1, 0
  rxsubrule680_pass1917:
    rx677_cstack = rx677_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx677_pos, $P11, rx677_curclass, "$!pos"
    rx677_cur."!cursor_pass"(rx677_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx677_cur)
  rx677_restart1907:
    repr_get_attr_obj rx677_cstack, rx677_cur, rx677_curclass, "$!cstack"
  rx677_fail1908:
    unless rx677_bstack, rx677_done1906
    pop $I19, rx677_bstack
    if_null rx677_cstack, rx677_cstack_done1911
    unless rx677_cstack, rx677_cstack_done1911
    dec $I19
    set $P11, rx677_cstack[$I19]
  rx677_cstack_done1911:
    pop rx677_rep, rx677_bstack
    pop rx677_pos, rx677_bstack
    pop $I19, rx677_bstack
    lt rx677_pos, -1, rx677_done1906
    lt rx677_pos, 0, rx677_fail1908
    eq $I19, 0, rx677_fail1908
    nqp_islist $I20, rx677_cstack
    unless $I20, rx677_jump1909
    elements $I18, rx677_bstack
    le $I18, 0, rx677_cut1910
    dec $I18
    set $I18, rx677_bstack[$I18]
  rx677_cut1910:
    assign rx677_cstack, $I18
  rx677_jump1909:
    jump $I19
  rx677_done1906:
    rx677_cur."!cursor_fail"()
    .return (rx677_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_121_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1061
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx681_tgt
    .local int rx681_pos
    .local int rx681_off
    .local int rx681_eos
    .local int rx681_rep
    .local pmc rx681_cur
    .local pmc rx681_curclass
    .local pmc rx681_bstack
    .local pmc rx681_cstack
    (rx681_cur, rx681_tgt, rx681_pos, rx681_curclass, rx681_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx681_cur
    length rx681_eos, rx681_tgt
    eq $I19, 1, rx681_restart1920
    gt rx681_pos, rx681_eos, rx681_fail1921
    repr_get_attr_int $I11, self, rx681_curclass, "$!from"
    ne $I11, -1, rxscan682_done1927
    goto rxscan682_scan1926
  rxscan682_loop1925:
    inc rx681_pos
    gt rx681_pos, rx681_eos, rx681_fail1921
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!from", rx681_pos
  rxscan682_scan1926:
    nqp_rxmark rx681_bstack, rxscan682_loop1925, rx681_pos, 0
  rxscan682_done1927:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr685_done1931, rx681_pos, 0
  rxquantr685_loop1930:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxcap687_fail1934, rx681_pos, 0
    nqp_rxmark rx681_bstack, rxquantr688_done1936, rx681_pos, 0
  rxquantr688_loop1935:
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1921
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"&", rx681_fail1921
    add rx681_pos, 1
    nqp_rxpeek $I19, rx681_bstack, rxquantr688_done1936
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr688_done1936
    inc rx681_rep
  rxquantr688_done1936:
    nqp_rxpeek $I19, rx681_bstack, rxcap687_fail1934
    inc $I19
    set $I11, rx681_bstack[$I19]
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx681_pos)
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "sigil")
    goto rxcap687_done1933
  rxcap687_fail1934:
    goto rx681_fail1921
  rxcap687_done1933:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    nqp_rxmark rx681_bstack, rxsubrule689_pass1937, -1, 0
  rxsubrule689_pass1937:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr685_done1931
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr685_done1931
    inc rx681_rep
  rxquantr685_done1931:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_01943:
    nqp_rxmark rx681_bstack, alt694_11949, rx681_pos, 0
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1921
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"(", rx681_fail1921
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."signature"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    nqp_rxmark rx681_bstack, rxsubrule697_pass1946, -1, 0
  rxsubrule697_pass1946:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1921
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:")", rx681_fail1921
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt694_end1942
  alt694_11949:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_end1942:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr704_done1955, rx681_pos, 0
  rxquantr704_loop1954:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."trait"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    goto rxsubrule705_pass1956
  rxsubrule705_back1957:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
  rxsubrule705_pass1956:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule705_back1957
    push rx681_bstack, $I11
    push rx681_bstack, 0
    push rx681_bstack, rx681_pos
    elements $I11, rx681_cstack
    push rx681_bstack, $I11
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr704_done1955
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr704_done1955
    inc rx681_rep
    nqp_rxmark rx681_bstack, rxquantr704_done1955, rx681_pos, rx681_rep
    goto rxquantr704_loop1954
  rxquantr704_done1955:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt707_01960
    nqp_push_label $P11, alt707_11964
    nqp_rxmark rx681_bstack, alt707_end1959, -1, 0
    rx681_cur."!alt"(rx681_pos, "alt_nfa__23_1356803028.98103", $P11)
    goto rx681_fail1921
  alt707_01960:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    nqp_rxmark rx681_bstack, rxsubrule709_pass1962, -1, 0
  rxsubrule709_pass1962:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt707_end1959
  alt707_11964:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    nqp_rxmark rx681_bstack, rxsubrule712_pass1966, -1, 0
  rxsubrule712_pass1966:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt707_end1959
  alt707_end1959:
    nqp_rxcommit rx681_bstack, alt707_end1959
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1921
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    rx681_cur."!cursor_pass"(rx681_pos, "routine_def", 'backtrack'=>1)
    .return (rx681_cur)
  rx681_restart1920:
    repr_get_attr_obj rx681_cstack, rx681_cur, rx681_curclass, "$!cstack"
  rx681_fail1921:
    unless rx681_bstack, rx681_done1919
    pop $I19, rx681_bstack
    if_null rx681_cstack, rx681_cstack_done1924
    unless rx681_cstack, rx681_cstack_done1924
    dec $I19
    set $P11, rx681_cstack[$I19]
  rx681_cstack_done1924:
    pop rx681_rep, rx681_bstack
    pop rx681_pos, rx681_bstack
    pop $I19, rx681_bstack
    lt rx681_pos, -1, rx681_done1919
    lt rx681_pos, 0, rx681_fail1921
    eq $I19, 0, rx681_fail1921
    nqp_islist $I20, rx681_cstack
    unless $I20, rx681_jump1922
    elements $I18, rx681_bstack
    le $I18, 0, rx681_cut1923
    dec $I18
    set $I18, rx681_bstack[$I18]
  rx681_cut1923:
    assign rx681_cstack, $I18
  rx681_jump1922:
    jump $I19
  rx681_done1919:
    rx681_cur."!cursor_fail"()
    .return (rx681_cur) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_122_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1074
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_402_1356803026.47425' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx715_tgt
    .local int rx715_pos
    .local int rx715_off
    .local int rx715_eos
    .local int rx715_rep
    .local pmc rx715_cur
    .local pmc rx715_curclass
    .local pmc rx715_bstack
    .local pmc rx715_cstack
    (rx715_cur, rx715_tgt, rx715_pos, rx715_curclass, rx715_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx715_cur
    length rx715_eos, rx715_tgt
    eq $I19, 1, rx715_restart1971
    gt rx715_pos, rx715_eos, rx715_fail1972
    repr_get_attr_int $I11, self, rx715_curclass, "$!from"
    ne $I11, -1, rxscan716_done1978
    goto rxscan716_scan1977
  rxscan716_loop1976:
    inc rx715_pos
    gt rx715_pos, rx715_eos, rx715_fail1972
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!from", rx715_pos
  rxscan716_scan1977:
    nqp_rxmark rx715_bstack, rxscan716_loop1976, rx715_pos, 0
  rxscan716_done1978:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    store_lex unicode:"$\x{a2}", rx715_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    store_lex unicode:"$\x{a2}", rx715_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt720_01983:
    nqp_rxmark rx715_bstack, alt720_11989, rx715_pos, 0
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 3
    gt $I11, rx715_eos, rx715_fail1972
    substr $S10, rx715_tgt, rx715_pos, 3
    ne $S10, ucs4:"::(", rx715_fail1972
    add rx715_pos, 3
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."variable"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    nqp_rxmark rx715_bstack, rxsubrule723_pass1986, -1, 0
  rxsubrule723_pass1986:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1972
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:")", rx715_fail1972
    add rx715_pos, 1
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt720_end1982
  alt720_11989:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxmark rx715_bstack, rxcap727_fail1992, rx715_pos, 0
    nqp_rxmark rx715_bstack, rxquantr728_done1994, rx715_pos, 0
  rxquantr728_loop1993:
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1972
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:"!", rx715_fail1972
    add rx715_pos, 1
    nqp_rxpeek $I19, rx715_bstack, rxquantr728_done1994
    inc $I19
    inc $I19
    set rx715_rep, rx715_bstack[$I19]
    nqp_rxcommit rx715_bstack, rxquantr728_done1994
    inc rx715_rep
  rxquantr728_done1994:
    nqp_rxpeek $I19, rx715_bstack, rxcap727_fail1992
    inc $I19
    set $I11, rx715_bstack[$I19]
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx715_pos)
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "private")
    goto rxcap727_done1991
  rxcap727_fail1992:
    goto rx715_fail1972
  rxcap727_done1991:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxmark rx715_bstack, rxquantr730_done1997, rx715_pos, 0
  rxquantr730_loop1996:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    goto rxsubrule731_pass1998
  rxsubrule731_back1999:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
  rxsubrule731_pass1998:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule731_back1999
    push rx715_bstack, $I11
    push rx715_bstack, 0
    push rx715_bstack, rx715_pos
    elements $I11, rx715_cstack
    push rx715_bstack, $I11
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxpeek $I19, rx715_bstack, rxquantr730_done1997
    inc $I19
    inc $I19
    set rx715_rep, rx715_bstack[$I19]
    nqp_rxcommit rx715_bstack, rxquantr730_done1997
    inc rx715_rep
  rxquantr730_done1997:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt720_end1982:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt736_02005:
    nqp_rxmark rx715_bstack, alt736_12011, rx715_pos, 0
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1972
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:"(", rx715_fail1972
    add rx715_pos, 1
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."signature"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    nqp_rxmark rx715_bstack, rxsubrule739_pass2008, -1, 0
  rxsubrule739_pass2008:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1972
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:")", rx715_fail1972
    add rx715_pos, 1
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt736_end2004
  alt736_12011:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt736_end2004:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    store_lex unicode:"$\x{a2}", rx715_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_402_1356803026.47425' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxmark rx715_bstack, rxquantr747_done2018, rx715_pos, 0
  rxquantr747_loop2017:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."trait"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    goto rxsubrule748_pass2019
  rxsubrule748_back2020:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
  rxsubrule748_pass2019:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule748_back2020
    push rx715_bstack, $I11
    push rx715_bstack, 0
    push rx715_bstack, rx715_pos
    elements $I11, rx715_cstack
    push rx715_bstack, $I11
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxpeek $I19, rx715_bstack, rxquantr747_done2018
    inc $I19
    inc $I19
    set rx715_rep, rx715_bstack[$I19]
    nqp_rxcommit rx715_bstack, rxquantr747_done2018
    inc rx715_rep
    nqp_rxmark rx715_bstack, rxquantr747_done2018, rx715_pos, rx715_rep
    goto rxquantr747_loop2017
  rxquantr747_done2018:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt750_02023
    nqp_push_label $P11, alt750_12027
    nqp_rxmark rx715_bstack, alt750_end2022, -1, 0
    rx715_cur."!alt"(rx715_pos, "alt_nfa__24_1356803029.01884", $P11)
    goto rx715_fail1972
  alt750_02023:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    nqp_rxmark rx715_bstack, rxsubrule752_pass2025, -1, 0
  rxsubrule752_pass2025:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt750_end2022
  alt750_12027:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    nqp_rxmark rx715_bstack, rxsubrule755_pass2029, -1, 0
  rxsubrule755_pass2029:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt750_end2022
  alt750_end2022:
    nqp_rxcommit rx715_bstack, alt750_end2022
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1972
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    rx715_cur."!cursor_pass"(rx715_pos, "method_def", 'backtrack'=>1)
    .return (rx715_cur)
  rx715_restart1971:
    repr_get_attr_obj rx715_cstack, rx715_cur, rx715_curclass, "$!cstack"
  rx715_fail1972:
    unless rx715_bstack, rx715_done1970
    pop $I19, rx715_bstack
    if_null rx715_cstack, rx715_cstack_done1975
    unless rx715_cstack, rx715_cstack_done1975
    dec $I19
    set $P11, rx715_cstack[$I19]
  rx715_cstack_done1975:
    pop rx715_rep, rx715_bstack
    pop rx715_pos, rx715_bstack
    pop $I19, rx715_bstack
    lt rx715_pos, -1, rx715_done1970
    lt rx715_pos, 0, rx715_fail1972
    eq $I19, 0, rx715_fail1972
    nqp_islist $I20, rx715_cstack
    unless $I20, rx715_jump1973
    elements $I18, rx715_bstack
    le $I18, 0, rx715_cut1974
    dec $I18
    set $I18, rx715_bstack[$I18]
  rx715_cut1974:
    assign rx715_cstack, $I18
  rx715_jump1973:
    jump $I19
  rx715_done1970:
    rx715_cur."!cursor_fail"()
    .return (rx715_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1356803026.47425") :anon :lex :outer("cuid_122_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1084

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_123_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1092
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_403_1356803026.47425' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx758_tgt
    .local int rx758_pos
    .local int rx758_off
    .local int rx758_eos
    .local int rx758_rep
    .local pmc rx758_cur
    .local pmc rx758_curclass
    .local pmc rx758_bstack
    .local pmc rx758_cstack
    (rx758_cur, rx758_tgt, rx758_pos, rx758_curclass, rx758_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx758_cur
    length rx758_eos, rx758_tgt
    eq $I19, 1, rx758_restart2034
    gt rx758_pos, rx758_eos, rx758_fail2035
    repr_get_attr_int $I11, self, rx758_curclass, "$!from"
    ne $I11, -1, rxscan759_done2041
    goto rxscan759_scan2040
  rxscan759_loop2039:
    inc rx758_pos
    gt rx758_pos, rx758_eos, rx758_fail2035
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!from", rx758_pos
  rxscan759_scan2040:
    nqp_rxmark rx758_bstack, rxscan759_loop2039, rx758_pos, 0
  rxscan759_done2041:
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    store_lex unicode:"$\x{a2}", rx758_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_403_1356803026.47425' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx758_fail2035
    add $I11, rx758_pos, 1
    gt $I11, rx758_eos, rx758_fail2035
    substr $S10, rx758_tgt, rx758_pos, 1
    ne $S10, ucs4:"{", rx758_fail2035
    add rx758_pos, 1
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."ws"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2035
    repr_get_attr_int rx758_pos, $P11, rx758_curclass, "$!pos"
    add $I11, rx758_pos, 1
    gt $I11, rx758_eos, rx758_fail2035
    substr $S10, rx758_tgt, rx758_pos, 1
    ne $S10, ucs4:"*", rx758_fail2035
    add rx758_pos, 1
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."ws"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2035
    repr_get_attr_int rx758_pos, $P11, rx758_curclass, "$!pos"
    add $I11, rx758_pos, 1
    gt $I11, rx758_eos, rx758_fail2035
    substr $S10, rx758_tgt, rx758_pos, 1
    ne $S10, ucs4:"}", rx758_fail2035
    add rx758_pos, 1
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2035
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2035
    repr_get_attr_int rx758_pos, $P11, rx758_curclass, "$!pos"
    rx758_cur."!cursor_pass"(rx758_pos, "onlystar", 'backtrack'=>1)
    .return (rx758_cur)
  rx758_restart2034:
    repr_get_attr_obj rx758_cstack, rx758_cur, rx758_curclass, "$!cstack"
  rx758_fail2035:
    unless rx758_bstack, rx758_done2033
    pop $I19, rx758_bstack
    if_null rx758_cstack, rx758_cstack_done2038
    unless rx758_cstack, rx758_cstack_done2038
    dec $I19
    set $P11, rx758_cstack[$I19]
  rx758_cstack_done2038:
    pop rx758_rep, rx758_bstack
    pop rx758_pos, rx758_bstack
    pop $I19, rx758_bstack
    lt rx758_pos, -1, rx758_done2033
    lt rx758_pos, 0, rx758_fail2035
    eq $I19, 0, rx758_fail2035
    nqp_islist $I20, rx758_cstack
    unless $I20, rx758_jump2036
    elements $I18, rx758_bstack
    le $I18, 0, rx758_cut2037
    dec $I18
    set $I18, rx758_bstack[$I18]
  rx758_cut2037:
    assign rx758_cstack, $I18
  rx758_jump2036:
    jump $I19
  rx758_done2033:
    rx758_cur."!cursor_fail"()
    .return (rx758_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1356803026.47425") :anon :lex :outer("cuid_123_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1093

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2042
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2043
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback2043:
    unless_null $P5002, vivi_7602044
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7602044:
    set $P5001, $P5002
  fallback2042:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_124_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1099
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_125_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1100
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx764_tgt
    .local int rx764_pos
    .local int rx764_off
    .local int rx764_eos
    .local int rx764_rep
    .local pmc rx764_cur
    .local pmc rx764_curclass
    .local pmc rx764_bstack
    .local pmc rx764_cstack
    (rx764_cur, rx764_tgt, rx764_pos, rx764_curclass, rx764_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx764_cur
    length rx764_eos, rx764_tgt
    eq $I19, 1, rx764_restart2050
    gt rx764_pos, rx764_eos, rx764_fail2051
    repr_get_attr_int $I11, self, rx764_curclass, "$!from"
    ne $I11, -1, rxscan765_done2057
    goto rxscan765_scan2056
  rxscan765_loop2055:
    inc rx764_pos
    gt rx764_pos, rx764_eos, rx764_fail2051
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!from", rx764_pos
  rxscan765_scan2056:
    nqp_rxmark rx764_bstack, rxscan765_loop2055, rx764_pos, 0
  rxscan765_done2057:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    store_lex unicode:"$\x{a2}", rx764_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx764_bstack, rxcap766_fail2059, rx764_pos, 0
    add $I11, rx764_pos, 5
    gt $I11, rx764_eos, rx764_fail2051
    substr $S10, rx764_tgt, rx764_pos, 5
    ne $S10, ucs4:"multi", rx764_fail2051
    add rx764_pos, 5
    nqp_rxpeek $I19, rx764_bstack, rxcap766_fail2059
    inc $I19
    set $I11, rx764_bstack[$I19]
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx764_pos)
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "sym")
    goto rxcap766_done2058
  rxcap766_fail2059:
    goto rx764_fail2051
  rxcap766_done2058:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."ws"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2051
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
  alt768_02062:
    nqp_rxmark rx764_bstack, alt768_12064, rx764_pos, 0
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2051
    nqp_rxmark rx764_bstack, rxsubrule769_pass2063, -1, 0
  rxsubrule769_pass2063:
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    goto alt768_end2061
  alt768_12064:
    nqp_rxmark rx764_bstack, alt768_22066, rx764_pos, 0
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2051
    nqp_rxmark rx764_bstack, rxsubrule770_pass2065, -1, 0
  rxsubrule770_pass2065:
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    goto alt768_end2061
  alt768_22066:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2051
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
  alt768_end2061:
    rx764_cur."!cursor_pass"(rx764_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx764_cur)
  rx764_restart2050:
    repr_get_attr_obj rx764_cstack, rx764_cur, rx764_curclass, "$!cstack"
  rx764_fail2051:
    unless rx764_bstack, rx764_done2049
    pop $I19, rx764_bstack
    if_null rx764_cstack, rx764_cstack_done2054
    unless rx764_cstack, rx764_cstack_done2054
    dec $I19
    set $P11, rx764_cstack[$I19]
  rx764_cstack_done2054:
    pop rx764_rep, rx764_bstack
    pop rx764_pos, rx764_bstack
    pop $I19, rx764_bstack
    lt rx764_pos, -1, rx764_done2049
    lt rx764_pos, 0, rx764_fail2051
    eq $I19, 0, rx764_fail2051
    nqp_islist $I20, rx764_cstack
    unless $I20, rx764_jump2052
    elements $I18, rx764_bstack
    le $I18, 0, rx764_cut2053
    dec $I18
    set $I18, rx764_bstack[$I18]
  rx764_cut2053:
    assign rx764_cstack, $I18
  rx764_jump2052:
    jump $I19
  rx764_done2049:
    rx764_cur."!cursor_fail"()
    .return (rx764_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_126_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1105
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx772_tgt
    .local int rx772_pos
    .local int rx772_off
    .local int rx772_eos
    .local int rx772_rep
    .local pmc rx772_cur
    .local pmc rx772_curclass
    .local pmc rx772_bstack
    .local pmc rx772_cstack
    (rx772_cur, rx772_tgt, rx772_pos, rx772_curclass, rx772_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx772_cur
    length rx772_eos, rx772_tgt
    eq $I19, 1, rx772_restart2070
    gt rx772_pos, rx772_eos, rx772_fail2071
    repr_get_attr_int $I11, self, rx772_curclass, "$!from"
    ne $I11, -1, rxscan773_done2077
    goto rxscan773_scan2076
  rxscan773_loop2075:
    inc rx772_pos
    gt rx772_pos, rx772_eos, rx772_fail2071
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!from", rx772_pos
  rxscan773_scan2076:
    nqp_rxmark rx772_bstack, rxscan773_loop2075, rx772_pos, 0
  rxscan773_done2077:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    store_lex unicode:"$\x{a2}", rx772_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx772_bstack, rxcap774_fail2079, rx772_pos, 0
    add $I11, rx772_pos, 5
    gt $I11, rx772_eos, rx772_fail2071
    substr $S10, rx772_tgt, rx772_pos, 5
    ne $S10, ucs4:"proto", rx772_fail2071
    add rx772_pos, 5
    nqp_rxpeek $I19, rx772_bstack, rxcap774_fail2079
    inc $I19
    set $I11, rx772_bstack[$I19]
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx772_pos)
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "sym")
    goto rxcap774_done2078
  rxcap774_fail2079:
    goto rx772_fail2071
  rxcap774_done2078:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2071
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
  alt776_02082:
    nqp_rxmark rx772_bstack, alt776_12084, rx772_pos, 0
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2071
    nqp_rxmark rx772_bstack, rxsubrule777_pass2083, -1, 0
  rxsubrule777_pass2083:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    goto alt776_end2081
  alt776_12084:
    nqp_rxmark rx772_bstack, alt776_22086, rx772_pos, 0
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2071
    nqp_rxmark rx772_bstack, rxsubrule778_pass2085, -1, 0
  rxsubrule778_pass2085:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    goto alt776_end2081
  alt776_22086:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2071
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
  alt776_end2081:
    rx772_cur."!cursor_pass"(rx772_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx772_cur)
  rx772_restart2070:
    repr_get_attr_obj rx772_cstack, rx772_cur, rx772_curclass, "$!cstack"
  rx772_fail2071:
    unless rx772_bstack, rx772_done2069
    pop $I19, rx772_bstack
    if_null rx772_cstack, rx772_cstack_done2074
    unless rx772_cstack, rx772_cstack_done2074
    dec $I19
    set $P11, rx772_cstack[$I19]
  rx772_cstack_done2074:
    pop rx772_rep, rx772_bstack
    pop rx772_pos, rx772_bstack
    pop $I19, rx772_bstack
    lt rx772_pos, -1, rx772_done2069
    lt rx772_pos, 0, rx772_fail2071
    eq $I19, 0, rx772_fail2071
    nqp_islist $I20, rx772_cstack
    unless $I20, rx772_jump2072
    elements $I18, rx772_bstack
    le $I18, 0, rx772_cut2073
    dec $I18
    set $I18, rx772_bstack[$I18]
  rx772_cut2073:
    assign rx772_cstack, $I18
  rx772_jump2072:
    jump $I19
  rx772_done2069:
    rx772_cur."!cursor_fail"()
    .return (rx772_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_127_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1110
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx780_tgt
    .local int rx780_pos
    .local int rx780_off
    .local int rx780_eos
    .local int rx780_rep
    .local pmc rx780_cur
    .local pmc rx780_curclass
    .local pmc rx780_bstack
    .local pmc rx780_cstack
    (rx780_cur, rx780_tgt, rx780_pos, rx780_curclass, rx780_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx780_cur
    length rx780_eos, rx780_tgt
    eq $I19, 1, rx780_restart2090
    gt rx780_pos, rx780_eos, rx780_fail2091
    repr_get_attr_int $I11, self, rx780_curclass, "$!from"
    ne $I11, -1, rxscan781_done2097
    goto rxscan781_scan2096
  rxscan781_loop2095:
    inc rx780_pos
    gt rx780_pos, rx780_eos, rx780_fail2091
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!from", rx780_pos
  rxscan781_scan2096:
    nqp_rxmark rx780_bstack, rxscan781_loop2095, rx780_pos, 0
  rxscan781_done2097:
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!pos", rx780_pos
    store_lex unicode:"$\x{a2}", rx780_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!pos", rx780_pos
    $P11 = rx780_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx780_curclass, "$!pos"
    lt $I11, 0, rx780_fail2091
    nqp_rxmark rx780_bstack, rxsubrule782_pass2098, -1, 0
  rxsubrule782_pass2098:
    rx780_cstack = rx780_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx780_pos, $P11, rx780_curclass, "$!pos"
    rx780_cur."!cursor_pass"(rx780_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx780_cur)
  rx780_restart2090:
    repr_get_attr_obj rx780_cstack, rx780_cur, rx780_curclass, "$!cstack"
  rx780_fail2091:
    unless rx780_bstack, rx780_done2089
    pop $I19, rx780_bstack
    if_null rx780_cstack, rx780_cstack_done2094
    unless rx780_cstack, rx780_cstack_done2094
    dec $I19
    set $P11, rx780_cstack[$I19]
  rx780_cstack_done2094:
    pop rx780_rep, rx780_bstack
    pop rx780_pos, rx780_bstack
    pop $I19, rx780_bstack
    lt rx780_pos, -1, rx780_done2089
    lt rx780_pos, 0, rx780_fail2091
    eq $I19, 0, rx780_fail2091
    nqp_islist $I20, rx780_cstack
    unless $I20, rx780_jump2092
    elements $I18, rx780_bstack
    le $I18, 0, rx780_cut2093
    dec $I18
    set $I18, rx780_bstack[$I18]
  rx780_cut2093:
    assign rx780_cstack, $I18
  rx780_jump2092:
    jump $I19
  rx780_done2089:
    rx780_cur."!cursor_fail"()
    .return (rx780_cur) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_128_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1115
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_404_1356803026.47425' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_129_1356803026.47425' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx783_tgt
    .local int rx783_pos
    .local int rx783_off
    .local int rx783_eos
    .local int rx783_rep
    .local pmc rx783_cur
    .local pmc rx783_curclass
    .local pmc rx783_bstack
    .local pmc rx783_cstack
    (rx783_cur, rx783_tgt, rx783_pos, rx783_curclass, rx783_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx783_cur
    length rx783_eos, rx783_tgt
    eq $I19, 1, rx783_restart2101
    gt rx783_pos, rx783_eos, rx783_fail2102
    repr_get_attr_int $I11, self, rx783_curclass, "$!from"
    ne $I11, -1, rxscan784_done2108
    goto rxscan784_scan2107
  rxscan784_loop2106:
    inc rx783_pos
    gt rx783_pos, rx783_eos, rx783_fail2102
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!from", rx783_pos
  rxscan784_scan2107:
    nqp_rxmark rx783_bstack, rxscan784_loop2106, rx783_pos, 0
  rxscan784_done2108:
    nqp_rxmark rx783_bstack, rxquantr785_done2110, rx783_pos, 0
  rxquantr785_loop2109:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    store_lex unicode:"$\x{a2}", rx783_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_404_1356803026.47425' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx783_fail2102
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2102
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2102
    nqp_rxmark rx783_bstack, rxsubrule788_pass2115, -1, 0
  rxsubrule788_pass2115:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2102
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2102
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:":", rx783_fail2102
    add rx783_pos, 1
    nqp_rxpeek $I19, rx783_bstack, rxquantr785_done2110
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr785_done2110
    inc rx783_rep
  rxquantr785_done2110:
    nqp_rxmark rx783_bstack, rxquantr790_done2118, rx783_pos, 0
  rxquantr790_loop2117:
    nqp_rxmark rx783_bstack, rxquantr791_done2120, rx783_pos, 0
  rxquantr791_loop2119:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2102
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2102
    nqp_rxmark rx783_bstack, rxsubrule793_pass2122, -1, 0
  rxsubrule793_pass2122:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2102
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt795_02125
    nqp_push_label $P11, alt795_12126
    nqp_rxmark rx783_bstack, alt795_end2124, -1, 0
    rx783_cur."!alt"(rx783_pos, "alt_nfa__26_1356803029.09676", $P11)
    goto rx783_fail2102
  alt795_02125:
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2102
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:",", rx783_fail2102
    add rx783_pos, 1
    goto alt795_end2124
  alt795_12126:
    .const 'Sub' $P5004 = 'cuid_129_1356803026.47425' 
    capture_lex $P5004
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2102
    nqp_rxmark rx783_bstack, rxsubrule800_pass2142, -1, 0
  rxsubrule800_pass2142:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    goto alt795_end2124
  alt795_end2124:
    nqp_rxcommit rx783_bstack, alt795_end2124
    nqp_rxpeek $I19, rx783_bstack, rxquantr791_done2120
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr791_done2120
    inc rx783_rep
    nqp_rxmark rx783_bstack, rxquantr791_done2120, rx783_pos, rx783_rep
    goto rxquantr791_loop2119
  rxquantr791_done2120:
    nqp_rxpeek $I19, rx783_bstack, rxquantr790_done2118
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr790_done2118
    inc rx783_rep
  rxquantr790_done2118:
    rx783_cur."!cursor_pass"(rx783_pos, "signature", 'backtrack'=>1)
    .return (rx783_cur)
  rx783_restart2101:
    repr_get_attr_obj rx783_cstack, rx783_cur, rx783_curclass, "$!cstack"
  rx783_fail2102:
    unless rx783_bstack, rx783_done2100
    pop $I19, rx783_bstack
    if_null rx783_cstack, rx783_cstack_done2105
    unless rx783_cstack, rx783_cstack_done2105
    dec $I19
    set $P11, rx783_cstack[$I19]
  rx783_cstack_done2105:
    pop rx783_rep, rx783_bstack
    pop rx783_pos, rx783_bstack
    pop $I19, rx783_bstack
    lt rx783_pos, -1, rx783_done2100
    lt rx783_pos, 0, rx783_fail2102
    eq $I19, 0, rx783_fail2102
    nqp_islist $I20, rx783_cstack
    unless $I20, rx783_jump2103
    elements $I18, rx783_bstack
    le $I18, 0, rx783_cut2104
    dec $I18
    set $I18, rx783_bstack[$I18]
  rx783_cut2104:
    assign rx783_cstack, $I18
  rx783_jump2103:
    jump $I19
  rx783_done2100:
    rx783_cur."!cursor_fail"()
    .return (rx783_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1356803026.47425") :anon :lex :outer("cuid_128_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1116

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2111
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2112
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback2112:
    unless_null $P5002, vivi_7862113
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7862113:
    set $P5001, $P5002
  fallback2111:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_129_1356803026.47425") :anon :lex :outer("cuid_128_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx796_tgt
    .local int rx796_pos
    .local int rx796_off
    .local int rx796_eos
    .local int rx796_rep
    .local pmc rx796_cur
    .local pmc rx796_curclass
    .local pmc rx796_bstack
    .local pmc rx796_cstack
    (rx796_cur, rx796_tgt, rx796_pos, rx796_curclass, rx796_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx796_cur
    length rx796_eos, rx796_tgt
    eq $I19, 1, rx796_restart2129
    gt rx796_pos, rx796_eos, rx796_fail2130
    repr_get_attr_int $I11, self, rx796_curclass, "$!from"
    ne $I11, -1, rxscan797_done2136
    goto rxscan797_scan2135
  rxscan797_loop2134:
    inc rx796_pos
    gt rx796_pos, rx796_eos, rx796_fail2130
    repr_bind_attr_int rx796_cur, rx796_curclass, "$!from", rx796_pos
  rxscan797_scan2135:
    nqp_rxmark rx796_bstack, rxscan797_loop2134, rx796_pos, 0
  rxscan797_done2136:
    nqp_rxmark rx796_bstack, rxquantr798_done2138, rx796_pos, 0
  rxquantr798_loop2137:
    ge rx796_pos, rx796_eos, rx796_fail2130
    is_cclass $I11, .CCLASS_WHITESPACE, rx796_tgt, rx796_pos
    unless $I11, rx796_fail2130
    add rx796_pos, 1
    nqp_rxpeek $I19, rx796_bstack, rxquantr798_done2138
    inc $I19
    inc $I19
    set rx796_rep, rx796_bstack[$I19]
    nqp_rxcommit rx796_bstack, rxquantr798_done2138
    inc rx796_rep
    nqp_rxmark rx796_bstack, rxquantr798_done2138, rx796_pos, rx796_rep
    goto rxquantr798_loop2137
  rxquantr798_done2138:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt799_02140
    nqp_push_label $P11, alt799_12141
    nqp_rxmark rx796_bstack, alt799_end2139, -1, 0
    rx796_cur."!alt"(rx796_pos, "alt_nfa__25_1356803029.09142", $P11)
    goto rx796_fail2130
  alt799_02140:
    add $I11, rx796_pos, 1
    gt $I11, rx796_eos, rx796_fail2130
    substr $S10, rx796_tgt, rx796_pos, 1
    ne $S10, ucs4:")", rx796_fail2130
    add rx796_pos, 1
    goto alt799_end2139
  alt799_12141:
    add $I11, rx796_pos, 1
    gt $I11, rx796_eos, rx796_fail2130
    substr $S10, rx796_tgt, rx796_pos, 1
    ne $S10, ucs4:"{", rx796_fail2130
    add rx796_pos, 1
    goto alt799_end2139
  alt799_end2139:
    nqp_rxcommit rx796_bstack, alt799_end2139
    rx796_cur."!cursor_pass"(rx796_pos, 'backtrack'=>1)
    .return (rx796_cur)
  rx796_restart2129:
    repr_get_attr_obj rx796_cstack, rx796_cur, rx796_curclass, "$!cstack"
  rx796_fail2130:
    unless rx796_bstack, rx796_done2128
    pop $I19, rx796_bstack
    if_null rx796_cstack, rx796_cstack_done2133
    unless rx796_cstack, rx796_cstack_done2133
    dec $I19
    set $P11, rx796_cstack[$I19]
  rx796_cstack_done2133:
    pop rx796_rep, rx796_bstack
    pop rx796_pos, rx796_bstack
    pop $I19, rx796_bstack
    lt rx796_pos, -1, rx796_done2128
    lt rx796_pos, 0, rx796_fail2130
    eq $I19, 0, rx796_fail2130
    nqp_islist $I20, rx796_cstack
    unless $I20, rx796_jump2131
    elements $I18, rx796_bstack
    le $I18, 0, rx796_cut2132
    dec $I18
    set $I18, rx796_bstack[$I18]
  rx796_cut2132:
    assign rx796_cstack, $I18
  rx796_jump2131:
    jump $I19
  rx796_done2128:
    rx796_cur."!cursor_fail"()
    .return (rx796_cur) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_130_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1120
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx801_tgt
    .local int rx801_pos
    .local int rx801_off
    .local int rx801_eos
    .local int rx801_rep
    .local pmc rx801_cur
    .local pmc rx801_curclass
    .local pmc rx801_bstack
    .local pmc rx801_cstack
    (rx801_cur, rx801_tgt, rx801_pos, rx801_curclass, rx801_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx801_cur
    length rx801_eos, rx801_tgt
    eq $I19, 1, rx801_restart2145
    gt rx801_pos, rx801_eos, rx801_fail2146
    repr_get_attr_int $I11, self, rx801_curclass, "$!from"
    ne $I11, -1, rxscan802_done2152
    goto rxscan802_scan2151
  rxscan802_loop2150:
    inc rx801_pos
    gt rx801_pos, rx801_eos, rx801_fail2146
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!from", rx801_pos
  rxscan802_scan2151:
    nqp_rxmark rx801_bstack, rxscan802_loop2150, rx801_pos, 0
  rxscan802_done2152:
    nqp_rxmark rx801_bstack, rxquantr803_done2154, rx801_pos, 0
  rxquantr803_loop2153:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."typename"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2146
    nqp_rxmark rx801_bstack, rxsubrule804_pass2155, -1, 0
  rxsubrule804_pass2155:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    nqp_rxmark rx801_bstack, rxquantr805_done2157, rx801_pos, 0
  rxquantr805_loop2156:
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2146
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:":", rx801_fail2146
    add rx801_pos, 1
    nqp_rxmark rx801_bstack, rxcap806_fail2159, rx801_pos, 0
    ge rx801_pos, rx801_eos, rx801_fail2146
    substr $S11, rx801_tgt, rx801_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx801_fail2146
    inc rx801_pos
    nqp_rxpeek $I19, rx801_bstack, rxcap806_fail2159
    inc $I19
    set $I11, rx801_bstack[$I19]
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx801_pos)
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "definedness")
    goto rxcap806_done2158
  rxcap806_fail2159:
    goto rx801_fail2146
  rxcap806_done2158:
    nqp_rxpeek $I19, rx801_bstack, rxquantr805_done2157
    inc $I19
    inc $I19
    set rx801_rep, rx801_bstack[$I19]
    nqp_rxcommit rx801_bstack, rxquantr805_done2157
    inc rx801_rep
  rxquantr805_done2157:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."ws"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2146
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    nqp_rxpeek $I19, rx801_bstack, rxquantr803_done2154
    inc $I19
    inc $I19
    set rx801_rep, rx801_bstack[$I19]
    nqp_rxcommit rx801_bstack, rxquantr803_done2154
    inc rx801_rep
    nqp_rxmark rx801_bstack, rxquantr803_done2154, rx801_pos, rx801_rep
    goto rxquantr803_loop2153
  rxquantr803_done2154:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt808_02162
    nqp_push_label $P11, alt808_12166
    nqp_rxmark rx801_bstack, alt808_end2161, -1, 0
    rx801_cur."!alt"(rx801_pos, "alt_nfa__29_1356803029.15962", $P11)
    goto rx801_fail2146
  alt808_02162:
    nqp_rxmark rx801_bstack, rxcap809_fail2164, rx801_pos, 0
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2146
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:"*", rx801_fail2146
    add rx801_pos, 1
    nqp_rxpeek $I19, rx801_bstack, rxcap809_fail2164
    inc $I19
    set $I11, rx801_bstack[$I19]
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx801_pos)
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "quant")
    goto rxcap809_done2163
  rxcap809_fail2164:
    goto rx801_fail2146
  rxcap809_done2163:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2146
    nqp_rxmark rx801_bstack, rxsubrule810_pass2165, -1, 0
  rxsubrule810_pass2165:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    goto alt808_end2161
  alt808_12166:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt811_02168
    nqp_push_label $P11, alt811_12170
    nqp_rxmark rx801_bstack, alt811_end2167, -1, 0
    rx801_cur."!alt"(rx801_pos, "alt_nfa__27_1356803029.15906", $P11)
    goto rx801_fail2146
  alt811_02168:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2146
    nqp_rxmark rx801_bstack, rxsubrule812_pass2169, -1, 0
  rxsubrule812_pass2169:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    goto alt811_end2167
  alt811_12170:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2146
    nqp_rxmark rx801_bstack, rxsubrule813_pass2171, -1, 0
  rxsubrule813_pass2171:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    goto alt811_end2167
  alt811_end2167:
    nqp_rxcommit rx801_bstack, alt811_end2167
    nqp_rxmark rx801_bstack, rxcap814_fail2173, rx801_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt815_02175
    nqp_push_label $P11, alt815_12176
    nqp_push_label $P11, alt815_22177
    nqp_rxmark rx801_bstack, alt815_end2174, -1, 0
    rx801_cur."!alt"(rx801_pos, "alt_nfa__28_1356803029.15937", $P11)
    goto rx801_fail2146
  alt815_02175:
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2146
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:"?", rx801_fail2146
    add rx801_pos, 1
    goto alt815_end2174
  alt815_12176:
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2146
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:"!", rx801_fail2146
    add rx801_pos, 1
    goto alt815_end2174
  alt815_22177:
    goto alt815_end2174
  alt815_end2174:
    nqp_rxcommit rx801_bstack, alt815_end2174
    nqp_rxpeek $I19, rx801_bstack, rxcap814_fail2173
    inc $I19
    set $I11, rx801_bstack[$I19]
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx801_pos)
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "quant")
    goto rxcap814_done2172
  rxcap814_fail2173:
    goto rx801_fail2146
  rxcap814_done2172:
    goto alt808_end2161
  alt808_end2161:
    nqp_rxcommit rx801_bstack, alt808_end2161
    nqp_rxmark rx801_bstack, rxquantr817_done2180, rx801_pos, 0
  rxquantr817_loop2179:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2146
    goto rxsubrule818_pass2181
  rxsubrule818_back2182:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2146
  rxsubrule818_pass2181:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule818_back2182
    push rx801_bstack, $I11
    push rx801_bstack, 0
    push rx801_bstack, rx801_pos
    elements $I11, rx801_cstack
    push rx801_bstack, $I11
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    nqp_rxpeek $I19, rx801_bstack, rxquantr817_done2180
    inc $I19
    inc $I19
    set rx801_rep, rx801_bstack[$I19]
    nqp_rxcommit rx801_bstack, rxquantr817_done2180
    inc rx801_rep
  rxquantr817_done2180:
    rx801_cur."!cursor_pass"(rx801_pos, "parameter", 'backtrack'=>1)
    .return (rx801_cur)
  rx801_restart2145:
    repr_get_attr_obj rx801_cstack, rx801_cur, rx801_curclass, "$!cstack"
  rx801_fail2146:
    unless rx801_bstack, rx801_done2144
    pop $I19, rx801_bstack
    if_null rx801_cstack, rx801_cstack_done2149
    unless rx801_cstack, rx801_cstack_done2149
    dec $I19
    set $P11, rx801_cstack[$I19]
  rx801_cstack_done2149:
    pop rx801_rep, rx801_bstack
    pop rx801_pos, rx801_bstack
    pop $I19, rx801_bstack
    lt rx801_pos, -1, rx801_done2144
    lt rx801_pos, 0, rx801_fail2146
    eq $I19, 0, rx801_fail2146
    nqp_islist $I20, rx801_cstack
    unless $I20, rx801_jump2147
    elements $I18, rx801_bstack
    le $I18, 0, rx801_cut2148
    dec $I18
    set $I18, rx801_bstack[$I18]
  rx801_cut2148:
    assign rx801_cstack, $I18
  rx801_jump2147:
    jump $I19
  rx801_done2144:
    rx801_cur."!cursor_fail"()
    .return (rx801_cur) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_131_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1129
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx819_tgt
    .local int rx819_pos
    .local int rx819_off
    .local int rx819_eos
    .local int rx819_rep
    .local pmc rx819_cur
    .local pmc rx819_curclass
    .local pmc rx819_bstack
    .local pmc rx819_cstack
    (rx819_cur, rx819_tgt, rx819_pos, rx819_curclass, rx819_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx819_cur
    length rx819_eos, rx819_tgt
    eq $I19, 1, rx819_restart2185
    gt rx819_pos, rx819_eos, rx819_fail2186
    repr_get_attr_int $I11, self, rx819_curclass, "$!from"
    ne $I11, -1, rxscan820_done2192
    goto rxscan820_scan2191
  rxscan820_loop2190:
    inc rx819_pos
    gt rx819_pos, rx819_eos, rx819_fail2186
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!from", rx819_pos
  rxscan820_scan2191:
    nqp_rxmark rx819_bstack, rxscan820_loop2190, rx819_pos, 0
  rxscan820_done2192:
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2186
    nqp_rxmark rx819_bstack, rxsubrule821_pass2193, -1, 0
  rxsubrule821_pass2193:
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx819_pos, $P11, rx819_curclass, "$!pos"
    nqp_rxmark rx819_bstack, rxquantr822_done2195, rx819_pos, 0
  rxquantr822_loop2194:
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2186
    goto rxsubrule823_pass2196
  rxsubrule823_back2197:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2186
  rxsubrule823_pass2196:
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule823_back2197
    push rx819_bstack, $I11
    push rx819_bstack, 0
    push rx819_bstack, rx819_pos
    elements $I11, rx819_cstack
    push rx819_bstack, $I11
    repr_get_attr_int rx819_pos, $P11, rx819_curclass, "$!pos"
    nqp_rxpeek $I19, rx819_bstack, rxquantr822_done2195
    inc $I19
    inc $I19
    set rx819_rep, rx819_bstack[$I19]
    nqp_rxcommit rx819_bstack, rxquantr822_done2195
    inc rx819_rep
  rxquantr822_done2195:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt824_02199
    nqp_push_label $P11, alt824_12201
    nqp_rxmark rx819_bstack, alt824_end2198, -1, 0
    rx819_cur."!alt"(rx819_pos, "alt_nfa__30_1356803029.17074", $P11)
    goto rx819_fail2186
  alt824_02199:
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."ident"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2186
    nqp_rxmark rx819_bstack, rxsubrule825_pass2200, -1, 0
  rxsubrule825_pass2200:
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx819_pos, $P11, rx819_curclass, "$!pos"
    goto alt824_end2198
  alt824_12201:
    nqp_rxmark rx819_bstack, rxcap826_fail2203, rx819_pos, 0
    ge rx819_pos, rx819_eos, rx819_fail2186
    substr $S11, rx819_tgt, rx819_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx819_fail2186
    inc rx819_pos
    nqp_rxpeek $I19, rx819_bstack, rxcap826_fail2203
    inc $I19
    set $I11, rx819_bstack[$I19]
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx819_pos)
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "name")
    goto rxcap826_done2202
  rxcap826_fail2203:
    goto rx819_fail2186
  rxcap826_done2202:
    goto alt824_end2198
  alt824_end2198:
    nqp_rxcommit rx819_bstack, alt824_end2198
    rx819_cur."!cursor_pass"(rx819_pos, "param_var", 'backtrack'=>1)
    .return (rx819_cur)
  rx819_restart2185:
    repr_get_attr_obj rx819_cstack, rx819_cur, rx819_curclass, "$!cstack"
  rx819_fail2186:
    unless rx819_bstack, rx819_done2184
    pop $I19, rx819_bstack
    if_null rx819_cstack, rx819_cstack_done2189
    unless rx819_cstack, rx819_cstack_done2189
    dec $I19
    set $P11, rx819_cstack[$I19]
  rx819_cstack_done2189:
    pop rx819_rep, rx819_bstack
    pop rx819_pos, rx819_bstack
    pop $I19, rx819_bstack
    lt rx819_pos, -1, rx819_done2184
    lt rx819_pos, 0, rx819_fail2186
    eq $I19, 0, rx819_fail2186
    nqp_islist $I20, rx819_cstack
    unless $I20, rx819_jump2187
    elements $I18, rx819_bstack
    le $I18, 0, rx819_cut2188
    dec $I18
    set $I18, rx819_bstack[$I18]
  rx819_cut2188:
    assign rx819_cstack, $I18
  rx819_jump2187:
    jump $I19
  rx819_done2184:
    rx819_cur."!cursor_fail"()
    .return (rx819_cur) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_132_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1134
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx827_tgt
    .local int rx827_pos
    .local int rx827_off
    .local int rx827_eos
    .local int rx827_rep
    .local pmc rx827_cur
    .local pmc rx827_curclass
    .local pmc rx827_bstack
    .local pmc rx827_cstack
    (rx827_cur, rx827_tgt, rx827_pos, rx827_curclass, rx827_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx827_cur
    length rx827_eos, rx827_tgt
    eq $I19, 1, rx827_restart2206
    gt rx827_pos, rx827_eos, rx827_fail2207
    repr_get_attr_int $I11, self, rx827_curclass, "$!from"
    ne $I11, -1, rxscan828_done2213
    goto rxscan828_scan2212
  rxscan828_loop2211:
    inc rx827_pos
    gt rx827_pos, rx827_eos, rx827_fail2207
    repr_bind_attr_int rx827_cur, rx827_curclass, "$!from", rx827_pos
  rxscan828_scan2212:
    nqp_rxmark rx827_bstack, rxscan828_loop2211, rx827_pos, 0
  rxscan828_done2213:
    add $I11, rx827_pos, 1
    gt $I11, rx827_eos, rx827_fail2207
    substr $S10, rx827_tgt, rx827_pos, 1
    ne $S10, ucs4:":", rx827_fail2207
    add rx827_pos, 1
    repr_bind_attr_int rx827_cur, rx827_curclass, "$!pos", rx827_pos
    $P11 = rx827_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx827_curclass, "$!pos"
    lt $I11, 0, rx827_fail2207
    nqp_rxmark rx827_bstack, rxsubrule829_pass2214, -1, 0
  rxsubrule829_pass2214:
    rx827_cstack = rx827_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx827_pos, $P11, rx827_curclass, "$!pos"
    rx827_cur."!cursor_pass"(rx827_pos, "named_param", 'backtrack'=>1)
    .return (rx827_cur)
  rx827_restart2206:
    repr_get_attr_obj rx827_cstack, rx827_cur, rx827_curclass, "$!cstack"
  rx827_fail2207:
    unless rx827_bstack, rx827_done2205
    pop $I19, rx827_bstack
    if_null rx827_cstack, rx827_cstack_done2210
    unless rx827_cstack, rx827_cstack_done2210
    dec $I19
    set $P11, rx827_cstack[$I19]
  rx827_cstack_done2210:
    pop rx827_rep, rx827_bstack
    pop rx827_pos, rx827_bstack
    pop $I19, rx827_bstack
    lt rx827_pos, -1, rx827_done2205
    lt rx827_pos, 0, rx827_fail2207
    eq $I19, 0, rx827_fail2207
    nqp_islist $I20, rx827_cstack
    unless $I20, rx827_jump2208
    elements $I18, rx827_bstack
    le $I18, 0, rx827_cut2209
    dec $I18
    set $I18, rx827_bstack[$I18]
  rx827_cut2209:
    assign rx827_cstack, $I18
  rx827_jump2208:
    jump $I19
  rx827_done2205:
    rx827_cur."!cursor_fail"()
    .return (rx827_cur) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_133_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1138
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx830_tgt
    .local int rx830_pos
    .local int rx830_off
    .local int rx830_eos
    .local int rx830_rep
    .local pmc rx830_cur
    .local pmc rx830_curclass
    .local pmc rx830_bstack
    .local pmc rx830_cstack
    (rx830_cur, rx830_tgt, rx830_pos, rx830_curclass, rx830_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx830_cur
    length rx830_eos, rx830_tgt
    eq $I19, 1, rx830_restart2217
    gt rx830_pos, rx830_eos, rx830_fail2218
    repr_get_attr_int $I11, self, rx830_curclass, "$!from"
    ne $I11, -1, rxscan831_done2224
    goto rxscan831_scan2223
  rxscan831_loop2222:
    inc rx830_pos
    gt rx830_pos, rx830_eos, rx830_fail2218
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!from", rx830_pos
  rxscan831_scan2223:
    nqp_rxmark rx830_bstack, rxscan831_loop2222, rx830_pos, 0
  rxscan831_done2224:
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."ws"()
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2218
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    add $I11, rx830_pos, 1
    gt $I11, rx830_eos, rx830_fail2218
    substr $S10, rx830_tgt, rx830_pos, 1
    ne $S10, ucs4:"=", rx830_fail2218
    add rx830_pos, 1
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."ws"()
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2218
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2218
    nqp_rxmark rx830_bstack, rxsubrule834_pass2227, -1, 0
  rxsubrule834_pass2227:
    rx830_cstack = rx830_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."ws"()
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2218
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    rx830_cur."!cursor_pass"(rx830_pos, "default_value", 'backtrack'=>1)
    .return (rx830_cur)
  rx830_restart2217:
    repr_get_attr_obj rx830_cstack, rx830_cur, rx830_curclass, "$!cstack"
  rx830_fail2218:
    unless rx830_bstack, rx830_done2216
    pop $I19, rx830_bstack
    if_null rx830_cstack, rx830_cstack_done2221
    unless rx830_cstack, rx830_cstack_done2221
    dec $I19
    set $P11, rx830_cstack[$I19]
  rx830_cstack_done2221:
    pop rx830_rep, rx830_bstack
    pop rx830_pos, rx830_bstack
    pop $I19, rx830_bstack
    lt rx830_pos, -1, rx830_done2216
    lt rx830_pos, 0, rx830_fail2218
    eq $I19, 0, rx830_fail2218
    nqp_islist $I20, rx830_cstack
    unless $I20, rx830_jump2219
    elements $I18, rx830_bstack
    le $I18, 0, rx830_cut2220
    dec $I18
    set $I18, rx830_bstack[$I18]
  rx830_cut2220:
    assign rx830_cstack, $I18
  rx830_jump2219:
    jump $I19
  rx830_done2216:
    rx830_cur."!cursor_fail"()
    .return (rx830_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_134_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1140
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx836_tgt
    .local int rx836_pos
    .local int rx836_off
    .local int rx836_eos
    .local int rx836_rep
    .local pmc rx836_cur
    .local pmc rx836_curclass
    .local pmc rx836_bstack
    .local pmc rx836_cstack
    (rx836_cur, rx836_tgt, rx836_pos, rx836_curclass, rx836_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx836_cur
    length rx836_eos, rx836_tgt
    eq $I19, 1, rx836_restart2231
    gt rx836_pos, rx836_eos, rx836_fail2232
    repr_get_attr_int $I11, self, rx836_curclass, "$!from"
    ne $I11, -1, rxscan837_done2238
    goto rxscan837_scan2237
  rxscan837_loop2236:
    inc rx836_pos
    gt rx836_pos, rx836_eos, rx836_fail2232
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!from", rx836_pos
  rxscan837_scan2237:
    nqp_rxmark rx836_bstack, rxscan837_loop2236, rx836_pos, 0
  rxscan837_done2238:
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."ws"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2232
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2232
    nqp_rxmark rx836_bstack, rxsubrule839_pass2240, -1, 0
  rxsubrule839_pass2240:
    rx836_cstack = rx836_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."ws"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2232
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    rx836_cur."!cursor_pass"(rx836_pos, "trait", 'backtrack'=>1)
    .return (rx836_cur)
  rx836_restart2231:
    repr_get_attr_obj rx836_cstack, rx836_cur, rx836_curclass, "$!cstack"
  rx836_fail2232:
    unless rx836_bstack, rx836_done2230
    pop $I19, rx836_bstack
    if_null rx836_cstack, rx836_cstack_done2235
    unless rx836_cstack, rx836_cstack_done2235
    dec $I19
    set $P11, rx836_cstack[$I19]
  rx836_cstack_done2235:
    pop rx836_rep, rx836_bstack
    pop rx836_pos, rx836_bstack
    pop $I19, rx836_bstack
    lt rx836_pos, -1, rx836_done2230
    lt rx836_pos, 0, rx836_fail2232
    eq $I19, 0, rx836_fail2232
    nqp_islist $I20, rx836_cstack
    unless $I20, rx836_jump2233
    elements $I18, rx836_bstack
    le $I18, 0, rx836_cut2234
    dec $I18
    set $I18, rx836_bstack[$I18]
  rx836_cut2234:
    assign rx836_cstack, $I18
  rx836_jump2233:
    jump $I19
  rx836_done2230:
    rx836_cur."!cursor_fail"()
    .return (rx836_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_135_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1142
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_136_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1143
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx841_tgt
    .local int rx841_pos
    .local int rx841_off
    .local int rx841_eos
    .local int rx841_rep
    .local pmc rx841_cur
    .local pmc rx841_curclass
    .local pmc rx841_bstack
    .local pmc rx841_cstack
    (rx841_cur, rx841_tgt, rx841_pos, rx841_curclass, rx841_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx841_cur
    length rx841_eos, rx841_tgt
    eq $I19, 1, rx841_restart2244
    gt rx841_pos, rx841_eos, rx841_fail2245
    repr_get_attr_int $I11, self, rx841_curclass, "$!from"
    ne $I11, -1, rxscan842_done2251
    goto rxscan842_scan2250
  rxscan842_loop2249:
    inc rx841_pos
    gt rx841_pos, rx841_eos, rx841_fail2245
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!from", rx841_pos
  rxscan842_scan2250:
    nqp_rxmark rx841_bstack, rxscan842_loop2249, rx841_pos, 0
  rxscan842_done2251:
    nqp_rxmark rx841_bstack, rxcap843_fail2253, rx841_pos, 0
    add $I11, rx841_pos, 2
    gt $I11, rx841_eos, rx841_fail2245
    substr $S10, rx841_tgt, rx841_pos, 2
    ne $S10, ucs4:"is", rx841_fail2245
    add rx841_pos, 2
    nqp_rxpeek $I19, rx841_bstack, rxcap843_fail2253
    inc $I19
    set $I11, rx841_bstack[$I19]
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx841_pos)
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "sym")
    goto rxcap843_done2252
  rxcap843_fail2253:
    goto rx841_fail2245
  rxcap843_done2252:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."ws"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2245
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2245
    nqp_rxmark rx841_bstack, rxsubrule845_pass2255, -1, 0
  rxsubrule845_pass2255:
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    nqp_rxmark rx841_bstack, rxquantr846_done2257, rx841_pos, 0
  rxquantr846_loop2256:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2245
    goto rxsubrule847_pass2258
  rxsubrule847_back2259:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2245
  rxsubrule847_pass2258:
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule847_back2259
    push rx841_bstack, $I11
    push rx841_bstack, 0
    push rx841_bstack, rx841_pos
    elements $I11, rx841_cstack
    push rx841_bstack, $I11
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    nqp_rxpeek $I19, rx841_bstack, rxquantr846_done2257
    inc $I19
    inc $I19
    set rx841_rep, rx841_bstack[$I19]
    nqp_rxcommit rx841_bstack, rxquantr846_done2257
    inc rx841_rep
  rxquantr846_done2257:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."ws"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2245
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    rx841_cur."!cursor_pass"(rx841_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx841_cur)
  rx841_restart2244:
    repr_get_attr_obj rx841_cstack, rx841_cur, rx841_curclass, "$!cstack"
  rx841_fail2245:
    unless rx841_bstack, rx841_done2243
    pop $I19, rx841_bstack
    if_null rx841_cstack, rx841_cstack_done2248
    unless rx841_cstack, rx841_cstack_done2248
    dec $I19
    set $P11, rx841_cstack[$I19]
  rx841_cstack_done2248:
    pop rx841_rep, rx841_bstack
    pop rx841_pos, rx841_bstack
    pop $I19, rx841_bstack
    lt rx841_pos, -1, rx841_done2243
    lt rx841_pos, 0, rx841_fail2245
    eq $I19, 0, rx841_fail2245
    nqp_islist $I20, rx841_cstack
    unless $I20, rx841_jump2246
    elements $I18, rx841_bstack
    le $I18, 0, rx841_cut2247
    dec $I18
    set $I18, rx841_bstack[$I18]
  rx841_cut2247:
    assign rx841_cstack, $I18
  rx841_jump2246:
    jump $I19
  rx841_done2243:
    rx841_cur."!cursor_fail"()
    .return (rx841_cur) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_137_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1145
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_405_1356803026.47425' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx849_tgt
    .local int rx849_pos
    .local int rx849_off
    .local int rx849_eos
    .local int rx849_rep
    .local pmc rx849_cur
    .local pmc rx849_curclass
    .local pmc rx849_bstack
    .local pmc rx849_cstack
    (rx849_cur, rx849_tgt, rx849_pos, rx849_curclass, rx849_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx849_cur
    length rx849_eos, rx849_tgt
    eq $I19, 1, rx849_restart2263
    gt rx849_pos, rx849_eos, rx849_fail2264
    repr_get_attr_int $I11, self, rx849_curclass, "$!from"
    ne $I11, -1, rxscan850_done2270
    goto rxscan850_scan2269
  rxscan850_loop2268:
    inc rx849_pos
    gt rx849_pos, rx849_eos, rx849_fail2264
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!from", rx849_pos
  rxscan850_scan2269:
    nqp_rxmark rx849_bstack, rxscan850_loop2268, rx849_pos, 0
  rxscan850_done2270:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt851_02272
    nqp_push_label $P11, alt851_12312
    nqp_rxmark rx849_bstack, alt851_end2271, -1, 0
    rx849_cur."!alt"(rx849_pos, "alt_nfa__33_1356803029.29056", $P11)
    goto rx849_fail2264
  alt851_02272:
    nqp_rxmark rx849_bstack, rxcap852_fail2274, rx849_pos, 0
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"proto", rx849_fail2264
    add rx849_pos, 5
    nqp_rxpeek $I19, rx849_bstack, rxcap852_fail2274
    inc $I19
    set $I11, rx849_bstack[$I19]
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx849_pos)
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "proto")
    goto rxcap852_done2273
  rxcap852_fail2274:
    goto rx849_fail2264
  rxcap852_done2273:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt854_02277
    nqp_push_label $P11, alt854_12278
    nqp_push_label $P11, alt854_22279
    nqp_rxmark rx849_bstack, alt854_end2276, -1, 0
    rx849_cur."!alt"(rx849_pos, "alt_nfa__31_1356803029.28965", $P11)
    goto rx849_fail2264
  alt854_02277:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"regex", rx849_fail2264
    add rx849_pos, 5
    goto alt854_end2276
  alt854_12278:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"token", rx849_fail2264
    add rx849_pos, 5
    goto alt854_end2276
  alt854_22279:
    add $I11, rx849_pos, 4
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 4
    ne $S10, ucs4:"rule", rx849_fail2264
    add rx849_pos, 4
    goto alt854_end2276
  alt854_end2276:
    nqp_rxcommit rx849_bstack, alt854_end2276
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt856_02282:
    nqp_rxmark rx849_bstack, alt856_12288, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"::(", rx849_fail2264
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."variable"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    nqp_rxmark rx849_bstack, rxsubrule859_pass2285, -1, 0
  rxsubrule859_pass2285:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:")", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt856_end2281
  alt856_12288:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    nqp_rxmark rx849_bstack, rxsubrule863_pass2290, -1, 0
  rxsubrule863_pass2290:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt856_end2281:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt866_02294:
    nqp_rxmark rx849_bstack, alt866_12297, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"{*}", rx849_fail2264
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt866_end2293
  alt866_12297:
    nqp_rxmark rx849_bstack, alt866_22302, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"{", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"<...>", rx849_fail2264
    add rx849_pos, 5
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"}", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt866_end2293
  alt866_22302:
    nqp_rxmark rx849_bstack, alt866_32307, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"{", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"<*>", rx849_fail2264
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"}", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt866_end2293
  alt866_32307:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt866_end2293:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt851_end2271
  alt851_12312:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    nqp_rxmark rx849_bstack, rxcap882_fail2315, rx849_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt883_02317
    nqp_push_label $P11, alt883_12318
    nqp_push_label $P11, alt883_22319
    nqp_rxmark rx849_bstack, alt883_end2316, -1, 0
    rx849_cur."!alt"(rx849_pos, "alt_nfa__32_1356803029.29032", $P11)
    goto rx849_fail2264
  alt883_02317:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"regex", rx849_fail2264
    add rx849_pos, 5
    goto alt883_end2316
  alt883_12318:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"token", rx849_fail2264
    add rx849_pos, 5
    goto alt883_end2316
  alt883_22319:
    add $I11, rx849_pos, 4
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 4
    ne $S10, ucs4:"rule", rx849_fail2264
    add rx849_pos, 4
    goto alt883_end2316
  alt883_end2316:
    nqp_rxcommit rx849_bstack, alt883_end2316
    nqp_rxpeek $I19, rx849_bstack, rxcap882_fail2315
    inc $I19
    set $I11, rx849_bstack[$I19]
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx849_pos)
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "sym")
    goto rxcap882_done2314
  rxcap882_fail2315:
    goto rx849_fail2264
  rxcap882_done2314:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt886_02323:
    nqp_rxmark rx849_bstack, alt886_12329, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"::(", rx849_fail2264
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."variable"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    nqp_rxmark rx849_bstack, rxsubrule889_pass2326, -1, 0
  rxsubrule889_pass2326:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:")", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt886_end2322
  alt886_12329:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    nqp_rxmark rx849_bstack, rxsubrule893_pass2331, -1, 0
  rxsubrule893_pass2331:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt886_end2322:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    nqp_rxmark rx849_bstack, rxquantr898_done2337, rx849_pos, 0
  rxquantr898_loop2336:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"(", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."signature"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    nqp_rxmark rx849_bstack, rxsubrule901_pass2340, -1, 0
  rxsubrule901_pass2340:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:")", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    nqp_rxpeek $I19, rx849_bstack, rxquantr898_done2337
    inc $I19
    inc $I19
    set rx849_rep, rx849_bstack[$I19]
    nqp_rxcommit rx849_bstack, rxquantr898_done2337
    inc rx849_rep
  rxquantr898_done2337:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    store_lex unicode:"$\x{a2}", rx849_cur
    unless_null $P101, fallback2344
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2345
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2345:
    unless_null $P5002, vivi_9052346
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9052346:
    set $P101, $P5002
  fallback2344:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    store_lex unicode:"$\x{a2}", rx849_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_405_1356803026.47425' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"{", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    nqp_rxmark rx849_bstack, rxsubrule917_pass2387, -1, 0
  rxsubrule917_pass2387:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2264
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"}", rx849_fail2264
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2264
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt851_end2271
  alt851_end2271:
    nqp_rxcommit rx849_bstack, alt851_end2271
    rx849_cur."!cursor_pass"(rx849_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx849_cur)
  rx849_restart2263:
    repr_get_attr_obj rx849_cstack, rx849_cur, rx849_curclass, "$!cstack"
  rx849_fail2264:
    unless rx849_bstack, rx849_done2262
    pop $I19, rx849_bstack
    if_null rx849_cstack, rx849_cstack_done2267
    unless rx849_cstack, rx849_cstack_done2267
    dec $I19
    set $P11, rx849_cstack[$I19]
  rx849_cstack_done2267:
    pop rx849_rep, rx849_bstack
    pop rx849_pos, rx849_bstack
    pop $I19, rx849_bstack
    lt rx849_pos, -1, rx849_done2262
    lt rx849_pos, 0, rx849_fail2264
    eq $I19, 0, rx849_fail2264
    nqp_islist $I20, rx849_cstack
    unless $I20, rx849_jump2265
    elements $I18, rx849_bstack
    le $I18, 0, rx849_cut2266
    dec $I18
    set $I18, rx849_bstack[$I18]
  rx849_cut2266:
    assign rx849_cstack, $I18
  rx849_jump2265:
    jump $I19
  rx849_done2262:
    rx849_cur."!cursor_fail"()
    .return (rx849_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1356803026.47425") :anon :lex :outer("cuid_137_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1166

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2348
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2349
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2349:
    unless_null $P5002, vivi_9072350
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9072350:
    set $P5001, $P5002
  fallback2348:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2351
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5011
  fallback2351:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2352
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5012
  fallback2352:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2353
    nqp_get_sc_object $P5017, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2354
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2354:
    unless_null $P5015, vivi_9082355
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_9082355:
    set $P5014, $P5015
  fallback2353:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2358
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5024
  fallback2358:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2359
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5025
  fallback2359:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless909_end2357 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2360
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5028
  fallback2360:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2361
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5029
  fallback2361:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless909_end2357:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2362
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2363
    nqp_get_sc_object $P5036, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2363:
    unless_null $P5032, vivi_9102364
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_9102364:
    set $P5031, $P5032
  fallback2362:
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2367
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5041
  fallback2367:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2368
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5042
  fallback2368:
    unless $P5039 goto if911_else2365 
.annotate 'line', 1169
    find_lex $P5044, "$/"
    unless_null $P5044, fallback2369
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5045
  fallback2369:
    set $P5043, $P5044["deflongname"]
    unless_null $P5043, fallback2370
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5043, $P5046
  fallback2370:
    $P5047 = $P5043."ast"()
    set $P5052, $P5047
    goto if911_end2366
  if911_else2365:
    find_lex $P5049, "$/"
    unless_null $P5049, fallback2371
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5049, $P5050
  fallback2371:
    set $P5048, $P5049["latename"]
    unless_null $P5048, fallback2372
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5051
  fallback2372:
    set $S5005, $P5048
    concat $S5004, "!!LATENAME!!", $S5005
    box $P5053, $S5004
    set $P5052, $P5053
  if911_end2366:
    set $P5031["name"], $P5052
    find_dynamic_lex $P5054, "%*RX"
    unless_null $P5054, fallback2373
    nqp_get_sc_object $P5057, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%RX"]
    unless_null $P5055, fallback2374
    nqp_get_sc_object $P5059, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%RX"], $P5060
    set $P5055, $P5060
  fallback2374:
    unless_null $P5055, vivi_9122375
    die "Contextual %*RX not found"
    box $P5061, "Contextual %*RX not found"
    set $P5055, $P5061
  vivi_9122375:
    set $P5054, $P5055
  fallback2373:
.annotate 'line', 1170
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback2376
    nqp_get_sc_object $P5065, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback2377
    nqp_get_sc_object $P5066, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5063, $P5066
  fallback2377:
    unless_null $P5063, vivi_9132378
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_9132378:
    set $P5062, $P5063
  fallback2376:
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback2379
    nqp_get_sc_object $P5071, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback2380
    nqp_get_sc_object $P5072, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5069, $P5072
  fallback2380:
    unless_null $P5069, vivi_9142381
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_9142381:
    set $P5068, $P5069
  fallback2379:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5076, "%*RX"
    unless_null $P5076, fallback2382
    nqp_get_sc_object $P5079, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5078, $P5079
    set $P5077, $P5078["%RX"]
    unless_null $P5077, fallback2383
    nqp_get_sc_object $P5081, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5080, $P5081
    new $P5082, 'Hash'
    set $P5080["%RX"], $P5082
    set $P5077, $P5082
  fallback2383:
    unless_null $P5077, vivi_9152384
    die "Contextual %*RX not found"
    box $P5083, "Contextual %*RX not found"
    set $P5077, $P5083
  vivi_9152384:
    set $P5076, $P5077
  fallback2382:
    set $P5075, $P5076["name"]
    unless_null $P5075, fallback2385
    nqp_get_sc_object $P5084, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5075, $P5084
  fallback2385:
    $P5085 = $P5062."create_code"($P5074, $P5075, 0, "NQPRegex" :named("code_type_name"))
    set $P5054["code"], $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_138_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1176
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx919_tgt
    .local int rx919_pos
    .local int rx919_off
    .local int rx919_eos
    .local int rx919_rep
    .local pmc rx919_cur
    .local pmc rx919_curclass
    .local pmc rx919_bstack
    .local pmc rx919_cstack
    (rx919_cur, rx919_tgt, rx919_pos, rx919_curclass, rx919_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx919_cur
    length rx919_eos, rx919_tgt
    eq $I19, 1, rx919_restart2391
    gt rx919_pos, rx919_eos, rx919_fail2392
    repr_get_attr_int $I11, self, rx919_curclass, "$!from"
    ne $I11, -1, rxscan920_done2398
    goto rxscan920_scan2397
  rxscan920_loop2396:
    inc rx919_pos
    gt rx919_pos, rx919_eos, rx919_fail2392
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!from", rx919_pos
  rxscan920_scan2397:
    nqp_rxmark rx919_bstack, rxscan920_loop2396, rx919_pos, 0
  rxscan920_done2398:
    add $I11, rx919_pos, 1
    gt $I11, rx919_eos, rx919_fail2392
    substr $S10, rx919_tgt, rx919_pos, 1
    ne $S10, ucs4:".", rx919_fail2392
    add rx919_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt921_02400
    nqp_push_label $P11, alt921_12402
    nqp_rxmark rx919_bstack, alt921_end2399, -1, 0
    rx919_cur."!alt"(rx919_pos, "alt_nfa__34_1356803029.31576", $P11)
    goto rx919_fail2392
  alt921_02400:
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2392
    nqp_rxmark rx919_bstack, rxsubrule922_pass2401, -1, 0
  rxsubrule922_pass2401:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    goto alt921_end2399
  alt921_12402:
    ge rx919_pos, rx919_eos, rx919_fail2392
    substr $S11, rx919_tgt, rx919_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx919_fail2392
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."quote"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2392
    nqp_rxmark rx919_bstack, rxsubrule923_pass2403, -1, 0
  rxsubrule923_pass2403:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
  alt924_02405:
    nqp_rxmark rx919_bstack, alt924_12406, rx919_pos, 0
    ge rx919_pos, rx919_eos, rx919_fail2392
    substr $S11, rx919_tgt, rx919_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx919_fail2392
    goto alt924_end2404
  alt924_12406:
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2392
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
  alt924_end2404:
    goto alt921_end2399
  alt921_end2399:
    nqp_rxcommit rx919_bstack, alt921_end2399
    nqp_rxmark rx919_bstack, rxquantr926_done2409, rx919_pos, 0
  rxquantr926_loop2408:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt927_02411
    nqp_push_label $P11, alt927_12413
    nqp_rxmark rx919_bstack, alt927_end2410, -1, 0
    rx919_cur."!alt"(rx919_pos, "alt_nfa__35_1356803029.31598", $P11)
    goto rx919_fail2392
  alt927_02411:
    ge rx919_pos, rx919_eos, rx919_fail2392
    substr $S11, rx919_tgt, rx919_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx919_fail2392
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."args"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2392
    nqp_rxmark rx919_bstack, rxsubrule928_pass2412, -1, 0
  rxsubrule928_pass2412:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    goto alt927_end2410
  alt927_12413:
    add $I11, rx919_pos, 1
    gt $I11, rx919_eos, rx919_fail2392
    substr $S10, rx919_tgt, rx919_pos, 1
    ne $S10, ucs4:":", rx919_fail2392
    add rx919_pos, 1
    ge rx919_pos, rx919_eos, rx919_fail2392
    is_cclass $I11, .CCLASS_WHITESPACE, rx919_tgt, rx919_pos
    unless $I11, rx919_fail2392
    add rx919_pos, 1
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2392
    nqp_rxmark rx919_bstack, rxsubrule929_pass2414, -1, 0
  rxsubrule929_pass2414:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    goto alt927_end2410
  alt927_end2410:
    nqp_rxpeek $I19, rx919_bstack, rxquantr926_done2409
    inc $I19
    inc $I19
    set rx919_rep, rx919_bstack[$I19]
    nqp_rxcommit rx919_bstack, rxquantr926_done2409
    inc rx919_rep
  rxquantr926_done2409:
    rx919_cur."!cursor_pass"(rx919_pos, "dotty", 'backtrack'=>1)
    .return (rx919_cur)
  rx919_restart2391:
    repr_get_attr_obj rx919_cstack, rx919_cur, rx919_curclass, "$!cstack"
  rx919_fail2392:
    unless rx919_bstack, rx919_done2390
    pop $I19, rx919_bstack
    if_null rx919_cstack, rx919_cstack_done2395
    unless rx919_cstack, rx919_cstack_done2395
    dec $I19
    set $P11, rx919_cstack[$I19]
  rx919_cstack_done2395:
    pop rx919_rep, rx919_bstack
    pop rx919_pos, rx919_bstack
    pop $I19, rx919_bstack
    lt rx919_pos, -1, rx919_done2390
    lt rx919_pos, 0, rx919_fail2392
    eq $I19, 0, rx919_fail2392
    nqp_islist $I20, rx919_cstack
    unless $I20, rx919_jump2393
    elements $I18, rx919_bstack
    le $I18, 0, rx919_cut2394
    dec $I18
    set $I18, rx919_bstack[$I18]
  rx919_cut2394:
    assign rx919_cstack, $I18
  rx919_jump2393:
    jump $I19
  rx919_done2390:
    rx919_cur."!cursor_fail"()
    .return (rx919_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_139_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1189
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx930_tgt
    .local int rx930_pos
    .local int rx930_off
    .local int rx930_eos
    .local int rx930_rep
    .local pmc rx930_cur
    .local pmc rx930_curclass
    .local pmc rx930_bstack
    .local pmc rx930_cstack
    (rx930_cur, rx930_tgt, rx930_pos, rx930_curclass, rx930_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx930_cur
    length rx930_eos, rx930_tgt
    eq $I19, 1, rx930_restart2417
    gt rx930_pos, rx930_eos, rx930_fail2418
    repr_get_attr_int $I11, self, rx930_curclass, "$!from"
    ne $I11, -1, rxscan931_done2424
    goto rxscan931_scan2423
  rxscan931_loop2422:
    inc rx930_pos
    gt rx930_pos, rx930_eos, rx930_fail2418
    repr_bind_attr_int rx930_cur, rx930_curclass, "$!from", rx930_pos
  rxscan931_scan2423:
    nqp_rxmark rx930_bstack, rxscan931_loop2422, rx930_pos, 0
  rxscan931_done2424:
    nqp_rxmark rx930_bstack, rxcap932_fail2426, rx930_pos, 0
    add $I11, rx930_pos, 4
    gt $I11, rx930_eos, rx930_fail2418
    substr $S10, rx930_tgt, rx930_pos, 4
    ne $S10, ucs4:"self", rx930_fail2418
    add rx930_pos, 4
    nqp_rxpeek $I19, rx930_bstack, rxcap932_fail2426
    inc $I19
    set $I11, rx930_bstack[$I19]
    repr_bind_attr_int rx930_cur, rx930_curclass, "$!pos", rx930_pos
    $P11 = rx930_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx930_pos)
    rx930_cstack = rx930_cur."!cursor_capture"($P11, "sym")
    goto rxcap932_done2425
  rxcap932_fail2426:
    goto rx930_fail2418
  rxcap932_done2425:
    le rx930_pos, 0, rx930_fail2418
    is_cclass $I11, .CCLASS_WORD, rx930_tgt, rx930_pos
    if $I11, rx930_fail2418
    sub $I11, rx930_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx930_tgt, $I11
    unless $I11, rx930_fail2418
    rx930_cur."!cursor_pass"(rx930_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx930_cur)
  rx930_restart2417:
    repr_get_attr_obj rx930_cstack, rx930_cur, rx930_curclass, "$!cstack"
  rx930_fail2418:
    unless rx930_bstack, rx930_done2416
    pop $I19, rx930_bstack
    if_null rx930_cstack, rx930_cstack_done2421
    unless rx930_cstack, rx930_cstack_done2421
    dec $I19
    set $P11, rx930_cstack[$I19]
  rx930_cstack_done2421:
    pop rx930_rep, rx930_bstack
    pop rx930_pos, rx930_bstack
    pop $I19, rx930_bstack
    lt rx930_pos, -1, rx930_done2416
    lt rx930_pos, 0, rx930_fail2418
    eq $I19, 0, rx930_fail2418
    nqp_islist $I20, rx930_cstack
    unless $I20, rx930_jump2419
    elements $I18, rx930_bstack
    le $I18, 0, rx930_cut2420
    dec $I18
    set $I18, rx930_bstack[$I18]
  rx930_cut2420:
    assign rx930_cstack, $I18
  rx930_jump2419:
    jump $I19
  rx930_done2416:
    rx930_cur."!cursor_fail"()
    .return (rx930_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_140_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1191
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx934_tgt
    .local int rx934_pos
    .local int rx934_off
    .local int rx934_eos
    .local int rx934_rep
    .local pmc rx934_cur
    .local pmc rx934_curclass
    .local pmc rx934_bstack
    .local pmc rx934_cstack
    (rx934_cur, rx934_tgt, rx934_pos, rx934_curclass, rx934_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx934_cur
    length rx934_eos, rx934_tgt
    eq $I19, 1, rx934_restart2430
    gt rx934_pos, rx934_eos, rx934_fail2431
    repr_get_attr_int $I11, self, rx934_curclass, "$!from"
    ne $I11, -1, rxscan935_done2437
    goto rxscan935_scan2436
  rxscan935_loop2435:
    inc rx934_pos
    gt rx934_pos, rx934_eos, rx934_fail2431
    repr_bind_attr_int rx934_cur, rx934_curclass, "$!from", rx934_pos
  rxscan935_scan2436:
    nqp_rxmark rx934_bstack, rxscan935_loop2435, rx934_pos, 0
  rxscan935_done2437:
    repr_bind_attr_int rx934_cur, rx934_curclass, "$!pos", rx934_pos
    $P11 = rx934_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx934_curclass, "$!pos"
    lt $I11, 0, rx934_fail2431
    nqp_rxmark rx934_bstack, rxsubrule936_pass2438, -1, 0
  rxsubrule936_pass2438:
    rx934_cstack = rx934_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx934_pos, $P11, rx934_curclass, "$!pos"
    ge rx934_pos, rx934_eos, rx934_fail2431
    substr $S11, rx934_tgt, rx934_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx934_fail2431
    repr_bind_attr_int rx934_cur, rx934_curclass, "$!pos", rx934_pos
    $P11 = rx934_cur."args"()
    repr_get_attr_int $I11, $P11, rx934_curclass, "$!pos"
    lt $I11, 0, rx934_fail2431
    nqp_rxmark rx934_bstack, rxsubrule937_pass2439, -1, 0
  rxsubrule937_pass2439:
    rx934_cstack = rx934_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx934_pos, $P11, rx934_curclass, "$!pos"
    rx934_cur."!cursor_pass"(rx934_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx934_cur)
  rx934_restart2430:
    repr_get_attr_obj rx934_cstack, rx934_cur, rx934_curclass, "$!cstack"
  rx934_fail2431:
    unless rx934_bstack, rx934_done2429
    pop $I19, rx934_bstack
    if_null rx934_cstack, rx934_cstack_done2434
    unless rx934_cstack, rx934_cstack_done2434
    dec $I19
    set $P11, rx934_cstack[$I19]
  rx934_cstack_done2434:
    pop rx934_rep, rx934_bstack
    pop rx934_pos, rx934_bstack
    pop $I19, rx934_bstack
    lt rx934_pos, -1, rx934_done2429
    lt rx934_pos, 0, rx934_fail2431
    eq $I19, 0, rx934_fail2431
    nqp_islist $I20, rx934_cstack
    unless $I20, rx934_jump2432
    elements $I18, rx934_bstack
    le $I18, 0, rx934_cut2433
    dec $I18
    set $I18, rx934_bstack[$I18]
  rx934_cut2433:
    assign rx934_cstack, $I18
  rx934_jump2432:
    jump $I19
  rx934_done2429:
    rx934_cur."!cursor_fail"()
    .return (rx934_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_141_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1195
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx938_tgt
    .local int rx938_pos
    .local int rx938_off
    .local int rx938_eos
    .local int rx938_rep
    .local pmc rx938_cur
    .local pmc rx938_curclass
    .local pmc rx938_bstack
    .local pmc rx938_cstack
    (rx938_cur, rx938_tgt, rx938_pos, rx938_curclass, rx938_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx938_cur
    length rx938_eos, rx938_tgt
    eq $I19, 1, rx938_restart2442
    gt rx938_pos, rx938_eos, rx938_fail2443
    repr_get_attr_int $I11, self, rx938_curclass, "$!from"
    ne $I11, -1, rxscan939_done2449
    goto rxscan939_scan2448
  rxscan939_loop2447:
    inc rx938_pos
    gt rx938_pos, rx938_eos, rx938_fail2443
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!from", rx938_pos
  rxscan939_scan2448:
    nqp_rxmark rx938_bstack, rxscan939_loop2447, rx938_pos, 0
  rxscan939_done2449:
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."name"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2443
    nqp_rxmark rx938_bstack, rxsubrule940_pass2450, -1, 0
  rxsubrule940_pass2450:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    nqp_rxmark rx938_bstack, rxquantr941_done2452, rx938_pos, 0
  rxquantr941_loop2451:
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."args"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2443
    goto rxsubrule942_pass2453
  rxsubrule942_back2454:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2443
  rxsubrule942_pass2453:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule942_back2454
    push rx938_bstack, $I11
    push rx938_bstack, 0
    push rx938_bstack, rx938_pos
    elements $I11, rx938_cstack
    push rx938_bstack, $I11
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    nqp_rxpeek $I19, rx938_bstack, rxquantr941_done2452
    inc $I19
    inc $I19
    set rx938_rep, rx938_bstack[$I19]
    nqp_rxcommit rx938_bstack, rxquantr941_done2452
    inc rx938_rep
  rxquantr941_done2452:
    rx938_cur."!cursor_pass"(rx938_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx938_cur)
  rx938_restart2442:
    repr_get_attr_obj rx938_cstack, rx938_cur, rx938_curclass, "$!cstack"
  rx938_fail2443:
    unless rx938_bstack, rx938_done2441
    pop $I19, rx938_bstack
    if_null rx938_cstack, rx938_cstack_done2446
    unless rx938_cstack, rx938_cstack_done2446
    dec $I19
    set $P11, rx938_cstack[$I19]
  rx938_cstack_done2446:
    pop rx938_rep, rx938_bstack
    pop rx938_pos, rx938_bstack
    pop $I19, rx938_bstack
    lt rx938_pos, -1, rx938_done2441
    lt rx938_pos, 0, rx938_fail2443
    eq $I19, 0, rx938_fail2443
    nqp_islist $I20, rx938_cstack
    unless $I20, rx938_jump2444
    elements $I18, rx938_bstack
    le $I18, 0, rx938_cut2445
    dec $I18
    set $I18, rx938_bstack[$I18]
  rx938_cut2445:
    assign rx938_cstack, $I18
  rx938_jump2444:
    jump $I19
  rx938_done2441:
    rx938_cur."!cursor_fail"()
    .return (rx938_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_142_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx943_tgt
    .local int rx943_pos
    .local int rx943_off
    .local int rx943_eos
    .local int rx943_rep
    .local pmc rx943_cur
    .local pmc rx943_curclass
    .local pmc rx943_bstack
    .local pmc rx943_cstack
    (rx943_cur, rx943_tgt, rx943_pos, rx943_curclass, rx943_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx943_cur
    length rx943_eos, rx943_tgt
    eq $I19, 1, rx943_restart2457
    gt rx943_pos, rx943_eos, rx943_fail2458
    repr_get_attr_int $I11, self, rx943_curclass, "$!from"
    ne $I11, -1, rxscan944_done2464
    goto rxscan944_scan2463
  rxscan944_loop2462:
    inc rx943_pos
    gt rx943_pos, rx943_eos, rx943_fail2458
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!from", rx943_pos
  rxscan944_scan2463:
    nqp_rxmark rx943_bstack, rxscan944_loop2462, rx943_pos, 0
  rxscan944_done2464:
    add $I11, rx943_pos, 5
    gt $I11, rx943_eos, rx943_fail2458
    substr $S10, rx943_tgt, rx943_pos, 5
    ne $S10, ucs4:"pir::", rx943_fail2458
    add rx943_pos, 5
    nqp_rxmark rx943_bstack, rxcap945_fail2466, rx943_pos, 0
    nqp_rxmark rx943_bstack, rxquantr946_done2468, -1, 0
  rxquantr946_loop2467:
    ge rx943_pos, rx943_eos, rx943_fail2458
    is_cclass $I11, .CCLASS_WORD, rx943_tgt, rx943_pos
    unless $I11, rx943_fail2458
    add rx943_pos, 1
    nqp_rxpeek $I19, rx943_bstack, rxquantr946_done2468
    inc $I19
    inc $I19
    set rx943_rep, rx943_bstack[$I19]
    nqp_rxcommit rx943_bstack, rxquantr946_done2468
    inc rx943_rep
    nqp_rxmark rx943_bstack, rxquantr946_done2468, rx943_pos, rx943_rep
    goto rxquantr946_loop2467
  rxquantr946_done2468:
    nqp_rxpeek $I19, rx943_bstack, rxcap945_fail2466
    inc $I19
    set $I11, rx943_bstack[$I19]
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!pos", rx943_pos
    $P11 = rx943_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx943_pos)
    rx943_cstack = rx943_cur."!cursor_capture"($P11, "op")
    goto rxcap945_done2465
  rxcap945_fail2466:
    goto rx943_fail2458
  rxcap945_done2465:
    nqp_rxmark rx943_bstack, rxquantr947_done2470, rx943_pos, 0
  rxquantr947_loop2469:
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!pos", rx943_pos
    $P11 = rx943_cur."args"()
    repr_get_attr_int $I11, $P11, rx943_curclass, "$!pos"
    lt $I11, 0, rx943_fail2458
    goto rxsubrule948_pass2471
  rxsubrule948_back2472:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx943_curclass, "$!pos"
    lt $I11, 0, rx943_fail2458
  rxsubrule948_pass2471:
    rx943_cstack = rx943_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule948_back2472
    push rx943_bstack, $I11
    push rx943_bstack, 0
    push rx943_bstack, rx943_pos
    elements $I11, rx943_cstack
    push rx943_bstack, $I11
    repr_get_attr_int rx943_pos, $P11, rx943_curclass, "$!pos"
    nqp_rxpeek $I19, rx943_bstack, rxquantr947_done2470
    inc $I19
    inc $I19
    set rx943_rep, rx943_bstack[$I19]
    nqp_rxcommit rx943_bstack, rxquantr947_done2470
    inc rx943_rep
  rxquantr947_done2470:
    rx943_cur."!cursor_pass"(rx943_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx943_cur)
  rx943_restart2457:
    repr_get_attr_obj rx943_cstack, rx943_cur, rx943_curclass, "$!cstack"
  rx943_fail2458:
    unless rx943_bstack, rx943_done2456
    pop $I19, rx943_bstack
    if_null rx943_cstack, rx943_cstack_done2461
    unless rx943_cstack, rx943_cstack_done2461
    dec $I19
    set $P11, rx943_cstack[$I19]
  rx943_cstack_done2461:
    pop rx943_rep, rx943_bstack
    pop rx943_pos, rx943_bstack
    pop $I19, rx943_bstack
    lt rx943_pos, -1, rx943_done2456
    lt rx943_pos, 0, rx943_fail2458
    eq $I19, 0, rx943_fail2458
    nqp_islist $I20, rx943_cstack
    unless $I20, rx943_jump2459
    elements $I18, rx943_bstack
    le $I18, 0, rx943_cut2460
    dec $I18
    set $I18, rx943_bstack[$I18]
  rx943_cut2460:
    assign rx943_cstack, $I18
  rx943_jump2459:
    jump $I19
  rx943_done2456:
    rx943_cur."!cursor_fail"()
    .return (rx943_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_143_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1203
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx949_tgt
    .local int rx949_pos
    .local int rx949_off
    .local int rx949_eos
    .local int rx949_rep
    .local pmc rx949_cur
    .local pmc rx949_curclass
    .local pmc rx949_bstack
    .local pmc rx949_cstack
    (rx949_cur, rx949_tgt, rx949_pos, rx949_curclass, rx949_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx949_cur
    length rx949_eos, rx949_tgt
    eq $I19, 1, rx949_restart2475
    gt rx949_pos, rx949_eos, rx949_fail2476
    repr_get_attr_int $I11, self, rx949_curclass, "$!from"
    ne $I11, -1, rxscan950_done2482
    goto rxscan950_scan2481
  rxscan950_loop2480:
    inc rx949_pos
    gt rx949_pos, rx949_eos, rx949_fail2476
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!from", rx949_pos
  rxscan950_scan2481:
    nqp_rxmark rx949_bstack, rxscan950_loop2480, rx949_pos, 0
  rxscan950_done2482:
    add $I11, rx949_pos, 12
    gt $I11, rx949_eos, rx949_fail2476
    substr $S10, rx949_tgt, rx949_pos, 12
    ne $S10, ucs4:"pir::const::", rx949_fail2476
    add rx949_pos, 12
    nqp_rxmark rx949_bstack, rxcap951_fail2484, rx949_pos, 0
    nqp_rxmark rx949_bstack, rxquantr952_done2486, -1, 0
  rxquantr952_loop2485:
    ge rx949_pos, rx949_eos, rx949_fail2476
    is_cclass $I11, .CCLASS_WORD, rx949_tgt, rx949_pos
    unless $I11, rx949_fail2476
    add rx949_pos, 1
    nqp_rxpeek $I19, rx949_bstack, rxquantr952_done2486
    inc $I19
    inc $I19
    set rx949_rep, rx949_bstack[$I19]
    nqp_rxcommit rx949_bstack, rxquantr952_done2486
    inc rx949_rep
    nqp_rxmark rx949_bstack, rxquantr952_done2486, rx949_pos, rx949_rep
    goto rxquantr952_loop2485
  rxquantr952_done2486:
    nqp_rxpeek $I19, rx949_bstack, rxcap951_fail2484
    inc $I19
    set $I11, rx949_bstack[$I19]
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!pos", rx949_pos
    $P11 = rx949_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx949_pos)
    rx949_cstack = rx949_cur."!cursor_capture"($P11, "const")
    goto rxcap951_done2483
  rxcap951_fail2484:
    goto rx949_fail2476
  rxcap951_done2483:
    rx949_cur."!cursor_pass"(rx949_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx949_cur)
  rx949_restart2475:
    repr_get_attr_obj rx949_cstack, rx949_cur, rx949_curclass, "$!cstack"
  rx949_fail2476:
    unless rx949_bstack, rx949_done2474
    pop $I19, rx949_bstack
    if_null rx949_cstack, rx949_cstack_done2479
    unless rx949_cstack, rx949_cstack_done2479
    dec $I19
    set $P11, rx949_cstack[$I19]
  rx949_cstack_done2479:
    pop rx949_rep, rx949_bstack
    pop rx949_pos, rx949_bstack
    pop $I19, rx949_bstack
    lt rx949_pos, -1, rx949_done2474
    lt rx949_pos, 0, rx949_fail2476
    eq $I19, 0, rx949_fail2476
    nqp_islist $I20, rx949_cstack
    unless $I20, rx949_jump2477
    elements $I18, rx949_bstack
    le $I18, 0, rx949_cut2478
    dec $I18
    set $I18, rx949_bstack[$I18]
  rx949_cut2478:
    assign rx949_cstack, $I18
  rx949_jump2477:
    jump $I19
  rx949_done2474:
    rx949_cur."!cursor_fail"()
    .return (rx949_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_144_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1207
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx953_tgt
    .local int rx953_pos
    .local int rx953_off
    .local int rx953_eos
    .local int rx953_rep
    .local pmc rx953_cur
    .local pmc rx953_curclass
    .local pmc rx953_bstack
    .local pmc rx953_cstack
    (rx953_cur, rx953_tgt, rx953_pos, rx953_curclass, rx953_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx953_cur
    length rx953_eos, rx953_tgt
    eq $I19, 1, rx953_restart2489
    gt rx953_pos, rx953_eos, rx953_fail2490
    repr_get_attr_int $I11, self, rx953_curclass, "$!from"
    ne $I11, -1, rxscan954_done2496
    goto rxscan954_scan2495
  rxscan954_loop2494:
    inc rx953_pos
    gt rx953_pos, rx953_eos, rx953_fail2490
    repr_bind_attr_int rx953_cur, rx953_curclass, "$!from", rx953_pos
  rxscan954_scan2495:
    nqp_rxmark rx953_bstack, rxscan954_loop2494, rx953_pos, 0
  rxscan954_done2496:
    add $I11, rx953_pos, 5
    gt $I11, rx953_eos, rx953_fail2490
    substr $S10, rx953_tgt, rx953_pos, 5
    ne $S10, ucs4:"nqp::", rx953_fail2490
    add rx953_pos, 5
    nqp_rxmark rx953_bstack, rxcap955_fail2498, rx953_pos, 0
    nqp_rxmark rx953_bstack, rxquantr956_done2500, -1, 0
  rxquantr956_loop2499:
    ge rx953_pos, rx953_eos, rx953_fail2490
    is_cclass $I11, .CCLASS_WORD, rx953_tgt, rx953_pos
    unless $I11, rx953_fail2490
    add rx953_pos, 1
    nqp_rxpeek $I19, rx953_bstack, rxquantr956_done2500
    inc $I19
    inc $I19
    set rx953_rep, rx953_bstack[$I19]
    nqp_rxcommit rx953_bstack, rxquantr956_done2500
    inc rx953_rep
    nqp_rxmark rx953_bstack, rxquantr956_done2500, rx953_pos, rx953_rep
    goto rxquantr956_loop2499
  rxquantr956_done2500:
    nqp_rxpeek $I19, rx953_bstack, rxcap955_fail2498
    inc $I19
    set $I11, rx953_bstack[$I19]
    repr_bind_attr_int rx953_cur, rx953_curclass, "$!pos", rx953_pos
    $P11 = rx953_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx953_pos)
    rx953_cstack = rx953_cur."!cursor_capture"($P11, "op")
    goto rxcap955_done2497
  rxcap955_fail2498:
    goto rx953_fail2490
  rxcap955_done2497:
    nqp_rxmark rx953_bstack, rxquantr957_done2502, rx953_pos, 0
  rxquantr957_loop2501:
    repr_bind_attr_int rx953_cur, rx953_curclass, "$!pos", rx953_pos
    $P11 = rx953_cur."args"()
    repr_get_attr_int $I11, $P11, rx953_curclass, "$!pos"
    lt $I11, 0, rx953_fail2490
    goto rxsubrule958_pass2503
  rxsubrule958_back2504:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx953_curclass, "$!pos"
    lt $I11, 0, rx953_fail2490
  rxsubrule958_pass2503:
    rx953_cstack = rx953_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule958_back2504
    push rx953_bstack, $I11
    push rx953_bstack, 0
    push rx953_bstack, rx953_pos
    elements $I11, rx953_cstack
    push rx953_bstack, $I11
    repr_get_attr_int rx953_pos, $P11, rx953_curclass, "$!pos"
    nqp_rxpeek $I19, rx953_bstack, rxquantr957_done2502
    inc $I19
    inc $I19
    set rx953_rep, rx953_bstack[$I19]
    nqp_rxcommit rx953_bstack, rxquantr957_done2502
    inc rx953_rep
  rxquantr957_done2502:
    rx953_cur."!cursor_pass"(rx953_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx953_cur)
  rx953_restart2489:
    repr_get_attr_obj rx953_cstack, rx953_cur, rx953_curclass, "$!cstack"
  rx953_fail2490:
    unless rx953_bstack, rx953_done2488
    pop $I19, rx953_bstack
    if_null rx953_cstack, rx953_cstack_done2493
    unless rx953_cstack, rx953_cstack_done2493
    dec $I19
    set $P11, rx953_cstack[$I19]
  rx953_cstack_done2493:
    pop rx953_rep, rx953_bstack
    pop rx953_pos, rx953_bstack
    pop $I19, rx953_bstack
    lt rx953_pos, -1, rx953_done2488
    lt rx953_pos, 0, rx953_fail2490
    eq $I19, 0, rx953_fail2490
    nqp_islist $I20, rx953_cstack
    unless $I20, rx953_jump2491
    elements $I18, rx953_bstack
    le $I18, 0, rx953_cut2492
    dec $I18
    set $I18, rx953_bstack[$I18]
  rx953_cut2492:
    assign rx953_cstack, $I18
  rx953_jump2491:
    jump $I19
  rx953_done2488:
    rx953_cur."!cursor_fail"()
    .return (rx953_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_145_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1211
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_406_1356803026.47425' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx959_tgt
    .local int rx959_pos
    .local int rx959_off
    .local int rx959_eos
    .local int rx959_rep
    .local pmc rx959_cur
    .local pmc rx959_curclass
    .local pmc rx959_bstack
    .local pmc rx959_cstack
    (rx959_cur, rx959_tgt, rx959_pos, rx959_curclass, rx959_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx959_cur
    length rx959_eos, rx959_tgt
    eq $I19, 1, rx959_restart2507
    gt rx959_pos, rx959_eos, rx959_fail2508
    repr_get_attr_int $I11, self, rx959_curclass, "$!from"
    ne $I11, -1, rxscan960_done2514
    goto rxscan960_scan2513
  rxscan960_loop2512:
    inc rx959_pos
    gt rx959_pos, rx959_eos, rx959_fail2508
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!from", rx959_pos
  rxscan960_scan2513:
    nqp_rxmark rx959_bstack, rxscan960_loop2512, rx959_pos, 0
  rxscan960_done2514:
    add $I11, rx959_pos, 3
    gt $I11, rx959_eos, rx959_fail2508
    substr $S10, rx959_tgt, rx959_pos, 3
    ne $S10, ucs4:"{*}", rx959_fail2508
    add rx959_pos, 3
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2508
  alt961_02516:
    nqp_rxmark rx959_bstack, alt961_12520, rx959_pos, 0
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    store_lex unicode:"$\x{a2}", rx959_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_406_1356803026.47425' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx959_fail2508
    goto alt961_end2515
  alt961_12520:
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2508
    repr_get_attr_int rx959_pos, $P11, rx959_curclass, "$!pos"
  alt961_end2515:
    rx959_cur."!cursor_pass"(rx959_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx959_cur)
  rx959_restart2507:
    repr_get_attr_obj rx959_cstack, rx959_cur, rx959_curclass, "$!cstack"
  rx959_fail2508:
    unless rx959_bstack, rx959_done2506
    pop $I19, rx959_bstack
    if_null rx959_cstack, rx959_cstack_done2511
    unless rx959_cstack, rx959_cstack_done2511
    dec $I19
    set $P11, rx959_cstack[$I19]
  rx959_cstack_done2511:
    pop rx959_rep, rx959_bstack
    pop rx959_pos, rx959_bstack
    pop $I19, rx959_bstack
    lt rx959_pos, -1, rx959_done2506
    lt rx959_pos, 0, rx959_fail2508
    eq $I19, 0, rx959_fail2508
    nqp_islist $I20, rx959_cstack
    unless $I20, rx959_jump2509
    elements $I18, rx959_bstack
    le $I18, 0, rx959_cut2510
    dec $I18
    set $I18, rx959_bstack[$I18]
  rx959_cut2510:
    assign rx959_cstack, $I18
  rx959_jump2509:
    jump $I19
  rx959_done2506:
    rx959_cur."!cursor_fail"()
    .return (rx959_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1356803026.47425") :anon :lex :outer("cuid_145_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1213

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2517
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2518
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback2518:
    unless_null $P5002, vivi_9622519
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_9622519:
    set $P5001, $P5002
  fallback2517:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_146_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1216
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx964_tgt
    .local int rx964_pos
    .local int rx964_off
    .local int rx964_eos
    .local int rx964_rep
    .local pmc rx964_cur
    .local pmc rx964_curclass
    .local pmc rx964_bstack
    .local pmc rx964_cstack
    (rx964_cur, rx964_tgt, rx964_pos, rx964_curclass, rx964_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx964_cur
    length rx964_eos, rx964_tgt
    eq $I19, 1, rx964_restart2524
    gt rx964_pos, rx964_eos, rx964_fail2525
    repr_get_attr_int $I11, self, rx964_curclass, "$!from"
    ne $I11, -1, rxscan965_done2531
    goto rxscan965_scan2530
  rxscan965_loop2529:
    inc rx964_pos
    gt rx964_pos, rx964_eos, rx964_fail2525
    repr_bind_attr_int rx964_cur, rx964_curclass, "$!from", rx964_pos
  rxscan965_scan2530:
    nqp_rxmark rx964_bstack, rxscan965_loop2529, rx964_pos, 0
  rxscan965_done2531:
    add $I11, rx964_pos, 1
    gt $I11, rx964_eos, rx964_fail2525
    substr $S10, rx964_tgt, rx964_pos, 1
    ne $S10, ucs4:"(", rx964_fail2525
    add rx964_pos, 1
    repr_bind_attr_int rx964_cur, rx964_curclass, "$!pos", rx964_pos
    $P11 = rx964_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx964_curclass, "$!pos"
    lt $I11, 0, rx964_fail2525
    nqp_rxmark rx964_bstack, rxsubrule966_pass2532, -1, 0
  rxsubrule966_pass2532:
    rx964_cstack = rx964_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx964_pos, $P11, rx964_curclass, "$!pos"
    add $I11, rx964_pos, 1
    gt $I11, rx964_eos, rx964_fail2525
    substr $S10, rx964_tgt, rx964_pos, 1
    ne $S10, ucs4:")", rx964_fail2525
    add rx964_pos, 1
    rx964_cur."!cursor_pass"(rx964_pos, "args", 'backtrack'=>1)
    .return (rx964_cur)
  rx964_restart2524:
    repr_get_attr_obj rx964_cstack, rx964_cur, rx964_curclass, "$!cstack"
  rx964_fail2525:
    unless rx964_bstack, rx964_done2523
    pop $I19, rx964_bstack
    if_null rx964_cstack, rx964_cstack_done2528
    unless rx964_cstack, rx964_cstack_done2528
    dec $I19
    set $P11, rx964_cstack[$I19]
  rx964_cstack_done2528:
    pop rx964_rep, rx964_bstack
    pop rx964_pos, rx964_bstack
    pop $I19, rx964_bstack
    lt rx964_pos, -1, rx964_done2523
    lt rx964_pos, 0, rx964_fail2525
    eq $I19, 0, rx964_fail2525
    nqp_islist $I20, rx964_cstack
    unless $I20, rx964_jump2526
    elements $I18, rx964_bstack
    le $I18, 0, rx964_cut2527
    dec $I18
    set $I18, rx964_bstack[$I18]
  rx964_cut2527:
    assign rx964_cstack, $I18
  rx964_jump2526:
    jump $I19
  rx964_done2523:
    rx964_cur."!cursor_fail"()
    .return (rx964_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_147_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1220
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx967_tgt
    .local int rx967_pos
    .local int rx967_off
    .local int rx967_eos
    .local int rx967_rep
    .local pmc rx967_cur
    .local pmc rx967_curclass
    .local pmc rx967_bstack
    .local pmc rx967_cstack
    (rx967_cur, rx967_tgt, rx967_pos, rx967_curclass, rx967_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx967_cur
    length rx967_eos, rx967_tgt
    eq $I19, 1, rx967_restart2535
    gt rx967_pos, rx967_eos, rx967_fail2536
    repr_get_attr_int $I11, self, rx967_curclass, "$!from"
    ne $I11, -1, rxscan968_done2542
    goto rxscan968_scan2541
  rxscan968_loop2540:
    inc rx967_pos
    gt rx967_pos, rx967_eos, rx967_fail2536
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!from", rx967_pos
  rxscan968_scan2541:
    nqp_rxmark rx967_bstack, rxscan968_loop2540, rx967_pos, 0
  rxscan968_done2542:
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!pos", rx967_pos
    $P11 = rx967_cur."ws"()
    repr_get_attr_int $I11, $P11, rx967_curclass, "$!pos"
    lt $I11, 0, rx967_fail2536
    repr_get_attr_int rx967_pos, $P11, rx967_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt970_02545
    nqp_push_label $P11, alt970_12547
    nqp_rxmark rx967_bstack, alt970_end2544, -1, 0
    rx967_cur."!alt"(rx967_pos, "alt_nfa__36_1356803029.51455", $P11)
    goto rx967_fail2536
  alt970_02545:
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!pos", rx967_pos
    $P11 = rx967_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx967_curclass, "$!pos"
    lt $I11, 0, rx967_fail2536
    nqp_rxmark rx967_bstack, rxsubrule971_pass2546, -1, 0
  rxsubrule971_pass2546:
    rx967_cstack = rx967_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx967_pos, $P11, rx967_curclass, "$!pos"
    goto alt970_end2544
  alt970_12547:
    goto alt970_end2544
  alt970_end2544:
    nqp_rxcommit rx967_bstack, alt970_end2544
    rx967_cur."!cursor_pass"(rx967_pos, "arglist", 'backtrack'=>1)
    .return (rx967_cur)
  rx967_restart2535:
    repr_get_attr_obj rx967_cstack, rx967_cur, rx967_curclass, "$!cstack"
  rx967_fail2536:
    unless rx967_bstack, rx967_done2534
    pop $I19, rx967_bstack
    if_null rx967_cstack, rx967_cstack_done2539
    unless rx967_cstack, rx967_cstack_done2539
    dec $I19
    set $P11, rx967_cstack[$I19]
  rx967_cstack_done2539:
    pop rx967_rep, rx967_bstack
    pop rx967_pos, rx967_bstack
    pop $I19, rx967_bstack
    lt rx967_pos, -1, rx967_done2534
    lt rx967_pos, 0, rx967_fail2536
    eq $I19, 0, rx967_fail2536
    nqp_islist $I20, rx967_cstack
    unless $I20, rx967_jump2537
    elements $I18, rx967_bstack
    le $I18, 0, rx967_cut2538
    dec $I18
    set $I18, rx967_bstack[$I18]
  rx967_cut2538:
    assign rx967_cstack, $I18
  rx967_jump2537:
    jump $I19
  rx967_done2534:
    rx967_cur."!cursor_fail"()
    .return (rx967_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_148_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1229
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx973_tgt
    .local int rx973_pos
    .local int rx973_off
    .local int rx973_eos
    .local int rx973_rep
    .local pmc rx973_cur
    .local pmc rx973_curclass
    .local pmc rx973_bstack
    .local pmc rx973_cstack
    (rx973_cur, rx973_tgt, rx973_pos, rx973_curclass, rx973_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx973_cur
    length rx973_eos, rx973_tgt
    eq $I19, 1, rx973_restart2551
    gt rx973_pos, rx973_eos, rx973_fail2552
    repr_get_attr_int $I11, self, rx973_curclass, "$!from"
    ne $I11, -1, rxscan974_done2558
    goto rxscan974_scan2557
  rxscan974_loop2556:
    inc rx973_pos
    gt rx973_pos, rx973_eos, rx973_fail2552
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!from", rx973_pos
  rxscan974_scan2557:
    nqp_rxmark rx973_bstack, rxscan974_loop2556, rx973_pos, 0
  rxscan974_done2558:
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!pos", rx973_pos
    $P11 = rx973_cur."value"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2552
    nqp_rxmark rx973_bstack, rxsubrule975_pass2559, -1, 0
  rxsubrule975_pass2559:
    rx973_cstack = rx973_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx973_pos, $P11, rx973_curclass, "$!pos"
    rx973_cur."!cursor_pass"(rx973_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx973_cur)
  rx973_restart2551:
    repr_get_attr_obj rx973_cstack, rx973_cur, rx973_curclass, "$!cstack"
  rx973_fail2552:
    unless rx973_bstack, rx973_done2550
    pop $I19, rx973_bstack
    if_null rx973_cstack, rx973_cstack_done2555
    unless rx973_cstack, rx973_cstack_done2555
    dec $I19
    set $P11, rx973_cstack[$I19]
  rx973_cstack_done2555:
    pop rx973_rep, rx973_bstack
    pop rx973_pos, rx973_bstack
    pop $I19, rx973_bstack
    lt rx973_pos, -1, rx973_done2550
    lt rx973_pos, 0, rx973_fail2552
    eq $I19, 0, rx973_fail2552
    nqp_islist $I20, rx973_cstack
    unless $I20, rx973_jump2553
    elements $I18, rx973_bstack
    le $I18, 0, rx973_cut2554
    dec $I18
    set $I18, rx973_bstack[$I18]
  rx973_cut2554:
    assign rx973_cstack, $I18
  rx973_jump2553:
    jump $I19
  rx973_done2550:
    rx973_cur."!cursor_fail"()
    .return (rx973_cur) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_149_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1231
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx976_tgt
    .local int rx976_pos
    .local int rx976_off
    .local int rx976_eos
    .local int rx976_rep
    .local pmc rx976_cur
    .local pmc rx976_curclass
    .local pmc rx976_bstack
    .local pmc rx976_cstack
    (rx976_cur, rx976_tgt, rx976_pos, rx976_curclass, rx976_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx976_cur
    length rx976_eos, rx976_tgt
    eq $I19, 1, rx976_restart2562
    gt rx976_pos, rx976_eos, rx976_fail2563
    repr_get_attr_int $I11, self, rx976_curclass, "$!from"
    ne $I11, -1, rxscan977_done2569
    goto rxscan977_scan2568
  rxscan977_loop2567:
    inc rx976_pos
    gt rx976_pos, rx976_eos, rx976_fail2563
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!from", rx976_pos
  rxscan977_scan2568:
    nqp_rxmark rx976_bstack, rxscan977_loop2567, rx976_pos, 0
  rxscan977_done2569:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt978_02571
    nqp_push_label $P11, alt978_12573
    nqp_rxmark rx976_bstack, alt978_end2570, -1, 0
    rx976_cur."!alt"(rx976_pos, "alt_nfa__37_1356803029.52511", $P11)
    goto rx976_fail2563
  alt978_02571:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."quote"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail2563
    nqp_rxmark rx976_bstack, rxsubrule979_pass2572, -1, 0
  rxsubrule979_pass2572:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    goto alt978_end2570
  alt978_12573:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."number"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail2563
    nqp_rxmark rx976_bstack, rxsubrule980_pass2574, -1, 0
  rxsubrule980_pass2574:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    goto alt978_end2570
  alt978_end2570:
    rx976_cur."!cursor_pass"(rx976_pos, "value", 'backtrack'=>1)
    .return (rx976_cur)
  rx976_restart2562:
    repr_get_attr_obj rx976_cstack, rx976_cur, rx976_curclass, "$!cstack"
  rx976_fail2563:
    unless rx976_bstack, rx976_done2561
    pop $I19, rx976_bstack
    if_null rx976_cstack, rx976_cstack_done2566
    unless rx976_cstack, rx976_cstack_done2566
    dec $I19
    set $P11, rx976_cstack[$I19]
  rx976_cstack_done2566:
    pop rx976_rep, rx976_bstack
    pop rx976_pos, rx976_bstack
    pop $I19, rx976_bstack
    lt rx976_pos, -1, rx976_done2561
    lt rx976_pos, 0, rx976_fail2563
    eq $I19, 0, rx976_fail2563
    nqp_islist $I20, rx976_cstack
    unless $I20, rx976_jump2564
    elements $I18, rx976_bstack
    le $I18, 0, rx976_cut2565
    dec $I18
    set $I18, rx976_bstack[$I18]
  rx976_cut2565:
    assign rx976_cstack, $I18
  rx976_jump2564:
    jump $I19
  rx976_done2561:
    rx976_cur."!cursor_fail"()
    .return (rx976_cur) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_150_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1236
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx981_tgt
    .local int rx981_pos
    .local int rx981_off
    .local int rx981_eos
    .local int rx981_rep
    .local pmc rx981_cur
    .local pmc rx981_curclass
    .local pmc rx981_bstack
    .local pmc rx981_cstack
    (rx981_cur, rx981_tgt, rx981_pos, rx981_curclass, rx981_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx981_cur
    length rx981_eos, rx981_tgt
    eq $I19, 1, rx981_restart2577
    gt rx981_pos, rx981_eos, rx981_fail2578
    repr_get_attr_int $I11, self, rx981_curclass, "$!from"
    ne $I11, -1, rxscan982_done2584
    goto rxscan982_scan2583
  rxscan982_loop2582:
    inc rx981_pos
    gt rx981_pos, rx981_eos, rx981_fail2578
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!from", rx981_pos
  rxscan982_scan2583:
    nqp_rxmark rx981_bstack, rxscan982_loop2582, rx981_pos, 0
  rxscan982_done2584:
    nqp_rxmark rx981_bstack, rxcap983_fail2586, rx981_pos, 0
    nqp_rxmark rx981_bstack, rxquantr984_done2588, rx981_pos, 0
  rxquantr984_loop2587:
  alt985_02590:
    nqp_rxmark rx981_bstack, alt985_12591, rx981_pos, 0
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail2578
    substr $S10, rx981_tgt, rx981_pos, 1
    ne $S10, ucs4:"-", rx981_fail2578
    add rx981_pos, 1
    goto alt985_end2589
  alt985_12591:
    ge rx981_pos, rx981_eos, rx981_fail2578
    substr $S11, rx981_tgt, rx981_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx981_fail2578
    inc rx981_pos
  alt985_end2589:
    nqp_rxpeek $I19, rx981_bstack, rxquantr984_done2588
    inc $I19
    inc $I19
    set rx981_rep, rx981_bstack[$I19]
    nqp_rxcommit rx981_bstack, rxquantr984_done2588
    inc rx981_rep
  rxquantr984_done2588:
    nqp_rxpeek $I19, rx981_bstack, rxcap983_fail2586
    inc $I19
    set $I11, rx981_bstack[$I19]
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx981_pos)
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "sign")
    goto rxcap983_done2585
  rxcap983_fail2586:
    goto rx981_fail2578
  rxcap983_done2585:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt986_02593
    nqp_push_label $P11, alt986_12595
    nqp_rxmark rx981_bstack, alt986_end2592, -1, 0
    rx981_cur."!alt"(rx981_pos, "alt_nfa__38_1356803029.53519", $P11)
    goto rx981_fail2578
  alt986_02593:
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2578
    nqp_rxmark rx981_bstack, rxsubrule987_pass2594, -1, 0
  rxsubrule987_pass2594:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    goto alt986_end2592
  alt986_12595:
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."integer"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2578
    nqp_rxmark rx981_bstack, rxsubrule988_pass2596, -1, 0
  rxsubrule988_pass2596:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    goto alt986_end2592
  alt986_end2592:
    nqp_rxcommit rx981_bstack, alt986_end2592
    rx981_cur."!cursor_pass"(rx981_pos, "number", 'backtrack'=>1)
    .return (rx981_cur)
  rx981_restart2577:
    repr_get_attr_obj rx981_cstack, rx981_cur, rx981_curclass, "$!cstack"
  rx981_fail2578:
    unless rx981_bstack, rx981_done2576
    pop $I19, rx981_bstack
    if_null rx981_cstack, rx981_cstack_done2581
    unless rx981_cstack, rx981_cstack_done2581
    dec $I19
    set $P11, rx981_cstack[$I19]
  rx981_cstack_done2581:
    pop rx981_rep, rx981_bstack
    pop rx981_pos, rx981_bstack
    pop $I19, rx981_bstack
    lt rx981_pos, -1, rx981_done2576
    lt rx981_pos, 0, rx981_fail2578
    eq $I19, 0, rx981_fail2578
    nqp_islist $I20, rx981_cstack
    unless $I20, rx981_jump2579
    elements $I18, rx981_bstack
    le $I18, 0, rx981_cut2580
    dec $I18
    set $I18, rx981_bstack[$I18]
  rx981_cut2580:
    assign rx981_cstack, $I18
  rx981_jump2579:
    jump $I19
  rx981_done2576:
    rx981_cur."!cursor_fail"()
    .return (rx981_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_151_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1241
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_152_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx989_tgt
    .local int rx989_pos
    .local int rx989_off
    .local int rx989_eos
    .local int rx989_rep
    .local pmc rx989_cur
    .local pmc rx989_curclass
    .local pmc rx989_bstack
    .local pmc rx989_cstack
    (rx989_cur, rx989_tgt, rx989_pos, rx989_curclass, rx989_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx989_cur
    length rx989_eos, rx989_tgt
    eq $I19, 1, rx989_restart2599
    gt rx989_pos, rx989_eos, rx989_fail2600
    repr_get_attr_int $I11, self, rx989_curclass, "$!from"
    ne $I11, -1, rxscan990_done2606
    goto rxscan990_scan2605
  rxscan990_loop2604:
    inc rx989_pos
    gt rx989_pos, rx989_eos, rx989_fail2600
    repr_bind_attr_int rx989_cur, rx989_curclass, "$!from", rx989_pos
  rxscan990_scan2605:
    nqp_rxmark rx989_bstack, rxscan990_loop2604, rx989_pos, 0
  rxscan990_done2606:
    ge rx989_pos, rx989_eos, rx989_fail2600
    substr $S11, rx989_tgt, rx989_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx989_fail2600
    repr_bind_attr_int rx989_cur, rx989_curclass, "$!pos", rx989_pos
    $P11 = rx989_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx989_curclass, "$!pos"
    lt $I11, 0, rx989_fail2600
    nqp_rxmark rx989_bstack, rxsubrule991_pass2607, -1, 0
  rxsubrule991_pass2607:
    rx989_cstack = rx989_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx989_pos, $P11, rx989_curclass, "$!pos"
    rx989_cur."!cursor_pass"(rx989_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx989_cur)
  rx989_restart2599:
    repr_get_attr_obj rx989_cstack, rx989_cur, rx989_curclass, "$!cstack"
  rx989_fail2600:
    unless rx989_bstack, rx989_done2598
    pop $I19, rx989_bstack
    if_null rx989_cstack, rx989_cstack_done2603
    unless rx989_cstack, rx989_cstack_done2603
    dec $I19
    set $P11, rx989_cstack[$I19]
  rx989_cstack_done2603:
    pop rx989_rep, rx989_bstack
    pop rx989_pos, rx989_bstack
    pop $I19, rx989_bstack
    lt rx989_pos, -1, rx989_done2598
    lt rx989_pos, 0, rx989_fail2600
    eq $I19, 0, rx989_fail2600
    nqp_islist $I20, rx989_cstack
    unless $I20, rx989_jump2601
    elements $I18, rx989_bstack
    le $I18, 0, rx989_cut2602
    dec $I18
    set $I18, rx989_bstack[$I18]
  rx989_cut2602:
    assign rx989_cstack, $I18
  rx989_jump2601:
    jump $I19
  rx989_done2598:
    rx989_cur."!cursor_fail"()
    .return (rx989_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_153_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx992_tgt
    .local int rx992_pos
    .local int rx992_off
    .local int rx992_eos
    .local int rx992_rep
    .local pmc rx992_cur
    .local pmc rx992_curclass
    .local pmc rx992_bstack
    .local pmc rx992_cstack
    (rx992_cur, rx992_tgt, rx992_pos, rx992_curclass, rx992_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx992_cur
    length rx992_eos, rx992_tgt
    eq $I19, 1, rx992_restart2610
    gt rx992_pos, rx992_eos, rx992_fail2611
    repr_get_attr_int $I11, self, rx992_curclass, "$!from"
    ne $I11, -1, rxscan993_done2617
    goto rxscan993_scan2616
  rxscan993_loop2615:
    inc rx992_pos
    gt rx992_pos, rx992_eos, rx992_fail2611
    repr_bind_attr_int rx992_cur, rx992_curclass, "$!from", rx992_pos
  rxscan993_scan2616:
    nqp_rxmark rx992_bstack, rxscan993_loop2615, rx992_pos, 0
  rxscan993_done2617:
    ge rx992_pos, rx992_eos, rx992_fail2611
    substr $S11, rx992_tgt, rx992_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx992_fail2611
    repr_bind_attr_int rx992_cur, rx992_curclass, "$!pos", rx992_pos
    $P11 = rx992_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx992_curclass, "$!pos"
    lt $I11, 0, rx992_fail2611
    nqp_rxmark rx992_bstack, rxsubrule994_pass2618, -1, 0
  rxsubrule994_pass2618:
    rx992_cstack = rx992_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx992_pos, $P11, rx992_curclass, "$!pos"
    rx992_cur."!cursor_pass"(rx992_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx992_cur)
  rx992_restart2610:
    repr_get_attr_obj rx992_cstack, rx992_cur, rx992_curclass, "$!cstack"
  rx992_fail2611:
    unless rx992_bstack, rx992_done2609
    pop $I19, rx992_bstack
    if_null rx992_cstack, rx992_cstack_done2614
    unless rx992_cstack, rx992_cstack_done2614
    dec $I19
    set $P11, rx992_cstack[$I19]
  rx992_cstack_done2614:
    pop rx992_rep, rx992_bstack
    pop rx992_pos, rx992_bstack
    pop $I19, rx992_bstack
    lt rx992_pos, -1, rx992_done2609
    lt rx992_pos, 0, rx992_fail2611
    eq $I19, 0, rx992_fail2611
    nqp_islist $I20, rx992_cstack
    unless $I20, rx992_jump2612
    elements $I18, rx992_bstack
    le $I18, 0, rx992_cut2613
    dec $I18
    set $I18, rx992_bstack[$I18]
  rx992_cut2613:
    assign rx992_cstack, $I18
  rx992_jump2612:
    jump $I19
  rx992_done2609:
    rx992_cur."!cursor_fail"()
    .return (rx992_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_154_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx995_tgt
    .local int rx995_pos
    .local int rx995_off
    .local int rx995_eos
    .local int rx995_rep
    .local pmc rx995_cur
    .local pmc rx995_curclass
    .local pmc rx995_bstack
    .local pmc rx995_cstack
    (rx995_cur, rx995_tgt, rx995_pos, rx995_curclass, rx995_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx995_cur
    length rx995_eos, rx995_tgt
    eq $I19, 1, rx995_restart2621
    gt rx995_pos, rx995_eos, rx995_fail2622
    repr_get_attr_int $I11, self, rx995_curclass, "$!from"
    ne $I11, -1, rxscan996_done2628
    goto rxscan996_scan2627
  rxscan996_loop2626:
    inc rx995_pos
    gt rx995_pos, rx995_eos, rx995_fail2622
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!from", rx995_pos
  rxscan996_scan2627:
    nqp_rxmark rx995_bstack, rxscan996_loop2626, rx995_pos, 0
  rxscan996_done2628:
    nqp_rxmark rx995_bstack, rxcap997_fail2630, rx995_pos, 0
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail2622
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:"q", rx995_fail2622
    add rx995_pos, 1
    nqp_rxpeek $I19, rx995_bstack, rxcap997_fail2630
    inc $I19
    set $I11, rx995_bstack[$I19]
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx995_pos)
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "sym")
    goto rxcap997_done2629
  rxcap997_fail2630:
    goto rx995_fail2622
  rxcap997_done2629:
    le rx995_pos, 0, rx995_fail2622
    is_cclass $I11, .CCLASS_WORD, rx995_tgt, rx995_pos
    if $I11, rx995_fail2622
    sub $I11, rx995_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx995_tgt, $I11
    unless $I11, rx995_fail2622
    ge rx995_pos, rx995_eos, rx995_fail2622
    substr $S11, rx995_tgt, rx995_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx995_fail2622
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."ws"()
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2622
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2622
    nqp_rxmark rx995_bstack, rxsubrule1000_pass2633, -1, 0
  rxsubrule1000_pass2633:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    rx995_cur."!cursor_pass"(rx995_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx995_cur)
  rx995_restart2621:
    repr_get_attr_obj rx995_cstack, rx995_cur, rx995_curclass, "$!cstack"
  rx995_fail2622:
    unless rx995_bstack, rx995_done2620
    pop $I19, rx995_bstack
    if_null rx995_cstack, rx995_cstack_done2625
    unless rx995_cstack, rx995_cstack_done2625
    dec $I19
    set $P11, rx995_cstack[$I19]
  rx995_cstack_done2625:
    pop rx995_rep, rx995_bstack
    pop rx995_pos, rx995_bstack
    pop $I19, rx995_bstack
    lt rx995_pos, -1, rx995_done2620
    lt rx995_pos, 0, rx995_fail2622
    eq $I19, 0, rx995_fail2622
    nqp_islist $I20, rx995_cstack
    unless $I20, rx995_jump2623
    elements $I18, rx995_bstack
    le $I18, 0, rx995_cut2624
    dec $I18
    set $I18, rx995_bstack[$I18]
  rx995_cut2624:
    assign rx995_cstack, $I18
  rx995_jump2623:
    jump $I19
  rx995_done2620:
    rx995_cur."!cursor_fail"()
    .return (rx995_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_155_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1001_tgt
    .local int rx1001_pos
    .local int rx1001_off
    .local int rx1001_eos
    .local int rx1001_rep
    .local pmc rx1001_cur
    .local pmc rx1001_curclass
    .local pmc rx1001_bstack
    .local pmc rx1001_cstack
    (rx1001_cur, rx1001_tgt, rx1001_pos, rx1001_curclass, rx1001_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1001_cur
    length rx1001_eos, rx1001_tgt
    eq $I19, 1, rx1001_restart2636
    gt rx1001_pos, rx1001_eos, rx1001_fail2637
    repr_get_attr_int $I11, self, rx1001_curclass, "$!from"
    ne $I11, -1, rxscan1002_done2643
    goto rxscan1002_scan2642
  rxscan1002_loop2641:
    inc rx1001_pos
    gt rx1001_pos, rx1001_eos, rx1001_fail2637
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!from", rx1001_pos
  rxscan1002_scan2642:
    nqp_rxmark rx1001_bstack, rxscan1002_loop2641, rx1001_pos, 0
  rxscan1002_done2643:
    nqp_rxmark rx1001_bstack, rxcap1003_fail2645, rx1001_pos, 0
    add $I11, rx1001_pos, 2
    gt $I11, rx1001_eos, rx1001_fail2637
    substr $S10, rx1001_tgt, rx1001_pos, 2
    ne $S10, ucs4:"qq", rx1001_fail2637
    add rx1001_pos, 2
    nqp_rxpeek $I19, rx1001_bstack, rxcap1003_fail2645
    inc $I19
    set $I11, rx1001_bstack[$I19]
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1001_pos)
    rx1001_cstack = rx1001_cur."!cursor_capture"($P11, "sym")
    goto rxcap1003_done2644
  rxcap1003_fail2645:
    goto rx1001_fail2637
  rxcap1003_done2644:
    le rx1001_pos, 0, rx1001_fail2637
    is_cclass $I11, .CCLASS_WORD, rx1001_tgt, rx1001_pos
    if $I11, rx1001_fail2637
    sub $I11, rx1001_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1001_tgt, $I11
    unless $I11, rx1001_fail2637
    ge rx1001_pos, rx1001_eos, rx1001_fail2637
    substr $S11, rx1001_tgt, rx1001_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1001_fail2637
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2637
    repr_get_attr_int rx1001_pos, $P11, rx1001_curclass, "$!pos"
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2637
    nqp_rxmark rx1001_bstack, rxsubrule1006_pass2648, -1, 0
  rxsubrule1006_pass2648:
    rx1001_cstack = rx1001_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1001_pos, $P11, rx1001_curclass, "$!pos"
    rx1001_cur."!cursor_pass"(rx1001_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx1001_cur)
  rx1001_restart2636:
    repr_get_attr_obj rx1001_cstack, rx1001_cur, rx1001_curclass, "$!cstack"
  rx1001_fail2637:
    unless rx1001_bstack, rx1001_done2635
    pop $I19, rx1001_bstack
    if_null rx1001_cstack, rx1001_cstack_done2640
    unless rx1001_cstack, rx1001_cstack_done2640
    dec $I19
    set $P11, rx1001_cstack[$I19]
  rx1001_cstack_done2640:
    pop rx1001_rep, rx1001_bstack
    pop rx1001_pos, rx1001_bstack
    pop $I19, rx1001_bstack
    lt rx1001_pos, -1, rx1001_done2635
    lt rx1001_pos, 0, rx1001_fail2637
    eq $I19, 0, rx1001_fail2637
    nqp_islist $I20, rx1001_cstack
    unless $I20, rx1001_jump2638
    elements $I18, rx1001_bstack
    le $I18, 0, rx1001_cut2639
    dec $I18
    set $I18, rx1001_bstack[$I18]
  rx1001_cut2639:
    assign rx1001_cstack, $I18
  rx1001_jump2638:
    jump $I19
  rx1001_done2635:
    rx1001_cur."!cursor_fail"()
    .return (rx1001_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_156_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1007_tgt
    .local int rx1007_pos
    .local int rx1007_off
    .local int rx1007_eos
    .local int rx1007_rep
    .local pmc rx1007_cur
    .local pmc rx1007_curclass
    .local pmc rx1007_bstack
    .local pmc rx1007_cstack
    (rx1007_cur, rx1007_tgt, rx1007_pos, rx1007_curclass, rx1007_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1007_cur
    length rx1007_eos, rx1007_tgt
    eq $I19, 1, rx1007_restart2651
    gt rx1007_pos, rx1007_eos, rx1007_fail2652
    repr_get_attr_int $I11, self, rx1007_curclass, "$!from"
    ne $I11, -1, rxscan1008_done2658
    goto rxscan1008_scan2657
  rxscan1008_loop2656:
    inc rx1007_pos
    gt rx1007_pos, rx1007_eos, rx1007_fail2652
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!from", rx1007_pos
  rxscan1008_scan2657:
    nqp_rxmark rx1007_bstack, rxscan1008_loop2656, rx1007_pos, 0
  rxscan1008_done2658:
    nqp_rxmark rx1007_bstack, rxcap1009_fail2660, rx1007_pos, 0
    add $I11, rx1007_pos, 1
    gt $I11, rx1007_eos, rx1007_fail2652
    substr $S10, rx1007_tgt, rx1007_pos, 1
    ne $S10, ucs4:"Q", rx1007_fail2652
    add rx1007_pos, 1
    nqp_rxpeek $I19, rx1007_bstack, rxcap1009_fail2660
    inc $I19
    set $I11, rx1007_bstack[$I19]
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1007_pos)
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "sym")
    goto rxcap1009_done2659
  rxcap1009_fail2660:
    goto rx1007_fail2652
  rxcap1009_done2659:
    le rx1007_pos, 0, rx1007_fail2652
    is_cclass $I11, .CCLASS_WORD, rx1007_tgt, rx1007_pos
    if $I11, rx1007_fail2652
    sub $I11, rx1007_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1007_tgt, $I11
    unless $I11, rx1007_fail2652
    ge rx1007_pos, rx1007_eos, rx1007_fail2652
    substr $S11, rx1007_tgt, rx1007_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1007_fail2652
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1007_curclass, "$!pos"
    lt $I11, 0, rx1007_fail2652
    repr_get_attr_int rx1007_pos, $P11, rx1007_curclass, "$!pos"
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1007_curclass, "$!pos"
    lt $I11, 0, rx1007_fail2652
    nqp_rxmark rx1007_bstack, rxsubrule1012_pass2663, -1, 0
  rxsubrule1012_pass2663:
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1007_pos, $P11, rx1007_curclass, "$!pos"
    rx1007_cur."!cursor_pass"(rx1007_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx1007_cur)
  rx1007_restart2651:
    repr_get_attr_obj rx1007_cstack, rx1007_cur, rx1007_curclass, "$!cstack"
  rx1007_fail2652:
    unless rx1007_bstack, rx1007_done2650
    pop $I19, rx1007_bstack
    if_null rx1007_cstack, rx1007_cstack_done2655
    unless rx1007_cstack, rx1007_cstack_done2655
    dec $I19
    set $P11, rx1007_cstack[$I19]
  rx1007_cstack_done2655:
    pop rx1007_rep, rx1007_bstack
    pop rx1007_pos, rx1007_bstack
    pop $I19, rx1007_bstack
    lt rx1007_pos, -1, rx1007_done2650
    lt rx1007_pos, 0, rx1007_fail2652
    eq $I19, 0, rx1007_fail2652
    nqp_islist $I20, rx1007_cstack
    unless $I20, rx1007_jump2653
    elements $I18, rx1007_bstack
    le $I18, 0, rx1007_cut2654
    dec $I18
    set $I18, rx1007_bstack[$I18]
  rx1007_cut2654:
    assign rx1007_cstack, $I18
  rx1007_jump2653:
    jump $I19
  rx1007_done2650:
    rx1007_cur."!cursor_fail"()
    .return (rx1007_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_157_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1247
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1013_tgt
    .local int rx1013_pos
    .local int rx1013_off
    .local int rx1013_eos
    .local int rx1013_rep
    .local pmc rx1013_cur
    .local pmc rx1013_curclass
    .local pmc rx1013_bstack
    .local pmc rx1013_cstack
    (rx1013_cur, rx1013_tgt, rx1013_pos, rx1013_curclass, rx1013_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1013_cur
    length rx1013_eos, rx1013_tgt
    eq $I19, 1, rx1013_restart2666
    gt rx1013_pos, rx1013_eos, rx1013_fail2667
    repr_get_attr_int $I11, self, rx1013_curclass, "$!from"
    ne $I11, -1, rxscan1014_done2673
    goto rxscan1014_scan2672
  rxscan1014_loop2671:
    inc rx1013_pos
    gt rx1013_pos, rx1013_eos, rx1013_fail2667
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!from", rx1013_pos
  rxscan1014_scan2672:
    nqp_rxmark rx1013_bstack, rxscan1014_loop2671, rx1013_pos, 0
  rxscan1014_done2673:
    nqp_rxmark rx1013_bstack, rxcap1015_fail2675, rx1013_pos, 0
    add $I11, rx1013_pos, 5
    gt $I11, rx1013_eos, rx1013_fail2667
    substr $S10, rx1013_tgt, rx1013_pos, 5
    ne $S10, ucs4:"Q:PIR", rx1013_fail2667
    add rx1013_pos, 5
    nqp_rxpeek $I19, rx1013_bstack, rxcap1015_fail2675
    inc $I19
    set $I11, rx1013_bstack[$I19]
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1013_pos)
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "sym")
    goto rxcap1015_done2674
  rxcap1015_fail2675:
    goto rx1013_fail2667
  rxcap1015_done2674:
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2667
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2667
    nqp_rxmark rx1013_bstack, rxsubrule1017_pass2677, -1, 0
  rxsubrule1017_pass2677:
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    rx1013_cur."!cursor_pass"(rx1013_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx1013_cur)
  rx1013_restart2666:
    repr_get_attr_obj rx1013_cstack, rx1013_cur, rx1013_curclass, "$!cstack"
  rx1013_fail2667:
    unless rx1013_bstack, rx1013_done2665
    pop $I19, rx1013_bstack
    if_null rx1013_cstack, rx1013_cstack_done2670
    unless rx1013_cstack, rx1013_cstack_done2670
    dec $I19
    set $P11, rx1013_cstack[$I19]
  rx1013_cstack_done2670:
    pop rx1013_rep, rx1013_bstack
    pop rx1013_pos, rx1013_bstack
    pop $I19, rx1013_bstack
    lt rx1013_pos, -1, rx1013_done2665
    lt rx1013_pos, 0, rx1013_fail2667
    eq $I19, 0, rx1013_fail2667
    nqp_islist $I20, rx1013_cstack
    unless $I20, rx1013_jump2668
    elements $I18, rx1013_bstack
    le $I18, 0, rx1013_cut2669
    dec $I18
    set $I18, rx1013_bstack[$I18]
  rx1013_cut2669:
    assign rx1013_cstack, $I18
  rx1013_jump2668:
    jump $I19
  rx1013_done2665:
    rx1013_cur."!cursor_fail"()
    .return (rx1013_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_158_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1248
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx1018_tgt
    .local int rx1018_pos
    .local int rx1018_off
    .local int rx1018_eos
    .local int rx1018_rep
    .local pmc rx1018_cur
    .local pmc rx1018_curclass
    .local pmc rx1018_bstack
    .local pmc rx1018_cstack
    (rx1018_cur, rx1018_tgt, rx1018_pos, rx1018_curclass, rx1018_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1018_cur
    length rx1018_eos, rx1018_tgt
    eq $I19, 1, rx1018_restart2680
    gt rx1018_pos, rx1018_eos, rx1018_fail2681
    repr_get_attr_int $I11, self, rx1018_curclass, "$!from"
    ne $I11, -1, rxscan1019_done2687
    goto rxscan1019_scan2686
  rxscan1019_loop2685:
    inc rx1018_pos
    gt rx1018_pos, rx1018_eos, rx1018_fail2681
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!from", rx1018_pos
  rxscan1019_scan2686:
    nqp_rxmark rx1018_bstack, rxscan1019_loop2685, rx1018_pos, 0
  rxscan1019_done2687:
    add $I11, rx1018_pos, 1
    gt $I11, rx1018_eos, rx1018_fail2681
    substr $S10, rx1018_tgt, rx1018_pos, 1
    ne $S10, ucs4:"/", rx1018_fail2681
    add rx1018_pos, 1
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    $P11 = rx1018_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx1018_curclass, "$!pos"
    lt $I11, 0, rx1018_fail2681
    repr_get_attr_int rx1018_pos, $P11, rx1018_curclass, "$!pos"
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    store_lex unicode:"$\x{a2}", rx1018_cur
    unless_null $P101, fallback2689
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2690
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2690:
    unless_null $P5002, vivi_10212691
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_10212691:
    set $P101, $P5002
  fallback2689:
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    $P11 = rx1018_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx1018_curclass, "$!pos"
    lt $I11, 0, rx1018_fail2681
    nqp_rxmark rx1018_bstack, rxsubrule1022_pass2692, -1, 0
  rxsubrule1022_pass2692:
    rx1018_cstack = rx1018_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx1018_pos, $P11, rx1018_curclass, "$!pos"
    add $I11, rx1018_pos, 1
    gt $I11, rx1018_eos, rx1018_fail2681
    substr $S10, rx1018_tgt, rx1018_pos, 1
    ne $S10, ucs4:"/", rx1018_fail2681
    add rx1018_pos, 1
    rx1018_cur."!cursor_pass"(rx1018_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx1018_cur)
  rx1018_restart2680:
    repr_get_attr_obj rx1018_cstack, rx1018_cur, rx1018_curclass, "$!cstack"
  rx1018_fail2681:
    unless rx1018_bstack, rx1018_done2679
    pop $I19, rx1018_bstack
    if_null rx1018_cstack, rx1018_cstack_done2684
    unless rx1018_cstack, rx1018_cstack_done2684
    dec $I19
    set $P11, rx1018_cstack[$I19]
  rx1018_cstack_done2684:
    pop rx1018_rep, rx1018_bstack
    pop rx1018_pos, rx1018_bstack
    pop $I19, rx1018_bstack
    lt rx1018_pos, -1, rx1018_done2679
    lt rx1018_pos, 0, rx1018_fail2681
    eq $I19, 0, rx1018_fail2681
    nqp_islist $I20, rx1018_cstack
    unless $I20, rx1018_jump2682
    elements $I18, rx1018_bstack
    le $I18, 0, rx1018_cut2683
    dec $I18
    set $I18, rx1018_bstack[$I18]
  rx1018_cut2683:
    assign rx1018_cstack, $I18
  rx1018_jump2682:
    jump $I19
  rx1018_done2679:
    rx1018_cur."!cursor_fail"()
    .return (rx1018_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_159_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1023_tgt
    .local int rx1023_pos
    .local int rx1023_off
    .local int rx1023_eos
    .local int rx1023_rep
    .local pmc rx1023_cur
    .local pmc rx1023_curclass
    .local pmc rx1023_bstack
    .local pmc rx1023_cstack
    (rx1023_cur, rx1023_tgt, rx1023_pos, rx1023_curclass, rx1023_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1023_cur
    length rx1023_eos, rx1023_tgt
    eq $I19, 1, rx1023_restart2695
    gt rx1023_pos, rx1023_eos, rx1023_fail2696
    repr_get_attr_int $I11, self, rx1023_curclass, "$!from"
    ne $I11, -1, rxscan1024_done2702
    goto rxscan1024_scan2701
  rxscan1024_loop2700:
    inc rx1023_pos
    gt rx1023_pos, rx1023_eos, rx1023_fail2696
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!from", rx1023_pos
  rxscan1024_scan2701:
    nqp_rxmark rx1023_bstack, rxscan1024_loop2700, rx1023_pos, 0
  rxscan1024_done2702:
    ge rx1023_pos, rx1023_eos, rx1023_fail2696
    substr $S11, rx1023_tgt, rx1023_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx1023_fail2696
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!pos", rx1023_pos
    $P11 = rx1023_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx1023_curclass, "$!pos"
    lt $I11, 0, rx1023_fail2696
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!pos", rx1023_pos
    $P11 = rx1023_cur."variable"()
    repr_get_attr_int $I11, $P11, rx1023_curclass, "$!pos"
    lt $I11, 0, rx1023_fail2696
    nqp_rxmark rx1023_bstack, rxsubrule1025_pass2703, -1, 0
  rxsubrule1025_pass2703:
    rx1023_cstack = rx1023_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx1023_pos, $P11, rx1023_curclass, "$!pos"
    rx1023_cur."!cursor_pass"(rx1023_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx1023_cur)
  rx1023_restart2695:
    repr_get_attr_obj rx1023_cstack, rx1023_cur, rx1023_curclass, "$!cstack"
  rx1023_fail2696:
    unless rx1023_bstack, rx1023_done2694
    pop $I19, rx1023_bstack
    if_null rx1023_cstack, rx1023_cstack_done2699
    unless rx1023_cstack, rx1023_cstack_done2699
    dec $I19
    set $P11, rx1023_cstack[$I19]
  rx1023_cstack_done2699:
    pop rx1023_rep, rx1023_bstack
    pop rx1023_pos, rx1023_bstack
    pop $I19, rx1023_bstack
    lt rx1023_pos, -1, rx1023_done2694
    lt rx1023_pos, 0, rx1023_fail2696
    eq $I19, 0, rx1023_fail2696
    nqp_islist $I20, rx1023_cstack
    unless $I20, rx1023_jump2697
    elements $I18, rx1023_bstack
    le $I18, 0, rx1023_cut2698
    dec $I18
    set $I18, rx1023_bstack[$I18]
  rx1023_cut2698:
    assign rx1023_cstack, $I18
  rx1023_jump2697:
    jump $I19
  rx1023_done2694:
    rx1023_cur."!cursor_fail"()
    .return (rx1023_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_160_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1257
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1026_tgt
    .local int rx1026_pos
    .local int rx1026_off
    .local int rx1026_eos
    .local int rx1026_rep
    .local pmc rx1026_cur
    .local pmc rx1026_curclass
    .local pmc rx1026_bstack
    .local pmc rx1026_cstack
    (rx1026_cur, rx1026_tgt, rx1026_pos, rx1026_curclass, rx1026_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1026_cur
    length rx1026_eos, rx1026_tgt
    eq $I19, 1, rx1026_restart2706
    gt rx1026_pos, rx1026_eos, rx1026_fail2707
    repr_get_attr_int $I11, self, rx1026_curclass, "$!from"
    ne $I11, -1, rxscan1027_done2713
    goto rxscan1027_scan2712
  rxscan1027_loop2711:
    inc rx1026_pos
    gt rx1026_pos, rx1026_eos, rx1026_fail2707
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!from", rx1026_pos
  rxscan1027_scan2712:
    nqp_rxmark rx1026_bstack, rxscan1027_loop2711, rx1026_pos, 0
  rxscan1027_done2713:
    ge rx1026_pos, rx1026_eos, rx1026_fail2707
    substr $S11, rx1026_tgt, rx1026_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1026_fail2707
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx1026_curclass, "$!pos"
    lt $I11, 0, rx1026_fail2707
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."block"()
    repr_get_attr_int $I11, $P11, rx1026_curclass, "$!pos"
    lt $I11, 0, rx1026_fail2707
    nqp_rxmark rx1026_bstack, rxsubrule1028_pass2714, -1, 0
  rxsubrule1028_pass2714:
    rx1026_cstack = rx1026_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1026_pos, $P11, rx1026_curclass, "$!pos"
    rx1026_cur."!cursor_pass"(rx1026_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx1026_cur)
  rx1026_restart2706:
    repr_get_attr_obj rx1026_cstack, rx1026_cur, rx1026_curclass, "$!cstack"
  rx1026_fail2707:
    unless rx1026_bstack, rx1026_done2705
    pop $I19, rx1026_bstack
    if_null rx1026_cstack, rx1026_cstack_done2710
    unless rx1026_cstack, rx1026_cstack_done2710
    dec $I19
    set $P11, rx1026_cstack[$I19]
  rx1026_cstack_done2710:
    pop rx1026_rep, rx1026_bstack
    pop rx1026_pos, rx1026_bstack
    pop $I19, rx1026_bstack
    lt rx1026_pos, -1, rx1026_done2705
    lt rx1026_pos, 0, rx1026_fail2707
    eq $I19, 0, rx1026_fail2707
    nqp_islist $I20, rx1026_cstack
    unless $I20, rx1026_jump2708
    elements $I18, rx1026_bstack
    le $I18, 0, rx1026_cut2709
    dec $I18
    set $I18, rx1026_bstack[$I18]
  rx1026_cut2709:
    assign rx1026_cstack, $I18
  rx1026_jump2708:
    jump $I19
  rx1026_done2705:
    rx1026_cur."!cursor_fail"()
    .return (rx1026_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_161_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1029_tgt
    .local int rx1029_pos
    .local int rx1029_off
    .local int rx1029_eos
    .local int rx1029_rep
    .local pmc rx1029_cur
    .local pmc rx1029_curclass
    .local pmc rx1029_bstack
    .local pmc rx1029_cstack
    (rx1029_cur, rx1029_tgt, rx1029_pos, rx1029_curclass, rx1029_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1029_cur
    length rx1029_eos, rx1029_tgt
    eq $I19, 1, rx1029_restart2717
    gt rx1029_pos, rx1029_eos, rx1029_fail2718
    repr_get_attr_int $I11, self, rx1029_curclass, "$!from"
    ne $I11, -1, rxscan1030_done2724
    goto rxscan1030_scan2723
  rxscan1030_loop2722:
    inc rx1029_pos
    gt rx1029_pos, rx1029_eos, rx1029_fail2718
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!from", rx1029_pos
  rxscan1030_scan2723:
    nqp_rxmark rx1029_bstack, rxscan1030_loop2722, rx1029_pos, 0
  rxscan1030_done2724:
    add $I11, rx1029_pos, 2
    gt $I11, rx1029_eos, rx1029_fail2718
    substr $S10, rx1029_tgt, rx1029_pos, 2
    ne $S10, ucs4:"\\e", rx1029_fail2718
    add rx1029_pos, 2
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!pos", rx1029_pos
    $P11 = rx1029_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx1029_curclass, "$!pos"
    lt $I11, 0, rx1029_fail2718
    rx1029_cur."!cursor_pass"(rx1029_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx1029_cur)
  rx1029_restart2717:
    repr_get_attr_obj rx1029_cstack, rx1029_cur, rx1029_curclass, "$!cstack"
  rx1029_fail2718:
    unless rx1029_bstack, rx1029_done2716
    pop $I19, rx1029_bstack
    if_null rx1029_cstack, rx1029_cstack_done2721
    unless rx1029_cstack, rx1029_cstack_done2721
    dec $I19
    set $P11, rx1029_cstack[$I19]
  rx1029_cstack_done2721:
    pop rx1029_rep, rx1029_bstack
    pop rx1029_pos, rx1029_bstack
    pop $I19, rx1029_bstack
    lt rx1029_pos, -1, rx1029_done2716
    lt rx1029_pos, 0, rx1029_fail2718
    eq $I19, 0, rx1029_fail2718
    nqp_islist $I20, rx1029_cstack
    unless $I20, rx1029_jump2719
    elements $I18, rx1029_bstack
    le $I18, 0, rx1029_cut2720
    dec $I18
    set $I18, rx1029_bstack[$I18]
  rx1029_cut2720:
    assign rx1029_cstack, $I18
  rx1029_jump2719:
    jump $I19
  rx1029_done2716:
    rx1029_cur."!cursor_fail"()
    .return (rx1029_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_162_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1031_tgt
    .local int rx1031_pos
    .local int rx1031_off
    .local int rx1031_eos
    .local int rx1031_rep
    .local pmc rx1031_cur
    .local pmc rx1031_curclass
    .local pmc rx1031_bstack
    .local pmc rx1031_cstack
    (rx1031_cur, rx1031_tgt, rx1031_pos, rx1031_curclass, rx1031_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1031_cur
    length rx1031_eos, rx1031_tgt
    eq $I19, 1, rx1031_restart2727
    gt rx1031_pos, rx1031_eos, rx1031_fail2728
    repr_get_attr_int $I11, self, rx1031_curclass, "$!from"
    ne $I11, -1, rxscan1032_done2734
    goto rxscan1032_scan2733
  rxscan1032_loop2732:
    inc rx1031_pos
    gt rx1031_pos, rx1031_eos, rx1031_fail2728
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!from", rx1031_pos
  rxscan1032_scan2733:
    nqp_rxmark rx1031_bstack, rxscan1032_loop2732, rx1031_pos, 0
  rxscan1032_done2734:
    add $I11, rx1031_pos, 1
    gt $I11, rx1031_eos, rx1031_fail2728
    substr $S10, rx1031_tgt, rx1031_pos, 1
    ne $S10, ucs4:"(", rx1031_fail2728
    add rx1031_pos, 1
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!pos", rx1031_pos
    $P11 = rx1031_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2728
    repr_get_attr_int rx1031_pos, $P11, rx1031_curclass, "$!pos"
    nqp_rxmark rx1031_bstack, rxquantr1034_done2737, rx1031_pos, 0
  rxquantr1034_loop2736:
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!pos", rx1031_pos
    $P11 = rx1031_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2728
    goto rxsubrule1035_pass2738
  rxsubrule1035_back2739:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2728
  rxsubrule1035_pass2738:
    rx1031_cstack = rx1031_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1035_back2739
    push rx1031_bstack, $I11
    push rx1031_bstack, 0
    push rx1031_bstack, rx1031_pos
    elements $I11, rx1031_cstack
    push rx1031_bstack, $I11
    repr_get_attr_int rx1031_pos, $P11, rx1031_curclass, "$!pos"
    nqp_rxpeek $I19, rx1031_bstack, rxquantr1034_done2737
    inc $I19
    inc $I19
    set rx1031_rep, rx1031_bstack[$I19]
    nqp_rxcommit rx1031_bstack, rxquantr1034_done2737
    inc rx1031_rep
  rxquantr1034_done2737:
    add $I11, rx1031_pos, 1
    gt $I11, rx1031_eos, rx1031_fail2728
    substr $S10, rx1031_tgt, rx1031_pos, 1
    ne $S10, ucs4:")", rx1031_fail2728
    add rx1031_pos, 1
    rx1031_cur."!cursor_pass"(rx1031_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1031_cur)
  rx1031_restart2727:
    repr_get_attr_obj rx1031_cstack, rx1031_cur, rx1031_curclass, "$!cstack"
  rx1031_fail2728:
    unless rx1031_bstack, rx1031_done2726
    pop $I19, rx1031_bstack
    if_null rx1031_cstack, rx1031_cstack_done2731
    unless rx1031_cstack, rx1031_cstack_done2731
    dec $I19
    set $P11, rx1031_cstack[$I19]
  rx1031_cstack_done2731:
    pop rx1031_rep, rx1031_bstack
    pop rx1031_pos, rx1031_bstack
    pop $I19, rx1031_bstack
    lt rx1031_pos, -1, rx1031_done2726
    lt rx1031_pos, 0, rx1031_fail2728
    eq $I19, 0, rx1031_fail2728
    nqp_islist $I20, rx1031_cstack
    unless $I20, rx1031_jump2729
    elements $I18, rx1031_bstack
    le $I18, 0, rx1031_cut2730
    dec $I18
    set $I18, rx1031_bstack[$I18]
  rx1031_cut2730:
    assign rx1031_cstack, $I18
  rx1031_jump2729:
    jump $I19
  rx1031_done2726:
    rx1031_cur."!cursor_fail"()
    .return (rx1031_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_163_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1261
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1036_tgt
    .local int rx1036_pos
    .local int rx1036_off
    .local int rx1036_eos
    .local int rx1036_rep
    .local pmc rx1036_cur
    .local pmc rx1036_curclass
    .local pmc rx1036_bstack
    .local pmc rx1036_cstack
    (rx1036_cur, rx1036_tgt, rx1036_pos, rx1036_curclass, rx1036_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1036_cur
    length rx1036_eos, rx1036_tgt
    eq $I19, 1, rx1036_restart2742
    gt rx1036_pos, rx1036_eos, rx1036_fail2743
    repr_get_attr_int $I11, self, rx1036_curclass, "$!from"
    ne $I11, -1, rxscan1037_done2749
    goto rxscan1037_scan2748
  rxscan1037_loop2747:
    inc rx1036_pos
    gt rx1036_pos, rx1036_eos, rx1036_fail2743
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!from", rx1036_pos
  rxscan1037_scan2748:
    nqp_rxmark rx1036_bstack, rxscan1037_loop2747, rx1036_pos, 0
  rxscan1037_done2749:
    add $I11, rx1036_pos, 1
    gt $I11, rx1036_eos, rx1036_fail2743
    substr $S10, rx1036_tgt, rx1036_pos, 1
    ne $S10, ucs4:"[", rx1036_fail2743
    add rx1036_pos, 1
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2743
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    nqp_rxmark rx1036_bstack, rxquantr1039_done2752, rx1036_pos, 0
  rxquantr1039_loop2751:
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2743
    goto rxsubrule1040_pass2753
  rxsubrule1040_back2754:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2743
  rxsubrule1040_pass2753:
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1040_back2754
    push rx1036_bstack, $I11
    push rx1036_bstack, 0
    push rx1036_bstack, rx1036_pos
    elements $I11, rx1036_cstack
    push rx1036_bstack, $I11
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    nqp_rxpeek $I19, rx1036_bstack, rxquantr1039_done2752
    inc $I19
    inc $I19
    set rx1036_rep, rx1036_bstack[$I19]
    nqp_rxcommit rx1036_bstack, rxquantr1039_done2752
    inc rx1036_rep
  rxquantr1039_done2752:
    add $I11, rx1036_pos, 1
    gt $I11, rx1036_eos, rx1036_fail2743
    substr $S10, rx1036_tgt, rx1036_pos, 1
    ne $S10, ucs4:"]", rx1036_fail2743
    add rx1036_pos, 1
    rx1036_cur."!cursor_pass"(rx1036_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1036_cur)
  rx1036_restart2742:
    repr_get_attr_obj rx1036_cstack, rx1036_cur, rx1036_curclass, "$!cstack"
  rx1036_fail2743:
    unless rx1036_bstack, rx1036_done2741
    pop $I19, rx1036_bstack
    if_null rx1036_cstack, rx1036_cstack_done2746
    unless rx1036_cstack, rx1036_cstack_done2746
    dec $I19
    set $P11, rx1036_cstack[$I19]
  rx1036_cstack_done2746:
    pop rx1036_rep, rx1036_bstack
    pop rx1036_pos, rx1036_bstack
    pop $I19, rx1036_bstack
    lt rx1036_pos, -1, rx1036_done2741
    lt rx1036_pos, 0, rx1036_fail2743
    eq $I19, 0, rx1036_fail2743
    nqp_islist $I20, rx1036_cstack
    unless $I20, rx1036_jump2744
    elements $I18, rx1036_bstack
    le $I18, 0, rx1036_cut2745
    dec $I18
    set $I18, rx1036_bstack[$I18]
  rx1036_cut2745:
    assign rx1036_cstack, $I18
  rx1036_jump2744:
    jump $I19
  rx1036_done2741:
    rx1036_cur."!cursor_fail"()
    .return (rx1036_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_164_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1262
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1041_tgt
    .local int rx1041_pos
    .local int rx1041_off
    .local int rx1041_eos
    .local int rx1041_rep
    .local pmc rx1041_cur
    .local pmc rx1041_curclass
    .local pmc rx1041_bstack
    .local pmc rx1041_cstack
    (rx1041_cur, rx1041_tgt, rx1041_pos, rx1041_curclass, rx1041_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1041_cur
    length rx1041_eos, rx1041_tgt
    eq $I19, 1, rx1041_restart2757
    gt rx1041_pos, rx1041_eos, rx1041_fail2758
    repr_get_attr_int $I11, self, rx1041_curclass, "$!from"
    ne $I11, -1, rxscan1042_done2764
    goto rxscan1042_scan2763
  rxscan1042_loop2762:
    inc rx1041_pos
    gt rx1041_pos, rx1041_eos, rx1041_fail2758
    repr_bind_attr_int rx1041_cur, rx1041_curclass, "$!from", rx1041_pos
  rxscan1042_scan2763:
    nqp_rxmark rx1041_bstack, rxscan1042_loop2762, rx1041_pos, 0
  rxscan1042_done2764:
    ge rx1041_pos, rx1041_eos, rx1041_fail2758
    substr $S11, rx1041_tgt, rx1041_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1041_fail2758
    repr_bind_attr_int rx1041_cur, rx1041_curclass, "$!pos", rx1041_pos
    $P11 = rx1041_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx1041_curclass, "$!pos"
    lt $I11, 0, rx1041_fail2758
    nqp_rxmark rx1041_bstack, rxsubrule1043_pass2765, -1, 0
  rxsubrule1043_pass2765:
    rx1041_cstack = rx1041_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1041_pos, $P11, rx1041_curclass, "$!pos"
    rx1041_cur."!cursor_pass"(rx1041_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1041_cur)
  rx1041_restart2757:
    repr_get_attr_obj rx1041_cstack, rx1041_cur, rx1041_curclass, "$!cstack"
  rx1041_fail2758:
    unless rx1041_bstack, rx1041_done2756
    pop $I19, rx1041_bstack
    if_null rx1041_cstack, rx1041_cstack_done2761
    unless rx1041_cstack, rx1041_cstack_done2761
    dec $I19
    set $P11, rx1041_cstack[$I19]
  rx1041_cstack_done2761:
    pop rx1041_rep, rx1041_bstack
    pop rx1041_pos, rx1041_bstack
    pop $I19, rx1041_bstack
    lt rx1041_pos, -1, rx1041_done2756
    lt rx1041_pos, 0, rx1041_fail2758
    eq $I19, 0, rx1041_fail2758
    nqp_islist $I20, rx1041_cstack
    unless $I20, rx1041_jump2759
    elements $I18, rx1041_bstack
    le $I18, 0, rx1041_cut2760
    dec $I18
    set $I18, rx1041_bstack[$I18]
  rx1041_cut2760:
    assign rx1041_cstack, $I18
  rx1041_jump2759:
    jump $I19
  rx1041_done2756:
    rx1041_cur."!cursor_fail"()
    .return (rx1041_cur) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_165_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1263
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1044_tgt
    .local int rx1044_pos
    .local int rx1044_off
    .local int rx1044_eos
    .local int rx1044_rep
    .local pmc rx1044_cur
    .local pmc rx1044_curclass
    .local pmc rx1044_bstack
    .local pmc rx1044_cstack
    (rx1044_cur, rx1044_tgt, rx1044_pos, rx1044_curclass, rx1044_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1044_cur
    length rx1044_eos, rx1044_tgt
    eq $I19, 1, rx1044_restart2768
    gt rx1044_pos, rx1044_eos, rx1044_fail2769
    repr_get_attr_int $I11, self, rx1044_curclass, "$!from"
    ne $I11, -1, rxscan1045_done2775
    goto rxscan1045_scan2774
  rxscan1045_loop2773:
    inc rx1044_pos
    gt rx1044_pos, rx1044_eos, rx1044_fail2769
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!from", rx1044_pos
  rxscan1045_scan2774:
    nqp_rxmark rx1044_bstack, rxscan1045_loop2773, rx1044_pos, 0
  rxscan1045_done2775:
    ge rx1044_pos, rx1044_eos, rx1044_fail2769
    substr $S11, rx1044_tgt, rx1044_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx1044_fail2769
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!pos", rx1044_pos
    $P11 = rx1044_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx1044_curclass, "$!pos"
    lt $I11, 0, rx1044_fail2769
    nqp_rxmark rx1044_bstack, rxsubrule1046_pass2776, -1, 0
  rxsubrule1046_pass2776:
    rx1044_cstack = rx1044_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1044_pos, $P11, rx1044_curclass, "$!pos"
    rx1044_cur."!cursor_pass"(rx1044_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx1044_cur)
  rx1044_restart2768:
    repr_get_attr_obj rx1044_cstack, rx1044_cur, rx1044_curclass, "$!cstack"
  rx1044_fail2769:
    unless rx1044_bstack, rx1044_done2767
    pop $I19, rx1044_bstack
    if_null rx1044_cstack, rx1044_cstack_done2772
    unless rx1044_cstack, rx1044_cstack_done2772
    dec $I19
    set $P11, rx1044_cstack[$I19]
  rx1044_cstack_done2772:
    pop rx1044_rep, rx1044_bstack
    pop rx1044_pos, rx1044_bstack
    pop $I19, rx1044_bstack
    lt rx1044_pos, -1, rx1044_done2767
    lt rx1044_pos, 0, rx1044_fail2769
    eq $I19, 0, rx1044_fail2769
    nqp_islist $I20, rx1044_cstack
    unless $I20, rx1044_jump2770
    elements $I18, rx1044_bstack
    le $I18, 0, rx1044_cut2771
    dec $I18
    set $I18, rx1044_bstack[$I18]
  rx1044_cut2771:
    assign rx1044_cstack, $I18
  rx1044_jump2770:
    jump $I19
  rx1044_done2767:
    rx1044_cur."!cursor_fail"()
    .return (rx1044_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_166_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1264
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1047_tgt
    .local int rx1047_pos
    .local int rx1047_off
    .local int rx1047_eos
    .local int rx1047_rep
    .local pmc rx1047_cur
    .local pmc rx1047_curclass
    .local pmc rx1047_bstack
    .local pmc rx1047_cstack
    (rx1047_cur, rx1047_tgt, rx1047_pos, rx1047_curclass, rx1047_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1047_cur
    length rx1047_eos, rx1047_tgt
    eq $I19, 1, rx1047_restart2779
    gt rx1047_pos, rx1047_eos, rx1047_fail2780
    repr_get_attr_int $I11, self, rx1047_curclass, "$!from"
    ne $I11, -1, rxscan1048_done2786
    goto rxscan1048_scan2785
  rxscan1048_loop2784:
    inc rx1047_pos
    gt rx1047_pos, rx1047_eos, rx1047_fail2780
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!from", rx1047_pos
  rxscan1048_scan2785:
    nqp_rxmark rx1047_bstack, rxscan1048_loop2784, rx1047_pos, 0
  rxscan1048_done2786:
    ge rx1047_pos, rx1047_eos, rx1047_fail2780
    substr $S11, rx1047_tgt, rx1047_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1047_fail2780
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!pos", rx1047_pos
    $P11 = rx1047_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx1047_curclass, "$!pos"
    lt $I11, 0, rx1047_fail2780
    nqp_rxmark rx1047_bstack, rxsubrule1049_pass2787, -1, 0
  rxsubrule1049_pass2787:
    rx1047_cstack = rx1047_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx1047_pos, $P11, rx1047_curclass, "$!pos"
    rx1047_cur."!cursor_pass"(rx1047_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1047_cur)
  rx1047_restart2779:
    repr_get_attr_obj rx1047_cstack, rx1047_cur, rx1047_curclass, "$!cstack"
  rx1047_fail2780:
    unless rx1047_bstack, rx1047_done2778
    pop $I19, rx1047_bstack
    if_null rx1047_cstack, rx1047_cstack_done2783
    unless rx1047_cstack, rx1047_cstack_done2783
    dec $I19
    set $P11, rx1047_cstack[$I19]
  rx1047_cstack_done2783:
    pop rx1047_rep, rx1047_bstack
    pop rx1047_pos, rx1047_bstack
    pop $I19, rx1047_bstack
    lt rx1047_pos, -1, rx1047_done2778
    lt rx1047_pos, 0, rx1047_fail2780
    eq $I19, 0, rx1047_fail2780
    nqp_islist $I20, rx1047_cstack
    unless $I20, rx1047_jump2781
    elements $I18, rx1047_bstack
    le $I18, 0, rx1047_cut2782
    dec $I18
    set $I18, rx1047_bstack[$I18]
  rx1047_cut2782:
    assign rx1047_cstack, $I18
  rx1047_jump2781:
    jump $I19
  rx1047_done2778:
    rx1047_cur."!cursor_fail"()
    .return (rx1047_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_167_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1265
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1050_tgt
    .local int rx1050_pos
    .local int rx1050_off
    .local int rx1050_eos
    .local int rx1050_rep
    .local pmc rx1050_cur
    .local pmc rx1050_curclass
    .local pmc rx1050_bstack
    .local pmc rx1050_cstack
    (rx1050_cur, rx1050_tgt, rx1050_pos, rx1050_curclass, rx1050_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1050_cur
    length rx1050_eos, rx1050_tgt
    eq $I19, 1, rx1050_restart2790
    gt rx1050_pos, rx1050_eos, rx1050_fail2791
    repr_get_attr_int $I11, self, rx1050_curclass, "$!from"
    ne $I11, -1, rxscan1051_done2797
    goto rxscan1051_scan2796
  rxscan1051_loop2795:
    inc rx1050_pos
    gt rx1050_pos, rx1050_eos, rx1050_fail2791
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!from", rx1050_pos
  rxscan1051_scan2796:
    nqp_rxmark rx1050_bstack, rxscan1051_loop2795, rx1050_pos, 0
  rxscan1051_done2797:
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2791
    nqp_rxmark rx1050_bstack, rxsubrule1052_pass2798, -1, 0
  rxsubrule1052_pass2798:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
    add $I11, rx1050_pos, 1
    gt $I11, rx1050_eos, rx1050_fail2791
    substr $S10, rx1050_tgt, rx1050_pos, 1
    ne $S10, ucs4:"(", rx1050_fail2791
    add rx1050_pos, 1
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2791
    nqp_rxmark rx1050_bstack, rxsubrule1053_pass2799, -1, 0
  rxsubrule1053_pass2799:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
  alt1054_02801:
    nqp_rxmark rx1050_bstack, alt1054_12802, rx1050_pos, 0
    add $I11, rx1050_pos, 1
    gt $I11, rx1050_eos, rx1050_fail2791
    substr $S10, rx1050_tgt, rx1050_pos, 1
    ne $S10, ucs4:")", rx1050_fail2791
    add rx1050_pos, 1
    goto alt1054_end2800
  alt1054_12802:
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2791
    goto rxsubrule1055_pass2803
  rxsubrule1055_back2804:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2791
  rxsubrule1055_pass2803:
    rx1050_cstack = rx1050_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule1055_back2804
    push rx1050_bstack, $I11
    push rx1050_bstack, 0
    push rx1050_bstack, rx1050_pos
    elements $I11, rx1050_cstack
    push rx1050_bstack, $I11
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
  alt1054_end2800:
    rx1050_cur."!cursor_pass"(rx1050_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx1050_cur)
  rx1050_restart2790:
    repr_get_attr_obj rx1050_cstack, rx1050_cur, rx1050_curclass, "$!cstack"
  rx1050_fail2791:
    unless rx1050_bstack, rx1050_done2789
    pop $I19, rx1050_bstack
    if_null rx1050_cstack, rx1050_cstack_done2794
    unless rx1050_cstack, rx1050_cstack_done2794
    dec $I19
    set $P11, rx1050_cstack[$I19]
  rx1050_cstack_done2794:
    pop rx1050_rep, rx1050_bstack
    pop rx1050_pos, rx1050_bstack
    pop $I19, rx1050_bstack
    lt rx1050_pos, -1, rx1050_done2789
    lt rx1050_pos, 0, rx1050_fail2791
    eq $I19, 0, rx1050_fail2791
    nqp_islist $I20, rx1050_cstack
    unless $I20, rx1050_jump2792
    elements $I18, rx1050_bstack
    le $I18, 0, rx1050_cut2793
    dec $I18
    set $I18, rx1050_bstack[$I18]
  rx1050_cut2793:
    assign rx1050_cstack, $I18
  rx1050_jump2792:
    jump $I19
  rx1050_done2789:
    rx1050_cur."!cursor_fail"()
    .return (rx1050_cur) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_168_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1267
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1056_tgt
    .local int rx1056_pos
    .local int rx1056_off
    .local int rx1056_eos
    .local int rx1056_rep
    .local pmc rx1056_cur
    .local pmc rx1056_curclass
    .local pmc rx1056_bstack
    .local pmc rx1056_cstack
    (rx1056_cur, rx1056_tgt, rx1056_pos, rx1056_curclass, rx1056_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1056_cur
    length rx1056_eos, rx1056_tgt
    eq $I19, 1, rx1056_restart2807
    gt rx1056_pos, rx1056_eos, rx1056_fail2808
    repr_get_attr_int $I11, self, rx1056_curclass, "$!from"
    ne $I11, -1, rxscan1057_done2814
    goto rxscan1057_scan2813
  rxscan1057_loop2812:
    inc rx1056_pos
    gt rx1056_pos, rx1056_eos, rx1056_fail2808
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!from", rx1056_pos
  rxscan1057_scan2813:
    nqp_rxmark rx1056_bstack, rxscan1057_loop2812, rx1056_pos, 0
  rxscan1057_done2814:
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2808
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."statement"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2808
    nqp_rxmark rx1056_bstack, rxsubrule1059_pass2816, -1, 0
  rxsubrule1059_pass2816:
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2808
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    rx1056_cur."!cursor_pass"(rx1056_pos, "semilist", 'backtrack'=>1)
    .return (rx1056_cur)
  rx1056_restart2807:
    repr_get_attr_obj rx1056_cstack, rx1056_cur, rx1056_curclass, "$!cstack"
  rx1056_fail2808:
    unless rx1056_bstack, rx1056_done2806
    pop $I19, rx1056_bstack
    if_null rx1056_cstack, rx1056_cstack_done2811
    unless rx1056_cstack, rx1056_cstack_done2811
    dec $I19
    set $P11, rx1056_cstack[$I19]
  rx1056_cstack_done2811:
    pop rx1056_rep, rx1056_bstack
    pop rx1056_pos, rx1056_bstack
    pop $I19, rx1056_bstack
    lt rx1056_pos, -1, rx1056_done2806
    lt rx1056_pos, 0, rx1056_fail2808
    eq $I19, 0, rx1056_fail2808
    nqp_islist $I20, rx1056_cstack
    unless $I20, rx1056_jump2809
    elements $I18, rx1056_bstack
    le $I18, 0, rx1056_cut2810
    dec $I18
    set $I18, rx1056_bstack[$I18]
  rx1056_cut2810:
    assign rx1056_cstack, $I18
  rx1056_jump2809:
    jump $I19
  rx1056_done2806:
    rx1056_cur."!cursor_fail"()
    .return (rx1056_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_169_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1290
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1061_tgt
    .local int rx1061_pos
    .local int rx1061_off
    .local int rx1061_eos
    .local int rx1061_rep
    .local pmc rx1061_cur
    .local pmc rx1061_curclass
    .local pmc rx1061_bstack
    .local pmc rx1061_cstack
    (rx1061_cur, rx1061_tgt, rx1061_pos, rx1061_curclass, rx1061_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1061_cur
    length rx1061_eos, rx1061_tgt
    eq $I19, 1, rx1061_restart2820
    gt rx1061_pos, rx1061_eos, rx1061_fail2821
    repr_get_attr_int $I11, self, rx1061_curclass, "$!from"
    ne $I11, -1, rxscan1062_done2827
    goto rxscan1062_scan2826
  rxscan1062_loop2825:
    inc rx1061_pos
    gt rx1061_pos, rx1061_eos, rx1061_fail2821
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!from", rx1061_pos
  rxscan1062_scan2826:
    nqp_rxmark rx1061_bstack, rxscan1062_loop2825, rx1061_pos, 0
  rxscan1062_done2827:
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    $P11 = rx1061_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx1061_curclass, "$!pos"
    ge $I11, 0, rx1061_fail2821
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    $P11 = rx1061_cur."infix"()
    repr_get_attr_int $I11, $P11, rx1061_curclass, "$!pos"
    lt $I11, 0, rx1061_fail2821
    nqp_rxmark rx1061_bstack, rxsubrule1063_pass2828, -1, 0
  rxsubrule1063_pass2828:
    rx1061_cstack = rx1061_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx1061_pos, $P11, rx1061_curclass, "$!pos"
    rx1061_cur."!cursor_pass"(rx1061_pos, "infixish", 'backtrack'=>1)
    .return (rx1061_cur)
  rx1061_restart2820:
    repr_get_attr_obj rx1061_cstack, rx1061_cur, rx1061_curclass, "$!cstack"
  rx1061_fail2821:
    unless rx1061_bstack, rx1061_done2819
    pop $I19, rx1061_bstack
    if_null rx1061_cstack, rx1061_cstack_done2824
    unless rx1061_cstack, rx1061_cstack_done2824
    dec $I19
    set $P11, rx1061_cstack[$I19]
  rx1061_cstack_done2824:
    pop rx1061_rep, rx1061_bstack
    pop rx1061_pos, rx1061_bstack
    pop $I19, rx1061_bstack
    lt rx1061_pos, -1, rx1061_done2819
    lt rx1061_pos, 0, rx1061_fail2821
    eq $I19, 0, rx1061_fail2821
    nqp_islist $I20, rx1061_cstack
    unless $I20, rx1061_jump2822
    elements $I18, rx1061_bstack
    le $I18, 0, rx1061_cut2823
    dec $I18
    set $I18, rx1061_bstack[$I18]
  rx1061_cut2823:
    assign rx1061_cstack, $I18
  rx1061_jump2822:
    jump $I19
  rx1061_done2819:
    rx1061_cur."!cursor_fail"()
    .return (rx1061_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_170_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1064_tgt
    .local int rx1064_pos
    .local int rx1064_off
    .local int rx1064_eos
    .local int rx1064_rep
    .local pmc rx1064_cur
    .local pmc rx1064_curclass
    .local pmc rx1064_bstack
    .local pmc rx1064_cstack
    (rx1064_cur, rx1064_tgt, rx1064_pos, rx1064_curclass, rx1064_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1064_cur
    length rx1064_eos, rx1064_tgt
    eq $I19, 1, rx1064_restart2831
    gt rx1064_pos, rx1064_eos, rx1064_fail2832
    repr_get_attr_int $I11, self, rx1064_curclass, "$!from"
    ne $I11, -1, rxscan1065_done2838
    goto rxscan1065_scan2837
  rxscan1065_loop2836:
    inc rx1064_pos
    gt rx1064_pos, rx1064_eos, rx1064_fail2832
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!from", rx1064_pos
  rxscan1065_scan2837:
    nqp_rxmark rx1064_bstack, rxscan1065_loop2836, rx1064_pos, 0
  rxscan1065_done2838:
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2832
    rx1064_cur."!cursor_pass"(rx1064_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1064_cur)
  rx1064_restart2831:
    repr_get_attr_obj rx1064_cstack, rx1064_cur, rx1064_curclass, "$!cstack"
  rx1064_fail2832:
    unless rx1064_bstack, rx1064_done2830
    pop $I19, rx1064_bstack
    if_null rx1064_cstack, rx1064_cstack_done2835
    unless rx1064_cstack, rx1064_cstack_done2835
    dec $I19
    set $P11, rx1064_cstack[$I19]
  rx1064_cstack_done2835:
    pop rx1064_rep, rx1064_bstack
    pop rx1064_pos, rx1064_bstack
    pop $I19, rx1064_bstack
    lt rx1064_pos, -1, rx1064_done2830
    lt rx1064_pos, 0, rx1064_fail2832
    eq $I19, 0, rx1064_fail2832
    nqp_islist $I20, rx1064_cstack
    unless $I20, rx1064_jump2833
    elements $I18, rx1064_bstack
    le $I18, 0, rx1064_cut2834
    dec $I18
    set $I18, rx1064_bstack[$I18]
  rx1064_cut2834:
    assign rx1064_cstack, $I18
  rx1064_jump2833:
    jump $I19
  rx1064_done2830:
    rx1064_cur."!cursor_fail"()
    .return (rx1064_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_171_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1293
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1066_tgt
    .local int rx1066_pos
    .local int rx1066_off
    .local int rx1066_eos
    .local int rx1066_rep
    .local pmc rx1066_cur
    .local pmc rx1066_curclass
    .local pmc rx1066_bstack
    .local pmc rx1066_cstack
    (rx1066_cur, rx1066_tgt, rx1066_pos, rx1066_curclass, rx1066_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1066_cur
    length rx1066_eos, rx1066_tgt
    eq $I19, 1, rx1066_restart2841
    gt rx1066_pos, rx1066_eos, rx1066_fail2842
    repr_get_attr_int $I11, self, rx1066_curclass, "$!from"
    ne $I11, -1, rxscan1067_done2848
    goto rxscan1067_scan2847
  rxscan1067_loop2846:
    inc rx1066_pos
    gt rx1066_pos, rx1066_eos, rx1066_fail2842
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!from", rx1066_pos
  rxscan1067_scan2847:
    nqp_rxmark rx1066_bstack, rxscan1067_loop2846, rx1066_pos, 0
  rxscan1067_done2848:
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2842
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"[", rx1066_fail2842
    add rx1066_pos, 1
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2842
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2842
    nqp_rxmark rx1066_bstack, rxsubrule1069_pass2850, -1, 0
  rxsubrule1069_pass2850:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2842
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"]", rx1066_fail2842
    add rx1066_pos, 1
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2842
    nqp_rxmark rx1066_bstack, rxsubrule1070_pass2851, -1, 0
  rxsubrule1070_pass2851:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    rx1066_cur."!cursor_pass"(rx1066_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1066_cur)
  rx1066_restart2841:
    repr_get_attr_obj rx1066_cstack, rx1066_cur, rx1066_curclass, "$!cstack"
  rx1066_fail2842:
    unless rx1066_bstack, rx1066_done2840
    pop $I19, rx1066_bstack
    if_null rx1066_cstack, rx1066_cstack_done2845
    unless rx1066_cstack, rx1066_cstack_done2845
    dec $I19
    set $P11, rx1066_cstack[$I19]
  rx1066_cstack_done2845:
    pop rx1066_rep, rx1066_bstack
    pop rx1066_pos, rx1066_bstack
    pop $I19, rx1066_bstack
    lt rx1066_pos, -1, rx1066_done2840
    lt rx1066_pos, 0, rx1066_fail2842
    eq $I19, 0, rx1066_fail2842
    nqp_islist $I20, rx1066_cstack
    unless $I20, rx1066_jump2843
    elements $I18, rx1066_bstack
    le $I18, 0, rx1066_cut2844
    dec $I18
    set $I18, rx1066_bstack[$I18]
  rx1066_cut2844:
    assign rx1066_cstack, $I18
  rx1066_jump2843:
    jump $I19
  rx1066_done2840:
    rx1066_cur."!cursor_fail"()
    .return (rx1066_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_172_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1298
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1071_tgt
    .local int rx1071_pos
    .local int rx1071_off
    .local int rx1071_eos
    .local int rx1071_rep
    .local pmc rx1071_cur
    .local pmc rx1071_curclass
    .local pmc rx1071_bstack
    .local pmc rx1071_cstack
    (rx1071_cur, rx1071_tgt, rx1071_pos, rx1071_curclass, rx1071_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1071_cur
    length rx1071_eos, rx1071_tgt
    eq $I19, 1, rx1071_restart2854
    gt rx1071_pos, rx1071_eos, rx1071_fail2855
    repr_get_attr_int $I11, self, rx1071_curclass, "$!from"
    ne $I11, -1, rxscan1072_done2861
    goto rxscan1072_scan2860
  rxscan1072_loop2859:
    inc rx1071_pos
    gt rx1071_pos, rx1071_eos, rx1071_fail2855
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!from", rx1071_pos
  rxscan1072_scan2860:
    nqp_rxmark rx1071_bstack, rxscan1072_loop2859, rx1071_pos, 0
  rxscan1072_done2861:
    add $I11, rx1071_pos, 1
    gt $I11, rx1071_eos, rx1071_fail2855
    substr $S10, rx1071_tgt, rx1071_pos, 1
    ne $S10, ucs4:"{", rx1071_fail2855
    add rx1071_pos, 1
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2855
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2855
    nqp_rxmark rx1071_bstack, rxsubrule1074_pass2863, -1, 0
  rxsubrule1074_pass2863:
    rx1071_cstack = rx1071_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    add $I11, rx1071_pos, 1
    gt $I11, rx1071_eos, rx1071_fail2855
    substr $S10, rx1071_tgt, rx1071_pos, 1
    ne $S10, ucs4:"}", rx1071_fail2855
    add rx1071_pos, 1
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2855
    nqp_rxmark rx1071_bstack, rxsubrule1075_pass2864, -1, 0
  rxsubrule1075_pass2864:
    rx1071_cstack = rx1071_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    rx1071_cur."!cursor_pass"(rx1071_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1071_cur)
  rx1071_restart2854:
    repr_get_attr_obj rx1071_cstack, rx1071_cur, rx1071_curclass, "$!cstack"
  rx1071_fail2855:
    unless rx1071_bstack, rx1071_done2853
    pop $I19, rx1071_bstack
    if_null rx1071_cstack, rx1071_cstack_done2858
    unless rx1071_cstack, rx1071_cstack_done2858
    dec $I19
    set $P11, rx1071_cstack[$I19]
  rx1071_cstack_done2858:
    pop rx1071_rep, rx1071_bstack
    pop rx1071_pos, rx1071_bstack
    pop $I19, rx1071_bstack
    lt rx1071_pos, -1, rx1071_done2853
    lt rx1071_pos, 0, rx1071_fail2855
    eq $I19, 0, rx1071_fail2855
    nqp_islist $I20, rx1071_cstack
    unless $I20, rx1071_jump2856
    elements $I18, rx1071_bstack
    le $I18, 0, rx1071_cut2857
    dec $I18
    set $I18, rx1071_bstack[$I18]
  rx1071_cut2857:
    assign rx1071_cstack, $I18
  rx1071_jump2856:
    jump $I19
  rx1071_done2853:
    rx1071_cur."!cursor_fail"()
    .return (rx1071_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_173_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1303
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_curclass
    .local pmc rx1076_bstack
    .local pmc rx1076_cstack
    (rx1076_cur, rx1076_tgt, rx1076_pos, rx1076_curclass, rx1076_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1076_cur
    length rx1076_eos, rx1076_tgt
    eq $I19, 1, rx1076_restart2867
    gt rx1076_pos, rx1076_eos, rx1076_fail2868
    repr_get_attr_int $I11, self, rx1076_curclass, "$!from"
    ne $I11, -1, rxscan1077_done2874
    goto rxscan1077_scan2873
  rxscan1077_loop2872:
    inc rx1076_pos
    gt rx1076_pos, rx1076_eos, rx1076_fail2868
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!from", rx1076_pos
  rxscan1077_scan2873:
    nqp_rxmark rx1076_bstack, rxscan1077_loop2872, rx1076_pos, 0
  rxscan1077_done2874:
    ge rx1076_pos, rx1076_eos, rx1076_fail2868
    substr $S11, rx1076_tgt, rx1076_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1076_fail2868
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2868
    nqp_rxmark rx1076_bstack, rxsubrule1078_pass2875, -1, 0
  rxsubrule1078_pass2875:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2868
    nqp_rxmark rx1076_bstack, rxsubrule1079_pass2876, -1, 0
  rxsubrule1079_pass2876:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    rx1076_cur."!cursor_pass"(rx1076_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1076_cur)
  rx1076_restart2867:
    repr_get_attr_obj rx1076_cstack, rx1076_cur, rx1076_curclass, "$!cstack"
  rx1076_fail2868:
    unless rx1076_bstack, rx1076_done2866
    pop $I19, rx1076_bstack
    if_null rx1076_cstack, rx1076_cstack_done2871
    unless rx1076_cstack, rx1076_cstack_done2871
    dec $I19
    set $P11, rx1076_cstack[$I19]
  rx1076_cstack_done2871:
    pop rx1076_rep, rx1076_bstack
    pop rx1076_pos, rx1076_bstack
    pop $I19, rx1076_bstack
    lt rx1076_pos, -1, rx1076_done2866
    lt rx1076_pos, 0, rx1076_fail2868
    eq $I19, 0, rx1076_fail2868
    nqp_islist $I20, rx1076_cstack
    unless $I20, rx1076_jump2869
    elements $I18, rx1076_bstack
    le $I18, 0, rx1076_cut2870
    dec $I18
    set $I18, rx1076_bstack[$I18]
  rx1076_cut2870:
    assign rx1076_cstack, $I18
  rx1076_jump2869:
    jump $I19
  rx1076_done2866:
    rx1076_cur."!cursor_fail"()
    .return (rx1076_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_174_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1308
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1080_tgt
    .local int rx1080_pos
    .local int rx1080_off
    .local int rx1080_eos
    .local int rx1080_rep
    .local pmc rx1080_cur
    .local pmc rx1080_curclass
    .local pmc rx1080_bstack
    .local pmc rx1080_cstack
    (rx1080_cur, rx1080_tgt, rx1080_pos, rx1080_curclass, rx1080_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1080_cur
    length rx1080_eos, rx1080_tgt
    eq $I19, 1, rx1080_restart2879
    gt rx1080_pos, rx1080_eos, rx1080_fail2880
    repr_get_attr_int $I11, self, rx1080_curclass, "$!from"
    ne $I11, -1, rxscan1081_done2886
    goto rxscan1081_scan2885
  rxscan1081_loop2884:
    inc rx1080_pos
    gt rx1080_pos, rx1080_eos, rx1080_fail2880
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!from", rx1080_pos
  rxscan1081_scan2885:
    nqp_rxmark rx1080_bstack, rxscan1081_loop2884, rx1080_pos, 0
  rxscan1081_done2886:
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2880
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:"(", rx1080_fail2880
    add rx1080_pos, 1
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2880
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2880
    nqp_rxmark rx1080_bstack, rxsubrule1083_pass2888, -1, 0
  rxsubrule1083_pass2888:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2880
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:")", rx1080_fail2880
    add rx1080_pos, 1
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2880
    nqp_rxmark rx1080_bstack, rxsubrule1084_pass2889, -1, 0
  rxsubrule1084_pass2889:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    rx1080_cur."!cursor_pass"(rx1080_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1080_cur)
  rx1080_restart2879:
    repr_get_attr_obj rx1080_cstack, rx1080_cur, rx1080_curclass, "$!cstack"
  rx1080_fail2880:
    unless rx1080_bstack, rx1080_done2878
    pop $I19, rx1080_bstack
    if_null rx1080_cstack, rx1080_cstack_done2883
    unless rx1080_cstack, rx1080_cstack_done2883
    dec $I19
    set $P11, rx1080_cstack[$I19]
  rx1080_cstack_done2883:
    pop rx1080_rep, rx1080_bstack
    pop rx1080_pos, rx1080_bstack
    pop $I19, rx1080_bstack
    lt rx1080_pos, -1, rx1080_done2878
    lt rx1080_pos, 0, rx1080_fail2880
    eq $I19, 0, rx1080_fail2880
    nqp_islist $I20, rx1080_cstack
    unless $I20, rx1080_jump2881
    elements $I18, rx1080_bstack
    le $I18, 0, rx1080_cut2882
    dec $I18
    set $I18, rx1080_bstack[$I18]
  rx1080_cut2882:
    assign rx1080_cstack, $I18
  rx1080_jump2881:
    jump $I19
  rx1080_done2878:
    rx1080_cur."!cursor_fail"()
    .return (rx1080_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_175_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1313
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1085_tgt
    .local int rx1085_pos
    .local int rx1085_off
    .local int rx1085_eos
    .local int rx1085_rep
    .local pmc rx1085_cur
    .local pmc rx1085_curclass
    .local pmc rx1085_bstack
    .local pmc rx1085_cstack
    (rx1085_cur, rx1085_tgt, rx1085_pos, rx1085_curclass, rx1085_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1085_cur
    length rx1085_eos, rx1085_tgt
    eq $I19, 1, rx1085_restart2892
    gt rx1085_pos, rx1085_eos, rx1085_fail2893
    repr_get_attr_int $I11, self, rx1085_curclass, "$!from"
    ne $I11, -1, rxscan1086_done2899
    goto rxscan1086_scan2898
  rxscan1086_loop2897:
    inc rx1085_pos
    gt rx1085_pos, rx1085_eos, rx1085_fail2893
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!from", rx1085_pos
  rxscan1086_scan2898:
    nqp_rxmark rx1085_bstack, rxscan1086_loop2897, rx1085_pos, 0
  rxscan1086_done2899:
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail2893
    nqp_rxmark rx1085_bstack, rxsubrule1087_pass2900, -1, 0
  rxsubrule1087_pass2900:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail2893
    nqp_rxmark rx1085_bstack, rxsubrule1088_pass2901, -1, 0
  rxsubrule1088_pass2901:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    rx1085_cur."!cursor_pass"(rx1085_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1085_cur)
  rx1085_restart2892:
    repr_get_attr_obj rx1085_cstack, rx1085_cur, rx1085_curclass, "$!cstack"
  rx1085_fail2893:
    unless rx1085_bstack, rx1085_done2891
    pop $I19, rx1085_bstack
    if_null rx1085_cstack, rx1085_cstack_done2896
    unless rx1085_cstack, rx1085_cstack_done2896
    dec $I19
    set $P11, rx1085_cstack[$I19]
  rx1085_cstack_done2896:
    pop rx1085_rep, rx1085_bstack
    pop rx1085_pos, rx1085_bstack
    pop $I19, rx1085_bstack
    lt rx1085_pos, -1, rx1085_done2891
    lt rx1085_pos, 0, rx1085_fail2893
    eq $I19, 0, rx1085_fail2893
    nqp_islist $I20, rx1085_cstack
    unless $I20, rx1085_jump2894
    elements $I18, rx1085_bstack
    le $I18, 0, rx1085_cut2895
    dec $I18
    set $I18, rx1085_bstack[$I18]
  rx1085_cut2895:
    assign rx1085_cstack, $I18
  rx1085_jump2894:
    jump $I19
  rx1085_done2891:
    rx1085_cur."!cursor_fail"()
    .return (rx1085_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_176_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1089_tgt
    .local int rx1089_pos
    .local int rx1089_off
    .local int rx1089_eos
    .local int rx1089_rep
    .local pmc rx1089_cur
    .local pmc rx1089_curclass
    .local pmc rx1089_bstack
    .local pmc rx1089_cstack
    (rx1089_cur, rx1089_tgt, rx1089_pos, rx1089_curclass, rx1089_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1089_cur
    length rx1089_eos, rx1089_tgt
    eq $I19, 1, rx1089_restart2904
    gt rx1089_pos, rx1089_eos, rx1089_fail2905
    repr_get_attr_int $I11, self, rx1089_curclass, "$!from"
    ne $I11, -1, rxscan1090_done2911
    goto rxscan1090_scan2910
  rxscan1090_loop2909:
    inc rx1089_pos
    gt rx1089_pos, rx1089_eos, rx1089_fail2905
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!from", rx1089_pos
  rxscan1090_scan2910:
    nqp_rxmark rx1089_bstack, rxscan1090_loop2909, rx1089_pos, 0
  rxscan1090_done2911:
    nqp_rxmark rx1089_bstack, rxcap1091_fail2913, rx1089_pos, 0
    add $I11, rx1089_pos, 2
    gt $I11, rx1089_eos, rx1089_fail2905
    substr $S10, rx1089_tgt, rx1089_pos, 2
    ne $S10, ucs4:"++", rx1089_fail2905
    add rx1089_pos, 2
    nqp_rxpeek $I19, rx1089_bstack, rxcap1091_fail2913
    inc $I19
    set $I11, rx1089_bstack[$I19]
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1089_pos)
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "sym")
    goto rxcap1091_done2912
  rxcap1091_fail2913:
    goto rx1089_fail2905
  rxcap1091_done2912:
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1089_curclass, "$!pos"
    lt $I11, 0, rx1089_fail2905
    nqp_rxmark rx1089_bstack, rxsubrule1092_pass2914, -1, 0
  rxsubrule1092_pass2914:
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1089_pos, $P11, rx1089_curclass, "$!pos"
    rx1089_cur."!cursor_pass"(rx1089_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1089_cur)
  rx1089_restart2904:
    repr_get_attr_obj rx1089_cstack, rx1089_cur, rx1089_curclass, "$!cstack"
  rx1089_fail2905:
    unless rx1089_bstack, rx1089_done2903
    pop $I19, rx1089_bstack
    if_null rx1089_cstack, rx1089_cstack_done2908
    unless rx1089_cstack, rx1089_cstack_done2908
    dec $I19
    set $P11, rx1089_cstack[$I19]
  rx1089_cstack_done2908:
    pop rx1089_rep, rx1089_bstack
    pop rx1089_pos, rx1089_bstack
    pop $I19, rx1089_bstack
    lt rx1089_pos, -1, rx1089_done2903
    lt rx1089_pos, 0, rx1089_fail2905
    eq $I19, 0, rx1089_fail2905
    nqp_islist $I20, rx1089_cstack
    unless $I20, rx1089_jump2906
    elements $I18, rx1089_bstack
    le $I18, 0, rx1089_cut2907
    dec $I18
    set $I18, rx1089_bstack[$I18]
  rx1089_cut2907:
    assign rx1089_cstack, $I18
  rx1089_jump2906:
    jump $I19
  rx1089_done2903:
    rx1089_cur."!cursor_fail"()
    .return (rx1089_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_177_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1093_tgt
    .local int rx1093_pos
    .local int rx1093_off
    .local int rx1093_eos
    .local int rx1093_rep
    .local pmc rx1093_cur
    .local pmc rx1093_curclass
    .local pmc rx1093_bstack
    .local pmc rx1093_cstack
    (rx1093_cur, rx1093_tgt, rx1093_pos, rx1093_curclass, rx1093_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1093_cur
    length rx1093_eos, rx1093_tgt
    eq $I19, 1, rx1093_restart2917
    gt rx1093_pos, rx1093_eos, rx1093_fail2918
    repr_get_attr_int $I11, self, rx1093_curclass, "$!from"
    ne $I11, -1, rxscan1094_done2924
    goto rxscan1094_scan2923
  rxscan1094_loop2922:
    inc rx1093_pos
    gt rx1093_pos, rx1093_eos, rx1093_fail2918
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!from", rx1093_pos
  rxscan1094_scan2923:
    nqp_rxmark rx1093_bstack, rxscan1094_loop2922, rx1093_pos, 0
  rxscan1094_done2924:
    nqp_rxmark rx1093_bstack, rxcap1095_fail2926, rx1093_pos, 0
    add $I11, rx1093_pos, 2
    gt $I11, rx1093_eos, rx1093_fail2918
    substr $S10, rx1093_tgt, rx1093_pos, 2
    ne $S10, ucs4:"--", rx1093_fail2918
    add rx1093_pos, 2
    nqp_rxpeek $I19, rx1093_bstack, rxcap1095_fail2926
    inc $I19
    set $I11, rx1093_bstack[$I19]
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1093_pos)
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "sym")
    goto rxcap1095_done2925
  rxcap1095_fail2926:
    goto rx1093_fail2918
  rxcap1095_done2925:
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1093_curclass, "$!pos"
    lt $I11, 0, rx1093_fail2918
    nqp_rxmark rx1093_bstack, rxsubrule1096_pass2927, -1, 0
  rxsubrule1096_pass2927:
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1093_pos, $P11, rx1093_curclass, "$!pos"
    rx1093_cur."!cursor_pass"(rx1093_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1093_cur)
  rx1093_restart2917:
    repr_get_attr_obj rx1093_cstack, rx1093_cur, rx1093_curclass, "$!cstack"
  rx1093_fail2918:
    unless rx1093_bstack, rx1093_done2916
    pop $I19, rx1093_bstack
    if_null rx1093_cstack, rx1093_cstack_done2921
    unless rx1093_cstack, rx1093_cstack_done2921
    dec $I19
    set $P11, rx1093_cstack[$I19]
  rx1093_cstack_done2921:
    pop rx1093_rep, rx1093_bstack
    pop rx1093_pos, rx1093_bstack
    pop $I19, rx1093_bstack
    lt rx1093_pos, -1, rx1093_done2916
    lt rx1093_pos, 0, rx1093_fail2918
    eq $I19, 0, rx1093_fail2918
    nqp_islist $I20, rx1093_cstack
    unless $I20, rx1093_jump2919
    elements $I18, rx1093_bstack
    le $I18, 0, rx1093_cut2920
    dec $I18
    set $I18, rx1093_bstack[$I18]
  rx1093_cut2920:
    assign rx1093_cstack, $I18
  rx1093_jump2919:
    jump $I19
  rx1093_done2916:
    rx1093_cur."!cursor_fail"()
    .return (rx1093_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_178_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1097_tgt
    .local int rx1097_pos
    .local int rx1097_off
    .local int rx1097_eos
    .local int rx1097_rep
    .local pmc rx1097_cur
    .local pmc rx1097_curclass
    .local pmc rx1097_bstack
    .local pmc rx1097_cstack
    (rx1097_cur, rx1097_tgt, rx1097_pos, rx1097_curclass, rx1097_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1097_cur
    length rx1097_eos, rx1097_tgt
    eq $I19, 1, rx1097_restart2930
    gt rx1097_pos, rx1097_eos, rx1097_fail2931
    repr_get_attr_int $I11, self, rx1097_curclass, "$!from"
    ne $I11, -1, rxscan1098_done2937
    goto rxscan1098_scan2936
  rxscan1098_loop2935:
    inc rx1097_pos
    gt rx1097_pos, rx1097_eos, rx1097_fail2931
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!from", rx1097_pos
  rxscan1098_scan2936:
    nqp_rxmark rx1097_bstack, rxscan1098_loop2935, rx1097_pos, 0
  rxscan1098_done2937:
    nqp_rxmark rx1097_bstack, rxcap1099_fail2939, rx1097_pos, 0
    add $I11, rx1097_pos, 2
    gt $I11, rx1097_eos, rx1097_fail2931
    substr $S10, rx1097_tgt, rx1097_pos, 2
    ne $S10, ucs4:"++", rx1097_fail2931
    add rx1097_pos, 2
    nqp_rxpeek $I19, rx1097_bstack, rxcap1099_fail2939
    inc $I19
    set $I11, rx1097_bstack[$I19]
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1097_pos)
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "sym")
    goto rxcap1099_done2938
  rxcap1099_fail2939:
    goto rx1097_fail2931
  rxcap1099_done2938:
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1097_curclass, "$!pos"
    lt $I11, 0, rx1097_fail2931
    nqp_rxmark rx1097_bstack, rxsubrule1100_pass2940, -1, 0
  rxsubrule1100_pass2940:
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1097_pos, $P11, rx1097_curclass, "$!pos"
    rx1097_cur."!cursor_pass"(rx1097_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1097_cur)
  rx1097_restart2930:
    repr_get_attr_obj rx1097_cstack, rx1097_cur, rx1097_curclass, "$!cstack"
  rx1097_fail2931:
    unless rx1097_bstack, rx1097_done2929
    pop $I19, rx1097_bstack
    if_null rx1097_cstack, rx1097_cstack_done2934
    unless rx1097_cstack, rx1097_cstack_done2934
    dec $I19
    set $P11, rx1097_cstack[$I19]
  rx1097_cstack_done2934:
    pop rx1097_rep, rx1097_bstack
    pop rx1097_pos, rx1097_bstack
    pop $I19, rx1097_bstack
    lt rx1097_pos, -1, rx1097_done2929
    lt rx1097_pos, 0, rx1097_fail2931
    eq $I19, 0, rx1097_fail2931
    nqp_islist $I20, rx1097_cstack
    unless $I20, rx1097_jump2932
    elements $I18, rx1097_bstack
    le $I18, 0, rx1097_cut2933
    dec $I18
    set $I18, rx1097_bstack[$I18]
  rx1097_cut2933:
    assign rx1097_cstack, $I18
  rx1097_jump2932:
    jump $I19
  rx1097_done2929:
    rx1097_cur."!cursor_fail"()
    .return (rx1097_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_179_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1101_tgt
    .local int rx1101_pos
    .local int rx1101_off
    .local int rx1101_eos
    .local int rx1101_rep
    .local pmc rx1101_cur
    .local pmc rx1101_curclass
    .local pmc rx1101_bstack
    .local pmc rx1101_cstack
    (rx1101_cur, rx1101_tgt, rx1101_pos, rx1101_curclass, rx1101_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1101_cur
    length rx1101_eos, rx1101_tgt
    eq $I19, 1, rx1101_restart2943
    gt rx1101_pos, rx1101_eos, rx1101_fail2944
    repr_get_attr_int $I11, self, rx1101_curclass, "$!from"
    ne $I11, -1, rxscan1102_done2950
    goto rxscan1102_scan2949
  rxscan1102_loop2948:
    inc rx1101_pos
    gt rx1101_pos, rx1101_eos, rx1101_fail2944
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!from", rx1101_pos
  rxscan1102_scan2949:
    nqp_rxmark rx1101_bstack, rxscan1102_loop2948, rx1101_pos, 0
  rxscan1102_done2950:
    nqp_rxmark rx1101_bstack, rxcap1103_fail2952, rx1101_pos, 0
    add $I11, rx1101_pos, 2
    gt $I11, rx1101_eos, rx1101_fail2944
    substr $S10, rx1101_tgt, rx1101_pos, 2
    ne $S10, ucs4:"--", rx1101_fail2944
    add rx1101_pos, 2
    nqp_rxpeek $I19, rx1101_bstack, rxcap1103_fail2952
    inc $I19
    set $I11, rx1101_bstack[$I19]
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1101_pos)
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "sym")
    goto rxcap1103_done2951
  rxcap1103_fail2952:
    goto rx1101_fail2944
  rxcap1103_done2951:
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1101_curclass, "$!pos"
    lt $I11, 0, rx1101_fail2944
    nqp_rxmark rx1101_bstack, rxsubrule1104_pass2953, -1, 0
  rxsubrule1104_pass2953:
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1101_pos, $P11, rx1101_curclass, "$!pos"
    rx1101_cur."!cursor_pass"(rx1101_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1101_cur)
  rx1101_restart2943:
    repr_get_attr_obj rx1101_cstack, rx1101_cur, rx1101_curclass, "$!cstack"
  rx1101_fail2944:
    unless rx1101_bstack, rx1101_done2942
    pop $I19, rx1101_bstack
    if_null rx1101_cstack, rx1101_cstack_done2947
    unless rx1101_cstack, rx1101_cstack_done2947
    dec $I19
    set $P11, rx1101_cstack[$I19]
  rx1101_cstack_done2947:
    pop rx1101_rep, rx1101_bstack
    pop rx1101_pos, rx1101_bstack
    pop $I19, rx1101_bstack
    lt rx1101_pos, -1, rx1101_done2942
    lt rx1101_pos, 0, rx1101_fail2944
    eq $I19, 0, rx1101_fail2944
    nqp_islist $I20, rx1101_cstack
    unless $I20, rx1101_jump2945
    elements $I18, rx1101_bstack
    le $I18, 0, rx1101_cut2946
    dec $I18
    set $I18, rx1101_bstack[$I18]
  rx1101_cut2946:
    assign rx1101_cstack, $I18
  rx1101_jump2945:
    jump $I19
  rx1101_done2942:
    rx1101_cur."!cursor_fail"()
    .return (rx1101_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_180_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1105_tgt
    .local int rx1105_pos
    .local int rx1105_off
    .local int rx1105_eos
    .local int rx1105_rep
    .local pmc rx1105_cur
    .local pmc rx1105_curclass
    .local pmc rx1105_bstack
    .local pmc rx1105_cstack
    (rx1105_cur, rx1105_tgt, rx1105_pos, rx1105_curclass, rx1105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1105_cur
    length rx1105_eos, rx1105_tgt
    eq $I19, 1, rx1105_restart2956
    gt rx1105_pos, rx1105_eos, rx1105_fail2957
    repr_get_attr_int $I11, self, rx1105_curclass, "$!from"
    ne $I11, -1, rxscan1106_done2963
    goto rxscan1106_scan2962
  rxscan1106_loop2961:
    inc rx1105_pos
    gt rx1105_pos, rx1105_eos, rx1105_fail2957
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!from", rx1105_pos
  rxscan1106_scan2962:
    nqp_rxmark rx1105_bstack, rxscan1106_loop2961, rx1105_pos, 0
  rxscan1106_done2963:
    nqp_rxmark rx1105_bstack, rxcap1107_fail2965, rx1105_pos, 0
    add $I11, rx1105_pos, 2
    gt $I11, rx1105_eos, rx1105_fail2957
    substr $S10, rx1105_tgt, rx1105_pos, 2
    ne $S10, ucs4:"**", rx1105_fail2957
    add rx1105_pos, 2
    nqp_rxpeek $I19, rx1105_bstack, rxcap1107_fail2965
    inc $I19
    set $I11, rx1105_bstack[$I19]
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1105_pos)
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "sym")
    goto rxcap1107_done2964
  rxcap1107_fail2965:
    goto rx1105_fail2957
  rxcap1107_done2964:
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1105_curclass, "$!pos"
    lt $I11, 0, rx1105_fail2957
    nqp_rxmark rx1105_bstack, rxsubrule1108_pass2966, -1, 0
  rxsubrule1108_pass2966:
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1105_pos, $P11, rx1105_curclass, "$!pos"
    rx1105_cur."!cursor_pass"(rx1105_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1105_cur)
  rx1105_restart2956:
    repr_get_attr_obj rx1105_cstack, rx1105_cur, rx1105_curclass, "$!cstack"
  rx1105_fail2957:
    unless rx1105_bstack, rx1105_done2955
    pop $I19, rx1105_bstack
    if_null rx1105_cstack, rx1105_cstack_done2960
    unless rx1105_cstack, rx1105_cstack_done2960
    dec $I19
    set $P11, rx1105_cstack[$I19]
  rx1105_cstack_done2960:
    pop rx1105_rep, rx1105_bstack
    pop rx1105_pos, rx1105_bstack
    pop $I19, rx1105_bstack
    lt rx1105_pos, -1, rx1105_done2955
    lt rx1105_pos, 0, rx1105_fail2957
    eq $I19, 0, rx1105_fail2957
    nqp_islist $I20, rx1105_cstack
    unless $I20, rx1105_jump2958
    elements $I18, rx1105_bstack
    le $I18, 0, rx1105_cut2959
    dec $I18
    set $I18, rx1105_bstack[$I18]
  rx1105_cut2959:
    assign rx1105_cstack, $I18
  rx1105_jump2958:
    jump $I19
  rx1105_done2955:
    rx1105_cur."!cursor_fail"()
    .return (rx1105_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_181_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1109_tgt
    .local int rx1109_pos
    .local int rx1109_off
    .local int rx1109_eos
    .local int rx1109_rep
    .local pmc rx1109_cur
    .local pmc rx1109_curclass
    .local pmc rx1109_bstack
    .local pmc rx1109_cstack
    (rx1109_cur, rx1109_tgt, rx1109_pos, rx1109_curclass, rx1109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1109_cur
    length rx1109_eos, rx1109_tgt
    eq $I19, 1, rx1109_restart2969
    gt rx1109_pos, rx1109_eos, rx1109_fail2970
    repr_get_attr_int $I11, self, rx1109_curclass, "$!from"
    ne $I11, -1, rxscan1110_done2976
    goto rxscan1110_scan2975
  rxscan1110_loop2974:
    inc rx1109_pos
    gt rx1109_pos, rx1109_eos, rx1109_fail2970
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!from", rx1109_pos
  rxscan1110_scan2975:
    nqp_rxmark rx1109_bstack, rxscan1110_loop2974, rx1109_pos, 0
  rxscan1110_done2976:
    nqp_rxmark rx1109_bstack, rxcap1111_fail2978, rx1109_pos, 0
    add $I11, rx1109_pos, 1
    gt $I11, rx1109_eos, rx1109_fail2970
    substr $S10, rx1109_tgt, rx1109_pos, 1
    ne $S10, ucs4:"+", rx1109_fail2970
    add rx1109_pos, 1
    nqp_rxpeek $I19, rx1109_bstack, rxcap1111_fail2978
    inc $I19
    set $I11, rx1109_bstack[$I19]
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1109_pos)
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "sym")
    goto rxcap1111_done2977
  rxcap1111_fail2978:
    goto rx1109_fail2970
  rxcap1111_done2977:
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1109_curclass, "$!pos"
    lt $I11, 0, rx1109_fail2970
    nqp_rxmark rx1109_bstack, rxsubrule1112_pass2979, -1, 0
  rxsubrule1112_pass2979:
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1109_pos, $P11, rx1109_curclass, "$!pos"
    rx1109_cur."!cursor_pass"(rx1109_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1109_cur)
  rx1109_restart2969:
    repr_get_attr_obj rx1109_cstack, rx1109_cur, rx1109_curclass, "$!cstack"
  rx1109_fail2970:
    unless rx1109_bstack, rx1109_done2968
    pop $I19, rx1109_bstack
    if_null rx1109_cstack, rx1109_cstack_done2973
    unless rx1109_cstack, rx1109_cstack_done2973
    dec $I19
    set $P11, rx1109_cstack[$I19]
  rx1109_cstack_done2973:
    pop rx1109_rep, rx1109_bstack
    pop rx1109_pos, rx1109_bstack
    pop $I19, rx1109_bstack
    lt rx1109_pos, -1, rx1109_done2968
    lt rx1109_pos, 0, rx1109_fail2970
    eq $I19, 0, rx1109_fail2970
    nqp_islist $I20, rx1109_cstack
    unless $I20, rx1109_jump2971
    elements $I18, rx1109_bstack
    le $I18, 0, rx1109_cut2972
    dec $I18
    set $I18, rx1109_bstack[$I18]
  rx1109_cut2972:
    assign rx1109_cstack, $I18
  rx1109_jump2971:
    jump $I19
  rx1109_done2968:
    rx1109_cur."!cursor_fail"()
    .return (rx1109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_182_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1113_tgt
    .local int rx1113_pos
    .local int rx1113_off
    .local int rx1113_eos
    .local int rx1113_rep
    .local pmc rx1113_cur
    .local pmc rx1113_curclass
    .local pmc rx1113_bstack
    .local pmc rx1113_cstack
    (rx1113_cur, rx1113_tgt, rx1113_pos, rx1113_curclass, rx1113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1113_cur
    length rx1113_eos, rx1113_tgt
    eq $I19, 1, rx1113_restart2982
    gt rx1113_pos, rx1113_eos, rx1113_fail2983
    repr_get_attr_int $I11, self, rx1113_curclass, "$!from"
    ne $I11, -1, rxscan1114_done2989
    goto rxscan1114_scan2988
  rxscan1114_loop2987:
    inc rx1113_pos
    gt rx1113_pos, rx1113_eos, rx1113_fail2983
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!from", rx1113_pos
  rxscan1114_scan2988:
    nqp_rxmark rx1113_bstack, rxscan1114_loop2987, rx1113_pos, 0
  rxscan1114_done2989:
    nqp_rxmark rx1113_bstack, rxcap1115_fail2991, rx1113_pos, 0
    add $I11, rx1113_pos, 1
    gt $I11, rx1113_eos, rx1113_fail2983
    substr $S10, rx1113_tgt, rx1113_pos, 1
    ne $S10, ucs4:"~", rx1113_fail2983
    add rx1113_pos, 1
    nqp_rxpeek $I19, rx1113_bstack, rxcap1115_fail2991
    inc $I19
    set $I11, rx1113_bstack[$I19]
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1113_pos)
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "sym")
    goto rxcap1115_done2990
  rxcap1115_fail2991:
    goto rx1113_fail2983
  rxcap1115_done2990:
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1113_curclass, "$!pos"
    lt $I11, 0, rx1113_fail2983
    nqp_rxmark rx1113_bstack, rxsubrule1116_pass2992, -1, 0
  rxsubrule1116_pass2992:
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1113_pos, $P11, rx1113_curclass, "$!pos"
    rx1113_cur."!cursor_pass"(rx1113_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1113_cur)
  rx1113_restart2982:
    repr_get_attr_obj rx1113_cstack, rx1113_cur, rx1113_curclass, "$!cstack"
  rx1113_fail2983:
    unless rx1113_bstack, rx1113_done2981
    pop $I19, rx1113_bstack
    if_null rx1113_cstack, rx1113_cstack_done2986
    unless rx1113_cstack, rx1113_cstack_done2986
    dec $I19
    set $P11, rx1113_cstack[$I19]
  rx1113_cstack_done2986:
    pop rx1113_rep, rx1113_bstack
    pop rx1113_pos, rx1113_bstack
    pop $I19, rx1113_bstack
    lt rx1113_pos, -1, rx1113_done2981
    lt rx1113_pos, 0, rx1113_fail2983
    eq $I19, 0, rx1113_fail2983
    nqp_islist $I20, rx1113_cstack
    unless $I20, rx1113_jump2984
    elements $I18, rx1113_bstack
    le $I18, 0, rx1113_cut2985
    dec $I18
    set $I18, rx1113_bstack[$I18]
  rx1113_cut2985:
    assign rx1113_cstack, $I18
  rx1113_jump2984:
    jump $I19
  rx1113_done2981:
    rx1113_cur."!cursor_fail"()
    .return (rx1113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_183_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1117_tgt
    .local int rx1117_pos
    .local int rx1117_off
    .local int rx1117_eos
    .local int rx1117_rep
    .local pmc rx1117_cur
    .local pmc rx1117_curclass
    .local pmc rx1117_bstack
    .local pmc rx1117_cstack
    (rx1117_cur, rx1117_tgt, rx1117_pos, rx1117_curclass, rx1117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1117_cur
    length rx1117_eos, rx1117_tgt
    eq $I19, 1, rx1117_restart2995
    gt rx1117_pos, rx1117_eos, rx1117_fail2996
    repr_get_attr_int $I11, self, rx1117_curclass, "$!from"
    ne $I11, -1, rxscan1118_done3002
    goto rxscan1118_scan3001
  rxscan1118_loop3000:
    inc rx1117_pos
    gt rx1117_pos, rx1117_eos, rx1117_fail2996
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!from", rx1117_pos
  rxscan1118_scan3001:
    nqp_rxmark rx1117_bstack, rxscan1118_loop3000, rx1117_pos, 0
  rxscan1118_done3002:
    nqp_rxmark rx1117_bstack, rxcap1119_fail3004, rx1117_pos, 0
    add $I11, rx1117_pos, 1
    gt $I11, rx1117_eos, rx1117_fail2996
    substr $S10, rx1117_tgt, rx1117_pos, 1
    ne $S10, ucs4:"-", rx1117_fail2996
    add rx1117_pos, 1
    nqp_rxpeek $I19, rx1117_bstack, rxcap1119_fail3004
    inc $I19
    set $I11, rx1117_bstack[$I19]
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1117_pos)
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "sym")
    goto rxcap1119_done3003
  rxcap1119_fail3004:
    goto rx1117_fail2996
  rxcap1119_done3003:
    ge rx1117_pos, rx1117_eos, rx1117_fail2996
    substr $S11, rx1117_tgt, rx1117_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1117_fail2996
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."number"()
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    ge $I11, 0, rx1117_fail2996
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail2996
    nqp_rxmark rx1117_bstack, rxsubrule1120_pass3005, -1, 0
  rxsubrule1120_pass3005:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
    rx1117_cur."!cursor_pass"(rx1117_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1117_cur)
  rx1117_restart2995:
    repr_get_attr_obj rx1117_cstack, rx1117_cur, rx1117_curclass, "$!cstack"
  rx1117_fail2996:
    unless rx1117_bstack, rx1117_done2994
    pop $I19, rx1117_bstack
    if_null rx1117_cstack, rx1117_cstack_done2999
    unless rx1117_cstack, rx1117_cstack_done2999
    dec $I19
    set $P11, rx1117_cstack[$I19]
  rx1117_cstack_done2999:
    pop rx1117_rep, rx1117_bstack
    pop rx1117_pos, rx1117_bstack
    pop $I19, rx1117_bstack
    lt rx1117_pos, -1, rx1117_done2994
    lt rx1117_pos, 0, rx1117_fail2996
    eq $I19, 0, rx1117_fail2996
    nqp_islist $I20, rx1117_cstack
    unless $I20, rx1117_jump2997
    elements $I18, rx1117_bstack
    le $I18, 0, rx1117_cut2998
    dec $I18
    set $I18, rx1117_bstack[$I18]
  rx1117_cut2998:
    assign rx1117_cstack, $I18
  rx1117_jump2997:
    jump $I19
  rx1117_done2994:
    rx1117_cur."!cursor_fail"()
    .return (rx1117_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_184_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1326
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1121_tgt
    .local int rx1121_pos
    .local int rx1121_off
    .local int rx1121_eos
    .local int rx1121_rep
    .local pmc rx1121_cur
    .local pmc rx1121_curclass
    .local pmc rx1121_bstack
    .local pmc rx1121_cstack
    (rx1121_cur, rx1121_tgt, rx1121_pos, rx1121_curclass, rx1121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1121_cur
    length rx1121_eos, rx1121_tgt
    eq $I19, 1, rx1121_restart3008
    gt rx1121_pos, rx1121_eos, rx1121_fail3009
    repr_get_attr_int $I11, self, rx1121_curclass, "$!from"
    ne $I11, -1, rxscan1122_done3015
    goto rxscan1122_scan3014
  rxscan1122_loop3013:
    inc rx1121_pos
    gt rx1121_pos, rx1121_eos, rx1121_fail3009
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!from", rx1121_pos
  rxscan1122_scan3014:
    nqp_rxmark rx1121_bstack, rxscan1122_loop3013, rx1121_pos, 0
  rxscan1122_done3015:
    nqp_rxmark rx1121_bstack, rxcap1123_fail3017, rx1121_pos, 0
    add $I11, rx1121_pos, 1
    gt $I11, rx1121_eos, rx1121_fail3009
    substr $S10, rx1121_tgt, rx1121_pos, 1
    ne $S10, ucs4:"?", rx1121_fail3009
    add rx1121_pos, 1
    nqp_rxpeek $I19, rx1121_bstack, rxcap1123_fail3017
    inc $I19
    set $I11, rx1121_bstack[$I19]
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1121_pos)
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "sym")
    goto rxcap1123_done3016
  rxcap1123_fail3017:
    goto rx1121_fail3009
  rxcap1123_done3016:
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1121_curclass, "$!pos"
    lt $I11, 0, rx1121_fail3009
    nqp_rxmark rx1121_bstack, rxsubrule1124_pass3018, -1, 0
  rxsubrule1124_pass3018:
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1121_pos, $P11, rx1121_curclass, "$!pos"
    rx1121_cur."!cursor_pass"(rx1121_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1121_cur)
  rx1121_restart3008:
    repr_get_attr_obj rx1121_cstack, rx1121_cur, rx1121_curclass, "$!cstack"
  rx1121_fail3009:
    unless rx1121_bstack, rx1121_done3007
    pop $I19, rx1121_bstack
    if_null rx1121_cstack, rx1121_cstack_done3012
    unless rx1121_cstack, rx1121_cstack_done3012
    dec $I19
    set $P11, rx1121_cstack[$I19]
  rx1121_cstack_done3012:
    pop rx1121_rep, rx1121_bstack
    pop rx1121_pos, rx1121_bstack
    pop $I19, rx1121_bstack
    lt rx1121_pos, -1, rx1121_done3007
    lt rx1121_pos, 0, rx1121_fail3009
    eq $I19, 0, rx1121_fail3009
    nqp_islist $I20, rx1121_cstack
    unless $I20, rx1121_jump3010
    elements $I18, rx1121_bstack
    le $I18, 0, rx1121_cut3011
    dec $I18
    set $I18, rx1121_bstack[$I18]
  rx1121_cut3011:
    assign rx1121_cstack, $I18
  rx1121_jump3010:
    jump $I19
  rx1121_done3007:
    rx1121_cur."!cursor_fail"()
    .return (rx1121_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_185_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1327
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1125_tgt
    .local int rx1125_pos
    .local int rx1125_off
    .local int rx1125_eos
    .local int rx1125_rep
    .local pmc rx1125_cur
    .local pmc rx1125_curclass
    .local pmc rx1125_bstack
    .local pmc rx1125_cstack
    (rx1125_cur, rx1125_tgt, rx1125_pos, rx1125_curclass, rx1125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1125_cur
    length rx1125_eos, rx1125_tgt
    eq $I19, 1, rx1125_restart3021
    gt rx1125_pos, rx1125_eos, rx1125_fail3022
    repr_get_attr_int $I11, self, rx1125_curclass, "$!from"
    ne $I11, -1, rxscan1126_done3028
    goto rxscan1126_scan3027
  rxscan1126_loop3026:
    inc rx1125_pos
    gt rx1125_pos, rx1125_eos, rx1125_fail3022
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!from", rx1125_pos
  rxscan1126_scan3027:
    nqp_rxmark rx1125_bstack, rxscan1126_loop3026, rx1125_pos, 0
  rxscan1126_done3028:
    nqp_rxmark rx1125_bstack, rxcap1127_fail3030, rx1125_pos, 0
    add $I11, rx1125_pos, 1
    gt $I11, rx1125_eos, rx1125_fail3022
    substr $S10, rx1125_tgt, rx1125_pos, 1
    ne $S10, ucs4:"!", rx1125_fail3022
    add rx1125_pos, 1
    nqp_rxpeek $I19, rx1125_bstack, rxcap1127_fail3030
    inc $I19
    set $I11, rx1125_bstack[$I19]
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1125_pos)
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "sym")
    goto rxcap1127_done3029
  rxcap1127_fail3030:
    goto rx1125_fail3022
  rxcap1127_done3029:
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."O"("%symbolic_unary, :op<falsey>")
    repr_get_attr_int $I11, $P11, rx1125_curclass, "$!pos"
    lt $I11, 0, rx1125_fail3022
    nqp_rxmark rx1125_bstack, rxsubrule1128_pass3031, -1, 0
  rxsubrule1128_pass3031:
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1125_pos, $P11, rx1125_curclass, "$!pos"
    rx1125_cur."!cursor_pass"(rx1125_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1125_cur)
  rx1125_restart3021:
    repr_get_attr_obj rx1125_cstack, rx1125_cur, rx1125_curclass, "$!cstack"
  rx1125_fail3022:
    unless rx1125_bstack, rx1125_done3020
    pop $I19, rx1125_bstack
    if_null rx1125_cstack, rx1125_cstack_done3025
    unless rx1125_cstack, rx1125_cstack_done3025
    dec $I19
    set $P11, rx1125_cstack[$I19]
  rx1125_cstack_done3025:
    pop rx1125_rep, rx1125_bstack
    pop rx1125_pos, rx1125_bstack
    pop $I19, rx1125_bstack
    lt rx1125_pos, -1, rx1125_done3020
    lt rx1125_pos, 0, rx1125_fail3022
    eq $I19, 0, rx1125_fail3022
    nqp_islist $I20, rx1125_cstack
    unless $I20, rx1125_jump3023
    elements $I18, rx1125_bstack
    le $I18, 0, rx1125_cut3024
    dec $I18
    set $I18, rx1125_bstack[$I18]
  rx1125_cut3024:
    assign rx1125_cstack, $I18
  rx1125_jump3023:
    jump $I19
  rx1125_done3020:
    rx1125_cur."!cursor_fail"()
    .return (rx1125_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_186_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1328
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1129_tgt
    .local int rx1129_pos
    .local int rx1129_off
    .local int rx1129_eos
    .local int rx1129_rep
    .local pmc rx1129_cur
    .local pmc rx1129_curclass
    .local pmc rx1129_bstack
    .local pmc rx1129_cstack
    (rx1129_cur, rx1129_tgt, rx1129_pos, rx1129_curclass, rx1129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1129_cur
    length rx1129_eos, rx1129_tgt
    eq $I19, 1, rx1129_restart3034
    gt rx1129_pos, rx1129_eos, rx1129_fail3035
    repr_get_attr_int $I11, self, rx1129_curclass, "$!from"
    ne $I11, -1, rxscan1130_done3041
    goto rxscan1130_scan3040
  rxscan1130_loop3039:
    inc rx1129_pos
    gt rx1129_pos, rx1129_eos, rx1129_fail3035
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!from", rx1129_pos
  rxscan1130_scan3040:
    nqp_rxmark rx1129_bstack, rxscan1130_loop3039, rx1129_pos, 0
  rxscan1130_done3041:
    nqp_rxmark rx1129_bstack, rxcap1131_fail3043, rx1129_pos, 0
    add $I11, rx1129_pos, 1
    gt $I11, rx1129_eos, rx1129_fail3035
    substr $S10, rx1129_tgt, rx1129_pos, 1
    ne $S10, ucs4:"|", rx1129_fail3035
    add rx1129_pos, 1
    nqp_rxpeek $I19, rx1129_bstack, rxcap1131_fail3043
    inc $I19
    set $I11, rx1129_bstack[$I19]
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1129_pos)
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "sym")
    goto rxcap1131_done3042
  rxcap1131_fail3043:
    goto rx1129_fail3035
  rxcap1131_done3042:
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1129_curclass, "$!pos"
    lt $I11, 0, rx1129_fail3035
    nqp_rxmark rx1129_bstack, rxsubrule1132_pass3044, -1, 0
  rxsubrule1132_pass3044:
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1129_pos, $P11, rx1129_curclass, "$!pos"
    rx1129_cur."!cursor_pass"(rx1129_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1129_cur)
  rx1129_restart3034:
    repr_get_attr_obj rx1129_cstack, rx1129_cur, rx1129_curclass, "$!cstack"
  rx1129_fail3035:
    unless rx1129_bstack, rx1129_done3033
    pop $I19, rx1129_bstack
    if_null rx1129_cstack, rx1129_cstack_done3038
    unless rx1129_cstack, rx1129_cstack_done3038
    dec $I19
    set $P11, rx1129_cstack[$I19]
  rx1129_cstack_done3038:
    pop rx1129_rep, rx1129_bstack
    pop rx1129_pos, rx1129_bstack
    pop $I19, rx1129_bstack
    lt rx1129_pos, -1, rx1129_done3033
    lt rx1129_pos, 0, rx1129_fail3035
    eq $I19, 0, rx1129_fail3035
    nqp_islist $I20, rx1129_cstack
    unless $I20, rx1129_jump3036
    elements $I18, rx1129_bstack
    le $I18, 0, rx1129_cut3037
    dec $I18
    set $I18, rx1129_bstack[$I18]
  rx1129_cut3037:
    assign rx1129_cstack, $I18
  rx1129_jump3036:
    jump $I19
  rx1129_done3033:
    rx1129_cur."!cursor_fail"()
    .return (rx1129_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_187_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1133_tgt
    .local int rx1133_pos
    .local int rx1133_off
    .local int rx1133_eos
    .local int rx1133_rep
    .local pmc rx1133_cur
    .local pmc rx1133_curclass
    .local pmc rx1133_bstack
    .local pmc rx1133_cstack
    (rx1133_cur, rx1133_tgt, rx1133_pos, rx1133_curclass, rx1133_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1133_cur
    length rx1133_eos, rx1133_tgt
    eq $I19, 1, rx1133_restart3047
    gt rx1133_pos, rx1133_eos, rx1133_fail3048
    repr_get_attr_int $I11, self, rx1133_curclass, "$!from"
    ne $I11, -1, rxscan1134_done3054
    goto rxscan1134_scan3053
  rxscan1134_loop3052:
    inc rx1133_pos
    gt rx1133_pos, rx1133_eos, rx1133_fail3048
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!from", rx1133_pos
  rxscan1134_scan3053:
    nqp_rxmark rx1133_bstack, rxscan1134_loop3052, rx1133_pos, 0
  rxscan1134_done3054:
    nqp_rxmark rx1133_bstack, rxcap1135_fail3056, rx1133_pos, 0
    add $I11, rx1133_pos, 1
    gt $I11, rx1133_eos, rx1133_fail3048
    substr $S10, rx1133_tgt, rx1133_pos, 1
    ne $S10, ucs4:"*", rx1133_fail3048
    add rx1133_pos, 1
    nqp_rxpeek $I19, rx1133_bstack, rxcap1135_fail3056
    inc $I19
    set $I11, rx1133_bstack[$I19]
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1133_pos)
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "sym")
    goto rxcap1135_done3055
  rxcap1135_fail3056:
    goto rx1133_fail3048
  rxcap1135_done3055:
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1133_curclass, "$!pos"
    lt $I11, 0, rx1133_fail3048
    nqp_rxmark rx1133_bstack, rxsubrule1136_pass3057, -1, 0
  rxsubrule1136_pass3057:
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1133_pos, $P11, rx1133_curclass, "$!pos"
    rx1133_cur."!cursor_pass"(rx1133_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1133_cur)
  rx1133_restart3047:
    repr_get_attr_obj rx1133_cstack, rx1133_cur, rx1133_curclass, "$!cstack"
  rx1133_fail3048:
    unless rx1133_bstack, rx1133_done3046
    pop $I19, rx1133_bstack
    if_null rx1133_cstack, rx1133_cstack_done3051
    unless rx1133_cstack, rx1133_cstack_done3051
    dec $I19
    set $P11, rx1133_cstack[$I19]
  rx1133_cstack_done3051:
    pop rx1133_rep, rx1133_bstack
    pop rx1133_pos, rx1133_bstack
    pop $I19, rx1133_bstack
    lt rx1133_pos, -1, rx1133_done3046
    lt rx1133_pos, 0, rx1133_fail3048
    eq $I19, 0, rx1133_fail3048
    nqp_islist $I20, rx1133_cstack
    unless $I20, rx1133_jump3049
    elements $I18, rx1133_bstack
    le $I18, 0, rx1133_cut3050
    dec $I18
    set $I18, rx1133_bstack[$I18]
  rx1133_cut3050:
    assign rx1133_cstack, $I18
  rx1133_jump3049:
    jump $I19
  rx1133_done3046:
    rx1133_cur."!cursor_fail"()
    .return (rx1133_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_188_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1331
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1137_tgt
    .local int rx1137_pos
    .local int rx1137_off
    .local int rx1137_eos
    .local int rx1137_rep
    .local pmc rx1137_cur
    .local pmc rx1137_curclass
    .local pmc rx1137_bstack
    .local pmc rx1137_cstack
    (rx1137_cur, rx1137_tgt, rx1137_pos, rx1137_curclass, rx1137_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1137_cur
    length rx1137_eos, rx1137_tgt
    eq $I19, 1, rx1137_restart3060
    gt rx1137_pos, rx1137_eos, rx1137_fail3061
    repr_get_attr_int $I11, self, rx1137_curclass, "$!from"
    ne $I11, -1, rxscan1138_done3067
    goto rxscan1138_scan3066
  rxscan1138_loop3065:
    inc rx1137_pos
    gt rx1137_pos, rx1137_eos, rx1137_fail3061
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!from", rx1137_pos
  rxscan1138_scan3066:
    nqp_rxmark rx1137_bstack, rxscan1138_loop3065, rx1137_pos, 0
  rxscan1138_done3067:
    nqp_rxmark rx1137_bstack, rxcap1139_fail3069, rx1137_pos, 0
    add $I11, rx1137_pos, 1
    gt $I11, rx1137_eos, rx1137_fail3061
    substr $S10, rx1137_tgt, rx1137_pos, 1
    ne $S10, ucs4:"/", rx1137_fail3061
    add rx1137_pos, 1
    nqp_rxpeek $I19, rx1137_bstack, rxcap1139_fail3069
    inc $I19
    set $I11, rx1137_bstack[$I19]
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1137_pos)
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "sym")
    goto rxcap1139_done3068
  rxcap1139_fail3069:
    goto rx1137_fail3061
  rxcap1139_done3068:
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1137_curclass, "$!pos"
    lt $I11, 0, rx1137_fail3061
    nqp_rxmark rx1137_bstack, rxsubrule1140_pass3070, -1, 0
  rxsubrule1140_pass3070:
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1137_pos, $P11, rx1137_curclass, "$!pos"
    rx1137_cur."!cursor_pass"(rx1137_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1137_cur)
  rx1137_restart3060:
    repr_get_attr_obj rx1137_cstack, rx1137_cur, rx1137_curclass, "$!cstack"
  rx1137_fail3061:
    unless rx1137_bstack, rx1137_done3059
    pop $I19, rx1137_bstack
    if_null rx1137_cstack, rx1137_cstack_done3064
    unless rx1137_cstack, rx1137_cstack_done3064
    dec $I19
    set $P11, rx1137_cstack[$I19]
  rx1137_cstack_done3064:
    pop rx1137_rep, rx1137_bstack
    pop rx1137_pos, rx1137_bstack
    pop $I19, rx1137_bstack
    lt rx1137_pos, -1, rx1137_done3059
    lt rx1137_pos, 0, rx1137_fail3061
    eq $I19, 0, rx1137_fail3061
    nqp_islist $I20, rx1137_cstack
    unless $I20, rx1137_jump3062
    elements $I18, rx1137_bstack
    le $I18, 0, rx1137_cut3063
    dec $I18
    set $I18, rx1137_bstack[$I18]
  rx1137_cut3063:
    assign rx1137_cstack, $I18
  rx1137_jump3062:
    jump $I19
  rx1137_done3059:
    rx1137_cur."!cursor_fail"()
    .return (rx1137_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_189_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1332
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1141_tgt
    .local int rx1141_pos
    .local int rx1141_off
    .local int rx1141_eos
    .local int rx1141_rep
    .local pmc rx1141_cur
    .local pmc rx1141_curclass
    .local pmc rx1141_bstack
    .local pmc rx1141_cstack
    (rx1141_cur, rx1141_tgt, rx1141_pos, rx1141_curclass, rx1141_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1141_cur
    length rx1141_eos, rx1141_tgt
    eq $I19, 1, rx1141_restart3073
    gt rx1141_pos, rx1141_eos, rx1141_fail3074
    repr_get_attr_int $I11, self, rx1141_curclass, "$!from"
    ne $I11, -1, rxscan1142_done3080
    goto rxscan1142_scan3079
  rxscan1142_loop3078:
    inc rx1141_pos
    gt rx1141_pos, rx1141_eos, rx1141_fail3074
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!from", rx1141_pos
  rxscan1142_scan3079:
    nqp_rxmark rx1141_bstack, rxscan1142_loop3078, rx1141_pos, 0
  rxscan1142_done3080:
    nqp_rxmark rx1141_bstack, rxcap1143_fail3082, rx1141_pos, 0
    add $I11, rx1141_pos, 1
    gt $I11, rx1141_eos, rx1141_fail3074
    substr $S10, rx1141_tgt, rx1141_pos, 1
    ne $S10, ucs4:"%", rx1141_fail3074
    add rx1141_pos, 1
    nqp_rxpeek $I19, rx1141_bstack, rxcap1143_fail3082
    inc $I19
    set $I11, rx1141_bstack[$I19]
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1141_pos)
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "sym")
    goto rxcap1143_done3081
  rxcap1143_fail3082:
    goto rx1141_fail3074
  rxcap1143_done3081:
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1141_curclass, "$!pos"
    lt $I11, 0, rx1141_fail3074
    nqp_rxmark rx1141_bstack, rxsubrule1144_pass3083, -1, 0
  rxsubrule1144_pass3083:
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1141_pos, $P11, rx1141_curclass, "$!pos"
    rx1141_cur."!cursor_pass"(rx1141_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1141_cur)
  rx1141_restart3073:
    repr_get_attr_obj rx1141_cstack, rx1141_cur, rx1141_curclass, "$!cstack"
  rx1141_fail3074:
    unless rx1141_bstack, rx1141_done3072
    pop $I19, rx1141_bstack
    if_null rx1141_cstack, rx1141_cstack_done3077
    unless rx1141_cstack, rx1141_cstack_done3077
    dec $I19
    set $P11, rx1141_cstack[$I19]
  rx1141_cstack_done3077:
    pop rx1141_rep, rx1141_bstack
    pop rx1141_pos, rx1141_bstack
    pop $I19, rx1141_bstack
    lt rx1141_pos, -1, rx1141_done3072
    lt rx1141_pos, 0, rx1141_fail3074
    eq $I19, 0, rx1141_fail3074
    nqp_islist $I20, rx1141_cstack
    unless $I20, rx1141_jump3075
    elements $I18, rx1141_bstack
    le $I18, 0, rx1141_cut3076
    dec $I18
    set $I18, rx1141_bstack[$I18]
  rx1141_cut3076:
    assign rx1141_cstack, $I18
  rx1141_jump3075:
    jump $I19
  rx1141_done3072:
    rx1141_cur."!cursor_fail"()
    .return (rx1141_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_190_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1333
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1145_tgt
    .local int rx1145_pos
    .local int rx1145_off
    .local int rx1145_eos
    .local int rx1145_rep
    .local pmc rx1145_cur
    .local pmc rx1145_curclass
    .local pmc rx1145_bstack
    .local pmc rx1145_cstack
    (rx1145_cur, rx1145_tgt, rx1145_pos, rx1145_curclass, rx1145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1145_cur
    length rx1145_eos, rx1145_tgt
    eq $I19, 1, rx1145_restart3086
    gt rx1145_pos, rx1145_eos, rx1145_fail3087
    repr_get_attr_int $I11, self, rx1145_curclass, "$!from"
    ne $I11, -1, rxscan1146_done3093
    goto rxscan1146_scan3092
  rxscan1146_loop3091:
    inc rx1145_pos
    gt rx1145_pos, rx1145_eos, rx1145_fail3087
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!from", rx1145_pos
  rxscan1146_scan3092:
    nqp_rxmark rx1145_bstack, rxscan1146_loop3091, rx1145_pos, 0
  rxscan1146_done3093:
    nqp_rxmark rx1145_bstack, rxcap1147_fail3095, rx1145_pos, 0
    add $I11, rx1145_pos, 2
    gt $I11, rx1145_eos, rx1145_fail3087
    substr $S10, rx1145_tgt, rx1145_pos, 2
    ne $S10, ucs4:"+&", rx1145_fail3087
    add rx1145_pos, 2
    nqp_rxpeek $I19, rx1145_bstack, rxcap1147_fail3095
    inc $I19
    set $I11, rx1145_bstack[$I19]
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1145_pos)
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "sym")
    goto rxcap1147_done3094
  rxcap1147_fail3095:
    goto rx1145_fail3087
  rxcap1147_done3094:
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1145_curclass, "$!pos"
    lt $I11, 0, rx1145_fail3087
    nqp_rxmark rx1145_bstack, rxsubrule1148_pass3096, -1, 0
  rxsubrule1148_pass3096:
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1145_pos, $P11, rx1145_curclass, "$!pos"
    rx1145_cur."!cursor_pass"(rx1145_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1145_cur)
  rx1145_restart3086:
    repr_get_attr_obj rx1145_cstack, rx1145_cur, rx1145_curclass, "$!cstack"
  rx1145_fail3087:
    unless rx1145_bstack, rx1145_done3085
    pop $I19, rx1145_bstack
    if_null rx1145_cstack, rx1145_cstack_done3090
    unless rx1145_cstack, rx1145_cstack_done3090
    dec $I19
    set $P11, rx1145_cstack[$I19]
  rx1145_cstack_done3090:
    pop rx1145_rep, rx1145_bstack
    pop rx1145_pos, rx1145_bstack
    pop $I19, rx1145_bstack
    lt rx1145_pos, -1, rx1145_done3085
    lt rx1145_pos, 0, rx1145_fail3087
    eq $I19, 0, rx1145_fail3087
    nqp_islist $I20, rx1145_cstack
    unless $I20, rx1145_jump3088
    elements $I18, rx1145_bstack
    le $I18, 0, rx1145_cut3089
    dec $I18
    set $I18, rx1145_bstack[$I18]
  rx1145_cut3089:
    assign rx1145_cstack, $I18
  rx1145_jump3088:
    jump $I19
  rx1145_done3085:
    rx1145_cur."!cursor_fail"()
    .return (rx1145_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_191_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1335
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1149_tgt
    .local int rx1149_pos
    .local int rx1149_off
    .local int rx1149_eos
    .local int rx1149_rep
    .local pmc rx1149_cur
    .local pmc rx1149_curclass
    .local pmc rx1149_bstack
    .local pmc rx1149_cstack
    (rx1149_cur, rx1149_tgt, rx1149_pos, rx1149_curclass, rx1149_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1149_cur
    length rx1149_eos, rx1149_tgt
    eq $I19, 1, rx1149_restart3099
    gt rx1149_pos, rx1149_eos, rx1149_fail3100
    repr_get_attr_int $I11, self, rx1149_curclass, "$!from"
    ne $I11, -1, rxscan1150_done3106
    goto rxscan1150_scan3105
  rxscan1150_loop3104:
    inc rx1149_pos
    gt rx1149_pos, rx1149_eos, rx1149_fail3100
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!from", rx1149_pos
  rxscan1150_scan3105:
    nqp_rxmark rx1149_bstack, rxscan1150_loop3104, rx1149_pos, 0
  rxscan1150_done3106:
    nqp_rxmark rx1149_bstack, rxcap1151_fail3108, rx1149_pos, 0
    add $I11, rx1149_pos, 1
    gt $I11, rx1149_eos, rx1149_fail3100
    substr $S10, rx1149_tgt, rx1149_pos, 1
    ne $S10, ucs4:"+", rx1149_fail3100
    add rx1149_pos, 1
    nqp_rxpeek $I19, rx1149_bstack, rxcap1151_fail3108
    inc $I19
    set $I11, rx1149_bstack[$I19]
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1149_pos)
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "sym")
    goto rxcap1151_done3107
  rxcap1151_fail3108:
    goto rx1149_fail3100
  rxcap1151_done3107:
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1149_curclass, "$!pos"
    lt $I11, 0, rx1149_fail3100
    nqp_rxmark rx1149_bstack, rxsubrule1152_pass3109, -1, 0
  rxsubrule1152_pass3109:
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1149_pos, $P11, rx1149_curclass, "$!pos"
    rx1149_cur."!cursor_pass"(rx1149_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1149_cur)
  rx1149_restart3099:
    repr_get_attr_obj rx1149_cstack, rx1149_cur, rx1149_curclass, "$!cstack"
  rx1149_fail3100:
    unless rx1149_bstack, rx1149_done3098
    pop $I19, rx1149_bstack
    if_null rx1149_cstack, rx1149_cstack_done3103
    unless rx1149_cstack, rx1149_cstack_done3103
    dec $I19
    set $P11, rx1149_cstack[$I19]
  rx1149_cstack_done3103:
    pop rx1149_rep, rx1149_bstack
    pop rx1149_pos, rx1149_bstack
    pop $I19, rx1149_bstack
    lt rx1149_pos, -1, rx1149_done3098
    lt rx1149_pos, 0, rx1149_fail3100
    eq $I19, 0, rx1149_fail3100
    nqp_islist $I20, rx1149_cstack
    unless $I20, rx1149_jump3101
    elements $I18, rx1149_bstack
    le $I18, 0, rx1149_cut3102
    dec $I18
    set $I18, rx1149_bstack[$I18]
  rx1149_cut3102:
    assign rx1149_cstack, $I18
  rx1149_jump3101:
    jump $I19
  rx1149_done3098:
    rx1149_cur."!cursor_fail"()
    .return (rx1149_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_192_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1336
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1153_tgt
    .local int rx1153_pos
    .local int rx1153_off
    .local int rx1153_eos
    .local int rx1153_rep
    .local pmc rx1153_cur
    .local pmc rx1153_curclass
    .local pmc rx1153_bstack
    .local pmc rx1153_cstack
    (rx1153_cur, rx1153_tgt, rx1153_pos, rx1153_curclass, rx1153_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1153_cur
    length rx1153_eos, rx1153_tgt
    eq $I19, 1, rx1153_restart3112
    gt rx1153_pos, rx1153_eos, rx1153_fail3113
    repr_get_attr_int $I11, self, rx1153_curclass, "$!from"
    ne $I11, -1, rxscan1154_done3119
    goto rxscan1154_scan3118
  rxscan1154_loop3117:
    inc rx1153_pos
    gt rx1153_pos, rx1153_eos, rx1153_fail3113
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!from", rx1153_pos
  rxscan1154_scan3118:
    nqp_rxmark rx1153_bstack, rxscan1154_loop3117, rx1153_pos, 0
  rxscan1154_done3119:
    nqp_rxmark rx1153_bstack, rxcap1155_fail3121, rx1153_pos, 0
    add $I11, rx1153_pos, 1
    gt $I11, rx1153_eos, rx1153_fail3113
    substr $S10, rx1153_tgt, rx1153_pos, 1
    ne $S10, ucs4:"-", rx1153_fail3113
    add rx1153_pos, 1
    nqp_rxpeek $I19, rx1153_bstack, rxcap1155_fail3121
    inc $I19
    set $I11, rx1153_bstack[$I19]
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1153_pos)
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "sym")
    goto rxcap1155_done3120
  rxcap1155_fail3121:
    goto rx1153_fail3113
  rxcap1155_done3120:
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1153_curclass, "$!pos"
    lt $I11, 0, rx1153_fail3113
    nqp_rxmark rx1153_bstack, rxsubrule1156_pass3122, -1, 0
  rxsubrule1156_pass3122:
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1153_pos, $P11, rx1153_curclass, "$!pos"
    rx1153_cur."!cursor_pass"(rx1153_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1153_cur)
  rx1153_restart3112:
    repr_get_attr_obj rx1153_cstack, rx1153_cur, rx1153_curclass, "$!cstack"
  rx1153_fail3113:
    unless rx1153_bstack, rx1153_done3111
    pop $I19, rx1153_bstack
    if_null rx1153_cstack, rx1153_cstack_done3116
    unless rx1153_cstack, rx1153_cstack_done3116
    dec $I19
    set $P11, rx1153_cstack[$I19]
  rx1153_cstack_done3116:
    pop rx1153_rep, rx1153_bstack
    pop rx1153_pos, rx1153_bstack
    pop $I19, rx1153_bstack
    lt rx1153_pos, -1, rx1153_done3111
    lt rx1153_pos, 0, rx1153_fail3113
    eq $I19, 0, rx1153_fail3113
    nqp_islist $I20, rx1153_cstack
    unless $I20, rx1153_jump3114
    elements $I18, rx1153_bstack
    le $I18, 0, rx1153_cut3115
    dec $I18
    set $I18, rx1153_bstack[$I18]
  rx1153_cut3115:
    assign rx1153_cstack, $I18
  rx1153_jump3114:
    jump $I19
  rx1153_done3111:
    rx1153_cur."!cursor_fail"()
    .return (rx1153_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_193_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1337
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1157_tgt
    .local int rx1157_pos
    .local int rx1157_off
    .local int rx1157_eos
    .local int rx1157_rep
    .local pmc rx1157_cur
    .local pmc rx1157_curclass
    .local pmc rx1157_bstack
    .local pmc rx1157_cstack
    (rx1157_cur, rx1157_tgt, rx1157_pos, rx1157_curclass, rx1157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1157_cur
    length rx1157_eos, rx1157_tgt
    eq $I19, 1, rx1157_restart3125
    gt rx1157_pos, rx1157_eos, rx1157_fail3126
    repr_get_attr_int $I11, self, rx1157_curclass, "$!from"
    ne $I11, -1, rxscan1158_done3132
    goto rxscan1158_scan3131
  rxscan1158_loop3130:
    inc rx1157_pos
    gt rx1157_pos, rx1157_eos, rx1157_fail3126
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!from", rx1157_pos
  rxscan1158_scan3131:
    nqp_rxmark rx1157_bstack, rxscan1158_loop3130, rx1157_pos, 0
  rxscan1158_done3132:
    nqp_rxmark rx1157_bstack, rxcap1159_fail3134, rx1157_pos, 0
    add $I11, rx1157_pos, 2
    gt $I11, rx1157_eos, rx1157_fail3126
    substr $S10, rx1157_tgt, rx1157_pos, 2
    ne $S10, ucs4:"+|", rx1157_fail3126
    add rx1157_pos, 2
    nqp_rxpeek $I19, rx1157_bstack, rxcap1159_fail3134
    inc $I19
    set $I11, rx1157_bstack[$I19]
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1157_pos)
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "sym")
    goto rxcap1159_done3133
  rxcap1159_fail3134:
    goto rx1157_fail3126
  rxcap1159_done3133:
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1157_curclass, "$!pos"
    lt $I11, 0, rx1157_fail3126
    nqp_rxmark rx1157_bstack, rxsubrule1160_pass3135, -1, 0
  rxsubrule1160_pass3135:
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1157_pos, $P11, rx1157_curclass, "$!pos"
    rx1157_cur."!cursor_pass"(rx1157_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1157_cur)
  rx1157_restart3125:
    repr_get_attr_obj rx1157_cstack, rx1157_cur, rx1157_curclass, "$!cstack"
  rx1157_fail3126:
    unless rx1157_bstack, rx1157_done3124
    pop $I19, rx1157_bstack
    if_null rx1157_cstack, rx1157_cstack_done3129
    unless rx1157_cstack, rx1157_cstack_done3129
    dec $I19
    set $P11, rx1157_cstack[$I19]
  rx1157_cstack_done3129:
    pop rx1157_rep, rx1157_bstack
    pop rx1157_pos, rx1157_bstack
    pop $I19, rx1157_bstack
    lt rx1157_pos, -1, rx1157_done3124
    lt rx1157_pos, 0, rx1157_fail3126
    eq $I19, 0, rx1157_fail3126
    nqp_islist $I20, rx1157_cstack
    unless $I20, rx1157_jump3127
    elements $I18, rx1157_bstack
    le $I18, 0, rx1157_cut3128
    dec $I18
    set $I18, rx1157_bstack[$I18]
  rx1157_cut3128:
    assign rx1157_cstack, $I18
  rx1157_jump3127:
    jump $I19
  rx1157_done3124:
    rx1157_cur."!cursor_fail"()
    .return (rx1157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_194_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1338
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_curclass
    .local pmc rx1161_bstack
    .local pmc rx1161_cstack
    (rx1161_cur, rx1161_tgt, rx1161_pos, rx1161_curclass, rx1161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1161_cur
    length rx1161_eos, rx1161_tgt
    eq $I19, 1, rx1161_restart3138
    gt rx1161_pos, rx1161_eos, rx1161_fail3139
    repr_get_attr_int $I11, self, rx1161_curclass, "$!from"
    ne $I11, -1, rxscan1162_done3145
    goto rxscan1162_scan3144
  rxscan1162_loop3143:
    inc rx1161_pos
    gt rx1161_pos, rx1161_eos, rx1161_fail3139
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!from", rx1161_pos
  rxscan1162_scan3144:
    nqp_rxmark rx1161_bstack, rxscan1162_loop3143, rx1161_pos, 0
  rxscan1162_done3145:
    nqp_rxmark rx1161_bstack, rxcap1163_fail3147, rx1161_pos, 0
    add $I11, rx1161_pos, 2
    gt $I11, rx1161_eos, rx1161_fail3139
    substr $S10, rx1161_tgt, rx1161_pos, 2
    ne $S10, ucs4:"+^", rx1161_fail3139
    add rx1161_pos, 2
    nqp_rxpeek $I19, rx1161_bstack, rxcap1163_fail3147
    inc $I19
    set $I11, rx1161_bstack[$I19]
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1161_pos)
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "sym")
    goto rxcap1163_done3146
  rxcap1163_fail3147:
    goto rx1161_fail3139
  rxcap1163_done3146:
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1161_curclass, "$!pos"
    lt $I11, 0, rx1161_fail3139
    nqp_rxmark rx1161_bstack, rxsubrule1164_pass3148, -1, 0
  rxsubrule1164_pass3148:
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1161_pos, $P11, rx1161_curclass, "$!pos"
    rx1161_cur."!cursor_pass"(rx1161_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1161_cur)
  rx1161_restart3138:
    repr_get_attr_obj rx1161_cstack, rx1161_cur, rx1161_curclass, "$!cstack"
  rx1161_fail3139:
    unless rx1161_bstack, rx1161_done3137
    pop $I19, rx1161_bstack
    if_null rx1161_cstack, rx1161_cstack_done3142
    unless rx1161_cstack, rx1161_cstack_done3142
    dec $I19
    set $P11, rx1161_cstack[$I19]
  rx1161_cstack_done3142:
    pop rx1161_rep, rx1161_bstack
    pop rx1161_pos, rx1161_bstack
    pop $I19, rx1161_bstack
    lt rx1161_pos, -1, rx1161_done3137
    lt rx1161_pos, 0, rx1161_fail3139
    eq $I19, 0, rx1161_fail3139
    nqp_islist $I20, rx1161_cstack
    unless $I20, rx1161_jump3140
    elements $I18, rx1161_bstack
    le $I18, 0, rx1161_cut3141
    dec $I18
    set $I18, rx1161_bstack[$I18]
  rx1161_cut3141:
    assign rx1161_cstack, $I18
  rx1161_jump3140:
    jump $I19
  rx1161_done3137:
    rx1161_cur."!cursor_fail"()
    .return (rx1161_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_195_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1165_tgt
    .local int rx1165_pos
    .local int rx1165_off
    .local int rx1165_eos
    .local int rx1165_rep
    .local pmc rx1165_cur
    .local pmc rx1165_curclass
    .local pmc rx1165_bstack
    .local pmc rx1165_cstack
    (rx1165_cur, rx1165_tgt, rx1165_pos, rx1165_curclass, rx1165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1165_cur
    length rx1165_eos, rx1165_tgt
    eq $I19, 1, rx1165_restart3151
    gt rx1165_pos, rx1165_eos, rx1165_fail3152
    repr_get_attr_int $I11, self, rx1165_curclass, "$!from"
    ne $I11, -1, rxscan1166_done3158
    goto rxscan1166_scan3157
  rxscan1166_loop3156:
    inc rx1165_pos
    gt rx1165_pos, rx1165_eos, rx1165_fail3152
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!from", rx1165_pos
  rxscan1166_scan3157:
    nqp_rxmark rx1165_bstack, rxscan1166_loop3156, rx1165_pos, 0
  rxscan1166_done3158:
    nqp_rxmark rx1165_bstack, rxcap1167_fail3160, rx1165_pos, 0
    add $I11, rx1165_pos, 1
    gt $I11, rx1165_eos, rx1165_fail3152
    substr $S10, rx1165_tgt, rx1165_pos, 1
    ne $S10, ucs4:"~", rx1165_fail3152
    add rx1165_pos, 1
    nqp_rxpeek $I19, rx1165_bstack, rxcap1167_fail3160
    inc $I19
    set $I11, rx1165_bstack[$I19]
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1165_pos)
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "sym")
    goto rxcap1167_done3159
  rxcap1167_fail3160:
    goto rx1165_fail3152
  rxcap1167_done3159:
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1165_curclass, "$!pos"
    lt $I11, 0, rx1165_fail3152
    nqp_rxmark rx1165_bstack, rxsubrule1168_pass3161, -1, 0
  rxsubrule1168_pass3161:
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1165_pos, $P11, rx1165_curclass, "$!pos"
    rx1165_cur."!cursor_pass"(rx1165_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1165_cur)
  rx1165_restart3151:
    repr_get_attr_obj rx1165_cstack, rx1165_cur, rx1165_curclass, "$!cstack"
  rx1165_fail3152:
    unless rx1165_bstack, rx1165_done3150
    pop $I19, rx1165_bstack
    if_null rx1165_cstack, rx1165_cstack_done3155
    unless rx1165_cstack, rx1165_cstack_done3155
    dec $I19
    set $P11, rx1165_cstack[$I19]
  rx1165_cstack_done3155:
    pop rx1165_rep, rx1165_bstack
    pop rx1165_pos, rx1165_bstack
    pop $I19, rx1165_bstack
    lt rx1165_pos, -1, rx1165_done3150
    lt rx1165_pos, 0, rx1165_fail3152
    eq $I19, 0, rx1165_fail3152
    nqp_islist $I20, rx1165_cstack
    unless $I20, rx1165_jump3153
    elements $I18, rx1165_bstack
    le $I18, 0, rx1165_cut3154
    dec $I18
    set $I18, rx1165_bstack[$I18]
  rx1165_cut3154:
    assign rx1165_cstack, $I18
  rx1165_jump3153:
    jump $I19
  rx1165_done3150:
    rx1165_cur."!cursor_fail"()
    .return (rx1165_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_196_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1342
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1169_tgt
    .local int rx1169_pos
    .local int rx1169_off
    .local int rx1169_eos
    .local int rx1169_rep
    .local pmc rx1169_cur
    .local pmc rx1169_curclass
    .local pmc rx1169_bstack
    .local pmc rx1169_cstack
    (rx1169_cur, rx1169_tgt, rx1169_pos, rx1169_curclass, rx1169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1169_cur
    length rx1169_eos, rx1169_tgt
    eq $I19, 1, rx1169_restart3164
    gt rx1169_pos, rx1169_eos, rx1169_fail3165
    repr_get_attr_int $I11, self, rx1169_curclass, "$!from"
    ne $I11, -1, rxscan1170_done3171
    goto rxscan1170_scan3170
  rxscan1170_loop3169:
    inc rx1169_pos
    gt rx1169_pos, rx1169_eos, rx1169_fail3165
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!from", rx1169_pos
  rxscan1170_scan3170:
    nqp_rxmark rx1169_bstack, rxscan1170_loop3169, rx1169_pos, 0
  rxscan1170_done3171:
    nqp_rxmark rx1169_bstack, rxcap1171_fail3173, rx1169_pos, 0
    add $I11, rx1169_pos, 2
    gt $I11, rx1169_eos, rx1169_fail3165
    substr $S10, rx1169_tgt, rx1169_pos, 2
    ne $S10, ucs4:"==", rx1169_fail3165
    add rx1169_pos, 2
    nqp_rxpeek $I19, rx1169_bstack, rxcap1171_fail3173
    inc $I19
    set $I11, rx1169_bstack[$I19]
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1169_pos)
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "sym")
    goto rxcap1171_done3172
  rxcap1171_fail3173:
    goto rx1169_fail3165
  rxcap1171_done3172:
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1169_curclass, "$!pos"
    lt $I11, 0, rx1169_fail3165
    nqp_rxmark rx1169_bstack, rxsubrule1172_pass3174, -1, 0
  rxsubrule1172_pass3174:
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1169_pos, $P11, rx1169_curclass, "$!pos"
    rx1169_cur."!cursor_pass"(rx1169_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1169_cur)
  rx1169_restart3164:
    repr_get_attr_obj rx1169_cstack, rx1169_cur, rx1169_curclass, "$!cstack"
  rx1169_fail3165:
    unless rx1169_bstack, rx1169_done3163
    pop $I19, rx1169_bstack
    if_null rx1169_cstack, rx1169_cstack_done3168
    unless rx1169_cstack, rx1169_cstack_done3168
    dec $I19
    set $P11, rx1169_cstack[$I19]
  rx1169_cstack_done3168:
    pop rx1169_rep, rx1169_bstack
    pop rx1169_pos, rx1169_bstack
    pop $I19, rx1169_bstack
    lt rx1169_pos, -1, rx1169_done3163
    lt rx1169_pos, 0, rx1169_fail3165
    eq $I19, 0, rx1169_fail3165
    nqp_islist $I20, rx1169_cstack
    unless $I20, rx1169_jump3166
    elements $I18, rx1169_bstack
    le $I18, 0, rx1169_cut3167
    dec $I18
    set $I18, rx1169_bstack[$I18]
  rx1169_cut3167:
    assign rx1169_cstack, $I18
  rx1169_jump3166:
    jump $I19
  rx1169_done3163:
    rx1169_cur."!cursor_fail"()
    .return (rx1169_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_197_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1173_tgt
    .local int rx1173_pos
    .local int rx1173_off
    .local int rx1173_eos
    .local int rx1173_rep
    .local pmc rx1173_cur
    .local pmc rx1173_curclass
    .local pmc rx1173_bstack
    .local pmc rx1173_cstack
    (rx1173_cur, rx1173_tgt, rx1173_pos, rx1173_curclass, rx1173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1173_cur
    length rx1173_eos, rx1173_tgt
    eq $I19, 1, rx1173_restart3177
    gt rx1173_pos, rx1173_eos, rx1173_fail3178
    repr_get_attr_int $I11, self, rx1173_curclass, "$!from"
    ne $I11, -1, rxscan1174_done3184
    goto rxscan1174_scan3183
  rxscan1174_loop3182:
    inc rx1173_pos
    gt rx1173_pos, rx1173_eos, rx1173_fail3178
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!from", rx1173_pos
  rxscan1174_scan3183:
    nqp_rxmark rx1173_bstack, rxscan1174_loop3182, rx1173_pos, 0
  rxscan1174_done3184:
    nqp_rxmark rx1173_bstack, rxcap1175_fail3186, rx1173_pos, 0
    add $I11, rx1173_pos, 2
    gt $I11, rx1173_eos, rx1173_fail3178
    substr $S10, rx1173_tgt, rx1173_pos, 2
    ne $S10, ucs4:"!=", rx1173_fail3178
    add rx1173_pos, 2
    nqp_rxpeek $I19, rx1173_bstack, rxcap1175_fail3186
    inc $I19
    set $I11, rx1173_bstack[$I19]
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1173_pos)
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "sym")
    goto rxcap1175_done3185
  rxcap1175_fail3186:
    goto rx1173_fail3178
  rxcap1175_done3185:
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1173_curclass, "$!pos"
    lt $I11, 0, rx1173_fail3178
    nqp_rxmark rx1173_bstack, rxsubrule1176_pass3187, -1, 0
  rxsubrule1176_pass3187:
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1173_pos, $P11, rx1173_curclass, "$!pos"
    rx1173_cur."!cursor_pass"(rx1173_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1173_cur)
  rx1173_restart3177:
    repr_get_attr_obj rx1173_cstack, rx1173_cur, rx1173_curclass, "$!cstack"
  rx1173_fail3178:
    unless rx1173_bstack, rx1173_done3176
    pop $I19, rx1173_bstack
    if_null rx1173_cstack, rx1173_cstack_done3181
    unless rx1173_cstack, rx1173_cstack_done3181
    dec $I19
    set $P11, rx1173_cstack[$I19]
  rx1173_cstack_done3181:
    pop rx1173_rep, rx1173_bstack
    pop rx1173_pos, rx1173_bstack
    pop $I19, rx1173_bstack
    lt rx1173_pos, -1, rx1173_done3176
    lt rx1173_pos, 0, rx1173_fail3178
    eq $I19, 0, rx1173_fail3178
    nqp_islist $I20, rx1173_cstack
    unless $I20, rx1173_jump3179
    elements $I18, rx1173_bstack
    le $I18, 0, rx1173_cut3180
    dec $I18
    set $I18, rx1173_bstack[$I18]
  rx1173_cut3180:
    assign rx1173_cstack, $I18
  rx1173_jump3179:
    jump $I19
  rx1173_done3176:
    rx1173_cur."!cursor_fail"()
    .return (rx1173_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_198_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1177_tgt
    .local int rx1177_pos
    .local int rx1177_off
    .local int rx1177_eos
    .local int rx1177_rep
    .local pmc rx1177_cur
    .local pmc rx1177_curclass
    .local pmc rx1177_bstack
    .local pmc rx1177_cstack
    (rx1177_cur, rx1177_tgt, rx1177_pos, rx1177_curclass, rx1177_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1177_cur
    length rx1177_eos, rx1177_tgt
    eq $I19, 1, rx1177_restart3190
    gt rx1177_pos, rx1177_eos, rx1177_fail3191
    repr_get_attr_int $I11, self, rx1177_curclass, "$!from"
    ne $I11, -1, rxscan1178_done3197
    goto rxscan1178_scan3196
  rxscan1178_loop3195:
    inc rx1177_pos
    gt rx1177_pos, rx1177_eos, rx1177_fail3191
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!from", rx1177_pos
  rxscan1178_scan3196:
    nqp_rxmark rx1177_bstack, rxscan1178_loop3195, rx1177_pos, 0
  rxscan1178_done3197:
    nqp_rxmark rx1177_bstack, rxcap1179_fail3199, rx1177_pos, 0
    add $I11, rx1177_pos, 2
    gt $I11, rx1177_eos, rx1177_fail3191
    substr $S10, rx1177_tgt, rx1177_pos, 2
    ne $S10, ucs4:"<=", rx1177_fail3191
    add rx1177_pos, 2
    nqp_rxpeek $I19, rx1177_bstack, rxcap1179_fail3199
    inc $I19
    set $I11, rx1177_bstack[$I19]
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1177_pos)
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "sym")
    goto rxcap1179_done3198
  rxcap1179_fail3199:
    goto rx1177_fail3191
  rxcap1179_done3198:
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1177_curclass, "$!pos"
    lt $I11, 0, rx1177_fail3191
    nqp_rxmark rx1177_bstack, rxsubrule1180_pass3200, -1, 0
  rxsubrule1180_pass3200:
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1177_pos, $P11, rx1177_curclass, "$!pos"
    rx1177_cur."!cursor_pass"(rx1177_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1177_cur)
  rx1177_restart3190:
    repr_get_attr_obj rx1177_cstack, rx1177_cur, rx1177_curclass, "$!cstack"
  rx1177_fail3191:
    unless rx1177_bstack, rx1177_done3189
    pop $I19, rx1177_bstack
    if_null rx1177_cstack, rx1177_cstack_done3194
    unless rx1177_cstack, rx1177_cstack_done3194
    dec $I19
    set $P11, rx1177_cstack[$I19]
  rx1177_cstack_done3194:
    pop rx1177_rep, rx1177_bstack
    pop rx1177_pos, rx1177_bstack
    pop $I19, rx1177_bstack
    lt rx1177_pos, -1, rx1177_done3189
    lt rx1177_pos, 0, rx1177_fail3191
    eq $I19, 0, rx1177_fail3191
    nqp_islist $I20, rx1177_cstack
    unless $I20, rx1177_jump3192
    elements $I18, rx1177_bstack
    le $I18, 0, rx1177_cut3193
    dec $I18
    set $I18, rx1177_bstack[$I18]
  rx1177_cut3193:
    assign rx1177_cstack, $I18
  rx1177_jump3192:
    jump $I19
  rx1177_done3189:
    rx1177_cur."!cursor_fail"()
    .return (rx1177_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_199_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1181_tgt
    .local int rx1181_pos
    .local int rx1181_off
    .local int rx1181_eos
    .local int rx1181_rep
    .local pmc rx1181_cur
    .local pmc rx1181_curclass
    .local pmc rx1181_bstack
    .local pmc rx1181_cstack
    (rx1181_cur, rx1181_tgt, rx1181_pos, rx1181_curclass, rx1181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1181_cur
    length rx1181_eos, rx1181_tgt
    eq $I19, 1, rx1181_restart3203
    gt rx1181_pos, rx1181_eos, rx1181_fail3204
    repr_get_attr_int $I11, self, rx1181_curclass, "$!from"
    ne $I11, -1, rxscan1182_done3210
    goto rxscan1182_scan3209
  rxscan1182_loop3208:
    inc rx1181_pos
    gt rx1181_pos, rx1181_eos, rx1181_fail3204
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!from", rx1181_pos
  rxscan1182_scan3209:
    nqp_rxmark rx1181_bstack, rxscan1182_loop3208, rx1181_pos, 0
  rxscan1182_done3210:
    nqp_rxmark rx1181_bstack, rxcap1183_fail3212, rx1181_pos, 0
    add $I11, rx1181_pos, 2
    gt $I11, rx1181_eos, rx1181_fail3204
    substr $S10, rx1181_tgt, rx1181_pos, 2
    ne $S10, ucs4:">=", rx1181_fail3204
    add rx1181_pos, 2
    nqp_rxpeek $I19, rx1181_bstack, rxcap1183_fail3212
    inc $I19
    set $I11, rx1181_bstack[$I19]
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1181_pos)
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "sym")
    goto rxcap1183_done3211
  rxcap1183_fail3212:
    goto rx1181_fail3204
  rxcap1183_done3211:
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1181_curclass, "$!pos"
    lt $I11, 0, rx1181_fail3204
    nqp_rxmark rx1181_bstack, rxsubrule1184_pass3213, -1, 0
  rxsubrule1184_pass3213:
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1181_pos, $P11, rx1181_curclass, "$!pos"
    rx1181_cur."!cursor_pass"(rx1181_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1181_cur)
  rx1181_restart3203:
    repr_get_attr_obj rx1181_cstack, rx1181_cur, rx1181_curclass, "$!cstack"
  rx1181_fail3204:
    unless rx1181_bstack, rx1181_done3202
    pop $I19, rx1181_bstack
    if_null rx1181_cstack, rx1181_cstack_done3207
    unless rx1181_cstack, rx1181_cstack_done3207
    dec $I19
    set $P11, rx1181_cstack[$I19]
  rx1181_cstack_done3207:
    pop rx1181_rep, rx1181_bstack
    pop rx1181_pos, rx1181_bstack
    pop $I19, rx1181_bstack
    lt rx1181_pos, -1, rx1181_done3202
    lt rx1181_pos, 0, rx1181_fail3204
    eq $I19, 0, rx1181_fail3204
    nqp_islist $I20, rx1181_cstack
    unless $I20, rx1181_jump3205
    elements $I18, rx1181_bstack
    le $I18, 0, rx1181_cut3206
    dec $I18
    set $I18, rx1181_bstack[$I18]
  rx1181_cut3206:
    assign rx1181_cstack, $I18
  rx1181_jump3205:
    jump $I19
  rx1181_done3202:
    rx1181_cur."!cursor_fail"()
    .return (rx1181_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_200_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1346
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1185_tgt
    .local int rx1185_pos
    .local int rx1185_off
    .local int rx1185_eos
    .local int rx1185_rep
    .local pmc rx1185_cur
    .local pmc rx1185_curclass
    .local pmc rx1185_bstack
    .local pmc rx1185_cstack
    (rx1185_cur, rx1185_tgt, rx1185_pos, rx1185_curclass, rx1185_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1185_cur
    length rx1185_eos, rx1185_tgt
    eq $I19, 1, rx1185_restart3216
    gt rx1185_pos, rx1185_eos, rx1185_fail3217
    repr_get_attr_int $I11, self, rx1185_curclass, "$!from"
    ne $I11, -1, rxscan1186_done3223
    goto rxscan1186_scan3222
  rxscan1186_loop3221:
    inc rx1185_pos
    gt rx1185_pos, rx1185_eos, rx1185_fail3217
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!from", rx1185_pos
  rxscan1186_scan3222:
    nqp_rxmark rx1185_bstack, rxscan1186_loop3221, rx1185_pos, 0
  rxscan1186_done3223:
    nqp_rxmark rx1185_bstack, rxcap1187_fail3225, rx1185_pos, 0
    add $I11, rx1185_pos, 1
    gt $I11, rx1185_eos, rx1185_fail3217
    substr $S10, rx1185_tgt, rx1185_pos, 1
    ne $S10, ucs4:"<", rx1185_fail3217
    add rx1185_pos, 1
    nqp_rxpeek $I19, rx1185_bstack, rxcap1187_fail3225
    inc $I19
    set $I11, rx1185_bstack[$I19]
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1185_pos)
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "sym")
    goto rxcap1187_done3224
  rxcap1187_fail3225:
    goto rx1185_fail3217
  rxcap1187_done3224:
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1185_curclass, "$!pos"
    lt $I11, 0, rx1185_fail3217
    nqp_rxmark rx1185_bstack, rxsubrule1188_pass3226, -1, 0
  rxsubrule1188_pass3226:
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1185_pos, $P11, rx1185_curclass, "$!pos"
    rx1185_cur."!cursor_pass"(rx1185_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1185_cur)
  rx1185_restart3216:
    repr_get_attr_obj rx1185_cstack, rx1185_cur, rx1185_curclass, "$!cstack"
  rx1185_fail3217:
    unless rx1185_bstack, rx1185_done3215
    pop $I19, rx1185_bstack
    if_null rx1185_cstack, rx1185_cstack_done3220
    unless rx1185_cstack, rx1185_cstack_done3220
    dec $I19
    set $P11, rx1185_cstack[$I19]
  rx1185_cstack_done3220:
    pop rx1185_rep, rx1185_bstack
    pop rx1185_pos, rx1185_bstack
    pop $I19, rx1185_bstack
    lt rx1185_pos, -1, rx1185_done3215
    lt rx1185_pos, 0, rx1185_fail3217
    eq $I19, 0, rx1185_fail3217
    nqp_islist $I20, rx1185_cstack
    unless $I20, rx1185_jump3218
    elements $I18, rx1185_bstack
    le $I18, 0, rx1185_cut3219
    dec $I18
    set $I18, rx1185_bstack[$I18]
  rx1185_cut3219:
    assign rx1185_cstack, $I18
  rx1185_jump3218:
    jump $I19
  rx1185_done3215:
    rx1185_cur."!cursor_fail"()
    .return (rx1185_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_201_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1347
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1189_tgt
    .local int rx1189_pos
    .local int rx1189_off
    .local int rx1189_eos
    .local int rx1189_rep
    .local pmc rx1189_cur
    .local pmc rx1189_curclass
    .local pmc rx1189_bstack
    .local pmc rx1189_cstack
    (rx1189_cur, rx1189_tgt, rx1189_pos, rx1189_curclass, rx1189_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1189_cur
    length rx1189_eos, rx1189_tgt
    eq $I19, 1, rx1189_restart3229
    gt rx1189_pos, rx1189_eos, rx1189_fail3230
    repr_get_attr_int $I11, self, rx1189_curclass, "$!from"
    ne $I11, -1, rxscan1190_done3236
    goto rxscan1190_scan3235
  rxscan1190_loop3234:
    inc rx1189_pos
    gt rx1189_pos, rx1189_eos, rx1189_fail3230
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!from", rx1189_pos
  rxscan1190_scan3235:
    nqp_rxmark rx1189_bstack, rxscan1190_loop3234, rx1189_pos, 0
  rxscan1190_done3236:
    nqp_rxmark rx1189_bstack, rxcap1191_fail3238, rx1189_pos, 0
    add $I11, rx1189_pos, 1
    gt $I11, rx1189_eos, rx1189_fail3230
    substr $S10, rx1189_tgt, rx1189_pos, 1
    ne $S10, ucs4:">", rx1189_fail3230
    add rx1189_pos, 1
    nqp_rxpeek $I19, rx1189_bstack, rxcap1191_fail3238
    inc $I19
    set $I11, rx1189_bstack[$I19]
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1189_pos)
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "sym")
    goto rxcap1191_done3237
  rxcap1191_fail3238:
    goto rx1189_fail3230
  rxcap1191_done3237:
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1189_curclass, "$!pos"
    lt $I11, 0, rx1189_fail3230
    nqp_rxmark rx1189_bstack, rxsubrule1192_pass3239, -1, 0
  rxsubrule1192_pass3239:
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1189_pos, $P11, rx1189_curclass, "$!pos"
    rx1189_cur."!cursor_pass"(rx1189_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1189_cur)
  rx1189_restart3229:
    repr_get_attr_obj rx1189_cstack, rx1189_cur, rx1189_curclass, "$!cstack"
  rx1189_fail3230:
    unless rx1189_bstack, rx1189_done3228
    pop $I19, rx1189_bstack
    if_null rx1189_cstack, rx1189_cstack_done3233
    unless rx1189_cstack, rx1189_cstack_done3233
    dec $I19
    set $P11, rx1189_cstack[$I19]
  rx1189_cstack_done3233:
    pop rx1189_rep, rx1189_bstack
    pop rx1189_pos, rx1189_bstack
    pop $I19, rx1189_bstack
    lt rx1189_pos, -1, rx1189_done3228
    lt rx1189_pos, 0, rx1189_fail3230
    eq $I19, 0, rx1189_fail3230
    nqp_islist $I20, rx1189_cstack
    unless $I20, rx1189_jump3231
    elements $I18, rx1189_bstack
    le $I18, 0, rx1189_cut3232
    dec $I18
    set $I18, rx1189_bstack[$I18]
  rx1189_cut3232:
    assign rx1189_cstack, $I18
  rx1189_jump3231:
    jump $I19
  rx1189_done3228:
    rx1189_cur."!cursor_fail"()
    .return (rx1189_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_202_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1193_tgt
    .local int rx1193_pos
    .local int rx1193_off
    .local int rx1193_eos
    .local int rx1193_rep
    .local pmc rx1193_cur
    .local pmc rx1193_curclass
    .local pmc rx1193_bstack
    .local pmc rx1193_cstack
    (rx1193_cur, rx1193_tgt, rx1193_pos, rx1193_curclass, rx1193_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1193_cur
    length rx1193_eos, rx1193_tgt
    eq $I19, 1, rx1193_restart3242
    gt rx1193_pos, rx1193_eos, rx1193_fail3243
    repr_get_attr_int $I11, self, rx1193_curclass, "$!from"
    ne $I11, -1, rxscan1194_done3249
    goto rxscan1194_scan3248
  rxscan1194_loop3247:
    inc rx1193_pos
    gt rx1193_pos, rx1193_eos, rx1193_fail3243
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!from", rx1193_pos
  rxscan1194_scan3248:
    nqp_rxmark rx1193_bstack, rxscan1194_loop3247, rx1193_pos, 0
  rxscan1194_done3249:
    nqp_rxmark rx1193_bstack, rxcap1195_fail3251, rx1193_pos, 0
    add $I11, rx1193_pos, 2
    gt $I11, rx1193_eos, rx1193_fail3243
    substr $S10, rx1193_tgt, rx1193_pos, 2
    ne $S10, ucs4:"eq", rx1193_fail3243
    add rx1193_pos, 2
    nqp_rxpeek $I19, rx1193_bstack, rxcap1195_fail3251
    inc $I19
    set $I11, rx1193_bstack[$I19]
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1193_pos)
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "sym")
    goto rxcap1195_done3250
  rxcap1195_fail3251:
    goto rx1193_fail3243
  rxcap1195_done3250:
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1193_curclass, "$!pos"
    lt $I11, 0, rx1193_fail3243
    nqp_rxmark rx1193_bstack, rxsubrule1196_pass3252, -1, 0
  rxsubrule1196_pass3252:
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1193_pos, $P11, rx1193_curclass, "$!pos"
    rx1193_cur."!cursor_pass"(rx1193_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1193_cur)
  rx1193_restart3242:
    repr_get_attr_obj rx1193_cstack, rx1193_cur, rx1193_curclass, "$!cstack"
  rx1193_fail3243:
    unless rx1193_bstack, rx1193_done3241
    pop $I19, rx1193_bstack
    if_null rx1193_cstack, rx1193_cstack_done3246
    unless rx1193_cstack, rx1193_cstack_done3246
    dec $I19
    set $P11, rx1193_cstack[$I19]
  rx1193_cstack_done3246:
    pop rx1193_rep, rx1193_bstack
    pop rx1193_pos, rx1193_bstack
    pop $I19, rx1193_bstack
    lt rx1193_pos, -1, rx1193_done3241
    lt rx1193_pos, 0, rx1193_fail3243
    eq $I19, 0, rx1193_fail3243
    nqp_islist $I20, rx1193_cstack
    unless $I20, rx1193_jump3244
    elements $I18, rx1193_bstack
    le $I18, 0, rx1193_cut3245
    dec $I18
    set $I18, rx1193_bstack[$I18]
  rx1193_cut3245:
    assign rx1193_cstack, $I18
  rx1193_jump3244:
    jump $I19
  rx1193_done3241:
    rx1193_cur."!cursor_fail"()
    .return (rx1193_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_203_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1349
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1197_tgt
    .local int rx1197_pos
    .local int rx1197_off
    .local int rx1197_eos
    .local int rx1197_rep
    .local pmc rx1197_cur
    .local pmc rx1197_curclass
    .local pmc rx1197_bstack
    .local pmc rx1197_cstack
    (rx1197_cur, rx1197_tgt, rx1197_pos, rx1197_curclass, rx1197_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1197_cur
    length rx1197_eos, rx1197_tgt
    eq $I19, 1, rx1197_restart3255
    gt rx1197_pos, rx1197_eos, rx1197_fail3256
    repr_get_attr_int $I11, self, rx1197_curclass, "$!from"
    ne $I11, -1, rxscan1198_done3262
    goto rxscan1198_scan3261
  rxscan1198_loop3260:
    inc rx1197_pos
    gt rx1197_pos, rx1197_eos, rx1197_fail3256
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!from", rx1197_pos
  rxscan1198_scan3261:
    nqp_rxmark rx1197_bstack, rxscan1198_loop3260, rx1197_pos, 0
  rxscan1198_done3262:
    nqp_rxmark rx1197_bstack, rxcap1199_fail3264, rx1197_pos, 0
    add $I11, rx1197_pos, 2
    gt $I11, rx1197_eos, rx1197_fail3256
    substr $S10, rx1197_tgt, rx1197_pos, 2
    ne $S10, ucs4:"ne", rx1197_fail3256
    add rx1197_pos, 2
    nqp_rxpeek $I19, rx1197_bstack, rxcap1199_fail3264
    inc $I19
    set $I11, rx1197_bstack[$I19]
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1197_pos)
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "sym")
    goto rxcap1199_done3263
  rxcap1199_fail3264:
    goto rx1197_fail3256
  rxcap1199_done3263:
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1197_curclass, "$!pos"
    lt $I11, 0, rx1197_fail3256
    nqp_rxmark rx1197_bstack, rxsubrule1200_pass3265, -1, 0
  rxsubrule1200_pass3265:
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1197_pos, $P11, rx1197_curclass, "$!pos"
    rx1197_cur."!cursor_pass"(rx1197_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1197_cur)
  rx1197_restart3255:
    repr_get_attr_obj rx1197_cstack, rx1197_cur, rx1197_curclass, "$!cstack"
  rx1197_fail3256:
    unless rx1197_bstack, rx1197_done3254
    pop $I19, rx1197_bstack
    if_null rx1197_cstack, rx1197_cstack_done3259
    unless rx1197_cstack, rx1197_cstack_done3259
    dec $I19
    set $P11, rx1197_cstack[$I19]
  rx1197_cstack_done3259:
    pop rx1197_rep, rx1197_bstack
    pop rx1197_pos, rx1197_bstack
    pop $I19, rx1197_bstack
    lt rx1197_pos, -1, rx1197_done3254
    lt rx1197_pos, 0, rx1197_fail3256
    eq $I19, 0, rx1197_fail3256
    nqp_islist $I20, rx1197_cstack
    unless $I20, rx1197_jump3257
    elements $I18, rx1197_bstack
    le $I18, 0, rx1197_cut3258
    dec $I18
    set $I18, rx1197_bstack[$I18]
  rx1197_cut3258:
    assign rx1197_cstack, $I18
  rx1197_jump3257:
    jump $I19
  rx1197_done3254:
    rx1197_cur."!cursor_fail"()
    .return (rx1197_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_204_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1201_tgt
    .local int rx1201_pos
    .local int rx1201_off
    .local int rx1201_eos
    .local int rx1201_rep
    .local pmc rx1201_cur
    .local pmc rx1201_curclass
    .local pmc rx1201_bstack
    .local pmc rx1201_cstack
    (rx1201_cur, rx1201_tgt, rx1201_pos, rx1201_curclass, rx1201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1201_cur
    length rx1201_eos, rx1201_tgt
    eq $I19, 1, rx1201_restart3268
    gt rx1201_pos, rx1201_eos, rx1201_fail3269
    repr_get_attr_int $I11, self, rx1201_curclass, "$!from"
    ne $I11, -1, rxscan1202_done3275
    goto rxscan1202_scan3274
  rxscan1202_loop3273:
    inc rx1201_pos
    gt rx1201_pos, rx1201_eos, rx1201_fail3269
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!from", rx1201_pos
  rxscan1202_scan3274:
    nqp_rxmark rx1201_bstack, rxscan1202_loop3273, rx1201_pos, 0
  rxscan1202_done3275:
    nqp_rxmark rx1201_bstack, rxcap1203_fail3277, rx1201_pos, 0
    add $I11, rx1201_pos, 2
    gt $I11, rx1201_eos, rx1201_fail3269
    substr $S10, rx1201_tgt, rx1201_pos, 2
    ne $S10, ucs4:"le", rx1201_fail3269
    add rx1201_pos, 2
    nqp_rxpeek $I19, rx1201_bstack, rxcap1203_fail3277
    inc $I19
    set $I11, rx1201_bstack[$I19]
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1201_pos)
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "sym")
    goto rxcap1203_done3276
  rxcap1203_fail3277:
    goto rx1201_fail3269
  rxcap1203_done3276:
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1201_curclass, "$!pos"
    lt $I11, 0, rx1201_fail3269
    nqp_rxmark rx1201_bstack, rxsubrule1204_pass3278, -1, 0
  rxsubrule1204_pass3278:
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1201_pos, $P11, rx1201_curclass, "$!pos"
    rx1201_cur."!cursor_pass"(rx1201_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1201_cur)
  rx1201_restart3268:
    repr_get_attr_obj rx1201_cstack, rx1201_cur, rx1201_curclass, "$!cstack"
  rx1201_fail3269:
    unless rx1201_bstack, rx1201_done3267
    pop $I19, rx1201_bstack
    if_null rx1201_cstack, rx1201_cstack_done3272
    unless rx1201_cstack, rx1201_cstack_done3272
    dec $I19
    set $P11, rx1201_cstack[$I19]
  rx1201_cstack_done3272:
    pop rx1201_rep, rx1201_bstack
    pop rx1201_pos, rx1201_bstack
    pop $I19, rx1201_bstack
    lt rx1201_pos, -1, rx1201_done3267
    lt rx1201_pos, 0, rx1201_fail3269
    eq $I19, 0, rx1201_fail3269
    nqp_islist $I20, rx1201_cstack
    unless $I20, rx1201_jump3270
    elements $I18, rx1201_bstack
    le $I18, 0, rx1201_cut3271
    dec $I18
    set $I18, rx1201_bstack[$I18]
  rx1201_cut3271:
    assign rx1201_cstack, $I18
  rx1201_jump3270:
    jump $I19
  rx1201_done3267:
    rx1201_cur."!cursor_fail"()
    .return (rx1201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_205_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1351
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1205_tgt
    .local int rx1205_pos
    .local int rx1205_off
    .local int rx1205_eos
    .local int rx1205_rep
    .local pmc rx1205_cur
    .local pmc rx1205_curclass
    .local pmc rx1205_bstack
    .local pmc rx1205_cstack
    (rx1205_cur, rx1205_tgt, rx1205_pos, rx1205_curclass, rx1205_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1205_cur
    length rx1205_eos, rx1205_tgt
    eq $I19, 1, rx1205_restart3281
    gt rx1205_pos, rx1205_eos, rx1205_fail3282
    repr_get_attr_int $I11, self, rx1205_curclass, "$!from"
    ne $I11, -1, rxscan1206_done3288
    goto rxscan1206_scan3287
  rxscan1206_loop3286:
    inc rx1205_pos
    gt rx1205_pos, rx1205_eos, rx1205_fail3282
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!from", rx1205_pos
  rxscan1206_scan3287:
    nqp_rxmark rx1205_bstack, rxscan1206_loop3286, rx1205_pos, 0
  rxscan1206_done3288:
    nqp_rxmark rx1205_bstack, rxcap1207_fail3290, rx1205_pos, 0
    add $I11, rx1205_pos, 2
    gt $I11, rx1205_eos, rx1205_fail3282
    substr $S10, rx1205_tgt, rx1205_pos, 2
    ne $S10, ucs4:"ge", rx1205_fail3282
    add rx1205_pos, 2
    nqp_rxpeek $I19, rx1205_bstack, rxcap1207_fail3290
    inc $I19
    set $I11, rx1205_bstack[$I19]
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1205_pos)
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "sym")
    goto rxcap1207_done3289
  rxcap1207_fail3290:
    goto rx1205_fail3282
  rxcap1207_done3289:
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1205_curclass, "$!pos"
    lt $I11, 0, rx1205_fail3282
    nqp_rxmark rx1205_bstack, rxsubrule1208_pass3291, -1, 0
  rxsubrule1208_pass3291:
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1205_pos, $P11, rx1205_curclass, "$!pos"
    rx1205_cur."!cursor_pass"(rx1205_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1205_cur)
  rx1205_restart3281:
    repr_get_attr_obj rx1205_cstack, rx1205_cur, rx1205_curclass, "$!cstack"
  rx1205_fail3282:
    unless rx1205_bstack, rx1205_done3280
    pop $I19, rx1205_bstack
    if_null rx1205_cstack, rx1205_cstack_done3285
    unless rx1205_cstack, rx1205_cstack_done3285
    dec $I19
    set $P11, rx1205_cstack[$I19]
  rx1205_cstack_done3285:
    pop rx1205_rep, rx1205_bstack
    pop rx1205_pos, rx1205_bstack
    pop $I19, rx1205_bstack
    lt rx1205_pos, -1, rx1205_done3280
    lt rx1205_pos, 0, rx1205_fail3282
    eq $I19, 0, rx1205_fail3282
    nqp_islist $I20, rx1205_cstack
    unless $I20, rx1205_jump3283
    elements $I18, rx1205_bstack
    le $I18, 0, rx1205_cut3284
    dec $I18
    set $I18, rx1205_bstack[$I18]
  rx1205_cut3284:
    assign rx1205_cstack, $I18
  rx1205_jump3283:
    jump $I19
  rx1205_done3280:
    rx1205_cur."!cursor_fail"()
    .return (rx1205_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_206_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1352
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1209_tgt
    .local int rx1209_pos
    .local int rx1209_off
    .local int rx1209_eos
    .local int rx1209_rep
    .local pmc rx1209_cur
    .local pmc rx1209_curclass
    .local pmc rx1209_bstack
    .local pmc rx1209_cstack
    (rx1209_cur, rx1209_tgt, rx1209_pos, rx1209_curclass, rx1209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1209_cur
    length rx1209_eos, rx1209_tgt
    eq $I19, 1, rx1209_restart3294
    gt rx1209_pos, rx1209_eos, rx1209_fail3295
    repr_get_attr_int $I11, self, rx1209_curclass, "$!from"
    ne $I11, -1, rxscan1210_done3301
    goto rxscan1210_scan3300
  rxscan1210_loop3299:
    inc rx1209_pos
    gt rx1209_pos, rx1209_eos, rx1209_fail3295
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!from", rx1209_pos
  rxscan1210_scan3300:
    nqp_rxmark rx1209_bstack, rxscan1210_loop3299, rx1209_pos, 0
  rxscan1210_done3301:
    nqp_rxmark rx1209_bstack, rxcap1211_fail3303, rx1209_pos, 0
    add $I11, rx1209_pos, 2
    gt $I11, rx1209_eos, rx1209_fail3295
    substr $S10, rx1209_tgt, rx1209_pos, 2
    ne $S10, ucs4:"lt", rx1209_fail3295
    add rx1209_pos, 2
    nqp_rxpeek $I19, rx1209_bstack, rxcap1211_fail3303
    inc $I19
    set $I11, rx1209_bstack[$I19]
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1209_pos)
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "sym")
    goto rxcap1211_done3302
  rxcap1211_fail3303:
    goto rx1209_fail3295
  rxcap1211_done3302:
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1209_curclass, "$!pos"
    lt $I11, 0, rx1209_fail3295
    nqp_rxmark rx1209_bstack, rxsubrule1212_pass3304, -1, 0
  rxsubrule1212_pass3304:
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1209_pos, $P11, rx1209_curclass, "$!pos"
    rx1209_cur."!cursor_pass"(rx1209_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1209_cur)
  rx1209_restart3294:
    repr_get_attr_obj rx1209_cstack, rx1209_cur, rx1209_curclass, "$!cstack"
  rx1209_fail3295:
    unless rx1209_bstack, rx1209_done3293
    pop $I19, rx1209_bstack
    if_null rx1209_cstack, rx1209_cstack_done3298
    unless rx1209_cstack, rx1209_cstack_done3298
    dec $I19
    set $P11, rx1209_cstack[$I19]
  rx1209_cstack_done3298:
    pop rx1209_rep, rx1209_bstack
    pop rx1209_pos, rx1209_bstack
    pop $I19, rx1209_bstack
    lt rx1209_pos, -1, rx1209_done3293
    lt rx1209_pos, 0, rx1209_fail3295
    eq $I19, 0, rx1209_fail3295
    nqp_islist $I20, rx1209_cstack
    unless $I20, rx1209_jump3296
    elements $I18, rx1209_bstack
    le $I18, 0, rx1209_cut3297
    dec $I18
    set $I18, rx1209_bstack[$I18]
  rx1209_cut3297:
    assign rx1209_cstack, $I18
  rx1209_jump3296:
    jump $I19
  rx1209_done3293:
    rx1209_cur."!cursor_fail"()
    .return (rx1209_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_207_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1353
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1213_tgt
    .local int rx1213_pos
    .local int rx1213_off
    .local int rx1213_eos
    .local int rx1213_rep
    .local pmc rx1213_cur
    .local pmc rx1213_curclass
    .local pmc rx1213_bstack
    .local pmc rx1213_cstack
    (rx1213_cur, rx1213_tgt, rx1213_pos, rx1213_curclass, rx1213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1213_cur
    length rx1213_eos, rx1213_tgt
    eq $I19, 1, rx1213_restart3307
    gt rx1213_pos, rx1213_eos, rx1213_fail3308
    repr_get_attr_int $I11, self, rx1213_curclass, "$!from"
    ne $I11, -1, rxscan1214_done3314
    goto rxscan1214_scan3313
  rxscan1214_loop3312:
    inc rx1213_pos
    gt rx1213_pos, rx1213_eos, rx1213_fail3308
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!from", rx1213_pos
  rxscan1214_scan3313:
    nqp_rxmark rx1213_bstack, rxscan1214_loop3312, rx1213_pos, 0
  rxscan1214_done3314:
    nqp_rxmark rx1213_bstack, rxcap1215_fail3316, rx1213_pos, 0
    add $I11, rx1213_pos, 2
    gt $I11, rx1213_eos, rx1213_fail3308
    substr $S10, rx1213_tgt, rx1213_pos, 2
    ne $S10, ucs4:"gt", rx1213_fail3308
    add rx1213_pos, 2
    nqp_rxpeek $I19, rx1213_bstack, rxcap1215_fail3316
    inc $I19
    set $I11, rx1213_bstack[$I19]
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1213_pos)
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "sym")
    goto rxcap1215_done3315
  rxcap1215_fail3316:
    goto rx1213_fail3308
  rxcap1215_done3315:
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1213_curclass, "$!pos"
    lt $I11, 0, rx1213_fail3308
    nqp_rxmark rx1213_bstack, rxsubrule1216_pass3317, -1, 0
  rxsubrule1216_pass3317:
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1213_pos, $P11, rx1213_curclass, "$!pos"
    rx1213_cur."!cursor_pass"(rx1213_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1213_cur)
  rx1213_restart3307:
    repr_get_attr_obj rx1213_cstack, rx1213_cur, rx1213_curclass, "$!cstack"
  rx1213_fail3308:
    unless rx1213_bstack, rx1213_done3306
    pop $I19, rx1213_bstack
    if_null rx1213_cstack, rx1213_cstack_done3311
    unless rx1213_cstack, rx1213_cstack_done3311
    dec $I19
    set $P11, rx1213_cstack[$I19]
  rx1213_cstack_done3311:
    pop rx1213_rep, rx1213_bstack
    pop rx1213_pos, rx1213_bstack
    pop $I19, rx1213_bstack
    lt rx1213_pos, -1, rx1213_done3306
    lt rx1213_pos, 0, rx1213_fail3308
    eq $I19, 0, rx1213_fail3308
    nqp_islist $I20, rx1213_cstack
    unless $I20, rx1213_jump3309
    elements $I18, rx1213_bstack
    le $I18, 0, rx1213_cut3310
    dec $I18
    set $I18, rx1213_bstack[$I18]
  rx1213_cut3310:
    assign rx1213_cstack, $I18
  rx1213_jump3309:
    jump $I19
  rx1213_done3306:
    rx1213_cur."!cursor_fail"()
    .return (rx1213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_208_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1354
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1217_tgt
    .local int rx1217_pos
    .local int rx1217_off
    .local int rx1217_eos
    .local int rx1217_rep
    .local pmc rx1217_cur
    .local pmc rx1217_curclass
    .local pmc rx1217_bstack
    .local pmc rx1217_cstack
    (rx1217_cur, rx1217_tgt, rx1217_pos, rx1217_curclass, rx1217_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1217_cur
    length rx1217_eos, rx1217_tgt
    eq $I19, 1, rx1217_restart3320
    gt rx1217_pos, rx1217_eos, rx1217_fail3321
    repr_get_attr_int $I11, self, rx1217_curclass, "$!from"
    ne $I11, -1, rxscan1218_done3327
    goto rxscan1218_scan3326
  rxscan1218_loop3325:
    inc rx1217_pos
    gt rx1217_pos, rx1217_eos, rx1217_fail3321
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!from", rx1217_pos
  rxscan1218_scan3326:
    nqp_rxmark rx1217_bstack, rxscan1218_loop3325, rx1217_pos, 0
  rxscan1218_done3327:
    nqp_rxmark rx1217_bstack, rxcap1219_fail3329, rx1217_pos, 0
    add $I11, rx1217_pos, 3
    gt $I11, rx1217_eos, rx1217_fail3321
    substr $S10, rx1217_tgt, rx1217_pos, 3
    ne $S10, ucs4:"=:=", rx1217_fail3321
    add rx1217_pos, 3
    nqp_rxpeek $I19, rx1217_bstack, rxcap1219_fail3329
    inc $I19
    set $I11, rx1217_bstack[$I19]
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1217_pos)
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "sym")
    goto rxcap1219_done3328
  rxcap1219_fail3329:
    goto rx1217_fail3321
  rxcap1219_done3328:
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1217_curclass, "$!pos"
    lt $I11, 0, rx1217_fail3321
    nqp_rxmark rx1217_bstack, rxsubrule1220_pass3330, -1, 0
  rxsubrule1220_pass3330:
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1217_pos, $P11, rx1217_curclass, "$!pos"
    rx1217_cur."!cursor_pass"(rx1217_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1217_cur)
  rx1217_restart3320:
    repr_get_attr_obj rx1217_cstack, rx1217_cur, rx1217_curclass, "$!cstack"
  rx1217_fail3321:
    unless rx1217_bstack, rx1217_done3319
    pop $I19, rx1217_bstack
    if_null rx1217_cstack, rx1217_cstack_done3324
    unless rx1217_cstack, rx1217_cstack_done3324
    dec $I19
    set $P11, rx1217_cstack[$I19]
  rx1217_cstack_done3324:
    pop rx1217_rep, rx1217_bstack
    pop rx1217_pos, rx1217_bstack
    pop $I19, rx1217_bstack
    lt rx1217_pos, -1, rx1217_done3319
    lt rx1217_pos, 0, rx1217_fail3321
    eq $I19, 0, rx1217_fail3321
    nqp_islist $I20, rx1217_cstack
    unless $I20, rx1217_jump3322
    elements $I18, rx1217_bstack
    le $I18, 0, rx1217_cut3323
    dec $I18
    set $I18, rx1217_bstack[$I18]
  rx1217_cut3323:
    assign rx1217_cstack, $I18
  rx1217_jump3322:
    jump $I19
  rx1217_done3319:
    rx1217_cur."!cursor_fail"()
    .return (rx1217_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_209_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1355
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3333
    gt rx1221_pos, rx1221_eos, rx1221_fail3334
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3340
    goto rxscan1222_scan3339
  rxscan1222_loop3338:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3334
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3339:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3338, rx1221_pos, 0
  rxscan1222_done3340:
    nqp_rxmark rx1221_bstack, rxcap1223_fail3342, rx1221_pos, 0
    add $I11, rx1221_pos, 2
    gt $I11, rx1221_eos, rx1221_fail3334
    substr $S10, rx1221_tgt, rx1221_pos, 2
    ne $S10, ucs4:"~~", rx1221_fail3334
    add rx1221_pos, 2
    nqp_rxpeek $I19, rx1221_bstack, rxcap1223_fail3342
    inc $I19
    set $I11, rx1221_bstack[$I19]
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1221_pos)
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "sym")
    goto rxcap1223_done3341
  rxcap1223_fail3342:
    goto rx1221_fail3334
  rxcap1223_done3341:
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1221_curclass, "$!pos"
    lt $I11, 0, rx1221_fail3334
    nqp_rxmark rx1221_bstack, rxsubrule1224_pass3343, -1, 0
  rxsubrule1224_pass3343:
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1221_pos, $P11, rx1221_curclass, "$!pos"
    rx1221_cur."!cursor_pass"(rx1221_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3333:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3334:
    unless rx1221_bstack, rx1221_done3332
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3337
    unless rx1221_cstack, rx1221_cstack_done3337
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3337:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3332
    lt rx1221_pos, 0, rx1221_fail3334
    eq $I19, 0, rx1221_fail3334
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3335
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3336
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3336:
    assign rx1221_cstack, $I18
  rx1221_jump3335:
    jump $I19
  rx1221_done3332:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_210_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1357
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1225_tgt
    .local int rx1225_pos
    .local int rx1225_off
    .local int rx1225_eos
    .local int rx1225_rep
    .local pmc rx1225_cur
    .local pmc rx1225_curclass
    .local pmc rx1225_bstack
    .local pmc rx1225_cstack
    (rx1225_cur, rx1225_tgt, rx1225_pos, rx1225_curclass, rx1225_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1225_cur
    length rx1225_eos, rx1225_tgt
    eq $I19, 1, rx1225_restart3346
    gt rx1225_pos, rx1225_eos, rx1225_fail3347
    repr_get_attr_int $I11, self, rx1225_curclass, "$!from"
    ne $I11, -1, rxscan1226_done3353
    goto rxscan1226_scan3352
  rxscan1226_loop3351:
    inc rx1225_pos
    gt rx1225_pos, rx1225_eos, rx1225_fail3347
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!from", rx1225_pos
  rxscan1226_scan3352:
    nqp_rxmark rx1225_bstack, rxscan1226_loop3351, rx1225_pos, 0
  rxscan1226_done3353:
    nqp_rxmark rx1225_bstack, rxcap1227_fail3355, rx1225_pos, 0
    add $I11, rx1225_pos, 2
    gt $I11, rx1225_eos, rx1225_fail3347
    substr $S10, rx1225_tgt, rx1225_pos, 2
    ne $S10, ucs4:"&&", rx1225_fail3347
    add rx1225_pos, 2
    nqp_rxpeek $I19, rx1225_bstack, rxcap1227_fail3355
    inc $I19
    set $I11, rx1225_bstack[$I19]
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1225_pos)
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "sym")
    goto rxcap1227_done3354
  rxcap1227_fail3355:
    goto rx1225_fail3347
  rxcap1227_done3354:
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1225_curclass, "$!pos"
    lt $I11, 0, rx1225_fail3347
    nqp_rxmark rx1225_bstack, rxsubrule1228_pass3356, -1, 0
  rxsubrule1228_pass3356:
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1225_pos, $P11, rx1225_curclass, "$!pos"
    rx1225_cur."!cursor_pass"(rx1225_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1225_cur)
  rx1225_restart3346:
    repr_get_attr_obj rx1225_cstack, rx1225_cur, rx1225_curclass, "$!cstack"
  rx1225_fail3347:
    unless rx1225_bstack, rx1225_done3345
    pop $I19, rx1225_bstack
    if_null rx1225_cstack, rx1225_cstack_done3350
    unless rx1225_cstack, rx1225_cstack_done3350
    dec $I19
    set $P11, rx1225_cstack[$I19]
  rx1225_cstack_done3350:
    pop rx1225_rep, rx1225_bstack
    pop rx1225_pos, rx1225_bstack
    pop $I19, rx1225_bstack
    lt rx1225_pos, -1, rx1225_done3345
    lt rx1225_pos, 0, rx1225_fail3347
    eq $I19, 0, rx1225_fail3347
    nqp_islist $I20, rx1225_cstack
    unless $I20, rx1225_jump3348
    elements $I18, rx1225_bstack
    le $I18, 0, rx1225_cut3349
    dec $I18
    set $I18, rx1225_bstack[$I18]
  rx1225_cut3349:
    assign rx1225_cstack, $I18
  rx1225_jump3348:
    jump $I19
  rx1225_done3345:
    rx1225_cur."!cursor_fail"()
    .return (rx1225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_211_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1359
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1229_tgt
    .local int rx1229_pos
    .local int rx1229_off
    .local int rx1229_eos
    .local int rx1229_rep
    .local pmc rx1229_cur
    .local pmc rx1229_curclass
    .local pmc rx1229_bstack
    .local pmc rx1229_cstack
    (rx1229_cur, rx1229_tgt, rx1229_pos, rx1229_curclass, rx1229_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1229_cur
    length rx1229_eos, rx1229_tgt
    eq $I19, 1, rx1229_restart3359
    gt rx1229_pos, rx1229_eos, rx1229_fail3360
    repr_get_attr_int $I11, self, rx1229_curclass, "$!from"
    ne $I11, -1, rxscan1230_done3366
    goto rxscan1230_scan3365
  rxscan1230_loop3364:
    inc rx1229_pos
    gt rx1229_pos, rx1229_eos, rx1229_fail3360
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!from", rx1229_pos
  rxscan1230_scan3365:
    nqp_rxmark rx1229_bstack, rxscan1230_loop3364, rx1229_pos, 0
  rxscan1230_done3366:
    nqp_rxmark rx1229_bstack, rxcap1231_fail3368, rx1229_pos, 0
    add $I11, rx1229_pos, 2
    gt $I11, rx1229_eos, rx1229_fail3360
    substr $S10, rx1229_tgt, rx1229_pos, 2
    ne $S10, ucs4:"||", rx1229_fail3360
    add rx1229_pos, 2
    nqp_rxpeek $I19, rx1229_bstack, rxcap1231_fail3368
    inc $I19
    set $I11, rx1229_bstack[$I19]
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1229_pos)
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "sym")
    goto rxcap1231_done3367
  rxcap1231_fail3368:
    goto rx1229_fail3360
  rxcap1231_done3367:
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1229_curclass, "$!pos"
    lt $I11, 0, rx1229_fail3360
    nqp_rxmark rx1229_bstack, rxsubrule1232_pass3369, -1, 0
  rxsubrule1232_pass3369:
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1229_pos, $P11, rx1229_curclass, "$!pos"
    rx1229_cur."!cursor_pass"(rx1229_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1229_cur)
  rx1229_restart3359:
    repr_get_attr_obj rx1229_cstack, rx1229_cur, rx1229_curclass, "$!cstack"
  rx1229_fail3360:
    unless rx1229_bstack, rx1229_done3358
    pop $I19, rx1229_bstack
    if_null rx1229_cstack, rx1229_cstack_done3363
    unless rx1229_cstack, rx1229_cstack_done3363
    dec $I19
    set $P11, rx1229_cstack[$I19]
  rx1229_cstack_done3363:
    pop rx1229_rep, rx1229_bstack
    pop rx1229_pos, rx1229_bstack
    pop $I19, rx1229_bstack
    lt rx1229_pos, -1, rx1229_done3358
    lt rx1229_pos, 0, rx1229_fail3360
    eq $I19, 0, rx1229_fail3360
    nqp_islist $I20, rx1229_cstack
    unless $I20, rx1229_jump3361
    elements $I18, rx1229_bstack
    le $I18, 0, rx1229_cut3362
    dec $I18
    set $I18, rx1229_bstack[$I18]
  rx1229_cut3362:
    assign rx1229_cstack, $I18
  rx1229_jump3361:
    jump $I19
  rx1229_done3358:
    rx1229_cur."!cursor_fail"()
    .return (rx1229_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_212_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1360
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1233_tgt
    .local int rx1233_pos
    .local int rx1233_off
    .local int rx1233_eos
    .local int rx1233_rep
    .local pmc rx1233_cur
    .local pmc rx1233_curclass
    .local pmc rx1233_bstack
    .local pmc rx1233_cstack
    (rx1233_cur, rx1233_tgt, rx1233_pos, rx1233_curclass, rx1233_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1233_cur
    length rx1233_eos, rx1233_tgt
    eq $I19, 1, rx1233_restart3372
    gt rx1233_pos, rx1233_eos, rx1233_fail3373
    repr_get_attr_int $I11, self, rx1233_curclass, "$!from"
    ne $I11, -1, rxscan1234_done3379
    goto rxscan1234_scan3378
  rxscan1234_loop3377:
    inc rx1233_pos
    gt rx1233_pos, rx1233_eos, rx1233_fail3373
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!from", rx1233_pos
  rxscan1234_scan3378:
    nqp_rxmark rx1233_bstack, rxscan1234_loop3377, rx1233_pos, 0
  rxscan1234_done3379:
    nqp_rxmark rx1233_bstack, rxcap1235_fail3381, rx1233_pos, 0
    add $I11, rx1233_pos, 2
    gt $I11, rx1233_eos, rx1233_fail3373
    substr $S10, rx1233_tgt, rx1233_pos, 2
    ne $S10, ucs4:"//", rx1233_fail3373
    add rx1233_pos, 2
    nqp_rxpeek $I19, rx1233_bstack, rxcap1235_fail3381
    inc $I19
    set $I11, rx1233_bstack[$I19]
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1233_pos)
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "sym")
    goto rxcap1235_done3380
  rxcap1235_fail3381:
    goto rx1233_fail3373
  rxcap1235_done3380:
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1233_curclass, "$!pos"
    lt $I11, 0, rx1233_fail3373
    nqp_rxmark rx1233_bstack, rxsubrule1236_pass3382, -1, 0
  rxsubrule1236_pass3382:
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1233_pos, $P11, rx1233_curclass, "$!pos"
    rx1233_cur."!cursor_pass"(rx1233_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1233_cur)
  rx1233_restart3372:
    repr_get_attr_obj rx1233_cstack, rx1233_cur, rx1233_curclass, "$!cstack"
  rx1233_fail3373:
    unless rx1233_bstack, rx1233_done3371
    pop $I19, rx1233_bstack
    if_null rx1233_cstack, rx1233_cstack_done3376
    unless rx1233_cstack, rx1233_cstack_done3376
    dec $I19
    set $P11, rx1233_cstack[$I19]
  rx1233_cstack_done3376:
    pop rx1233_rep, rx1233_bstack
    pop rx1233_pos, rx1233_bstack
    pop $I19, rx1233_bstack
    lt rx1233_pos, -1, rx1233_done3371
    lt rx1233_pos, 0, rx1233_fail3373
    eq $I19, 0, rx1233_fail3373
    nqp_islist $I20, rx1233_cstack
    unless $I20, rx1233_jump3374
    elements $I18, rx1233_bstack
    le $I18, 0, rx1233_cut3375
    dec $I18
    set $I18, rx1233_bstack[$I18]
  rx1233_cut3375:
    assign rx1233_cstack, $I18
  rx1233_jump3374:
    jump $I19
  rx1233_done3371:
    rx1233_cur."!cursor_fail"()
    .return (rx1233_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_213_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1362
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1237_tgt
    .local int rx1237_pos
    .local int rx1237_off
    .local int rx1237_eos
    .local int rx1237_rep
    .local pmc rx1237_cur
    .local pmc rx1237_curclass
    .local pmc rx1237_bstack
    .local pmc rx1237_cstack
    (rx1237_cur, rx1237_tgt, rx1237_pos, rx1237_curclass, rx1237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1237_cur
    length rx1237_eos, rx1237_tgt
    eq $I19, 1, rx1237_restart3385
    gt rx1237_pos, rx1237_eos, rx1237_fail3386
    repr_get_attr_int $I11, self, rx1237_curclass, "$!from"
    ne $I11, -1, rxscan1238_done3392
    goto rxscan1238_scan3391
  rxscan1238_loop3390:
    inc rx1237_pos
    gt rx1237_pos, rx1237_eos, rx1237_fail3386
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!from", rx1237_pos
  rxscan1238_scan3391:
    nqp_rxmark rx1237_bstack, rxscan1238_loop3390, rx1237_pos, 0
  rxscan1238_done3392:
    add $I11, rx1237_pos, 2
    gt $I11, rx1237_eos, rx1237_fail3386
    substr $S10, rx1237_tgt, rx1237_pos, 2
    ne $S10, ucs4:"??", rx1237_fail3386
    add rx1237_pos, 2
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3386
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3386
    nqp_rxmark rx1237_bstack, rxsubrule1240_pass3394, -1, 0
  rxsubrule1240_pass3394:
    rx1237_cstack = rx1237_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    add $I11, rx1237_pos, 2
    gt $I11, rx1237_eos, rx1237_fail3386
    substr $S10, rx1237_tgt, rx1237_pos, 2
    ne $S10, ucs4:"!!", rx1237_fail3386
    add rx1237_pos, 2
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3386
    nqp_rxmark rx1237_bstack, rxsubrule1241_pass3395, -1, 0
  rxsubrule1241_pass3395:
    rx1237_cstack = rx1237_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    rx1237_cur."!cursor_pass"(rx1237_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1237_cur)
  rx1237_restart3385:
    repr_get_attr_obj rx1237_cstack, rx1237_cur, rx1237_curclass, "$!cstack"
  rx1237_fail3386:
    unless rx1237_bstack, rx1237_done3384
    pop $I19, rx1237_bstack
    if_null rx1237_cstack, rx1237_cstack_done3389
    unless rx1237_cstack, rx1237_cstack_done3389
    dec $I19
    set $P11, rx1237_cstack[$I19]
  rx1237_cstack_done3389:
    pop rx1237_rep, rx1237_bstack
    pop rx1237_pos, rx1237_bstack
    pop $I19, rx1237_bstack
    lt rx1237_pos, -1, rx1237_done3384
    lt rx1237_pos, 0, rx1237_fail3386
    eq $I19, 0, rx1237_fail3386
    nqp_islist $I20, rx1237_cstack
    unless $I20, rx1237_jump3387
    elements $I18, rx1237_bstack
    le $I18, 0, rx1237_cut3388
    dec $I18
    set $I18, rx1237_bstack[$I18]
  rx1237_cut3388:
    assign rx1237_cstack, $I18
  rx1237_jump3387:
    jump $I19
  rx1237_done3384:
    rx1237_cur."!cursor_fail"()
    .return (rx1237_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_214_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1370
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1242_tgt
    .local int rx1242_pos
    .local int rx1242_off
    .local int rx1242_eos
    .local int rx1242_rep
    .local pmc rx1242_cur
    .local pmc rx1242_curclass
    .local pmc rx1242_bstack
    .local pmc rx1242_cstack
    (rx1242_cur, rx1242_tgt, rx1242_pos, rx1242_curclass, rx1242_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1242_cur
    length rx1242_eos, rx1242_tgt
    eq $I19, 1, rx1242_restart3398
    gt rx1242_pos, rx1242_eos, rx1242_fail3399
    repr_get_attr_int $I11, self, rx1242_curclass, "$!from"
    ne $I11, -1, rxscan1243_done3405
    goto rxscan1243_scan3404
  rxscan1243_loop3403:
    inc rx1242_pos
    gt rx1242_pos, rx1242_eos, rx1242_fail3399
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!from", rx1242_pos
  rxscan1243_scan3404:
    nqp_rxmark rx1242_bstack, rxscan1243_loop3403, rx1242_pos, 0
  rxscan1243_done3405:
    nqp_rxmark rx1242_bstack, rxcap1244_fail3407, rx1242_pos, 0
    add $I11, rx1242_pos, 1
    gt $I11, rx1242_eos, rx1242_fail3399
    substr $S10, rx1242_tgt, rx1242_pos, 1
    ne $S10, ucs4:"=", rx1242_fail3399
    add rx1242_pos, 1
    nqp_rxpeek $I19, rx1242_bstack, rxcap1244_fail3407
    inc $I19
    set $I11, rx1242_bstack[$I19]
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1242_pos)
    rx1242_cstack = rx1242_cur."!cursor_capture"($P11, "sym")
    goto rxcap1244_done3406
  rxcap1244_fail3407:
    goto rx1242_fail3399
  rxcap1244_done3406:
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1242_curclass, "$!pos"
    lt $I11, 0, rx1242_fail3399
    repr_get_attr_int rx1242_pos, $P11, rx1242_curclass, "$!pos"
    rx1242_cur."!cursor_pass"(rx1242_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1242_cur)
  rx1242_restart3398:
    repr_get_attr_obj rx1242_cstack, rx1242_cur, rx1242_curclass, "$!cstack"
  rx1242_fail3399:
    unless rx1242_bstack, rx1242_done3397
    pop $I19, rx1242_bstack
    if_null rx1242_cstack, rx1242_cstack_done3402
    unless rx1242_cstack, rx1242_cstack_done3402
    dec $I19
    set $P11, rx1242_cstack[$I19]
  rx1242_cstack_done3402:
    pop rx1242_rep, rx1242_bstack
    pop rx1242_pos, rx1242_bstack
    pop $I19, rx1242_bstack
    lt rx1242_pos, -1, rx1242_done3397
    lt rx1242_pos, 0, rx1242_fail3399
    eq $I19, 0, rx1242_fail3399
    nqp_islist $I20, rx1242_cstack
    unless $I20, rx1242_jump3400
    elements $I18, rx1242_bstack
    le $I18, 0, rx1242_cut3401
    dec $I18
    set $I18, rx1242_bstack[$I18]
  rx1242_cut3401:
    assign rx1242_cstack, $I18
  rx1242_jump3400:
    jump $I19
  rx1242_done3397:
    rx1242_cur."!cursor_fail"()
    .return (rx1242_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_215_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1373
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1246_tgt
    .local int rx1246_pos
    .local int rx1246_off
    .local int rx1246_eos
    .local int rx1246_rep
    .local pmc rx1246_cur
    .local pmc rx1246_curclass
    .local pmc rx1246_bstack
    .local pmc rx1246_cstack
    (rx1246_cur, rx1246_tgt, rx1246_pos, rx1246_curclass, rx1246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1246_cur
    length rx1246_eos, rx1246_tgt
    eq $I19, 1, rx1246_restart3411
    gt rx1246_pos, rx1246_eos, rx1246_fail3412
    repr_get_attr_int $I11, self, rx1246_curclass, "$!from"
    ne $I11, -1, rxscan1247_done3418
    goto rxscan1247_scan3417
  rxscan1247_loop3416:
    inc rx1246_pos
    gt rx1246_pos, rx1246_eos, rx1246_fail3412
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!from", rx1246_pos
  rxscan1247_scan3417:
    nqp_rxmark rx1246_bstack, rxscan1247_loop3416, rx1246_pos, 0
  rxscan1247_done3418:
    nqp_rxmark rx1246_bstack, rxcap1248_fail3420, rx1246_pos, 0
    add $I11, rx1246_pos, 2
    gt $I11, rx1246_eos, rx1246_fail3412
    substr $S10, rx1246_tgt, rx1246_pos, 2
    ne $S10, ucs4:":=", rx1246_fail3412
    add rx1246_pos, 2
    nqp_rxpeek $I19, rx1246_bstack, rxcap1248_fail3420
    inc $I19
    set $I11, rx1246_bstack[$I19]
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1246_pos)
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "sym")
    goto rxcap1248_done3419
  rxcap1248_fail3420:
    goto rx1246_fail3412
  rxcap1248_done3419:
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3412
    nqp_rxmark rx1246_bstack, rxsubrule1249_pass3421, -1, 0
  rxsubrule1249_pass3421:
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1246_pos, $P11, rx1246_curclass, "$!pos"
    rx1246_cur."!cursor_pass"(rx1246_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1246_cur)
  rx1246_restart3411:
    repr_get_attr_obj rx1246_cstack, rx1246_cur, rx1246_curclass, "$!cstack"
  rx1246_fail3412:
    unless rx1246_bstack, rx1246_done3410
    pop $I19, rx1246_bstack
    if_null rx1246_cstack, rx1246_cstack_done3415
    unless rx1246_cstack, rx1246_cstack_done3415
    dec $I19
    set $P11, rx1246_cstack[$I19]
  rx1246_cstack_done3415:
    pop rx1246_rep, rx1246_bstack
    pop rx1246_pos, rx1246_bstack
    pop $I19, rx1246_bstack
    lt rx1246_pos, -1, rx1246_done3410
    lt rx1246_pos, 0, rx1246_fail3412
    eq $I19, 0, rx1246_fail3412
    nqp_islist $I20, rx1246_cstack
    unless $I20, rx1246_jump3413
    elements $I18, rx1246_bstack
    le $I18, 0, rx1246_cut3414
    dec $I18
    set $I18, rx1246_bstack[$I18]
  rx1246_cut3414:
    assign rx1246_cstack, $I18
  rx1246_jump3413:
    jump $I19
  rx1246_done3410:
    rx1246_cur."!cursor_fail"()
    .return (rx1246_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_216_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1374
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1250_tgt
    .local int rx1250_pos
    .local int rx1250_off
    .local int rx1250_eos
    .local int rx1250_rep
    .local pmc rx1250_cur
    .local pmc rx1250_curclass
    .local pmc rx1250_bstack
    .local pmc rx1250_cstack
    (rx1250_cur, rx1250_tgt, rx1250_pos, rx1250_curclass, rx1250_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1250_cur
    length rx1250_eos, rx1250_tgt
    eq $I19, 1, rx1250_restart3424
    gt rx1250_pos, rx1250_eos, rx1250_fail3425
    repr_get_attr_int $I11, self, rx1250_curclass, "$!from"
    ne $I11, -1, rxscan1251_done3431
    goto rxscan1251_scan3430
  rxscan1251_loop3429:
    inc rx1250_pos
    gt rx1250_pos, rx1250_eos, rx1250_fail3425
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!from", rx1250_pos
  rxscan1251_scan3430:
    nqp_rxmark rx1250_bstack, rxscan1251_loop3429, rx1250_pos, 0
  rxscan1251_done3431:
    nqp_rxmark rx1250_bstack, rxcap1252_fail3433, rx1250_pos, 0
    add $I11, rx1250_pos, 3
    gt $I11, rx1250_eos, rx1250_fail3425
    substr $S10, rx1250_tgt, rx1250_pos, 3
    ne $S10, ucs4:"::=", rx1250_fail3425
    add rx1250_pos, 3
    nqp_rxpeek $I19, rx1250_bstack, rxcap1252_fail3433
    inc $I19
    set $I11, rx1250_bstack[$I19]
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1250_pos)
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "sym")
    goto rxcap1252_done3432
  rxcap1252_fail3433:
    goto rx1250_fail3425
  rxcap1252_done3432:
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1250_curclass, "$!pos"
    lt $I11, 0, rx1250_fail3425
    nqp_rxmark rx1250_bstack, rxsubrule1253_pass3434, -1, 0
  rxsubrule1253_pass3434:
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1250_pos, $P11, rx1250_curclass, "$!pos"
    rx1250_cur."!cursor_pass"(rx1250_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1250_cur)
  rx1250_restart3424:
    repr_get_attr_obj rx1250_cstack, rx1250_cur, rx1250_curclass, "$!cstack"
  rx1250_fail3425:
    unless rx1250_bstack, rx1250_done3423
    pop $I19, rx1250_bstack
    if_null rx1250_cstack, rx1250_cstack_done3428
    unless rx1250_cstack, rx1250_cstack_done3428
    dec $I19
    set $P11, rx1250_cstack[$I19]
  rx1250_cstack_done3428:
    pop rx1250_rep, rx1250_bstack
    pop rx1250_pos, rx1250_bstack
    pop $I19, rx1250_bstack
    lt rx1250_pos, -1, rx1250_done3423
    lt rx1250_pos, 0, rx1250_fail3425
    eq $I19, 0, rx1250_fail3425
    nqp_islist $I20, rx1250_cstack
    unless $I20, rx1250_jump3426
    elements $I18, rx1250_bstack
    le $I18, 0, rx1250_cut3427
    dec $I18
    set $I18, rx1250_bstack[$I18]
  rx1250_cut3427:
    assign rx1250_cstack, $I18
  rx1250_jump3426:
    jump $I19
  rx1250_done3423:
    rx1250_cur."!cursor_fail"()
    .return (rx1250_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_217_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1376
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1254_tgt
    .local int rx1254_pos
    .local int rx1254_off
    .local int rx1254_eos
    .local int rx1254_rep
    .local pmc rx1254_cur
    .local pmc rx1254_curclass
    .local pmc rx1254_bstack
    .local pmc rx1254_cstack
    (rx1254_cur, rx1254_tgt, rx1254_pos, rx1254_curclass, rx1254_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1254_cur
    length rx1254_eos, rx1254_tgt
    eq $I19, 1, rx1254_restart3437
    gt rx1254_pos, rx1254_eos, rx1254_fail3438
    repr_get_attr_int $I11, self, rx1254_curclass, "$!from"
    ne $I11, -1, rxscan1255_done3444
    goto rxscan1255_scan3443
  rxscan1255_loop3442:
    inc rx1254_pos
    gt rx1254_pos, rx1254_eos, rx1254_fail3438
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!from", rx1254_pos
  rxscan1255_scan3443:
    nqp_rxmark rx1254_bstack, rxscan1255_loop3442, rx1254_pos, 0
  rxscan1255_done3444:
    nqp_rxmark rx1254_bstack, rxcap1256_fail3446, rx1254_pos, 0
    add $I11, rx1254_pos, 1
    gt $I11, rx1254_eos, rx1254_fail3438
    substr $S10, rx1254_tgt, rx1254_pos, 1
    ne $S10, ucs4:",", rx1254_fail3438
    add rx1254_pos, 1
    nqp_rxpeek $I19, rx1254_bstack, rxcap1256_fail3446
    inc $I19
    set $I11, rx1254_bstack[$I19]
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1254_pos)
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "sym")
    goto rxcap1256_done3445
  rxcap1256_fail3446:
    goto rx1254_fail3438
  rxcap1256_done3445:
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1254_curclass, "$!pos"
    lt $I11, 0, rx1254_fail3438
    nqp_rxmark rx1254_bstack, rxsubrule1257_pass3447, -1, 0
  rxsubrule1257_pass3447:
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1254_pos, $P11, rx1254_curclass, "$!pos"
    rx1254_cur."!cursor_pass"(rx1254_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1254_cur)
  rx1254_restart3437:
    repr_get_attr_obj rx1254_cstack, rx1254_cur, rx1254_curclass, "$!cstack"
  rx1254_fail3438:
    unless rx1254_bstack, rx1254_done3436
    pop $I19, rx1254_bstack
    if_null rx1254_cstack, rx1254_cstack_done3441
    unless rx1254_cstack, rx1254_cstack_done3441
    dec $I19
    set $P11, rx1254_cstack[$I19]
  rx1254_cstack_done3441:
    pop rx1254_rep, rx1254_bstack
    pop rx1254_pos, rx1254_bstack
    pop $I19, rx1254_bstack
    lt rx1254_pos, -1, rx1254_done3436
    lt rx1254_pos, 0, rx1254_fail3438
    eq $I19, 0, rx1254_fail3438
    nqp_islist $I20, rx1254_cstack
    unless $I20, rx1254_jump3439
    elements $I18, rx1254_bstack
    le $I18, 0, rx1254_cut3440
    dec $I18
    set $I18, rx1254_bstack[$I18]
  rx1254_cut3440:
    assign rx1254_cstack, $I18
  rx1254_jump3439:
    jump $I19
  rx1254_done3436:
    rx1254_cur."!cursor_fail"()
    .return (rx1254_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_218_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1378
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_407_1356803026.47425' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1258_tgt
    .local int rx1258_pos
    .local int rx1258_off
    .local int rx1258_eos
    .local int rx1258_rep
    .local pmc rx1258_cur
    .local pmc rx1258_curclass
    .local pmc rx1258_bstack
    .local pmc rx1258_cstack
    (rx1258_cur, rx1258_tgt, rx1258_pos, rx1258_curclass, rx1258_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1258_cur
    length rx1258_eos, rx1258_tgt
    eq $I19, 1, rx1258_restart3450
    gt rx1258_pos, rx1258_eos, rx1258_fail3451
    repr_get_attr_int $I11, self, rx1258_curclass, "$!from"
    ne $I11, -1, rxscan1259_done3457
    goto rxscan1259_scan3456
  rxscan1259_loop3455:
    inc rx1258_pos
    gt rx1258_pos, rx1258_eos, rx1258_fail3451
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!from", rx1258_pos
  rxscan1259_scan3456:
    nqp_rxmark rx1258_bstack, rxscan1259_loop3455, rx1258_pos, 0
  rxscan1259_done3457:
    nqp_rxmark rx1258_bstack, rxcap1260_fail3459, rx1258_pos, 0
    add $I11, rx1258_pos, 6
    gt $I11, rx1258_eos, rx1258_fail3451
    substr $S10, rx1258_tgt, rx1258_pos, 6
    ne $S10, ucs4:"return", rx1258_fail3451
    add rx1258_pos, 6
    nqp_rxpeek $I19, rx1258_bstack, rxcap1260_fail3459
    inc $I19
    set $I11, rx1258_bstack[$I19]
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1258_pos)
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "sym")
    goto rxcap1260_done3458
  rxcap1260_fail3459:
    goto rx1258_fail3451
  rxcap1260_done3458:
    ge rx1258_pos, rx1258_eos, rx1258_fail3451
    is_cclass $I11, .CCLASS_WHITESPACE, rx1258_tgt, rx1258_pos
    unless $I11, rx1258_fail3451
    add rx1258_pos, 1
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1258_curclass, "$!pos"
    lt $I11, 0, rx1258_fail3451
    nqp_rxmark rx1258_bstack, rxsubrule1261_pass3460, -1, 0
  rxsubrule1261_pass3460:
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1258_pos, $P11, rx1258_curclass, "$!pos"
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    store_lex unicode:"$\x{a2}", rx1258_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_407_1356803026.47425' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1258_cur."!cursor_pass"(rx1258_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1258_cur)
  rx1258_restart3450:
    repr_get_attr_obj rx1258_cstack, rx1258_cur, rx1258_curclass, "$!cstack"
  rx1258_fail3451:
    unless rx1258_bstack, rx1258_done3449
    pop $I19, rx1258_bstack
    if_null rx1258_cstack, rx1258_cstack_done3454
    unless rx1258_cstack, rx1258_cstack_done3454
    dec $I19
    set $P11, rx1258_cstack[$I19]
  rx1258_cstack_done3454:
    pop rx1258_rep, rx1258_bstack
    pop rx1258_pos, rx1258_bstack
    pop $I19, rx1258_bstack
    lt rx1258_pos, -1, rx1258_done3449
    lt rx1258_pos, 0, rx1258_fail3451
    eq $I19, 0, rx1258_fail3451
    nqp_islist $I20, rx1258_cstack
    unless $I20, rx1258_jump3452
    elements $I18, rx1258_bstack
    le $I18, 0, rx1258_cut3453
    dec $I18
    set $I18, rx1258_bstack[$I18]
  rx1258_cut3453:
    assign rx1258_cstack, $I18
  rx1258_jump3452:
    jump $I19
  rx1258_done3449:
    rx1258_cur."!cursor_fail"()
    .return (rx1258_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1356803026.47425") :anon :lex :outer("cuid_218_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1378

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_219_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1379
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1262_tgt
    .local int rx1262_pos
    .local int rx1262_off
    .local int rx1262_eos
    .local int rx1262_rep
    .local pmc rx1262_cur
    .local pmc rx1262_curclass
    .local pmc rx1262_bstack
    .local pmc rx1262_cstack
    (rx1262_cur, rx1262_tgt, rx1262_pos, rx1262_curclass, rx1262_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1262_cur
    length rx1262_eos, rx1262_tgt
    eq $I19, 1, rx1262_restart3463
    gt rx1262_pos, rx1262_eos, rx1262_fail3464
    repr_get_attr_int $I11, self, rx1262_curclass, "$!from"
    ne $I11, -1, rxscan1263_done3470
    goto rxscan1263_scan3469
  rxscan1263_loop3468:
    inc rx1262_pos
    gt rx1262_pos, rx1262_eos, rx1262_fail3464
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!from", rx1262_pos
  rxscan1263_scan3469:
    nqp_rxmark rx1262_bstack, rxscan1263_loop3468, rx1262_pos, 0
  rxscan1263_done3470:
    nqp_rxmark rx1262_bstack, rxcap1264_fail3472, rx1262_pos, 0
    add $I11, rx1262_pos, 4
    gt $I11, rx1262_eos, rx1262_fail3464
    substr $S10, rx1262_tgt, rx1262_pos, 4
    ne $S10, ucs4:"make", rx1262_fail3464
    add rx1262_pos, 4
    nqp_rxpeek $I19, rx1262_bstack, rxcap1264_fail3472
    inc $I19
    set $I11, rx1262_bstack[$I19]
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1262_pos)
    rx1262_cstack = rx1262_cur."!cursor_capture"($P11, "sym")
    goto rxcap1264_done3471
  rxcap1264_fail3472:
    goto rx1262_fail3464
  rxcap1264_done3471:
    ge rx1262_pos, rx1262_eos, rx1262_fail3464
    is_cclass $I11, .CCLASS_WHITESPACE, rx1262_tgt, rx1262_pos
    unless $I11, rx1262_fail3464
    add rx1262_pos, 1
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1262_curclass, "$!pos"
    lt $I11, 0, rx1262_fail3464
    nqp_rxmark rx1262_bstack, rxsubrule1265_pass3473, -1, 0
  rxsubrule1265_pass3473:
    rx1262_cstack = rx1262_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1262_pos, $P11, rx1262_curclass, "$!pos"
    rx1262_cur."!cursor_pass"(rx1262_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1262_cur)
  rx1262_restart3463:
    repr_get_attr_obj rx1262_cstack, rx1262_cur, rx1262_curclass, "$!cstack"
  rx1262_fail3464:
    unless rx1262_bstack, rx1262_done3462
    pop $I19, rx1262_bstack
    if_null rx1262_cstack, rx1262_cstack_done3467
    unless rx1262_cstack, rx1262_cstack_done3467
    dec $I19
    set $P11, rx1262_cstack[$I19]
  rx1262_cstack_done3467:
    pop rx1262_rep, rx1262_bstack
    pop rx1262_pos, rx1262_bstack
    pop $I19, rx1262_bstack
    lt rx1262_pos, -1, rx1262_done3462
    lt rx1262_pos, 0, rx1262_fail3464
    eq $I19, 0, rx1262_fail3464
    nqp_islist $I20, rx1262_cstack
    unless $I20, rx1262_jump3465
    elements $I18, rx1262_bstack
    le $I18, 0, rx1262_cut3466
    dec $I18
    set $I18, rx1262_bstack[$I18]
  rx1262_cut3466:
    assign rx1262_cstack, $I18
  rx1262_jump3465:
    jump $I19
  rx1262_done3462:
    rx1262_cur."!cursor_fail"()
    .return (rx1262_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_220_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1380
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_408_1356803026.47425' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1266_tgt
    .local int rx1266_pos
    .local int rx1266_off
    .local int rx1266_eos
    .local int rx1266_rep
    .local pmc rx1266_cur
    .local pmc rx1266_curclass
    .local pmc rx1266_bstack
    .local pmc rx1266_cstack
    (rx1266_cur, rx1266_tgt, rx1266_pos, rx1266_curclass, rx1266_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1266_cur
    length rx1266_eos, rx1266_tgt
    eq $I19, 1, rx1266_restart3476
    gt rx1266_pos, rx1266_eos, rx1266_fail3477
    repr_get_attr_int $I11, self, rx1266_curclass, "$!from"
    ne $I11, -1, rxscan1267_done3483
    goto rxscan1267_scan3482
  rxscan1267_loop3481:
    inc rx1266_pos
    gt rx1266_pos, rx1266_eos, rx1266_fail3477
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!from", rx1266_pos
  rxscan1267_scan3482:
    nqp_rxmark rx1266_bstack, rxscan1267_loop3481, rx1266_pos, 0
  rxscan1267_done3483:
    nqp_rxmark rx1266_bstack, rxcap1268_fail3485, rx1266_pos, 0
    add $I11, rx1266_pos, 4
    gt $I11, rx1266_eos, rx1266_fail3477
    substr $S10, rx1266_tgt, rx1266_pos, 4
    ne $S10, ucs4:"last", rx1266_fail3477
    add rx1266_pos, 4
    nqp_rxpeek $I19, rx1266_bstack, rxcap1268_fail3485
    inc $I19
    set $I11, rx1266_bstack[$I19]
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    $P11 = rx1266_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1266_pos)
    rx1266_cstack = rx1266_cur."!cursor_capture"($P11, "sym")
    goto rxcap1268_done3484
  rxcap1268_fail3485:
    goto rx1266_fail3477
  rxcap1268_done3484:
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    store_lex unicode:"$\x{a2}", rx1266_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_408_1356803026.47425' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1266_cur."!cursor_pass"(rx1266_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1266_cur)
  rx1266_restart3476:
    repr_get_attr_obj rx1266_cstack, rx1266_cur, rx1266_curclass, "$!cstack"
  rx1266_fail3477:
    unless rx1266_bstack, rx1266_done3475
    pop $I19, rx1266_bstack
    if_null rx1266_cstack, rx1266_cstack_done3480
    unless rx1266_cstack, rx1266_cstack_done3480
    dec $I19
    set $P11, rx1266_cstack[$I19]
  rx1266_cstack_done3480:
    pop rx1266_rep, rx1266_bstack
    pop rx1266_pos, rx1266_bstack
    pop $I19, rx1266_bstack
    lt rx1266_pos, -1, rx1266_done3475
    lt rx1266_pos, 0, rx1266_fail3477
    eq $I19, 0, rx1266_fail3477
    nqp_islist $I20, rx1266_cstack
    unless $I20, rx1266_jump3478
    elements $I18, rx1266_bstack
    le $I18, 0, rx1266_cut3479
    dec $I18
    set $I18, rx1266_bstack[$I18]
  rx1266_cut3479:
    assign rx1266_cstack, $I18
  rx1266_jump3478:
    jump $I19
  rx1266_done3475:
    rx1266_cur."!cursor_fail"()
    .return (rx1266_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1356803026.47425") :anon :lex :outer("cuid_220_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1380

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_221_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1381
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_409_1356803026.47425' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1269_tgt
    .local int rx1269_pos
    .local int rx1269_off
    .local int rx1269_eos
    .local int rx1269_rep
    .local pmc rx1269_cur
    .local pmc rx1269_curclass
    .local pmc rx1269_bstack
    .local pmc rx1269_cstack
    (rx1269_cur, rx1269_tgt, rx1269_pos, rx1269_curclass, rx1269_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1269_cur
    length rx1269_eos, rx1269_tgt
    eq $I19, 1, rx1269_restart3488
    gt rx1269_pos, rx1269_eos, rx1269_fail3489
    repr_get_attr_int $I11, self, rx1269_curclass, "$!from"
    ne $I11, -1, rxscan1270_done3495
    goto rxscan1270_scan3494
  rxscan1270_loop3493:
    inc rx1269_pos
    gt rx1269_pos, rx1269_eos, rx1269_fail3489
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!from", rx1269_pos
  rxscan1270_scan3494:
    nqp_rxmark rx1269_bstack, rxscan1270_loop3493, rx1269_pos, 0
  rxscan1270_done3495:
    nqp_rxmark rx1269_bstack, rxcap1271_fail3497, rx1269_pos, 0
    add $I11, rx1269_pos, 4
    gt $I11, rx1269_eos, rx1269_fail3489
    substr $S10, rx1269_tgt, rx1269_pos, 4
    ne $S10, ucs4:"next", rx1269_fail3489
    add rx1269_pos, 4
    nqp_rxpeek $I19, rx1269_bstack, rxcap1271_fail3497
    inc $I19
    set $I11, rx1269_bstack[$I19]
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!pos", rx1269_pos
    $P11 = rx1269_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1269_pos)
    rx1269_cstack = rx1269_cur."!cursor_capture"($P11, "sym")
    goto rxcap1271_done3496
  rxcap1271_fail3497:
    goto rx1269_fail3489
  rxcap1271_done3496:
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!pos", rx1269_pos
    store_lex unicode:"$\x{a2}", rx1269_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_409_1356803026.47425' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1269_cur."!cursor_pass"(rx1269_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1269_cur)
  rx1269_restart3488:
    repr_get_attr_obj rx1269_cstack, rx1269_cur, rx1269_curclass, "$!cstack"
  rx1269_fail3489:
    unless rx1269_bstack, rx1269_done3487
    pop $I19, rx1269_bstack
    if_null rx1269_cstack, rx1269_cstack_done3492
    unless rx1269_cstack, rx1269_cstack_done3492
    dec $I19
    set $P11, rx1269_cstack[$I19]
  rx1269_cstack_done3492:
    pop rx1269_rep, rx1269_bstack
    pop rx1269_pos, rx1269_bstack
    pop $I19, rx1269_bstack
    lt rx1269_pos, -1, rx1269_done3487
    lt rx1269_pos, 0, rx1269_fail3489
    eq $I19, 0, rx1269_fail3489
    nqp_islist $I20, rx1269_cstack
    unless $I20, rx1269_jump3490
    elements $I18, rx1269_bstack
    le $I18, 0, rx1269_cut3491
    dec $I18
    set $I18, rx1269_bstack[$I18]
  rx1269_cut3491:
    assign rx1269_cstack, $I18
  rx1269_jump3490:
    jump $I19
  rx1269_done3487:
    rx1269_cur."!cursor_fail"()
    .return (rx1269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1356803026.47425") :anon :lex :outer("cuid_221_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1381

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_222_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1382
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_410_1356803026.47425' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1272_tgt
    .local int rx1272_pos
    .local int rx1272_off
    .local int rx1272_eos
    .local int rx1272_rep
    .local pmc rx1272_cur
    .local pmc rx1272_curclass
    .local pmc rx1272_bstack
    .local pmc rx1272_cstack
    (rx1272_cur, rx1272_tgt, rx1272_pos, rx1272_curclass, rx1272_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1272_cur
    length rx1272_eos, rx1272_tgt
    eq $I19, 1, rx1272_restart3500
    gt rx1272_pos, rx1272_eos, rx1272_fail3501
    repr_get_attr_int $I11, self, rx1272_curclass, "$!from"
    ne $I11, -1, rxscan1273_done3507
    goto rxscan1273_scan3506
  rxscan1273_loop3505:
    inc rx1272_pos
    gt rx1272_pos, rx1272_eos, rx1272_fail3501
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!from", rx1272_pos
  rxscan1273_scan3506:
    nqp_rxmark rx1272_bstack, rxscan1273_loop3505, rx1272_pos, 0
  rxscan1273_done3507:
    nqp_rxmark rx1272_bstack, rxcap1274_fail3509, rx1272_pos, 0
    add $I11, rx1272_pos, 4
    gt $I11, rx1272_eos, rx1272_fail3501
    substr $S10, rx1272_tgt, rx1272_pos, 4
    ne $S10, ucs4:"redo", rx1272_fail3501
    add rx1272_pos, 4
    nqp_rxpeek $I19, rx1272_bstack, rxcap1274_fail3509
    inc $I19
    set $I11, rx1272_bstack[$I19]
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    $P11 = rx1272_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1272_pos)
    rx1272_cstack = rx1272_cur."!cursor_capture"($P11, "sym")
    goto rxcap1274_done3508
  rxcap1274_fail3509:
    goto rx1272_fail3501
  rxcap1274_done3508:
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    store_lex unicode:"$\x{a2}", rx1272_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_410_1356803026.47425' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1272_cur."!cursor_pass"(rx1272_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1272_cur)
  rx1272_restart3500:
    repr_get_attr_obj rx1272_cstack, rx1272_cur, rx1272_curclass, "$!cstack"
  rx1272_fail3501:
    unless rx1272_bstack, rx1272_done3499
    pop $I19, rx1272_bstack
    if_null rx1272_cstack, rx1272_cstack_done3504
    unless rx1272_cstack, rx1272_cstack_done3504
    dec $I19
    set $P11, rx1272_cstack[$I19]
  rx1272_cstack_done3504:
    pop rx1272_rep, rx1272_bstack
    pop rx1272_pos, rx1272_bstack
    pop $I19, rx1272_bstack
    lt rx1272_pos, -1, rx1272_done3499
    lt rx1272_pos, 0, rx1272_fail3501
    eq $I19, 0, rx1272_fail3501
    nqp_islist $I20, rx1272_cstack
    unless $I20, rx1272_jump3502
    elements $I18, rx1272_bstack
    le $I18, 0, rx1272_cut3503
    dec $I18
    set $I18, rx1272_bstack[$I18]
  rx1272_cut3503:
    assign rx1272_cstack, $I18
  rx1272_jump3502:
    jump $I19
  rx1272_done3499:
    rx1272_cur."!cursor_fail"()
    .return (rx1272_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1356803026.47425") :anon :lex :outer("cuid_222_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1382

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_223_1356803026.47425") :anon :lex :outer("cuid_224_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1384
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3510
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5003
  fallback3510:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3511
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5005
  fallback3511:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_245_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1390
    .const 'Sub' $P5013 = 'cuid_225_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_226_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_228_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_229_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_231_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_232_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_235_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_238_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_240_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_242_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_243_1356803026.47425' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_244_1356803026.47425' 
    capture_lex $P5013 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_225_1356803026.47425' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_226_1356803026.47425' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_228_1356803026.47425' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_229_1356803026.47425' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_231_1356803026.47425' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_232_1356803026.47425' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_235_1356803026.47425' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_238_1356803026.47425' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_240_1356803026.47425' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_242_1356803026.47425' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_243_1356803026.47425' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_244_1356803026.47425' 
    capture_lex $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_225_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1391
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1275_tgt
    .local int rx1275_pos
    .local int rx1275_off
    .local int rx1275_eos
    .local int rx1275_rep
    .local pmc rx1275_cur
    .local pmc rx1275_curclass
    .local pmc rx1275_bstack
    .local pmc rx1275_cstack
    (rx1275_cur, rx1275_tgt, rx1275_pos, rx1275_curclass, rx1275_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1275_cur
    length rx1275_eos, rx1275_tgt
    eq $I19, 1, rx1275_restart3514
    gt rx1275_pos, rx1275_eos, rx1275_fail3515
    repr_get_attr_int $I11, self, rx1275_curclass, "$!from"
    ne $I11, -1, rxscan1276_done3521
    goto rxscan1276_scan3520
  rxscan1276_loop3519:
    inc rx1275_pos
    gt rx1275_pos, rx1275_eos, rx1275_fail3515
    repr_bind_attr_int rx1275_cur, rx1275_curclass, "$!from", rx1275_pos
  rxscan1276_scan3520:
    nqp_rxmark rx1275_bstack, rxscan1276_loop3519, rx1275_pos, 0
  rxscan1276_done3521:
    ge rx1275_pos, rx1275_eos, rx1275_fail3515
    substr $S11, rx1275_tgt, rx1275_pos, 1
    index $I11, ucs4:"}/", $S11
    lt $I11, 0, rx1275_fail3515
    inc rx1275_pos
    rx1275_cur."!cursor_pass"(rx1275_pos, "rxstopper", 'backtrack'=>1)
    .return (rx1275_cur)
  rx1275_restart3514:
    repr_get_attr_obj rx1275_cstack, rx1275_cur, rx1275_curclass, "$!cstack"
  rx1275_fail3515:
    unless rx1275_bstack, rx1275_done3513
    pop $I19, rx1275_bstack
    if_null rx1275_cstack, rx1275_cstack_done3518
    unless rx1275_cstack, rx1275_cstack_done3518
    dec $I19
    set $P11, rx1275_cstack[$I19]
  rx1275_cstack_done3518:
    pop rx1275_rep, rx1275_bstack
    pop rx1275_pos, rx1275_bstack
    pop $I19, rx1275_bstack
    lt rx1275_pos, -1, rx1275_done3513
    lt rx1275_pos, 0, rx1275_fail3515
    eq $I19, 0, rx1275_fail3515
    nqp_islist $I20, rx1275_cstack
    unless $I20, rx1275_jump3516
    elements $I18, rx1275_bstack
    le $I18, 0, rx1275_cut3517
    dec $I18
    set $I18, rx1275_bstack[$I18]
  rx1275_cut3517:
    assign rx1275_cstack, $I18
  rx1275_jump3516:
    jump $I19
  rx1275_done3513:
    rx1275_cur."!cursor_fail"()
    .return (rx1275_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_226_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1395
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_227_1356803026.47425' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1277_tgt
    .local int rx1277_pos
    .local int rx1277_off
    .local int rx1277_eos
    .local int rx1277_rep
    .local pmc rx1277_cur
    .local pmc rx1277_curclass
    .local pmc rx1277_bstack
    .local pmc rx1277_cstack
    (rx1277_cur, rx1277_tgt, rx1277_pos, rx1277_curclass, rx1277_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1277_cur
    length rx1277_eos, rx1277_tgt
    eq $I19, 1, rx1277_restart3524
    gt rx1277_pos, rx1277_eos, rx1277_fail3525
    repr_get_attr_int $I11, self, rx1277_curclass, "$!from"
    ne $I11, -1, rxscan1278_done3531
    goto rxscan1278_scan3530
  rxscan1278_loop3529:
    inc rx1277_pos
    gt rx1277_pos, rx1277_eos, rx1277_fail3525
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!from", rx1277_pos
  rxscan1278_scan3530:
    nqp_rxmark rx1277_bstack, rxscan1278_loop3529, rx1277_pos, 0
  rxscan1278_done3531:
    add $I11, rx1277_pos, 1
    gt $I11, rx1277_eos, rx1277_fail3525
    substr $S10, rx1277_tgt, rx1277_pos, 1
    ne $S10, ucs4:":", rx1277_fail3525
    add rx1277_pos, 1
    .const 'Sub' $P5001 = 'cuid_227_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!pos", rx1277_pos
    $P11 = rx1277_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1277_curclass, "$!pos"
    lt $I11, 0, rx1277_fail3525
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!pos", rx1277_pos
    $P11 = rx1277_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1277_curclass, "$!pos"
    lt $I11, 0, rx1277_fail3525
    nqp_rxmark rx1277_bstack, rxsubrule1281_pass3542, -1, 0
  rxsubrule1281_pass3542:
    rx1277_cstack = rx1277_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1277_pos, $P11, rx1277_curclass, "$!pos"
    repr_bind_attr_int rx1277_cur, rx1277_curclass, "$!pos", rx1277_pos
    $P11 = rx1277_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1277_curclass, "$!pos"
    lt $I11, 0, rx1277_fail3525
    repr_get_attr_int rx1277_pos, $P11, rx1277_curclass, "$!pos"
    add $I11, rx1277_pos, 1
    gt $I11, rx1277_eos, rx1277_fail3525
    substr $S10, rx1277_tgt, rx1277_pos, 1
    ne $S10, ucs4:";", rx1277_fail3525
    add rx1277_pos, 1
    rx1277_cur."!cursor_pass"(rx1277_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1277_cur)
  rx1277_restart3524:
    repr_get_attr_obj rx1277_cstack, rx1277_cur, rx1277_curclass, "$!cstack"
  rx1277_fail3525:
    unless rx1277_bstack, rx1277_done3523
    pop $I19, rx1277_bstack
    if_null rx1277_cstack, rx1277_cstack_done3528
    unless rx1277_cstack, rx1277_cstack_done3528
    dec $I19
    set $P11, rx1277_cstack[$I19]
  rx1277_cstack_done3528:
    pop rx1277_rep, rx1277_bstack
    pop rx1277_pos, rx1277_bstack
    pop $I19, rx1277_bstack
    lt rx1277_pos, -1, rx1277_done3523
    lt rx1277_pos, 0, rx1277_fail3525
    eq $I19, 0, rx1277_fail3525
    nqp_islist $I20, rx1277_cstack
    unless $I20, rx1277_jump3526
    elements $I18, rx1277_bstack
    le $I18, 0, rx1277_cut3527
    dec $I18
    set $I18, rx1277_bstack[$I18]
  rx1277_cut3527:
    assign rx1277_cstack, $I18
  rx1277_jump3526:
    jump $I19
  rx1277_done3523:
    rx1277_cur."!cursor_fail"()
    .return (rx1277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1356803026.47425") :anon :lex :outer("cuid_226_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1279_tgt
    .local int rx1279_pos
    .local int rx1279_off
    .local int rx1279_eos
    .local int rx1279_rep
    .local pmc rx1279_cur
    .local pmc rx1279_curclass
    .local pmc rx1279_bstack
    .local pmc rx1279_cstack
    (rx1279_cur, rx1279_tgt, rx1279_pos, rx1279_curclass, rx1279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1279_cur
    length rx1279_eos, rx1279_tgt
    eq $I19, 1, rx1279_restart3534
    gt rx1279_pos, rx1279_eos, rx1279_fail3535
    repr_get_attr_int $I11, self, rx1279_curclass, "$!from"
    ne $I11, -1, rxscan1280_done3541
    goto rxscan1280_scan3540
  rxscan1280_loop3539:
    inc rx1279_pos
    gt rx1279_pos, rx1279_eos, rx1279_fail3535
    repr_bind_attr_int rx1279_cur, rx1279_curclass, "$!from", rx1279_pos
  rxscan1280_scan3540:
    nqp_rxmark rx1279_bstack, rxscan1280_loop3539, rx1279_pos, 0
  rxscan1280_done3541:
    add $I11, rx1279_pos, 2
    gt $I11, rx1279_eos, rx1279_fail3535
    substr $S10, rx1279_tgt, rx1279_pos, 2
    ne $S10, ucs4:"my", rx1279_fail3535
    add rx1279_pos, 2
    rx1279_cur."!cursor_pass"(rx1279_pos, 'backtrack'=>1)
    .return (rx1279_cur)
  rx1279_restart3534:
    repr_get_attr_obj rx1279_cstack, rx1279_cur, rx1279_curclass, "$!cstack"
  rx1279_fail3535:
    unless rx1279_bstack, rx1279_done3533
    pop $I19, rx1279_bstack
    if_null rx1279_cstack, rx1279_cstack_done3538
    unless rx1279_cstack, rx1279_cstack_done3538
    dec $I19
    set $P11, rx1279_cstack[$I19]
  rx1279_cstack_done3538:
    pop rx1279_rep, rx1279_bstack
    pop rx1279_pos, rx1279_bstack
    pop $I19, rx1279_bstack
    lt rx1279_pos, -1, rx1279_done3533
    lt rx1279_pos, 0, rx1279_fail3535
    eq $I19, 0, rx1279_fail3535
    nqp_islist $I20, rx1279_cstack
    unless $I20, rx1279_jump3536
    elements $I18, rx1279_bstack
    le $I18, 0, rx1279_cut3537
    dec $I18
    set $I18, rx1279_bstack[$I18]
  rx1279_cut3537:
    assign rx1279_cstack, $I18
  rx1279_jump3536:
    jump $I19
  rx1279_done3533:
    rx1279_cur."!cursor_fail"()
    .return (rx1279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_228_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1399
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1283_tgt
    .local int rx1283_pos
    .local int rx1283_off
    .local int rx1283_eos
    .local int rx1283_rep
    .local pmc rx1283_cur
    .local pmc rx1283_curclass
    .local pmc rx1283_bstack
    .local pmc rx1283_cstack
    (rx1283_cur, rx1283_tgt, rx1283_pos, rx1283_curclass, rx1283_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1283_cur
    length rx1283_eos, rx1283_tgt
    eq $I19, 1, rx1283_restart3546
    gt rx1283_pos, rx1283_eos, rx1283_fail3547
    repr_get_attr_int $I11, self, rx1283_curclass, "$!from"
    ne $I11, -1, rxscan1284_done3553
    goto rxscan1284_scan3552
  rxscan1284_loop3551:
    inc rx1283_pos
    gt rx1283_pos, rx1283_eos, rx1283_fail3547
    repr_bind_attr_int rx1283_cur, rx1283_curclass, "$!from", rx1283_pos
  rxscan1284_scan3552:
    nqp_rxmark rx1283_bstack, rxscan1284_loop3551, rx1283_pos, 0
  rxscan1284_done3553:
    ge rx1283_pos, rx1283_eos, rx1283_fail3547
    substr $S11, rx1283_tgt, rx1283_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1283_fail3547
    repr_bind_attr_int rx1283_cur, rx1283_curclass, "$!pos", rx1283_pos
    $P11 = rx1283_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1283_curclass, "$!pos"
    lt $I11, 0, rx1283_fail3547
    nqp_rxmark rx1283_bstack, rxsubrule1285_pass3554, -1, 0
  rxsubrule1285_pass3554:
    rx1283_cstack = rx1283_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1283_pos, $P11, rx1283_curclass, "$!pos"
    rx1283_cur."!cursor_pass"(rx1283_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1283_cur)
  rx1283_restart3546:
    repr_get_attr_obj rx1283_cstack, rx1283_cur, rx1283_curclass, "$!cstack"
  rx1283_fail3547:
    unless rx1283_bstack, rx1283_done3545
    pop $I19, rx1283_bstack
    if_null rx1283_cstack, rx1283_cstack_done3550
    unless rx1283_cstack, rx1283_cstack_done3550
    dec $I19
    set $P11, rx1283_cstack[$I19]
  rx1283_cstack_done3550:
    pop rx1283_rep, rx1283_bstack
    pop rx1283_pos, rx1283_bstack
    pop $I19, rx1283_bstack
    lt rx1283_pos, -1, rx1283_done3545
    lt rx1283_pos, 0, rx1283_fail3547
    eq $I19, 0, rx1283_fail3547
    nqp_islist $I20, rx1283_cstack
    unless $I20, rx1283_jump3548
    elements $I18, rx1283_bstack
    le $I18, 0, rx1283_cut3549
    dec $I18
    set $I18, rx1283_bstack[$I18]
  rx1283_cut3549:
    assign rx1283_cstack, $I18
  rx1283_jump3548:
    jump $I19
  rx1283_done3545:
    rx1283_cur."!cursor_fail"()
    .return (rx1283_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_229_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1403
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_230_1356803026.47425' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1286_tgt
    .local int rx1286_pos
    .local int rx1286_off
    .local int rx1286_eos
    .local int rx1286_rep
    .local pmc rx1286_cur
    .local pmc rx1286_curclass
    .local pmc rx1286_bstack
    .local pmc rx1286_cstack
    (rx1286_cur, rx1286_tgt, rx1286_pos, rx1286_curclass, rx1286_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1286_cur
    length rx1286_eos, rx1286_tgt
    eq $I19, 1, rx1286_restart3557
    gt rx1286_pos, rx1286_eos, rx1286_fail3558
    repr_get_attr_int $I11, self, rx1286_curclass, "$!from"
    ne $I11, -1, rxscan1287_done3564
    goto rxscan1287_scan3563
  rxscan1287_loop3562:
    inc rx1286_pos
    gt rx1286_pos, rx1286_eos, rx1286_fail3558
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!from", rx1286_pos
  rxscan1287_scan3563:
    nqp_rxmark rx1286_bstack, rxscan1287_loop3562, rx1286_pos, 0
  rxscan1287_done3564:
    .const 'Sub' $P5001 = 'cuid_230_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3558
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3558
    nqp_rxmark rx1286_bstack, rxsubrule1291_pass3578, -1, 0
  rxsubrule1291_pass3578:
    rx1286_cstack = rx1286_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1286_pos, $P11, rx1286_curclass, "$!pos"
    rx1286_cur."!cursor_pass"(rx1286_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1286_cur)
  rx1286_restart3557:
    repr_get_attr_obj rx1286_cstack, rx1286_cur, rx1286_curclass, "$!cstack"
  rx1286_fail3558:
    unless rx1286_bstack, rx1286_done3556
    pop $I19, rx1286_bstack
    if_null rx1286_cstack, rx1286_cstack_done3561
    unless rx1286_cstack, rx1286_cstack_done3561
    dec $I19
    set $P11, rx1286_cstack[$I19]
  rx1286_cstack_done3561:
    pop rx1286_rep, rx1286_bstack
    pop rx1286_pos, rx1286_bstack
    pop $I19, rx1286_bstack
    lt rx1286_pos, -1, rx1286_done3556
    lt rx1286_pos, 0, rx1286_fail3558
    eq $I19, 0, rx1286_fail3558
    nqp_islist $I20, rx1286_cstack
    unless $I20, rx1286_jump3559
    elements $I18, rx1286_bstack
    le $I18, 0, rx1286_cut3560
    dec $I18
    set $I18, rx1286_bstack[$I18]
  rx1286_cut3560:
    assign rx1286_cstack, $I18
  rx1286_jump3559:
    jump $I19
  rx1286_done3556:
    rx1286_cur."!cursor_fail"()
    .return (rx1286_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1356803026.47425") :anon :lex :outer("cuid_229_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1288_tgt
    .local int rx1288_pos
    .local int rx1288_off
    .local int rx1288_eos
    .local int rx1288_rep
    .local pmc rx1288_cur
    .local pmc rx1288_curclass
    .local pmc rx1288_bstack
    .local pmc rx1288_cstack
    (rx1288_cur, rx1288_tgt, rx1288_pos, rx1288_curclass, rx1288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1288_cur
    length rx1288_eos, rx1288_tgt
    eq $I19, 1, rx1288_restart3567
    gt rx1288_pos, rx1288_eos, rx1288_fail3568
    repr_get_attr_int $I11, self, rx1288_curclass, "$!from"
    ne $I11, -1, rxscan1289_done3574
    goto rxscan1289_scan3573
  rxscan1289_loop3572:
    inc rx1288_pos
    gt rx1288_pos, rx1288_eos, rx1288_fail3568
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!from", rx1288_pos
  rxscan1289_scan3573:
    nqp_rxmark rx1288_bstack, rxscan1289_loop3572, rx1288_pos, 0
  rxscan1289_done3574:
    ge rx1288_pos, rx1288_eos, rx1288_fail3568
    substr $S11, rx1288_tgt, rx1288_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1288_fail3568
    inc rx1288_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1290_03576
    nqp_push_label $P11, alt1290_13577
    nqp_rxmark rx1288_bstack, alt1290_end3575, -1, 0
    rx1288_cur."!alt"(rx1288_pos, "alt_nfa__39_1356803030.40868", $P11)
    goto rx1288_fail3568
  alt1290_03576:
    ge rx1288_pos, rx1288_eos, rx1288_fail3568
    is_cclass $I11, .CCLASS_WORD, rx1288_tgt, rx1288_pos
    if $I11, rx1288_fail3568
    add rx1288_pos, 1
    ge rx1288_pos, rx1288_eos, rx1288_fail3568
    is_cclass $I11, .CCLASS_WORD, rx1288_tgt, rx1288_pos
    unless $I11, rx1288_fail3568
    add rx1288_pos, 1
    goto alt1290_end3575
  alt1290_13577:
    ge rx1288_pos, rx1288_eos, rx1288_fail3568
    is_cclass $I11, .CCLASS_WORD, rx1288_tgt, rx1288_pos
    unless $I11, rx1288_fail3568
    add rx1288_pos, 1
    goto alt1290_end3575
  alt1290_end3575:
    nqp_rxcommit rx1288_bstack, alt1290_end3575
    rx1288_cur."!cursor_pass"(rx1288_pos, 'backtrack'=>1)
    .return (rx1288_cur)
  rx1288_restart3567:
    repr_get_attr_obj rx1288_cstack, rx1288_cur, rx1288_curclass, "$!cstack"
  rx1288_fail3568:
    unless rx1288_bstack, rx1288_done3566
    pop $I19, rx1288_bstack
    if_null rx1288_cstack, rx1288_cstack_done3571
    unless rx1288_cstack, rx1288_cstack_done3571
    dec $I19
    set $P11, rx1288_cstack[$I19]
  rx1288_cstack_done3571:
    pop rx1288_rep, rx1288_bstack
    pop rx1288_pos, rx1288_bstack
    pop $I19, rx1288_bstack
    lt rx1288_pos, -1, rx1288_done3566
    lt rx1288_pos, 0, rx1288_fail3568
    eq $I19, 0, rx1288_fail3568
    nqp_islist $I20, rx1288_cstack
    unless $I20, rx1288_jump3569
    elements $I18, rx1288_bstack
    le $I18, 0, rx1288_cut3570
    dec $I18
    set $I18, rx1288_bstack[$I18]
  rx1288_cut3570:
    assign rx1288_cstack, $I18
  rx1288_jump3569:
    jump $I19
  rx1288_done3566:
    rx1288_cur."!cursor_fail"()
    .return (rx1288_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_231_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1407
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1292_tgt
    .local int rx1292_pos
    .local int rx1292_off
    .local int rx1292_eos
    .local int rx1292_rep
    .local pmc rx1292_cur
    .local pmc rx1292_curclass
    .local pmc rx1292_bstack
    .local pmc rx1292_cstack
    (rx1292_cur, rx1292_tgt, rx1292_pos, rx1292_curclass, rx1292_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1292_cur
    length rx1292_eos, rx1292_tgt
    eq $I19, 1, rx1292_restart3581
    gt rx1292_pos, rx1292_eos, rx1292_fail3582
    repr_get_attr_int $I11, self, rx1292_curclass, "$!from"
    ne $I11, -1, rxscan1293_done3588
    goto rxscan1293_scan3587
  rxscan1293_loop3586:
    inc rx1292_pos
    gt rx1292_pos, rx1292_eos, rx1292_fail3582
    repr_bind_attr_int rx1292_cur, rx1292_curclass, "$!from", rx1292_pos
  rxscan1293_scan3587:
    nqp_rxmark rx1292_bstack, rxscan1293_loop3586, rx1292_pos, 0
  rxscan1293_done3588:
    ge rx1292_pos, rx1292_eos, rx1292_fail3582
    substr $S11, rx1292_tgt, rx1292_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1292_fail3582
    repr_bind_attr_int rx1292_cur, rx1292_curclass, "$!pos", rx1292_pos
    $P11 = rx1292_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1292_curclass, "$!pos"
    lt $I11, 0, rx1292_fail3582
    nqp_rxmark rx1292_bstack, rxsubrule1294_pass3589, -1, 0
  rxsubrule1294_pass3589:
    rx1292_cstack = rx1292_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1292_pos, $P11, rx1292_curclass, "$!pos"
    rx1292_cur."!cursor_pass"(rx1292_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1292_cur)
  rx1292_restart3581:
    repr_get_attr_obj rx1292_cstack, rx1292_cur, rx1292_curclass, "$!cstack"
  rx1292_fail3582:
    unless rx1292_bstack, rx1292_done3580
    pop $I19, rx1292_bstack
    if_null rx1292_cstack, rx1292_cstack_done3585
    unless rx1292_cstack, rx1292_cstack_done3585
    dec $I19
    set $P11, rx1292_cstack[$I19]
  rx1292_cstack_done3585:
    pop rx1292_rep, rx1292_bstack
    pop rx1292_pos, rx1292_bstack
    pop $I19, rx1292_bstack
    lt rx1292_pos, -1, rx1292_done3580
    lt rx1292_pos, 0, rx1292_fail3582
    eq $I19, 0, rx1292_fail3582
    nqp_islist $I20, rx1292_cstack
    unless $I20, rx1292_jump3583
    elements $I18, rx1292_bstack
    le $I18, 0, rx1292_cut3584
    dec $I18
    set $I18, rx1292_bstack[$I18]
  rx1292_cut3584:
    assign rx1292_cstack, $I18
  rx1292_jump3583:
    jump $I19
  rx1292_done3580:
    rx1292_cur."!cursor_fail"()
    .return (rx1292_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_232_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1411
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_233_1356803026.47425' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_234_1356803026.47425' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1295_tgt
    .local int rx1295_pos
    .local int rx1295_off
    .local int rx1295_eos
    .local int rx1295_rep
    .local pmc rx1295_cur
    .local pmc rx1295_curclass
    .local pmc rx1295_bstack
    .local pmc rx1295_cstack
    (rx1295_cur, rx1295_tgt, rx1295_pos, rx1295_curclass, rx1295_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1295_cur
    length rx1295_eos, rx1295_tgt
    eq $I19, 1, rx1295_restart3592
    gt rx1295_pos, rx1295_eos, rx1295_fail3593
    repr_get_attr_int $I11, self, rx1295_curclass, "$!from"
    ne $I11, -1, rxscan1296_done3599
    goto rxscan1296_scan3598
  rxscan1296_loop3597:
    inc rx1295_pos
    gt rx1295_pos, rx1295_eos, rx1295_fail3593
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!from", rx1295_pos
  rxscan1296_scan3598:
    nqp_rxmark rx1295_bstack, rxscan1296_loop3597, rx1295_pos, 0
  rxscan1296_done3599:
    add $I11, rx1295_pos, 1
    gt $I11, rx1295_eos, rx1295_fail3593
    substr $S10, rx1295_tgt, rx1295_pos, 1
    ne $S10, ucs4:"?", rx1295_fail3593
    add rx1295_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1297_03601
    nqp_push_label $P11, alt1297_13612
    nqp_rxmark rx1295_bstack, alt1297_end3600, -1, 0
    rx1295_cur."!alt"(rx1295_pos, "alt_nfa__40_1356803030.43512", $P11)
    goto rx1295_fail3593
  alt1297_03601:
    .const 'Sub' $P5001 = 'cuid_233_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    lt $I11, 0, rx1295_fail3593
    goto alt1297_end3600
  alt1297_13612:
    .const 'Sub' $P5002 = 'cuid_234_1356803026.47425' 
    capture_lex $P5002
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    ge $I11, 0, rx1295_fail3593
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    lt $I11, 0, rx1295_fail3593
    nqp_rxmark rx1295_bstack, rxsubrule1302_pass3623, -1, 0
  rxsubrule1302_pass3623:
    rx1295_cstack = rx1295_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1295_pos, $P11, rx1295_curclass, "$!pos"
    goto alt1297_end3600
  alt1297_end3600:
    nqp_rxcommit rx1295_bstack, alt1297_end3600
    rx1295_cur."!cursor_pass"(rx1295_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1295_cur)
  rx1295_restart3592:
    repr_get_attr_obj rx1295_cstack, rx1295_cur, rx1295_curclass, "$!cstack"
  rx1295_fail3593:
    unless rx1295_bstack, rx1295_done3591
    pop $I19, rx1295_bstack
    if_null rx1295_cstack, rx1295_cstack_done3596
    unless rx1295_cstack, rx1295_cstack_done3596
    dec $I19
    set $P11, rx1295_cstack[$I19]
  rx1295_cstack_done3596:
    pop rx1295_rep, rx1295_bstack
    pop rx1295_pos, rx1295_bstack
    pop $I19, rx1295_bstack
    lt rx1295_pos, -1, rx1295_done3591
    lt rx1295_pos, 0, rx1295_fail3593
    eq $I19, 0, rx1295_fail3593
    nqp_islist $I20, rx1295_cstack
    unless $I20, rx1295_jump3594
    elements $I18, rx1295_bstack
    le $I18, 0, rx1295_cut3595
    dec $I18
    set $I18, rx1295_bstack[$I18]
  rx1295_cut3595:
    assign rx1295_cstack, $I18
  rx1295_jump3594:
    jump $I19
  rx1295_done3591:
    rx1295_cur."!cursor_fail"()
    .return (rx1295_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1356803026.47425") :anon :lex :outer("cuid_232_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1298_tgt
    .local int rx1298_pos
    .local int rx1298_off
    .local int rx1298_eos
    .local int rx1298_rep
    .local pmc rx1298_cur
    .local pmc rx1298_curclass
    .local pmc rx1298_bstack
    .local pmc rx1298_cstack
    (rx1298_cur, rx1298_tgt, rx1298_pos, rx1298_curclass, rx1298_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1298_cur
    length rx1298_eos, rx1298_tgt
    eq $I19, 1, rx1298_restart3604
    gt rx1298_pos, rx1298_eos, rx1298_fail3605
    repr_get_attr_int $I11, self, rx1298_curclass, "$!from"
    ne $I11, -1, rxscan1299_done3611
    goto rxscan1299_scan3610
  rxscan1299_loop3609:
    inc rx1298_pos
    gt rx1298_pos, rx1298_eos, rx1298_fail3605
    repr_bind_attr_int rx1298_cur, rx1298_curclass, "$!from", rx1298_pos
  rxscan1299_scan3610:
    nqp_rxmark rx1298_bstack, rxscan1299_loop3609, rx1298_pos, 0
  rxscan1299_done3611:
    add $I11, rx1298_pos, 1
    gt $I11, rx1298_eos, rx1298_fail3605
    substr $S10, rx1298_tgt, rx1298_pos, 1
    ne $S10, ucs4:">", rx1298_fail3605
    add rx1298_pos, 1
    rx1298_cur."!cursor_pass"(rx1298_pos, 'backtrack'=>1)
    .return (rx1298_cur)
  rx1298_restart3604:
    repr_get_attr_obj rx1298_cstack, rx1298_cur, rx1298_curclass, "$!cstack"
  rx1298_fail3605:
    unless rx1298_bstack, rx1298_done3603
    pop $I19, rx1298_bstack
    if_null rx1298_cstack, rx1298_cstack_done3608
    unless rx1298_cstack, rx1298_cstack_done3608
    dec $I19
    set $P11, rx1298_cstack[$I19]
  rx1298_cstack_done3608:
    pop rx1298_rep, rx1298_bstack
    pop rx1298_pos, rx1298_bstack
    pop $I19, rx1298_bstack
    lt rx1298_pos, -1, rx1298_done3603
    lt rx1298_pos, 0, rx1298_fail3605
    eq $I19, 0, rx1298_fail3605
    nqp_islist $I20, rx1298_cstack
    unless $I20, rx1298_jump3606
    elements $I18, rx1298_bstack
    le $I18, 0, rx1298_cut3607
    dec $I18
    set $I18, rx1298_bstack[$I18]
  rx1298_cut3607:
    assign rx1298_cstack, $I18
  rx1298_jump3606:
    jump $I19
  rx1298_done3603:
    rx1298_cur."!cursor_fail"()
    .return (rx1298_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1356803026.47425") :anon :lex :outer("cuid_232_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1300_tgt
    .local int rx1300_pos
    .local int rx1300_off
    .local int rx1300_eos
    .local int rx1300_rep
    .local pmc rx1300_cur
    .local pmc rx1300_curclass
    .local pmc rx1300_bstack
    .local pmc rx1300_cstack
    (rx1300_cur, rx1300_tgt, rx1300_pos, rx1300_curclass, rx1300_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1300_cur
    length rx1300_eos, rx1300_tgt
    eq $I19, 1, rx1300_restart3615
    gt rx1300_pos, rx1300_eos, rx1300_fail3616
    repr_get_attr_int $I11, self, rx1300_curclass, "$!from"
    ne $I11, -1, rxscan1301_done3622
    goto rxscan1301_scan3621
  rxscan1301_loop3620:
    inc rx1300_pos
    gt rx1300_pos, rx1300_eos, rx1300_fail3616
    repr_bind_attr_int rx1300_cur, rx1300_curclass, "$!from", rx1300_pos
  rxscan1301_scan3621:
    nqp_rxmark rx1300_bstack, rxscan1301_loop3620, rx1300_pos, 0
  rxscan1301_done3622:
    add $I11, rx1300_pos, 1
    gt $I11, rx1300_eos, rx1300_fail3616
    substr $S10, rx1300_tgt, rx1300_pos, 1
    ne $S10, ucs4:"{", rx1300_fail3616
    add rx1300_pos, 1
    rx1300_cur."!cursor_pass"(rx1300_pos, 'backtrack'=>1)
    .return (rx1300_cur)
  rx1300_restart3615:
    repr_get_attr_obj rx1300_cstack, rx1300_cur, rx1300_curclass, "$!cstack"
  rx1300_fail3616:
    unless rx1300_bstack, rx1300_done3614
    pop $I19, rx1300_bstack
    if_null rx1300_cstack, rx1300_cstack_done3619
    unless rx1300_cstack, rx1300_cstack_done3619
    dec $I19
    set $P11, rx1300_cstack[$I19]
  rx1300_cstack_done3619:
    pop rx1300_rep, rx1300_bstack
    pop rx1300_pos, rx1300_bstack
    pop $I19, rx1300_bstack
    lt rx1300_pos, -1, rx1300_done3614
    lt rx1300_pos, 0, rx1300_fail3616
    eq $I19, 0, rx1300_fail3616
    nqp_islist $I20, rx1300_cstack
    unless $I20, rx1300_jump3617
    elements $I18, rx1300_bstack
    le $I18, 0, rx1300_cut3618
    dec $I18
    set $I18, rx1300_bstack[$I18]
  rx1300_cut3618:
    assign rx1300_cstack, $I18
  rx1300_jump3617:
    jump $I19
  rx1300_done3614:
    rx1300_cur."!cursor_fail"()
    .return (rx1300_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_235_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1412
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_236_1356803026.47425' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_237_1356803026.47425' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1303_tgt
    .local int rx1303_pos
    .local int rx1303_off
    .local int rx1303_eos
    .local int rx1303_rep
    .local pmc rx1303_cur
    .local pmc rx1303_curclass
    .local pmc rx1303_bstack
    .local pmc rx1303_cstack
    (rx1303_cur, rx1303_tgt, rx1303_pos, rx1303_curclass, rx1303_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1303_cur
    length rx1303_eos, rx1303_tgt
    eq $I19, 1, rx1303_restart3626
    gt rx1303_pos, rx1303_eos, rx1303_fail3627
    repr_get_attr_int $I11, self, rx1303_curclass, "$!from"
    ne $I11, -1, rxscan1304_done3633
    goto rxscan1304_scan3632
  rxscan1304_loop3631:
    inc rx1303_pos
    gt rx1303_pos, rx1303_eos, rx1303_fail3627
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!from", rx1303_pos
  rxscan1304_scan3632:
    nqp_rxmark rx1303_bstack, rxscan1304_loop3631, rx1303_pos, 0
  rxscan1304_done3633:
    add $I11, rx1303_pos, 1
    gt $I11, rx1303_eos, rx1303_fail3627
    substr $S10, rx1303_tgt, rx1303_pos, 1
    ne $S10, ucs4:"!", rx1303_fail3627
    add rx1303_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1305_03635
    nqp_push_label $P11, alt1305_13646
    nqp_rxmark rx1303_bstack, alt1305_end3634, -1, 0
    rx1303_cur."!alt"(rx1303_pos, "alt_nfa__41_1356803030.44972", $P11)
    goto rx1303_fail3627
  alt1305_03635:
    .const 'Sub' $P5001 = 'cuid_236_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!pos", rx1303_pos
    $P11 = rx1303_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1303_curclass, "$!pos"
    lt $I11, 0, rx1303_fail3627
    goto alt1305_end3634
  alt1305_13646:
    .const 'Sub' $P5002 = 'cuid_237_1356803026.47425' 
    capture_lex $P5002
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!pos", rx1303_pos
    $P11 = rx1303_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1303_curclass, "$!pos"
    ge $I11, 0, rx1303_fail3627
    repr_bind_attr_int rx1303_cur, rx1303_curclass, "$!pos", rx1303_pos
    $P11 = rx1303_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1303_curclass, "$!pos"
    lt $I11, 0, rx1303_fail3627
    nqp_rxmark rx1303_bstack, rxsubrule1310_pass3657, -1, 0
  rxsubrule1310_pass3657:
    rx1303_cstack = rx1303_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1303_pos, $P11, rx1303_curclass, "$!pos"
    goto alt1305_end3634
  alt1305_end3634:
    nqp_rxcommit rx1303_bstack, alt1305_end3634
    rx1303_cur."!cursor_pass"(rx1303_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1303_cur)
  rx1303_restart3626:
    repr_get_attr_obj rx1303_cstack, rx1303_cur, rx1303_curclass, "$!cstack"
  rx1303_fail3627:
    unless rx1303_bstack, rx1303_done3625
    pop $I19, rx1303_bstack
    if_null rx1303_cstack, rx1303_cstack_done3630
    unless rx1303_cstack, rx1303_cstack_done3630
    dec $I19
    set $P11, rx1303_cstack[$I19]
  rx1303_cstack_done3630:
    pop rx1303_rep, rx1303_bstack
    pop rx1303_pos, rx1303_bstack
    pop $I19, rx1303_bstack
    lt rx1303_pos, -1, rx1303_done3625
    lt rx1303_pos, 0, rx1303_fail3627
    eq $I19, 0, rx1303_fail3627
    nqp_islist $I20, rx1303_cstack
    unless $I20, rx1303_jump3628
    elements $I18, rx1303_bstack
    le $I18, 0, rx1303_cut3629
    dec $I18
    set $I18, rx1303_bstack[$I18]
  rx1303_cut3629:
    assign rx1303_cstack, $I18
  rx1303_jump3628:
    jump $I19
  rx1303_done3625:
    rx1303_cur."!cursor_fail"()
    .return (rx1303_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1356803026.47425") :anon :lex :outer("cuid_235_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1306_tgt
    .local int rx1306_pos
    .local int rx1306_off
    .local int rx1306_eos
    .local int rx1306_rep
    .local pmc rx1306_cur
    .local pmc rx1306_curclass
    .local pmc rx1306_bstack
    .local pmc rx1306_cstack
    (rx1306_cur, rx1306_tgt, rx1306_pos, rx1306_curclass, rx1306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1306_cur
    length rx1306_eos, rx1306_tgt
    eq $I19, 1, rx1306_restart3638
    gt rx1306_pos, rx1306_eos, rx1306_fail3639
    repr_get_attr_int $I11, self, rx1306_curclass, "$!from"
    ne $I11, -1, rxscan1307_done3645
    goto rxscan1307_scan3644
  rxscan1307_loop3643:
    inc rx1306_pos
    gt rx1306_pos, rx1306_eos, rx1306_fail3639
    repr_bind_attr_int rx1306_cur, rx1306_curclass, "$!from", rx1306_pos
  rxscan1307_scan3644:
    nqp_rxmark rx1306_bstack, rxscan1307_loop3643, rx1306_pos, 0
  rxscan1307_done3645:
    add $I11, rx1306_pos, 1
    gt $I11, rx1306_eos, rx1306_fail3639
    substr $S10, rx1306_tgt, rx1306_pos, 1
    ne $S10, ucs4:">", rx1306_fail3639
    add rx1306_pos, 1
    rx1306_cur."!cursor_pass"(rx1306_pos, 'backtrack'=>1)
    .return (rx1306_cur)
  rx1306_restart3638:
    repr_get_attr_obj rx1306_cstack, rx1306_cur, rx1306_curclass, "$!cstack"
  rx1306_fail3639:
    unless rx1306_bstack, rx1306_done3637
    pop $I19, rx1306_bstack
    if_null rx1306_cstack, rx1306_cstack_done3642
    unless rx1306_cstack, rx1306_cstack_done3642
    dec $I19
    set $P11, rx1306_cstack[$I19]
  rx1306_cstack_done3642:
    pop rx1306_rep, rx1306_bstack
    pop rx1306_pos, rx1306_bstack
    pop $I19, rx1306_bstack
    lt rx1306_pos, -1, rx1306_done3637
    lt rx1306_pos, 0, rx1306_fail3639
    eq $I19, 0, rx1306_fail3639
    nqp_islist $I20, rx1306_cstack
    unless $I20, rx1306_jump3640
    elements $I18, rx1306_bstack
    le $I18, 0, rx1306_cut3641
    dec $I18
    set $I18, rx1306_bstack[$I18]
  rx1306_cut3641:
    assign rx1306_cstack, $I18
  rx1306_jump3640:
    jump $I19
  rx1306_done3637:
    rx1306_cur."!cursor_fail"()
    .return (rx1306_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1356803026.47425") :anon :lex :outer("cuid_235_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1308_tgt
    .local int rx1308_pos
    .local int rx1308_off
    .local int rx1308_eos
    .local int rx1308_rep
    .local pmc rx1308_cur
    .local pmc rx1308_curclass
    .local pmc rx1308_bstack
    .local pmc rx1308_cstack
    (rx1308_cur, rx1308_tgt, rx1308_pos, rx1308_curclass, rx1308_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1308_cur
    length rx1308_eos, rx1308_tgt
    eq $I19, 1, rx1308_restart3649
    gt rx1308_pos, rx1308_eos, rx1308_fail3650
    repr_get_attr_int $I11, self, rx1308_curclass, "$!from"
    ne $I11, -1, rxscan1309_done3656
    goto rxscan1309_scan3655
  rxscan1309_loop3654:
    inc rx1308_pos
    gt rx1308_pos, rx1308_eos, rx1308_fail3650
    repr_bind_attr_int rx1308_cur, rx1308_curclass, "$!from", rx1308_pos
  rxscan1309_scan3655:
    nqp_rxmark rx1308_bstack, rxscan1309_loop3654, rx1308_pos, 0
  rxscan1309_done3656:
    add $I11, rx1308_pos, 1
    gt $I11, rx1308_eos, rx1308_fail3650
    substr $S10, rx1308_tgt, rx1308_pos, 1
    ne $S10, ucs4:"{", rx1308_fail3650
    add rx1308_pos, 1
    rx1308_cur."!cursor_pass"(rx1308_pos, 'backtrack'=>1)
    .return (rx1308_cur)
  rx1308_restart3649:
    repr_get_attr_obj rx1308_cstack, rx1308_cur, rx1308_curclass, "$!cstack"
  rx1308_fail3650:
    unless rx1308_bstack, rx1308_done3648
    pop $I19, rx1308_bstack
    if_null rx1308_cstack, rx1308_cstack_done3653
    unless rx1308_cstack, rx1308_cstack_done3653
    dec $I19
    set $P11, rx1308_cstack[$I19]
  rx1308_cstack_done3653:
    pop rx1308_rep, rx1308_bstack
    pop rx1308_pos, rx1308_bstack
    pop $I19, rx1308_bstack
    lt rx1308_pos, -1, rx1308_done3648
    lt rx1308_pos, 0, rx1308_fail3650
    eq $I19, 0, rx1308_fail3650
    nqp_islist $I20, rx1308_cstack
    unless $I20, rx1308_jump3651
    elements $I18, rx1308_bstack
    le $I18, 0, rx1308_cut3652
    dec $I18
    set $I18, rx1308_bstack[$I18]
  rx1308_cut3652:
    assign rx1308_cstack, $I18
  rx1308_jump3651:
    jump $I19
  rx1308_done3648:
    rx1308_cur."!cursor_fail"()
    .return (rx1308_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_238_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1414
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_239_1356803026.47425' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1311_tgt
    .local int rx1311_pos
    .local int rx1311_off
    .local int rx1311_eos
    .local int rx1311_rep
    .local pmc rx1311_cur
    .local pmc rx1311_curclass
    .local pmc rx1311_bstack
    .local pmc rx1311_cstack
    (rx1311_cur, rx1311_tgt, rx1311_pos, rx1311_curclass, rx1311_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1311_cur
    length rx1311_eos, rx1311_tgt
    eq $I19, 1, rx1311_restart3660
    gt rx1311_pos, rx1311_eos, rx1311_fail3661
    repr_get_attr_int $I11, self, rx1311_curclass, "$!from"
    ne $I11, -1, rxscan1312_done3667
    goto rxscan1312_scan3666
  rxscan1312_loop3665:
    inc rx1311_pos
    gt rx1311_pos, rx1311_eos, rx1311_fail3661
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!from", rx1311_pos
  rxscan1312_scan3666:
    nqp_rxmark rx1311_bstack, rxscan1312_loop3665, rx1311_pos, 0
  rxscan1312_done3667:
    nqp_rxmark rx1311_bstack, rxcap1313_fail3669, rx1311_pos, 0
    ge rx1311_pos, rx1311_eos, rx1311_fail3661
    substr $S11, rx1311_tgt, rx1311_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1311_fail3661
    inc rx1311_pos
    .const 'Sub' $P5001 = 'cuid_239_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!pos", rx1311_pos
    $P11 = rx1311_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1311_curclass, "$!pos"
    lt $I11, 0, rx1311_fail3661
    nqp_rxpeek $I19, rx1311_bstack, rxcap1313_fail3669
    inc $I19
    set $I11, rx1311_bstack[$I19]
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!pos", rx1311_pos
    $P11 = rx1311_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1311_pos)
    rx1311_cstack = rx1311_cur."!cursor_capture"($P11, "zw")
    goto rxcap1313_done3668
  rxcap1313_fail3669:
    goto rx1311_fail3661
  rxcap1313_done3668:
    repr_bind_attr_int rx1311_cur, rx1311_curclass, "$!pos", rx1311_pos
    $P11 = rx1311_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1311_curclass, "$!pos"
    lt $I11, 0, rx1311_fail3661
    nqp_rxmark rx1311_bstack, rxsubrule1316_pass3680, -1, 0
  rxsubrule1316_pass3680:
    rx1311_cstack = rx1311_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1311_pos, $P11, rx1311_curclass, "$!pos"
    rx1311_cur."!cursor_pass"(rx1311_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1311_cur)
  rx1311_restart3660:
    repr_get_attr_obj rx1311_cstack, rx1311_cur, rx1311_curclass, "$!cstack"
  rx1311_fail3661:
    unless rx1311_bstack, rx1311_done3659
    pop $I19, rx1311_bstack
    if_null rx1311_cstack, rx1311_cstack_done3664
    unless rx1311_cstack, rx1311_cstack_done3664
    dec $I19
    set $P11, rx1311_cstack[$I19]
  rx1311_cstack_done3664:
    pop rx1311_rep, rx1311_bstack
    pop rx1311_pos, rx1311_bstack
    pop $I19, rx1311_bstack
    lt rx1311_pos, -1, rx1311_done3659
    lt rx1311_pos, 0, rx1311_fail3661
    eq $I19, 0, rx1311_fail3661
    nqp_islist $I20, rx1311_cstack
    unless $I20, rx1311_jump3662
    elements $I18, rx1311_bstack
    le $I18, 0, rx1311_cut3663
    dec $I18
    set $I18, rx1311_bstack[$I18]
  rx1311_cut3663:
    assign rx1311_cstack, $I18
  rx1311_jump3662:
    jump $I19
  rx1311_done3659:
    rx1311_cur."!cursor_fail"()
    .return (rx1311_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1356803026.47425") :anon :lex :outer("cuid_238_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1314_tgt
    .local int rx1314_pos
    .local int rx1314_off
    .local int rx1314_eos
    .local int rx1314_rep
    .local pmc rx1314_cur
    .local pmc rx1314_curclass
    .local pmc rx1314_bstack
    .local pmc rx1314_cstack
    (rx1314_cur, rx1314_tgt, rx1314_pos, rx1314_curclass, rx1314_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1314_cur
    length rx1314_eos, rx1314_tgt
    eq $I19, 1, rx1314_restart3672
    gt rx1314_pos, rx1314_eos, rx1314_fail3673
    repr_get_attr_int $I11, self, rx1314_curclass, "$!from"
    ne $I11, -1, rxscan1315_done3679
    goto rxscan1315_scan3678
  rxscan1315_loop3677:
    inc rx1314_pos
    gt rx1314_pos, rx1314_eos, rx1314_fail3673
    repr_bind_attr_int rx1314_cur, rx1314_curclass, "$!from", rx1314_pos
  rxscan1315_scan3678:
    nqp_rxmark rx1314_bstack, rxscan1315_loop3677, rx1314_pos, 0
  rxscan1315_done3679:
    add $I11, rx1314_pos, 1
    gt $I11, rx1314_eos, rx1314_fail3673
    substr $S10, rx1314_tgt, rx1314_pos, 1
    ne $S10, ucs4:"{", rx1314_fail3673
    add rx1314_pos, 1
    rx1314_cur."!cursor_pass"(rx1314_pos, 'backtrack'=>1)
    .return (rx1314_cur)
  rx1314_restart3672:
    repr_get_attr_obj rx1314_cstack, rx1314_cur, rx1314_curclass, "$!cstack"
  rx1314_fail3673:
    unless rx1314_bstack, rx1314_done3671
    pop $I19, rx1314_bstack
    if_null rx1314_cstack, rx1314_cstack_done3676
    unless rx1314_cstack, rx1314_cstack_done3676
    dec $I19
    set $P11, rx1314_cstack[$I19]
  rx1314_cstack_done3676:
    pop rx1314_rep, rx1314_bstack
    pop rx1314_pos, rx1314_bstack
    pop $I19, rx1314_bstack
    lt rx1314_pos, -1, rx1314_done3671
    lt rx1314_pos, 0, rx1314_fail3673
    eq $I19, 0, rx1314_fail3673
    nqp_islist $I20, rx1314_cstack
    unless $I20, rx1314_jump3674
    elements $I18, rx1314_bstack
    le $I18, 0, rx1314_cut3675
    dec $I18
    set $I18, rx1314_bstack[$I18]
  rx1314_cut3675:
    assign rx1314_cstack, $I18
  rx1314_jump3674:
    jump $I19
  rx1314_done3671:
    rx1314_cur."!cursor_fail"()
    .return (rx1314_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_240_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1418
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_241_1356803026.47425' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1317_tgt
    .local int rx1317_pos
    .local int rx1317_off
    .local int rx1317_eos
    .local int rx1317_rep
    .local pmc rx1317_cur
    .local pmc rx1317_curclass
    .local pmc rx1317_bstack
    .local pmc rx1317_cstack
    (rx1317_cur, rx1317_tgt, rx1317_pos, rx1317_curclass, rx1317_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1317_cur
    length rx1317_eos, rx1317_tgt
    eq $I19, 1, rx1317_restart3683
    gt rx1317_pos, rx1317_eos, rx1317_fail3684
    repr_get_attr_int $I11, self, rx1317_curclass, "$!from"
    ne $I11, -1, rxscan1318_done3690
    goto rxscan1318_scan3689
  rxscan1318_loop3688:
    inc rx1317_pos
    gt rx1317_pos, rx1317_eos, rx1317_fail3684
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!from", rx1317_pos
  rxscan1318_scan3689:
    nqp_rxmark rx1317_bstack, rxscan1318_loop3688, rx1317_pos, 0
  rxscan1318_done3690:
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3684
    nqp_rxmark rx1317_bstack, rxsubrule1319_pass3691, -1, 0
  rxsubrule1319_pass3691:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    nqp_rxmark rx1317_bstack, rxquantr1320_done3693, rx1317_pos, 0
  rxquantr1320_loop3692:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1321_03695
    nqp_push_label $P11, alt1321_13706
    nqp_push_label $P11, alt1321_23708
    nqp_push_label $P11, alt1321_33710
    nqp_push_label $P11, alt1321_43712
    nqp_rxmark rx1317_bstack, alt1321_end3694, -1, 0
    rx1317_cur."!alt"(rx1317_pos, "alt_nfa__42_1356803030.48491", $P11)
    goto rx1317_fail3684
  alt1321_03695:
    .const 'Sub' $P5001 = 'cuid_241_1356803026.47425' 
    capture_lex $P5001
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3684
    goto alt1321_end3694
  alt1321_13706:
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3684
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:"=", rx1317_fail3684
    add rx1317_pos, 1
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3684
    nqp_rxmark rx1317_bstack, rxsubrule1324_pass3707, -1, 0
  rxsubrule1324_pass3707:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    goto alt1321_end3694
  alt1321_23708:
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3684
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:":", rx1317_fail3684
    add rx1317_pos, 1
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3684
    nqp_rxmark rx1317_bstack, rxsubrule1325_pass3709, -1, 0
  rxsubrule1325_pass3709:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    goto alt1321_end3694
  alt1321_33710:
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3684
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:"(", rx1317_fail3684
    add rx1317_pos, 1
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3684
    nqp_rxmark rx1317_bstack, rxsubrule1326_pass3711, -1, 0
  rxsubrule1326_pass3711:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3684
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:")", rx1317_fail3684
    add rx1317_pos, 1
    goto alt1321_end3694
  alt1321_43712:
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3684
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!pos", rx1317_pos
    $P11 = rx1317_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1317_curclass, "$!pos"
    lt $I11, 0, rx1317_fail3684
    nqp_rxmark rx1317_bstack, rxsubrule1328_pass3714, -1, 0
  rxsubrule1328_pass3714:
    rx1317_cstack = rx1317_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1317_pos, $P11, rx1317_curclass, "$!pos"
    goto alt1321_end3694
  alt1321_end3694:
    nqp_rxpeek $I19, rx1317_bstack, rxquantr1320_done3693
    inc $I19
    inc $I19
    set rx1317_rep, rx1317_bstack[$I19]
    nqp_rxcommit rx1317_bstack, rxquantr1320_done3693
    inc rx1317_rep
  rxquantr1320_done3693:
    rx1317_cur."!cursor_pass"(rx1317_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1317_cur)
  rx1317_restart3683:
    repr_get_attr_obj rx1317_cstack, rx1317_cur, rx1317_curclass, "$!cstack"
  rx1317_fail3684:
    unless rx1317_bstack, rx1317_done3682
    pop $I19, rx1317_bstack
    if_null rx1317_cstack, rx1317_cstack_done3687
    unless rx1317_cstack, rx1317_cstack_done3687
    dec $I19
    set $P11, rx1317_cstack[$I19]
  rx1317_cstack_done3687:
    pop rx1317_rep, rx1317_bstack
    pop rx1317_pos, rx1317_bstack
    pop $I19, rx1317_bstack
    lt rx1317_pos, -1, rx1317_done3682
    lt rx1317_pos, 0, rx1317_fail3684
    eq $I19, 0, rx1317_fail3684
    nqp_islist $I20, rx1317_cstack
    unless $I20, rx1317_jump3685
    elements $I18, rx1317_bstack
    le $I18, 0, rx1317_cut3686
    dec $I18
    set $I18, rx1317_bstack[$I18]
  rx1317_cut3686:
    assign rx1317_cstack, $I18
  rx1317_jump3685:
    jump $I19
  rx1317_done3682:
    rx1317_cur."!cursor_fail"()
    .return (rx1317_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_241_1356803026.47425") :anon :lex :outer("cuid_240_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1322_tgt
    .local int rx1322_pos
    .local int rx1322_off
    .local int rx1322_eos
    .local int rx1322_rep
    .local pmc rx1322_cur
    .local pmc rx1322_curclass
    .local pmc rx1322_bstack
    .local pmc rx1322_cstack
    (rx1322_cur, rx1322_tgt, rx1322_pos, rx1322_curclass, rx1322_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1322_cur
    length rx1322_eos, rx1322_tgt
    eq $I19, 1, rx1322_restart3698
    gt rx1322_pos, rx1322_eos, rx1322_fail3699
    repr_get_attr_int $I11, self, rx1322_curclass, "$!from"
    ne $I11, -1, rxscan1323_done3705
    goto rxscan1323_scan3704
  rxscan1323_loop3703:
    inc rx1322_pos
    gt rx1322_pos, rx1322_eos, rx1322_fail3699
    repr_bind_attr_int rx1322_cur, rx1322_curclass, "$!from", rx1322_pos
  rxscan1323_scan3704:
    nqp_rxmark rx1322_bstack, rxscan1323_loop3703, rx1322_pos, 0
  rxscan1323_done3705:
    add $I11, rx1322_pos, 1
    gt $I11, rx1322_eos, rx1322_fail3699
    substr $S10, rx1322_tgt, rx1322_pos, 1
    ne $S10, ucs4:">", rx1322_fail3699
    add rx1322_pos, 1
    rx1322_cur."!cursor_pass"(rx1322_pos, 'backtrack'=>1)
    .return (rx1322_cur)
  rx1322_restart3698:
    repr_get_attr_obj rx1322_cstack, rx1322_cur, rx1322_curclass, "$!cstack"
  rx1322_fail3699:
    unless rx1322_bstack, rx1322_done3697
    pop $I19, rx1322_bstack
    if_null rx1322_cstack, rx1322_cstack_done3702
    unless rx1322_cstack, rx1322_cstack_done3702
    dec $I19
    set $P11, rx1322_cstack[$I19]
  rx1322_cstack_done3702:
    pop rx1322_rep, rx1322_bstack
    pop rx1322_pos, rx1322_bstack
    pop $I19, rx1322_bstack
    lt rx1322_pos, -1, rx1322_done3697
    lt rx1322_pos, 0, rx1322_fail3699
    eq $I19, 0, rx1322_fail3699
    nqp_islist $I20, rx1322_cstack
    unless $I20, rx1322_jump3700
    elements $I18, rx1322_bstack
    le $I18, 0, rx1322_cut3701
    dec $I18
    set $I18, rx1322_bstack[$I18]
  rx1322_cut3701:
    assign rx1322_cstack, $I18
  rx1322_jump3700:
    jump $I19
  rx1322_done3697:
    rx1322_cur."!cursor_fail"()
    .return (rx1322_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_242_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1429
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1329_tgt
    .local int rx1329_pos
    .local int rx1329_off
    .local int rx1329_eos
    .local int rx1329_rep
    .local pmc rx1329_cur
    .local pmc rx1329_curclass
    .local pmc rx1329_bstack
    .local pmc rx1329_cstack
    (rx1329_cur, rx1329_tgt, rx1329_pos, rx1329_curclass, rx1329_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1329_cur
    length rx1329_eos, rx1329_tgt
    eq $I19, 1, rx1329_restart3717
    gt rx1329_pos, rx1329_eos, rx1329_fail3718
    repr_get_attr_int $I11, self, rx1329_curclass, "$!from"
    ne $I11, -1, rxscan1330_done3724
    goto rxscan1330_scan3723
  rxscan1330_loop3722:
    inc rx1329_pos
    gt rx1329_pos, rx1329_eos, rx1329_fail3718
    repr_bind_attr_int rx1329_cur, rx1329_curclass, "$!from", rx1329_pos
  rxscan1330_scan3723:
    nqp_rxmark rx1329_bstack, rxscan1330_loop3722, rx1329_pos, 0
  rxscan1330_done3724:
    ge rx1329_pos, rx1329_eos, rx1329_fail3718
    substr $S11, rx1329_tgt, rx1329_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1329_fail3718
    repr_bind_attr_int rx1329_cur, rx1329_curclass, "$!pos", rx1329_pos
    $P11 = rx1329_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1329_curclass, "$!pos"
    lt $I11, 0, rx1329_fail3718
    nqp_rxmark rx1329_bstack, rxsubrule1331_pass3725, -1, 0
  rxsubrule1331_pass3725:
    rx1329_cstack = rx1329_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1329_pos, $P11, rx1329_curclass, "$!pos"
    rx1329_cur."!cursor_pass"(rx1329_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1329_cur)
  rx1329_restart3717:
    repr_get_attr_obj rx1329_cstack, rx1329_cur, rx1329_curclass, "$!cstack"
  rx1329_fail3718:
    unless rx1329_bstack, rx1329_done3716
    pop $I19, rx1329_bstack
    if_null rx1329_cstack, rx1329_cstack_done3721
    unless rx1329_cstack, rx1329_cstack_done3721
    dec $I19
    set $P11, rx1329_cstack[$I19]
  rx1329_cstack_done3721:
    pop rx1329_rep, rx1329_bstack
    pop rx1329_pos, rx1329_bstack
    pop $I19, rx1329_bstack
    lt rx1329_pos, -1, rx1329_done3716
    lt rx1329_pos, 0, rx1329_fail3718
    eq $I19, 0, rx1329_fail3718
    nqp_islist $I20, rx1329_cstack
    unless $I20, rx1329_jump3719
    elements $I18, rx1329_bstack
    le $I18, 0, rx1329_cut3720
    dec $I18
    set $I18, rx1329_bstack[$I18]
  rx1329_cut3720:
    assign rx1329_cstack, $I18
  rx1329_jump3719:
    jump $I19
  rx1329_done3716:
    rx1329_cur."!cursor_fail"()
    .return (rx1329_cur) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_243_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1433
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1332_tgt
    .local int rx1332_pos
    .local int rx1332_off
    .local int rx1332_eos
    .local int rx1332_rep
    .local pmc rx1332_cur
    .local pmc rx1332_curclass
    .local pmc rx1332_bstack
    .local pmc rx1332_cstack
    (rx1332_cur, rx1332_tgt, rx1332_pos, rx1332_curclass, rx1332_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1332_cur
    length rx1332_eos, rx1332_tgt
    eq $I19, 1, rx1332_restart3728
    gt rx1332_pos, rx1332_eos, rx1332_fail3729
    repr_get_attr_int $I11, self, rx1332_curclass, "$!from"
    ne $I11, -1, rxscan1333_done3735
    goto rxscan1333_scan3734
  rxscan1333_loop3733:
    inc rx1332_pos
    gt rx1332_pos, rx1332_eos, rx1332_fail3729
    repr_bind_attr_int rx1332_cur, rx1332_curclass, "$!from", rx1332_pos
  rxscan1333_scan3734:
    nqp_rxmark rx1332_bstack, rxscan1333_loop3733, rx1332_pos, 0
  rxscan1333_done3735:
    repr_bind_attr_int rx1332_cur, rx1332_curclass, "$!pos", rx1332_pos
    $P11 = rx1332_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1332_curclass, "$!pos"
    lt $I11, 0, rx1332_fail3729
    nqp_rxmark rx1332_bstack, rxsubrule1334_pass3736, -1, 0
  rxsubrule1334_pass3736:
    rx1332_cstack = rx1332_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1332_pos, $P11, rx1332_curclass, "$!pos"
    rx1332_cur."!cursor_pass"(rx1332_pos, "codeblock", 'backtrack'=>1)
    .return (rx1332_cur)
  rx1332_restart3728:
    repr_get_attr_obj rx1332_cstack, rx1332_cur, rx1332_curclass, "$!cstack"
  rx1332_fail3729:
    unless rx1332_bstack, rx1332_done3727
    pop $I19, rx1332_bstack
    if_null rx1332_cstack, rx1332_cstack_done3732
    unless rx1332_cstack, rx1332_cstack_done3732
    dec $I19
    set $P11, rx1332_cstack[$I19]
  rx1332_cstack_done3732:
    pop rx1332_rep, rx1332_bstack
    pop rx1332_pos, rx1332_bstack
    pop $I19, rx1332_bstack
    lt rx1332_pos, -1, rx1332_done3727
    lt rx1332_pos, 0, rx1332_fail3729
    eq $I19, 0, rx1332_fail3729
    nqp_islist $I20, rx1332_cstack
    unless $I20, rx1332_jump3730
    elements $I18, rx1332_bstack
    le $I18, 0, rx1332_cut3731
    dec $I18
    set $I18, rx1332_bstack[$I18]
  rx1332_cut3731:
    assign rx1332_cstack, $I18
  rx1332_jump3730:
    jump $I19
  rx1332_done3727:
    rx1332_cur."!cursor_fail"()
    .return (rx1332_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_244_1356803026.47425") :anon :lex :outer("cuid_245_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1437
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1335_tgt
    .local int rx1335_pos
    .local int rx1335_off
    .local int rx1335_eos
    .local int rx1335_rep
    .local pmc rx1335_cur
    .local pmc rx1335_curclass
    .local pmc rx1335_bstack
    .local pmc rx1335_cstack
    (rx1335_cur, rx1335_tgt, rx1335_pos, rx1335_curclass, rx1335_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1335_cur
    length rx1335_eos, rx1335_tgt
    eq $I19, 1, rx1335_restart3739
    gt rx1335_pos, rx1335_eos, rx1335_fail3740
    repr_get_attr_int $I11, self, rx1335_curclass, "$!from"
    ne $I11, -1, rxscan1336_done3746
    goto rxscan1336_scan3745
  rxscan1336_loop3744:
    inc rx1335_pos
    gt rx1335_pos, rx1335_eos, rx1335_fail3740
    repr_bind_attr_int rx1335_cur, rx1335_curclass, "$!from", rx1335_pos
  rxscan1336_scan3745:
    nqp_rxmark rx1335_bstack, rxscan1336_loop3744, rx1335_pos, 0
  rxscan1336_done3746:
    repr_bind_attr_int rx1335_cur, rx1335_curclass, "$!pos", rx1335_pos
    $P11 = rx1335_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1335_curclass, "$!pos"
    lt $I11, 0, rx1335_fail3740
    nqp_rxmark rx1335_bstack, rxsubrule1337_pass3747, -1, 0
  rxsubrule1337_pass3747:
    rx1335_cstack = rx1335_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1335_pos, $P11, rx1335_curclass, "$!pos"
    rx1335_cur."!cursor_pass"(rx1335_pos, "arg", 'backtrack'=>1)
    .return (rx1335_cur)
  rx1335_restart3739:
    repr_get_attr_obj rx1335_cstack, rx1335_cur, rx1335_curclass, "$!cstack"
  rx1335_fail3740:
    unless rx1335_bstack, rx1335_done3738
    pop $I19, rx1335_bstack
    if_null rx1335_cstack, rx1335_cstack_done3743
    unless rx1335_cstack, rx1335_cstack_done3743
    dec $I19
    set $P11, rx1335_cstack[$I19]
  rx1335_cstack_done3743:
    pop rx1335_rep, rx1335_bstack
    pop rx1335_pos, rx1335_bstack
    pop $I19, rx1335_bstack
    lt rx1335_pos, -1, rx1335_done3738
    lt rx1335_pos, 0, rx1335_fail3740
    eq $I19, 0, rx1335_fail3740
    nqp_islist $I20, rx1335_cstack
    unless $I20, rx1335_jump3741
    elements $I18, rx1335_bstack
    le $I18, 0, rx1335_cut3742
    dec $I18
    set $I18, rx1335_bstack[$I18]
  rx1335_cut3742:
    assign rx1335_cstack, $I18
  rx1335_jump3741:
    jump $I19
  rx1335_done3738:
    rx1335_cur."!cursor_fail"()
    .return (rx1335_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1448
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3749
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5003
  fallback3749:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3752
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5008
  fallback3752:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1338_end3751 
.annotate 'line', 1450
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
  unless1338_end3751:
.annotate 'line', 1453
    nqp_get_sc_object $P5013, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3753
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback3753:
.annotate 'line', 1456
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3754
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback3754:
.annotate 'line', 1459
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3755
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback3755:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "add_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1463
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3756
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5003
  fallback3756:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3759
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5008
  fallback3759:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1339_end3758 
.annotate 'line', 1465
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
  unless1339_end3758:
.annotate 'line', 1468
    nqp_get_sc_object $P5013, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3760
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback3760:
.annotate 'line', 1471
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3761
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback3761:
.annotate 'line', 1474
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3762
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback3762:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "sub_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1478
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3763
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5004
  fallback3763:
    set $P101, $P5003
.annotate 'line', 1480
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3764
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5009
  fallback3764:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3767
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback3767:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1340_end3766 
.annotate 'line', 1481
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
  unless1340_end3766:
.annotate 'line', 1484
    nqp_get_sc_object $P5020, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3768
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback3768:
.annotate 'line', 1486
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3769
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5026
  fallback3769:
.annotate 'line', 1488
    nqp_get_sc_object $P5030, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3770
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5031
  fallback3770:
    $P5032 = $P101."returns"()
    $P5033 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"), $P5032 :named("returns"))
    $P5034 = $P5022."new"($P5033, $P101, "bind" :named("op"))
.annotate 'line', 1491
    nqp_get_sc_object $P5038, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3771
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5039
  fallback3771:
.annotate 'line', 1494
    nqp_get_sc_object $P5043, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3772
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5044
  fallback3772:
.annotate 'line', 1496
    nqp_get_sc_object $P5048, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback3773
    nqp_get_sc_object $P5049, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5045, $P5049
  fallback3773:
    $P5050 = $P101."returns"()
    $P5051 = $P5045."new"($P102 :named("name"), "local" :named("scope"), $P5050 :named("returns"))
.annotate 'line', 1497
    nqp_get_sc_object $P5055, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3774
    nqp_get_sc_object $P5056, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5052, $P5056
  fallback3774:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5040."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5035."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5017."new"($P5034, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1502
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3775
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5004
  fallback3775:
    set $P101, $P5003
.annotate 'line', 1504
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3776
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5009
  fallback3776:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3779
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback3779:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1341_end3778 
.annotate 'line', 1505
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
  unless1341_end3778:
.annotate 'line', 1508
    nqp_get_sc_object $P5020, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3780
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback3780:
.annotate 'line', 1510
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3781
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5026
  fallback3781:
.annotate 'line', 1512
    nqp_get_sc_object $P5030, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3782
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5031
  fallback3782:
    $P5032 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5033 = $P5022."new"($P5032, $P101, "bind" :named("op"))
.annotate 'line', 1515
    nqp_get_sc_object $P5037, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3783
    nqp_get_sc_object $P5038, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5034, $P5038
  fallback3783:
.annotate 'line', 1518
    nqp_get_sc_object $P5042, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3784
    nqp_get_sc_object $P5043, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5043
  fallback3784:
.annotate 'line', 1520
    nqp_get_sc_object $P5047, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Var"]
    unless_null $P5044, fallback3785
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5048
  fallback3785:
    $P5049 = $P5044."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1521
    nqp_get_sc_object $P5053, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["IVal"]
    unless_null $P5050, fallback3786
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5050, $P5054
  fallback3786:
    $P5055 = $P5050."new"(1 :named("value"))
    $P5056 = $P5039."new"($P5049, $P5055, "sub_n" :named("op"))
    $P5057 = $P5034."new"($P101, $P5056, "bind" :named("op"))
    $P5058 = $P5017."new"($P5033, $P5057, 0 :named("resultchild"))
    $P5059 = _lex_param_0."as_post"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1526
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1527
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3787
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5002
  fallback3787:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1530
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1531
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3788
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5002
  fallback3788:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1534
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1535
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3789
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback3789:
.annotate 'line', 1537
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3790
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback3790:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3791
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5012
  fallback3791:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1538
    nqp_get_sc_object $P5017, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3792
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5018
  fallback3792:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3793
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5020
  fallback3793:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_418_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1542
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$res", $P101 
    .lex "$ops", $P102 
    .lex "$arg_post", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
.annotate 'line', 1543
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback3794
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback3795
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5008
  fallback3795:
    unless_null $P5005, vivi_13423796
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_13423796:
    set $P5004, $P5005
  fallback3794:
    $P5010 = $P5004."fresh_i"()
    set $P101, $P5010
.annotate 'line', 1544
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback3797
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback3797:
    $P5016 = $P5011."new"($P101 :named("result"))
    set $P102, $P5016
.annotate 'line', 1545
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback3798
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5018
  fallback3798:
    $P5019 = _lex_param_0."as_post"($P5017)
    set $P103, $P5019
.annotate 'line', 1546
    $P5020 = $P103."result"()
    $P5021 = _lex_param_0."infer_type"($P5020)
    set $S5002, $P5021
    downcase $S5001, $S5002
    iseq $I5001, $S5001, "i"
    unless $I5001 goto if1343_else3799 
.annotate 'line', 1547
    $P102."push"($P103)
.annotate 'line', 1548
    $P5022 = $P102."push_pirop"("not", $P101, $P103)
    goto if1343_end3800
  if1343_else3799:
.annotate 'line', 1550
.annotate 'line', 1551
    $P5023 = _lex_param_0."coerce"($P103, "P")
    set $P103, $P5023
.annotate 'line', 1552
    $P102."push"($P103)
.annotate 'line', 1553
    $P5024 = $P102."push_pirop"("isfalse", $P101, $P103)
  if1343_end3800:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_358_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1559
    .const 'Sub' $P5124 = 'cuid_419_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_422_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_425_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_426_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_429_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_431_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_432_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_433_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_435_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_436_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_441_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_246_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_247_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_248_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_249_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_250_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_251_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_252_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_253_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_254_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_255_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_256_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_257_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_258_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_259_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_260_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_261_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_262_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_263_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_264_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_265_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_266_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_267_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_268_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_269_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_270_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_271_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_272_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_273_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_274_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_275_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_276_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_277_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_278_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_279_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_280_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_281_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_282_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_283_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_284_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_285_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_286_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_287_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_288_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_289_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_290_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_291_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_292_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_293_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_294_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_295_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_296_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_297_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_298_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_299_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_300_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_301_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_302_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_303_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_304_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_305_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_306_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_307_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_308_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_309_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_310_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_311_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_312_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_313_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_314_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_315_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_316_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_317_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_318_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_319_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_320_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_321_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_322_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_323_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_324_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_325_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_326_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_327_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_328_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_329_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_330_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_331_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_332_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_333_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_334_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_335_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_336_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_337_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_338_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_339_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_340_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_341_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_342_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_343_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_344_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_345_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_346_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_347_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_348_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_349_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_350_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_351_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_352_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_353_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_354_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_355_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_356_1356803026.47425' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_357_1356803026.47425' 
    capture_lex $P5124 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_419_1356803026.47425' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_422_1356803026.47425' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_425_1356803026.47425' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_426_1356803026.47425' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_429_1356803026.47425' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_431_1356803026.47425' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_432_1356803026.47425' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_433_1356803026.47425' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_435_1356803026.47425' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_436_1356803026.47425' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_441_1356803026.47425' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_246_1356803026.47425' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_247_1356803026.47425' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_248_1356803026.47425' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_249_1356803026.47425' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_250_1356803026.47425' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_251_1356803026.47425' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_252_1356803026.47425' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_253_1356803026.47425' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_254_1356803026.47425' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_255_1356803026.47425' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_256_1356803026.47425' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_257_1356803026.47425' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_258_1356803026.47425' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_259_1356803026.47425' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_260_1356803026.47425' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_261_1356803026.47425' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_262_1356803026.47425' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_263_1356803026.47425' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_264_1356803026.47425' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_265_1356803026.47425' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_266_1356803026.47425' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_267_1356803026.47425' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_268_1356803026.47425' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_269_1356803026.47425' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_270_1356803026.47425' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_271_1356803026.47425' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_272_1356803026.47425' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_273_1356803026.47425' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_274_1356803026.47425' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_275_1356803026.47425' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_276_1356803026.47425' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_277_1356803026.47425' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_278_1356803026.47425' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_279_1356803026.47425' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_280_1356803026.47425' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_281_1356803026.47425' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_282_1356803026.47425' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_283_1356803026.47425' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_284_1356803026.47425' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_285_1356803026.47425' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_286_1356803026.47425' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_287_1356803026.47425' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_288_1356803026.47425' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_289_1356803026.47425' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_290_1356803026.47425' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_291_1356803026.47425' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_292_1356803026.47425' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_293_1356803026.47425' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_294_1356803026.47425' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_295_1356803026.47425' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_296_1356803026.47425' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_297_1356803026.47425' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_298_1356803026.47425' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_299_1356803026.47425' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_300_1356803026.47425' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_301_1356803026.47425' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_302_1356803026.47425' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_303_1356803026.47425' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_304_1356803026.47425' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_305_1356803026.47425' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_306_1356803026.47425' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_307_1356803026.47425' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_308_1356803026.47425' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_309_1356803026.47425' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_310_1356803026.47425' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_311_1356803026.47425' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_312_1356803026.47425' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_313_1356803026.47425' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_314_1356803026.47425' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_315_1356803026.47425' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_316_1356803026.47425' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_317_1356803026.47425' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_318_1356803026.47425' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_319_1356803026.47425' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_320_1356803026.47425' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_321_1356803026.47425' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_322_1356803026.47425' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_323_1356803026.47425' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_324_1356803026.47425' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_325_1356803026.47425' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_326_1356803026.47425' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_327_1356803026.47425' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_328_1356803026.47425' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_329_1356803026.47425' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_330_1356803026.47425' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_331_1356803026.47425' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_332_1356803026.47425' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_333_1356803026.47425' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_334_1356803026.47425' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_335_1356803026.47425' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_336_1356803026.47425' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_337_1356803026.47425' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_338_1356803026.47425' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_339_1356803026.47425' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_340_1356803026.47425' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_341_1356803026.47425' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_342_1356803026.47425' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_343_1356803026.47425' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_344_1356803026.47425' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_345_1356803026.47425' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_346_1356803026.47425' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_347_1356803026.47425' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_348_1356803026.47425' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_349_1356803026.47425' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_350_1356803026.47425' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_351_1356803026.47425' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_352_1356803026.47425' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_353_1356803026.47425' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_354_1356803026.47425' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_355_1356803026.47425' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_356_1356803026.47425' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_357_1356803026.47425' 
    capture_lex $P5123
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_419_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1560
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1561
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3801
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5002
  fallback3801:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_422_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1565
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_421_1356803026.47425' 
    capture_lex $P5004 
    .lex "$block", _lex_param_0 
.annotate 'line', 1566
    _lex_param_0."blocktype"("immediate")
.annotate 'line', 1567
    $P5001 = _lex_param_0."symtable"()
    if $P5001 goto unless1344_end3803 
    .const 'Sub' $P5002 = 'cuid_421_1356803026.47425' 
    capture_lex $P5002
    $P5003 = $P5002()
  unless1344_end3803:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1356803026.47425") :anon :lex :outer("cuid_422_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1567
    .const 'Sub' $P5017 = 'cuid_420_1356803026.47425' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1568
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3804
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback3804:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1569
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3805:
    unless $P5012, for_done3807
    shift $P5016, $P5012
  for_redo3806:
    .const 'Sub' $P5015 = 'cuid_420_1356803026.47425' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3805
  for_done3807:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_420_1356803026.47425") :anon :lex :outer("cuid_421_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1569
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_425_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1575
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_424_1356803026.47425' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1345_else3808 
.annotate 'line', 1576
.annotate 'line', 1577
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3810
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback3810:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1345_end3809
  if1345_else3808:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1346_else3811 
.annotate 'line', 1579
.annotate 'line', 1580
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3813
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback3813:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1346_end3812
  if1346_else3811:
    .const 'Sub' $P5013 = 'cuid_424_1356803026.47425' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1346_end3812:
    set $P5016, $P5015
  if1345_end3809:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1356803026.47425") :anon :lex :outer("cuid_425_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1582
    .const 'Sub' $P5022 = 'cuid_423_1356803026.47425' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_13513822
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1584
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_13493819
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1585
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3814
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback3814:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3815
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3816
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5011
  fallback3816:
    unless_null $P5008, vivi_13473817
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_13473817:
    set $P5007, $P5008
  fallback3815:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_13483818
  catch_handler_13493819:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_423_1356803026.47425' 
    capture_lex $P10001
    $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10002
    goto skip_handler_13483818
  skip_handler_13483818:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_13503821
  catch_handler_13513822:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_13503821
  skip_handler_13503821:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_423_1356803026.47425") :anon :lex :outer("cuid_424_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1586
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3820
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback3820:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_426_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1592
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1352_else3823 
.annotate 'line', 1593
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3825
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback3825:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1352_end3824
  if1352_else3823:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1353_else3826 
.annotate 'line', 1594
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3828
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback3828:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1353_end3827
  if1353_else3826:
.annotate 'line', 1595
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3829
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5017
  fallback3829:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1353_end3827:
    set $P5020, $P5019
  if1352_end3824:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_429_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1608
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_428_1356803026.47425' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3832
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback3832:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1354_else3830 
    .const 'Sub' $P5006 = 'cuid_428_1356803026.47425' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1354_end3831
  if1354_else3830:
.annotate 'line', 1613
.annotate 'line', 1614
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1354_end3831:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1356803026.47425") :anon :lex :outer("cuid_429_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1609
    .const 'Sub' $P5009 = 'cuid_427_1356803026.47425' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1611
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3833:
    unless $P5004, for_done3835
    shift $P5008, $P5004
  for_redo3834:
    .const 'Sub' $P5007 = 'cuid_427_1356803026.47425' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3833
  for_done3835:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_427_1356803026.47425") :anon :lex :outer("cuid_428_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1611
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_431_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1808
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_430_1356803026.47425' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1355_end3837 
.annotate 'line', 1810
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3838
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5006
  fallback3838:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3842:
    unless $P5003, for_done3844
    shift $P5008, $P5003
  for_redo3843:
    .const 'Sub' $P5007 = 'cuid_430_1356803026.47425' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3842
  for_done3844:
    set $P5009, $P5001
  if1355_end3837:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_430_1356803026.47425") :anon :lex :outer("cuid_431_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1811
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3839
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3840
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3840:
    unless_null $P5002, vivi_13563841
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_13563841:
    set $P5001, $P5002
  fallback3839:
.annotate 'line', 1812
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_432_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1910
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3847
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3848
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3848:
    unless_null $P5002, vivi_13583849
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_13583849:
    set $P5001, $P5002
  fallback3847:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if1357_end3846 
.annotate 'line', 1911
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
  if1357_end3846:
.annotate 'line', 1914
    $P5010 = _lex_param_1."arity"()
    if $P5010 goto unless1359_end3851 
.annotate 'line', 1915
.annotate 'line', 1916
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback3852
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback3852:
.annotate 'line', 1917
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback3853
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5020
  fallback3853:
    $P5021 = $P5016."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1918
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback3854
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5026
  fallback3854:
    $P5027 = $P5022."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5028 = $P5011."new"($P5021, $P5027, "bind" :named("op"))
    _lex_param_1."unshift"($P5028)
.annotate 'line', 1921
    nqp_get_sc_object $P5032, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3855
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5029, $P5033
  fallback3855:
    $P5034 = $P5029."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    _lex_param_1."unshift"($P5034)
.annotate 'line', 1922
    _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1923
    _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1924
    $P5035 = _lex_param_1."arity"(1)
  unless1359_end3851:
.annotate 'line', 1926
    _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5036, "%*HANDLERS"
    unless_null $P5036, fallback3856
    nqp_get_sc_object $P5039, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["%HANDLERS"]
    unless_null $P5037, fallback3857
    nqp_get_sc_object $P5041, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5040, $P5041
    new $P5042, 'Hash'
    set $P5040["%HANDLERS"], $P5042
    set $P5037, $P5042
  fallback3857:
    unless_null $P5037, vivi_13603858
    die "Contextual %*HANDLERS not found"
    box $P5043, "Contextual %*HANDLERS not found"
    set $P5037, $P5043
  vivi_13603858:
    set $P5036, $P5037
  fallback3856:
    set $S5005, _lex_param_2
.annotate 'line', 1927
    nqp_get_sc_object $P5047, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Stmts"]
    unless_null $P5044, fallback3859
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5048
  fallback3859:
.annotate 'line', 1928
    nqp_get_sc_object $P5052, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Op"]
    unless_null $P5049, fallback3860
    nqp_get_sc_object $P5053, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5049, $P5053
  fallback3860:
.annotate 'line', 1930
    nqp_get_sc_object $P5057, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback3861
    nqp_get_sc_object $P5058, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5054, $P5058
  fallback3861:
    $P5059 = $P5054."new"("exception" :named("op"))
    $P5060 = $P5049."new"(_lex_param_1, $P5059, "call" :named("op"))
.annotate 'line', 1932
    nqp_get_sc_object $P5064, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback3862
    nqp_get_sc_object $P5065, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5061, $P5065
  fallback3862:
.annotate 'line', 1934
    nqp_get_sc_object $P5069, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3863
    nqp_get_sc_object $P5070, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5066, $P5070
  fallback3863:
    $P5071 = $P5066."new"("exception" :named("op"))
.annotate 'line', 1935
    nqp_get_sc_object $P5075, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback3864
    nqp_get_sc_object $P5076, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5072, $P5076
  fallback3864:
    $P5077 = $P5072."new"("handled" :named("value"))
.annotate 'line', 1936
    nqp_get_sc_object $P5081, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["IVal"]
    unless_null $P5078, fallback3865
    nqp_get_sc_object $P5082, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5078, $P5082
  fallback3865:
    $P5083 = $P5078."new"(1 :named("value"))
    $P5084 = $P5061."new"($P5071, $P5077, $P5083, "bindkey_i" :named("op"))
.annotate 'line', 1938
    $P5085 = "&default_for"("$")
    $P5086 = $P5044."new"($P5060, $P5084, $P5085)
    set $P5036[$S5005], $P5086
    .return ($P5086) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_433_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2541
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2542
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3866
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3867
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback3867:
    unless_null $P5003, vivi_13613868
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13613868:
    set $P5002, $P5003
  fallback3866:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2543
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3869
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5013
  fallback3869:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_435_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2547
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_434_1356803026.47425' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3870
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5009
  fallback3870:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3886:
    unless $P5007, for_done3888
    shift $P5012, $P5007
  for_redo3887:
    .const 'Sub' $P5011 = 'cuid_434_1356803026.47425' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3886
  for_done3888:
.annotate 'line', 2559
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3889
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3890
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5017
  fallback3890:
    unless_null $P5014, vivi_13683891
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13683891:
    set $P5013, $P5014
  fallback3889:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_434_1356803026.47425") :anon :lex :outer("cuid_435_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2550
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3877
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback3877:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1364_end3876 
.annotate 'line', 2551
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1364_end3876:
    set $I5005, $I5003
    unless $I5003 goto if1363_end3874 
    $P5007 = _lex_param_0."named"()
    isfalse $I5004, $P5007
    set $I5005, $I5004
  if1363_end3874:
    box $P5021, $I5005
    set $P5020, $P5021
    unless $I5005 goto if1362_end3872 
.annotate 'line', 2552
    find_lex $P5008, "$types"
    $P5009 = _lex_param_0."returns"()
    get_id $I5007, $P5009
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    get_id $I5008, $P5010
    iseq $I5006, $I5007, $I5008
    unless $I5006 goto if1365_else3878 
    null $P5011
    set $P5013, $P5011
    goto if1365_end3879
  if1365_else3878:
.annotate 'line', 2554
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1365_end3879:
    $P5008."push"($P5013)
.annotate 'line', 2555
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3882
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5016
  fallback3882:
    set $S5002, $P5015
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1366_else3880 
    set $I5012, 1
    goto if1366_end3881
  if1366_else3880:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3885
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5018
  fallback3885:
    set $S5003, $P5017
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1367_else3883 
    set $I5011, 2
    goto if1367_end3884
  if1367_else3883:
    set $I5011, 0
  if1367_end3884:
    set $I5012, $I5011
  if1366_end3881:
    $P5019 = $P5014."push"($I5012)
    set $P5020, $P5019
  if1362_end3872:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_436_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2562
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2563
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3892
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback3892:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_441_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3035
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5072 = 'cuid_439_1356803026.47425' 
    capture_lex $P5072 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3893
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1369_end3896 
.annotate 'line', 3037
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
  if1369_end3896:
.annotate 'line', 3041
    $P5005 = _lex_param_0."pop"()
    set $P101, $P5005
.annotate 'line', 3042
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["VarWithFallback"]
    unless_null $P5006, fallback3897
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback3897:
.annotate 'line', 3044
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback3898
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback3898:
    set $S5001, $P101
    $P5016 = $P5011."new"($S5001 :named("value"))
    $P5017 = $P5006."new"($P5016, "associative" :named("scope"))
    set $P102, $P5017
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1370_else3899 
.annotate 'line', 3049
.annotate 'line', 3050
    nqp_get_sc_object $P5021, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Op"]
    unless_null $P5018, fallback3901
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5022
  fallback3901:
.annotate 'line', 3052
    nqp_get_sc_object $P5026, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback3902
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5027
  fallback3902:
    $P5028 = $P5023."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5029 = $P5018."new"($P5028, "who" :named("op"))
    $P102."unshift"($P5029)
.annotate 'line', 3054
    nqp_get_sc_object $P5033, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback3903
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5034
  fallback3903:
.annotate 'line', 3056
    nqp_get_sc_object $P5038, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3904
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5039
  fallback3904:
.annotate 'line', 3058
    nqp_get_sc_object $P5043, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3905
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5044
  fallback3905:
.annotate 'line', 3060
    nqp_get_sc_object $P5048, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["WVal"]
    unless_null $P5045, fallback3906
    nqp_get_sc_object $P5049, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5045, $P5049
  fallback3906:
    find_dynamic_lex $P5050, "$*GLOBALish"
    unless_null $P5050, fallback3907
    nqp_get_sc_object $P5053, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$GLOBALish"]
    unless_null $P5051, fallback3908
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5051, $P5054
  fallback3908:
    unless_null $P5051, vivi_13713909
    die "Contextual $*GLOBALish not found"
    box $P5055, "Contextual $*GLOBALish not found"
    set $P5051, $P5055
  vivi_13713909:
    set $P5050, $P5051
  fallback3907:
    $P5056 = $P5045."new"($P5050 :named("value"))
    $P5057 = $P5040."new"($P5056, "who" :named("op"))
.annotate 'line', 3062
    nqp_get_sc_object $P5061, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3910
    nqp_get_sc_object $P5062, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5058, $P5062
  fallback3910:
    set $S5002, $P101
    $P5063 = $P5058."new"($S5002 :named("value"))
    $P5064 = $P5035."new"($P5057, $P5063, "atkey" :named("op"))
.annotate 'line', 3064
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5065 = "&default_for"($S5003)
    $P5066 = $P5030."new"($P5064, $P5065, "ifnull" :named("op"))
    $P5067 = $P102."fallback"($P5066)
    goto if1370_end3900
  if1370_else3899:
    .const 'Sub' $P5068 = 'cuid_439_1356803026.47425' 
    capture_lex $P5068
    $P5069 = $P5068()
  if1370_end3900:
    find_lex $P5070, "RETURN"
    $P5071 = $P5070($P102)
    goto lexotic_3894
  lexotic_3893:
    .get_results ($P5071)
  lexotic_3894:
    .return ($P5071) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1356803026.47425") :anon :lex :outer("cuid_441_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3070
    .const 'Sub' $P5066 = 'cuid_438_1356803026.47425' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_440_1356803026.47425' 
    capture_lex $P5066 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 3072
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3913
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3914
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback3914:
    unless_null $P5004, vivi_13733915
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13733915:
    set $P5003, $P5004
  fallback3913:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3916
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback3916:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1372_else3911 
    .const 'Sub' $P5013 = 'cuid_438_1356803026.47425' 
    capture_lex $P5013
    $P5014 = $P5013()
    goto if1372_end3912
  if1372_else3911:
.annotate 'line', 3081
.annotate 'line', 3082
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3924
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback3924:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3925
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3926
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5024
  fallback3926:
    unless_null $P5021, vivi_13773927
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13773927:
    set $P5020, $P5021
  fallback3925:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
  if1372_end3912:
    find_lex $P5028, "@name"
    set $P5027, $P5028[0]
    unless_null $P5027, fallback3930
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5029
  fallback3930:
    set $S5001, $P5027
    iseq $I5001, $S5001, "GLOBAL"
    unless $I5001 goto if1378_end3929 
.annotate 'line', 3084
.annotate 'line', 3085
    find_lex $P5030, "@name"
    $P5031 = $P5030."shift"()
  if1378_end3929:
    find_lex $P5035, "@name"
    set $P5032, $P5035
    iter $P5034, $P5035
  for_next3933:
    unless $P5034, for_done3935
    shift $P5037, $P5034
  for_redo3934:
    .const 'Sub' $P5036 = 'cuid_440_1356803026.47425' 
    capture_lex $P5036
    $P5032 = $P5036($P5037)
    goto for_next3933
  for_done3935:
.annotate 'line', 3092
    find_lex $P5038, "$lookup"
    nqp_get_sc_object $P5042, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3936
    nqp_get_sc_object $P5043, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5043
  fallback3936:
    $P5044 = $P5039."new"($P101, "who" :named("op"))
    $P5038."unshift"($P5044)
    find_lex $P5045, "$final_name"
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    box $P5046, $S5002
    set $P102, $P5046
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1380_end3940 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1380_end3940:
    unless $I5004 goto if1379_else3937 
.annotate 'line', 3094
.annotate 'line', 3095
    find_lex $P5047, "$lookup"
    nqp_get_sc_object $P5051, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3941
    nqp_get_sc_object $P5052, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5052
  fallback3941:
    find_lex $P5054, "$lookup"
    set $P5053, $P5054[0]
    unless_null $P5053, fallback3942
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5053, $P5055
  fallback3942:
    find_lex $P5057, "$lookup"
    set $P5056, $P5057[1]
    unless_null $P5056, fallback3943
    nqp_get_sc_object $P5058, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5056, $P5058
  fallback3943:
.annotate 'line', 3099
    $P5059 = "&default_for"($P102)
    $P5060 = $P5048."new"($P5053, $P5056, $P5059, "bindkey" :named("op"))
    $P5061 = $P5047."fallback"($P5060)
    set $P5065, $P5061
    goto if1379_end3938
  if1379_else3937:
.annotate 'line', 3102
.annotate 'line', 3103
    find_lex $P5062, "$lookup"
    $P5063 = "&default_for"($P102)
    $P5064 = $P5062."fallback"($P5063)
    set $P5065, $P5064
  if1379_end3938:
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1356803026.47425") :anon :lex :outer("cuid_439_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3073
    .const 'Sub' $P5021 = 'cuid_437_1356803026.47425' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13763922
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 3074
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 3075
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3917
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5008
  fallback3917:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3918
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3919
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5013
  fallback3919:
    unless_null $P5010, vivi_13743920
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13743920:
    set $P5009, $P5010
  fallback3918:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13753921
  catch_handler_13763922:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_437_1356803026.47425' 
    capture_lex $P10001
    $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10002
    goto skip_handler_13753921
  skip_handler_13753921:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1356803026.47425") :anon :lex :outer("cuid_438_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3076
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 3077
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3923
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback3923:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1356803026.47425") :anon :lex :outer("cuid_439_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3087
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3088
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3931
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback3931:
    find_lex $P5006, "$path"
.annotate 'line', 3090
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3932
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback3932:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_246_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1598
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3944
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback3944:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3945
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback3945:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_247_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1600
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1601
    unless_null _lex_param_1, fallback3948
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback3948:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3949
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback3949:
    unless $P5001 goto if1381_else3946 
    unless_null _lex_param_1, fallback3950
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback3950:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3951
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback3951:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1602
    unless_null _lex_param_1, fallback3952
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback3952:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3953
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback3953:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3954
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback3954:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1603
    unless_null _lex_param_1, fallback3955
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5016
  fallback3955:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback3956
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5017
  fallback3956:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback3957
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5018
  fallback3957:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1381_end3947
  if1381_else3946:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1381_end3947:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_248_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1618
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$main_tasks", $P103 
    .lex "$compunit", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
.annotate 'line', 1619
    unless_null _lex_param_1, fallback3958
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5006
  fallback3958:
    set $P5005, _lex_param_1["statementlist"]
    unless_null $P5005, fallback3959
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5007
  fallback3959:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 1620
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3960
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3961
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5013
  fallback3961:
    unless_null $P5010, vivi_13823962
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13823962:
    set $P5009, $P5010
  fallback3960:
    $P5015 = $P5009."pop_lexpad"()
    set $P102, $P5015
    find_dynamic_lex $P5016, "$*HAS_YOU_ARE_HERE"
    unless_null $P5016, fallback3965
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$HAS_YOU_ARE_HERE"]
    unless_null $P5017, fallback3966
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5020
  fallback3966:
    unless_null $P5017, vivi_13843967
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5021, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5017, $P5021
  vivi_13843967:
    set $P5016, $P5017
  fallback3965:
    if $P5016 goto unless1383_end3964 
.annotate 'line', 1625
.annotate 'line', 1626
    nqp_decontainerize $P5022, _lex_param_0
    $P5023 = $P5022."CTXSAVE"()
    $P5024 = $P102."push"($P5023)
  unless1383_end3964:
.annotate 'line', 1633
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Var"]
    unless_null $P5025, fallback3968
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback3968:
    $P5030 = $P5025."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P102."unshift"($P5030)
.annotate 'line', 1634
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Stmts"]
    unless_null $P5031, fallback3969
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5031, $P5035
  fallback3969:
.annotate 'line', 1635
    nqp_get_sc_object $P5039, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["VM"]
    unless_null $P5036, fallback3970
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5040
  fallback3970:
.annotate 'line', 1637
    nqp_get_sc_object $P5044, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback3971
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5041, $P5045
  fallback3971:
    $P5046 = $P5041."new"("ModuleLoader.pbc" :named("value"))
    $P5047 = $P5036."new"($P5046, "load_bytecode vs" :named("pirop"))
.annotate 'line', 1639
    nqp_get_sc_object $P5051, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3972
    nqp_get_sc_object $P5052, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5052
  fallback3972:
.annotate 'line', 1641
    nqp_get_sc_object $P5056, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["VM"]
    unless_null $P5053, fallback3973
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5053, $P5057
  fallback3973:
.annotate 'line', 1643
    nqp_get_sc_object $P5061, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3974
    nqp_get_sc_object $P5062, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5058, $P5062
  fallback3974:
    $P5063 = $P5058."new"("ModuleLoader" :named("value"))
    $P5064 = $P5053."new"($P5063, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 1645
    nqp_get_sc_object $P5068, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set $P5065, $P5066["Op"]
    unless_null $P5065, fallback3975
    nqp_get_sc_object $P5069, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5065, $P5069
  fallback3975:
.annotate 'line', 1647
    nqp_get_sc_object $P5073, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["VM"]
    unless_null $P5070, fallback3976
    nqp_get_sc_object $P5074, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5070, $P5074
  fallback3976:
    $P5075 = $P5070."new"("getinterp P" :named("pirop"))
.annotate 'line', 1648
    nqp_get_sc_object $P5079, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5078, $P5079, "QAST"
    get_who $P5077, $P5078
    set $P5076, $P5077["SVal"]
    unless_null $P5076, fallback3977
    nqp_get_sc_object $P5080, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5076, $P5080
  fallback3977:
    $P5081 = $P5076."new"("context" :named("value"))
    $P5082 = $P5065."new"($P5075, $P5081, "atkey" :named("op"))
    $P5083 = $P5048."new"($P5064, $P5082, "callmethod" :named("op"), "set_mainline_module" :named("name"))
    $P5084 = $P5031."new"($P5047, $P5083)
    set $P103, $P5084
    find_dynamic_lex $P5085, "$*MAIN_SUB"
    unless_null $P5085, fallback3980
    nqp_get_sc_object $P5088, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$MAIN_SUB"]
    unless_null $P5086, fallback3981
    nqp_get_sc_object $P5089, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5086, $P5089
  fallback3981:
    unless_null $P5086, vivi_13863982
    die "Contextual $*MAIN_SUB not found"
    box $P5090, "Contextual $*MAIN_SUB not found"
    set $P5086, $P5090
  vivi_13863982:
    set $P5085, $P5086
  fallback3980:
    unless $P5085 goto if1385_end3979 
.annotate 'line', 1652
.annotate 'line', 1653
    nqp_get_sc_object $P5094, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5093, $P5094, "QAST"
    get_who $P5092, $P5093
    set $P5091, $P5092["Op"]
    unless_null $P5091, fallback3983
    nqp_get_sc_object $P5095, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5091, $P5095
  fallback3983:
.annotate 'line', 1654
    nqp_get_sc_object $P5099, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5098, $P5099, "QAST"
    get_who $P5097, $P5098
    set $P5096, $P5097["BVal"]
    unless_null $P5096, fallback3984
    nqp_get_sc_object $P5100, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5096, $P5100
  fallback3984:
    find_dynamic_lex $P5101, "$*MAIN_SUB"
    unless_null $P5101, fallback3985
    nqp_get_sc_object $P5104, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5103, $P5104
    set $P5102, $P5103["$MAIN_SUB"]
    unless_null $P5102, fallback3986
    nqp_get_sc_object $P5105, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5102, $P5105
  fallback3986:
    unless_null $P5102, vivi_13873987
    die "Contextual $*MAIN_SUB not found"
    box $P5106, "Contextual $*MAIN_SUB not found"
    set $P5102, $P5106
  vivi_13873987:
    set $P5101, $P5102
  fallback3985:
    $P5107 = $P5096."new"($P5101 :named("value"))
.annotate 'line', 1655
    nqp_get_sc_object $P5111, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5110, $P5111, "QAST"
    get_who $P5109, $P5110
    set $P5108, $P5109["Var"]
    unless_null $P5108, fallback3988
    nqp_get_sc_object $P5112, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5108, $P5112
  fallback3988:
    $P5113 = $P5108."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5114 = $P5091."new"($P5107, $P5113, "call" :named("op"))
    $P5115 = $P103."push"($P5114)
  if1385_end3979:
.annotate 'line', 1658
    nqp_get_sc_object $P5119, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5118, $P5119, "QAST"
    get_who $P5117, $P5118
    set $P5116, $P5117["Op"]
    unless_null $P5116, fallback3989
    nqp_get_sc_object $P5120, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5116, $P5120
  fallback3989:
.annotate 'line', 1660
    nqp_get_sc_object $P5124, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5123, $P5124, "QAST"
    get_who $P5122, $P5123
    set $P5121, $P5122["Var"]
    unless_null $P5121, fallback3990
    nqp_get_sc_object $P5125, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5121, $P5125
  fallback3990:
    $P5126 = $P5121."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    $P5127 = $P5116."new"($P5126, $P103, "if" :named("op"))
    $P101."push"($P5127)
.annotate 'line', 1665
    $P102."push"($P101)
.annotate 'line', 1668
    find_dynamic_lex $P5128, "$*W"
    unless_null $P5128, fallback3991
    nqp_get_sc_object $P5131, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5130, $P5131
    set $P5129, $P5130["$W"]
    unless_null $P5129, fallback3992
    nqp_get_sc_object $P5132, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5129, $P5132
  fallback3992:
    unless_null $P5129, vivi_13883993
    die "Contextual $*W not found"
    box $P5133, "Contextual $*W not found"
    set $P5129, $P5133
  vivi_13883993:
    set $P5128, $P5129
  fallback3991:
    $P5134 = $P5128."libs"()
    $P102."push"($P5134)
.annotate 'line', 1671
    nqp_get_sc_object $P5138, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5137, $P5138, "QAST"
    get_who $P5136, $P5137
    set $P5135, $P5136["CompUnit"]
    unless_null $P5135, fallback3994
    nqp_get_sc_object $P5139, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5135, $P5139
  fallback3994:
.annotate 'line', 1675
    find_dynamic_lex $P5140, "$*W"
    unless_null $P5140, fallback3995
    nqp_get_sc_object $P5143, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5142, $P5143
    set $P5141, $P5142["$W"]
    unless_null $P5141, fallback3996
    nqp_get_sc_object $P5144, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5141, $P5144
  fallback3996:
    unless_null $P5141, vivi_13893997
    die "Contextual $*W not found"
    box $P5145, "Contextual $*W not found"
    set $P5141, $P5145
  vivi_13893997:
    set $P5140, $P5141
  fallback3995:
    $P5146 = $P5140."sc"()
.annotate 'line', 1676
    find_dynamic_lex $P5147, "$*W"
    unless_null $P5147, fallback3998
    nqp_get_sc_object $P5150, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5149, $P5150
    set $P5148, $P5149["$W"]
    unless_null $P5148, fallback3999
    nqp_get_sc_object $P5151, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5148, $P5151
  fallback3999:
    unless_null $P5148, vivi_13904000
    die "Contextual $*W not found"
    box $P5152, "Contextual $*W not found"
    set $P5148, $P5152
  vivi_13904000:
    set $P5147, $P5148
  fallback3998:
    $P5153 = $P5147."code_ref_blocks"()
.annotate 'line', 1677
    find_dynamic_lex $P5154, "$*W"
    unless_null $P5154, fallback4001
    nqp_get_sc_object $P5157, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5156, $P5157
    set $P5155, $P5156["$W"]
    unless_null $P5155, fallback4002
    nqp_get_sc_object $P5158, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5155, $P5158
  fallback4002:
    unless_null $P5155, vivi_13914003
    die "Contextual $*W not found"
    box $P5159, "Contextual $*W not found"
    set $P5155, $P5159
  vivi_13914003:
    set $P5154, $P5155
  fallback4001:
    $P5160 = $P5154."is_precompilation_mode"()
.annotate 'line', 1678
    find_dynamic_lex $P5161, "$*W"
    unless_null $P5161, fallback4004
    nqp_get_sc_object $P5164, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5163, $P5164
    set $P5162, $P5163["$W"]
    unless_null $P5162, fallback4005
    nqp_get_sc_object $P5165, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5162, $P5165
  fallback4005:
    unless_null $P5162, vivi_13924006
    die "Contextual $*W not found"
    box $P5166, "Contextual $*W not found"
    set $P5162, $P5166
  vivi_13924006:
    set $P5161, $P5162
  fallback4004:
    $P5167 = $P5161."load_dependency_tasks"()
.annotate 'line', 1679
    find_dynamic_lex $P5168, "$*W"
    unless_null $P5168, fallback4007
    nqp_get_sc_object $P5171, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5170, $P5171
    set $P5169, $P5170["$W"]
    unless_null $P5169, fallback4008
    nqp_get_sc_object $P5172, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5169, $P5172
  fallback4008:
    unless_null $P5169, vivi_13934009
    die "Contextual $*W not found"
    box $P5173, "Contextual $*W not found"
    set $P5169, $P5173
  vivi_13934009:
    set $P5168, $P5169
  fallback4007:
    $P5174 = $P5168."fixup_tasks"()
.annotate 'line', 1684
    nqp_get_sc_object $P5178, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5177, $P5178, "QAST"
    get_who $P5176, $P5177
    set $P5175, $P5176["Op"]
    unless_null $P5175, fallback4010
    nqp_get_sc_object $P5179, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5175, $P5179
  fallback4010:
.annotate 'line', 1686
    nqp_get_sc_object $P5183, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5182, $P5183, "QAST"
    get_who $P5181, $P5182
    set $P5180, $P5181["BVal"]
    unless_null $P5180, fallback4011
    nqp_get_sc_object $P5184, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5180, $P5184
  fallback4011:
    $P5185 = $P5180."new"($P102 :named("value"))
    $P5186 = $P5175."new"($P5185, "call" :named("op"))
    $P5187 = $P5135."new"($P102, "nqp" :named("hll"), $P5146 :named("sc"), $P5153 :named("code_ref_blocks"), $P5160 :named("compilation_mode"), $P5167 :named("pre_deserialize"), $P5174 :named("post_deserialize"), $P5186 :named("load"))
    set $P104, $P5187
.annotate 'line', 1694
    $P5188 = _lex_param_1."!make"($P104)
    .return ($P5188) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_249_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1697
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_442_1356803026.47425' 
    capture_lex $P5022 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1698
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback4012
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback4012:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback4015
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback4015:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback4016
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback4016:
    unless $P5008 goto if1394_else4013 
.annotate 'line', 1699
    unless_null _lex_param_1, fallback4017
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5015
  fallback4017:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback4018
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5016
  fallback4018:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next4031:
    unless $P5013, for_done4033
    shift $P5018, $P5013
  for_redo4032:
    .const 'Sub' $P5017 = 'cuid_442_1356803026.47425' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next4031
  for_done4033:
    goto if1394_end4014
  if1394_else4013:
.annotate 'line', 1708
.annotate 'line', 1709
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
  if1394_end4014:
.annotate 'line', 1711
    $P5021 = _lex_param_1."!make"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1356803026.47425") :anon :lex :outer("cuid_249_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1700
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1701
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback4021
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5004
  fallback4021:
    defined $I5001, $P5003
    unless $I5001 goto if1395_end4020 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback4022
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5006
  fallback4022:
    set $P101, $P5005
  if1395_end4020:
    set $P5007, $P101["bareblock"]
    unless_null $P5007, fallback4025
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5008
  fallback4025:
    unless $P5007 goto if1396_end4024 
.annotate 'line', 1703
    set $P5009, $P101[0]
    unless_null $P5009, fallback4026
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5010
  fallback4026:
    $P5011 = "&block_immediate"($P5009)
    set $P101, $P5011
  if1396_end4024:
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Node"]
    unless_null $P5012, fallback4029
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback4029:
    type_check $I5002, $P101, $P5012
    unless $I5002 goto if1397_end4028 
.annotate 'line', 1704
    nqp_get_sc_object $P5020, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmts"]
    unless_null $P5017, fallback4030
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback4030:
    $P5022 = $P5017."new"($P101)
    set $P101, $P5022
  if1397_end4028:
.annotate 'line', 1705
    find_lex $P5023, "$past"
    $P5024 = $P5023."push"($P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_250_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1714
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5018 = 'cuid_443_1356803026.47425' 
    capture_lex $P5018 
    if haz_param_4, default4070
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_2, $P5017
  default4070:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback4036
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback4036:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback4037
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback4037:
    unless $P5002 goto if1398_else4034 
    .const 'Sub' $P5005 = 'cuid_443_1356803026.47425' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto if1398_end4035
  if1398_else4034:
    unless_null _lex_param_1, fallback4066
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback4066:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback4067
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback4067:
    unless $P5007 goto if1402_else4064 
.annotate 'line', 1737
    unless_null _lex_param_1, fallback4068
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5011
  fallback4068:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback4069
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback4069:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1402_end4065
  if1402_else4064:
.annotate 'line', 1738
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1402_end4065:
  if1398_end4035:
.annotate 'line', 1739
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1356803026.47425") :anon :lex :outer("cuid_250_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1716
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4038
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5006
  fallback4038:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback4039
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback4039:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback4040
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5008
  fallback4040:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4041
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5012
  fallback4041:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback4042
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5013
  fallback4042:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4043
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5014
  fallback4043:
    set $P102, $P5009
.annotate 'line', 1719
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4044
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5017
  fallback4044:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback4045
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5018
  fallback4045:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    unless $P101 goto if1399_end4047 
.annotate 'line', 1720
.annotate 'line', 1721
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4048
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback4048:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback4049
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5026
  fallback4049:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback4050
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5029, $P5030
  fallback4050:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
  if1399_end4047:
    set $P5077, $P102
    unless $P102 goto if1400_end4052 
.annotate 'line', 1723
    set $P5033, $P102["sym"]
    unless_null $P5033, fallback4055
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5033, $P5034
  fallback4055:
    set $S5002, $P5033
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1401_else4053 
.annotate 'line', 1724
.annotate 'line', 1725
    nqp_get_sc_object $P5038, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Block"]
    unless_null $P5035, fallback4056
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5039
  fallback4056:
.annotate 'line', 1726
    nqp_get_sc_object $P5043, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Var"]
    unless_null $P5040, fallback4057
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5044
  fallback4057:
    $P5045 = $P5040."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5046, "$past"
    $P5047 = $P5035."new"($P5045, $P5046, "immediate" :named("blocktype"))
    store_lex "$past", $P5047
.annotate 'line', 1728
    find_lex $P5048, "$past"
    $P5048."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1729
    find_lex $P5049, "$past"
    $P5049."arity"(1)
.annotate 'line', 1730
    nqp_get_sc_object $P5053, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback4058
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5050, $P5054
  fallback4058:
    set $P5055, $P102["cond"]
    unless_null $P5055, fallback4059
    nqp_get_sc_object $P5056, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5056
  fallback4059:
    $P5057 = $P5055."ast"()
    find_lex $P5058, "$past"
    set $P5059, $P102["sym"]
    unless_null $P5059, fallback4060
    nqp_get_sc_object $P5060, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5059, $P5060
  fallback4060:
    set $S5003, $P5059
    find_lex $P5061, "$/"
    $P5062 = $P5050."new"($P5057, $P5058, $S5003 :named("op"), $P5061 :named("node"))
    store_lex "$past", $P5062
    set $P5076, $P5062
    goto if1401_end4054
  if1401_else4053:
.annotate 'line', 1732
.annotate 'line', 1733
    nqp_get_sc_object $P5066, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5065, $P5066, "QAST"
    get_who $P5064, $P5065
    set $P5063, $P5064["Op"]
    unless_null $P5063, fallback4061
    nqp_get_sc_object $P5067, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5063, $P5067
  fallback4061:
    set $P5068, $P102["cond"]
    unless_null $P5068, fallback4062
    nqp_get_sc_object $P5069, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5068, $P5069
  fallback4062:
    $P5070 = $P5068."ast"()
    find_lex $P5071, "$past"
    set $P5072, $P102["sym"]
    unless_null $P5072, fallback4063
    nqp_get_sc_object $P5073, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5072, $P5073
  fallback4063:
    set $S5004, $P5072
    find_lex $P5074, "$/"
    $P5075 = $P5063."new"($P5070, $P5071, $S5004 :named("op"), $P5074 :named("node"))
    store_lex "$past", $P5075
    set $P5076, $P5075
  if1401_end4054:
    set $P5077, $P5076
  if1400_end4052:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_251_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1742
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1743
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4071
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback4071:
    unless_null _lex_param_1, fallback4072
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback4072:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback4073
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback4073:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback4074
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5011
  fallback4074:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback4075
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback4075:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_252_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1746
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1747
    unless_null _lex_param_1, fallback4076
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4076:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4077
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4077:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_253_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1750
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1751
    unless_null _lex_param_1, fallback4078
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4078:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4079
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4079:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_254_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1754
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5029 = 'cuid_445_1356803026.47425' 
    capture_lex $P5029 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1755
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4080
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4081
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback4081:
    unless_null $P5003, vivi_14034082
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14034082:
    set $P5002, $P5003
  fallback4080:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4085
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback4085:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback4086
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback4086:
    unless $P5009 goto if1404_else4083 
    .const 'Sub' $P5012 = 'cuid_445_1356803026.47425' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5028, $P5013
    goto if1404_end4084
  if1404_else4083:
.annotate 'line', 1770
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback4111
    nqp_get_sc_object $P5017, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback4112
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5018
  fallback4112:
    unless_null $P5015, vivi_14124113
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_14124113:
    set $P5014, $P5015
  fallback4111:
    unless $P5014 goto if1411_end4110 
.annotate 'line', 1771
.annotate 'line', 1772
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if1411_end4110:
    box $P5022, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5022
.annotate 'line', 1775
    unless_null _lex_param_1, fallback4114
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5024
  fallback4114:
    set $P5023, _lex_param_1["you_are_here"]
    unless_null $P5023, fallback4115
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5025
  fallback4115:
    $P5026 = $P5023."ast"()
    $P5027 = _lex_param_1."!make"($P5026)
    set $P5028, $P5027
  if1404_end4084:
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1356803026.47425") :anon :lex :outer("cuid_254_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1756
    .const 'Sub' $P5057 = 'cuid_444_1356803026.47425' 
    capture_lex $P5057 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1757
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4087
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5004
  fallback4087:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback4088
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback4088:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback4091
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback4092
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback4092:
    unless_null $P5008, vivi_14064093
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_14064093:
    set $P5007, $P5008
  fallback4091:
    unless $P5007 goto if1405_end4090 
.annotate 'line', 1758
.annotate 'line', 1759
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback4094
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback4094:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback4095
    nqp_get_sc_object $P5027, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback4096
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback4096:
    unless_null $P5025, vivi_14074097
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_14074097:
    set $P5024, $P5025
  fallback4095:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next4098:
    unless $P5023, for_done4100
    shift $P5033, $P5023
  for_redo4099:
    .const 'Sub' $P5032 = 'cuid_444_1356803026.47425' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next4098
  for_done4100:
  if1405_end4090:
.annotate 'line', 1765
    find_lex $P5034, "$BLOCK"
    $P5034."push"($P101)
.annotate 'line', 1766
    find_lex $P5035, "$BLOCK"
    find_lex $P5036, "$/"
    $P5035."node"($P5036)
    find_dynamic_lex $P5037, "%*HANDLERS"
    unless_null $P5037, fallback4103
    nqp_get_sc_object $P5040, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%HANDLERS"]
    unless_null $P5038, fallback4104
    nqp_get_sc_object $P5042, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%HANDLERS"], $P5043
    set $P5038, $P5043
  fallback4104:
    unless_null $P5038, vivi_14094105
    die "Contextual %*HANDLERS not found"
    box $P5044, "Contextual %*HANDLERS not found"
    set $P5038, $P5044
  vivi_14094105:
    set $P5037, $P5038
  fallback4103:
    unless $P5037 goto if1408_end4102 
    find_lex $P5045, "$BLOCK"
    find_dynamic_lex $P5046, "%*HANDLERS"
    unless_null $P5046, fallback4106
    nqp_get_sc_object $P5049, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["%HANDLERS"]
    unless_null $P5047, fallback4107
    nqp_get_sc_object $P5051, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5050, $P5051
    new $P5052, 'Hash'
    set $P5050["%HANDLERS"], $P5052
    set $P5047, $P5052
  fallback4107:
    unless_null $P5047, vivi_14104108
    die "Contextual %*HANDLERS not found"
    box $P5053, "Contextual %*HANDLERS not found"
    set $P5047, $P5053
  vivi_14104108:
    set $P5046, $P5047
  fallback4106:
    set $P5045["handlers"], $P5046
  if1408_end4102:
.annotate 'line', 1768
    find_dynamic_lex $P5054, "$/"
    find_lex $P5055, "$BLOCK"
    $P5056 = $P5054."!make"($P5055)
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1356803026.47425") :anon :lex :outer("cuid_445_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1760
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1761
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5001."push"($P5002)
.annotate 'line', 1762
    find_lex $P5003, "$past"
    $P5004 = _lex_param_0."value"()
    $P5005 = $P5003."push"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_255_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1779
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1780
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4116
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4117
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback4117:
    unless_null $P5002, vivi_14134118
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14134118:
    set $P5001, $P5002
  fallback4116:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_256_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1783
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_446_1356803026.47425' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback4121
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback4122
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback4122:
    unless_null $P5004, vivi_14154123
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_14154123:
    set $P5003, $P5004
  fallback4121:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback4124
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5011
  fallback4124:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback4125
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5012
  fallback4125:
    defined $I5001, $P5001
    if $I5001 goto unless1414_end4120 
    .const 'Sub' $P5013 = 'cuid_446_1356803026.47425' 
    capture_lex $P5013
    $P5014 = $P5013()
  unless1414_end4120:
.annotate 'line', 1805
    nqp_decontainerize $P5015, _lex_param_0
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4181
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4182
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5020
  fallback4182:
    unless_null $P5017, vivi_14324183
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14324183:
    set $P5016, $P5017
  fallback4181:
    $P5022 = $P5016."cur_lexpad"()
    $P5023 = $P5015."SET_BLOCK_OUTER_CTX"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1356803026.47425") :anon :lex :outer("cuid_256_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1784
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1787
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4126
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4127
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback4127:
    unless_null $P5003, vivi_14164128
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14164128:
    set $P5002, $P5003
  fallback4126:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4130
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4131
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4131:
    unless_null $P5012, vivi_14174132
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_14174132:
    set $P5011, $P5012
  fallback4130:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4133
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5019
  fallback4133:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4134
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5020
  fallback4134:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor4129
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor4129:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4137
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4138
    nqp_get_sc_object $P5030, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4138:
    unless_null $P5026, vivi_14194139
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_14194139:
    set $P5025, $P5026
  fallback4137:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4140
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5033
  fallback4140:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4141
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5034
  fallback4141:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5112, $I5002
    set $P5111, $P5112
    if $I5002 goto unless1418_end4136 
.annotate 'line', 1792
.annotate 'line', 1793
    "&import_HOW_exports"($P101)
    find_dynamic_lex $P5037, "%*COMPILING"
    unless_null $P5037, fallback4144
    nqp_get_sc_object $P5040, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%COMPILING"]
    unless_null $P5038, fallback4145
    nqp_get_sc_object $P5042, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%COMPILING"], $P5043
    set $P5038, $P5043
  fallback4145:
    unless_null $P5038, vivi_14214146
    die "Contextual %*COMPILING not found"
    box $P5044, "Contextual %*COMPILING not found"
    set $P5038, $P5044
  vivi_14214146:
    set $P5037, $P5038
  fallback4144:
    set $P5036, $P5037["%?OPTIONS"]
    unless_null $P5036, fallback4147
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5045
  fallback4147:
    set $P5035, $P5036["old-regex-lib"]
    unless_null $P5035, fallback4148
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5046
  fallback4148:
    unless $P5035 goto if1420_end4143 
.annotate 'line', 1794
.annotate 'line', 1795
    find_dynamic_lex $P5047, "$*W"
    unless_null $P5047, fallback4149
    nqp_get_sc_object $P5050, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$W"]
    unless_null $P5048, fallback4150
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5051
  fallback4150:
    unless_null $P5048, vivi_14224151
    die "Contextual $*W not found"
    box $P5052, "Contextual $*W not found"
    set $P5048, $P5052
  vivi_14224151:
    set $P5047, $P5048
  fallback4149:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback4152
    nqp_get_sc_object $P5056, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback4153
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5054, $P5057
  fallback4153:
    unless_null $P5054, vivi_14234154
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_14234154:
    set $P5053, $P5054
  fallback4152:
    $P5059 = $P5047."load_module"("NQPRegex", $P5053)
  if1420_end4143:
    find_dynamic_lex $P5062, "%*COMPILING"
    unless_null $P5062, fallback4157
    nqp_get_sc_object $P5065, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["%COMPILING"]
    unless_null $P5063, fallback4158
    nqp_get_sc_object $P5067, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5066, $P5067
    new $P5068, 'Hash'
    set $P5066["%COMPILING"], $P5068
    set $P5063, $P5068
  fallback4158:
    unless_null $P5063, vivi_14254159
    die "Contextual %*COMPILING not found"
    box $P5069, "Contextual %*COMPILING not found"
    set $P5063, $P5069
  vivi_14254159:
    set $P5062, $P5063
  fallback4157:
    set $P5061, $P5062["%?OPTIONS"]
    unless_null $P5061, fallback4160
    nqp_get_sc_object $P5070, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5061, $P5070
  fallback4160:
    set $P5060, $P5061["no-regex-lib"]
    unless_null $P5060, fallback4161
    nqp_get_sc_object $P5071, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5060, $P5071
  fallback4161:
    set $P5110, $P5060
    if $P5060 goto unless1424_end4156 
.annotate 'line', 1797
.annotate 'line', 1798
    find_dynamic_lex $P5072, "$*W"
    unless_null $P5072, fallback4162
    nqp_get_sc_object $P5075, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$W"]
    unless_null $P5073, fallback4163
    nqp_get_sc_object $P5076, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5073, $P5076
  fallback4163:
    unless_null $P5073, vivi_14264164
    die "Contextual $*W not found"
    box $P5077, "Contextual $*W not found"
    set $P5073, $P5077
  vivi_14264164:
    set $P5072, $P5073
  fallback4162:
    find_dynamic_lex $P5078, "$*GLOBALish"
    unless_null $P5078, fallback4165
    nqp_get_sc_object $P5081, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$GLOBALish"]
    unless_null $P5079, fallback4166
    nqp_get_sc_object $P5082, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5079, $P5082
  fallback4166:
    unless_null $P5079, vivi_14274167
    die "Contextual $*GLOBALish not found"
    box $P5083, "Contextual $*GLOBALish not found"
    set $P5079, $P5083
  vivi_14274167:
    set $P5078, $P5079
  fallback4165:
    $P5072."load_module"("QRegex", $P5078)
    find_dynamic_lex $P5086, "%*COMPILING"
    unless_null $P5086, fallback4170
    nqp_get_sc_object $P5089, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5088, $P5089
    set $P5087, $P5088["%COMPILING"]
    unless_null $P5087, fallback4171
    nqp_get_sc_object $P5091, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5090, $P5091
    new $P5092, 'Hash'
    set $P5090["%COMPILING"], $P5092
    set $P5087, $P5092
  fallback4171:
    unless_null $P5087, vivi_14294172
    die "Contextual %*COMPILING not found"
    box $P5093, "Contextual %*COMPILING not found"
    set $P5087, $P5093
  vivi_14294172:
    set $P5086, $P5087
  fallback4170:
    set $P5085, $P5086["%?OPTIONS"]
    unless_null $P5085, fallback4173
    nqp_get_sc_object $P5094, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5085, $P5094
  fallback4173:
    set $P5084, $P5085["old-regex-lib"]
    unless_null $P5084, fallback4174
    nqp_get_sc_object $P5095, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5084, $P5095
  fallback4174:
    set $P5109, $P5084
    if $P5084 goto unless1428_end4169 
.annotate 'line', 1799
.annotate 'line', 1800
    find_dynamic_lex $P5096, "$*W"
    unless_null $P5096, fallback4175
    nqp_get_sc_object $P5099, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$W"]
    unless_null $P5097, fallback4176
    nqp_get_sc_object $P5100, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5097, $P5100
  fallback4176:
    unless_null $P5097, vivi_14304177
    die "Contextual $*W not found"
    box $P5101, "Contextual $*W not found"
    set $P5097, $P5101
  vivi_14304177:
    set $P5096, $P5097
  fallback4175:
    find_dynamic_lex $P5102, "$*GLOBALish"
    unless_null $P5102, fallback4178
    nqp_get_sc_object $P5105, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5104, $P5105
    set $P5103, $P5104["$GLOBALish"]
    unless_null $P5103, fallback4179
    nqp_get_sc_object $P5106, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5103, $P5106
  fallback4179:
    unless_null $P5103, vivi_14314180
    die "Contextual $*GLOBALish not found"
    box $P5107, "Contextual $*GLOBALish not found"
    set $P5103, $P5107
  vivi_14314180:
    set $P5102, $P5103
  fallback4178:
    $P5108 = $P5096."load_module"("NQPP6QRegex", $P5102)
    set $P5109, $P5108
  unless1428_end4169:
    set $P5110, $P5109
  unless1424_end4156:
    set $P5111, $P5110
  unless1418_end4136:
    .return ($P5111) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_257_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1817
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1818
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_258_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1823
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1824
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4184
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4185
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback4185:
    unless_null $P5003, vivi_14334186
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14334186:
    set $P5002, $P5003
  fallback4184:
    unless_null _lex_param_1, fallback4187
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback4187:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4188
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback4188:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4189
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4190
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5015
  fallback4190:
    unless_null $P5012, vivi_14344191
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_14344191:
    set $P5011, $P5012
  fallback4189:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    unless $I5001 goto if1435_end4193 
.annotate 'line', 1825
    exists $I5002, $P101["EXPORT"]
    set $I5004, $I5002
    unless $I5002 goto if1437_end4197 
    set $P5019, $P101["EXPORT"]
    unless_null $P5019, fallback4198
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5020
  fallback4198:
    get_who $P5018, $P5019
    exists $I5003, $P5018["DEFAULT"]
    set $I5004, $I5003
  if1437_end4197:
    unless $I5004 goto if1436_end4195 
.annotate 'line', 1826
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4199
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4200
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5025
  fallback4200:
    unless_null $P5022, vivi_14384201
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_14384201:
    set $P5021, $P5022
  fallback4199:
    set $P5030, $P101["EXPORT"]
    unless_null $P5030, fallback4202
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5031
  fallback4202:
    get_who $P5029, $P5030
    set $P5028, $P5029["DEFAULT"]
    unless_null $P5028, fallback4203
    nqp_get_sc_object $P5032, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5032
  fallback4203:
    get_who $P5027, $P5028
    $P5033 = $P5021."import"($P5027)
  if1436_end4195:
.annotate 'line', 1829
    $P5034 = "&import_HOW_exports"($P101)
  if1435_end4193:
.annotate 'line', 1831
    nqp_get_sc_object $P5038, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Stmts"]
    unless_null $P5035, fallback4204
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5039
  fallback4204:
    $P5040 = $P5035."new"()
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_259_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1834
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_447_1356803026.47425' 
    capture_lex $P5030 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback4205
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback4205:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4206
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback4206:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1836
    unless_null _lex_param_1, fallback4207
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback4207:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4208
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback4208:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4209
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback4209:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4212
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5015
  fallback4212:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4213
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5016
  fallback4213:
    unless $P5014 goto if1439_end4211 
.annotate 'line', 1837
.annotate 'line', 1838
    unless_null _lex_param_1, fallback4214
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5019
  fallback4214:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4215
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5020
  fallback4215:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4216
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback4216:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
  if1439_end4211:
  while1440_test4217:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while1440_done4221 
  while1440_redo4219:
    .const 'Sub' $P5025 = 'cuid_447_1356803026.47425' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while1440_test4217 
  while1440_done4221:
.annotate 'line', 1847
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1356803026.47425") :anon :lex :outer("cuid_259_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1841
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1844
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4222
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5006
  fallback4222:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4223
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback4223:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4224
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5009
  fallback4224:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1845
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_260_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1850
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1851
    unless_null _lex_param_1, fallback4225
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback4225:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4226
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback4226:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1852
    $P101."op"("unless")
.annotate 'line', 1853
    $P5007 = _lex_param_1."!make"($P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_261_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1856
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1857
    unless_null _lex_param_1, fallback4227
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback4227:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4228
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback4228:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1858
    unless_null _lex_param_1, fallback4229
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback4229:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4230
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback4230:
    set $S5001, $P5007
    $P101."op"($S5001)
    find_dynamic_lex $P5010, "$*CONTROL_USED"
    unless_null $P5010, fallback4233
    nqp_get_sc_object $P5013, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$CONTROL_USED"]
    unless_null $P5011, fallback4234
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5014
  fallback4234:
    unless_null $P5011, vivi_14424235
    die "Contextual $*CONTROL_USED not found"
    box $P5015, "Contextual $*CONTROL_USED not found"
    set $P5011, $P5015
  vivi_14424235:
    set $P5010, $P5011
  fallback4233:
    if $P5010 goto unless1441_end4232 
.annotate 'line', 1859
.annotate 'line', 1860
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["IVal"]
    unless_null $P5016, fallback4236
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5020
  fallback4236:
    $P5021 = $P5016."new"(1 :named("value"), "nohandler" :named("named"))
    $P5022 = $P101."push"($P5021)
  unless1441_end4232:
.annotate 'line', 1862
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_262_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1865
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback4237
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback4237:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4238
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback4238:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4241
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback4241:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4242
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback4242:
    unless $P5007 goto if1443_else4239 
.annotate 'line', 1868
.annotate 'line', 1869
    unless_null _lex_param_1, fallback4243
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5011
  fallback4243:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4244
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback4244:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1870
    $P5015 = $P102."op"($P101)
    goto if1443_end4240
  if1443_else4239:
.annotate 'line', 1872
.annotate 'line', 1873
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4245
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5020
  fallback4245:
    unless_null _lex_param_1, fallback4246
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5022
  fallback4246:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4247
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5023
  fallback4247:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4248
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5026
  fallback4248:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4249
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5027
  fallback4249:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
  if1443_end4240:
    find_dynamic_lex $P5031, "$*CONTROL_USED"
    unless_null $P5031, fallback4252
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$CONTROL_USED"]
    unless_null $P5032, fallback4253
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5035
  fallback4253:
    unless_null $P5032, vivi_14454254
    die "Contextual $*CONTROL_USED not found"
    box $P5036, "Contextual $*CONTROL_USED not found"
    set $P5032, $P5036
  vivi_14454254:
    set $P5031, $P5032
  fallback4252:
    if $P5031 goto unless1444_end4251 
.annotate 'line', 1876
.annotate 'line', 1877
    nqp_get_sc_object $P5040, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["IVal"]
    unless_null $P5037, fallback4255
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5037, $P5041
  fallback4255:
    $P5042 = $P5037."new"(1 :named("value"), "nohandler" :named("named"))
    $P5043 = $P102."push"($P5042)
  unless1444_end4251:
.annotate 'line', 1879
    $P5044 = _lex_param_1."!make"($P102)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_263_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1882
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 1883
    unless_null _lex_param_1, fallback4256
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback4256:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4257
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback4257:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1884
    $P101."op"("for")
    set $P5007, $P101[1]
    unless_null $P5007, fallback4258
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5008
  fallback4258:
    set $P102, $P5007
.annotate 'line', 1886
    $P5009 = $P102."arity"()
    if $P5009 goto unless1446_end4260 
.annotate 'line', 1887
    set $P5010, $P102[0]
    unless_null $P5010, fallback4261
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5011
  fallback4261:
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4262
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback4262:
    $P5017 = $P5012."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5010."push"($P5017)
.annotate 'line', 1888
    $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1889
    $P5018 = $P102."arity"(1)
  unless1446_end4260:
.annotate 'line', 1891
    $P102."blocktype"("immediate")
    find_dynamic_lex $P5019, "$*CONTROL_USED"
    unless_null $P5019, fallback4265
    nqp_get_sc_object $P5022, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$CONTROL_USED"]
    unless_null $P5020, fallback4266
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5023
  fallback4266:
    unless_null $P5020, vivi_14484267
    die "Contextual $*CONTROL_USED not found"
    box $P5024, "Contextual $*CONTROL_USED not found"
    set $P5020, $P5024
  vivi_14484267:
    set $P5019, $P5020
  fallback4265:
    if $P5019 goto unless1447_end4264 
.annotate 'line', 1892
.annotate 'line', 1893
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["IVal"]
    unless_null $P5025, fallback4268
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback4268:
    $P5030 = $P5025."new"(1 :named("value"), "nohandler" :named("named"))
    $P5031 = $P101."push"($P5030)
  unless1447_end4264:
.annotate 'line', 1895
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_264_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1898
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1899
    unless_null _lex_param_1, fallback4269
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback4269:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4270
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback4270:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1900
    "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1901
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_265_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1904
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 1905
    unless_null _lex_param_1, fallback4271
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback4271:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4272
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback4272:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1906
    "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1907
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_266_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1941
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1942
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4273
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4274
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback4274:
    unless_null $P5002, vivi_14494275
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14494275:
    set $P5001, $P5002
  fallback4273:
    unless_null _lex_param_1, fallback4276
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback4276:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4277
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback4277:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_267_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1945
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1946
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4278
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4279
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback4279:
    unless_null $P5002, vivi_14504280
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14504280:
    set $P5001, $P5002
  fallback4278:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4281
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback4281:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4282
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback4282:
    $P5011 = $P5008."ast"()
    $P5007."push"($P5011)
.annotate 'line', 1947
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback4283
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback4283:
    $P5017 = $P5012."new"()
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_268_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1950
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4284
    .lex "RETURN", $P102
.annotate 'line', 1951
    unless_null _lex_param_1, fallback4286
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback4286:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4287
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback4287:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4290
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback4290:
    type_check $I5001, $P101, $P5006
    unless $I5001 goto if1451_end4289 
.annotate 'line', 1952
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4295
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5012
  fallback4295:
    set $P5015, $P5011
    unless $P5011 goto if1453_end4294 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4296
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5014
  fallback4296:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1453_end4294:
    unless $P5015 goto if1452_else4291 
.annotate 'line', 1953
.annotate 'line', 1954
    _lex_param_1."!make"($P101)
    find_lex $P5017, "RETURN"
    $P5018 = $P5017(1)
    set $P5020, $P5018
    goto if1452_end4292
  if1452_else4291:
.annotate 'line', 1957
.annotate 'line', 1958
    $P5019 = $P101."blocktype"("immediate")
    set $P5020, $P5019
  if1452_end4292:
  if1451_end4289:
.annotate 'line', 1961
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4297
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5025
  fallback4297:
.annotate 'line', 1965
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Stmts"]
    unless_null $P5026, fallback4298
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5030
  fallback4298:
.annotate 'line', 1966
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback4299
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5031, $P5035
  fallback4299:
.annotate 'line', 1968
    nqp_get_sc_object $P5039, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4300
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5040
  fallback4300:
    $P5041 = $P5036."new"("exception" :named("op"))
.annotate 'line', 1969
    nqp_get_sc_object $P5045, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback4301
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5046
  fallback4301:
    $P5047 = $P5042."new"("handled" :named("value"))
.annotate 'line', 1970
    nqp_get_sc_object $P5051, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["IVal"]
    unless_null $P5048, fallback4302
    nqp_get_sc_object $P5052, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5052
  fallback4302:
    $P5053 = $P5048."new"(1 :named("value"))
    $P5054 = $P5031."new"($P5041, $P5047, $P5053, "bindkey_i" :named("op"))
.annotate 'line', 1972
    $P5055 = "&default_for"("$")
    $P5056 = $P5026."new"($P5054, $P5055)
    $P5057 = $P5021."new"($P101, "CATCH", $P5056, "handle" :named("op"))
    $P5058 = _lex_param_1."!make"($P5057)
    goto lexotic_4285
  lexotic_4284:
    .get_results ($P5058)
  lexotic_4285:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_269_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1977
    unless_null _lex_param_1, fallback4305
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4305:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4306
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4306:
    unless $P5001 goto if1454_else4303 
.annotate 'line', 1978
    unless_null _lex_param_1, fallback4307
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback4307:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4308
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback4308:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1454_end4304
  if1454_else4303:
.annotate 'line', 1979
    unless_null _lex_param_1, fallback4309
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback4309:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4310
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback4310:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1454_end4304:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_270_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1984
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4311
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4311:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4312
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4312:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_271_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1985
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4313
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4313:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4314
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4314:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_272_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1987
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4315
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4315:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4316
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4316:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_273_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1988
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4317
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4317:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4318
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4318:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_274_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1992
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4319
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4319:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4320
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4320:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_275_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1993
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4321
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4321:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4322
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4322:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_276_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1994
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4323
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4323:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4324
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4324:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_277_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1995
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4325
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4325:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4326
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4326:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_278_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1996
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4327
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4327:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4328
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4328:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_279_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1997
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4329
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4329:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4330
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4330:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_280_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1998
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4331
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4331:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4332
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4332:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_281_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1999
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4333
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4333:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4334
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4334:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_282_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2000
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2001
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4335
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback4335:
    unless_null _lex_param_1, fallback4336
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback4336:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4337
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback4337:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_283_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2004
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2005
    unless_null _lex_param_1, fallback4338
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback4338:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4339
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback4339:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2006
    unless_null _lex_param_1, fallback4340
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback4340:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4341
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback4341:
    $P5009 = $P5006."Str"()
    $P101."named"($P5009)
.annotate 'line', 2007
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_284_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2010
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_448_1356803026.47425' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4344
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4344:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4345
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4345:
    unless $P5001 goto if1455_else4342 
.annotate 'line', 2011
.annotate 'line', 2012
    unless_null _lex_param_1, fallback4346
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback4346:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4347
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback4347:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4348
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback4348:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4349
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback4349:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4350
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5012
  fallback4350:
    set $S5001, $P5008
    $P5007."named"($S5001)
.annotate 'line', 2013
    unless_null _lex_param_1, fallback4351
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5014
  fallback4351:
    set $P5013, _lex_param_1["variable"]
    unless_null $P5013, fallback4352
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5015
  fallback4352:
    $P5016 = $P5013."ast"()
    $P5017 = _lex_param_1."!make"($P5016)
    set $P5020, $P5017
    goto if1455_end4343
  if1455_else4342:
    .const 'Sub' $P5018 = 'cuid_448_1356803026.47425' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1455_end4343:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1356803026.47425") :anon :lex :outer("cuid_284_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2014
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4355
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5004
  fallback4355:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4356
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback4356:
    unless $P5002 goto if1456_else4353 
.annotate 'line', 2016
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4357
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5009
  fallback4357:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4358
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5010
  fallback4358:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4359
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5011
  fallback4359:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1456_end4354
  if1456_else4353:
.annotate 'line', 2017
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4360
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5017
  fallback4360:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4361
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5020
  fallback4361:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4362
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5021
  fallback4362:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1456_end4354:
    set $P101, $P5023
.annotate 'line', 2018
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4363
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5026
  fallback4363:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4364
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5027
  fallback4364:
    set $S5001, $P5024
    $P101."named"($S5001)
.annotate 'line', 2019
    find_dynamic_lex $P5028, "$/"
    $P5029 = $P5028."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_285_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2023
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_450_1356803026.47425' 
    capture_lex $P5020 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback4367
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback4367:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4368
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback4368:
    unless $P5002 goto if1457_else4365 
.annotate 'line', 2025
.annotate 'line', 2026
    unless_null _lex_param_1, fallback4369
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5006
  fallback4369:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4370
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5007
  fallback4370:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 2027
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4371
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5013
  fallback4371:
.annotate 'line', 2028
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    goto if1457_end4366
  if1457_else4365:
    .const 'Sub' $P5017 = 'cuid_450_1356803026.47425' 
    capture_lex $P5017
    $P5018 = $P5017()
  if1457_end4366:
.annotate 'line', 2103
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1356803026.47425") :anon :lex :outer("cuid_285_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2031
    .const 'Sub' $P5058 = 'cuid_449_1356803026.47425' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_453_1356803026.47425' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_454_1356803026.47425' 
    capture_lex $P5058 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2032
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4372
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback4372:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1458_else4373 
.annotate 'line', 2033
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4377
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5011
  fallback4377:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4378
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5012
  fallback4378:
    unless $P5009 goto if1459_end4376 
.annotate 'line', 2034
.annotate 'line', 2035
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
  if1459_end4376:
.annotate 'line', 2037
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P101, $P5016)
    store_lex "$past", $P5017
    set $P5057, $P5017
    goto if1458_end4374
  if1458_else4373:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4381
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5021
  fallback4381:
    set $P5019, $P5020["twigil"]
    unless_null $P5019, fallback4382
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5022
  fallback4382:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4383
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5023
  fallback4383:
    set $S5002, $P5018
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1460_else4379 
    .const 'Sub' $P5024 = 'cuid_449_1356803026.47425' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5056, $P5025
    goto if1460_end4380
  if1460_else4379:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4394
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5029
  fallback4394:
    set $P5027, $P5028["twigil"]
    unless_null $P5027, fallback4395
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5030
  fallback4395:
    set $P5026, $P5027[0]
    unless_null $P5026, fallback4396
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5031
  fallback4396:
    set $S5003, $P5026
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1461_else4392 
    .const 'Sub' $P5032 = 'cuid_453_1356803026.47425' 
    capture_lex $P5032
    $P5033 = $P5032()
    set $P5055, $P5033
    goto if1461_end4393
  if1461_else4392:
.annotate 'line', 2088
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4436
    nqp_get_sc_object $P5037, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4437
    nqp_get_sc_object $P5038, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5038
  fallback4437:
    unless_null $P5035, vivi_14744438
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_14744438:
    set $P5034, $P5035
  fallback4436:
    set $P5040, $P101[0]
    unless_null $P5040, fallback4439
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5041
  fallback4439:
    set $S5004, $P5040
    $P5042 = $P5034."is_package"($S5004)
    unless $P5042 goto if1473_else4434 
.annotate 'line', 2089
    find_lex $P5043, "$/"
    $P5044 = "&lexical_package_lookup"($P101, $P5043)
    store_lex "$past", $P5044
.annotate 'line', 2090
    find_lex $P5045, "$past"
    find_lex $P5047, "$/"
    unless_null $P5047, fallback4440
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5047, $P5048
  fallback4440:
    set $P5046, $P5047["sigil"]
    unless_null $P5046, fallback4441
    nqp_get_sc_object $P5049, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5046, $P5049
  fallback4441:
    $P5050 = "&default_for"($P5046)
    $P5051 = $P5045."fallback"($P5050)
    set $P5054, $P5051
    goto if1473_end4435
  if1473_else4434:
    .const 'Sub' $P5052 = 'cuid_454_1356803026.47425' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1473_end4435:
    set $P5055, $P5054
  if1461_end4393:
    set $P5056, $P5055
  if1460_end4380:
    set $P5057, $P5056
  if1458_end4374:
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1356803026.47425") :anon :lex :outer("cuid_450_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2039
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2040
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4384
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback4384:
.annotate 'line', 2042
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4385
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5011
  fallback4385:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4386
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5012
  fallback4386:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4387
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5015
  fallback4387:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4388
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5016
  fallback4388:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 2043
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4389
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback4389:
.annotate 'line', 2045
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4390
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback4390:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 2047
    nqp_get_sc_object $P5037, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4391
    nqp_get_sc_object $P5038, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5034, $P5038
  fallback4391:
.annotate 'line', 2048
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1356803026.47425") :anon :lex :outer("cuid_450_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2052
    .const 'Sub' $P5064 = 'cuid_452_1356803026.47425' 
    capture_lex $P5064 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 2053
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4399
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4400
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5010
  fallback4400:
    unless_null $P5007, vivi_14634401
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_14634401:
    set $P5006, $P5007
  fallback4399:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1462_else4397 
.annotate 'line', 2055
.annotate 'line', 2056
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4402
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback4402:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2057
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4403
    nqp_get_sc_object $P5021, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4404
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5022
  fallback4404:
    unless_null $P5019, vivi_14644405
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_14644405:
    set $P5018, $P5019
  fallback4403:
    $P5024 = $P102."set_compile_time_value"($P5018)
    goto if1462_end4398
  if1462_else4397:
.annotate 'line', 2059
.annotate 'line', 2060
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4406
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback4406:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4407
    nqp_get_sc_object $P5033, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4408
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5031, $P5034
  fallback4408:
    unless_null $P5031, vivi_14654409
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_14654409:
    set $P5030, $P5031
  fallback4407:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
  if1462_end4398:
.annotate 'line', 2062
    nqp_get_sc_object $P5040, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Var"]
    unless_null $P5037, fallback4410
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5037, $P5041
  fallback4410:
.annotate 'line', 2064
    nqp_get_sc_object $P5045, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback4411
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5046
  fallback4411:
.annotate 'line', 2065
    nqp_get_sc_object $P5050, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Var"]
    unless_null $P5047, fallback4412
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5047, $P5051
  fallback4412:
    $P5052 = $P5047."new"("self" :named("name"), "lexical" :named("scope"))
    $P5053 = $P5042."new"($P5052, "nqp_decontainerize PP" :named("pirop"))
    $P5054 = $P5037."new"($P5053, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5054
    find_dynamic_lex $P5055, "$*IN_DECL"
    unless_null $P5055, fallback4415
    nqp_get_sc_object $P5058, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["$IN_DECL"]
    unless_null $P5056, fallback4416
    nqp_get_sc_object $P5059, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5056, $P5059
  fallback4416:
    unless_null $P5056, vivi_14674417
    die "Contextual $*IN_DECL not found"
    box $P5060, "Contextual $*IN_DECL not found"
    set $P5056, $P5060
  vivi_14674417:
    set $P5055, $P5056
  fallback4415:
    set $P5063, $P5055
    if $P5055 goto unless1466_end4414 
    .const 'Sub' $P5061 = 'cuid_452_1356803026.47425' 
    capture_lex $P5061
    $P5062 = $P5061()
    set $P5063, $P5062
  unless1466_end4414:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1356803026.47425") :anon :lex :outer("cuid_453_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2070
    .const 'Sub' $P5032 = 'cuid_451_1356803026.47425' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2072
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4418
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4419
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5010
  fallback4419:
    unless_null $P5007, vivi_14684420
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_14684420:
    set $P5006, $P5007
  fallback4418:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4421
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4422
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5016
  fallback4422:
    unless_null $P5013, vivi_14694423
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_14694423:
    set $P5012, $P5013
  fallback4421:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4426
    push_eh $P5020
  for_next4427:
    unless $P5004, for_done4429
    shift $P5021, $P5004
  for_redo4428:
    .const 'Sub' $P5019 = 'cuid_451_1356803026.47425' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4427
  for_handlers4426:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4427
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4428
  for_done4429:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1471_else4430 
.annotate 'line', 2078
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1472_end4433 
.annotate 'line', 2079
.annotate 'line', 2080
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1472_end4433:
    set $P5031, $P5025
    goto if1471_end4431
  if1471_else4430:
.annotate 'line', 2083
.annotate 'line', 2084
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1471_end4431:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1356803026.47425") :anon :lex :outer("cuid_452_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2072
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2073
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1470_end4425 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1470_end4425:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1356803026.47425") :anon :lex :outer("cuid_450_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2092
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2093
    find_lex $P5002, "@name"
    $P5003 = $P5002."pop"()
    set $S5001, $P5003
    box $P5004, $S5001
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*IN_DECL"
    unless_null $P5005, fallback4454
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$IN_DECL"]
    unless_null $P5006, fallback4455
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5009
  fallback4455:
    unless_null $P5006, vivi_14814456
    die "Contextual $*IN_DECL not found"
    box $P5010, "Contextual $*IN_DECL not found"
    set $P5006, $P5010
  vivi_14814456:
    set $P5005, $P5006
  fallback4454:
    set $S5002, $P5005
    iseq $I5001, $S5002, "variable"
    set $I5003, $I5001
    if $I5001 goto unless1480_end4453 
    set $S5003, $P101
    iseq $I5002, $S5003, "$_"
    set $I5003, $I5002
  unless1480_end4453:
    set $I5005, $I5003
    if $I5003 goto unless1479_end4451 
    set $S5004, $P101
    iseq $I5004, $S5004, "$/"
    set $I5005, $I5004
  unless1479_end4451:
    set $I5007, $I5005
    if $I5005 goto unless1478_end4449 
    set $S5005, $P101
    iseq $I5006, $S5005, "$!"
    set $I5007, $I5006
  unless1478_end4449:
    set $I5009, $I5007
    if $I5007 goto unless1477_end4447 
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4457
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5014
  fallback4457:
    set $P5012, $P5013["twigil"]
    unless_null $P5012, fallback4458
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5015
  fallback4458:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4459
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5016
  fallback4459:
    set $S5006, $P5011
    iseq $I5008, $S5006, "?"
    set $I5009, $I5008
  unless1477_end4447:
    box $P5025, $I5009
    set $P5024, $P5025
    if $I5009 goto unless1476_end4445 
.annotate 'line', 2095
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4460
    nqp_get_sc_object $P5020, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4461
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5021
  fallback4461:
    unless_null $P5018, vivi_14824462
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_14824462:
    set $P5017, $P5018
  fallback4460:
    $P5023 = $P5017."is_lexical"($P101)
    set $P5024, $P5023
  unless1476_end4445:
    unless $P5024 goto if1475_else4442 
.annotate 'line', 2096
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4463
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5030
  fallback4463:
    $P5031 = $P5026."new"($P101 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5031
    set $P5035, $P5031
    goto if1475_end4443
  if1475_else4442:
.annotate 'line', 2098
.annotate 'line', 2099
    find_lex $P5032, "$/"
    $P5033 = $P5032."CURSOR"()
    set $S5009, $P101
    concat $S5008, "Use of undeclared variable '", $S5009
    concat $S5007, $S5008, "'"
    $P5034 = $P5033."panic"($S5007)
    set $P5035, $P5034
  if1475_end4443:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_286_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2106
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4464
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4464:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4465
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4465:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_287_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2107
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4466
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4466:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4467
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4467:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_288_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2108
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4468
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4468:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4469
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4469:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_289_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2109
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4470
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4470:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4471
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4471:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_290_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2110
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4472
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4472:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4473
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4473:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_291_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2111
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4474
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4474:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4475
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4475:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_292_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2113
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 2116
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4476
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4477
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback4477:
    unless_null $P5004, vivi_14834478
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14834478:
    set $P5003, $P5004
  fallback4476:
    unless_null _lex_param_1, fallback4479
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5011
  fallback4479:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4480
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback4480:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4481
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5013
  fallback4481:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2117
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4482
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4483
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5019
  fallback4483:
    unless_null $P5016, vivi_14844484
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14844484:
    set $P5015, $P5016
  fallback4482:
    unless_null _lex_param_1, fallback4485
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5022
  fallback4485:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4486
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5023
  fallback4486:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4491
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4492
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5029
  fallback4492:
    unless_null $P5026, vivi_14874493
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_14874493:
    set $P5025, $P5026
  fallback4491:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1486_end4490 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4494
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4495
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5035
  fallback4495:
    unless_null $P5032, vivi_14884496
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_14884496:
    set $P5031, $P5032
  fallback4494:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1486_end4490:
    unless $I5003 goto if1485_else4487 
.annotate 'line', 2120
.annotate 'line', 2121
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4497
    nqp_get_sc_object $P5040, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4498
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5041
  fallback4498:
    unless_null $P5038, vivi_14894499
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_14894499:
    set $P5037, $P5038
  fallback4497:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4500
    nqp_get_sc_object $P5046, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4501
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5047
  fallback4501:
    unless_null $P5044, vivi_14904502
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_14904502:
    set $P5043, $P5044
  fallback4500:
    unless_null _lex_param_1, fallback4503
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5051
  fallback4503:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4504
    nqp_get_sc_object $P5052, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5050, $P5052
  fallback4504:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4505
    nqp_get_sc_object $P5053, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5049, $P5053
  fallback4505:
    $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4508
    nqp_get_sc_object $P5056, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5056
  fallback4508:
    set $P5055, _lex_param_1["name"]
    unless_null $P5055, fallback4509
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5057
  fallback4509:
    set $P5054, $P5055["identifier"]
    unless_null $P5054, fallback4510
    nqp_get_sc_object $P5058, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5054, $P5058
  fallback4510:
    set $N5001, $P5054
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5081, $I5004
    set $P5080, $P5081
    unless $I5004 goto if1491_end4507 
.annotate 'line', 2122
.annotate 'line', 2123
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback4511
    nqp_get_sc_object $P5062, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback4512
    nqp_get_sc_object $P5063, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5060, $P5063
  fallback4512:
    unless_null $P5060, vivi_14924513
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_14924513:
    set $P5059, $P5060
  fallback4511:
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4514
    nqp_get_sc_object $P5068, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4515
    nqp_get_sc_object $P5069, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5066, $P5069
  fallback4515:
    unless_null $P5066, vivi_14934516
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_14934516:
    set $P5065, $P5066
  fallback4514:
    $P5071 = $P5065."cur_lexpad"()
    unless_null _lex_param_1, fallback4517
    nqp_get_sc_object $P5075, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5075
  fallback4517:
    set $P5074, _lex_param_1["name"]
    unless_null $P5074, fallback4518
    nqp_get_sc_object $P5076, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5074, $P5076
  fallback4518:
    set $P5073, $P5074["identifier"]
    unless_null $P5073, fallback4519
    nqp_get_sc_object $P5077, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5073, $P5077
  fallback4519:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback4520
    nqp_get_sc_object $P5078, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5072, $P5078
  fallback4520:
    $P5079 = $P5059."install_lexical_symbol"($P5071, $P5072, $P102)
    set $P5080, $P5079
  if1491_end4507:
    goto if1485_end4488
  if1485_else4487:
    find_dynamic_lex $P5082, "$*SCOPE"
    unless_null $P5082, fallback4523
    nqp_get_sc_object $P5085, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$SCOPE"]
    unless_null $P5083, fallback4524
    nqp_get_sc_object $P5086, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5083, $P5086
  fallback4524:
    unless_null $P5083, vivi_14954525
    die "Contextual $*SCOPE not found"
    box $P5087, "Contextual $*SCOPE not found"
    set $P5083, $P5087
  vivi_14954525:
    set $P5082, $P5083
  fallback4523:
    set $S5004, $P5082
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1494_else4521 
.annotate 'line', 2126
    unless_null _lex_param_1, fallback4528
    nqp_get_sc_object $P5090, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5090
  fallback4528:
    set $P5089, _lex_param_1["name"]
    unless_null $P5089, fallback4529
    nqp_get_sc_object $P5091, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5089, $P5091
  fallback4529:
    set $P5088, $P5089["identifier"]
    unless_null $P5088, fallback4530
    nqp_get_sc_object $P5092, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5088, $P5092
  fallback4530:
    set $N5003, $P5088
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if1496_end4527 
.annotate 'line', 2127
.annotate 'line', 2128
    unless_null _lex_param_1, fallback4531
    nqp_get_sc_object $P5094, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5094
  fallback4531:
    set $P5093, _lex_param_1["name"]
    unless_null $P5093, fallback4532
    nqp_get_sc_object $P5095, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5093, $P5095
  fallback4532:
    $P5096 = $P5093."CURSOR"()
    $P5097 = $P5096."panic"("A my scoped package cannot have a multi-part name yet")
  if1496_end4527:
.annotate 'line', 2130
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4533
    nqp_get_sc_object $P5101, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4534
    nqp_get_sc_object $P5102, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5099, $P5102
  fallback4534:
    unless_null $P5099, vivi_14974535
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_14974535:
    set $P5098, $P5099
  fallback4533:
    find_dynamic_lex $P5104, "$*W"
    unless_null $P5104, fallback4536
    nqp_get_sc_object $P5107, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$W"]
    unless_null $P5105, fallback4537
    nqp_get_sc_object $P5108, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5105, $P5108
  fallback4537:
    unless_null $P5105, vivi_14984538
    die "Contextual $*W not found"
    box $P5109, "Contextual $*W not found"
    set $P5105, $P5109
  vivi_14984538:
    set $P5104, $P5105
  fallback4536:
    $P5110 = $P5104."cur_lexpad"()
    unless_null _lex_param_1, fallback4539
    nqp_get_sc_object $P5114, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5114
  fallback4539:
    set $P5113, _lex_param_1["name"]
    unless_null $P5113, fallback4540
    nqp_get_sc_object $P5115, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5113, $P5115
  fallback4540:
    set $P5112, $P5113["identifier"]
    unless_null $P5112, fallback4541
    nqp_get_sc_object $P5116, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5112, $P5116
  fallback4541:
    set $P5111, $P5112[0]
    unless_null $P5111, fallback4542
    nqp_get_sc_object $P5117, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5111, $P5117
  fallback4542:
    $P5118 = $P5098."install_lexical_symbol"($P5110, $P5111, $P102)
    set $P5127, $P5118
    goto if1494_end4522
  if1494_else4521:
.annotate 'line', 2132
.annotate 'line', 2133
    $P5119 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5120, "$*SCOPE"
    unless_null $P5120, fallback4543
    nqp_get_sc_object $P5123, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5122, $P5123
    set $P5121, $P5122["$SCOPE"]
    unless_null $P5121, fallback4544
    nqp_get_sc_object $P5124, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5121, $P5124
  fallback4544:
    unless_null $P5121, vivi_14994545
    die "Contextual $*SCOPE not found"
    box $P5125, "Contextual $*SCOPE not found"
    set $P5121, $P5125
  vivi_14994545:
    set $P5120, $P5121
  fallback4543:
    set $S5006, $P5120
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5126 = $P5119."panic"($S5005)
    set $P5127, $P5126
  if1494_end4522:
  if1485_end4488:
.annotate 'line', 2136
    nqp_get_sc_object $P5131, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["Stmts"]
    unless_null $P5128, fallback4546
    nqp_get_sc_object $P5132, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5128, $P5132
  fallback4546:
    $P5133 = $P5128."new"()
    $P5134 = _lex_param_1."!make"($P5133)
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_293_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2139
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5149 = 'cuid_456_1356803026.47425' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_457_1356803026.47425' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_458_1356803026.47425' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_459_1356803026.47425' 
    capture_lex $P5149 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    unless_null _lex_param_1, fallback4547
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback4547:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4548
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback4548:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4549
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback4549:
    clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2142
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4550
    nqp_get_sc_object $P5017, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4551
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4551:
    unless_null $P5015, vivi_15004552
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_15004552:
    set $P5014, $P5015
  fallback4550:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4553
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4554
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5026
  fallback4554:
    unless_null $P5023, vivi_15014555
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_15014555:
    set $P5022, $P5023
  fallback4553:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4556
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5028
  fallback4556:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4559
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5030
  fallback4559:
    set $P5029, _lex_param_1["blockoid"]
    unless_null $P5029, fallback4560
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5029, $P5031
  fallback4560:
    unless $P5029 goto if1502_else4557 
.annotate 'line', 2147
.annotate 'line', 2148
    unless_null _lex_param_1, fallback4561
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5033
  fallback4561:
    set $P5032, _lex_param_1["blockoid"]
    unless_null $P5032, fallback4562
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5034
  fallback4562:
    $P5035 = $P5032."ast"()
    set $P104, $P5035
    goto if1502_end4558
  if1502_else4557:
.annotate 'line', 2150
.annotate 'line', 2151
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4563
    nqp_get_sc_object $P5039, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4564
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5037, $P5040
  fallback4564:
    unless_null $P5037, vivi_15034565
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15034565:
    set $P5036, $P5037
  fallback4563:
    $P5042 = $P5036."pop_lexpad"()
    set $P104, $P5042
.annotate 'line', 2152
    unless_null _lex_param_1, fallback4566
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5044
  fallback4566:
    set $P5043, _lex_param_1["statementlist"]
    unless_null $P5043, fallback4567
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5043, $P5045
  fallback4567:
    $P5046 = $P5043."ast"()
    $P5047 = $P104."push"($P5046)
  if1502_end4558:
    can $I5001, $P103, "parametric"
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto if1505_end4571 
.annotate 'line', 2159
    $P5048 = $P103."parametric"($P103)
    set $P5049, $P5048
  if1505_end4571:
    unless $P5049 goto if1504_else4568 
    .const 'Sub' $P5051 = 'cuid_456_1356803026.47425' 
    capture_lex $P5051
    $P5052 = $P5051()
    goto if1504_end4569
  if1504_else4568:
.annotate 'line', 2176
.annotate 'line', 2177
    $P104."blocktype"("immediate")
.annotate 'line', 2178
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4604
    nqp_get_sc_object $P5056, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4605
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5054, $P5057
  fallback4605:
    unless_null $P5054, vivi_15134606
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_15134606:
    set $P5053, $P5054
  fallback4604:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4607
    nqp_get_sc_object $P5062, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4608
    nqp_get_sc_object $P5063, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5060, $P5063
  fallback4608:
    unless_null $P5060, vivi_15144609
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_15144609:
    set $P5059, $P5060
  fallback4607:
    $P5053."install_lexical_symbol"($P104, "$?PACKAGE", $P5059)
.annotate 'line', 2179
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4610
    nqp_get_sc_object $P5068, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4611
    nqp_get_sc_object $P5069, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5066, $P5069
  fallback4611:
    unless_null $P5066, vivi_15154612
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15154612:
    set $P5065, $P5066
  fallback4610:
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4613
    nqp_get_sc_object $P5074, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4614
    nqp_get_sc_object $P5075, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5072, $P5075
  fallback4614:
    unless_null $P5072, vivi_15164615
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_15164615:
    set $P5071, $P5072
  fallback4613:
    $P5077 = $P5065."install_lexical_symbol"($P104, "$?CLASS", $P5071)
  if1504_end4569:
    unless_null _lex_param_1, fallback4618
    nqp_get_sc_object $P5079, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5079
  fallback4618:
    set $P5078, _lex_param_1["parent"]
    unless_null $P5078, fallback4619
    nqp_get_sc_object $P5080, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5078, $P5080
  fallback4619:
    unless $P5078 goto if1517_else4616 
    .const 'Sub' $P5081 = 'cuid_457_1356803026.47425' 
    capture_lex $P5081
    $P5082 = $P5081()
    goto if1517_end4617
  if1517_else4616:
    can $I5002, $P103, "set_default_parent"
    box $P5086, $I5002
    set $P5085, $P5086
    unless $I5002 goto if1524_end4641 
    .const 'Sub' $P5083 = 'cuid_458_1356803026.47425' 
    capture_lex $P5083
    $P5084 = $P5083()
    set $P5085, $P5084
  if1524_end4641:
  if1517_end4617:
    unless_null _lex_param_1, fallback4658
    nqp_get_sc_object $P5088, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5088
  fallback4658:
    set $P5087, _lex_param_1["role"]
    unless_null $P5087, fallback4659
    nqp_get_sc_object $P5089, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5087, $P5089
  fallback4659:
    unless $P5087 goto if1530_end4657 
.annotate 'line', 2204
    unless_null _lex_param_1, fallback4660
    nqp_get_sc_object $P5094, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5094
  fallback4660:
    set $P5093, _lex_param_1["role"]
    unless_null $P5093, fallback4661
    nqp_get_sc_object $P5095, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5093, $P5095
  fallback4661:
    set $P5090, $P5093
    iter $P5092, $P5093
  for_next4676:
    unless $P5092, for_done4678
    shift $P5097, $P5092
  for_redo4677:
    .const 'Sub' $P5096 = 'cuid_459_1356803026.47425' 
    capture_lex $P5096
    $P5090 = $P5096($P5097)
    goto for_next4676
  for_done4678:
  if1530_end4657:
.annotate 'line', 2222
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4679
    nqp_get_sc_object $P5101, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4680
    nqp_get_sc_object $P5102, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5099, $P5102
  fallback4680:
    unless_null $P5099, vivi_15374681
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15374681:
    set $P5098, $P5099
  fallback4679:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback4682
    nqp_get_sc_object $P5107, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback4683
    nqp_get_sc_object $P5108, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5105, $P5108
  fallback4683:
    unless_null $P5105, vivi_15384684
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_15384684:
    set $P5104, $P5105
  fallback4682:
    $P5098."pkg_compose"($P5104)
    find_dynamic_lex $P5110, "$*PKGDECL"
    unless_null $P5110, fallback4689
    nqp_get_sc_object $P5113, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["$PKGDECL"]
    unless_null $P5111, fallback4690
    nqp_get_sc_object $P5114, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5111, $P5114
  fallback4690:
    unless_null $P5111, vivi_15414691
    die "Contextual $*PKGDECL not found"
    box $P5115, "Contextual $*PKGDECL not found"
    set $P5111, $P5115
  vivi_15414691:
    set $P5110, $P5111
  fallback4689:
    set $S5003, $P5110
    iseq $I5003, $S5003, "grammar"
    set $I5005, $I5003
    unless $I5003 goto if1540_end4688 
    find_dynamic_lex $P5116, "$*PACKAGE"
    unless_null $P5116, fallback4692
    nqp_get_sc_object $P5119, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5118, $P5119
    set $P5117, $P5118["$PACKAGE"]
    unless_null $P5117, fallback4693
    nqp_get_sc_object $P5120, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5117, $P5120
  fallback4693:
    unless_null $P5117, vivi_15424694
    die "Contextual $*PACKAGE not found"
    box $P5121, "Contextual $*PACKAGE not found"
    set $P5117, $P5121
  vivi_15424694:
    set $P5116, $P5117
  fallback4692:
    can $I5004, $P5116, "!precompute_nfas"
    set $I5005, $I5004
  if1540_end4688:
    unless $I5005 goto if1539_end4686 
.annotate 'line', 2225
.annotate 'line', 2226
    find_dynamic_lex $P5122, "$*PACKAGE"
    unless_null $P5122, fallback4695
    nqp_get_sc_object $P5125, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5124, $P5125
    set $P5123, $P5124["$PACKAGE"]
    unless_null $P5123, fallback4696
    nqp_get_sc_object $P5126, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5123, $P5126
  fallback4696:
    unless_null $P5123, vivi_15434697
    die "Contextual $*PACKAGE not found"
    box $P5127, "Contextual $*PACKAGE not found"
    set $P5123, $P5127
  vivi_15434697:
    set $P5122, $P5123
  fallback4695:
    $P5128 = $P5122."!precompute_nfas"()
  if1539_end4686:
    unless_null _lex_param_1, fallback4700
    nqp_get_sc_object $P5130, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5130
  fallback4700:
    set $P5129, _lex_param_1["export"]
    unless_null $P5129, fallback4701
    nqp_get_sc_object $P5131, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5129, $P5131
  fallback4701:
    unless $P5129 goto if1544_end4699 
.annotate 'line', 2230
    find_dynamic_lex $P5135, "$*EXPORT"
    unless_null $P5135, fallback4702
    nqp_get_sc_object $P5138, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5137, $P5138
    set $P5136, $P5137["$EXPORT"]
    unless_null $P5136, fallback4703
    nqp_get_sc_object $P5139, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5136, $P5139
  fallback4703:
    unless_null $P5136, vivi_15454704
    die "Contextual $*EXPORT not found"
    box $P5140, "Contextual $*EXPORT not found"
    set $P5136, $P5140
  vivi_15454704:
    set $P5135, $P5136
  fallback4702:
    get_who $P5134, $P5135
    set $P5133, $P5134["DEFAULT"]
    unless_null $P5133, fallback4705
    nqp_get_sc_object $P5141, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5133, $P5141
  fallback4705:
    get_who $P5132, $P5133
    set $S5004, $P102
    find_dynamic_lex $P5142, "$*PACKAGE"
    unless_null $P5142, fallback4706
    nqp_get_sc_object $P5145, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$PACKAGE"]
    unless_null $P5143, fallback4707
    nqp_get_sc_object $P5146, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5143, $P5146
  fallback4707:
    unless_null $P5143, vivi_15464708
    die "Contextual $*PACKAGE not found"
    box $P5147, "Contextual $*PACKAGE not found"
    set $P5143, $P5147
  vivi_15464708:
    set $P5142, $P5143
  fallback4706:
    set $P5132[$S5004], $P5142
  if1544_end4699:
.annotate 'line', 2234
    $P5148 = _lex_param_1."!make"($P104)
    .return ($P5148) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1356803026.47425") :anon :lex :outer("cuid_293_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2159
    .const 'Sub' $P5081 = 'cuid_455_1356803026.47425' 
    capture_lex $P5081 
    .lex "$params", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2160
    find_lex $P5002, "$past"
    $P5002."blocktype"("declaration")
.annotate 'line', 2161
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Stmts"]
    unless_null $P5003, fallback4572
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5007
  fallback4572:
.annotate 'line', 2162
    nqp_get_sc_object $P5011, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Var"]
    unless_null $P5008, fallback4573
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5012
  fallback4573:
    $P5013 = $P5008."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4576
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5017
  fallback4576:
    set $P5015, $P5016["role_params"]
    unless_null $P5015, fallback4577
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5018
  fallback4577:
    unless $P5015 goto if1506_end4575 
.annotate 'line', 2164
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4578
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5026
  fallback4578:
    set $P5024, $P5025["role_params"]
    unless_null $P5024, fallback4579
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5027
  fallback4579:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback4580
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5028
  fallback4580:
    set $P5022, $P5023["variable"]
    unless_null $P5022, fallback4581
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5029
  fallback4581:
    set $P5019, $P5022
    iter $P5021, $P5022
  for_next4582:
    unless $P5021, for_done4584
    shift $P5031, $P5021
  for_redo4583:
    .const 'Sub' $P5030 = 'cuid_455_1356803026.47425' 
    capture_lex $P5030
    $P5019 = $P5030($P5031)
    goto for_next4582
  for_done4584:
  if1506_end4575:
.annotate 'line', 2169
    find_lex $P5032, "$past"
    $P5032."unshift"($P101)
.annotate 'line', 2170
    find_lex $P5033, "$past"
    nqp_get_sc_object $P5037, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4585
    nqp_get_sc_object $P5038, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5034, $P5038
  fallback4585:
    $P5039 = $P5034."new"("curlexpad" :named("op"))
    $P5033."push"($P5039)
.annotate 'line', 2171
    find_lex $P5040, "$past"
    $P5040."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2172
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback4586
    nqp_get_sc_object $P5044, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback4587
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5045
  fallback4587:
    unless_null $P5042, vivi_15074588
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_15074588:
    set $P5041, $P5042
  fallback4586:
    find_dynamic_lex $P5047, "$*PACKAGE"
    unless_null $P5047, fallback4589
    nqp_get_sc_object $P5050, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$PACKAGE"]
    unless_null $P5048, fallback4590
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5051
  fallback4590:
    unless_null $P5048, vivi_15084591
    die "Contextual $*PACKAGE not found"
    box $P5052, "Contextual $*PACKAGE not found"
    set $P5048, $P5052
  vivi_15084591:
    set $P5047, $P5048
  fallback4589:
    find_lex $P5053, "$past"
    $P5041."pkg_set_body_block"($P5047, $P5053)
.annotate 'line', 2173
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4592
    nqp_get_sc_object $P5057, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4593
    nqp_get_sc_object $P5058, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5058
  fallback4593:
    unless_null $P5055, vivi_15094594
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15094594:
    set $P5054, $P5055
  fallback4592:
    find_lex $P5060, "$past"
    find_dynamic_lex $P5061, "$*PACKAGE"
    unless_null $P5061, fallback4595
    nqp_get_sc_object $P5064, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$PACKAGE"]
    unless_null $P5062, fallback4596
    nqp_get_sc_object $P5065, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5062, $P5065
  fallback4596:
    unless_null $P5062, vivi_15104597
    die "Contextual $*PACKAGE not found"
    box $P5066, "Contextual $*PACKAGE not found"
    set $P5062, $P5066
  vivi_15104597:
    set $P5061, $P5062
  fallback4595:
    $P5054."install_lexical_symbol"($P5060, "$?PACKAGE", $P5061)
.annotate 'line', 2174
    find_dynamic_lex $P5067, "$*W"
    unless_null $P5067, fallback4598
    nqp_get_sc_object $P5070, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["$W"]
    unless_null $P5068, fallback4599
    nqp_get_sc_object $P5071, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5068, $P5071
  fallback4599:
    unless_null $P5068, vivi_15114600
    die "Contextual $*W not found"
    box $P5072, "Contextual $*W not found"
    set $P5068, $P5072
  vivi_15114600:
    set $P5067, $P5068
  fallback4598:
    find_lex $P5073, "$past"
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback4601
    nqp_get_sc_object $P5077, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback4602
    nqp_get_sc_object $P5078, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5075, $P5078
  fallback4602:
    unless_null $P5075, vivi_15124603
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_15124603:
    set $P5074, $P5075
  fallback4601:
    $P5080 = $P5067."install_lexical_symbol"($P5073, "$?ROLE", $P5074)
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1356803026.47425") :anon :lex :outer("cuid_456_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2165
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2166
    find_lex $P5001, "$params"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1356803026.47425") :anon :lex :outer("cuid_293_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2183
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_15204628
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2186
.annotate 'line', 2187
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4620
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4621
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback4621:
    unless_null $P5004, vivi_15184622
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15184622:
    set $P5003, $P5004
  fallback4620:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4623
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5014
  fallback4623:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4624
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5015
  fallback4624:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4625
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5016
  fallback4625:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4626
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5017
  fallback4626:
    clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_15194627
  catch_handler_15204628:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_15194627
  skip_handler_15194627:
    unless $P102 goto if1521_else4629 
.annotate 'line', 2190
.annotate 'line', 2191
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4631
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4632
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5026
  fallback4632:
    unless_null $P5023, vivi_15224633
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_15224633:
    set $P5022, $P5023
  fallback4631:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4634
    nqp_get_sc_object $P5031, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4635
    nqp_get_sc_object $P5032, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5029, $P5032
  fallback4635:
    unless_null $P5029, vivi_15234636
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_15234636:
    set $P5028, $P5029
  fallback4634:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1521_end4630
  if1521_else4629:
.annotate 'line', 2193
.annotate 'line', 2194
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4637
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5040
  fallback4637:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4638
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5041
  fallback4638:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4639
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5037, $P5042
  fallback4639:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1521_end4630:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1356803026.47425") :anon :lex :outer("cuid_293_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2197
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4644
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4645
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback4645:
    unless_null $P5003, vivi_15264646
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_15264646:
    set $P5002, $P5003
  fallback4644:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1525_else4642 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1525_end4643
  if1525_else4642:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1525_end4643:
    set $P101, $P5012
.annotate 'line', 2199
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4647
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4648
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5017
  fallback4648:
    unless_null $P5014, vivi_15274649
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15274649:
    set $P5013, $P5014
  fallback4647:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4650
    nqp_get_sc_object $P5022, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4651
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5023
  fallback4651:
    unless_null $P5020, vivi_15284652
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_15284652:
    set $P5019, $P5020
  fallback4650:
.annotate 'line', 2200
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4653
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4654
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5029
  fallback4654:
    unless_null $P5026, vivi_15294655
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_15294655:
    set $P5025, $P5026
  fallback4653:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1356803026.47425") :anon :lex :outer("cuid_293_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2205
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_15334667
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2208
.annotate 'line', 2209
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4662
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4663
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback4663:
    unless_null $P5004, vivi_15314664
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15314664:
    set $P5003, $P5004
  fallback4662:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4665
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5011
  fallback4665:
    clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_15324666
  catch_handler_15334667:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_15324666
  skip_handler_15324666:
    unless $P102 goto if1534_else4668 
.annotate 'line', 2212
.annotate 'line', 2213
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4670
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4671
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5020
  fallback4671:
    unless_null $P5017, vivi_15354672
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_15354672:
    set $P5016, $P5017
  fallback4670:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4673
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4674
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5026
  fallback4674:
    unless_null $P5023, vivi_15364675
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15364675:
    set $P5022, $P5023
  fallback4673:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1534_end4669
  if1534_else4668:
.annotate 'line', 2215
.annotate 'line', 2216
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1534_end4669:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_294_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2237
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_460_1356803026.47425' 
    capture_lex $P5009 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4709
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback4709:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4710
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback4710:
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next4714:
    unless $P5003, for_done4716
    shift $P5008, $P5003
  for_redo4715:
    .const 'Sub' $P5007 = 'cuid_460_1356803026.47425' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next4714
  for_done4716:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1356803026.47425") :anon :lex :outer("cuid_294_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2238
    .param pmc _lex_param_0 
    .lex "$var", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2239
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
.annotate 'line', 2240
    $P101."scope"("lexical")
.annotate 'line', 2241
    $P101."decl"("param")
.annotate 'line', 2242
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4711
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4712
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback4712:
    unless_null $P5004, vivi_15474713
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15474713:
    set $P5003, $P5004
  fallback4711:
    $P5009 = $P5003."cur_lexpad"()
    $P5010 = $P101."name"()
    $P5011 = $P5009."symbol"($P5010, "lexical" :named("scope"))
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_295_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2246
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4717
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4717:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4718
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4718:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_296_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2247
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4719
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4719:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4720
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4720:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_297_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2248
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4721
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4721:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4722
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4722:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_298_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2250
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2251
    unless_null _lex_param_1, fallback4725
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4725:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4726
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4726:
    unless $P5001 goto if1548_else4723 
    unless_null _lex_param_1, fallback4727
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback4727:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4728
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback4728:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1548_end4724
  if1548_else4723:
    unless_null _lex_param_1, fallback4731
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback4731:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4732
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback4732:
    unless $P5008 goto if1549_else4729 
.annotate 'line', 2252
    unless_null _lex_param_1, fallback4733
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5012
  fallback4733:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4734
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5013
  fallback4734:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1549_end4730
  if1549_else4729:
.annotate 'line', 2253
    unless_null _lex_param_1, fallback4735
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5016
  fallback4735:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4736
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5017
  fallback4736:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1549_end4730:
    set $P5020, $P5019
  if1548_end4724:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_299_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2256
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2257
    unless_null _lex_param_1, fallback4739
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4739:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4740
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4740:
    unless $P5001 goto if1550_else4737 
.annotate 'line', 2258
    unless_null _lex_param_1, fallback4741
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback4741:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4742
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback4742:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1550_end4738
  if1550_else4737:
.annotate 'line', 2259
    unless_null _lex_param_1, fallback4743
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback4743:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4744
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback4744:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1550_end4738:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_300_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2262
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4747
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4747:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4748
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4748:
    unless $P5001 goto if1551_else4745 
    unless_null _lex_param_1, fallback4749
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback4749:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4750
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback4750:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1551_end4746
  if1551_else4745:
    unless_null _lex_param_1, fallback4751
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback4751:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4752
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback4752:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1551_end4746:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_301_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2263
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4755
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4755:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4756
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4756:
    unless $P5001 goto if1552_else4753 
    unless_null _lex_param_1, fallback4757
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback4757:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4758
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback4758:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1552_end4754
  if1552_else4753:
    unless_null _lex_param_1, fallback4759
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback4759:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4760
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback4760:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1552_end4754:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_302_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2264
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4761
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4761:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4762
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4762:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_303_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2267
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5067 = 'cuid_461_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_463_1356803026.47425' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_464_1356803026.47425' 
    capture_lex $P5067 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
.annotate 'line', 2268
    unless_null _lex_param_1, fallback4763
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5006
  fallback4763:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4764
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5007
  fallback4764:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4765
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5011
  fallback4765:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4766
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback4766:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4767
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5013
  fallback4767:
    set $P102, $P5009
.annotate 'line', 2270
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2271
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4768
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4769
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5019
  fallback4769:
    unless_null $P5016, vivi_15534770
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_15534770:
    set $P5015, $P5016
  fallback4768:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1555_end4774 
.annotate 'line', 2272
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1555_end4774:
    unless $P5023 goto if1554_end4772 
.annotate 'line', 2273
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
  if1554_end4772:
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4777
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4778
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5030
  fallback4778:
    unless_null $P5027, vivi_15574779
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_15574779:
    set $P5026, $P5027
  fallback4777:
    set $S5001, $P5026
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1556_else4775 
    .const 'Sub' $P5032 = 'cuid_461_1356803026.47425' 
    capture_lex $P5032
    $P5033 = $P5032()
    goto if1556_end4776
  if1556_else4775:
    find_dynamic_lex $P5034, "$*SCOPE"
    unless_null $P5034, fallback4831
    nqp_get_sc_object $P5037, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$SCOPE"]
    unless_null $P5035, fallback4832
    nqp_get_sc_object $P5038, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5038
  fallback4832:
    unless_null $P5035, vivi_15754833
    die "Contextual $*SCOPE not found"
    box $P5039, "Contextual $*SCOPE not found"
    set $P5035, $P5039
  vivi_15754833:
    set $P5034, $P5035
  fallback4831:
    set $S5002, $P5034
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1574_else4829 
.annotate 'line', 2303
    unless_null _lex_param_1, fallback4836
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5041
  fallback4836:
    set $P5040, _lex_param_1["typename"]
    unless_null $P5040, fallback4837
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5042
  fallback4837:
    unless $P5040 goto if1576_end4835 
.annotate 'line', 2307
.annotate 'line', 2308
    $P5043 = _lex_param_1."CURSOR"()
    $P5044 = $P5043."panic"("Cannot put types on our-scoped variables")
  if1576_end4835:
    unless_null _lex_param_1, fallback4838
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5046
  fallback4838:
    set $P5045, _lex_param_1["variable"]
    unless_null $P5045, fallback4839
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5045, $P5047
  fallback4839:
    set $S5003, $P5045
    box $P5048, $S5003
    set $P103, $P5048
.annotate 'line', 2311
    new $P5049, 'ResizablePMCArray'
    push $P5049, $P103
    $P5050 = "&lexical_package_lookup"($P5049, _lex_param_1)
    set $P101, $P5050
.annotate 'line', 2312
    $P5051 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5054, $P5051
    goto if1574_end4830
  if1574_else4829:
    .const 'Sub' $P5052 = 'cuid_463_1356803026.47425' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1574_end4830:
  if1556_end4776:
    unless_null _lex_param_1, fallback4859
    nqp_get_sc_object $P5056, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5056
  fallback4859:
    set $P5055, _lex_param_1["trait"]
    unless_null $P5055, fallback4860
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5057
  fallback4860:
    unless $P5055 goto if1581_end4858 
.annotate 'line', 2341
    unless_null _lex_param_1, fallback4861
    nqp_get_sc_object $P5062, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5062
  fallback4861:
    set $P5061, _lex_param_1["trait"]
    unless_null $P5061, fallback4862
    nqp_get_sc_object $P5063, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5061, $P5063
  fallback4862:
    set $P5058, $P5061
    iter $P5060, $P5061
  for_next4863:
    unless $P5060, for_done4865
    shift $P5065, $P5060
  for_redo4864:
    .const 'Sub' $P5064 = 'cuid_464_1356803026.47425' 
    capture_lex $P5064
    $P5058 = $P5064($P5065)
    goto for_next4863
  for_done4865:
  if1581_end4858:
.annotate 'line', 2345
    $P5066 = _lex_param_1."!make"($P101)
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1356803026.47425") :anon :lex :outer("cuid_303_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2275
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4782
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4783
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4783:
    unless_null $P5004, vivi_15594784
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_15594784:
    set $P5003, $P5004
  fallback4782:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4785
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4786
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5015
  fallback4786:
    unless_null $P5012, vivi_15604787
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_15604787:
    set $P5011, $P5012
  fallback4785:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    if $I5001 goto unless1558_end4781 
.annotate 'line', 2277
.annotate 'line', 2278
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4788
    nqp_get_sc_object $P5022, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4789
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5023
  fallback4789:
    unless_null $P5020, vivi_15614790
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_15614790:
    set $P5019, $P5020
  fallback4788:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
  unless1558_end4781:
    find_lex $P5026, "$name"
    set $P101["name"], $P5026
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4793
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5029
  fallback4793:
    set $P5027, $P5028["typename"]
    unless_null $P5027, fallback4794
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5030
  fallback4794:
    unless $P5027 goto if1562_end4792 
.annotate 'line', 2285
.annotate 'line', 2286
    find_dynamic_lex $P5031, "$*W"
    unless_null $P5031, fallback4795
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$W"]
    unless_null $P5032, fallback4796
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5035
  fallback4796:
    unless_null $P5032, vivi_15634797
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5032, $P5036
  vivi_15634797:
    set $P5031, $P5032
  fallback4795:
    new $P5037, 'ResizablePMCArray'
    find_lex $P5040, "$/"
    unless_null $P5040, fallback4798
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5041
  fallback4798:
    set $P5039, $P5040["typename"]
    unless_null $P5039, fallback4799
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5042
  fallback4799:
    set $P5038, $P5039[0]
    unless_null $P5038, fallback4800
    nqp_get_sc_object $P5043, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5043
  fallback4800:
    set $S5005, $P5038
    box $P5044, $S5005
    push $P5037, $P5044
    $P5045 = $P5031."find_sym"($P5037)
    set $P102["type"], $P5045
  if1562_end4792:
    find_lex $P5046, "$sigil"
    set $S5006, $P5046
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1565_end4804 
    find_lex $P5047, "$sigil"
    set $S5007, $P5047
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1565_end4804:
    unless $I5004 goto if1564_end4802 
.annotate 'line', 2288
    find_lex $P5049, "$/"
    unless_null $P5049, fallback4807
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5049, $P5050
  fallback4807:
    set $P5048, $P5049["typename"]
    unless_null $P5048, fallback4808
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5051
  fallback4808:
    unless $P5048 goto if1566_else4805 
.annotate 'line', 2289
    set $P5052, $P102["type"]
    unless_null $P5052, fallback4809
    nqp_get_sc_object $P5053, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5052, $P5053
  fallback4809:
    set $P102["default"], $P5052
    set $P5065, $P5052
    goto if1566_end4806
  if1566_else4805:
.annotate 'line', 2292
    new $P5063, 'ExceptionHandler'
    set_label $P5063, catch_handler_15694814
    $P5063.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5063
.annotate 'line', 2293
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4810
    nqp_get_sc_object $P5057, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4811
    nqp_get_sc_object $P5058, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5058
  fallback4811:
    unless_null $P5055, vivi_15674812
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15674812:
    set $P5054, $P5055
  fallback4810:
    new $P5060, 'ResizablePMCArray'
    box $P5061, "NQPMu"
    push $P5060, $P5061
    $P5062 = $P5054."find_sym"($P5060)
    set $P102["default"], $P5062
    set $P5064, $P5062
    pop_eh 
    goto skip_handler_15684813
  catch_handler_15694814:
    .get_results ($P5063) 
    set $I10001, 1
    set $P5063["handled"], $I10001
    nqp_get_sc_object $P10001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5063
    pop_upto_eh $P5063
    pop_eh 
    set $P5064, $P10001
    goto skip_handler_15684813
  skip_handler_15684813:
    set $P5065, $P5064
  if1566_end4806:
  if1564_end4802:
.annotate 'line', 2298
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4815
    nqp_get_sc_object $P5069, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4816
    nqp_get_sc_object $P5070, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5067, $P5070
  fallback4816:
    unless_null $P5067, vivi_15704817
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_15704817:
    set $P5066, $P5067
  fallback4815:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4818
    nqp_get_sc_object $P5075, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4819
    nqp_get_sc_object $P5076, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5073, $P5076
  fallback4819:
    unless_null $P5073, vivi_15714820
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_15714820:
    set $P5072, $P5073
  fallback4818:
    find_dynamic_lex $P5079, "%*HOW"
    unless_null $P5079, fallback4821
    nqp_get_sc_object $P5082, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["%HOW"]
    unless_null $P5080, fallback4822
    nqp_get_sc_object $P5084, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5083, $P5084
    new $P5085, 'Hash'
    set $P5083["%HOW"], $P5085
    set $P5080, $P5085
  fallback4822:
    unless_null $P5080, vivi_15724823
    die "Contextual %*HOW not found"
    box $P5086, "Contextual %*HOW not found"
    set $P5080, $P5086
  vivi_15724823:
    set $P5079, $P5080
  fallback4821:
    find_dynamic_lex $P5087, "$*PKGDECL"
    unless_null $P5087, fallback4824
    nqp_get_sc_object $P5090, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$PKGDECL"]
    unless_null $P5088, fallback4825
    nqp_get_sc_object $P5091, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5088, $P5091
  fallback4825:
    unless_null $P5088, vivi_15734826
    die "Contextual $*PKGDECL not found"
    box $P5092, "Contextual $*PKGDECL not found"
    set $P5088, $P5092
  vivi_15734826:
    set $P5087, $P5088
  fallback4824:
    set $S5009, $P5087
    concat $S5008, $S5009, "-attr"
    set $P5078, $P5079[$S5008]
    unless_null $P5078, fallback4827
    nqp_get_sc_object $P5093, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5078, $P5093
  fallback4827:
    $P5066."pkg_add_attribute"($P5072, $P5078, $P101, $P102)
.annotate 'line', 2301
    nqp_get_sc_object $P5097, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5096, $P5097, "QAST"
    get_who $P5095, $P5096
    set $P5094, $P5095["Stmts"]
    unless_null $P5094, fallback4828
    nqp_get_sc_object $P5098, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5094, $P5098
  fallback4828:
    $P5099 = $P5094."new"()
    store_lex "$past", $P5099
    .return ($P5099) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1356803026.47425") :anon :lex :outer("cuid_303_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2314
    .const 'Sub' $P5054 = 'cuid_462_1356803026.47425' 
    capture_lex $P5054 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4842
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5005
  fallback4842:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4843
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback4843:
    unless $P5003 goto if1577_else4840 
.annotate 'line', 2317
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    if $I5001 goto unless1578_end4845 
.annotate 'line', 2318
.annotate 'line', 2319
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
  unless1578_end4845:
.annotate 'line', 2321
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback4846
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$W"]
    unless_null $P5012, fallback4847
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5015
  fallback4847:
    unless_null $P5012, vivi_15794848
    die "Contextual $*W not found"
    box $P5016, "Contextual $*W not found"
    set $P5012, $P5016
  vivi_15794848:
    set $P5011, $P5012
  fallback4846:
    new $P5017, 'ResizablePMCArray'
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4849
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5021
  fallback4849:
    set $P5019, $P5020["typename"]
    unless_null $P5019, fallback4850
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5022
  fallback4850:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4851
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5023
  fallback4851:
    set $S5002, $P5018
    box $P5024, $S5002
    push $P5017, $P5024
    $P5025 = $P5011."find_sym"($P5017)
    set $P101, $P5025
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1580_else4852 
    .const 'Sub' $P5026 = 'cuid_462_1356803026.47425' 
    capture_lex $P5026
    $P5027 = $P5026($I5002)
    set $P5031, $P5027
    goto if1580_end4853
  if1580_else4852:
.annotate 'line', 2325
.annotate 'line', 2326
    find_lex $P5028, "$/"
    $P5029 = $P5028."CURSOR"()
    $P5030 = $P5029."panic"("Only native types are currently supported/checked")
    set $P5031, $P5030
  if1580_end4853:
    goto if1577_end4841
  if1577_else4840:
.annotate 'line', 2329
.annotate 'line', 2330
    find_lex $P5032, "$sigil"
    $P5033 = "&default_for"($P5032)
    set $P102, $P5033
  if1577_end4841:
.annotate 'line', 2332
    find_lex $P5035, "$BLOCK"
    set $P5034, $P5035[0]
    unless_null $P5034, fallback4854
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5034, $P5036
  fallback4854:
    nqp_get_sc_object $P5040, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback4855
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5037, $P5041
  fallback4855:
    find_lex $P5042, "$/"
.annotate 'line', 2334
    nqp_get_sc_object $P5046, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback4856
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5043, $P5047
  fallback4856:
    find_lex $P5048, "$name"
    $P5049 = $P5043."new"($P5048 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5050 = $P5037."new"($P5049, $P102, "bind" :named("op"), $P5042 :named("node"))
    $P5034."push"($P5050)
.annotate 'line', 2337
    find_lex $P5051, "$BLOCK"
    find_lex $P5052, "$name"
    $P5053 = $P5051."symbol"($P5052, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1356803026.47425") :anon :lex :outer("cuid_463_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2322
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2323
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1356803026.47425") :anon :lex :outer("cuid_303_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2342
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_304_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2348
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4866
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4866:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4867
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4867:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_305_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2349
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4868
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback4868:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4869
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback4869:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_306_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2351
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5060 = 'cuid_468_1356803026.47425' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_471_1356803026.47425' 
    capture_lex $P5060 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback4872
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback4872:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4873
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback4873:
    unless $P5004 goto if1582_else4870 
.annotate 'line', 2355
.annotate 'line', 2356
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1582_end4871
  if1582_else4870:
.annotate 'line', 2358
.annotate 'line', 2359
    unless_null _lex_param_1, fallback4874
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback4874:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4875
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback4875:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2360
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4878
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4879
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5016
  fallback4879:
    unless_null $P5013, vivi_15844880
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15844880:
    set $P5012, $P5013
  fallback4878:
    set $P5021, $P5012
    unless $P5012 goto if1583_end4877 
.annotate 'line', 2361
.annotate 'line', 2362
    set $P5018, $P101[1]
    unless_null $P5018, fallback4881
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5019
  fallback4881:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1583_end4877:
  if1582_end4871:
    set $P102, $P101
    unless_null _lex_param_1, fallback4884
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5023
  fallback4884:
    set $P5022, _lex_param_1["deflongname"]
    unless_null $P5022, fallback4885
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5024
  fallback4885:
    unless $P5022 goto if1585_else4882 
    .const 'Sub' $P5025 = 'cuid_468_1356803026.47425' 
    capture_lex $P5025
    $P5026 = $P5025()
    goto if1585_end4883
  if1585_else4882:
.annotate 'line', 2459
.annotate 'line', 2460
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4997
    nqp_get_sc_object $P5030, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback4998
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5031
  fallback4998:
    unless_null $P5028, vivi_16204999
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16204999:
    set $P5027, $P5028
  fallback4997:
    $P5033 = $P5027."is_precompilation_mode"()
    set $P5041, $P5033
    unless $P5033 goto if1619_end4996 
.annotate 'line', 2461
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback5000
    nqp_get_sc_object $P5037, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback5001
    nqp_get_sc_object $P5038, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5038
  fallback5001:
    unless_null $P5035, vivi_16215002
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_16215002:
    set $P5034, $P5035
  fallback5000:
    $P5040 = $P5034."create_code"($P101, "<anon>", 0)
    set $P5041, $P5040
  if1619_end4996:
  if1585_end4883:
.annotate 'line', 2465
    nqp_get_sc_object $P5045, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback5003
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5046
  fallback5003:
    $P5047 = $P5042."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5047
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2468
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5006
    nqp_get_sc_object $P5049, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5049
  fallback5006:
    set $P5048, _lex_param_1["trait"]
    unless_null $P5048, fallback5007
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5050
  fallback5007:
    set $P5059, $P5048
    unless $P5048 goto if1622_end5005 
.annotate 'line', 2471
    unless_null _lex_param_1, fallback5008
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5055
  fallback5008:
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback5009
    nqp_get_sc_object $P5056, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5054, $P5056
  fallback5009:
    set $P5051, $P5054
    iter $P5053, $P5054
  for_next5010:
    unless $P5053, for_done5012
    shift $P5058, $P5053
  for_redo5011:
    .const 'Sub' $P5057 = 'cuid_471_1356803026.47425' 
    capture_lex $P5057
    $P5051 = $P5057($P5058)
    goto for_next5010
  for_done5012:
    set $P5059, $P5051
  if1622_end5005:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1356803026.47425") :anon :lex :outer("cuid_306_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2367
    .const 'Sub' $P5078 = 'cuid_467_1356803026.47425' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_469_1356803026.47425' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_470_1356803026.47425' 
    capture_lex $P5078 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4886
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5005
  fallback4886:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4887
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback4887:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4888
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5007
  fallback4888:
    set $S5002, $P5002
.annotate 'line', 2368
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4889
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5011
  fallback4889:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4890
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5012
  fallback4890:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4891
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5013
  fallback4891:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2369
    find_lex $P5016, "$past"
    $P5016."name"($P101)
    find_dynamic_lex $P5017, "$*SCOPE"
    unless_null $P5017, fallback4898
    nqp_get_sc_object $P5020, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$SCOPE"]
    unless_null $P5018, fallback4899
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5021
  fallback4899:
    unless_null $P5018, vivi_15894900
    die "Contextual $*SCOPE not found"
    box $P5022, "Contextual $*SCOPE not found"
    set $P5018, $P5022
  vivi_15894900:
    set $P5017, $P5018
  fallback4898:
    set $S5004, $P5017
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1588_end4897 
    find_dynamic_lex $P5023, "$*SCOPE"
    unless_null $P5023, fallback4901
    nqp_get_sc_object $P5026, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$SCOPE"]
    unless_null $P5024, fallback4902
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5027
  fallback4902:
    unless_null $P5024, vivi_15904903
    die "Contextual $*SCOPE not found"
    box $P5028, "Contextual $*SCOPE not found"
    set $P5024, $P5028
  vivi_15904903:
    set $P5023, $P5024
  fallback4901:
    set $S5005, $P5023
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1588_end4897:
    set $I5005, $I5003
    if $I5003 goto unless1587_end4895 
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4904
    nqp_get_sc_object $P5032, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4905
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5033
  fallback4905:
    unless_null $P5030, vivi_15914906
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_15914906:
    set $P5029, $P5030
  fallback4904:
    set $S5006, $P5029
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1587_end4895:
    unless $I5005 goto if1586_else4892 
.annotate 'line', 2370
    find_dynamic_lex $P5035, "$*MULTINESS"
    unless_null $P5035, fallback4909
    nqp_get_sc_object $P5038, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$MULTINESS"]
    unless_null $P5036, fallback4910
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5039
  fallback4910:
    unless_null $P5036, vivi_15934911
    die "Contextual $*MULTINESS not found"
    box $P5040, "Contextual $*MULTINESS not found"
    set $P5036, $P5040
  vivi_15934911:
    set $P5035, $P5036
  fallback4909:
    set $S5007, $P5035
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1592_else4907 
    .const 'Sub' $P5041 = 'cuid_467_1356803026.47425' 
    capture_lex $P5041
    $P5042 = $P5041()
    goto if1592_end4908
  if1592_else4907:
    find_dynamic_lex $P5043, "$*MULTINESS"
    unless_null $P5043, fallback4947
    nqp_get_sc_object $P5046, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$MULTINESS"]
    unless_null $P5044, fallback4948
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5047
  fallback4948:
    unless_null $P5044, vivi_16054949
    die "Contextual $*MULTINESS not found"
    box $P5048, "Contextual $*MULTINESS not found"
    set $P5044, $P5048
  vivi_16054949:
    set $P5043, $P5044
  fallback4947:
    set $S5008, $P5043
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1604_else4945 
    .const 'Sub' $P5049 = 'cuid_469_1356803026.47425' 
    capture_lex $P5049
    $P5050 = $P5049()
    set $P5053, $P5050
    goto if1604_end4946
  if1604_else4945:
    .const 'Sub' $P5051 = 'cuid_470_1356803026.47425' 
    capture_lex $P5051
    $P5052 = $P5051()
    set $P5053, $P5052
  if1604_end4946:
  if1592_end4908:
.annotate 'line', 2448
    nqp_get_sc_object $P5057, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Var"]
    unless_null $P5054, fallback4984
    nqp_get_sc_object $P5058, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5054, $P5058
  fallback4984:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5059 = $P5054."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    goto if1586_end4893
  if1586_else4892:
.annotate 'line', 2450
.annotate 'line', 2451
    find_lex $P5060, "$/"
    $P5061 = $P5060."CURSOR"()
    find_dynamic_lex $P5062, "$*SCOPE"
    unless_null $P5062, fallback4985
    nqp_get_sc_object $P5065, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$SCOPE"]
    unless_null $P5063, fallback4986
    nqp_get_sc_object $P5066, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5063, $P5066
  fallback4986:
    unless_null $P5063, vivi_16154987
    die "Contextual $*SCOPE not found"
    box $P5067, "Contextual $*SCOPE not found"
    set $P5063, $P5067
  vivi_16154987:
    set $P5062, $P5063
  fallback4985:
    set $S5012, $P5062
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5068 = $P5061."panic"($S5011)
  if1586_end4893:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1617_end4991 
    find_dynamic_lex $P5069, "$*MULTINESS"
    unless_null $P5069, fallback4992
    nqp_get_sc_object $P5072, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$MULTINESS"]
    unless_null $P5070, fallback4993
    nqp_get_sc_object $P5073, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5070, $P5073
  fallback4993:
    unless_null $P5070, vivi_16184994
    die "Contextual $*MULTINESS not found"
    box $P5074, "Contextual $*MULTINESS not found"
    set $P5070, $P5074
  vivi_16184994:
    set $P5069, $P5070
  fallback4992:
    set $S5014, $P5069
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1617_end4991:
    box $P5077, $I5010
    set $P5076, $P5077
    unless $I5010 goto if1616_end4989 
.annotate 'line', 2455
    find_lex $P5075, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5075
    set $P5076, $P5075
  if1616_end4989:
    .return ($P5076) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1356803026.47425") :anon :lex :outer("cuid_468_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2371
    .const 'Sub' $P5048 = 'cuid_466_1356803026.47425' 
    capture_lex $P5048 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4914
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4915
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5009
  fallback4915:
    unless_null $P5006, vivi_15954916
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_15954916:
    set $P5005, $P5006
  fallback4914:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1594_end4913 
.annotate 'line', 2373
    box $P5011, "a multi can not be our-scoped"
    die $P5011
  if1594_end4913:
.annotate 'line', 2375
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4917
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4918
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5016
  fallback4918:
    unless_null $P5013, vivi_15964919
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_15964919:
    set $P5012, $P5013
  fallback4917:
    $P5018 = $P5012."cur_lexpad"()
    find_lex $P5019, "$name"
    set $S5003, $P5019
    concat $S5002, "&", $S5003
    $P5020 = $P5018."symbol"($S5002)
    set $P102, $P5020
    set $P5021, $P102["proto"]
    unless_null $P5021, fallback4922
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5022
  fallback4922:
    unless $P5021 goto if1597_else4920 
.annotate 'line', 2376
    set $P5023, $P102["value"]
    unless_null $P5023, fallback4923
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5024
  fallback4923:
    set $P101, $P5023
    goto if1597_end4921
  if1597_else4920:
    .const 'Sub' $P5025 = 'cuid_466_1356803026.47425' 
    capture_lex $P5025
    $P5026 = $P5025()
  if1597_end4921:
.annotate 'line', 2405
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4938
    nqp_get_sc_object $P5030, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback4939
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5031
  fallback4939:
    unless_null $P5028, vivi_16024940
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16024940:
    set $P5027, $P5028
  fallback4938:
    find_lex $P5033, "$past"
    find_lex $P5034, "$name"
    $P5035 = $P5027."create_code"($P5033, $P5034, 0)
    set $P103, $P5035
.annotate 'line', 2406
    find_lex $P5036, "$past"
    "&attach_multi_signature"($P103, $P5036)
.annotate 'line', 2409
    $P101."add_dispatchee"($P103)
.annotate 'line', 2412
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4941
    nqp_get_sc_object $P5040, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4942
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5041
  fallback4942:
    unless_null $P5038, vivi_16034943
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16034943:
    set $P5037, $P5038
  fallback4941:
    $P5043 = $P5037."cur_lexpad"()
    set $P104, $P5043
.annotate 'line', 2413
    set $P5044, $P104[0]
    unless_null $P5044, fallback4944
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5045
  fallback4944:
    find_lex $P5046, "$past"
    $P5047 = $P5044."push"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1356803026.47425") :anon :lex :outer("cuid_467_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2381
    .const 'Sub' $P5018 = 'cuid_465_1356803026.47425' 
    capture_lex $P5018 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2384
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4924
    nqp_get_sc_object $P5008, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4925
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5009
  fallback4925:
    unless_null $P5006, vivi_15984926
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_15984926:
    set $P5005, $P5006
  fallback4924:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4933:
    unless $P5004, for_done4935
    shift $P5013, $P5004
  for_redo4934:
    .const 'Sub' $P5012 = 'cuid_465_1356803026.47425' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4933
  for_done4935:
    if $P101 goto unless1601_end4937 
.annotate 'line', 2396
.annotate 'line', 2397
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless1601_end4937:
    box $P5017, "Dispatcher derivation NYI"
    die $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1356803026.47425") :anon :lex :outer("cuid_466_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2384
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2385
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4929
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5005
  fallback4929:
    unless $P5004 goto if1599_else4927 
.annotate 'line', 2386
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4930
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5007
  fallback4930:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1599_end4928
  if1599_else4927:
    set $P5012, $P101
    unless $P101 goto if1600_end4932 
.annotate 'line', 2390
.annotate 'line', 2391
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1600_end4932:
    set $P5013, $P5012
  if1599_end4928:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1356803026.47425") :anon :lex :outer("cuid_468_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2415
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4952
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4953
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback4953:
    unless_null $P5004, vivi_16074954
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_16074954:
    set $P5003, $P5004
  fallback4952:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1606_end4951 
.annotate 'line', 2419
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
  if1606_end4951:
.annotate 'line', 2420
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4955
    nqp_get_sc_object $P5013, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4956
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5014
  fallback4956:
    unless_null $P5011, vivi_16084957
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16084957:
    set $P5010, $P5011
  fallback4955:
    find_lex $P5016, "$past"
    find_lex $P5017, "$name"
    $P5018 = $P5010."create_code"($P5016, $P5017, 1)
    set $P101, $P5018
.annotate 'line', 2421
    find_dynamic_lex $P5019, "$*W"
    unless_null $P5019, fallback4958
    nqp_get_sc_object $P5022, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$W"]
    unless_null $P5020, fallback4959
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5023
  fallback4959:
    unless_null $P5020, vivi_16094960
    die "Contextual $*W not found"
    box $P5024, "Contextual $*W not found"
    set $P5020, $P5024
  vivi_16094960:
    set $P5019, $P5020
  fallback4958:
    $P5025 = $P5019."cur_lexpad"()
    set $P102, $P5025
.annotate 'line', 2422
    set $P5026, $P102[0]
    unless_null $P5026, fallback4961
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5027
  fallback4961:
    nqp_get_sc_object $P5031, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Op"]
    unless_null $P5028, fallback4962
    nqp_get_sc_object $P5032, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5032
  fallback4962:
.annotate 'line', 2424
    nqp_get_sc_object $P5036, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback4963
    nqp_get_sc_object $P5037, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5033, $P5037
  fallback4963:
    find_lex $P5038, "$name"
    set $S5003, $P5038
    concat $S5002, "&", $S5003
    $P5039 = $P5033."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5040, "$past"
    $P5041 = $P5028."new"($P5039, $P5040, "bind" :named("op"))
    $P5026."push"($P5041)
.annotate 'line', 2427
    find_lex $P5042, "$name"
    set $S5005, $P5042
    concat $S5004, "&", $S5005
    $P5043 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1356803026.47425") :anon :lex :outer("cuid_468_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2429
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2430
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4964
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4965
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback4965:
    unless_null $P5003, vivi_16104966
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16104966:
    set $P5002, $P5003
  fallback4964:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2431
    set $P5009, $P101[0]
    unless_null $P5009, fallback4967
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5010
  fallback4967:
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4968
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback4968:
.annotate 'line', 2433
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4969
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5020
  fallback4969:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5009."push"($P5024)
.annotate 'line', 2436
    find_lex $P5025, "$name"
    set $S5004, $P5025
    concat $S5003, "&", $S5004
    $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4972
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4973
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5030
  fallback4973:
    unless_null $P5027, vivi_16124974
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_16124974:
    set $P5026, $P5027
  fallback4972:
    set $S5005, $P5026
    iseq $I5001, $S5005, "our"
    box $P5067, $I5001
    set $P5066, $P5067
    unless $I5001 goto if1611_end4971 
.annotate 'line', 2437
.annotate 'line', 2440
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback4975
    nqp_get_sc_object $P5035, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback4976
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5033, $P5036
  fallback4976:
    unless_null $P5033, vivi_16134977
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_16134977:
    set $P5032, $P5033
  fallback4975:
    find_dynamic_lex $P5038, "$*PACKAGE"
    unless_null $P5038, fallback4978
    nqp_get_sc_object $P5041, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$PACKAGE"]
    unless_null $P5039, fallback4979
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5042
  fallback4979:
    unless_null $P5039, vivi_16144980
    die "Contextual $*PACKAGE not found"
    box $P5043, "Contextual $*PACKAGE not found"
    set $P5039, $P5043
  vivi_16144980:
    set $P5038, $P5039
  fallback4978:
    find_lex $P5044, "$name"
    find_lex $P5045, "$past"
    $P5032."install_package_routine"($P5038, $P5044, $P5045)
.annotate 'line', 2441
    set $P5046, $P101[0]
    unless_null $P5046, fallback4981
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5046, $P5047
  fallback4981:
    nqp_get_sc_object $P5051, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback4982
    nqp_get_sc_object $P5052, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5052
  fallback4982:
.annotate 'line', 2443
    new $P5053, 'ResizablePMCArray'
    find_lex $P5054, "$name"
    push $P5053, $P5054
    find_lex $P5055, "$/"
    $P5056 = "&lexical_package_lookup"($P5053, $P5055)
.annotate 'line', 2444
    nqp_get_sc_object $P5060, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Var"]
    unless_null $P5057, fallback4983
    nqp_get_sc_object $P5061, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5057, $P5061
  fallback4983:
    find_lex $P5062, "$name"
    set $S5007, $P5062
    concat $S5006, "&", $S5007
    $P5063 = $P5057."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5064 = $P5048."new"($P5056, $P5063, "bind" :named("op"))
    $P5065 = $P5046."push"($P5064)
    set $P5066, $P5065
  if1611_end4971:
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1356803026.47425") :anon :lex :outer("cuid_306_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2472
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_307_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2477
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5091 = 'cuid_472_1356803026.47425' 
    capture_lex $P5091 
    .const 'Sub' $P5091 = 'cuid_473_1356803026.47425' 
    capture_lex $P5091 
    .lex "$past", $P101 
    .lex "$name", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback5015
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback5015:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback5016
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback5016:
    unless $P5004 goto if1623_else5013 
.annotate 'line', 2481
.annotate 'line', 2482
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1623_end5014
  if1623_else5013:
.annotate 'line', 2484
.annotate 'line', 2485
    unless_null _lex_param_1, fallback5017
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback5017:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback5018
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback5018:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2486
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback5021
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback5022
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5016
  fallback5022:
    unless_null $P5013, vivi_16255023
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_16255023:
    set $P5012, $P5013
  fallback5021:
    set $P5021, $P5012
    unless $P5012 goto if1624_end5020 
.annotate 'line', 2487
.annotate 'line', 2488
    set $P5018, $P101[1]
    unless_null $P5018, fallback5024
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5019
  fallback5024:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1624_end5020:
  if1623_end5014:
    set $P5022, $P101["signature_has_invocant"]
    unless_null $P5022, fallback5027
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5023
  fallback5027:
    if $P5022 goto unless1626_end5026 
.annotate 'line', 2493
.annotate 'line', 2494
    set $P5024, $P101[0]
    unless_null $P5024, fallback5028
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5025
  fallback5028:
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5029
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5030
  fallback5029:
    find_dynamic_lex $P5031, "$*PACKAGE"
    unless_null $P5031, fallback5030
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$PACKAGE"]
    unless_null $P5032, fallback5031
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5035
  fallback5031:
    unless_null $P5032, vivi_16275032
    die "Contextual $*PACKAGE not found"
    box $P5036, "Contextual $*PACKAGE not found"
    set $P5032, $P5036
  vivi_16275032:
    set $P5031, $P5032
  fallback5030:
    $P5037 = $P5026."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5031 :named("returns"))
    $P5038 = $P5024."unshift"($P5037)
  unless1626_end5026:
.annotate 'line', 2499
    $P101."symbol"("self", "lexical" :named("scope"))
    box $P5039, ""
    set $P102, $P5039
    unless_null _lex_param_1, fallback5035
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5041
  fallback5035:
    set $P5040, _lex_param_1["deflongname"]
    unless_null $P5040, fallback5036
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5042
  fallback5036:
    unless $P5040 goto if1628_else5033 
.annotate 'line', 2503
    unless_null _lex_param_1, fallback5037
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5044
  fallback5037:
    set $P5043, _lex_param_1["private"]
    unless_null $P5043, fallback5038
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5043, $P5045
  fallback5038:
    set $S5002, $P5043
.annotate 'line', 2504
    unless_null _lex_param_1, fallback5039
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5048
  fallback5039:
    set $P5047, _lex_param_1["deflongname"]
    unless_null $P5047, fallback5040
    nqp_get_sc_object $P5049, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5047, $P5049
  fallback5040:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback5041
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5046, $P5050
  fallback5041:
    $P5051 = $P5046."ast"()
    set $S5003, $P5051
    concat $S5001, $S5002, $S5003
    box $P5052, $S5001
    set $P102, $P5052
    goto if1628_end5034
  if1628_else5033:
    unless_null _lex_param_1, fallback5044
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5054
  fallback5044:
    set $P5053, _lex_param_1["latename"]
    unless_null $P5053, fallback5045
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5053, $P5055
  fallback5045:
    set $P5068, $P5053
    unless $P5053 goto if1629_end5043 
.annotate 'line', 2506
    find_dynamic_lex $P5056, "$*PKGDECL"
    unless_null $P5056, fallback5048
    nqp_get_sc_object $P5059, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PKGDECL"]
    unless_null $P5057, fallback5049
    nqp_get_sc_object $P5060, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5057, $P5060
  fallback5049:
    unless_null $P5057, vivi_16315050
    die "Contextual $*PKGDECL not found"
    box $P5061, "Contextual $*PKGDECL not found"
    set $P5057, $P5061
  vivi_16315050:
    set $P5056, $P5057
  fallback5048:
    set $S5004, $P5056
    isne $I5001, $S5004, "role"
    unless $I5001 goto if1630_end5047 
.annotate 'line', 2507
.annotate 'line', 2508
    $P5062 = _lex_param_1."CURSOR"()
    $P5063 = $P5062."panic"("Late-bound method name only valid in role")
  if1630_end5047:
    unless_null _lex_param_1, fallback5051
    nqp_get_sc_object $P5065, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5065
  fallback5051:
    set $P5064, _lex_param_1["latename"]
    unless_null $P5064, fallback5052
    nqp_get_sc_object $P5066, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5064, $P5066
  fallback5052:
    set $S5006, $P5064
    concat $S5005, "!!LATENAME!!", $S5006
    box $P5067, $S5005
    set $P102, $P5067
    set $P5068, $P102
  if1629_end5043:
  if1628_end5034:
    set $S5007, $P102
    isne $I5002, $S5007, ""
    unless $I5002 goto if1632_end5054 
    .const 'Sub' $P5069 = 'cuid_472_1356803026.47425' 
    capture_lex $P5069
    $P5070 = $P5069()
  if1632_end5054:
.annotate 'line', 2531
    nqp_get_sc_object $P5074, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["Op"]
    unless_null $P5071, fallback5088
    nqp_get_sc_object $P5075, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5071, $P5075
  fallback5088:
    $P5076 = $P5071."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5076
    set $P103["sink"], $P101
    set $P103["block_past"], $P101
    set $P5077, $P101["code_obj"]
    unless_null $P5077, fallback5089
    nqp_get_sc_object $P5078, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5077, $P5078
  fallback5089:
    set $P103["code_obj"], $P5077
.annotate 'line', 2535
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5092
    nqp_get_sc_object $P5080, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5080
  fallback5092:
    set $P5079, _lex_param_1["trait"]
    unless_null $P5079, fallback5093
    nqp_get_sc_object $P5081, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5079, $P5081
  fallback5093:
    set $P5090, $P5079
    unless $P5079 goto if1645_end5091 
.annotate 'line', 2536
    unless_null _lex_param_1, fallback5094
    nqp_get_sc_object $P5086, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5086
  fallback5094:
    set $P5085, _lex_param_1["trait"]
    unless_null $P5085, fallback5095
    nqp_get_sc_object $P5087, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5085, $P5087
  fallback5095:
    set $P5082, $P5085
    iter $P5084, $P5085
  for_next5096:
    unless $P5084, for_done5098
    shift $P5089, $P5084
  for_redo5097:
    .const 'Sub' $P5088 = 'cuid_473_1356803026.47425' 
    capture_lex $P5088
    $P5082 = $P5088($P5089)
    goto for_next5096
  for_done5098:
    set $P5090, $P5082
  if1645_end5091:
    .return ($P5090) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1356803026.47425") :anon :lex :outer("cuid_307_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2512
    .lex "$meta_meth", $P101 
    .lex "$is_dispatcher", $P102 
    .lex "$code", $P103 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
.annotate 'line', 2514
    find_lex $P5004, "$past"
    find_lex $P5005, "$name"
    $P5004."name"($P5005)
    find_dynamic_lex $P5006, "$*MULTINESS"
    unless_null $P5006, fallback5057
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$MULTINESS"]
    unless_null $P5007, fallback5058
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5010
  fallback5058:
    unless_null $P5007, vivi_16345059
    die "Contextual $*MULTINESS not found"
    box $P5011, "Contextual $*MULTINESS not found"
    set $P5007, $P5011
  vivi_16345059:
    set $P5006, $P5007
  fallback5057:
    set $S5001, $P5006
    iseq $I5001, $S5001, "multi"
    unless $I5001 goto if1633_else5055 
    set $S5002, "add_multi_method"
    goto if1633_end5056
  if1633_else5055:
    set $S5002, "add_method"
  if1633_end5056:
    box $P5012, $S5002
    set $P101, $P5012
    find_dynamic_lex $P5013, "$*MULTINESS"
    unless_null $P5013, fallback5060
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$MULTINESS"]
    unless_null $P5014, fallback5061
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5017
  fallback5061:
    unless_null $P5014, vivi_16355062
    die "Contextual $*MULTINESS not found"
    box $P5018, "Contextual $*MULTINESS not found"
    set $P5014, $P5018
  vivi_16355062:
    set $P5013, $P5014
  fallback5060:
    set $S5003, $P5013
    iseq $I5002, $S5003, "proto"
    box $P5019, $I5002
    set $P102, $P5019
.annotate 'line', 2519
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5063
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5064
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5024
  fallback5064:
    unless_null $P5021, vivi_16365065
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16365065:
    set $P5020, $P5021
  fallback5063:
    find_lex $P5026, "$past"
    find_lex $P5027, "$name"
    $P5028 = $P5020."create_code"($P5026, $P5027, $P102)
    set $P103, $P5028
    find_dynamic_lex $P5029, "$*MULTINESS"
    unless_null $P5029, fallback5068
    nqp_get_sc_object $P5032, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$MULTINESS"]
    unless_null $P5030, fallback5069
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5033
  fallback5069:
    unless_null $P5030, vivi_16385070
    die "Contextual $*MULTINESS not found"
    box $P5034, "Contextual $*MULTINESS not found"
    set $P5030, $P5034
  vivi_16385070:
    set $P5029, $P5030
  fallback5068:
    set $S5004, $P5029
    iseq $I5003, $S5004, "multi"
    unless $I5003 goto if1637_end5067 
.annotate 'line', 2520
    find_lex $P5035, "$past"
    $P5036 = "&attach_multi_signature"($P103, $P5035)
  if1637_end5067:
.annotate 'line', 2521
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5071
    nqp_get_sc_object $P5040, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5072
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5041
  fallback5072:
    unless_null $P5038, vivi_16395073
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16395073:
    set $P5037, $P5038
  fallback5071:
    find_dynamic_lex $P5043, "$*PACKAGE"
    unless_null $P5043, fallback5074
    nqp_get_sc_object $P5046, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$PACKAGE"]
    unless_null $P5044, fallback5075
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5047
  fallback5075:
    unless_null $P5044, vivi_16405076
    die "Contextual $*PACKAGE not found"
    box $P5048, "Contextual $*PACKAGE not found"
    set $P5044, $P5048
  vivi_16405076:
    set $P5043, $P5044
  fallback5074:
    find_lex $P5049, "$name"
    $P5037."pkg_add_method"($P5043, $P101, $P5049, $P103)
    find_lex $P5050, "$past"
    set $P5050["code_obj"], $P103
    find_dynamic_lex $P5051, "$*SCOPE"
    unless_null $P5051, fallback5079
    nqp_get_sc_object $P5054, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$SCOPE"]
    unless_null $P5052, fallback5080
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5052, $P5055
  fallback5080:
    unless_null $P5052, vivi_16425081
    die "Contextual $*SCOPE not found"
    box $P5056, "Contextual $*SCOPE not found"
    set $P5052, $P5056
  vivi_16425081:
    set $P5051, $P5052
  fallback5079:
    set $S5005, $P5051
    iseq $I5004, $S5005, "our"
    box $P5073, $I5004
    set $P5072, $P5073
    unless $I5004 goto if1641_end5078 
.annotate 'line', 2525
.annotate 'line', 2526
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback5082
    nqp_get_sc_object $P5060, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback5083
    nqp_get_sc_object $P5061, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5058, $P5061
  fallback5083:
    unless_null $P5058, vivi_16435084
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_16435084:
    set $P5057, $P5058
  fallback5082:
    find_dynamic_lex $P5063, "$*PACKAGE"
    unless_null $P5063, fallback5085
    nqp_get_sc_object $P5066, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["$PACKAGE"]
    unless_null $P5064, fallback5086
    nqp_get_sc_object $P5067, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5064, $P5067
  fallback5086:
    unless_null $P5064, vivi_16445087
    die "Contextual $*PACKAGE not found"
    box $P5068, "Contextual $*PACKAGE not found"
    set $P5064, $P5068
  vivi_16445087:
    set $P5063, $P5064
  fallback5085:
    find_lex $P5069, "$name"
    find_lex $P5070, "$past"
    $P5071 = $P5057."install_package_routine"($P5063, $P5069, $P5070)
    set $P5072, $P5071
  if1641_end5078:
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1356803026.47425") :anon :lex :outer("cuid_307_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2537
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_308_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2569
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_474_1356803026.47425' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_475_1356803026.47425' 
    capture_lex $P5025 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 2570
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5099
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5100
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback5100:
    unless_null $P5004, vivi_16465101
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16465101:
    set $P5003, $P5004
  fallback5099:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback5102
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5011
  fallback5102:
    set $P102, $P5010
    unless_null _lex_param_1, fallback5105
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5013
  fallback5105:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback5106
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5014
  fallback5106:
    unless $P5012 goto if1647_end5104 
    .const 'Sub' $P5015 = 'cuid_474_1356803026.47425' 
    capture_lex $P5015
    $P5016 = $P5015()
  if1647_end5104:
    unless_null _lex_param_1, fallback5113
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5021
  fallback5113:
    set $P5020, _lex_param_1["parameter"]
    unless_null $P5020, fallback5114
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5022
  fallback5114:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next5115:
    unless $P5019, for_done5117
    shift $P5024, $P5019
  for_redo5116:
    .const 'Sub' $P5023 = 'cuid_475_1356803026.47425' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next5115
  for_done5117:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1356803026.47425") :anon :lex :outer("cuid_308_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2572
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2573
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5107
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5005
  fallback5107:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback5108
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback5108:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5109
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5007
  fallback5109:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2574
    find_lex $P5009, "$BLOCKINIT"
    $P5009."push"($P101)
.annotate 'line', 2575
    find_lex $P5010, "$BLOCKINIT"
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5110
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback5110:
.annotate 'line', 2577
    nqp_get_sc_object $P5019, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5111
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5020
  fallback5111:
    $P5021 = $P5016."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2578
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback5112
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5026
  fallback5112:
    $P5027 = $P101."name"()
    $P5028 = $P5022."new"("lexical" :named("scope"), $P5027 :named("name"))
    $P5029 = $P5011."new"($P5021, $P5028, "bind" :named("op"))
    $P5010."push"($P5029)
    find_lex $P5030, "$BLOCK"
    box $P5031, 1
    set $P5030["signature_has_invocant"], $P5031
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1356803026.47425") :anon :lex :outer("cuid_308_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2582
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_309_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2585
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5092 = 'cuid_477_1356803026.47425' 
    capture_lex $P5092 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5118
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback5118:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback5119
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback5119:
    set $P101, $P5003
    unless_null _lex_param_1, fallback5122
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5122:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback5123
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5123:
    unless $P5006 goto if1648_else5120 
.annotate 'line', 2588
.annotate 'line', 2589
    unless_null _lex_param_1, fallback5124
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback5124:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback5125
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback5125:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1649_end5127 
.annotate 'line', 2590
.annotate 'line', 2591
    unless_null _lex_param_1, fallback5128
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5016
  fallback5128:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback5129
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5017
  fallback5129:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback5130
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5018
  fallback5130:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback5131
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5019
  fallback5131:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1649_end5127:
    goto if1648_end5121
  if1648_else5120:
.annotate 'line', 2594
.annotate 'line', 2595
    unless_null _lex_param_1, fallback5132
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5025
  fallback5132:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback5133
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5026
  fallback5133:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1650_else5134 
.annotate 'line', 2596
.annotate 'line', 2597
    $P102."slurpy"(1)
.annotate 'line', 2598
    unless_null _lex_param_1, fallback5136
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5030
  fallback5136:
    set $P5029, _lex_param_1["param_var"]
    unless_null $P5029, fallback5137
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5029, $P5031
  fallback5137:
    set $P5028, $P5029["sigil"]
    unless_null $P5028, fallback5138
    nqp_get_sc_object $P5032, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5032
  fallback5138:
    set $S5003, $P5028
    iseq $I5003, $S5003, "%"
    $P5033 = $P102."named"($I5003)
    set $P5043, $P5033
    goto if1650_end5135
  if1650_else5134:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5042, $I5004
    set $P5041, $P5042
    unless $I5004 goto if1651_end5140 
.annotate 'line', 2600
.annotate 'line', 2601
    unless_null _lex_param_1, fallback5141
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5036
  fallback5141:
    set $P5035, _lex_param_1["param_var"]
    unless_null $P5035, fallback5142
    nqp_get_sc_object $P5037, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5037
  fallback5142:
    set $P5034, $P5035["sigil"]
    unless_null $P5034, fallback5143
    nqp_get_sc_object $P5038, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5034, $P5038
  fallback5143:
    $P5039 = "&default_for"($P5034)
    $P5040 = $P102."default"($P5039)
    set $P5041, $P5040
  if1651_end5140:
    set $P5043, $P5041
  if1650_end5135:
  if1648_end5121:
    unless_null _lex_param_1, fallback5146
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5045
  fallback5146:
    set $P5044, _lex_param_1["default_value"]
    unless_null $P5044, fallback5147
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5046
  fallback5147:
    unless $P5044 goto if1652_end5145 
.annotate 'line', 2604
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    unless $I5005 goto if1653_end5149 
.annotate 'line', 2605
.annotate 'line', 2606
    $P5047 = _lex_param_1."CURSOR"()
    $P5048 = $P5047."panic"("Can't put default on slurpy parameter")
  if1653_end5149:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    unless $I5006 goto if1654_end5151 
.annotate 'line', 2608
.annotate 'line', 2609
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on required parameter")
  if1654_end5151:
.annotate 'line', 2611
    unless_null _lex_param_1, fallback5152
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5054
  fallback5152:
    set $P5053, _lex_param_1["default_value"]
    unless_null $P5053, fallback5153
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5053, $P5055
  fallback5153:
    set $P5052, $P5053[0]
    unless_null $P5052, fallback5154
    nqp_get_sc_object $P5056, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5052, $P5056
  fallback5154:
    set $P5051, $P5052["EXPR"]
    unless_null $P5051, fallback5155
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5051, $P5057
  fallback5155:
    $P5058 = $P5051."ast"()
    $P5059 = $P102."default"($P5058)
  if1652_end5145:
.annotate 'line', 2613
    $P5060 = $P102."default"()
    if $P5060 goto unless1655_end5157 
    find_dynamic_lex $P5061, "$*W"
    unless_null $P5061, fallback5158
    nqp_get_sc_object $P5064, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$W"]
    unless_null $P5062, fallback5159
    nqp_get_sc_object $P5065, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5062, $P5065
  fallback5159:
    unless_null $P5062, vivi_16565160
    die "Contextual $*W not found"
    box $P5066, "Contextual $*W not found"
    set $P5062, $P5066
  vivi_16565160:
    set $P5061, $P5062
  fallback5158:
    $P5067 = $P5061."cur_lexpad"()
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback5161
    nqp_get_sc_object $P5071, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback5162
    nqp_get_sc_object $P5072, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5069, $P5072
  fallback5162:
    unless_null $P5069, vivi_16575163
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_16575163:
    set $P5068, $P5069
  fallback5161:
    $P5074 = $P5068."cur_lexpad"()
    $P5075 = $P5074."arity"()
    set $N5002, $P5075
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5076 = $P5067."arity"($N5001)
  unless1655_end5157:
    unless_null _lex_param_1, fallback5166
    nqp_get_sc_object $P5078, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5078
  fallback5166:
    set $P5077, _lex_param_1["typename"]
    unless_null $P5077, fallback5167
    nqp_get_sc_object $P5079, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5077, $P5079
  fallback5167:
    unless $P5077 goto if1658_end5165 
    .const 'Sub' $P5080 = 'cuid_477_1356803026.47425' 
    capture_lex $P5080
    $P5081 = $P5080()
  if1658_end5165:
    unless_null _lex_param_1, fallback5184
    nqp_get_sc_object $P5083, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5083
  fallback5184:
    set $P5082, _lex_param_1["definedness"]
    unless_null $P5082, fallback5185
    nqp_get_sc_object $P5084, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5082, $P5084
  fallback5185:
    unless $P5082 goto if1663_end5183 
.annotate 'line', 2628
    unless_null _lex_param_1, fallback5186
    nqp_get_sc_object $P5087, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5087
  fallback5186:
    set $P5086, _lex_param_1["definedness"]
    unless_null $P5086, fallback5187
    nqp_get_sc_object $P5088, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5086, $P5088
  fallback5187:
    set $P5085, $P5086[0]
    unless_null $P5085, fallback5188
    nqp_get_sc_object $P5089, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5085, $P5089
  fallback5188:
    set $S5007, $P5085
    box $P5090, $S5007
    set $P102["definedness"], $P5090
  if1663_end5183:
.annotate 'line', 2632
    $P5091 = _lex_param_1."!make"($P102)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1356803026.47425") :anon :lex :outer("cuid_309_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2616
    .const 'Sub' $P5015 = 'cuid_476_1356803026.47425' 
    capture_lex $P5015 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2617
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5168
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5005
  fallback5168:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback5169
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback5169:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5170
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5007
  fallback5170:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2618
    find_lex $P5010, "$past"
    $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto if1659_end5172 
    .const 'Sub' $P5011 = 'cuid_476_1356803026.47425' 
    capture_lex $P5011
    $P5012 = $P5011($P5014)
    set $P5013, $P5012
  if1659_end5172:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1356803026.47425") :anon :lex :outer("cuid_477_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2619
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2620
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5173
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5174
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback5174:
    unless_null $P5002, vivi_16605175
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16605175:
    set $P5001, $P5002
  fallback5173:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2621
    find_lex $P5011, "$past"
    $P5012 = $P5011."default"()
    set $P5017, $P5012
    unless $P5012 goto if1662_end5179 
    find_lex $P5014, "$/"
    unless_null $P5014, fallback5180
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5015
  fallback5180:
    set $P5013, $P5014["default_value"]
    unless_null $P5013, fallback5181
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5016
  fallback5181:
    isfalse $I5001, $P5013
    box $P5018, $I5001
    set $P5017, $P5018
  if1662_end5179:
    set $P5022, $P5017
    unless $P5017 goto if1661_end5177 
.annotate 'line', 2622
    find_lex $P5019, "$past"
    $P5020 = "&default_value_for_prim"(_lex_param_0)
    $P5021 = $P5019."default"($P5020)
    set $P5022, $P5021
  if1661_end5177:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_310_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2635
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2637
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback5189
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5008
  fallback5189:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2639
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5190
    nqp_get_sc_object $P5013, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5191
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5014
  fallback5191:
    unless_null $P5011, vivi_16645192
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16645192:
    set $P5010, $P5011
  fallback5190:
    $P5016 = $P5010."cur_lexpad"()
    $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2640
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_311_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2643
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2644
    unless_null _lex_param_1, fallback5193
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback5193:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback5194
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback5194:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2645
    unless_null _lex_param_1, fallback5195
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback5195:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback5196
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback5196:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5197
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback5197:
    set $S5001, $P5006
    $P101."named"($S5001)
.annotate 'line', 2646
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_312_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2649
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_478_1356803026.47425' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 2653
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback5198
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5007
  fallback5198:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_16675204
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_478_1356803026.47425' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_16665203
  catch_handler_16675204:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_16665203
  skip_handler_16665203:
    set $P5016, $P102
    if $P102 goto unless1668_end5206 
.annotate 'line', 2660
.annotate 'line', 2661
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1668_end5206:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1356803026.47425") :anon :lex :outer("cuid_312_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2655
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2656
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5199
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5200
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback5200:
    unless_null $P5003, vivi_16655201
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16655201:
    set $P5002, $P5003
  fallback5199:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2657
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback5202
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback5202:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5010."!make"($P5016)
    box $P5017, 1
    store_lex "$found", $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_313_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2665
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2666
    unless_null _lex_param_1, fallback5207
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5207:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback5208
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5208:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_314_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2669
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_480_1356803026.47425' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_482_1356803026.47425' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_483_1356803026.47425' 
    capture_lex $P5025 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5211
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5211:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5212
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5212:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1669_else5209 
    .const 'Sub' $P5004 = 'cuid_480_1356803026.47425' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5024, $P5005
    goto if1669_end5210
  if1669_else5209:
    unless_null _lex_param_1, fallback5236
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5236:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5237
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5237:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1675_else5234 
    .const 'Sub' $P5009 = 'cuid_482_1356803026.47425' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5023, $P5010
    goto if1675_end5235
  if1675_else5234:
    unless_null _lex_param_1, fallback5253
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5012
  fallback5253:
    set $P5011, _lex_param_1["longname"]
    unless_null $P5011, fallback5254
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5013
  fallback5254:
    set $S5003, $P5011
    iseq $I5003, $S5003, "export"
    unless $I5003 goto if1679_else5251 
.annotate 'line', 2695
.annotate 'line', 2696
    .const 'Sub' $P5015 = 'cuid_483_1356803026.47425' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    $P5016 = _lex_param_1."!make"($P5014)
    set $P5022, $P5016
    goto if1679_end5252
  if1679_else5251:
.annotate 'line', 2703
.annotate 'line', 2704
    $P5017 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5266
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5019
  fallback5266:
    set $P5018, _lex_param_1["longname"]
    unless_null $P5018, fallback5267
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5020
  fallback5267:
    set $S5006, $P5018
    concat $S5005, "Trait '", $S5006
    concat $S5004, $S5005, "' not implemented"
    $P5021 = $P5017."panic"($S5004)
    set $P5022, $P5021
  if1679_end5252:
    set $P5023, $P5022
  if1675_end5235:
    set $P5024, $P5023
  if1669_end5210:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_480_1356803026.47425") :anon :lex :outer("cuid_314_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2670
    .const 'Sub' $P5039 = 'cuid_479_1356803026.47425' 
    capture_lex $P5039 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
.annotate 'line', 2672
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5213
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5008
  fallback5213:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5214
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5009
  fallback5214:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5215
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5010
  fallback5215:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2674
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5218
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback5218:
    $P5017 = $P5012."ACCEPTS"($P101)
    if $P5017 goto unless1670_end5217 
.annotate 'line', 2673
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless1670_end5217:
.annotate 'line', 2675
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5219
    nqp_get_sc_object $P5025, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5220
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5026
  fallback5220:
    unless_null $P5023, vivi_16715221
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_16715221:
    set $P5022, $P5023
  fallback5219:
    set $P103, $P5022
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback5222
    nqp_get_sc_object $P5031, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback5223
    nqp_get_sc_object $P5032, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5029, $P5032
  fallback5223:
    unless_null $P5029, vivi_16725224
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_16725224:
    set $P5028, $P5029
  fallback5222:
    set $S5001, $P5028
    iseq $I5001, $S5001, "proto"
    box $P5034, $I5001
    set $P104, $P5034
.annotate 'line', 2678
    find_dynamic_lex $P5035, "$/"
    .const 'Sub' $P5037 = 'cuid_479_1356803026.47425' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P5038 = $P5035."!make"($P5036)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1356803026.47425") :anon :lex :outer("cuid_480_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2678
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2679
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5225
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5226
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback5226:
    unless_null $P5002, vivi_16735227
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16735227:
    set $P5001, $P5002
  fallback5225:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2680
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5229
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback5229:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5228
.annotate 'line', 2681
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5230
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5231
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5017
  fallback5231:
    unless_null $P5014, vivi_16745232
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_16745232:
    set $P5013, $P5014
  fallback5230:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5233
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5021
  fallback5233:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5228:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_482_1356803026.47425") :anon :lex :outer("cuid_314_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2684
    .const 'Sub' $P5031 = 'cuid_481_1356803026.47425' 
    capture_lex $P5031 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
.annotate 'line', 2686
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5238
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5007
  fallback5238:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5239
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5008
  fallback5239:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5240
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5009
  fallback5240:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2688
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5243
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback5243:
    $P5016 = $P5011."ACCEPTS"($P101)
    if $P5016 goto unless1676_end5242 
.annotate 'line', 2687
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless1676_end5242:
.annotate 'line', 2689
    $P5020 = $P101."value"()
    set $P102, $P5020
    find_dynamic_lex $P5021, "$*PACKAGE"
    unless_null $P5021, fallback5244
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$PACKAGE"]
    unless_null $P5022, fallback5245
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5025
  fallback5245:
    unless_null $P5022, vivi_16775246
    die "Contextual $*PACKAGE not found"
    box $P5026, "Contextual $*PACKAGE not found"
    set $P5022, $P5026
  vivi_16775246:
    set $P5021, $P5022
  fallback5244:
    set $P103, $P5021
.annotate 'line', 2691
    find_dynamic_lex $P5027, "$/"
    .const 'Sub' $P5029 = 'cuid_481_1356803026.47425' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P5030 = $P5027."!make"($P5028)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_481_1356803026.47425") :anon :lex :outer("cuid_482_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2691
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2692
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5247
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5248
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback5248:
    unless_null $P5002, vivi_16785249
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16785249:
    set $P5001, $P5002
  fallback5247:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5250
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5010
  fallback5250:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_483_1356803026.47425") :anon :lex :outer("cuid_314_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2696
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$name", $P102 
    .lex "$match", _lex_param_0 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 2697
    $P5003 = _lex_param_0."ast"()
    set $P101, $P5003
.annotate 'line', 2698
    set $P5004, $P101["block_past"]
    unless_null $P5004, fallback5255
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5005
  fallback5255:
    $P5006 = $P5004."name"()
    set $P102, $P5006
    find_dynamic_lex $P5010, "$*EXPORT"
    unless_null $P5010, fallback5256
    nqp_get_sc_object $P5013, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$EXPORT"]
    unless_null $P5011, fallback5257
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5014
  fallback5257:
    unless_null $P5011, vivi_16805258
    die "Contextual $*EXPORT not found"
    box $P5015, "Contextual $*EXPORT not found"
    set $P5011, $P5015
  vivi_16805258:
    set $P5010, $P5011
  fallback5256:
    get_who $P5009, $P5010
    set $P5008, $P5009["DEFAULT"]
    unless_null $P5008, fallback5259
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5016
  fallback5259:
    get_who $P5007, $P5008
    set $S5002, $P102
    concat $S5001, "&", $S5002
    set $P5018, $P101["code_obj"]
    unless_null $P5018, fallback5261
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5019
  fallback5261:
    set $P5017, $P5018
    defined $I5001, $P5017
    if $I5001, defor5260
.annotate 'line', 2700
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5262
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5263
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5024
  fallback5263:
    unless_null $P5021, vivi_16815264
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16815264:
    set $P5020, $P5021
  fallback5262:
    set $P5026, $P101["block_past"]
    unless_null $P5026, fallback5265
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5027
  fallback5265:
    $P5028 = $P5020."create_code"($P5026, $P102, 0)
    set $P5017, $P5028
  defor5260:
    set $P5007[$S5001], $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_315_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2708
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P5074 = 'cuid_485_1356803026.47425' 
    capture_lex $P5074 
    if haz_param_5, default5348
    nqp_get_sc_object $P5073, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_2, $P5073
  default5348:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5270
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback5270:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5271
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback5271:
    unless $P5003 goto if1682_else5268 
.annotate 'line', 2710
.annotate 'line', 2711
    unless_null _lex_param_1, fallback5272
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5272:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5273
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5273:
    $P5009 = $P5006."ast"()
    set $S5001, $P5009
    box $P5010, $S5001
    set $P101, $P5010
    goto if1682_end5269
  if1682_else5268:
.annotate 'line', 2713
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback5276
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback5277
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5015
  fallback5277:
    unless_null $P5012, vivi_16845278
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_16845278:
    set $P5011, $P5012
  fallback5276:
    set $S5002, $P5011
    isne $I5001, $S5002, "role"
    unless $I5001 goto if1683_end5275 
.annotate 'line', 2714
.annotate 'line', 2715
    $P5017 = _lex_param_1."CURSOR"()
    $P5018 = $P5017."panic"("Late-bound method name only valid in role")
  if1683_end5275:
    unless_null _lex_param_1, fallback5279
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5020
  fallback5279:
    set $P5019, _lex_param_1["latename"]
    unless_null $P5019, fallback5280
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5021
  fallback5280:
    set $S5004, $P5019
    concat $S5003, "!!LATENAME!!", $S5004
    box $P5022, $S5003
    set $P101, $P5022
  if1682_end5269:
    unless_null _lex_param_1, fallback5283
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5024
  fallback5283:
    set $P5023, _lex_param_1["proto"]
    unless_null $P5023, fallback5284
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5025
  fallback5284:
    unless $P5023 goto if1685_else5281 
.annotate 'line', 2720
.annotate 'line', 2721
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Block"]
    unless_null $P5026, fallback5285
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5030
  fallback5285:
.annotate 'line', 2723
    nqp_get_sc_object $P5034, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5286
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5031, $P5035
  fallback5286:
.annotate 'line', 2724
    nqp_get_sc_object $P5039, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5287
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5040
  fallback5287:
    $P5041 = $P5036."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2725
    nqp_get_sc_object $P5045, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback5288
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5046
  fallback5288:
    $P5047 = $P5042."new"($P101 :named("value"))
    $P5048 = $P5031."new"($P5041, $P5047, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5049 = $P5026."new"($P5048, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    set $P102, $P5049
.annotate 'line', 2732
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback5289
    nqp_get_sc_object $P5053, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback5290
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5051, $P5054
  fallback5290:
    unless_null $P5051, vivi_16865291
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_16865291:
    set $P5050, $P5051
  fallback5289:
    find_dynamic_lex $P5056, "$*PACKAGE"
    unless_null $P5056, fallback5292
    nqp_get_sc_object $P5059, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PACKAGE"]
    unless_null $P5057, fallback5293
    nqp_get_sc_object $P5060, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5057, $P5060
  fallback5293:
    unless_null $P5057, vivi_16875294
    die "Contextual $*PACKAGE not found"
    box $P5061, "Contextual $*PACKAGE not found"
    set $P5057, $P5061
  vivi_16875294:
    set $P5056, $P5057
  fallback5292:
.annotate 'line', 2733
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5295
    nqp_get_sc_object $P5065, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5296
    nqp_get_sc_object $P5066, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5063, $P5066
  fallback5296:
    unless_null $P5063, vivi_16885297
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_16885297:
    set $P5062, $P5063
  fallback5295:
    $P5068 = $P5062."create_code"($P102, $P101, 0, "NQPRegex" :named("code_type_name"))
    $P5069 = $P5050."pkg_add_method"($P5056, "add_method", $P101, $P5068)
    goto if1685_end5282
  if1685_else5281:
    .const 'Sub' $P5070 = 'cuid_485_1356803026.47425' 
    capture_lex $P5070
    $P5071 = $P5070()
  if1685_end5282:
.annotate 'line', 2772
    $P5072 = _lex_param_1."!make"($P102)
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_485_1356803026.47425") :anon :lex :outer("cuid_315_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2735
    .const 'Sub' $P5130 = 'cuid_484_1356803026.47425' 
    capture_lex $P5130 
    .lex "$block", $P101 
    .lex "$code", $P102 
    .lex "$regex", $P103 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
.annotate 'line', 2736
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5298
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5299
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5008
  fallback5299:
    unless_null $P5005, vivi_16895300
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16895300:
    set $P5004, $P5005
  fallback5298:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2737
    set $P5011, $P101[0]
    unless_null $P5011, fallback5301
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5012
  fallback5301:
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5302
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5017
  fallback5302:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."unshift"($P5018)
.annotate 'line', 2738
    set $P5019, $P101[0]
    unless_null $P5019, fallback5303
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5020
  fallback5303:
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5304
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5025
  fallback5304:
.annotate 'line', 2740
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5305
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5030
  fallback5305:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2741
    nqp_get_sc_object $P5035, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5306
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5036
  fallback5306:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2742
    set $P5039, $P101[0]
    unless_null $P5039, fallback5307
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5040
  fallback5307:
    nqp_get_sc_object $P5044, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5308
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5041, $P5045
  fallback5308:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2743
    set $P5047, $P101[0]
    unless_null $P5047, fallback5309
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5047, $P5048
  fallback5309:
    nqp_get_sc_object $P5052, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5310
    nqp_get_sc_object $P5053, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5049, $P5053
  fallback5310:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2744
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2745
    $P101."symbol"("$/", "lexical" :named("scope"))
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback5311
    nqp_get_sc_object $P5059, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%RX"]
    unless_null $P5057, fallback5312
    nqp_get_sc_object $P5061, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%RX"], $P5062
    set $P5057, $P5062
  fallback5312:
    unless_null $P5057, vivi_16905313
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5057, $P5063
  vivi_16905313:
    set $P5056, $P5057
  fallback5311:
    set $P5055, $P5056["code"]
    unless_null $P5055, fallback5314
    nqp_get_sc_object $P5064, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5064
  fallback5314:
    set $P102, $P5055
.annotate 'line', 2747
    find_dynamic_lex $P5066, "%*LANG"
    unless_null $P5066, fallback5315
    nqp_get_sc_object $P5069, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%LANG"]
    unless_null $P5067, fallback5316
    nqp_get_sc_object $P5071, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%LANG"], $P5072
    set $P5067, $P5072
  fallback5316:
    unless_null $P5067, vivi_16915317
    die "Contextual %*LANG not found"
    box $P5073, "Contextual %*LANG not found"
    set $P5067, $P5073
  vivi_16915317:
    set $P5066, $P5067
  fallback5315:
    set $P5065, $P5066["Regex-actions"]
    unless_null $P5065, fallback5318
    nqp_get_sc_object $P5074, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5065, $P5074
  fallback5318:
    find_lex $P5076, "$/"
    unless_null $P5076, fallback5319
    nqp_get_sc_object $P5077, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5076, $P5077
  fallback5319:
    set $P5075, $P5076["p6regex"]
    unless_null $P5075, fallback5320
    nqp_get_sc_object $P5078, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5075, $P5078
  fallback5320:
    $P5079 = $P5075."ast"()
    $P5080 = $P5065."qbuildsub"($P5079, $P101, $P102 :named("code_obj"))
    set $P103, $P5080
.annotate 'line', 2748
    find_lex $P5081, "$name"
    $P103."name"($P5081)
    find_dynamic_lex $P5082, "$*PKGDECL"
    unless_null $P5082, fallback5325
    nqp_get_sc_object $P5085, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PKGDECL"]
    unless_null $P5083, fallback5326
    nqp_get_sc_object $P5086, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5083, $P5086
  fallback5326:
    unless_null $P5083, vivi_16945327
    die "Contextual $*PKGDECL not found"
    box $P5087, "Contextual $*PKGDECL not found"
    set $P5083, $P5087
  vivi_16945327:
    set $P5082, $P5083
  fallback5325:
    set $P5095, $P5082
    unless $P5082 goto if1693_end5324 
    find_dynamic_lex $P5089, "$*PACKAGE"
    unless_null $P5089, fallback5328
    nqp_get_sc_object $P5092, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$PACKAGE"]
    unless_null $P5090, fallback5329
    nqp_get_sc_object $P5093, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5090, $P5093
  fallback5329:
    unless_null $P5090, vivi_16955330
    die "Contextual $*PACKAGE not found"
    box $P5094, "Contextual $*PACKAGE not found"
    set $P5090, $P5094
  vivi_16955330:
    set $P5089, $P5090
  fallback5328:
    get_how $P5088, $P5089
    can $I5001, $P5088, "add_method"
    box $P5096, $I5001
    set $P5095, $P5096
  if1693_end5324:
    unless $P5095 goto if1692_end5322 
.annotate 'line', 2750
.annotate 'line', 2752
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback5331
    nqp_get_sc_object $P5100, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback5332
    nqp_get_sc_object $P5101, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5098, $P5101
  fallback5332:
    unless_null $P5098, vivi_16965333
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_16965333:
    set $P5097, $P5098
  fallback5331:
    find_dynamic_lex $P5103, "$*PACKAGE"
    unless_null $P5103, fallback5334
    nqp_get_sc_object $P5106, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$PACKAGE"]
    unless_null $P5104, fallback5335
    nqp_get_sc_object $P5107, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5104, $P5107
  fallback5335:
    unless_null $P5104, vivi_16975336
    die "Contextual $*PACKAGE not found"
    box $P5108, "Contextual $*PACKAGE not found"
    set $P5104, $P5108
  vivi_16975336:
    set $P5103, $P5104
  fallback5334:
    find_lex $P5109, "$name"
    $P5110 = $P5097."pkg_add_method"($P5103, "add_method", $P5109, $P102)
  if1692_end5322:
    find_dynamic_lex $P5111, "$*PKGDECL"
    unless_null $P5111, fallback5339
    nqp_get_sc_object $P5114, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5113, $P5114
    set $P5112, $P5113["$PKGDECL"]
    unless_null $P5112, fallback5340
    nqp_get_sc_object $P5115, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5112, $P5115
  fallback5340:
    unless_null $P5112, vivi_16995341
    die "Contextual $*PKGDECL not found"
    box $P5116, "Contextual $*PKGDECL not found"
    set $P5112, $P5116
  vivi_16995341:
    set $P5111, $P5112
  fallback5339:
    set $S5001, $P5111
    iseq $I5002, $S5001, "role"
    unless $I5002 goto if1698_end5338 
    .const 'Sub' $P5117 = 'cuid_484_1356803026.47425' 
    capture_lex $P5117
    $P5118 = $P5117()
  if1698_end5338:
.annotate 'line', 2766
    nqp_get_sc_object $P5122, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback5347
    nqp_get_sc_object $P5123, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5119, $P5123
  fallback5347:
.annotate 'line', 2768
    new $P5124, 'ResizablePMCArray'
    box $P5125, "NQPRegexMethod"
    push $P5124, $P5125
    find_lex $P5126, "$/"
    $P5127 = "&lexical_package_lookup"($P5124, $P5126)
    $P5128 = $P5119."new"($P5127, $P103, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5128
    find_lex $P5129, "$past"
    set $P5129["sink"], $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_484_1356803026.47425") :anon :lex :outer("cuid_485_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2757
    .lex "$gen_nfa", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2758
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "QRegex"
    get_who $P5003, $P5004
    set $P5002, $P5003["NFA"]
    unless_null $P5002, fallback5342
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback5342:
    $P5007 = $P5002."new"()
    set $P101, $P5007
.annotate 'line', 2759
    find_lex $P5009, "$/"
    unless_null $P5009, fallback5343
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5010
  fallback5343:
    set $P5008, $P5009["p6regex"]
    unless_null $P5008, fallback5344
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5011
  fallback5344:
    $P5012 = $P5008."ast"()
    $P101."addnode"($P5012, 1 :named("vars_as_generic"))
.annotate 'line', 2760
    $P5013 = $P101."generic"()
    set $P5016, $P5013
    unless $P5013 goto if1700_end5346 
.annotate 'line', 2761
    find_lex $P5014, "$code"
    $P5015 = $P5014."SET_GENERIC_NFA"($P101)
    set $P5016, $P5015
  if1700_end5346:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_316_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2776
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5351
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback5351:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5352
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback5352:
    unless $P5002 goto if1701_else5349 
.annotate 'line', 2777
    unless_null _lex_param_1, fallback5353
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5353:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5354
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5354:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5355
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5009
  fallback5355:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1701_end5350
  if1701_else5349:
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5356
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback5356:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1701_end5350:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5359
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5019
  fallback5359:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5360
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5020
  fallback5360:
    unless $P5018 goto if1702_else5357 
.annotate 'line', 2778
.annotate 'line', 2779
    unless_null _lex_param_1, fallback5361
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5022
  fallback5361:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5362
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5023
  fallback5362:
    $P5024 = $P5021."ast"()
    $P101."unshift"($P5024)
.annotate 'line', 2780
    $P5025 = $P101."op"("callmethod")
    goto if1702_end5358
  if1702_else5357:
    unless_null _lex_param_1, fallback5365
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5027
  fallback5365:
    set $P5026, _lex_param_1["longname"]
    unless_null $P5026, fallback5366
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5028
  fallback5366:
    set $S5001, $P5026
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1703_else5363 
.annotate 'line', 2782
.annotate 'line', 2783
    $P5029 = $P101."op"("how")
    set $P5049, $P5029
    goto if1703_end5364
  if1703_else5363:
    unless_null _lex_param_1, fallback5369
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5031
  fallback5369:
    set $P5030, _lex_param_1["longname"]
    unless_null $P5030, fallback5370
    nqp_get_sc_object $P5032, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5032
  fallback5370:
    set $S5002, $P5030
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1704_else5367 
.annotate 'line', 2785
.annotate 'line', 2786
    $P5033 = $P101."op"("what")
    set $P5048, $P5033
    goto if1704_end5368
  if1704_else5367:
    unless_null _lex_param_1, fallback5373
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5035
  fallback5373:
    set $P5034, _lex_param_1["longname"]
    unless_null $P5034, fallback5374
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5034, $P5036
  fallback5374:
    set $S5003, $P5034
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1705_else5371 
.annotate 'line', 2788
.annotate 'line', 2789
    $P5037 = $P101."op"("who")
    set $P5047, $P5037
    goto if1705_end5372
  if1705_else5371:
    unless_null _lex_param_1, fallback5377
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5039
  fallback5377:
    set $P5038, _lex_param_1["longname"]
    unless_null $P5038, fallback5378
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5040
  fallback5378:
    set $S5004, $P5038
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1706_else5375 
.annotate 'line', 2791
.annotate 'line', 2792
    $P5041 = $P101."op"("reprname")
    set $P5046, $P5041
    goto if1706_end5376
  if1706_else5375:
.annotate 'line', 2794
.annotate 'line', 2795
    unless_null _lex_param_1, fallback5379
    nqp_get_sc_object $P5043, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5043
  fallback5379:
    set $P5042, _lex_param_1["longname"]
    unless_null $P5042, fallback5380
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5044
  fallback5380:
    set $S5005, $P5042
    $P101."name"($S5005)
.annotate 'line', 2796
    $P5045 = $P101."op"("callmethod")
    set $P5046, $P5045
  if1706_end5376:
    set $P5047, $P5046
  if1705_end5372:
    set $P5048, $P5047
  if1704_end5368:
    set $P5049, $P5048
  if1703_end5364:
  if1702_end5358:
.annotate 'line', 2798
    $P5050 = _lex_param_1."!make"($P101)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_317_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2803
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2804
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5381
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5381:
.annotate 'line', 2805
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5382
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback5382:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "nqp_decontainerize PP" :named("pirop"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_318_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2808
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2809
    unless_null _lex_param_1, fallback5383
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback5383:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5384
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback5384:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2810
    unless_null _lex_param_1, fallback5385
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5385:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5386
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5386:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P101."name"($S5001)
.annotate 'line', 2811
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_319_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2814
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5049 = 'cuid_486_1356803026.47425' 
    capture_lex $P5049 
    .const 'Sub' $P5049 = 'cuid_487_1356803026.47425' 
    capture_lex $P5049 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 2817
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5389
    nqp_get_sc_object $P5006, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5390
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback5390:
    unless_null $P5004, vivi_17085391
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_17085391:
    set $P5003, $P5004
  fallback5389:
    unless_null _lex_param_1, fallback5392
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback5392:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5393
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback5393:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1707_else5387 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_17135406
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2818
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_17115401
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2819
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5394
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5017
  fallback5394:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5395
    nqp_get_sc_object $P5021, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5396
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5022
  fallback5396:
    unless_null $P5019, vivi_17095397
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_17095397:
    set $P5018, $P5019
  fallback5395:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5398
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5026
  fallback5398:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5399
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5027
  fallback5399:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_17105400
  catch_handler_17115401:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_486_1356803026.47425' 
    capture_lex $P10001
    $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10002
    goto skip_handler_17105400
  skip_handler_17105400:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_17125405
  catch_handler_17135406:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_17125405
  skip_handler_17125405:
    goto if1707_end5388
  if1707_else5387:
    .const 'Sub' $P5036 = 'cuid_487_1356803026.47425' 
    capture_lex $P5036
    $P5037 = $P5036()
  if1707_end5388:
    set $P102, $P101
    unless_null _lex_param_1, fallback5412
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5039
  fallback5412:
    set $P5038, _lex_param_1["args"]
    unless_null $P5038, fallback5413
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5040
  fallback5413:
    unless $P5038 goto if1714_end5411 
.annotate 'line', 2832
.annotate 'line', 2833
    unless_null _lex_param_1, fallback5414
    nqp_get_sc_object $P5043, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5043
  fallback5414:
    set $P5042, _lex_param_1["args"]
    unless_null $P5042, fallback5415
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5044
  fallback5415:
    set $P5041, $P5042[0]
    unless_null $P5041, fallback5416
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5041, $P5045
  fallback5416:
    $P5046 = $P5041."ast"()
    set $P102, $P5046
.annotate 'line', 2834
    $P5047 = $P102."unshift"($P101)
  if1714_end5411:
.annotate 'line', 2836
    $P5048 = _lex_param_1."!make"($P102)
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_486_1356803026.47425") :anon :lex :outer("cuid_319_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2820
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2821
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5402
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5402:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5403
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5008
  fallback5403:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5404
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5009
  fallback5404:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_487_1356803026.47425") :anon :lex :outer("cuid_319_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2825
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5407
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5006
  fallback5407:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5408
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback5408:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5409
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5008
  fallback5409:
    clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2827
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_320_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2839
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5419
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback5419:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5420
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback5420:
    unless $P5003 goto if1715_else5417 
.annotate 'line', 2840
    unless_null _lex_param_1, fallback5421
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback5421:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5422
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback5422:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5423
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback5423:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1715_end5418
  if1715_else5417:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1715_end5418:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5424
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5016
  fallback5424:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5425
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5017
  fallback5425:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2843
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5426
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5025
  fallback5426:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_321_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2846
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2847
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5427
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5427:
    unless_null _lex_param_1, fallback5428
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5428:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5429
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5429:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_322_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2850
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback5430
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback5430:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5431
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback5431:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5434
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback5434:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5435
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback5435:
    unless $P5008 goto if1716_else5432 
.annotate 'line', 2852
    unless_null _lex_param_1, fallback5436
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5013
  fallback5436:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5437
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5014
  fallback5437:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5438
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback5438:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1716_end5433
  if1716_else5432:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1716_end5433:
    set $P102, $P5019
.annotate 'line', 2853
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5439
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback5439:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2854
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_323_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2857
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2858
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5440
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5440:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_324_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2861
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5441
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5441:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5442
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5442:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_325_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2863
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5052 = 'cuid_489_1356803026.47425' 
    capture_lex $P5052 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
.annotate 'line', 2864
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5443
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5008
  fallback5443:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5446
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5011
  fallback5446:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5447
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback5447:
    unless $P5010 goto if1717_end5445 
    .const 'Sub' $P5013 = 'cuid_489_1356803026.47425' 
    capture_lex $P5013
    $P5014 = $P5013()
  if1717_end5445:
    box $P5015, 0
    set $P102, $P5015
.annotate 'line', 2873
    $P5016 = $P101."list"()
    set $N5001, $P5016
    box $P5017, $N5001
    set $P103, $P5017
  while1721_test5460:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto while1721_done5464 
  while1721_redo5462:
.annotate 'line', 2874
    set $I5003, $P102
    set $P5018, $P101[$I5003]
    unless_null $P5018, fallback5469
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5019
  fallback5469:
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5470
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback5470:
    type_check $I5002, $P5018, $P5020
    set $I5006, $I5002
    unless $I5002 goto if1723_end5468 
.annotate 'line', 2875
    set $I5005, $P102
    set $P5025, $P101[$I5005]
    unless_null $P5025, fallback5471
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5026
  fallback5471:
    $P5027 = $P5025."name"()
    set $S5001, $P5027
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1723_end5468:
    unless $I5006 goto if1722_end5466 
    set $I5007, $P102
    set $I5008, $P102
    set $P5029, $P101[$I5008]
    unless_null $P5029, fallback5472
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5029, $P5030
  fallback5472:
    set $P5028, $P5029[0]
    unless_null $P5028, fallback5473
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5031
  fallback5473:
    set $P101[$I5007], $P5028
.annotate 'line', 2877
    set $I5009, $P102
    set $P5032, $P101[$I5009]
    unless_null $P5032, fallback5474
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5033
  fallback5474:
    $P5032."flat"(1)
    set $I5011, $P102
    set $P5034, $P101[$I5011]
    unless_null $P5034, fallback5479
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5034, $P5035
  fallback5479:
    nqp_get_sc_object $P5039, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5480
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5040
  fallback5480:
    type_check $I5010, $P5034, $P5036
    set $I5014, $I5010
    unless $I5010 goto if1725_end5478 
.annotate 'line', 2879
    set $I5013, $P102
    set $P5041, $P101[$I5013]
    unless_null $P5041, fallback5481
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5041, $P5042
  fallback5481:
    $P5043 = $P5041."name"()
    set $S5003, $P5043
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1725_end5478:
    box $P5048, $I5014
    set $P5047, $P5048
    unless $I5014 goto if1724_end5476 
.annotate 'line', 2878
    set $I5015, $P102
    set $P5044, $P101[$I5015]
    unless_null $P5044, fallback5482
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5045
  fallback5482:
    $P5046 = $P5044."named"(1)
    set $P5047, $P5046
  if1724_end5476:
  if1722_end5466:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5049, $N5004
    set $P102, $P5049
    set $P5049, tmp_2
    goto while1721_test5460 
  while1721_done5464:
.annotate 'line', 2883
    $P5051 = _lex_param_1."!make"($P101)
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_489_1356803026.47425") :anon :lex :outer("cuid_325_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2865
    .const 'Sub' $P5023 = 'cuid_488_1356803026.47425' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2866
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5448
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5004
  fallback5448:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5449
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback5449:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5456
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback5456:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1720_end5455 
.annotate 'line', 2867
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1720_end5455:
    set $I5005, $I5003
    unless $I5003 goto if1719_end5453 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1719_end5453:
    unless $I5005 goto if1718_else5450 
.annotate 'line', 2868
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5457:
    unless $P5016, for_done5459
    shift $P5019, $P5016
  for_redo5458:
    .const 'Sub' $P5018 = 'cuid_488_1356803026.47425' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5457
  for_done5459:
    set $P5022, $P5014
    goto if1718_end5451
  if1718_else5450:
.annotate 'line', 2870
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1718_end5451:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_488_1356803026.47425") :anon :lex :outer("cuid_489_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2868
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_326_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2886
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5483
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5483:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5484
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5484:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_327_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2888
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5485
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5485:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5486
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5486:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_328_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2890
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2891
    unless_null _lex_param_1, fallback5489
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5489:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5490
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5490:
    unless $P5001 goto if1726_else5487 
.annotate 'line', 2892
    unless_null _lex_param_1, fallback5491
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5006
  fallback5491:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5492
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5007
  fallback5492:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5493
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5008
  fallback5493:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1726_end5488
  if1726_else5487:
.annotate 'line', 2893
    nqp_get_sc_object $P5013, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5494
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback5494:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1726_end5488:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_329_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2896
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5497
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback5497:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5498
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback5498:
    unless $P5002 goto if1727_else5495 
.annotate 'line', 2898
.annotate 'line', 2899
    unless_null _lex_param_1, fallback5499
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5499:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5500
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5500:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5501
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5009
  fallback5501:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5506
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback5506:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1729_end5505 
.annotate 'line', 2900
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1729_end5505:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1728_end5503 
.annotate 'line', 2901
    nqp_get_sc_object $P5020, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5507
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback5507:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1728_end5503:
    goto if1727_end5496
  if1727_else5495:
.annotate 'line', 2904
.annotate 'line', 2905
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5508
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback5508:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
  if1727_end5496:
.annotate 'line', 2907
    $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2908
    $P5031 = _lex_param_1."!make"($P101)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_330_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2911
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5509
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5509:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5510
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5510:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_331_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2912
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5511
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5511:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5512
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5512:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_332_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2914
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_490_1356803026.47425' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5515
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback5515:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5516
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback5516:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5517
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5007
  fallback5517:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5518
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5008
  fallback5518:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5519
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5009
  fallback5519:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1730_else5513 
    .const 'Sub' $P5010 = 'cuid_490_1356803026.47425' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1730_end5514
  if1730_else5513:
    unless_null _lex_param_1, fallback5525
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5015
  fallback5525:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5526
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5016
  fallback5526:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5527
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5017
  fallback5527:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5528
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5018
  fallback5528:
    unless $P5012 goto if1731_else5523 
.annotate 'line', 2920
.annotate 'line', 2921
    unless_null _lex_param_1, fallback5529
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5020
  fallback5529:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5530
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5021
  fallback5530:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1731_end5524
  if1731_else5523:
.annotate 'line', 2923
.annotate 'line', 2924
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1731_end5524:
    set $P5027, $P5026
  if1730_end5514:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_490_1356803026.47425") :anon :lex :outer("cuid_332_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2915
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 2916
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5520
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback5520:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5521
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5009
  fallback5521:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5522
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5010
  fallback5522:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2918
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_333_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2928
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5533
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback5533:
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5534
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback5534:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1732_else5531 
    set $S5004, "list"
    goto if1732_end5532
  if1732_else5531:
    unless_null _lex_param_1, fallback5537
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5006
  fallback5537:
    set $P5005, _lex_param_1["sigil"]
    unless_null $P5005, fallback5538
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5007
  fallback5538:
    set $S5002, $P5005
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1733_else5535 
    set $S5003, "hash"
    goto if1733_end5536
  if1733_else5535:
    set $S5003, "item"
  if1733_end5536:
    set $S5004, $S5003
  if1732_end5532:
    box $P5008, $S5004
    set $P101, $P5008
.annotate 'line', 2932
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5539
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5013
  fallback5539:
    unless_null _lex_param_1, fallback5540
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5015
  fallback5540:
    set $P5014, _lex_param_1["semilist"]
    unless_null $P5014, fallback5541
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5016
  fallback5541:
    $P5017 = $P5014."ast"()
    $P5018 = $P5009."new"($P5017, "callmethod" :named("op"), $P101 :named("name"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_334_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2935
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5542
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5542:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5543
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5543:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_335_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2938
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5544
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5544:
    unless_null _lex_param_1, fallback5545
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5545:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5546
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5546:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_336_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2941
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2942
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5547
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5547:
    unless_null _lex_param_1, fallback5548
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5548:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5549
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5549:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_337_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2945
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2946
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5550
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5550:
    unless_null _lex_param_1, fallback5551
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5551:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5552
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5552:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_338_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2949
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2950
    unless_null _lex_param_1, fallback5553
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5553:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5554
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5554:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_339_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2953
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2954
    unless_null _lex_param_1, fallback5557
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5557:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5558
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5558:
    unless $P5001 goto if1734_else5555 
    unless_null _lex_param_1, fallback5559
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback5559:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5560
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback5560:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1734_end5556
  if1734_else5555:
    unless_null _lex_param_1, fallback5561
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback5561:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5562
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback5562:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1734_end5556:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_340_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2957
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5565
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback5565:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5566
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback5566:
    unless $P5002 goto if1735_else5563 
.annotate 'line', 2958
    unless_null _lex_param_1, fallback5567
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5006
  fallback5567:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5568
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5007
  fallback5568:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1735_end5564
  if1735_else5563:
    unless_null _lex_param_1, fallback5569
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback5569:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5570
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback5570:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1735_end5564:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5573
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5015
  fallback5573:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5574
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5016
  fallback5574:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if1736_end5572 
.annotate 'line', 2959
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
  if1736_end5572:
.annotate 'line', 2960
    unless_null _lex_param_1, fallback5577
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5019
  fallback5577:
    set $P5018, _lex_param_1["dec_number"]
    unless_null $P5018, fallback5578
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5020
  fallback5578:
    unless $P5018 goto if1737_else5575 
.annotate 'line', 2961
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["NVal"]
    unless_null $P5021, fallback5579
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5025
  fallback5579:
    $P5026 = $P5021."new"($P101 :named("value"))
    set $P5033, $P5026
    goto if1737_end5576
  if1737_else5575:
.annotate 'line', 2962
    nqp_get_sc_object $P5030, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["IVal"]
    unless_null $P5027, fallback5580
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5031
  fallback5580:
    $P5032 = $P5027."new"($P101 :named("value"))
    set $P5033, $P5032
  if1737_end5576:
    $P5034 = _lex_param_1."!make"($P5033)
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_341_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2965
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5581
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5581:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5582
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5582:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_342_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2966
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5583
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5583:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5584
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5584:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_343_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2967
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5585
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5585:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5586
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5586:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_344_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2968
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5587
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5587:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5588
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5588:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_345_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2969
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5589
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5589:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5590
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5590:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_346_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2970
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2971
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5591
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5591:
    unless_null _lex_param_1, fallback5592
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5592:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5593
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5593:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_347_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2974
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
.annotate 'line', 2975
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5594
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5595
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5008
  fallback5595:
    unless_null $P5005, vivi_17385596
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17385596:
    set $P5004, $P5005
  fallback5594:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2976
    set $P5011, $P101[0]
    unless_null $P5011, fallback5597
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5012
  fallback5597:
    nqp_get_sc_object $P5016, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5598
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5017
  fallback5598:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."push"($P5018)
.annotate 'line', 2977
    set $P5019, $P101[0]
    unless_null $P5019, fallback5599
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5020
  fallback5599:
    nqp_get_sc_object $P5024, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5600
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5025
  fallback5600:
.annotate 'line', 2979
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5601
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5030
  fallback5601:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2980
    nqp_get_sc_object $P5035, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5602
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5036
  fallback5602:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2981
    set $P5039, $P101[0]
    unless_null $P5039, fallback5603
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5040
  fallback5603:
    nqp_get_sc_object $P5044, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5604
    nqp_get_sc_object $P5045, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5041, $P5045
  fallback5604:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2982
    set $P5047, $P101[0]
    unless_null $P5047, fallback5605
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5047, $P5048
  fallback5605:
    nqp_get_sc_object $P5052, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5606
    nqp_get_sc_object $P5053, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5049, $P5053
  fallback5606:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2983
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2984
    $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2986
    find_dynamic_lex $P5056, "%*LANG"
    unless_null $P5056, fallback5607
    nqp_get_sc_object $P5059, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%LANG"]
    unless_null $P5057, fallback5608
    nqp_get_sc_object $P5061, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%LANG"], $P5062
    set $P5057, $P5062
  fallback5608:
    unless_null $P5057, vivi_17395609
    die "Contextual %*LANG not found"
    box $P5063, "Contextual %*LANG not found"
    set $P5057, $P5063
  vivi_17395609:
    set $P5056, $P5057
  fallback5607:
    set $P5055, $P5056["Regex-actions"]
    unless_null $P5055, fallback5610
    nqp_get_sc_object $P5064, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5064
  fallback5610:
    unless_null _lex_param_1, fallback5611
    nqp_get_sc_object $P5066, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5066
  fallback5611:
    set $P5065, _lex_param_1["p6regex"]
    unless_null $P5065, fallback5612
    nqp_get_sc_object $P5067, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5065, $P5067
  fallback5612:
    $P5068 = $P5065."ast"()
    $P5069 = $P5055."qbuildsub"($P5068, $P101)
    set $P102, $P5069
.annotate 'line', 2987
    nqp_get_sc_object $P5073, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback5613
    nqp_get_sc_object $P5074, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5070, $P5074
  fallback5613:
.annotate 'line', 2989
    new $P5075, 'ResizablePMCArray'
    box $P5076, "NQPRegex"
    push $P5075, $P5076
    $P5077 = "&lexical_package_lookup"($P5075, _lex_param_1)
    $P5078 = $P5070."new"($P5077, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5078
    set $P103["sink"], $P102
.annotate 'line', 2994
    $P5079 = _lex_param_1."!make"($P103)
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_348_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2997
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5614
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5614:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5615
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5615:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_349_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2998
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2999
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5616
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5616:
.annotate 'line', 3000
    unless_null _lex_param_1, fallback5617
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5617:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5618
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5618:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_350_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3003
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_351_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3007
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5619
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5619:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5620
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5620:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_352_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3009
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3010
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5621
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5621:
.annotate 'line', 3012
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5622
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback5622:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_353_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3016
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3017
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5623
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5623:
.annotate 'line', 3018
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5624
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback5624:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_354_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3025
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5625
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5625:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_355_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3026
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5626
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5626:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_356_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3027
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5627
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5627:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_357_1356803026.47425") :anon :lex :outer("cuid_358_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3029
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3030
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5628
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5628:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3111
    .const 'Sub' $P5014 = 'cuid_359_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_360_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_361_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_362_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_363_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_364_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_365_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_366_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_367_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_368_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_369_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_370_1356803026.47425' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_371_1356803026.47425' 
    capture_lex $P5014 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_359_1356803026.47425' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_360_1356803026.47425' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_361_1356803026.47425' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_362_1356803026.47425' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_363_1356803026.47425' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_364_1356803026.47425' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_365_1356803026.47425' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_366_1356803026.47425' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_367_1356803026.47425' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_368_1356803026.47425' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_369_1356803026.47425' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_370_1356803026.47425' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_371_1356803026.47425' 
    capture_lex $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_359_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3113
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 3114
    unless_null _lex_param_1, fallback5629
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback5629:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5630
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback5630:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 3115
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5631
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback5631:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_360_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3119
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3120
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5632
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5632:
    unless_null _lex_param_1, fallback5633
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5633:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5634
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5634:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_361_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3124
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3125
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5635
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5635:
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5636
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback5636:
.annotate 'line', 3126
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5637
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback5637:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3127
    unless_null _lex_param_1, fallback5638
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5018
  fallback5638:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5639
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5019
  fallback5639:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_362_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3131
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3132
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5640
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5640:
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5641
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback5641:
.annotate 'line', 3133
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5642
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback5642:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3134
    unless_null _lex_param_1, fallback5643
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5018
  fallback5643:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5644
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5019
  fallback5644:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_363_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3138
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3139
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5645
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5645:
    unless_null _lex_param_1, fallback5646
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback5646:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5647
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback5647:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5648
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5011
  fallback5648:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5649
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback5649:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_364_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3144
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3145
    nqp_get_sc_object $P5004, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5650
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback5650:
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5651
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback5651:
.annotate 'line', 3146
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5652
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback5652:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3147
    unless_null _lex_param_1, fallback5653
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5018
  fallback5653:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5654
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5019
  fallback5654:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_365_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3151
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 3152
    unless_null _lex_param_1, fallback5655
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback5655:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5656
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback5656:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3153
    $P101."blocktype"("immediate")
.annotate 'line', 3155
    nqp_get_sc_object $P5010, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback5657
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback5657:
.annotate 'line', 3156
    nqp_get_sc_object $P5015, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5658
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback5658:
.annotate 'line', 3158
    nqp_get_sc_object $P5020, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback5659
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback5659:
    $P5022 = $P5017."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3159
    nqp_get_sc_object $P5026, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5660
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5027
  fallback5660:
.annotate 'line', 3160
    nqp_get_sc_object $P5031, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Var"]
    unless_null $P5028, fallback5661
    nqp_get_sc_object $P5032, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5032
  fallback5661:
    $P5033 = $P5028."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5034 = $P5023."new"($P5033, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5035 = $P5012."new"($P5022, $P5034, "bind" :named("op"))
    $P5036 = $P5007."new"($P5035, $P101)
    set $P102, $P5036
.annotate 'line', 3167
    $P5037 = _lex_param_1."!make"($P102)
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_366_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3170
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_491_1356803026.47425' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_492_1356803026.47425' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5662
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback5662:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5663
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback5663:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5666
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback5666:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5667
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback5667:
    unless $P5007 goto if1740_else5664 
.annotate 'line', 3173
.annotate 'line', 3174
    unless_null _lex_param_1, fallback5668
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5012
  fallback5668:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5669
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5013
  fallback5669:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5670
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback5670:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3175
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if1740_end5665
  if1740_else5664:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1741_else5671 
    .const 'Sub' $P5018 = 'cuid_491_1356803026.47425' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if1741_end5672
  if1741_else5671:
.annotate 'line', 3185
.annotate 'line', 3186
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5689
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback5689:
.annotate 'line', 3188
    nqp_get_sc_object $P5028, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5690
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback5690:
    nqp_get_sc_object $P5033, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5691
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5034
  fallback5691:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5694
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5039
  fallback5694:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5695
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5040
  fallback5695:
    unless $P5038 goto if1746_else5692 
.annotate 'line', 3189
.annotate 'line', 3190
    unless_null _lex_param_1, fallback5696
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5046
  fallback5696:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5697
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5045, $P5047
  fallback5697:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5698
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5048
  fallback5698:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5700:
    unless $P5043, for_done5702
    shift $P5052, $P5043
  for_redo5701:
    .const 'Sub' $P5051 = 'cuid_492_1356803026.47425' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5700
  for_done5702:
    set $P5082, $P5041
    goto if1746_end5693
  if1746_else5692:
    unless_null _lex_param_1, fallback5705
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5054
  fallback5705:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5706
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5053, $P5055
  fallback5706:
    set $P5081, $P5053
    unless $P5053 goto if1747_end5704 
.annotate 'line', 3192
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1748_else5707 
.annotate 'line', 3194
    set $P5056, $P102[0]
    unless_null $P5056, fallback5709
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5056, $P5057
  fallback5709:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback5710
    nqp_get_sc_object $P5062, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5062
  fallback5710:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback5711
    nqp_get_sc_object $P5063, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5061, $P5063
  fallback5711:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback5712
    nqp_get_sc_object $P5064, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5060, $P5064
  fallback5712:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if1748_end5708
  if1748_else5707:
.annotate 'line', 3195
    set $P5069, $P102[0]
    unless_null $P5069, fallback5713
    nqp_get_sc_object $P5070, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5069, $P5070
  fallback5713:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback5714
    nqp_get_sc_object $P5074, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5074
  fallback5714:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback5715
    nqp_get_sc_object $P5075, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5073, $P5075
  fallback5715:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5716
    nqp_get_sc_object $P5076, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5072, $P5076
  fallback5716:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if1748_end5708:
    set $P5081, $P5080
  if1747_end5704:
    set $P5082, $P5081
  if1746_end5693:
    set $P5083, $P5082
  if1741_end5672:
  if1740_end5665:
.annotate 'line', 3198
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_491_1356803026.47425") :anon :lex :outer("cuid_366_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3177
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5673
    nqp_get_sc_object $P5007, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5674
    nqp_get_sc_object $P5009, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5674:
    unless_null $P5005, vivi_17425675
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_17425675:
    set $P5004, $P5005
  fallback5673:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5676
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5012
  fallback5676:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if1743_end5678 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5679
    nqp_get_sc_object $P5018, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5680
    nqp_get_sc_object $P5020, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5680:
    unless_null $P5016, vivi_17445681
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_17445681:
    set $P5015, $P5016
  fallback5679:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5682
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5023
  fallback5682:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if1743_end5678:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback5683
    nqp_get_sc_object $P5029, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback5684
    nqp_get_sc_object $P5031, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback5684:
    unless_null $P5027, vivi_17455685
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_17455685:
    set $P5026, $P5027
  fallback5683:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback5686
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5034
  fallback5686:
    set $S5005, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5035, $S5003
    set $P102, $P5035
.annotate 'line', 3182
    nqp_get_sc_object $P5039, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback5687
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5040
  fallback5687:
    find_lex $P5041, "$/"
.annotate 'line', 3183
    nqp_get_sc_object $P5045, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback5688
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5046
  fallback5688:
    find_lex $P5047, "$/"
    $P5048 = $P5042."new"($P102, "literal" :named("rxtype"), $P5047 :named("node"))
    $P5049 = $P5036."new"($P5048, "sym" :named("name"), "subcapture" :named("rxtype"), $P5041 :named("node"))
    store_lex "$qast", $P5049
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_492_1356803026.47425") :anon :lex :outer("cuid_366_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3190
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5699
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5699:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_367_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3201
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3202
    unless_null _lex_param_1, fallback5717
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback5717:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5718
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback5718:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_368_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3205
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$code", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 3206
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5719
    nqp_get_sc_object $P5005, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5720
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback5720:
    unless_null $P5003, vivi_17495721
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_17495721:
    set $P5002, $P5003
  fallback5719:
    $P5008 = $P5002."create_code"(_lex_param_1, "", 0, "NQPRegex" :named("code_type_name"))
    set $P101, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback5724
    nqp_get_sc_object $P5012, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%RX"]
    unless_null $P5010, fallback5725
    nqp_get_sc_object $P5014, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%RX"], $P5015
    set $P5010, $P5015
  fallback5725:
    unless_null $P5010, vivi_17515726
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5010, $P5016
  vivi_17515726:
    set $P5009, $P5010
  fallback5724:
    exists $I5001, $P5009["code"]
    unless $I5001 goto if1750_end5723 
.annotate 'line', 3207
.annotate 'line', 3208
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback5727
    nqp_get_sc_object $P5021, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback5728
    nqp_get_sc_object $P5023, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback5728:
    unless_null $P5019, vivi_17525729
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_17525729:
    set $P5018, $P5019
  fallback5727:
    set $P5017, $P5018["code"]
    unless_null $P5017, fallback5730
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5026
  fallback5730:
    $P5027 = $P5017."ADD_NESTED_CODE"($P101)
  if1750_end5723:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_369_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3213
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 3214
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_370_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3217
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 3218
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_371_1356803026.47425") :anon :lex :outer("cuid_372_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3221
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_493_1356803026.47425' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next5731:
    unless $P5004, for_done5733
    shift $P5006, $P5004
  for_redo5732:
    .const 'Sub' $P5005 = 'cuid_493_1356803026.47425' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next5731
  for_done5733:
.annotate 'line', 3226
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_493_1356803026.47425") :anon :lex :outer("cuid_371_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3223
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3224
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1356803026.47425") :anon :lex :outer("cuid_1_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 3231
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_495_1356803026.47425") :load :init
.annotate 'file', "src/stage2/gen/NQP.pm"
    .const 'Sub' $P5001 = 'cuid_494_1356803026.47425' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_1_1356803026.47425" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304"
    set cur_sc, $P5001
    cur_sc."set_description"("src/stage2/gen/NQP.pm")
    new $P5002, 'ResizablePMCArray'
    set conflicts, $P5002
    new $P5003, 'ResizableStringArray'
    null $S5001
    push $P5003, $S5001
    push $P5003, "P6opaque"
    push $P5003, "QAST"
    push $P5003, "QRegex"
    push $P5003, "NQPCursorRole"
    push $P5003, "5AC43FAF892FF5DAA29F5960E2BD4FECAD5285F9-1356802996.80852"
    push $P5003, "src/stage2/QRegex.nqp"
    push $P5003, "NQPMatch"
    push $P5003, "NQPCursor"
    push $P5003, "NQPRegexMethod"
    push $P5003, "NQPRegex"
    push $P5003, "HLL"
    push $P5003, "PIRT"
    push $P5003, "NQP"
    push $P5003, "DEFAULT"
    push $P5003, "CREATE"
    push $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733"
    push $P5003, "src/stage2/NQPCORE.setting"
    push $P5003, "bless"
    push $P5003, "BUILDALL"
    push $P5003, "new"
    push $P5003, "Str"
    push $P5003, "Numeric"
    push $P5003, "Int"
    push $P5003, "at_pos"
    push $P5003, "at_key"
    push $P5003, "defined"
    push $P5003, "ACCEPTS"
    push $P5003, "isa"
    push $P5003, "__dump"
    push $P5003, "BUILD"
    push $P5003, "slot_for_object"
    push $P5003, "16CA0704286B861CA68CF47DE2ED31030BAAEB36-1356803001.77605"
    push $P5003, "src/stage2/gen/NQPHLL.pm"
    push $P5003, "add_object"
    push $P5003, "add_root_code_ref"
    push $P5003, "update_root_code_ref"
    push $P5003, "is_precompilation_mode"
    push $P5003, "add_load_dependency_task"
    push $P5003, "add_fixup_task"
    push $P5003, "sc"
    push $P5003, "handle"
    push $P5003, "code_ref_blocks"
    push $P5003, "load_dependency_tasks"
    push $P5003, "fixup_tasks"
    push $P5003, "push_lexpad"
    push $P5003, "pop_lexpad"
    push $P5003, "cur_lexpad"
    push $P5003, "get_legacy_block_list"
    push $P5003, "load_setting"
    push $P5003, "load_module"
    push $P5003, "import"
    push $P5003, "install_package_symbol"
    push $P5003, "install_lexical_symbol"
    push $P5003, "install_package_routine"
    push $P5003, "create_code"
    push $P5003, "pkg_create_mo"
    push $P5003, "pkg_add_attribute"
    push $P5003, "pkg_add_method"
    push $P5003, "set_routine_signature"
    push $P5003, "pkg_set_body_block"
    push $P5003, "pkg_add_parent_or_role"
    push $P5003, "pkg_add_parrot_vtable_handler_mapping"
    push $P5003, "pkg_compose"
    push $P5003, "run_begin_block"
    push $P5003, "libs"
    push $P5003, "add_initializations"
    push $P5003, "is_lexical"
    push $P5003, "is_package"
    push $P5003, "is_scope"
    push $P5003, "known_sym"
    push $P5003, "find_sym"
    push $P5003, "$!sc"
    push $P5003, "$!handle"
    push $P5003, "$!precomp_mode"
    push $P5003, "$!num_code_refs"
    push $P5003, "$!code_ref_blocks"
    push $P5003, "@!load_dependency_tasks"
    push $P5003, "@!fixup_tasks"
    push $P5003, "%!addr_to_slot"
    push $P5003, "@!BLOCKS"
    push $P5003, "%!code_objects_to_fix_up"
    push $P5003, "%!code_object_types"
    push $P5003, "%!code_object_fixup_list"
    push $P5003, "%!code_stub_sc_idx"
    push $P5003, "MATCH"
    push $P5003, "Bool"
    push $P5003, "parse"
    push $P5003, "!INTERPOLATE"
    push $P5003, "!INTERPOLATE_REGEX"
    push $P5003, "orig"
    push $P5003, "target"
    push $P5003, "from"
    push $P5003, "pos"
    push $P5003, "CAPHASH"
    push $P5003, "!cursor_init"
    push $P5003, "!cursor_start"
    push $P5003, "!cursor_start_subcapture"
    push $P5003, "!cursor_capture"
    push $P5003, "!cursor_push_cstack"
    push $P5003, "!cursor_pass"
    push $P5003, "!cursor_fail"
    push $P5003, "!cursor_pos"
    push $P5003, "!cursor_next"
    push $P5003, "!cursor_more"
    push $P5003, "!reduce"
    push $P5003, "!reduce_with_match"
    push $P5003, "!shared"
    push $P5003, "!protoregex"
    push $P5003, "!protoregex_nfa"
    push $P5003, "!protoregex_table"
    push $P5003, "!alt"
    push $P5003, "!alt_nfa"
    push $P5003, "!precompute_nfas"
    push $P5003, "!dba"
    push $P5003, "!highwater"
    push $P5003, "!highexpect"
    push $P5003, "!fresh_highexpect"
    push $P5003, "!set_highexpect"
    push $P5003, "!clear_highwater"
    push $P5003, "!BACKREF"
    push $P5003, "!LITERAL"
    push $P5003, "at"
    push $P5003, "before"
    push $P5003, "after"
    push $P5003, "ws"
    push $P5003, "ww"
    push $P5003, "wb"
    push $P5003, "ident"
    push $P5003, "alpha"
    push $P5003, "alnum"
    push $P5003, "upper"
    push $P5003, "lower"
    push $P5003, "digit"
    push $P5003, "xdigit"
    push $P5003, "space"
    push $P5003, "blank"
    push $P5003, "cntrl"
    push $P5003, "punct"
    push $P5003, "FAILGOAL"
    push $P5003, "throw_unrecog_backslash_seq"
    push $P5003, "termish"
    push $P5003, "term"
    push $P5003, "infix"
    push $P5003, "prefix"
    push $P5003, "postfix"
    push $P5003, "circumfix"
    push $P5003, "postcircumfix"
    push $P5003, "term:sym<circumfix>"
    push $P5003, "infixish"
    push $P5003, "prefixish"
    push $P5003, "postfixish"
    push $P5003, "nullterm"
    push $P5003, "nullterm_alt"
    push $P5003, "nulltermish"
    push $P5003, "quote_delimited"
    push $P5003, "quote_atom"
    push $P5003, "decint"
    push $P5003, "decints"
    push $P5003, "hexint"
    push $P5003, "hexints"
    push $P5003, "octint"
    push $P5003, "octints"
    push $P5003, "binint"
    push $P5003, "binints"
    push $P5003, "integer"
    push $P5003, "dec_number"
    push $P5003, "escale"
    push $P5003, "quote_escape"
    push $P5003, "quote_escape:sym<backslash>"
    push $P5003, "quote_escape:sym<stopper>"
    push $P5003, "quote_escape:sym<bs>"
    push $P5003, "quote_escape:sym<nl>"
    push $P5003, "quote_escape:sym<cr>"
    push $P5003, "quote_escape:sym<tab>"
    push $P5003, "quote_escape:sym<ff>"
    push $P5003, "quote_escape:sym<esc>"
    push $P5003, "quote_escape:sym<hex>"
    push $P5003, "quote_escape:sym<oct>"
    push $P5003, "quote_escape:sym<chr>"
    push $P5003, "quote_escape:sym<0>"
    push $P5003, "quote_escape:sym<misc>"
    push $P5003, "charname"
    push $P5003, "charnames"
    push $P5003, "charspec"
    push $P5003, "O"
    push $P5003, "panic"
    push $P5003, "peek_delimiters"
    push $P5003, "quote_EXPR"
    push $P5003, "quotemod_check"
    push $P5003, "starter"
    push $P5003, "stopper"
    push $P5003, "split_words"
    push $P5003, "EXPR"
    push $P5003, "EXPR_reduce"
    push $P5003, "ternary"
    push $P5003, "MARKER"
    push $P5003, "MARKED"
    push $P5003, "LANG"
    push $P5003, "TOP"
    push $P5003, "identifier"
    push $P5003, "name"
    push $P5003, "deflongname"
    push $P5003, "ENDSTMT"
    push $P5003, "unv"
    push $P5003, "pod_comment"
    push $P5003, "comp_unit"
    push $P5003, "statementlist"
    push $P5003, "statement"
    push $P5003, "eat_terminator"
    push $P5003, "xblock"
    push $P5003, "pblock"
    push $P5003, "lambda"
    push $P5003, "block"
    push $P5003, "blockoid"
    push $P5003, "newpad"
    push $P5003, "outerctx"
    push $P5003, "finishpad"
    push $P5003, "you_are_here"
    push $P5003, "terminator"
    push $P5003, "terminator:sym<;>"
    push $P5003, "terminator:sym<}>"
    push $P5003, "statement_control"
    push $P5003, "statement_control:sym<use>"
    push $P5003, "statement_control:sym<if>"
    push $P5003, "statement_control:sym<unless>"
    push $P5003, "statement_control:sym<while>"
    push $P5003, "statement_control:sym<repeat>"
    push $P5003, "statement_control:sym<for>"
    push $P5003, "statement_control:sym<CATCH>"
    push $P5003, "statement_control:sym<CONTROL>"
    push $P5003, "statement_prefix"
    push $P5003, "statement_prefix:sym<BEGIN>"
    push $P5003, "statement_prefix:sym<INIT>"
    push $P5003, "statement_prefix:sym<try>"
    push $P5003, "blorst"
    push $P5003, "statement_mod_cond"
    push $P5003, "statement_mod_cond:sym<if>"
    push $P5003, "statement_mod_cond:sym<unless>"
    push $P5003, "statement_mod_loop"
    push $P5003, "statement_mod_loop:sym<while>"
    push $P5003, "statement_mod_loop:sym<until>"
    push $P5003, "statement_mod_loop:sym<for>"
    push $P5003, "term:sym<fatarrow>"
    push $P5003, "term:sym<colonpair>"
    push $P5003, "term:sym<variable>"
    push $P5003, "term:sym<package_declarator>"
    push $P5003, "term:sym<scope_declarator>"
    push $P5003, "term:sym<routine_declarator>"
    push $P5003, "term:sym<multi_declarator>"
    push $P5003, "term:sym<regex_declarator>"
    push $P5003, "term:sym<statement_prefix>"
    push $P5003, "term:sym<lambda>"
    push $P5003, "fatarrow"
    push $P5003, "colonpair"
    push $P5003, "variable"
    push $P5003, "sigil"
    push $P5003, "twigil"
    push $P5003, "package_declarator"
    push $P5003, "package_declarator:sym<module>"
    push $P5003, "package_declarator:sym<knowhow>"
    push $P5003, "package_declarator:sym<class>"
    push $P5003, "package_declarator:sym<grammar>"
    push $P5003, "package_declarator:sym<role>"
    push $P5003, "package_declarator:sym<native>"
    push $P5003, "package_declarator:sym<stub>"
    push $P5003, "package_def"
    push $P5003, "role_params"
    push $P5003, "scope_declarator"
    push $P5003, "scope_declarator:sym<my>"
    push $P5003, "scope_declarator:sym<our>"
    push $P5003, "scope_declarator:sym<has>"
    push $P5003, "scoped"
    push $P5003, "typename"
    push $P5003, "declarator"
    push $P5003, "variable_declarator"
    push $P5003, "routine_declarator"
    push $P5003, "routine_declarator:sym<sub>"
    push $P5003, "routine_declarator:sym<method>"
    push $P5003, "routine_def"
    push $P5003, "method_def"
    push $P5003, "onlystar"
    push $P5003, "multi_declarator"
    push $P5003, "multi_declarator:sym<multi>"
    push $P5003, "multi_declarator:sym<proto>"
    push $P5003, "multi_declarator:sym<null>"
    push $P5003, "signature"
    push $P5003, "parameter"
    push $P5003, "param_var"
    push $P5003, "named_param"
    push $P5003, "default_value"
    push $P5003, "trait"
    push $P5003, "trait_mod"
    push $P5003, "trait_mod:sym<is>"
    push $P5003, "regex_declarator"
    push $P5003, "dotty"
    push $P5003, "term:sym<self>"
    push $P5003, "term:sym<identifier>"
    push $P5003, "term:sym<name>"
    push $P5003, "term:sym<pir::op>"
    push $P5003, "term:sym<pir::const>"
    push $P5003, "term:sym<nqp::op>"
    push $P5003, "term:sym<onlystar>"
    push $P5003, "args"
    push $P5003, "arglist"
    push $P5003, "term:sym<value>"
    push $P5003, "value"
    push $P5003, "number"
    push $P5003, "quote"
    push $P5003, "quote:sym<apos>"
    push $P5003, "quote:sym<dblq>"
    push $P5003, "quote:sym<q>"
    push $P5003, "quote:sym<qq>"
    push $P5003, "quote:sym<Q>"
    push $P5003, "quote:sym<Q:PIR>"
    push $P5003, "quote:sym</ />"
    push $P5003, "quote_escape:sym<$>"
    push $P5003, "quote_escape:sym<{ }>"
    push $P5003, "circumfix:sym<( )>"
    push $P5003, "circumfix:sym<[ ]>"
    push $P5003, "circumfix:sym<ang>"
    push $P5003, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5003, "circumfix:sym<{ }>"
    push $P5003, "circumfix:sym<sigil>"
    push $P5003, "semilist"
    push $P5003, "infixstopper"
    push $P5003, "postcircumfix:sym<[ ]>"
    push $P5003, "postcircumfix:sym<{ }>"
    push $P5003, "postcircumfix:sym<ang>"
    push $P5003, "postcircumfix:sym<( )>"
    push $P5003, "postfix:sym<.>"
    push $P5003, "prefix:sym<++>"
    push $P5003, "prefix:sym<-->"
    push $P5003, "postfix:sym<++>"
    push $P5003, "postfix:sym<-->"
    push $P5003, "infix:sym<**>"
    push $P5003, "prefix:sym<+>"
    push $P5003, "prefix:sym<~>"
    push $P5003, "prefix:sym<->"
    push $P5003, "prefix:sym<?>"
    push $P5003, "prefix:sym<!>"
    push $P5003, "prefix:sym<|>"
    push $P5003, "infix:sym<*>"
    push $P5003, "infix:sym</>"
    push $P5003, "infix:sym<%>"
    push $P5003, "infix:sym<+&>"
    push $P5003, "infix:sym<+>"
    push $P5003, "infix:sym<->"
    push $P5003, "infix:sym<+|>"
    push $P5003, "infix:sym<+^>"
    push $P5003, "infix:sym<~>"
    push $P5003, "infix:sym<==>"
    push $P5003, "infix:sym<!=>"
    push $P5003, "infix:sym<<=>"
    push $P5003, "infix:sym<>=>"
    push $P5003, "infix:sym<<>"
    push $P5003, "infix:sym<>>"
    push $P5003, "infix:sym<eq>"
    push $P5003, "infix:sym<ne>"
    push $P5003, "infix:sym<le>"
    push $P5003, "infix:sym<ge>"
    push $P5003, "infix:sym<lt>"
    push $P5003, "infix:sym<gt>"
    push $P5003, "infix:sym<=:=>"
    push $P5003, "infix:sym<~~>"
    push $P5003, "infix:sym<&&>"
    push $P5003, "infix:sym<||>"
    push $P5003, "infix:sym<//>"
    push $P5003, "infix:sym<?? !!>"
    push $P5003, "infix:sym<=>"
    push $P5003, "infix:sym<:=>"
    push $P5003, "infix:sym<::=>"
    push $P5003, "infix:sym<,>"
    push $P5003, "prefix:sym<return>"
    push $P5003, "prefix:sym<make>"
    push $P5003, "term:sym<last>"
    push $P5003, "term:sym<next>"
    push $P5003, "term:sym<redo>"
    push $P5003, "smartmatch"
    push $P5003, "$!shared"
    push $P5003, "$!from"
    push $P5003, "$!pos"
    push $P5003, "$!match"
    push $P5003, "$!name"
    push $P5003, "$!bstack"
    push $P5003, "$!cstack"
    push $P5003, "$!regexsub"
    push $P5003, "$!restart"
    push $P5003, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163"
    push $P5003, "src/stage2/gen/NQPP6QRegex.pm"
    push $P5003, "obs"
    push $P5003, "throw_unrecognized_metachar"
    push $P5003, "throw_null_pattern"
    push $P5003, "normspace"
    push $P5003, "arg"
    push $P5003, "nibbler"
    push $P5003, "rxstopper"
    push $P5003, "termaltseq"
    push $P5003, "termconjseq"
    push $P5003, "termalt"
    push $P5003, "termconj"
    push $P5003, "quantified_atom"
    push $P5003, "separator"
    push $P5003, "atom"
    push $P5003, "quantifier"
    push $P5003, "quantifier:sym<*>"
    push $P5003, "quantifier:sym<+>"
    push $P5003, "quantifier:sym<?>"
    push $P5003, "quantifier:sym<{N,M}>"
    push $P5003, "quantifier:sym<**>"
    push $P5003, "backmod"
    push $P5003, "metachar"
    push $P5003, "metachar:sym<ws>"
    push $P5003, "metachar:sym<[ ]>"
    push $P5003, "metachar:sym<( )>"
    push $P5003, "metachar:sym<'>"
    push $P5003, "metachar:sym<\">"
    push $P5003, "metachar:sym<.>"
    push $P5003, "metachar:sym<^>"
    push $P5003, "metachar:sym<^^>"
    push $P5003, "metachar:sym<$>"
    push $P5003, "metachar:sym<$$>"
    push $P5003, "metachar:sym<:::>"
    push $P5003, "metachar:sym<::>"
    push $P5003, "metachar:sym<lwb>"
    push $P5003, "metachar:sym<rwb>"
    push $P5003, "metachar:sym<from>"
    push $P5003, "metachar:sym<to>"
    push $P5003, "metachar:sym<bs>"
    push $P5003, "metachar:sym<mod>"
    push $P5003, "metachar:sym<quantifier>"
    push $P5003, "metachar:sym<~>"
    push $P5003, "metachar:sym<{*}>"
    push $P5003, "metachar:sym<assert>"
    push $P5003, "metachar:sym<var>"
    push $P5003, "backslash"
    push $P5003, "backslash:sym<s>"
    push $P5003, "backslash:sym<b>"
    push $P5003, "backslash:sym<e>"
    push $P5003, "backslash:sym<f>"
    push $P5003, "backslash:sym<h>"
    push $P5003, "backslash:sym<r>"
    push $P5003, "backslash:sym<t>"
    push $P5003, "backslash:sym<v>"
    push $P5003, "backslash:sym<o>"
    push $P5003, "backslash:sym<x>"
    push $P5003, "backslash:sym<c>"
    push $P5003, "backslash:sym<A>"
    push $P5003, "backslash:sym<z>"
    push $P5003, "backslash:sym<Z>"
    push $P5003, "backslash:sym<Q>"
    push $P5003, "backslash:sym<unrec>"
    push $P5003, "backslash:sym<misc>"
    push $P5003, "assertion"
    push $P5003, "assertion:sym<?>"
    push $P5003, "assertion:sym<!>"
    push $P5003, "assertion:sym<|>"
    push $P5003, "assertion:sym<method>"
    push $P5003, "assertion:sym<name>"
    push $P5003, "assertion:sym<[>"
    push $P5003, "cclass_elem"
    push $P5003, "mod_internal"
    push $P5003, "mod_ident"
    push $P5003, "mod_ident:sym<ignorecase>"
    push $P5003, "mod_ident:sym<ratchet>"
    push $P5003, "mod_ident:sym<sigspace>"
    push $P5003, "mod_ident:sym<dba>"
    push $P5003, "mod_ident:sym<oops>"
    push $P5003, "metachar:sym<:my>"
    push $P5003, "metachar:sym<{ }>"
    push $P5003, "metachar:sym<nqpvar>"
    push $P5003, "assertion:sym<{ }>"
    push $P5003, "assertion:sym<?{ }>"
    push $P5003, "assertion:sym<var>"
    push $P5003, "codeblock"
    push $P5003, "ints_to_string"
    push $P5003, "CTXSAVE"
    push $P5003, "SET_BLOCK_OUTER_CTX"
    push $P5003, "qbuildsub"
    push $P5003, "alt_nfas"
    push $P5003, "subrule_alias"
    push $P5003, "flip_ast"
    push $P5003, "create_regex_code_object"
    push $P5003, "store_regex_caps"
    push $P5003, "store_regex_nfa"
    push $P5003, "store_regex_alt_nfa"
    push $P5003, "language"
    push $P5003, "compiler"
    push $P5003, "config"
    push $P5003, "autoprint"
    push $P5003, "interactive"
    push $P5003, "eval"
    push $P5003, "ctxsave"
    push $P5003, "stages"
    push $P5003, "parsegrammar"
    push $P5003, "parseactions"
    push $P5003, "interactive_banner"
    push $P5003, "interactive_prompt"
    push $P5003, "compiler_progname"
    push $P5003, "commandline_options"
    push $P5003, "command_line"
    push $P5003, "command_eval"
    push $P5003, "process_args"
    push $P5003, "evalfiles"
    push $P5003, "compile"
    push $P5003, "start"
    push $P5003, "past"
    push $P5003, "post"
    push $P5003, "pirbegin"
    push $P5003, "pir"
    push $P5003, "evalpmc"
    push $P5003, "dumper"
    push $P5003, "usage"
    push $P5003, "version"
    push $P5003, "show-config"
    push $P5003, "verbose-config"
    push $P5003, "vmstat"
    push $P5003, "nqpevent"
    push $P5003, "removestage"
    push $P5003, "addstage"
    push $P5003, "parse_name"
    push $P5003, "lineof"
    push $P5003, "user-progname"
    push $P5003, "cli-options"
    push $P5003, "cli-arguments"
    push $P5003, "@!stages"
    push $P5003, "$!parsegrammar"
    push $P5003, "$!parseactions"
    push $P5003, "@!cmdoptions"
    push $P5003, "$!usage"
    push $P5003, "$!compiler_progname"
    push $P5003, "$!language"
    push $P5003, "%!config"
    push $P5003, "$!user_progname"
    push $P5003, "@!cli-arguments"
    push $P5003, "%!cli-options"
    push $P5003, ""
    push $P5003, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, "alt_nfa__1_1356803027.89583"
    push $P5003, "alt_nfa__2_1356803027.91348"
    push $P5003, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5003, "alt_nfa__4_1356803027.93278"
    push $P5003, "alt_nfa__3_1356803027.92376"
    push $P5003, "alt_nfa__6_1356803028.05006"
    push $P5003, "alt_nfa__5_1356803028.03707"
    push $P5003, "alt_nfa__7_1356803028.14512"
    push $P5003, "alt_nfa__9_1356803028.16597"
    push $P5003, "alt_nfa__8_1356803028.15148"
    push $P5003, "{"
    push $P5003, "alt_nfa__10_1356803028.19517"
    push $P5003, "alt_nfa__11_1356803028.20112"
    push $P5003, ";"
    push $P5003, "}"
    push $P5003, "sym"
    push $P5003, "else"
    push $P5003, "alt_nfa__12_1356803028.33976"
    push $P5003, "wu"
    push $P5003, "alt_nfa__13_1356803028.36143"
    push $P5003, "alt_nfa__14_1356803028.36174"
    push $P5003, "alt_nfa__15_1356803028.36184"
    push $P5003, "alt_nfa__16_1356803028.416"
    push $P5003, "cond"
    push $P5003, "alt_nfa__17_1356803028.49217"
    push $P5003, "alt_nfa__18_1356803028.50029"
    push $P5003, "key"
    push $P5003, "val"
    push $P5003, "not"
    push $P5003, "alt_nfa__19_1356803028.5767"
    push $P5003, "desigilname"
    push $P5003, "<["
    push $P5003, "/_!"
    push $P5003, "alt_nfa__20_1356803028.59225"
    push $P5003, "$@%&"
    push $P5003, "*!?"
    push $P5003, "metaclass"
    push $P5003, "repr"
    push $P5003, "export"
    push $P5003, "parent"
    push $P5003, "role"
    push $P5003, "alt_nfa__21_1356803028.91165"
    push $P5003, "alt_nfa__22_1356803028.92747"
    push $P5003, "alt_nfa__23_1356803028.98103"
    push $P5003, "latename"
    push $P5003, "private"
    push $P5003, "alt_nfa__24_1356803029.01884"
    push $P5003, "invocant"
    push $P5003, "alt_nfa__26_1356803029.09676"
    push $P5003, "alt_nfa__25_1356803029.09142"
    push $P5003, "definedness"
    push $P5003, "quant"
    push $P5003, "_DU"
    push $P5003, "alt_nfa__27_1356803029.15906"
    push $P5003, "alt_nfa__28_1356803029.15937"
    push $P5003, "alt_nfa__29_1356803029.15962"
    push $P5003, "/!"
    push $P5003, "alt_nfa__30_1356803029.17074"
    push $P5003, "longname"
    push $P5003, "proto"
    push $P5003, "p6regex"
    push $P5003, "alt_nfa__31_1356803029.28965"
    push $P5003, "alt_nfa__32_1356803029.29032"
    push $P5003, "alt_nfa__33_1356803029.29056"
    push $P5003, "'\""
    push $P5003, "("
    push $P5003, "alt_nfa__34_1356803029.31576"
    push $P5003, "alt_nfa__35_1356803029.31598"
    push $P5003, "op"
    push $P5003, "const"
    push $P5003, "alt_nfa__36_1356803029.51455"
    push $P5003, "alt_nfa__37_1356803029.52511"
    push $P5003, "sign"
    push $P5003, "alt_nfa__38_1356803029.53519"
    push $P5003, "'"
    push $P5003, "\""
    push $P5003, "$"
    push $P5003, "<"
    push $P5003, utf8:"\x{ab}"
    push $P5003, "OPER"
    push $P5003, ">"
    push $P5003, "}/"
    push $P5003, "var"
    push $P5003, "$@&"
    push $P5003, "alt_nfa__39_1356803030.40868"
    push $P5003, "alt_nfa__40_1356803030.43512"
    push $P5003, "alt_nfa__41_1356803030.44972"
    push $P5003, "zw"
    push $P5003, "?!"
    push $P5003, "alt_nfa__42_1356803030.48491"
    push $P5003, "$@"
    push $P5003, "__6MODEL_CORE__"
    push $P5003, "GLOBALish"
    push $P5003, "EXPORT"
    push $P5003, "B27170BB1F9774DD835DEDBDD20EF3A48AB4CAFF-1356802988.14084"
    push $P5003, "src/stage2/gen/nqp-mo.pm"
    push $P5003, "NQP::World"
    push $P5003, "NQP::Grammar"
    push $P5003, "alt_nfa__1_1356803001.91009"
    push $P5003, "alt_nfa__2_1356803001.9453"
    push $P5003, "alt_nfa__3_1356803002.06166"
    push $P5003, "alt_nfa__4_1356803002.06205"
    push $P5003, "alt_nfa__5_1356803002.09611"
    push $P5003, "alt_nfa__6_1356803002.17598"
    push $P5003, "alt_nfa__7_1356803002.18903"
    push $P5003, "alt_nfa__8_1356803002.22746"
    push $P5003, "alt_nfa__9_1356803002.26755"
    push $P5003, "shared"
    push $P5003, "match"
    push $P5003, "bstack"
    push $P5003, "cstack"
    push $P5003, "regexsub"
    push $P5003, "restart"
    push $P5003, "NQP::Regex"
    push $P5003, "alt_nfa__1_1356803021.73087"
    push $P5003, "alt_nfa__2_1356803021.73767"
    push $P5003, "alt_nfa__3_1356803021.76411"
    push $P5003, "alt_nfa__4_1356803021.87678"
    push $P5003, "alt_nfa__5_1356803021.90024"
    push $P5003, "alt_nfa__6_1356803021.96272"
    push $P5003, "alt_nfa__7_1356803021.98947"
    push $P5003, "alt_nfa__8_1356803022.01056"
    push $P5003, "alt_nfa__9_1356803022.08499"
    push $P5003, "alt_nfa__10_1356803022.20777"
    push $P5003, "alt_nfa__11_1356803022.2157"
    push $P5003, "alt_nfa__12_1356803022.32353"
    push $P5003, "alt_nfa__13_1356803022.38806"
    push $P5003, "alt_nfa__14_1356803022.40005"
    push $P5003, "alt_nfa__15_1356803022.50272"
    push $P5003, "alt_nfa__16_1356803022.51388"
    push $P5003, "alt_nfa__17_1356803022.54646"
    push $P5003, "alt_nfa__18_1356803022.5546"
    push $P5003, "alt_nfa__19_1356803022.61783"
    push $P5003, "alt_nfa__20_1356803022.61833"
    push $P5003, "alt_nfa__21_1356803022.61857"
    push $P5003, "alt_nfa__23_1356803022.64835"
    push $P5003, "alt_nfa__24_1356803022.64869"
    push $P5003, "alt_nfa__22_1356803022.62606"
    push $P5003, "NQP::Actions"
    push $P5003, "NQP::RegexActions"
    push $P5003, "NQP::Compiler"
    push $P5003, "CompileTimeValue"
    push $P5003, "3B5823CF115D2D332A76E16C0814B4A030A2FFA1-1356802994.51822"
    push $P5003, "src/stage2/QASTNode.nqp"
    push $P5003, "SpecialArg"
    push $P5003, "Node"
    push $P5003, "Regex"
    push $P5003, "IVal"
    push $P5003, "NVal"
    push $P5003, "SVal"
    push $P5003, "BVal"
    push $P5003, "WVal"
    push $P5003, "Want"
    push $P5003, "Var"
    push $P5003, "VarWithFallback"
    push $P5003, "Op"
    push $P5003, "VM"
    push $P5003, "Stmts"
    push $P5003, "Stmt"
    push $P5003, "Block"
    push $P5003, "Unquote"
    push $P5003, "CompUnit"
    push $P5003, "InlinePlaceholder"
    push $P5003, "Operations"
    push $P5003, "6D5363FE382C81D39B87FF3F759F46DDC14C118A-1356803007.62094"
    push $P5003, "src/stage2/QAST.nqp"
    push $P5003, "Compiler"
    push $P5003, "NFA"
    push $P5003, "P6Regex"
    push $P5003, "Grammar"
    push $P5003, "Actions"
    push $P5003, "CommandLine"
    push $P5003, "World"
    push $P5003, "CallResult"
    push $P5003, "Sub"
    push $P5003, "Ops"
    push $P5003, "Label"
    push $P5003, "RegexActions"
    push $P5003, "Ee"
    push $P5003, "01"
    push $P5003, "01234567"
    push $P5003, "0123456789abcdefABCDEF"
    push $P5003, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5003, "dDnNsSwW"
    push $P5003, "bB"
    push $P5003, "eE"
    push $P5003, "fF"
    push $P5003, "hH"
    push $P5003, "rR"
    push $P5003, "tT"
    push $P5003, "vV"
    push $P5003, "oO"
    push $P5003, "xX"
    push $P5003, "cC"
    push $P5003, "&|~"
    .const 'Sub' $P5004 = 'cuid_494_1356803026.47425' 
    capture_lex $P5004
    $P5005 = $P5004()
    nqp_deserialize_sc "", cur_sc, $P5003, $P5005, conflicts
    unless conflicts goto if1754_end5740 
    die "Repossession conflicts occurred during deserialization"
  if1754_end5740:
    .const "LexInfo" $P5001 = "cuid_1_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 34
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_33_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_33_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_33_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_33_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_34_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 216
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_223_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 225
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_224_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 35
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_224_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_224_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 35
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_224_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_225_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 227
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 228
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_227_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 229
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_230_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_231_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_233_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_234_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_236_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_238_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_243_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_244_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 246
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_245_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 226
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_245_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_245_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 226
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_245_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_246_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 341
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 352
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 353
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 354
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 355
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 356
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 357
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 358
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_357_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 359
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_358_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 247
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_358_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_358_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 247
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_358_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_359_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 361
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 362
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 363
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 364
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 365
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 366
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 367
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 368
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_367_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 369
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_368_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 370
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_369_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 371
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_370_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 372
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_371_1356803026.47425" 
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 373
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_372_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 360
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_372_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 360
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_373_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 374
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_373_1356803026.47425"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_373_1356803026.47425"
    nqp_get_sc_object $P5002, "02410D438DC8401D31678314172697BA8588D356-1356803026.59304", 374
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_373_1356803026.47425"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_494_1356803026.47425") :anon :lex :outer("cuid_495_1356803026.47425")
.annotate 'file', "src/stage2/gen/NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_2_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_223_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_227_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_230_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_231_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_233_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_234_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_236_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_238_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_243_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_367_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_368_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_369_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_370_1356803026.47425" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_371_1356803026.47425" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_496_1356803026.47425") :load
.annotate 'file', "src/stage2/gen/NQP.pm"
    .const 'Sub' $P5001 = "cuid_1_1356803026.47425" 
    $P5002 = $P5001()
    .return ($P5002) 
.end