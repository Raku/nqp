.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "nqp_bigint_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block1000"  :anon :subid("542_1335114138.94729")
    .param pmc param_1002 :slurpy
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P3890 = "655_1335114138.94729" 
    capture_lex $P3890
    .const 'Sub' $P3881 = "653_1335114138.94729" 
    capture_lex $P3881
    .const 'Sub' $P3844 = "652_1335114138.94729" 
    capture_lex $P3844
    .const 'Sub' $P2604 = "591_1335114138.94729" 
    capture_lex $P2604
    .const 'Sub' $P2549 = "586_1335114138.94729" 
    capture_lex $P2549
    .const 'Sub' $P1440 = "571_1335114138.94729" 
    capture_lex $P1440
    .const 'Sub' $P1025 = "545_1335114138.94729" 
    capture_lex $P1025
    .const 'Sub' $P1019 = "544_1335114138.94729" 
    capture_lex $P1019
    .const 'Sub' $P1006 = "543_1335114138.94729" 
    capture_lex $P1006
.annotate 'line', 1
    .lex "@ARGS", param_1002
    .lex "GLOBALish", $P1003
    .lex "$?PACKAGE", $P1004
.annotate 'line', 2920
    .const 'Sub' $P1006 = "543_1335114138.94729" 
    newclosure $P1017, $P1006
    set $P1005, $P1017
    .lex "MAIN", $P1005
.annotate 'line', 2943
    .const 'Sub' $P1019 = "544_1335114138.94729" 
    newclosure $P1023, $P1019
    set $P1018, $P1023
    .lex "hll-config", $P1018
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 7
    .const 'Sub' $P1025 = "545_1335114138.94729" 
    capture_lex $P1025
    $P1025()
.annotate 'line', 634
    .const 'Sub' $P1440 = "571_1335114138.94729" 
    capture_lex $P1440
    $P1440()
.annotate 'line', 1370
    .const 'Sub' $P2549 = "586_1335114138.94729" 
    capture_lex $P2549
    $P2549()
.annotate 'line', 1413
    .const 'Sub' $P2604 = "591_1335114138.94729" 
    capture_lex $P2604
    $P2604()
.annotate 'line', 2862
    .const 'Sub' $P3844 = "652_1335114138.94729" 
    capture_lex $P3844
    $P3844()
.annotate 'line', 2917
    .const 'Sub' $P3881 = "653_1335114138.94729" 
    capture_lex $P3881
    $P3881()
.annotate 'line', 1
    set $P103, $P1005
    set $P103, $P1018
    set $P104, param_1002
    if $P104, if_3884
    set $P103, $P104
    goto if_3884_end
  if_3884:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P105, "ModuleLoader"
    getinterp $P106
    set $P107, $P106["context"]
    $P105."set_mainline_module"($P107)
    .const '' $P3885 = "543_1335114138.94729" 
    set $P108, param_1002
    $P109 = $P3885($P108 :flat)
    set $P103, $P109
  if_3884_end:
    .return ($P103)
    .const 'Sub' $P3887 = "654_1335114138.94729" 
    .return ($P3887)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post656") :outer("542_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P1001 = "542_1335114138.94729" 
    .local pmc block
    set block, $P1001
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P111
    get_class $P112, "LexPad"
    get_class $P113, "NQPLexPad"
    $P111."hll_map"($P112, $P113)
    nqp_create_sc $P114, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076"
    .local pmc cur_sc
    set cur_sc, $P114
    cur_sc."set_description"("src/stage2/gen/NQP.pm")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P116 = $P115."load_setting"("NQPCORE")
    block."set_outer_ctx"($P116)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("NQPRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P115, "ModuleLoader"
    $P115."load_module"("NQPP6Regex")
    set $S100, ""
    new $P115, "ResizableStringArray"
    .local pmc string_heap
    set string_heap, $P115
    null $S101
    push string_heap, $S101
    push string_heap, "P6opaque"
    push string_heap, "Regex"
    push string_heap, "PAST"
    push string_heap, "__REGEX_CORE_SC__"
    push string_heap, "_dumper"
    push string_heap, "HLL"
    push string_heap, "NQP"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "3940BAAC6795364DE724F4268A50AA0EB6318065-1335114089.02069"
    push string_heap, "src/stage2/NQPCORE.setting"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "CCC459E685608219A806FBFC3CA9274812A27844-1335114093.95349"
    push string_heap, "src/stage2/gen/NQPHLL.pm"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "slot_for_object"
    push string_heap, "get_slot_past_for_object"
    push string_heap, "get_slot_past_for_code_ref_at"
    push string_heap, "set_slot_past"
    push string_heap, "set_cur_sc"
    push string_heap, "add_object_to_cur_sc_past"
    push string_heap, "add_object"
    push string_heap, "add_root_code_ref"
    push string_heap, "update_root_code_ref"
    push string_heap, "is_precompilation_mode"
    push string_heap, "add_load_dependency_task"
    push string_heap, "add_fixup_task"
    push string_heap, "get_ref"
    push string_heap, "sc"
    push string_heap, "handle"
    push string_heap, "load_dependency_tasks"
    push string_heap, "fixup_tasks"
    push string_heap, "serialize_and_produce_deserialization_past"
    push string_heap, "push_lexpad"
    push string_heap, "pop_lexpad"
    push string_heap, "cur_lexpad"
    push string_heap, "get_legacy_block_list"
    push string_heap, "load_setting"
    push string_heap, "load_module"
    push string_heap, "install_package_symbol"
    push string_heap, "install_lexical_symbol"
    push string_heap, "install_package_routine"
    push string_heap, "create_code"
    push string_heap, "pkg_create_mo"
    push string_heap, "pkg_add_attribute"
    push string_heap, "pkg_add_method"
    push string_heap, "set_routine_signature"
    push string_heap, "set_routine_signature_on_parrot_sub"
    push string_heap, "pkg_set_body_block"
    push string_heap, "pkg_add_parent_or_role"
    push string_heap, "pkg_add_parrot_vtable_handler_mapping"
    push string_heap, "pkg_compose"
    push string_heap, "run_begin_block"
    push string_heap, "set_nqp_language_defaults"
    push string_heap, "to_past"
    push string_heap, "is_lexical"
    push string_heap, "is_package"
    push string_heap, "is_scope"
    push string_heap, "known_sym"
    push string_heap, "find_sym"
    push string_heap, "$!sc"
    push string_heap, "$!handle"
    push string_heap, "$!precomp_mode"
    push string_heap, "$!num_code_refs"
    push string_heap, "$!code_ref_blocks"
    push string_heap, "@!load_dependency_tasks"
    push string_heap, "@!fixup_tasks"
    push string_heap, "%!addr_to_slot"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "new_match"
    push string_heap, "new_array"
    push string_heap, "MATCH"
    push string_heap, "parse"
    push string_heap, "next"
    push string_heap, "pos"
    push string_heap, "from"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_backtrack"
    push string_heap, "!cursor_next"
    push string_heap, "!cursor_caparray"
    push string_heap, "!cursor_names"
    push string_heap, "!cursor_pos"
    push string_heap, "!cursor_debug"
    push string_heap, "!mark_push"
    push string_heap, "!mark_peek"
    push string_heap, "!mark_fail"
    push string_heap, "!mark_commit"
    push string_heap, "!reduce"
    push string_heap, "!BACKREF"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "!cursor_from"
    push string_heap, "before"
    push string_heap, "ident"
    push string_heap, "wb"
    push string_heap, "ww"
    push string_heap, "ws"
    push string_heap, "alpha"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "print"
    push string_heap, "graph"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "alnum"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "FAILGOAL"
    push string_heap, "DEBUG"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_generation"
    push string_heap, "!protoregex_tokrx"
    push string_heap, "!protoregex_gen_table"
    push string_heap, "!PREFIX__!protoregex"
    push string_heap, "!PREFIX__!subrule"
    push string_heap, "DUMP_TOKRX"
    push string_heap, "Bool"
    push string_heap, "!PREFIX__ws"
    push string_heap, "termish"
    push string_heap, "!PREFIX__termish"
    push string_heap, "term"
    push string_heap, "!PREFIX__term"
    push string_heap, "infix"
    push string_heap, "!PREFIX__infix"
    push string_heap, "prefix"
    push string_heap, "!PREFIX__prefix"
    push string_heap, "postfix"
    push string_heap, "!PREFIX__postfix"
    push string_heap, "circumfix"
    push string_heap, "!PREFIX__circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "!PREFIX__postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "!PREFIX__term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "!PREFIX__infixish"
    push string_heap, "prefixish"
    push string_heap, "!PREFIX__prefixish"
    push string_heap, "postfixish"
    push string_heap, "!PREFIX__postfixish"
    push string_heap, "nullterm"
    push string_heap, "!PREFIX__nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "!PREFIX__nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "!PREFIX__quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "!PREFIX__quote_atom"
    push string_heap, "decint"
    push string_heap, "!PREFIX__decint"
    push string_heap, "decints"
    push string_heap, "!PREFIX__decints"
    push string_heap, "hexint"
    push string_heap, "!PREFIX__hexint"
    push string_heap, "hexints"
    push string_heap, "!PREFIX__hexints"
    push string_heap, "octint"
    push string_heap, "!PREFIX__octint"
    push string_heap, "octints"
    push string_heap, "!PREFIX__octints"
    push string_heap, "binint"
    push string_heap, "!PREFIX__binint"
    push string_heap, "binints"
    push string_heap, "!PREFIX__binints"
    push string_heap, "integer"
    push string_heap, "!PREFIX__integer"
    push string_heap, "dec_number"
    push string_heap, "!PREFIX__dec_number"
    push string_heap, "escale"
    push string_heap, "!PREFIX__escale"
    push string_heap, "quote_escape"
    push string_heap, "!PREFIX__quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "!PREFIX__quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "!PREFIX__quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "!PREFIX__quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "!PREFIX__quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "!PREFIX__quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "!PREFIX__quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "!PREFIX__quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "!PREFIX__quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "!PREFIX__quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "!PREFIX__quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "!PREFIX__quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "!PREFIX__quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "!PREFIX__quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "!PREFIX__charname"
    push string_heap, "charnames"
    push string_heap, "!PREFIX__charnames"
    push string_heap, "charspec"
    push string_heap, "!PREFIX__charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "TOP"
    push string_heap, "identifier"
    push string_heap, "!PREFIX__identifier"
    push string_heap, "name"
    push string_heap, "!PREFIX__name"
    push string_heap, "deflongname"
    push string_heap, "!PREFIX__deflongname"
    push string_heap, "ENDSTMT"
    push string_heap, "!PREFIX__ENDSTMT"
    push string_heap, "unv"
    push string_heap, "!PREFIX__unv"
    push string_heap, "pod_comment"
    push string_heap, "!PREFIX__pod_comment"
    push string_heap, "comp_unit"
    push string_heap, "!PREFIX__comp_unit"
    push string_heap, "statementlist"
    push string_heap, "!PREFIX__statementlist"
    push string_heap, "statement"
    push string_heap, "!PREFIX__statement"
    push string_heap, "eat_terminator"
    push string_heap, "!PREFIX__eat_terminator"
    push string_heap, "xblock"
    push string_heap, "!PREFIX__xblock"
    push string_heap, "pblock"
    push string_heap, "!PREFIX__pblock"
    push string_heap, "lambda"
    push string_heap, "!PREFIX__lambda"
    push string_heap, "block"
    push string_heap, "!PREFIX__block"
    push string_heap, "blockoid"
    push string_heap, "!PREFIX__blockoid"
    push string_heap, "newpad"
    push string_heap, "!PREFIX__newpad"
    push string_heap, "outerctx"
    push string_heap, "!PREFIX__outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "!PREFIX__GLOBALish"
    push string_heap, "finishpad"
    push string_heap, "!PREFIX__finishpad"
    push string_heap, "you_are_here"
    push string_heap, "!PREFIX__you_are_here"
    push string_heap, "terminator"
    push string_heap, "!PREFIX__terminator"
    push string_heap, "terminator:sym<;>"
    push string_heap, "!PREFIX__terminator:sym<;>"
    push string_heap, "terminator:sym<}>"
    push string_heap, "!PREFIX__terminator:sym<}>"
    push string_heap, "statement_control"
    push string_heap, "!PREFIX__statement_control"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "!PREFIX__statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "!PREFIX__statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "!PREFIX__statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "!PREFIX__statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "!PREFIX__statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "!PREFIX__statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "!PREFIX__statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "!PREFIX__statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix"
    push string_heap, "!PREFIX__statement_prefix"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "!PREFIX__statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "!PREFIX__statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "!PREFIX__statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "!PREFIX__blorst"
    push string_heap, "statement_mod_cond"
    push string_heap, "!PREFIX__statement_mod_cond"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "!PREFIX__statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "!PREFIX__statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop"
    push string_heap, "!PREFIX__statement_mod_loop"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<until>"
    push string_heap, "statement_mod_loop:sym<for>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<for>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "!PREFIX__term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "!PREFIX__term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "!PREFIX__term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "!PREFIX__term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "!PREFIX__term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "!PREFIX__term:sym<routine_declarator>"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "!PREFIX__term:sym<multi_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "!PREFIX__term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "!PREFIX__term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "!PREFIX__term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "!PREFIX__fatarrow"
    push string_heap, "colonpair"
    push string_heap, "!PREFIX__colonpair"
    push string_heap, "variable"
    push string_heap, "!PREFIX__variable"
    push string_heap, "sigil"
    push string_heap, "!PREFIX__sigil"
    push string_heap, "twigil"
    push string_heap, "!PREFIX__twigil"
    push string_heap, "package_declarator"
    push string_heap, "!PREFIX__package_declarator"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "!PREFIX__package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "!PREFIX__package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "!PREFIX__package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "!PREFIX__package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "!PREFIX__package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "!PREFIX__package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "!PREFIX__package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "!PREFIX__package_def"
    push string_heap, "scope_declarator"
    push string_heap, "!PREFIX__scope_declarator"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "!PREFIX__scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "!PREFIX__scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "!PREFIX__scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "!PREFIX__scoped"
    push string_heap, "typename"
    push string_heap, "!PREFIX__typename"
    push string_heap, "declarator"
    push string_heap, "!PREFIX__declarator"
    push string_heap, "variable_declarator"
    push string_heap, "!PREFIX__variable_declarator"
    push string_heap, "routine_declarator"
    push string_heap, "!PREFIX__routine_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "!PREFIX__routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "!PREFIX__routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "!PREFIX__routine_def"
    push string_heap, "method_def"
    push string_heap, "!PREFIX__method_def"
    push string_heap, "onlystar"
    push string_heap, "!PREFIX__onlystar"
    push string_heap, "multi_declarator"
    push string_heap, "!PREFIX__multi_declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "!PREFIX__multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "!PREFIX__multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "!PREFIX__multi_declarator:sym<null>"
    push string_heap, "signature"
    push string_heap, "!PREFIX__signature"
    push string_heap, "parameter"
    push string_heap, "!PREFIX__parameter"
    push string_heap, "param_var"
    push string_heap, "!PREFIX__param_var"
    push string_heap, "named_param"
    push string_heap, "!PREFIX__named_param"
    push string_heap, "default_value"
    push string_heap, "!PREFIX__default_value"
    push string_heap, "trait"
    push string_heap, "!PREFIX__trait"
    push string_heap, "trait_mod"
    push string_heap, "!PREFIX__trait_mod"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "!PREFIX__trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "!PREFIX__regex_declarator"
    push string_heap, "dotty"
    push string_heap, "!PREFIX__dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "!PREFIX__term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "!PREFIX__term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "!PREFIX__term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "!PREFIX__term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "!PREFIX__term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "!PREFIX__term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "!PREFIX__term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "!PREFIX__args"
    push string_heap, "arglist"
    push string_heap, "!PREFIX__arglist"
    push string_heap, "term:sym<value>"
    push string_heap, "!PREFIX__term:sym<value>"
    push string_heap, "value"
    push string_heap, "!PREFIX__value"
    push string_heap, "number"
    push string_heap, "!PREFIX__number"
    push string_heap, "quote"
    push string_heap, "!PREFIX__quote"
    push string_heap, "quote:sym<apos>"
    push string_heap, "!PREFIX__quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "!PREFIX__quote:sym<dblq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "!PREFIX__quote:sym<q>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "!PREFIX__quote:sym<qq>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "!PREFIX__quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "!PREFIX__quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "!PREFIX__quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "!PREFIX__quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "!PREFIX__quote_escape:sym<{ }>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "!PREFIX__circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "!PREFIX__circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, "!PREFIX__circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "!PREFIX__circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "!PREFIX__circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "!PREFIX__semilist"
    push string_heap, "infixstopper"
    push string_heap, "!PREFIX__infixstopper"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "!PREFIX__postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "!PREFIX__postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "!PREFIX__postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "!PREFIX__postcircumfix:sym<( )>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "!PREFIX__postfix:sym<.>"
    push string_heap, "prefix:sym<++>"
    push string_heap, "!PREFIX__prefix:sym<++>"
    push string_heap, "prefix:sym<-->"
    push string_heap, "!PREFIX__prefix:sym<-->"
    push string_heap, "postfix:sym<++>"
    push string_heap, "!PREFIX__postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "!PREFIX__postfix:sym<-->"
    push string_heap, "infix:sym<**>"
    push string_heap, "!PREFIX__infix:sym<**>"
    push string_heap, "prefix:sym<+>"
    push string_heap, "!PREFIX__prefix:sym<+>"
    push string_heap, "prefix:sym<~>"
    push string_heap, "!PREFIX__prefix:sym<~>"
    push string_heap, "prefix:sym<->"
    push string_heap, "!PREFIX__prefix:sym<->"
    push string_heap, "prefix:sym<?>"
    push string_heap, "!PREFIX__prefix:sym<?>"
    push string_heap, "prefix:sym<!>"
    push string_heap, "!PREFIX__prefix:sym<!>"
    push string_heap, "prefix:sym<|>"
    push string_heap, "!PREFIX__prefix:sym<|>"
    push string_heap, "infix:sym<*>"
    push string_heap, "!PREFIX__infix:sym<*>"
    push string_heap, "infix:sym</>"
    push string_heap, "!PREFIX__infix:sym</>"
    push string_heap, "infix:sym<%>"
    push string_heap, "!PREFIX__infix:sym<%>"
    push string_heap, "infix:sym<+&>"
    push string_heap, "!PREFIX__infix:sym<+&>"
    push string_heap, "infix:sym<+>"
    push string_heap, "!PREFIX__infix:sym<+>"
    push string_heap, "infix:sym<->"
    push string_heap, "!PREFIX__infix:sym<->"
    push string_heap, "infix:sym<+|>"
    push string_heap, "!PREFIX__infix:sym<+|>"
    push string_heap, "infix:sym<+^>"
    push string_heap, "!PREFIX__infix:sym<+^>"
    push string_heap, "infix:sym<~>"
    push string_heap, "!PREFIX__infix:sym<~>"
    push string_heap, "infix:sym<==>"
    push string_heap, "!PREFIX__infix:sym<==>"
    push string_heap, "infix:sym<!=>"
    push string_heap, "!PREFIX__infix:sym<!=>"
    push string_heap, "infix:sym<<=>"
    push string_heap, "!PREFIX__infix:sym<<=>"
    push string_heap, "infix:sym<>=>"
    push string_heap, "!PREFIX__infix:sym<>=>"
    push string_heap, "infix:sym<<>"
    push string_heap, "!PREFIX__infix:sym<<>"
    push string_heap, "infix:sym<>>"
    push string_heap, "!PREFIX__infix:sym<>>"
    push string_heap, "infix:sym<eq>"
    push string_heap, "!PREFIX__infix:sym<eq>"
    push string_heap, "infix:sym<ne>"
    push string_heap, "!PREFIX__infix:sym<ne>"
    push string_heap, "infix:sym<le>"
    push string_heap, "!PREFIX__infix:sym<le>"
    push string_heap, "infix:sym<ge>"
    push string_heap, "!PREFIX__infix:sym<ge>"
    push string_heap, "infix:sym<lt>"
    push string_heap, "!PREFIX__infix:sym<lt>"
    push string_heap, "infix:sym<gt>"
    push string_heap, "!PREFIX__infix:sym<gt>"
    push string_heap, "infix:sym<=:=>"
    push string_heap, "!PREFIX__infix:sym<=:=>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "!PREFIX__infix:sym<~~>"
    push string_heap, "infix:sym<&&>"
    push string_heap, "!PREFIX__infix:sym<&&>"
    push string_heap, "infix:sym<||>"
    push string_heap, "!PREFIX__infix:sym<||>"
    push string_heap, "infix:sym<//>"
    push string_heap, "!PREFIX__infix:sym<//>"
    push string_heap, "infix:sym<?? !!>"
    push string_heap, "!PREFIX__infix:sym<?? !!>"
    push string_heap, "infix:sym<=>"
    push string_heap, "!PREFIX__infix:sym<=>"
    push string_heap, "infix:sym<:=>"
    push string_heap, "!PREFIX__infix:sym<:=>"
    push string_heap, "infix:sym<::=>"
    push string_heap, "!PREFIX__infix:sym<::=>"
    push string_heap, "infix:sym<,>"
    push string_heap, "!PREFIX__infix:sym<,>"
    push string_heap, "prefix:sym<return>"
    push string_heap, "!PREFIX__prefix:sym<return>"
    push string_heap, "prefix:sym<make>"
    push string_heap, "!PREFIX__prefix:sym<make>"
    push string_heap, "term:sym<last>"
    push string_heap, "!PREFIX__term:sym<last>"
    push string_heap, "term:sym<next>"
    push string_heap, "!PREFIX__term:sym<next>"
    push string_heap, "term:sym<redo>"
    push string_heap, "!PREFIX__term:sym<redo>"
    push string_heap, "smartmatch"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!names"
    push string_heap, "$!debug"
    push string_heap, "@!bstack"
    push string_heap, "@!cstack"
    push string_heap, "@!caparray"
    push string_heap, "&!regex"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "new_match"
    push string_heap, "new_array"
    push string_heap, "MATCH"
    push string_heap, "parse"
    push string_heap, "next"
    push string_heap, "pos"
    push string_heap, "from"
    push string_heap, "!cursor_init"
    push string_heap, "!cursor_start"
    push string_heap, "!cursor_fail"
    push string_heap, "!cursor_pass"
    push string_heap, "!cursor_backtrack"
    push string_heap, "!cursor_next"
    push string_heap, "!cursor_caparray"
    push string_heap, "!cursor_names"
    push string_heap, "!cursor_pos"
    push string_heap, "!cursor_debug"
    push string_heap, "!mark_push"
    push string_heap, "!mark_peek"
    push string_heap, "!mark_fail"
    push string_heap, "!mark_commit"
    push string_heap, "!reduce"
    push string_heap, "!BACKREF"
    push string_heap, "!INTERPOLATE"
    push string_heap, "!INTERPOLATE_REGEX"
    push string_heap, "!cursor_from"
    push string_heap, "before"
    push string_heap, "ident"
    push string_heap, "wb"
    push string_heap, "ww"
    push string_heap, "ws"
    push string_heap, "5AE514CF1E6305A7A53B1181AFF0D7DE59B4F654-1335114120.93818"
    push string_heap, "src/stage2/gen/NQPP6Regex.pm"
    push string_heap, "alpha"
    push string_heap, "upper"
    push string_heap, "lower"
    push string_heap, "digit"
    push string_heap, "xdigit"
    push string_heap, "print"
    push string_heap, "graph"
    push string_heap, "cntrl"
    push string_heap, "punct"
    push string_heap, "alnum"
    push string_heap, "space"
    push string_heap, "blank"
    push string_heap, "FAILGOAL"
    push string_heap, "DEBUG"
    push string_heap, "!protoregex"
    push string_heap, "!protoregex_generation"
    push string_heap, "!protoregex_tokrx"
    push string_heap, "!protoregex_gen_table"
    push string_heap, "!PREFIX__!protoregex"
    push string_heap, "!PREFIX__!subrule"
    push string_heap, "DUMP_TOKRX"
    push string_heap, "Bool"
    push string_heap, "!PREFIX__ws"
    push string_heap, "termish"
    push string_heap, "!PREFIX__termish"
    push string_heap, "term"
    push string_heap, "!PREFIX__term"
    push string_heap, "infix"
    push string_heap, "!PREFIX__infix"
    push string_heap, "prefix"
    push string_heap, "!PREFIX__prefix"
    push string_heap, "postfix"
    push string_heap, "!PREFIX__postfix"
    push string_heap, "circumfix"
    push string_heap, "!PREFIX__circumfix"
    push string_heap, "postcircumfix"
    push string_heap, "!PREFIX__postcircumfix"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "!PREFIX__term:sym<circumfix>"
    push string_heap, "infixish"
    push string_heap, "!PREFIX__infixish"
    push string_heap, "prefixish"
    push string_heap, "!PREFIX__prefixish"
    push string_heap, "postfixish"
    push string_heap, "!PREFIX__postfixish"
    push string_heap, "nullterm"
    push string_heap, "!PREFIX__nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "!PREFIX__nullterm_alt"
    push string_heap, "nulltermish"
    push string_heap, "quote_delimited"
    push string_heap, "!PREFIX__quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "!PREFIX__quote_atom"
    push string_heap, "decint"
    push string_heap, "!PREFIX__decint"
    push string_heap, "decints"
    push string_heap, "!PREFIX__decints"
    push string_heap, "hexint"
    push string_heap, "!PREFIX__hexint"
    push string_heap, "hexints"
    push string_heap, "!PREFIX__hexints"
    push string_heap, "octint"
    push string_heap, "!PREFIX__octint"
    push string_heap, "octints"
    push string_heap, "!PREFIX__octints"
    push string_heap, "binint"
    push string_heap, "!PREFIX__binint"
    push string_heap, "binints"
    push string_heap, "!PREFIX__binints"
    push string_heap, "integer"
    push string_heap, "!PREFIX__integer"
    push string_heap, "dec_number"
    push string_heap, "!PREFIX__dec_number"
    push string_heap, "escale"
    push string_heap, "!PREFIX__escale"
    push string_heap, "quote_escape"
    push string_heap, "!PREFIX__quote_escape"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "!PREFIX__quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "!PREFIX__quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "!PREFIX__quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "!PREFIX__quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "!PREFIX__quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "!PREFIX__quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "!PREFIX__quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "!PREFIX__quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "!PREFIX__quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "!PREFIX__quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "!PREFIX__quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "!PREFIX__quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "!PREFIX__quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "!PREFIX__charname"
    push string_heap, "charnames"
    push string_heap, "!PREFIX__charnames"
    push string_heap, "charspec"
    push string_heap, "!PREFIX__charspec"
    push string_heap, "O"
    push string_heap, "panic"
    push string_heap, "peek_delimiters"
    push string_heap, "quote_EXPR"
    push string_heap, "quotemod_check"
    push string_heap, "starter"
    push string_heap, "stopper"
    push string_heap, "split_words"
    push string_heap, "EXPR"
    push string_heap, "EXPR_reduce"
    push string_heap, "ternary"
    push string_heap, "MARKER"
    push string_heap, "MARKED"
    push string_heap, "LANG"
    push string_heap, "obs"
    push string_heap, "normspace"
    push string_heap, "!PREFIX__normspace"
    push string_heap, "identifier"
    push string_heap, "!PREFIX__identifier"
    push string_heap, "arg"
    push string_heap, "!PREFIX__arg"
    push string_heap, "arglist"
    push string_heap, "!PREFIX__arglist"
    push string_heap, "TOP"
    push string_heap, "!PREFIX__TOP"
    push string_heap, "nibbler"
    push string_heap, "!PREFIX__nibbler"
    push string_heap, "termconj"
    push string_heap, "!PREFIX__termconj"
    push string_heap, "quantified_atom"
    push string_heap, "!PREFIX__quantified_atom"
    push string_heap, "atom"
    push string_heap, "!PREFIX__atom"
    push string_heap, "quantifier"
    push string_heap, "!PREFIX__quantifier"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "!PREFIX__quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "!PREFIX__quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "!PREFIX__quantifier:sym<?>"
    push string_heap, "quantifier:sym<{N,M}>"
    push string_heap, "!PREFIX__quantifier:sym<{N,M}>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "!PREFIX__quantifier:sym<**>"
    push string_heap, "backmod"
    push string_heap, "!PREFIX__backmod"
    push string_heap, "metachar"
    push string_heap, "!PREFIX__metachar"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "!PREFIX__metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "!PREFIX__metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "!PREFIX__metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "!PREFIX__metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "!PREFIX__metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "!PREFIX__metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "!PREFIX__metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "!PREFIX__metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "!PREFIX__metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "!PREFIX__metachar:sym<$$>"
    push string_heap, "metachar:sym<:::>"
    push string_heap, "!PREFIX__metachar:sym<:::>"
    push string_heap, "metachar:sym<::>"
    push string_heap, "!PREFIX__metachar:sym<::>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "!PREFIX__metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "!PREFIX__metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "!PREFIX__metachar:sym<bs>"
    push string_heap, "metachar:sym<mod>"
    push string_heap, "!PREFIX__metachar:sym<mod>"
    push string_heap, "metachar:sym<quantifier>"
    push string_heap, "!PREFIX__metachar:sym<quantifier>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "!PREFIX__metachar:sym<~>"
    push string_heap, "metachar:sym<{*}>"
    push string_heap, "!PREFIX__metachar:sym<{*}>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "!PREFIX__metachar:sym<assert>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "!PREFIX__metachar:sym<var>"
    push string_heap, "metachar:sym<PIR>"
    push string_heap, "!PREFIX__metachar:sym<PIR>"
    push string_heap, "backslash"
    push string_heap, "!PREFIX__backslash"
    push string_heap, "backslash:sym<w>"
    push string_heap, "!PREFIX__backslash:sym<w>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "!PREFIX__backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "!PREFIX__backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "!PREFIX__backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "!PREFIX__backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "!PREFIX__backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "!PREFIX__backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "!PREFIX__backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "!PREFIX__backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "!PREFIX__backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "!PREFIX__backslash:sym<c>"
    push string_heap, "backslash:sym<A>"
    push string_heap, "!PREFIX__backslash:sym<A>"
    push string_heap, "backslash:sym<z>"
    push string_heap, "!PREFIX__backslash:sym<z>"
    push string_heap, "backslash:sym<Z>"
    push string_heap, "!PREFIX__backslash:sym<Z>"
    push string_heap, "backslash:sym<Q>"
    push string_heap, "!PREFIX__backslash:sym<Q>"
    push string_heap, "backslash:sym<unrec>"
    push string_heap, "!PREFIX__backslash:sym<unrec>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "!PREFIX__backslash:sym<misc>"
    push string_heap, "assertion"
    push string_heap, "!PREFIX__assertion"
    push string_heap, "assertion:sym<?>"
    push string_heap, "!PREFIX__assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "!PREFIX__assertion:sym<!>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "!PREFIX__assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "!PREFIX__assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "!PREFIX__assertion:sym<[>"
    push string_heap, "cclass_elem"
    push string_heap, "!PREFIX__cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "!PREFIX__mod_internal"
    push string_heap, "mod_ident"
    push string_heap, "!PREFIX__mod_ident"
    push string_heap, "mod_ident:sym<ignorecase>"
    push string_heap, "!PREFIX__mod_ident:sym<ignorecase>"
    push string_heap, "mod_ident:sym<ratchet>"
    push string_heap, "!PREFIX__mod_ident:sym<ratchet>"
    push string_heap, "mod_ident:sym<sigspace>"
    push string_heap, "!PREFIX__mod_ident:sym<sigspace>"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "!PREFIX__metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "!PREFIX__metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "!PREFIX__metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "!PREFIX__assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "!PREFIX__assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "!PREFIX__assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "!PREFIX__codeblock"
    push string_heap, "$!target"
    push string_heap, "$!from"
    push string_heap, "$!pos"
    push string_heap, "$!match"
    push string_heap, "$!names"
    push string_heap, "$!debug"
    push string_heap, "@!bstack"
    push string_heap, "@!cstack"
    push string_heap, "@!caparray"
    push string_heap, "&!regex"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "TOP"
    push string_heap, "deflongname"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "you_are_here"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "typename"
    push string_heap, "trait"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<value>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<redo>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "ints_to_string"
    push string_heap, "CTXSAVE"
    push string_heap, "SET_BLOCK_OUTER_CTX"
    push string_heap, "EXPR"
    push string_heap, "term:sym<circumfix>"
    push string_heap, "termish"
    push string_heap, "nullterm"
    push string_heap, "nullterm_alt"
    push string_heap, "integer"
    push string_heap, "dec_number"
    push string_heap, "decint"
    push string_heap, "hexint"
    push string_heap, "octint"
    push string_heap, "binint"
    push string_heap, "quote_EXPR"
    push string_heap, "quote_delimited"
    push string_heap, "quote_atom"
    push string_heap, "quote_escape:sym<backslash>"
    push string_heap, "quote_escape:sym<stopper>"
    push string_heap, "quote_escape:sym<bs>"
    push string_heap, "quote_escape:sym<nl>"
    push string_heap, "quote_escape:sym<cr>"
    push string_heap, "quote_escape:sym<tab>"
    push string_heap, "quote_escape:sym<ff>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "quote_escape:sym<hex>"
    push string_heap, "quote_escape:sym<oct>"
    push string_heap, "quote_escape:sym<chr>"
    push string_heap, "quote_escape:sym<0>"
    push string_heap, "quote_escape:sym<misc>"
    push string_heap, "charname"
    push string_heap, "charnames"
    push string_heap, "charspec"
    push string_heap, "arg"
    push string_heap, "arglist"
    push string_heap, "TOP"
    push string_heap, "nibbler"
    push string_heap, "termconj"
    push string_heap, "quantified_atom"
    push string_heap, "atom"
    push string_heap, "quantifier:sym<*>"
    push string_heap, "quantifier:sym<+>"
    push string_heap, "quantifier:sym<?>"
    push string_heap, "quantifier:sym<**>"
    push string_heap, "metachar:sym<ws>"
    push string_heap, "metachar:sym<[ ]>"
    push string_heap, "metachar:sym<( )>"
    push string_heap, "metachar:sym<'>"
    push string_heap, "metachar:sym<\">"
    push string_heap, "metachar:sym<.>"
    push string_heap, "metachar:sym<^>"
    push string_heap, "metachar:sym<^^>"
    push string_heap, "metachar:sym<$>"
    push string_heap, "metachar:sym<$$>"
    push string_heap, "metachar:sym<:::>"
    push string_heap, "metachar:sym<lwb>"
    push string_heap, "metachar:sym<rwb>"
    push string_heap, "metachar:sym<bs>"
    push string_heap, "metachar:sym<mod>"
    push string_heap, "metachar:sym<assert>"
    push string_heap, "metachar:sym<~>"
    push string_heap, "metachar:sym<{*}>"
    push string_heap, "metachar:sym<var>"
    push string_heap, "metachar:sym<PIR>"
    push string_heap, "backslash:sym<w>"
    push string_heap, "backslash:sym<b>"
    push string_heap, "backslash:sym<e>"
    push string_heap, "backslash:sym<f>"
    push string_heap, "backslash:sym<h>"
    push string_heap, "backslash:sym<r>"
    push string_heap, "backslash:sym<t>"
    push string_heap, "backslash:sym<v>"
    push string_heap, "backslash:sym<o>"
    push string_heap, "backslash:sym<x>"
    push string_heap, "backslash:sym<c>"
    push string_heap, "backslash:sym<misc>"
    push string_heap, "assertion:sym<?>"
    push string_heap, "assertion:sym<!>"
    push string_heap, "assertion:sym<method>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "assertion:sym<[>"
    push string_heap, "cclass_elem"
    push string_heap, "mod_internal"
    push string_heap, "subrule_alias"
    push string_heap, "named_assertion"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "P6opaque"
    push string_heap, "CREATE"
    push string_heap, "bless"
    push string_heap, "BUILDALL"
    push string_heap, "BUILD_MAGIC"
    push string_heap, "new"
    push string_heap, "Str"
    push string_heap, "ACCEPTS"
    push string_heap, "isa"
    push string_heap, "__dump"
    push string_heap, "BUILD"
    push string_heap, "get_exports"
    push string_heap, "get_module"
    push string_heap, "language"
    push string_heap, "compiler"
    push string_heap, "config"
    push string_heap, "load_module"
    push string_heap, "import"
    push string_heap, "autoprint"
    push string_heap, "interactive"
    push string_heap, "eval"
    push string_heap, "ctxsave"
    push string_heap, "panic"
    push string_heap, "stages"
    push string_heap, "parsegrammar"
    push string_heap, "parseactions"
    push string_heap, "interactive_banner"
    push string_heap, "interactive_prompt"
    push string_heap, "compiler_progname"
    push string_heap, "commandline_options"
    push string_heap, "command_line"
    push string_heap, "command_eval"
    push string_heap, "process_args"
    push string_heap, "evalfiles"
    push string_heap, "compile"
    push string_heap, "parse"
    push string_heap, "past"
    push string_heap, "post"
    push string_heap, "pirbegin"
    push string_heap, "pir"
    push string_heap, "evalpmc"
    push string_heap, "dumper"
    push string_heap, "usage"
    push string_heap, "version"
    push string_heap, "show-config"
    push string_heap, "nqpevent"
    push string_heap, "removestage"
    push string_heap, "addstage"
    push string_heap, "parse_name"
    push string_heap, "lineof"
    push string_heap, "@!stages"
    push string_heap, "$!parsegrammar"
    push string_heap, "$!parseactions"
    push string_heap, "@!cmdoptions"
    push string_heap, "$!usage"
    push string_heap, "$!compiler_progname"
    push string_heap, "$!language"
    push string_heap, "%!config"
    push string_heap, "__6MODEL_CORE__"
    push string_heap, "GLOBALish"
    push string_heap, "02EC37F1F019DB2DB829D804DB1E78E43B247036-1335114074.72126"
    push string_heap, "src/stage2/gen/nqp-mo.pm"
    push string_heap, "NQP::World"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "push_lexpad"
    push string_heap, "pop_lexpad"
    push string_heap, "cur_lexpad"
    push string_heap, "get_legacy_block_list"
    push string_heap, "load_setting"
    push string_heap, "load_module"
    push string_heap, "install_package_symbol"
    push string_heap, "install_lexical_symbol"
    push string_heap, "install_package_routine"
    push string_heap, "create_code"
    push string_heap, "pkg_create_mo"
    push string_heap, "pkg_add_attribute"
    push string_heap, "pkg_add_method"
    push string_heap, "set_routine_signature"
    push string_heap, "set_routine_signature_on_parrot_sub"
    push string_heap, "pkg_set_body_block"
    push string_heap, "pkg_add_parent_or_role"
    push string_heap, "pkg_add_parrot_vtable_handler_mapping"
    push string_heap, "pkg_compose"
    push string_heap, "run_begin_block"
    push string_heap, "set_nqp_language_defaults"
    push string_heap, "to_past"
    push string_heap, "is_lexical"
    push string_heap, "is_package"
    push string_heap, "is_scope"
    push string_heap, "known_sym"
    push string_heap, "find_sym"
    push string_heap, "NQP::Grammar"
    push string_heap, "TOP"
    push string_heap, "identifier"
    push string_heap, "!PREFIX__identifier"
    push string_heap, "name"
    push string_heap, "!PREFIX__name"
    push string_heap, "deflongname"
    push string_heap, "!PREFIX__deflongname"
    push string_heap, "ENDSTMT"
    push string_heap, "!PREFIX__ENDSTMT"
    push string_heap, "ws"
    push string_heap, "!PREFIX__ws"
    push string_heap, "unv"
    push string_heap, "!PREFIX__unv"
    push string_heap, "pod_comment"
    push string_heap, "!PREFIX__pod_comment"
    push string_heap, "comp_unit"
    push string_heap, "!PREFIX__comp_unit"
    push string_heap, "statementlist"
    push string_heap, "!PREFIX__statementlist"
    push string_heap, "statement"
    push string_heap, "!PREFIX__statement"
    push string_heap, "eat_terminator"
    push string_heap, "!PREFIX__eat_terminator"
    push string_heap, "xblock"
    push string_heap, "!PREFIX__xblock"
    push string_heap, "pblock"
    push string_heap, "!PREFIX__pblock"
    push string_heap, "lambda"
    push string_heap, "!PREFIX__lambda"
    push string_heap, "block"
    push string_heap, "!PREFIX__block"
    push string_heap, "blockoid"
    push string_heap, "!PREFIX__blockoid"
    push string_heap, "newpad"
    push string_heap, "!PREFIX__newpad"
    push string_heap, "outerctx"
    push string_heap, "!PREFIX__outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "!PREFIX__GLOBALish"
    push string_heap, "finishpad"
    push string_heap, "!PREFIX__finishpad"
    push string_heap, "you_are_here"
    push string_heap, "!PREFIX__you_are_here"
    push string_heap, "terminator"
    push string_heap, "!PREFIX__terminator"
    push string_heap, "terminator:sym<;>"
    push string_heap, "!PREFIX__terminator:sym<;>"
    push string_heap, "terminator:sym<}>"
    push string_heap, "!PREFIX__terminator:sym<}>"
    push string_heap, "statement_control"
    push string_heap, "!PREFIX__statement_control"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "!PREFIX__statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "!PREFIX__statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "!PREFIX__statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "!PREFIX__statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "!PREFIX__statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "!PREFIX__statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "!PREFIX__statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "!PREFIX__statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix"
    push string_heap, "!PREFIX__statement_prefix"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "!PREFIX__statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "!PREFIX__statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "!PREFIX__statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "!PREFIX__blorst"
    push string_heap, "statement_mod_cond"
    push string_heap, "!PREFIX__statement_mod_cond"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "!PREFIX__statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "!PREFIX__statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop"
    push string_heap, "!PREFIX__statement_mod_loop"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<until>"
    push string_heap, "statement_mod_loop:sym<for>"
    push string_heap, "!PREFIX__statement_mod_loop:sym<for>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "!PREFIX__term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "!PREFIX__term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "!PREFIX__term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "!PREFIX__term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "!PREFIX__term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "!PREFIX__term:sym<routine_declarator>"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "!PREFIX__term:sym<multi_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "!PREFIX__term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "!PREFIX__term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "!PREFIX__term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "!PREFIX__fatarrow"
    push string_heap, "colonpair"
    push string_heap, "!PREFIX__colonpair"
    push string_heap, "variable"
    push string_heap, "!PREFIX__variable"
    push string_heap, "sigil"
    push string_heap, "!PREFIX__sigil"
    push string_heap, "twigil"
    push string_heap, "!PREFIX__twigil"
    push string_heap, "package_declarator"
    push string_heap, "!PREFIX__package_declarator"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "!PREFIX__package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "!PREFIX__package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "!PREFIX__package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "!PREFIX__package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "!PREFIX__package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "!PREFIX__package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "!PREFIX__package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "!PREFIX__package_def"
    push string_heap, "scope_declarator"
    push string_heap, "!PREFIX__scope_declarator"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "!PREFIX__scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "!PREFIX__scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "!PREFIX__scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "!PREFIX__scoped"
    push string_heap, "typename"
    push string_heap, "!PREFIX__typename"
    push string_heap, "declarator"
    push string_heap, "!PREFIX__declarator"
    push string_heap, "variable_declarator"
    push string_heap, "!PREFIX__variable_declarator"
    push string_heap, "routine_declarator"
    push string_heap, "!PREFIX__routine_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "!PREFIX__routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "!PREFIX__routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "!PREFIX__routine_def"
    push string_heap, "method_def"
    push string_heap, "!PREFIX__method_def"
    push string_heap, "onlystar"
    push string_heap, "!PREFIX__onlystar"
    push string_heap, "multi_declarator"
    push string_heap, "!PREFIX__multi_declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "!PREFIX__multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "!PREFIX__multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "!PREFIX__multi_declarator:sym<null>"
    push string_heap, "signature"
    push string_heap, "!PREFIX__signature"
    push string_heap, "parameter"
    push string_heap, "!PREFIX__parameter"
    push string_heap, "param_var"
    push string_heap, "!PREFIX__param_var"
    push string_heap, "named_param"
    push string_heap, "!PREFIX__named_param"
    push string_heap, "default_value"
    push string_heap, "!PREFIX__default_value"
    push string_heap, "trait"
    push string_heap, "!PREFIX__trait"
    push string_heap, "trait_mod"
    push string_heap, "!PREFIX__trait_mod"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "!PREFIX__trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "!PREFIX__regex_declarator"
    push string_heap, "dotty"
    push string_heap, "!PREFIX__dotty"
    push string_heap, "term"
    push string_heap, "!PREFIX__term"
    push string_heap, "term:sym<self>"
    push string_heap, "!PREFIX__term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "!PREFIX__term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "!PREFIX__term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "!PREFIX__term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "!PREFIX__term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "!PREFIX__term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "!PREFIX__term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "!PREFIX__args"
    push string_heap, "arglist"
    push string_heap, "!PREFIX__arglist"
    push string_heap, "term:sym<value>"
    push string_heap, "!PREFIX__term:sym<value>"
    push string_heap, "value"
    push string_heap, "!PREFIX__value"
    push string_heap, "number"
    push string_heap, "!PREFIX__number"
    push string_heap, "quote"
    push string_heap, "!PREFIX__quote"
    push string_heap, "quote:sym<apos>"
    push string_heap, "!PREFIX__quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "!PREFIX__quote:sym<dblq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "!PREFIX__quote:sym<q>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "!PREFIX__quote:sym<qq>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "!PREFIX__quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "!PREFIX__quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "!PREFIX__quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "!PREFIX__quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "!PREFIX__quote_escape:sym<{ }>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "!PREFIX__quote_escape:sym<esc>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "!PREFIX__circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "!PREFIX__circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, "!PREFIX__circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "!PREFIX__circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "!PREFIX__circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "!PREFIX__semilist"
    push string_heap, "infixish"
    push string_heap, "!PREFIX__infixish"
    push string_heap, "infixstopper"
    push string_heap, "!PREFIX__infixstopper"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "!PREFIX__postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "!PREFIX__postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "!PREFIX__postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "!PREFIX__postcircumfix:sym<( )>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "!PREFIX__postfix:sym<.>"
    push string_heap, "prefix:sym<++>"
    push string_heap, "!PREFIX__prefix:sym<++>"
    push string_heap, "prefix:sym<-->"
    push string_heap, "!PREFIX__prefix:sym<-->"
    push string_heap, "postfix:sym<++>"
    push string_heap, "!PREFIX__postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "!PREFIX__postfix:sym<-->"
    push string_heap, "infix:sym<**>"
    push string_heap, "!PREFIX__infix:sym<**>"
    push string_heap, "prefix:sym<+>"
    push string_heap, "!PREFIX__prefix:sym<+>"
    push string_heap, "prefix:sym<~>"
    push string_heap, "!PREFIX__prefix:sym<~>"
    push string_heap, "prefix:sym<->"
    push string_heap, "!PREFIX__prefix:sym<->"
    push string_heap, "prefix:sym<?>"
    push string_heap, "!PREFIX__prefix:sym<?>"
    push string_heap, "prefix:sym<!>"
    push string_heap, "!PREFIX__prefix:sym<!>"
    push string_heap, "prefix:sym<|>"
    push string_heap, "!PREFIX__prefix:sym<|>"
    push string_heap, "infix:sym<*>"
    push string_heap, "!PREFIX__infix:sym<*>"
    push string_heap, "infix:sym</>"
    push string_heap, "!PREFIX__infix:sym</>"
    push string_heap, "infix:sym<%>"
    push string_heap, "!PREFIX__infix:sym<%>"
    push string_heap, "infix:sym<+&>"
    push string_heap, "!PREFIX__infix:sym<+&>"
    push string_heap, "infix:sym<+>"
    push string_heap, "!PREFIX__infix:sym<+>"
    push string_heap, "infix:sym<->"
    push string_heap, "!PREFIX__infix:sym<->"
    push string_heap, "infix:sym<+|>"
    push string_heap, "!PREFIX__infix:sym<+|>"
    push string_heap, "infix:sym<+^>"
    push string_heap, "!PREFIX__infix:sym<+^>"
    push string_heap, "infix:sym<~>"
    push string_heap, "!PREFIX__infix:sym<~>"
    push string_heap, "infix:sym<==>"
    push string_heap, "!PREFIX__infix:sym<==>"
    push string_heap, "infix:sym<!=>"
    push string_heap, "!PREFIX__infix:sym<!=>"
    push string_heap, "infix:sym<<=>"
    push string_heap, "!PREFIX__infix:sym<<=>"
    push string_heap, "infix:sym<>=>"
    push string_heap, "!PREFIX__infix:sym<>=>"
    push string_heap, "infix:sym<<>"
    push string_heap, "!PREFIX__infix:sym<<>"
    push string_heap, "infix:sym<>>"
    push string_heap, "!PREFIX__infix:sym<>>"
    push string_heap, "infix:sym<eq>"
    push string_heap, "!PREFIX__infix:sym<eq>"
    push string_heap, "infix:sym<ne>"
    push string_heap, "!PREFIX__infix:sym<ne>"
    push string_heap, "infix:sym<le>"
    push string_heap, "!PREFIX__infix:sym<le>"
    push string_heap, "infix:sym<ge>"
    push string_heap, "!PREFIX__infix:sym<ge>"
    push string_heap, "infix:sym<lt>"
    push string_heap, "!PREFIX__infix:sym<lt>"
    push string_heap, "infix:sym<gt>"
    push string_heap, "!PREFIX__infix:sym<gt>"
    push string_heap, "infix:sym<=:=>"
    push string_heap, "!PREFIX__infix:sym<=:=>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "!PREFIX__infix:sym<~~>"
    push string_heap, "infix:sym<&&>"
    push string_heap, "!PREFIX__infix:sym<&&>"
    push string_heap, "infix:sym<||>"
    push string_heap, "!PREFIX__infix:sym<||>"
    push string_heap, "infix:sym<//>"
    push string_heap, "!PREFIX__infix:sym<//>"
    push string_heap, "infix:sym<?? !!>"
    push string_heap, "!PREFIX__infix:sym<?? !!>"
    push string_heap, "infix:sym<=>"
    push string_heap, "!PREFIX__infix:sym<=>"
    push string_heap, "infix:sym<:=>"
    push string_heap, "!PREFIX__infix:sym<:=>"
    push string_heap, "infix:sym<::=>"
    push string_heap, "!PREFIX__infix:sym<::=>"
    push string_heap, "infix:sym<,>"
    push string_heap, "!PREFIX__infix:sym<,>"
    push string_heap, "prefix:sym<return>"
    push string_heap, "!PREFIX__prefix:sym<return>"
    push string_heap, "prefix:sym<make>"
    push string_heap, "!PREFIX__prefix:sym<make>"
    push string_heap, "term:sym<last>"
    push string_heap, "!PREFIX__term:sym<last>"
    push string_heap, "term:sym<next>"
    push string_heap, "!PREFIX__term:sym<next>"
    push string_heap, "term:sym<redo>"
    push string_heap, "!PREFIX__term:sym<redo>"
    push string_heap, "smartmatch"
    push string_heap, "NQP::Regex"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "!PREFIX__metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "!PREFIX__metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "!PREFIX__metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "!PREFIX__assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "!PREFIX__assertion:sym<?{ }>"
    push string_heap, "assertion:sym<name>"
    push string_heap, "!PREFIX__assertion:sym<name>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "!PREFIX__assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "!PREFIX__codeblock"
    push string_heap, "NQP::Actions"
    push string_heap, "TOP"
    push string_heap, "deflongname"
    push string_heap, "comp_unit"
    push string_heap, "statementlist"
    push string_heap, "statement"
    push string_heap, "xblock"
    push string_heap, "pblock"
    push string_heap, "block"
    push string_heap, "blockoid"
    push string_heap, "newpad"
    push string_heap, "outerctx"
    push string_heap, "GLOBALish"
    push string_heap, "you_are_here"
    push string_heap, "statement_control:sym<use>"
    push string_heap, "statement_control:sym<if>"
    push string_heap, "statement_control:sym<unless>"
    push string_heap, "statement_control:sym<while>"
    push string_heap, "statement_control:sym<repeat>"
    push string_heap, "statement_control:sym<for>"
    push string_heap, "statement_control:sym<CATCH>"
    push string_heap, "statement_control:sym<CONTROL>"
    push string_heap, "statement_prefix:sym<BEGIN>"
    push string_heap, "statement_prefix:sym<INIT>"
    push string_heap, "statement_prefix:sym<try>"
    push string_heap, "blorst"
    push string_heap, "statement_mod_cond:sym<if>"
    push string_heap, "statement_mod_cond:sym<unless>"
    push string_heap, "statement_mod_loop:sym<while>"
    push string_heap, "statement_mod_loop:sym<until>"
    push string_heap, "term:sym<fatarrow>"
    push string_heap, "term:sym<colonpair>"
    push string_heap, "term:sym<variable>"
    push string_heap, "term:sym<package_declarator>"
    push string_heap, "term:sym<scope_declarator>"
    push string_heap, "term:sym<routine_declarator>"
    push string_heap, "term:sym<regex_declarator>"
    push string_heap, "term:sym<statement_prefix>"
    push string_heap, "term:sym<lambda>"
    push string_heap, "fatarrow"
    push string_heap, "colonpair"
    push string_heap, "variable"
    push string_heap, "package_declarator:sym<module>"
    push string_heap, "package_declarator:sym<knowhow>"
    push string_heap, "package_declarator:sym<class>"
    push string_heap, "package_declarator:sym<grammar>"
    push string_heap, "package_declarator:sym<role>"
    push string_heap, "package_declarator:sym<native>"
    push string_heap, "package_declarator:sym<stub>"
    push string_heap, "package_def"
    push string_heap, "scope_declarator:sym<my>"
    push string_heap, "scope_declarator:sym<our>"
    push string_heap, "scope_declarator:sym<has>"
    push string_heap, "scoped"
    push string_heap, "declarator"
    push string_heap, "multi_declarator:sym<multi>"
    push string_heap, "multi_declarator:sym<proto>"
    push string_heap, "multi_declarator:sym<null>"
    push string_heap, "variable_declarator"
    push string_heap, "routine_declarator:sym<sub>"
    push string_heap, "routine_declarator:sym<method>"
    push string_heap, "routine_def"
    push string_heap, "method_def"
    push string_heap, "signature"
    push string_heap, "parameter"
    push string_heap, "param_var"
    push string_heap, "named_param"
    push string_heap, "typename"
    push string_heap, "trait"
    push string_heap, "trait_mod:sym<is>"
    push string_heap, "regex_declarator"
    push string_heap, "dotty"
    push string_heap, "term:sym<self>"
    push string_heap, "term:sym<identifier>"
    push string_heap, "term:sym<name>"
    push string_heap, "term:sym<pir::op>"
    push string_heap, "term:sym<pir::const>"
    push string_heap, "term:sym<nqp::op>"
    push string_heap, "term:sym<onlystar>"
    push string_heap, "args"
    push string_heap, "arglist"
    push string_heap, "term:sym<multi_declarator>"
    push string_heap, "term:sym<value>"
    push string_heap, "circumfix:sym<( )>"
    push string_heap, "circumfix:sym<[ ]>"
    push string_heap, "circumfix:sym<ang>"
    push string_heap, unicode:"circumfix:sym<\x{ab} \x{bb}>"
    push string_heap, "circumfix:sym<{ }>"
    push string_heap, "circumfix:sym<sigil>"
    push string_heap, "semilist"
    push string_heap, "postcircumfix:sym<[ ]>"
    push string_heap, "postcircumfix:sym<{ }>"
    push string_heap, "postcircumfix:sym<ang>"
    push string_heap, "postcircumfix:sym<( )>"
    push string_heap, "value"
    push string_heap, "number"
    push string_heap, "quote:sym<apos>"
    push string_heap, "quote:sym<dblq>"
    push string_heap, "quote:sym<qq>"
    push string_heap, "quote:sym<q>"
    push string_heap, "quote:sym<Q>"
    push string_heap, "quote:sym<Q:PIR>"
    push string_heap, "quote:sym</ />"
    push string_heap, "quote_escape:sym<$>"
    push string_heap, "quote_escape:sym<{ }>"
    push string_heap, "quote_escape:sym<esc>"
    push string_heap, "postfix:sym<.>"
    push string_heap, "postfix:sym<++>"
    push string_heap, "postfix:sym<-->"
    push string_heap, "prefix:sym<make>"
    push string_heap, "term:sym<next>"
    push string_heap, "term:sym<last>"
    push string_heap, "term:sym<redo>"
    push string_heap, "infix:sym<~~>"
    push string_heap, "NQP::RegexActions"
    push string_heap, "metachar:sym<:my>"
    push string_heap, "metachar:sym<{ }>"
    push string_heap, "metachar:sym<nqpvar>"
    push string_heap, "assertion:sym<{ }>"
    push string_heap, "assertion:sym<?{ }>"
    push string_heap, "assertion:sym<var>"
    push string_heap, "codeblock"
    push string_heap, "NQP::Compiler"
    push string_heap, "P6opaque"
    push string_heap, "Cursor"
    push string_heap, "Match"
    push string_heap, "Method"
    push string_heap, "Regex"
    push string_heap, "P6Regex"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "CommandLine"
    push string_heap, "World"
    push string_heap, "P6opaque"
    push string_heap, "World"
    push string_heap, "Grammar"
    push string_heap, "Regex"
    push string_heap, "Actions"
    push string_heap, "RegexActions"
    push string_heap, "Compiler"
    push string_heap, "@!BLOCKS"
    push string_heap, "%!code_objects_to_fix_up"
    push string_heap, "%!code_object_fixup_list"
    push string_heap, "%!code_stub_sc_idx"
    push string_heap, "Regex"
    push string_heap, "HLL"
    push string_heap, "NQP"
    push string_heap, "P6opaque"
    push string_heap, "Grammar"
    push string_heap, "Actions"
    push string_heap, "Compiler"
    push string_heap, "P6Regex"
    .const 'Sub' $P3890 = "655_1335114138.94729" 
    capture_lex $P3890
    $P117 = $P3890()
    nqp_deserialize_sc $S100, cur_sc, string_heap, $P117
    .const 'LexInfo' $P4423 = "542_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 0
    $P4423."set_static_lexpad_value"("GLOBALish", $P118)
    .const 'LexInfo' $P4424 = "542_1335114138.94729" 
    $P4424."finish_static_lexpad"()
    .const 'LexInfo' $P4425 = "542_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 0
    $P4425."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4426 = "542_1335114138.94729" 
    $P4426."finish_static_lexpad"()
    .const '' $P4427 = "10_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 2
    set_sub_code_object $P4427, $P118
    .const '' $P4428 = "11_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 3
    set_sub_code_object $P4428, $P118
    .const '' $P4429 = "12_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 4
    set_sub_code_object $P4429, $P118
    .const '' $P4430 = "13_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 5
    set_sub_code_object $P4430, $P118
    .const '' $P4431 = "14_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 6
    set_sub_code_object $P4431, $P118
    .const '' $P4432 = "15_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 7
    set_sub_code_object $P4432, $P118
    .const '' $P4433 = "16_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 8
    set_sub_code_object $P4433, $P118
    .const '' $P4434 = "17_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 9
    set_sub_code_object $P4434, $P118
    .const '' $P4435 = "18_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 10
    set_sub_code_object $P4435, $P118
    .const '' $P4436 = "19_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 11
    set_sub_code_object $P4436, $P118
    .const '' $P4437 = "20_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 12
    set_sub_code_object $P4437, $P118
    .const '' $P4438 = "21_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 13
    set_sub_code_object $P4438, $P118
    .const '' $P4439 = "22_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 14
    set_sub_code_object $P4439, $P118
    .const '' $P4440 = "23_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 15
    set_sub_code_object $P4440, $P118
    .const '' $P4441 = "24_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 16
    set_sub_code_object $P4441, $P118
    .const '' $P4442 = "25_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 17
    set_sub_code_object $P4442, $P118
    .const '' $P4443 = "26_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 18
    set_sub_code_object $P4443, $P118
    .const '' $P4444 = "27_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 19
    set_sub_code_object $P4444, $P118
    .const '' $P4445 = "28_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 20
    set_sub_code_object $P4445, $P118
    .const '' $P4446 = "29_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 21
    set_sub_code_object $P4446, $P118
    .const '' $P4447 = "30_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 22
    set_sub_code_object $P4447, $P118
    .const '' $P4448 = "31_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 23
    set_sub_code_object $P4448, $P118
    .const '' $P4449 = "32_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 24
    set_sub_code_object $P4449, $P118
    .const '' $P4450 = "33_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 25
    set_sub_code_object $P4450, $P118
    .const '' $P4451 = "34_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 26
    set_sub_code_object $P4451, $P118
    .const '' $P4452 = "35_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 27
    set_sub_code_object $P4452, $P118
    .const '' $P4453 = "36_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 28
    set_sub_code_object $P4453, $P118
    .const '' $P4454 = "37_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 29
    set_sub_code_object $P4454, $P118
    .const '' $P4455 = "38_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 30
    set_sub_code_object $P4455, $P118
    .const '' $P4456 = "39_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 31
    set_sub_code_object $P4456, $P118
    .const 'LexInfo' $P4457 = "545_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    $P4457."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4458 = "545_1335114138.94729" 
    $P4458."finish_static_lexpad"()
    .const 'LexInfo' $P4459 = "545_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    $P4459."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4460 = "545_1335114138.94729" 
    $P4460."finish_static_lexpad"()
    .const '' $P4461 = "40_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 33
    set_sub_code_object $P4461, $P118
    .const '' $P4462 = "41_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 34
    set_sub_code_object $P4462, $P118
    .const '' $P4463 = "42_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 35
    set_sub_code_object $P4463, $P118
    .const '' $P4464 = "43_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 36
    set_sub_code_object $P4464, $P118
    .const '' $P4465 = "44_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 37
    set_sub_code_object $P4465, $P118
    .const '' $P4466 = "45_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 38
    set_sub_code_object $P4466, $P118
    .const '' $P4467 = "46_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 39
    set_sub_code_object $P4467, $P118
    .const '' $P4468 = "47_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 40
    set_sub_code_object $P4468, $P118
    .const '' $P4469 = "48_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 41
    set_sub_code_object $P4469, $P118
    .const '' $P4470 = "49_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 42
    set_sub_code_object $P4470, $P118
    .const '' $P4471 = "50_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 43
    set_sub_code_object $P4471, $P118
    .const '' $P4472 = "51_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 44
    set_sub_code_object $P4472, $P118
    .const '' $P4473 = "52_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 45
    set_sub_code_object $P4473, $P118
    .const '' $P4474 = "53_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 46
    set_sub_code_object $P4474, $P118
    .const '' $P4475 = "54_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 47
    set_sub_code_object $P4475, $P118
    .const '' $P4476 = "55_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 48
    set_sub_code_object $P4476, $P118
    .const '' $P4477 = "56_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 49
    set_sub_code_object $P4477, $P118
    .const '' $P4478 = "57_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 50
    set_sub_code_object $P4478, $P118
    .const '' $P4479 = "58_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 51
    set_sub_code_object $P4479, $P118
    .const '' $P4480 = "59_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 52
    set_sub_code_object $P4480, $P118
    .const '' $P4481 = "60_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 53
    set_sub_code_object $P4481, $P118
    .const '' $P4482 = "61_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 54
    set_sub_code_object $P4482, $P118
    .const '' $P4483 = "62_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 55
    set_sub_code_object $P4483, $P118
    .const '' $P4484 = "63_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 56
    set_sub_code_object $P4484, $P118
    .const '' $P4485 = "64_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 57
    set_sub_code_object $P4485, $P118
    .const '' $P4486 = "65_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 58
    set_sub_code_object $P4486, $P118
    .const '' $P4487 = "66_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 59
    set_sub_code_object $P4487, $P118
    .const '' $P4488 = "67_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 60
    set_sub_code_object $P4488, $P118
    .const '' $P4489 = "68_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 61
    set_sub_code_object $P4489, $P118
    .const '' $P4490 = "69_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 62
    set_sub_code_object $P4490, $P118
    .const '' $P4491 = "70_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 63
    set_sub_code_object $P4491, $P118
    .const '' $P4492 = "71_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 64
    set_sub_code_object $P4492, $P118
    .const '' $P4493 = "72_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 65
    set_sub_code_object $P4493, $P118
    .const '' $P4494 = "73_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 66
    set_sub_code_object $P4494, $P118
    .const '' $P4495 = "74_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 67
    set_sub_code_object $P4495, $P118
    .const '' $P4496 = "75_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 68
    set_sub_code_object $P4496, $P118
    .const '' $P4497 = "76_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 69
    set_sub_code_object $P4497, $P118
    .const '' $P4498 = "77_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 70
    set_sub_code_object $P4498, $P118
    .const '' $P4499 = "78_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 71
    set_sub_code_object $P4499, $P118
    .const '' $P4500 = "79_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 72
    set_sub_code_object $P4500, $P118
    .const '' $P4501 = "80_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 73
    set_sub_code_object $P4501, $P118
    .const '' $P4502 = "81_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 74
    set_sub_code_object $P4502, $P118
    .const '' $P4503 = "82_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 75
    set_sub_code_object $P4503, $P118
    .const '' $P4504 = "83_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 76
    set_sub_code_object $P4504, $P118
    .const '' $P4505 = "84_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 77
    set_sub_code_object $P4505, $P118
    .const '' $P4506 = "85_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 78
    set_sub_code_object $P4506, $P118
    .const '' $P4507 = "86_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 79
    set_sub_code_object $P4507, $P118
    .const '' $P4508 = "87_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 80
    set_sub_code_object $P4508, $P118
    .const '' $P4509 = "88_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 81
    set_sub_code_object $P4509, $P118
    .const '' $P4510 = "89_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 82
    set_sub_code_object $P4510, $P118
    .const '' $P4511 = "90_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 83
    set_sub_code_object $P4511, $P118
    .const '' $P4512 = "91_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 84
    set_sub_code_object $P4512, $P118
    .const '' $P4513 = "92_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 85
    set_sub_code_object $P4513, $P118
    .const '' $P4514 = "93_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 86
    set_sub_code_object $P4514, $P118
    .const '' $P4515 = "94_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 87
    set_sub_code_object $P4515, $P118
    .const '' $P4516 = "95_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 88
    set_sub_code_object $P4516, $P118
    .const '' $P4517 = "96_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 89
    set_sub_code_object $P4517, $P118
    .const '' $P4518 = "97_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 90
    set_sub_code_object $P4518, $P118
    .const '' $P4519 = "98_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 91
    set_sub_code_object $P4519, $P118
    .const '' $P4520 = "99_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 92
    set_sub_code_object $P4520, $P118
    .const '' $P4521 = "100_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 93
    set_sub_code_object $P4521, $P118
    .const '' $P4522 = "101_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 94
    set_sub_code_object $P4522, $P118
    .const '' $P4523 = "102_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 95
    set_sub_code_object $P4523, $P118
    .const '' $P4524 = "103_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 96
    set_sub_code_object $P4524, $P118
    .const '' $P4525 = "104_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 97
    set_sub_code_object $P4525, $P118
    .const '' $P4526 = "105_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 98
    set_sub_code_object $P4526, $P118
    .const '' $P4527 = "106_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 99
    set_sub_code_object $P4527, $P118
    .const '' $P4528 = "107_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 100
    set_sub_code_object $P4528, $P118
    .const '' $P4529 = "108_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 101
    set_sub_code_object $P4529, $P118
    .const '' $P4530 = "109_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 102
    set_sub_code_object $P4530, $P118
    .const '' $P4531 = "110_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 103
    set_sub_code_object $P4531, $P118
    .const '' $P4532 = "111_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 104
    set_sub_code_object $P4532, $P118
    .const '' $P4533 = "112_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 105
    set_sub_code_object $P4533, $P118
    .const '' $P4534 = "113_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 106
    set_sub_code_object $P4534, $P118
    .const '' $P4535 = "114_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 107
    set_sub_code_object $P4535, $P118
    .const '' $P4536 = "115_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 108
    set_sub_code_object $P4536, $P118
    .const '' $P4537 = "116_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 109
    set_sub_code_object $P4537, $P118
    .const '' $P4538 = "117_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 110
    set_sub_code_object $P4538, $P118
    .const '' $P4539 = "118_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 111
    set_sub_code_object $P4539, $P118
    .const '' $P4540 = "119_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 112
    set_sub_code_object $P4540, $P118
    .const '' $P4541 = "120_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 113
    set_sub_code_object $P4541, $P118
    .const '' $P4542 = "121_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 114
    set_sub_code_object $P4542, $P118
    .const '' $P4543 = "122_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 115
    set_sub_code_object $P4543, $P118
    .const '' $P4544 = "123_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 116
    set_sub_code_object $P4544, $P118
    .const '' $P4545 = "124_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 117
    set_sub_code_object $P4545, $P118
    .const '' $P4546 = "125_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 118
    set_sub_code_object $P4546, $P118
    .const '' $P4547 = "126_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 119
    set_sub_code_object $P4547, $P118
    .const '' $P4548 = "127_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 120
    set_sub_code_object $P4548, $P118
    .const '' $P4549 = "128_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 121
    set_sub_code_object $P4549, $P118
    .const '' $P4550 = "129_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 122
    set_sub_code_object $P4550, $P118
    .const '' $P4551 = "130_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 123
    set_sub_code_object $P4551, $P118
    .const '' $P4552 = "131_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 124
    set_sub_code_object $P4552, $P118
    .const '' $P4553 = "132_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 125
    set_sub_code_object $P4553, $P118
    .const '' $P4554 = "133_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 126
    set_sub_code_object $P4554, $P118
    .const '' $P4555 = "134_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 127
    set_sub_code_object $P4555, $P118
    .const '' $P4556 = "135_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 128
    set_sub_code_object $P4556, $P118
    .const '' $P4557 = "136_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 129
    set_sub_code_object $P4557, $P118
    .const '' $P4558 = "137_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 130
    set_sub_code_object $P4558, $P118
    .const '' $P4559 = "138_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 131
    set_sub_code_object $P4559, $P118
    .const '' $P4560 = "139_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 132
    set_sub_code_object $P4560, $P118
    .const '' $P4561 = "140_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 133
    set_sub_code_object $P4561, $P118
    .const '' $P4562 = "141_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 134
    set_sub_code_object $P4562, $P118
    .const '' $P4563 = "142_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 135
    set_sub_code_object $P4563, $P118
    .const '' $P4564 = "143_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 136
    set_sub_code_object $P4564, $P118
    .const '' $P4565 = "144_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 137
    set_sub_code_object $P4565, $P118
    .const '' $P4566 = "145_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 138
    set_sub_code_object $P4566, $P118
    .const '' $P4567 = "146_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 139
    set_sub_code_object $P4567, $P118
    .const '' $P4568 = "147_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 140
    set_sub_code_object $P4568, $P118
    .const '' $P4569 = "148_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 141
    set_sub_code_object $P4569, $P118
    .const '' $P4570 = "149_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 142
    set_sub_code_object $P4570, $P118
    .const '' $P4571 = "150_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 143
    set_sub_code_object $P4571, $P118
    .const '' $P4572 = "151_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 144
    set_sub_code_object $P4572, $P118
    .const '' $P4573 = "152_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 145
    set_sub_code_object $P4573, $P118
    .const '' $P4574 = "153_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 146
    set_sub_code_object $P4574, $P118
    .const '' $P4575 = "154_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 147
    set_sub_code_object $P4575, $P118
    .const '' $P4576 = "155_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 148
    set_sub_code_object $P4576, $P118
    .const '' $P4577 = "156_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 149
    set_sub_code_object $P4577, $P118
    .const '' $P4578 = "157_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 150
    set_sub_code_object $P4578, $P118
    .const '' $P4579 = "158_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 151
    set_sub_code_object $P4579, $P118
    .const '' $P4580 = "159_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 152
    set_sub_code_object $P4580, $P118
    .const '' $P4581 = "160_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 153
    set_sub_code_object $P4581, $P118
    .const '' $P4582 = "161_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 154
    set_sub_code_object $P4582, $P118
    .const '' $P4583 = "162_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 155
    set_sub_code_object $P4583, $P118
    .const '' $P4584 = "163_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 156
    set_sub_code_object $P4584, $P118
    .const '' $P4585 = "164_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 157
    set_sub_code_object $P4585, $P118
    .const '' $P4586 = "165_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 158
    set_sub_code_object $P4586, $P118
    .const '' $P4587 = "166_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 159
    set_sub_code_object $P4587, $P118
    .const '' $P4588 = "167_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 160
    set_sub_code_object $P4588, $P118
    .const '' $P4589 = "168_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 161
    set_sub_code_object $P4589, $P118
    .const '' $P4590 = "169_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 162
    set_sub_code_object $P4590, $P118
    .const '' $P4591 = "170_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 163
    set_sub_code_object $P4591, $P118
    .const '' $P4592 = "171_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 164
    set_sub_code_object $P4592, $P118
    .const '' $P4593 = "172_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 165
    set_sub_code_object $P4593, $P118
    .const '' $P4594 = "173_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 166
    set_sub_code_object $P4594, $P118
    .const '' $P4595 = "174_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 167
    set_sub_code_object $P4595, $P118
    .const '' $P4596 = "175_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 168
    set_sub_code_object $P4596, $P118
    .const '' $P4597 = "176_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 169
    set_sub_code_object $P4597, $P118
    .const '' $P4598 = "177_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 170
    set_sub_code_object $P4598, $P118
    .const '' $P4599 = "178_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 171
    set_sub_code_object $P4599, $P118
    .const '' $P4600 = "179_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 172
    set_sub_code_object $P4600, $P118
    .const '' $P4601 = "180_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 173
    set_sub_code_object $P4601, $P118
    .const '' $P4602 = "181_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 174
    set_sub_code_object $P4602, $P118
    .const '' $P4603 = "182_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 175
    set_sub_code_object $P4603, $P118
    .const '' $P4604 = "183_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 176
    set_sub_code_object $P4604, $P118
    .const '' $P4605 = "184_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 177
    set_sub_code_object $P4605, $P118
    .const '' $P4606 = "185_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 178
    set_sub_code_object $P4606, $P118
    .const '' $P4607 = "186_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 179
    set_sub_code_object $P4607, $P118
    .const '' $P4608 = "187_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 180
    set_sub_code_object $P4608, $P118
    .const '' $P4609 = "188_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 181
    set_sub_code_object $P4609, $P118
    .const '' $P4610 = "189_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 182
    set_sub_code_object $P4610, $P118
    .const '' $P4611 = "190_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 183
    set_sub_code_object $P4611, $P118
    .const '' $P4612 = "191_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 184
    set_sub_code_object $P4612, $P118
    .const '' $P4613 = "192_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 185
    set_sub_code_object $P4613, $P118
    .const '' $P4614 = "193_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 186
    set_sub_code_object $P4614, $P118
    .const '' $P4615 = "194_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 187
    set_sub_code_object $P4615, $P118
    .const '' $P4616 = "195_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 188
    set_sub_code_object $P4616, $P118
    .const '' $P4617 = "196_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 189
    set_sub_code_object $P4617, $P118
    .const '' $P4618 = "197_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 190
    set_sub_code_object $P4618, $P118
    .const '' $P4619 = "198_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 191
    set_sub_code_object $P4619, $P118
    .const '' $P4620 = "199_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 192
    set_sub_code_object $P4620, $P118
    .const '' $P4621 = "200_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 193
    set_sub_code_object $P4621, $P118
    .const '' $P4622 = "201_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 194
    set_sub_code_object $P4622, $P118
    .const '' $P4623 = "202_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 195
    set_sub_code_object $P4623, $P118
    .const '' $P4624 = "203_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 196
    set_sub_code_object $P4624, $P118
    .const '' $P4625 = "204_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 197
    set_sub_code_object $P4625, $P118
    .const '' $P4626 = "205_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 198
    set_sub_code_object $P4626, $P118
    .const '' $P4627 = "206_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 199
    set_sub_code_object $P4627, $P118
    .const '' $P4628 = "207_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 200
    set_sub_code_object $P4628, $P118
    .const '' $P4629 = "208_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 201
    set_sub_code_object $P4629, $P118
    .const '' $P4630 = "209_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 202
    set_sub_code_object $P4630, $P118
    .const '' $P4631 = "210_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 203
    set_sub_code_object $P4631, $P118
    .const '' $P4632 = "211_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 204
    set_sub_code_object $P4632, $P118
    .const '' $P4633 = "212_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 205
    set_sub_code_object $P4633, $P118
    .const '' $P4634 = "213_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 206
    set_sub_code_object $P4634, $P118
    .const '' $P4635 = "214_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 207
    set_sub_code_object $P4635, $P118
    .const '' $P4636 = "215_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 208
    set_sub_code_object $P4636, $P118
    .const '' $P4637 = "216_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 209
    set_sub_code_object $P4637, $P118
    .const '' $P4638 = "217_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 210
    set_sub_code_object $P4638, $P118
    .const '' $P4639 = "218_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 211
    set_sub_code_object $P4639, $P118
    .const '' $P4640 = "219_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 212
    set_sub_code_object $P4640, $P118
    .const '' $P4641 = "220_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 213
    set_sub_code_object $P4641, $P118
    .const '' $P4642 = "221_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 214
    set_sub_code_object $P4642, $P118
    .const '' $P4643 = "222_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 215
    set_sub_code_object $P4643, $P118
    .const '' $P4644 = "223_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 216
    set_sub_code_object $P4644, $P118
    .const '' $P4645 = "224_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 217
    set_sub_code_object $P4645, $P118
    .const '' $P4646 = "225_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 218
    set_sub_code_object $P4646, $P118
    .const '' $P4647 = "226_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 219
    set_sub_code_object $P4647, $P118
    .const '' $P4648 = "227_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 220
    set_sub_code_object $P4648, $P118
    .const '' $P4649 = "228_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 221
    set_sub_code_object $P4649, $P118
    .const '' $P4650 = "229_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 222
    set_sub_code_object $P4650, $P118
    .const '' $P4651 = "230_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 223
    set_sub_code_object $P4651, $P118
    .const '' $P4652 = "231_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 224
    set_sub_code_object $P4652, $P118
    .const '' $P4653 = "232_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 225
    set_sub_code_object $P4653, $P118
    .const '' $P4654 = "233_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 226
    set_sub_code_object $P4654, $P118
    .const '' $P4655 = "234_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 227
    set_sub_code_object $P4655, $P118
    .const '' $P4656 = "235_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 228
    set_sub_code_object $P4656, $P118
    .const '' $P4657 = "236_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 229
    set_sub_code_object $P4657, $P118
    .const '' $P4658 = "237_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 230
    set_sub_code_object $P4658, $P118
    .const '' $P4659 = "238_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 231
    set_sub_code_object $P4659, $P118
    .const '' $P4660 = "239_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 232
    set_sub_code_object $P4660, $P118
    .const '' $P4661 = "240_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 233
    set_sub_code_object $P4661, $P118
    .const '' $P4662 = "241_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 234
    set_sub_code_object $P4662, $P118
    .const '' $P4663 = "242_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 235
    set_sub_code_object $P4663, $P118
    .const '' $P4664 = "243_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 236
    set_sub_code_object $P4664, $P118
    .const '' $P4665 = "244_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 237
    set_sub_code_object $P4665, $P118
    .const '' $P4666 = "245_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 238
    set_sub_code_object $P4666, $P118
    .const '' $P4667 = "246_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 239
    set_sub_code_object $P4667, $P118
    .const '' $P4668 = "247_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 240
    set_sub_code_object $P4668, $P118
    .const '' $P4669 = "248_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 241
    set_sub_code_object $P4669, $P118
    .const '' $P4670 = "249_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 242
    set_sub_code_object $P4670, $P118
    .const '' $P4671 = "250_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 243
    set_sub_code_object $P4671, $P118
    .const '' $P4672 = "251_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 244
    set_sub_code_object $P4672, $P118
    .const '' $P4673 = "252_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 245
    set_sub_code_object $P4673, $P118
    .const '' $P4674 = "253_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 246
    set_sub_code_object $P4674, $P118
    .const '' $P4675 = "254_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 247
    set_sub_code_object $P4675, $P118
    .const '' $P4676 = "255_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 248
    set_sub_code_object $P4676, $P118
    .const '' $P4677 = "256_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 249
    set_sub_code_object $P4677, $P118
    .const '' $P4678 = "257_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 250
    set_sub_code_object $P4678, $P118
    .const '' $P4679 = "258_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 251
    set_sub_code_object $P4679, $P118
    .const '' $P4680 = "259_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 252
    set_sub_code_object $P4680, $P118
    .const '' $P4681 = "260_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 253
    set_sub_code_object $P4681, $P118
    .const '' $P4682 = "261_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 254
    set_sub_code_object $P4682, $P118
    .const '' $P4683 = "262_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 255
    set_sub_code_object $P4683, $P118
    .const '' $P4684 = "263_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 256
    set_sub_code_object $P4684, $P118
    .const '' $P4685 = "264_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 257
    set_sub_code_object $P4685, $P118
    .const '' $P4686 = "265_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 258
    set_sub_code_object $P4686, $P118
    .const '' $P4687 = "266_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 259
    set_sub_code_object $P4687, $P118
    .const '' $P4688 = "267_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 260
    set_sub_code_object $P4688, $P118
    .const '' $P4689 = "268_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 261
    set_sub_code_object $P4689, $P118
    .const '' $P4690 = "269_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 262
    set_sub_code_object $P4690, $P118
    .const '' $P4691 = "270_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 263
    set_sub_code_object $P4691, $P118
    .const '' $P4692 = "271_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 264
    set_sub_code_object $P4692, $P118
    .const '' $P4693 = "272_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 265
    set_sub_code_object $P4693, $P118
    .const '' $P4694 = "273_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 266
    set_sub_code_object $P4694, $P118
    .const '' $P4695 = "274_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 267
    set_sub_code_object $P4695, $P118
    .const '' $P4696 = "275_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 268
    set_sub_code_object $P4696, $P118
    .const '' $P4697 = "276_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 269
    set_sub_code_object $P4697, $P118
    .const '' $P4698 = "277_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 270
    set_sub_code_object $P4698, $P118
    .const '' $P4699 = "278_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 271
    set_sub_code_object $P4699, $P118
    .const '' $P4700 = "279_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 272
    set_sub_code_object $P4700, $P118
    .const '' $P4701 = "280_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 273
    set_sub_code_object $P4701, $P118
    .const '' $P4702 = "281_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 274
    set_sub_code_object $P4702, $P118
    .const '' $P4703 = "282_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 275
    set_sub_code_object $P4703, $P118
    .const '' $P4704 = "283_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 276
    set_sub_code_object $P4704, $P118
    .const '' $P4705 = "284_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 277
    set_sub_code_object $P4705, $P118
    .const '' $P4706 = "285_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 278
    set_sub_code_object $P4706, $P118
    .const '' $P4707 = "286_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 279
    set_sub_code_object $P4707, $P118
    .const '' $P4708 = "287_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 280
    set_sub_code_object $P4708, $P118
    .const '' $P4709 = "288_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 281
    set_sub_code_object $P4709, $P118
    .const '' $P4710 = "289_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 282
    set_sub_code_object $P4710, $P118
    .const '' $P4711 = "290_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 283
    set_sub_code_object $P4711, $P118
    .const '' $P4712 = "291_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 284
    set_sub_code_object $P4712, $P118
    .const '' $P4713 = "292_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 285
    set_sub_code_object $P4713, $P118
    .const '' $P4714 = "293_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 286
    set_sub_code_object $P4714, $P118
    .const '' $P4715 = "294_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 287
    set_sub_code_object $P4715, $P118
    .const '' $P4716 = "295_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 288
    set_sub_code_object $P4716, $P118
    .const '' $P4717 = "296_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 289
    set_sub_code_object $P4717, $P118
    .const '' $P4718 = "297_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 290
    set_sub_code_object $P4718, $P118
    .const '' $P4719 = "298_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 291
    set_sub_code_object $P4719, $P118
    .const '' $P4720 = "299_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 292
    set_sub_code_object $P4720, $P118
    .const '' $P4721 = "300_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 293
    set_sub_code_object $P4721, $P118
    .const '' $P4722 = "301_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 294
    set_sub_code_object $P4722, $P118
    .const '' $P4723 = "302_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 295
    set_sub_code_object $P4723, $P118
    .const '' $P4724 = "303_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 296
    set_sub_code_object $P4724, $P118
    .const '' $P4725 = "304_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 297
    set_sub_code_object $P4725, $P118
    .const '' $P4726 = "305_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 298
    set_sub_code_object $P4726, $P118
    .const '' $P4727 = "306_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 299
    set_sub_code_object $P4727, $P118
    .const '' $P4728 = "307_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 300
    set_sub_code_object $P4728, $P118
    .const '' $P4729 = "308_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 301
    set_sub_code_object $P4729, $P118
    .const '' $P4730 = "309_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 302
    set_sub_code_object $P4730, $P118
    .const '' $P4731 = "310_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 303
    set_sub_code_object $P4731, $P118
    .const '' $P4732 = "311_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 304
    set_sub_code_object $P4732, $P118
    .const '' $P4733 = "312_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 305
    set_sub_code_object $P4733, $P118
    .const '' $P4734 = "313_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 306
    set_sub_code_object $P4734, $P118
    .const '' $P4735 = "314_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 307
    set_sub_code_object $P4735, $P118
    .const '' $P4736 = "315_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 308
    set_sub_code_object $P4736, $P118
    .const '' $P4737 = "316_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 309
    set_sub_code_object $P4737, $P118
    .const '' $P4738 = "317_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 310
    set_sub_code_object $P4738, $P118
    .const '' $P4739 = "318_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 311
    set_sub_code_object $P4739, $P118
    .const '' $P4740 = "319_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 312
    set_sub_code_object $P4740, $P118
    .const '' $P4741 = "320_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 313
    set_sub_code_object $P4741, $P118
    .const '' $P4742 = "321_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 314
    set_sub_code_object $P4742, $P118
    .const '' $P4743 = "322_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 315
    set_sub_code_object $P4743, $P118
    .const '' $P4744 = "323_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 316
    set_sub_code_object $P4744, $P118
    .const '' $P4745 = "324_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 317
    set_sub_code_object $P4745, $P118
    .const '' $P4746 = "325_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 318
    set_sub_code_object $P4746, $P118
    .const '' $P4747 = "326_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 319
    set_sub_code_object $P4747, $P118
    .const '' $P4748 = "327_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 320
    set_sub_code_object $P4748, $P118
    .const '' $P4749 = "328_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 321
    set_sub_code_object $P4749, $P118
    .const '' $P4750 = "329_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 322
    set_sub_code_object $P4750, $P118
    .const '' $P4751 = "330_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 323
    set_sub_code_object $P4751, $P118
    .const '' $P4752 = "331_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 324
    set_sub_code_object $P4752, $P118
    .const '' $P4753 = "332_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 325
    set_sub_code_object $P4753, $P118
    .const '' $P4754 = "333_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 326
    set_sub_code_object $P4754, $P118
    .const '' $P4755 = "334_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 327
    set_sub_code_object $P4755, $P118
    .const '' $P4756 = "335_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 328
    set_sub_code_object $P4756, $P118
    .const '' $P4757 = "336_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 329
    set_sub_code_object $P4757, $P118
    .const '' $P4758 = "337_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 330
    set_sub_code_object $P4758, $P118
    .const '' $P4759 = "338_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 331
    set_sub_code_object $P4759, $P118
    .const '' $P4760 = "339_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 332
    set_sub_code_object $P4760, $P118
    .const '' $P4761 = "340_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 333
    set_sub_code_object $P4761, $P118
    .const '' $P4762 = "341_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 334
    set_sub_code_object $P4762, $P118
    .const '' $P4763 = "342_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 335
    set_sub_code_object $P4763, $P118
    .const '' $P4764 = "343_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 336
    set_sub_code_object $P4764, $P118
    .const '' $P4765 = "344_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 337
    set_sub_code_object $P4765, $P118
    .const '' $P4766 = "345_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 338
    set_sub_code_object $P4766, $P118
    .const '' $P4767 = "346_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 339
    set_sub_code_object $P4767, $P118
    .const '' $P4768 = "347_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 340
    set_sub_code_object $P4768, $P118
    .const '' $P4769 = "348_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 341
    set_sub_code_object $P4769, $P118
    .const '' $P4770 = "349_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 342
    set_sub_code_object $P4770, $P118
    .const '' $P4771 = "350_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 343
    set_sub_code_object $P4771, $P118
    .const '' $P4772 = "351_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 344
    set_sub_code_object $P4772, $P118
    .const '' $P4773 = "352_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 345
    set_sub_code_object $P4773, $P118
    .const '' $P4774 = "353_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 346
    set_sub_code_object $P4774, $P118
    .const '' $P4775 = "354_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 347
    set_sub_code_object $P4775, $P118
    .const '' $P4776 = "355_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 348
    set_sub_code_object $P4776, $P118
    .const '' $P4777 = "356_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 349
    set_sub_code_object $P4777, $P118
    .const '' $P4778 = "357_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 350
    set_sub_code_object $P4778, $P118
    .const '' $P4779 = "358_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 351
    set_sub_code_object $P4779, $P118
    .const '' $P4780 = "359_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 352
    set_sub_code_object $P4780, $P118
    .const '' $P4781 = "360_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 353
    set_sub_code_object $P4781, $P118
    .const '' $P4782 = "361_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 354
    set_sub_code_object $P4782, $P118
    .const '' $P4783 = "362_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 355
    set_sub_code_object $P4783, $P118
    .const '' $P4784 = "363_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 356
    set_sub_code_object $P4784, $P118
    .const '' $P4785 = "364_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 357
    set_sub_code_object $P4785, $P118
    .const '' $P4786 = "365_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 358
    set_sub_code_object $P4786, $P118
    .const '' $P4787 = "366_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 359
    set_sub_code_object $P4787, $P118
    .const '' $P4788 = "367_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 360
    set_sub_code_object $P4788, $P118
    .const '' $P4789 = "368_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 361
    set_sub_code_object $P4789, $P118
    .const '' $P4790 = "369_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 362
    set_sub_code_object $P4790, $P118
    .const '' $P4791 = "370_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 363
    set_sub_code_object $P4791, $P118
    .const '' $P4792 = "371_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 364
    set_sub_code_object $P4792, $P118
    .const '' $P4793 = "372_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 365
    set_sub_code_object $P4793, $P118
    .const '' $P4794 = "373_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 366
    set_sub_code_object $P4794, $P118
    .const '' $P4795 = "374_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 367
    set_sub_code_object $P4795, $P118
    .const '' $P4796 = "375_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 368
    set_sub_code_object $P4796, $P118
    .const '' $P4797 = "376_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 369
    set_sub_code_object $P4797, $P118
    .const '' $P4798 = "377_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 370
    set_sub_code_object $P4798, $P118
    .const '' $P4799 = "378_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 371
    set_sub_code_object $P4799, $P118
    .const '' $P4800 = "379_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 372
    set_sub_code_object $P4800, $P118
    .const '' $P4801 = "380_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 373
    set_sub_code_object $P4801, $P118
    .const '' $P4802 = "381_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 374
    set_sub_code_object $P4802, $P118
    .const '' $P4803 = "382_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 375
    set_sub_code_object $P4803, $P118
    .const '' $P4804 = "383_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 376
    set_sub_code_object $P4804, $P118
    .const '' $P4805 = "384_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 377
    set_sub_code_object $P4805, $P118
    .const '' $P4806 = "385_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 378
    set_sub_code_object $P4806, $P118
    .const '' $P4807 = "386_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 379
    set_sub_code_object $P4807, $P118
    .const '' $P4808 = "387_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 380
    set_sub_code_object $P4808, $P118
    .const '' $P4809 = "388_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 381
    set_sub_code_object $P4809, $P118
    .const '' $P4810 = "389_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 382
    set_sub_code_object $P4810, $P118
    .const '' $P4811 = "390_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 383
    set_sub_code_object $P4811, $P118
    .const '' $P4812 = "391_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 384
    set_sub_code_object $P4812, $P118
    .const '' $P4813 = "392_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 385
    set_sub_code_object $P4813, $P118
    .const '' $P4814 = "393_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 386
    set_sub_code_object $P4814, $P118
    .const '' $P4815 = "394_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 387
    set_sub_code_object $P4815, $P118
    .const '' $P4816 = "395_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 388
    set_sub_code_object $P4816, $P118
    .const '' $P4817 = "396_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 389
    set_sub_code_object $P4817, $P118
    .const '' $P4818 = "397_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 390
    set_sub_code_object $P4818, $P118
    .const '' $P4819 = "398_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 391
    set_sub_code_object $P4819, $P118
    .const '' $P4820 = "399_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 392
    set_sub_code_object $P4820, $P118
    .const '' $P4821 = "400_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 393
    set_sub_code_object $P4821, $P118
    .const '' $P4822 = "401_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 394
    set_sub_code_object $P4822, $P118
    .const '' $P4823 = "402_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 395
    set_sub_code_object $P4823, $P118
    .const '' $P4824 = "403_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 396
    set_sub_code_object $P4824, $P118
    .const '' $P4825 = "404_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 397
    set_sub_code_object $P4825, $P118
    .const '' $P4826 = "405_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 398
    set_sub_code_object $P4826, $P118
    .const 'LexInfo' $P4827 = "571_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 32
    $P4827."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4828 = "571_1335114138.94729" 
    $P4828."finish_static_lexpad"()
    .const 'LexInfo' $P4829 = "571_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 32
    $P4829."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4830 = "571_1335114138.94729" 
    $P4830."finish_static_lexpad"()
    .const '' $P4831 = "406_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 400
    set_sub_code_object $P4831, $P118
    .const '' $P4832 = "407_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 401
    set_sub_code_object $P4832, $P118
    .const '' $P4833 = "408_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 402
    set_sub_code_object $P4833, $P118
    .const '' $P4834 = "409_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 403
    set_sub_code_object $P4834, $P118
    .const '' $P4835 = "410_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 404
    set_sub_code_object $P4835, $P118
    .const '' $P4836 = "411_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 405
    set_sub_code_object $P4836, $P118
    .const '' $P4837 = "412_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 406
    set_sub_code_object $P4837, $P118
    .const '' $P4838 = "413_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 407
    set_sub_code_object $P4838, $P118
    .const '' $P4839 = "414_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 408
    set_sub_code_object $P4839, $P118
    .const '' $P4840 = "415_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 409
    set_sub_code_object $P4840, $P118
    .const '' $P4841 = "416_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 410
    set_sub_code_object $P4841, $P118
    .const '' $P4842 = "417_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 411
    set_sub_code_object $P4842, $P118
    .const '' $P4843 = "418_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 412
    set_sub_code_object $P4843, $P118
    .const '' $P4844 = "419_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 413
    set_sub_code_object $P4844, $P118
    .const '' $P4845 = "420_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 414
    set_sub_code_object $P4845, $P118
    .const '' $P4846 = "421_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 415
    set_sub_code_object $P4846, $P118
    .const 'LexInfo' $P4847 = "586_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 399
    $P4847."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4848 = "586_1335114138.94729" 
    $P4848."finish_static_lexpad"()
    .const 'LexInfo' $P4849 = "586_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 399
    $P4849."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4850 = "586_1335114138.94729" 
    $P4850."finish_static_lexpad"()
    .const '' $P4851 = "422_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 417
    set_sub_code_object $P4851, $P118
    .const '' $P4852 = "423_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 418
    set_sub_code_object $P4852, $P118
    .const '' $P4853 = "424_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 419
    set_sub_code_object $P4853, $P118
    .const '' $P4854 = "425_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 420
    set_sub_code_object $P4854, $P118
    .const '' $P4855 = "426_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 421
    set_sub_code_object $P4855, $P118
    .const '' $P4856 = "427_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 422
    set_sub_code_object $P4856, $P118
    .const '' $P4857 = "428_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 423
    set_sub_code_object $P4857, $P118
    .const '' $P4858 = "429_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 424
    set_sub_code_object $P4858, $P118
    .const '' $P4859 = "430_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 425
    set_sub_code_object $P4859, $P118
    .const '' $P4860 = "431_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 426
    set_sub_code_object $P4860, $P118
    .const '' $P4861 = "432_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 427
    set_sub_code_object $P4861, $P118
    .const '' $P4862 = "433_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 428
    set_sub_code_object $P4862, $P118
    .const '' $P4863 = "434_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 429
    set_sub_code_object $P4863, $P118
    .const '' $P4864 = "435_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 430
    set_sub_code_object $P4864, $P118
    .const '' $P4865 = "436_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 431
    set_sub_code_object $P4865, $P118
    .const '' $P4866 = "437_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 432
    set_sub_code_object $P4866, $P118
    .const '' $P4867 = "438_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 433
    set_sub_code_object $P4867, $P118
    .const '' $P4868 = "439_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 434
    set_sub_code_object $P4868, $P118
    .const '' $P4869 = "440_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 435
    set_sub_code_object $P4869, $P118
    .const '' $P4870 = "441_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 436
    set_sub_code_object $P4870, $P118
    .const '' $P4871 = "442_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 437
    set_sub_code_object $P4871, $P118
    .const '' $P4872 = "443_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 438
    set_sub_code_object $P4872, $P118
    .const '' $P4873 = "444_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 439
    set_sub_code_object $P4873, $P118
    .const '' $P4874 = "445_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 440
    set_sub_code_object $P4874, $P118
    .const '' $P4875 = "446_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 441
    set_sub_code_object $P4875, $P118
    .const '' $P4876 = "447_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 442
    set_sub_code_object $P4876, $P118
    .const '' $P4877 = "448_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 443
    set_sub_code_object $P4877, $P118
    .const '' $P4878 = "449_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 444
    set_sub_code_object $P4878, $P118
    .const '' $P4879 = "450_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 445
    set_sub_code_object $P4879, $P118
    .const '' $P4880 = "451_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 446
    set_sub_code_object $P4880, $P118
    .const '' $P4881 = "452_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 447
    set_sub_code_object $P4881, $P118
    .const '' $P4882 = "453_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 448
    set_sub_code_object $P4882, $P118
    .const '' $P4883 = "454_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 449
    set_sub_code_object $P4883, $P118
    .const '' $P4884 = "455_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 450
    set_sub_code_object $P4884, $P118
    .const '' $P4885 = "456_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 451
    set_sub_code_object $P4885, $P118
    .const '' $P4886 = "457_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 452
    set_sub_code_object $P4886, $P118
    .const '' $P4887 = "458_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 453
    set_sub_code_object $P4887, $P118
    .const '' $P4888 = "459_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 454
    set_sub_code_object $P4888, $P118
    .const '' $P4889 = "460_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 455
    set_sub_code_object $P4889, $P118
    .const '' $P4890 = "461_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 456
    set_sub_code_object $P4890, $P118
    .const '' $P4891 = "462_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 457
    set_sub_code_object $P4891, $P118
    .const '' $P4892 = "463_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 458
    set_sub_code_object $P4892, $P118
    .const '' $P4893 = "464_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 459
    set_sub_code_object $P4893, $P118
    .const '' $P4894 = "465_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 460
    set_sub_code_object $P4894, $P118
    .const '' $P4895 = "466_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 461
    set_sub_code_object $P4895, $P118
    .const '' $P4896 = "467_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 462
    set_sub_code_object $P4896, $P118
    .const '' $P4897 = "468_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 463
    set_sub_code_object $P4897, $P118
    .const '' $P4898 = "469_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 464
    set_sub_code_object $P4898, $P118
    .const '' $P4899 = "470_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 465
    set_sub_code_object $P4899, $P118
    .const '' $P4900 = "471_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 466
    set_sub_code_object $P4900, $P118
    .const '' $P4901 = "472_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 467
    set_sub_code_object $P4901, $P118
    .const '' $P4902 = "473_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 468
    set_sub_code_object $P4902, $P118
    .const '' $P4903 = "474_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 469
    set_sub_code_object $P4903, $P118
    .const '' $P4904 = "475_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 470
    set_sub_code_object $P4904, $P118
    .const '' $P4905 = "476_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 471
    set_sub_code_object $P4905, $P118
    .const '' $P4906 = "477_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 472
    set_sub_code_object $P4906, $P118
    .const '' $P4907 = "478_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 473
    set_sub_code_object $P4907, $P118
    .const '' $P4908 = "479_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 474
    set_sub_code_object $P4908, $P118
    .const '' $P4909 = "480_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 475
    set_sub_code_object $P4909, $P118
    .const '' $P4910 = "481_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 476
    set_sub_code_object $P4910, $P118
    .const '' $P4911 = "482_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 477
    set_sub_code_object $P4911, $P118
    .const '' $P4912 = "483_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 478
    set_sub_code_object $P4912, $P118
    .const '' $P4913 = "484_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 479
    set_sub_code_object $P4913, $P118
    .const '' $P4914 = "485_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 480
    set_sub_code_object $P4914, $P118
    .const '' $P4915 = "486_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 481
    set_sub_code_object $P4915, $P118
    .const '' $P4916 = "487_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 482
    set_sub_code_object $P4916, $P118
    .const '' $P4917 = "488_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 483
    set_sub_code_object $P4917, $P118
    .const '' $P4918 = "489_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 484
    set_sub_code_object $P4918, $P118
    .const '' $P4919 = "490_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 485
    set_sub_code_object $P4919, $P118
    .const '' $P4920 = "491_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 486
    set_sub_code_object $P4920, $P118
    .const '' $P4921 = "492_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 487
    set_sub_code_object $P4921, $P118
    .const '' $P4922 = "493_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 488
    set_sub_code_object $P4922, $P118
    .const '' $P4923 = "494_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 489
    set_sub_code_object $P4923, $P118
    .const '' $P4924 = "495_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 490
    set_sub_code_object $P4924, $P118
    .const '' $P4925 = "496_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 491
    set_sub_code_object $P4925, $P118
    .const '' $P4926 = "497_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 492
    set_sub_code_object $P4926, $P118
    .const '' $P4927 = "498_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 493
    set_sub_code_object $P4927, $P118
    .const '' $P4928 = "499_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 494
    set_sub_code_object $P4928, $P118
    .const '' $P4929 = "500_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 495
    set_sub_code_object $P4929, $P118
    .const '' $P4930 = "501_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 496
    set_sub_code_object $P4930, $P118
    .const '' $P4931 = "502_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 497
    set_sub_code_object $P4931, $P118
    .const '' $P4932 = "503_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 498
    set_sub_code_object $P4932, $P118
    .const '' $P4933 = "504_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 499
    set_sub_code_object $P4933, $P118
    .const '' $P4934 = "505_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 500
    set_sub_code_object $P4934, $P118
    .const '' $P4935 = "506_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 501
    set_sub_code_object $P4935, $P118
    .const '' $P4936 = "507_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 502
    set_sub_code_object $P4936, $P118
    .const '' $P4937 = "508_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 503
    set_sub_code_object $P4937, $P118
    .const '' $P4938 = "509_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 504
    set_sub_code_object $P4938, $P118
    .const '' $P4939 = "510_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 505
    set_sub_code_object $P4939, $P118
    .const '' $P4940 = "511_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 506
    set_sub_code_object $P4940, $P118
    .const '' $P4941 = "512_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 507
    set_sub_code_object $P4941, $P118
    .const '' $P4942 = "513_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 508
    set_sub_code_object $P4942, $P118
    .const '' $P4943 = "514_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 509
    set_sub_code_object $P4943, $P118
    .const '' $P4944 = "515_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 510
    set_sub_code_object $P4944, $P118
    .const '' $P4945 = "516_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 511
    set_sub_code_object $P4945, $P118
    .const '' $P4946 = "517_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 512
    set_sub_code_object $P4946, $P118
    .const '' $P4947 = "518_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 513
    set_sub_code_object $P4947, $P118
    .const '' $P4948 = "519_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 514
    set_sub_code_object $P4948, $P118
    .const '' $P4949 = "520_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 515
    set_sub_code_object $P4949, $P118
    .const '' $P4950 = "521_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 516
    set_sub_code_object $P4950, $P118
    .const '' $P4951 = "522_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 517
    set_sub_code_object $P4951, $P118
    .const '' $P4952 = "523_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 518
    set_sub_code_object $P4952, $P118
    .const '' $P4953 = "524_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 519
    set_sub_code_object $P4953, $P118
    .const '' $P4954 = "525_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 520
    set_sub_code_object $P4954, $P118
    .const '' $P4955 = "526_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 521
    set_sub_code_object $P4955, $P118
    .const '' $P4956 = "527_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 522
    set_sub_code_object $P4956, $P118
    .const '' $P4957 = "528_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 523
    set_sub_code_object $P4957, $P118
    .const '' $P4958 = "529_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 524
    set_sub_code_object $P4958, $P118
    .const '' $P4959 = "530_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 525
    set_sub_code_object $P4959, $P118
    .const '' $P4960 = "531_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 526
    set_sub_code_object $P4960, $P118
    .const '' $P4961 = "532_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 527
    set_sub_code_object $P4961, $P118
    .const '' $P4962 = "533_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 528
    set_sub_code_object $P4962, $P118
    .const '' $P4963 = "534_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 529
    set_sub_code_object $P4963, $P118
    .const 'LexInfo' $P4964 = "591_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 416
    $P4964."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4965 = "591_1335114138.94729" 
    $P4965."finish_static_lexpad"()
    .const 'LexInfo' $P4966 = "591_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 416
    $P4966."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4967 = "591_1335114138.94729" 
    $P4967."finish_static_lexpad"()
    .const '' $P4968 = "535_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 531
    set_sub_code_object $P4968, $P118
    .const '' $P4969 = "536_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 532
    set_sub_code_object $P4969, $P118
    .const '' $P4970 = "537_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 533
    set_sub_code_object $P4970, $P118
    .const '' $P4971 = "538_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 534
    set_sub_code_object $P4971, $P118
    .const '' $P4972 = "539_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 535
    set_sub_code_object $P4972, $P118
    .const '' $P4973 = "540_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 536
    set_sub_code_object $P4973, $P118
    .const '' $P4974 = "541_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 537
    set_sub_code_object $P4974, $P118
    .const 'LexInfo' $P4975 = "652_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 530
    $P4975."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4976 = "652_1335114138.94729" 
    $P4976."finish_static_lexpad"()
    .const 'LexInfo' $P4977 = "652_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 530
    $P4977."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4978 = "652_1335114138.94729" 
    $P4978."finish_static_lexpad"()
    .const 'LexInfo' $P4979 = "653_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 538
    $P4979."set_static_lexpad_value"("$?PACKAGE", $P118)
    .const 'LexInfo' $P4980 = "653_1335114138.94729" 
    $P4980."finish_static_lexpad"()
    .const 'LexInfo' $P4981 = "653_1335114138.94729" 
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 538
    $P4981."set_static_lexpad_value"("$?CLASS", $P118)
    .const 'LexInfo' $P4982 = "653_1335114138.94729" 
    $P4982."finish_static_lexpad"()
    nqp_get_sc_object $P118, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 0
    set_hll_global "GLOBAL", $P118
.end


.HLL "nqp"

.namespace []
.sub "_block3889"  :anon :subid("655_1335114138.94729") :outer("542_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 0
    .const 'Sub' $P3891 = "10_1335114138.94729" 
    .const 'Sub' $P3892 = "11_1335114138.94729" 
    .const 'Sub' $P3893 = "12_1335114138.94729" 
    .const 'Sub' $P3894 = "13_1335114138.94729" 
    .const 'Sub' $P3895 = "14_1335114138.94729" 
    .const 'Sub' $P3896 = "15_1335114138.94729" 
    .const 'Sub' $P3897 = "16_1335114138.94729" 
    .const 'Sub' $P3898 = "17_1335114138.94729" 
    .const 'Sub' $P3899 = "18_1335114138.94729" 
    .const 'Sub' $P3900 = "19_1335114138.94729" 
    .const 'Sub' $P3901 = "20_1335114138.94729" 
    .const 'Sub' $P3902 = "21_1335114138.94729" 
    .const 'Sub' $P3903 = "22_1335114138.94729" 
    .const 'Sub' $P3904 = "23_1335114138.94729" 
    .const 'Sub' $P3905 = "24_1335114138.94729" 
    .const 'Sub' $P3906 = "25_1335114138.94729" 
    .const 'Sub' $P3907 = "26_1335114138.94729" 
    .const 'Sub' $P3908 = "27_1335114138.94729" 
    .const 'Sub' $P3909 = "28_1335114138.94729" 
    .const 'Sub' $P3910 = "29_1335114138.94729" 
    .const 'Sub' $P3911 = "30_1335114138.94729" 
    .const 'Sub' $P3912 = "31_1335114138.94729" 
    .const 'Sub' $P3913 = "32_1335114138.94729" 
    .const 'Sub' $P3914 = "33_1335114138.94729" 
    .const 'Sub' $P3915 = "34_1335114138.94729" 
    .const 'Sub' $P3916 = "35_1335114138.94729" 
    .const 'Sub' $P3917 = "36_1335114138.94729" 
    .const 'Sub' $P3918 = "37_1335114138.94729" 
    .const 'Sub' $P3919 = "38_1335114138.94729" 
    .const 'Sub' $P3920 = "39_1335114138.94729" 
    .const 'Sub' $P3921 = "40_1335114138.94729" 
    .const 'Sub' $P3922 = "41_1335114138.94729" 
    .const 'Sub' $P3923 = "42_1335114138.94729" 
    .const 'Sub' $P3924 = "43_1335114138.94729" 
    .const 'Sub' $P3925 = "44_1335114138.94729" 
    .const 'Sub' $P3926 = "45_1335114138.94729" 
    .const 'Sub' $P3927 = "46_1335114138.94729" 
    .const 'Sub' $P3928 = "47_1335114138.94729" 
    .const 'Sub' $P3929 = "48_1335114138.94729" 
    .const 'Sub' $P3930 = "49_1335114138.94729" 
    .const 'Sub' $P3931 = "50_1335114138.94729" 
    .const 'Sub' $P3932 = "51_1335114138.94729" 
    .const 'Sub' $P3933 = "52_1335114138.94729" 
    .const 'Sub' $P3934 = "53_1335114138.94729" 
    .const 'Sub' $P3935 = "54_1335114138.94729" 
    .const 'Sub' $P3936 = "55_1335114138.94729" 
    .const 'Sub' $P3937 = "56_1335114138.94729" 
    .const 'Sub' $P3938 = "57_1335114138.94729" 
    .const 'Sub' $P3939 = "58_1335114138.94729" 
    .const 'Sub' $P3940 = "59_1335114138.94729" 
    .const 'Sub' $P3941 = "60_1335114138.94729" 
    .const 'Sub' $P3942 = "61_1335114138.94729" 
    .const 'Sub' $P3943 = "62_1335114138.94729" 
    .const 'Sub' $P3944 = "63_1335114138.94729" 
    .const 'Sub' $P3945 = "64_1335114138.94729" 
    .const 'Sub' $P3946 = "65_1335114138.94729" 
    .const 'Sub' $P3947 = "66_1335114138.94729" 
    .const 'Sub' $P3948 = "67_1335114138.94729" 
    .const 'Sub' $P3949 = "68_1335114138.94729" 
    .const 'Sub' $P3950 = "69_1335114138.94729" 
    .const 'Sub' $P3951 = "70_1335114138.94729" 
    .const 'Sub' $P3952 = "71_1335114138.94729" 
    .const 'Sub' $P3953 = "72_1335114138.94729" 
    .const 'Sub' $P3954 = "73_1335114138.94729" 
    .const 'Sub' $P3955 = "74_1335114138.94729" 
    .const 'Sub' $P3956 = "75_1335114138.94729" 
    .const 'Sub' $P3957 = "76_1335114138.94729" 
    .const 'Sub' $P3958 = "77_1335114138.94729" 
    .const 'Sub' $P3959 = "78_1335114138.94729" 
    .const 'Sub' $P3960 = "79_1335114138.94729" 
    .const 'Sub' $P3961 = "80_1335114138.94729" 
    .const 'Sub' $P3962 = "81_1335114138.94729" 
    .const 'Sub' $P3963 = "82_1335114138.94729" 
    .const 'Sub' $P3964 = "83_1335114138.94729" 
    .const 'Sub' $P3965 = "84_1335114138.94729" 
    .const 'Sub' $P3966 = "85_1335114138.94729" 
    .const 'Sub' $P3967 = "86_1335114138.94729" 
    .const 'Sub' $P3968 = "87_1335114138.94729" 
    .const 'Sub' $P3969 = "88_1335114138.94729" 
    .const 'Sub' $P3970 = "89_1335114138.94729" 
    .const 'Sub' $P3971 = "90_1335114138.94729" 
    .const 'Sub' $P3972 = "91_1335114138.94729" 
    .const 'Sub' $P3973 = "92_1335114138.94729" 
    .const 'Sub' $P3974 = "93_1335114138.94729" 
    .const 'Sub' $P3975 = "94_1335114138.94729" 
    .const 'Sub' $P3976 = "95_1335114138.94729" 
    .const 'Sub' $P3977 = "96_1335114138.94729" 
    .const 'Sub' $P3978 = "97_1335114138.94729" 
    .const 'Sub' $P3979 = "98_1335114138.94729" 
    .const 'Sub' $P3980 = "99_1335114138.94729" 
    .const 'Sub' $P3981 = "100_1335114138.94729" 
    .const 'Sub' $P3982 = "101_1335114138.94729" 
    .const 'Sub' $P3983 = "102_1335114138.94729" 
    .const 'Sub' $P3984 = "103_1335114138.94729" 
    .const 'Sub' $P3985 = "104_1335114138.94729" 
    .const 'Sub' $P3986 = "105_1335114138.94729" 
    .const 'Sub' $P3987 = "106_1335114138.94729" 
    .const 'Sub' $P3988 = "107_1335114138.94729" 
    .const 'Sub' $P3989 = "108_1335114138.94729" 
    .const 'Sub' $P3990 = "109_1335114138.94729" 
    .const 'Sub' $P3991 = "110_1335114138.94729" 
    .const 'Sub' $P3992 = "111_1335114138.94729" 
    .const 'Sub' $P3993 = "112_1335114138.94729" 
    .const 'Sub' $P3994 = "113_1335114138.94729" 
    .const 'Sub' $P3995 = "114_1335114138.94729" 
    .const 'Sub' $P3996 = "115_1335114138.94729" 
    .const 'Sub' $P3997 = "116_1335114138.94729" 
    .const 'Sub' $P3998 = "117_1335114138.94729" 
    .const 'Sub' $P3999 = "118_1335114138.94729" 
    .const 'Sub' $P4000 = "119_1335114138.94729" 
    .const 'Sub' $P4001 = "120_1335114138.94729" 
    .const 'Sub' $P4002 = "121_1335114138.94729" 
    .const 'Sub' $P4003 = "122_1335114138.94729" 
    .const 'Sub' $P4004 = "123_1335114138.94729" 
    .const 'Sub' $P4005 = "124_1335114138.94729" 
    .const 'Sub' $P4006 = "125_1335114138.94729" 
    .const 'Sub' $P4007 = "126_1335114138.94729" 
    .const 'Sub' $P4008 = "127_1335114138.94729" 
    .const 'Sub' $P4009 = "128_1335114138.94729" 
    .const 'Sub' $P4010 = "129_1335114138.94729" 
    .const 'Sub' $P4011 = "130_1335114138.94729" 
    .const 'Sub' $P4012 = "131_1335114138.94729" 
    .const 'Sub' $P4013 = "132_1335114138.94729" 
    .const 'Sub' $P4014 = "133_1335114138.94729" 
    .const 'Sub' $P4015 = "134_1335114138.94729" 
    .const 'Sub' $P4016 = "135_1335114138.94729" 
    .const 'Sub' $P4017 = "136_1335114138.94729" 
    .const 'Sub' $P4018 = "137_1335114138.94729" 
    .const 'Sub' $P4019 = "138_1335114138.94729" 
    .const 'Sub' $P4020 = "139_1335114138.94729" 
    .const 'Sub' $P4021 = "140_1335114138.94729" 
    .const 'Sub' $P4022 = "141_1335114138.94729" 
    .const 'Sub' $P4023 = "142_1335114138.94729" 
    .const 'Sub' $P4024 = "143_1335114138.94729" 
    .const 'Sub' $P4025 = "144_1335114138.94729" 
    .const 'Sub' $P4026 = "145_1335114138.94729" 
    .const 'Sub' $P4027 = "146_1335114138.94729" 
    .const 'Sub' $P4028 = "147_1335114138.94729" 
    .const 'Sub' $P4029 = "148_1335114138.94729" 
    .const 'Sub' $P4030 = "149_1335114138.94729" 
    .const 'Sub' $P4031 = "150_1335114138.94729" 
    .const 'Sub' $P4032 = "151_1335114138.94729" 
    .const 'Sub' $P4033 = "152_1335114138.94729" 
    .const 'Sub' $P4034 = "153_1335114138.94729" 
    .const 'Sub' $P4035 = "154_1335114138.94729" 
    .const 'Sub' $P4036 = "155_1335114138.94729" 
    .const 'Sub' $P4037 = "156_1335114138.94729" 
    .const 'Sub' $P4038 = "157_1335114138.94729" 
    .const 'Sub' $P4039 = "158_1335114138.94729" 
    .const 'Sub' $P4040 = "159_1335114138.94729" 
    .const 'Sub' $P4041 = "160_1335114138.94729" 
    .const 'Sub' $P4042 = "161_1335114138.94729" 
    .const 'Sub' $P4043 = "162_1335114138.94729" 
    .const 'Sub' $P4044 = "163_1335114138.94729" 
    .const 'Sub' $P4045 = "164_1335114138.94729" 
    .const 'Sub' $P4046 = "165_1335114138.94729" 
    .const 'Sub' $P4047 = "166_1335114138.94729" 
    .const 'Sub' $P4048 = "167_1335114138.94729" 
    .const 'Sub' $P4049 = "168_1335114138.94729" 
    .const 'Sub' $P4050 = "169_1335114138.94729" 
    .const 'Sub' $P4051 = "170_1335114138.94729" 
    .const 'Sub' $P4052 = "171_1335114138.94729" 
    .const 'Sub' $P4053 = "172_1335114138.94729" 
    .const 'Sub' $P4054 = "173_1335114138.94729" 
    .const 'Sub' $P4055 = "174_1335114138.94729" 
    .const 'Sub' $P4056 = "175_1335114138.94729" 
    .const 'Sub' $P4057 = "176_1335114138.94729" 
    .const 'Sub' $P4058 = "177_1335114138.94729" 
    .const 'Sub' $P4059 = "178_1335114138.94729" 
    .const 'Sub' $P4060 = "179_1335114138.94729" 
    .const 'Sub' $P4061 = "180_1335114138.94729" 
    .const 'Sub' $P4062 = "181_1335114138.94729" 
    .const 'Sub' $P4063 = "182_1335114138.94729" 
    .const 'Sub' $P4064 = "183_1335114138.94729" 
    .const 'Sub' $P4065 = "184_1335114138.94729" 
    .const 'Sub' $P4066 = "185_1335114138.94729" 
    .const 'Sub' $P4067 = "186_1335114138.94729" 
    .const 'Sub' $P4068 = "187_1335114138.94729" 
    .const 'Sub' $P4069 = "188_1335114138.94729" 
    .const 'Sub' $P4070 = "189_1335114138.94729" 
    .const 'Sub' $P4071 = "190_1335114138.94729" 
    .const 'Sub' $P4072 = "191_1335114138.94729" 
    .const 'Sub' $P4073 = "192_1335114138.94729" 
    .const 'Sub' $P4074 = "193_1335114138.94729" 
    .const 'Sub' $P4075 = "194_1335114138.94729" 
    .const 'Sub' $P4076 = "195_1335114138.94729" 
    .const 'Sub' $P4077 = "196_1335114138.94729" 
    .const 'Sub' $P4078 = "197_1335114138.94729" 
    .const 'Sub' $P4079 = "198_1335114138.94729" 
    .const 'Sub' $P4080 = "199_1335114138.94729" 
    .const 'Sub' $P4081 = "200_1335114138.94729" 
    .const 'Sub' $P4082 = "201_1335114138.94729" 
    .const 'Sub' $P4083 = "202_1335114138.94729" 
    .const 'Sub' $P4084 = "203_1335114138.94729" 
    .const 'Sub' $P4085 = "204_1335114138.94729" 
    .const 'Sub' $P4086 = "205_1335114138.94729" 
    .const 'Sub' $P4087 = "206_1335114138.94729" 
    .const 'Sub' $P4088 = "207_1335114138.94729" 
    .const 'Sub' $P4089 = "208_1335114138.94729" 
    .const 'Sub' $P4090 = "209_1335114138.94729" 
    .const 'Sub' $P4091 = "210_1335114138.94729" 
    .const 'Sub' $P4092 = "211_1335114138.94729" 
    .const 'Sub' $P4093 = "212_1335114138.94729" 
    .const 'Sub' $P4094 = "213_1335114138.94729" 
    .const 'Sub' $P4095 = "214_1335114138.94729" 
    .const 'Sub' $P4096 = "215_1335114138.94729" 
    .const 'Sub' $P4097 = "216_1335114138.94729" 
    .const 'Sub' $P4098 = "217_1335114138.94729" 
    .const 'Sub' $P4099 = "218_1335114138.94729" 
    .const 'Sub' $P4100 = "219_1335114138.94729" 
    .const 'Sub' $P4101 = "220_1335114138.94729" 
    .const 'Sub' $P4102 = "221_1335114138.94729" 
    .const 'Sub' $P4103 = "222_1335114138.94729" 
    .const 'Sub' $P4104 = "223_1335114138.94729" 
    .const 'Sub' $P4105 = "224_1335114138.94729" 
    .const 'Sub' $P4106 = "225_1335114138.94729" 
    .const 'Sub' $P4107 = "226_1335114138.94729" 
    .const 'Sub' $P4108 = "227_1335114138.94729" 
    .const 'Sub' $P4109 = "228_1335114138.94729" 
    .const 'Sub' $P4110 = "229_1335114138.94729" 
    .const 'Sub' $P4111 = "230_1335114138.94729" 
    .const 'Sub' $P4112 = "231_1335114138.94729" 
    .const 'Sub' $P4113 = "232_1335114138.94729" 
    .const 'Sub' $P4114 = "233_1335114138.94729" 
    .const 'Sub' $P4115 = "234_1335114138.94729" 
    .const 'Sub' $P4116 = "235_1335114138.94729" 
    .const 'Sub' $P4117 = "236_1335114138.94729" 
    .const 'Sub' $P4118 = "237_1335114138.94729" 
    .const 'Sub' $P4119 = "238_1335114138.94729" 
    .const 'Sub' $P4120 = "239_1335114138.94729" 
    .const 'Sub' $P4121 = "240_1335114138.94729" 
    .const 'Sub' $P4122 = "241_1335114138.94729" 
    .const 'Sub' $P4123 = "242_1335114138.94729" 
    .const 'Sub' $P4124 = "243_1335114138.94729" 
    .const 'Sub' $P4125 = "244_1335114138.94729" 
    .const 'Sub' $P4126 = "245_1335114138.94729" 
    .const 'Sub' $P4127 = "246_1335114138.94729" 
    .const 'Sub' $P4128 = "247_1335114138.94729" 
    .const 'Sub' $P4129 = "248_1335114138.94729" 
    .const 'Sub' $P4130 = "249_1335114138.94729" 
    .const 'Sub' $P4131 = "250_1335114138.94729" 
    .const 'Sub' $P4132 = "251_1335114138.94729" 
    .const 'Sub' $P4133 = "252_1335114138.94729" 
    .const 'Sub' $P4134 = "253_1335114138.94729" 
    .const 'Sub' $P4135 = "254_1335114138.94729" 
    .const 'Sub' $P4136 = "255_1335114138.94729" 
    .const 'Sub' $P4137 = "256_1335114138.94729" 
    .const 'Sub' $P4138 = "257_1335114138.94729" 
    .const 'Sub' $P4139 = "258_1335114138.94729" 
    .const 'Sub' $P4140 = "259_1335114138.94729" 
    .const 'Sub' $P4141 = "260_1335114138.94729" 
    .const 'Sub' $P4142 = "261_1335114138.94729" 
    .const 'Sub' $P4143 = "262_1335114138.94729" 
    .const 'Sub' $P4144 = "263_1335114138.94729" 
    .const 'Sub' $P4145 = "264_1335114138.94729" 
    .const 'Sub' $P4146 = "265_1335114138.94729" 
    .const 'Sub' $P4147 = "266_1335114138.94729" 
    .const 'Sub' $P4148 = "267_1335114138.94729" 
    .const 'Sub' $P4149 = "268_1335114138.94729" 
    .const 'Sub' $P4150 = "269_1335114138.94729" 
    .const 'Sub' $P4151 = "270_1335114138.94729" 
    .const 'Sub' $P4152 = "271_1335114138.94729" 
    .const 'Sub' $P4153 = "272_1335114138.94729" 
    .const 'Sub' $P4154 = "273_1335114138.94729" 
    .const 'Sub' $P4155 = "274_1335114138.94729" 
    .const 'Sub' $P4156 = "275_1335114138.94729" 
    .const 'Sub' $P4157 = "276_1335114138.94729" 
    .const 'Sub' $P4158 = "277_1335114138.94729" 
    .const 'Sub' $P4159 = "278_1335114138.94729" 
    .const 'Sub' $P4160 = "279_1335114138.94729" 
    .const 'Sub' $P4161 = "280_1335114138.94729" 
    .const 'Sub' $P4162 = "281_1335114138.94729" 
    .const 'Sub' $P4163 = "282_1335114138.94729" 
    .const 'Sub' $P4164 = "283_1335114138.94729" 
    .const 'Sub' $P4165 = "284_1335114138.94729" 
    .const 'Sub' $P4166 = "285_1335114138.94729" 
    .const 'Sub' $P4167 = "286_1335114138.94729" 
    .const 'Sub' $P4168 = "287_1335114138.94729" 
    .const 'Sub' $P4169 = "288_1335114138.94729" 
    .const 'Sub' $P4170 = "289_1335114138.94729" 
    .const 'Sub' $P4171 = "290_1335114138.94729" 
    .const 'Sub' $P4172 = "291_1335114138.94729" 
    .const 'Sub' $P4173 = "292_1335114138.94729" 
    .const 'Sub' $P4174 = "293_1335114138.94729" 
    .const 'Sub' $P4175 = "294_1335114138.94729" 
    .const 'Sub' $P4176 = "295_1335114138.94729" 
    .const 'Sub' $P4177 = "296_1335114138.94729" 
    .const 'Sub' $P4178 = "297_1335114138.94729" 
    .const 'Sub' $P4179 = "298_1335114138.94729" 
    .const 'Sub' $P4180 = "299_1335114138.94729" 
    .const 'Sub' $P4181 = "300_1335114138.94729" 
    .const 'Sub' $P4182 = "301_1335114138.94729" 
    .const 'Sub' $P4183 = "302_1335114138.94729" 
    .const 'Sub' $P4184 = "303_1335114138.94729" 
    .const 'Sub' $P4185 = "304_1335114138.94729" 
    .const 'Sub' $P4186 = "305_1335114138.94729" 
    .const 'Sub' $P4187 = "306_1335114138.94729" 
    .const 'Sub' $P4188 = "307_1335114138.94729" 
    .const 'Sub' $P4189 = "308_1335114138.94729" 
    .const 'Sub' $P4190 = "309_1335114138.94729" 
    .const 'Sub' $P4191 = "310_1335114138.94729" 
    .const 'Sub' $P4192 = "311_1335114138.94729" 
    .const 'Sub' $P4193 = "312_1335114138.94729" 
    .const 'Sub' $P4194 = "313_1335114138.94729" 
    .const 'Sub' $P4195 = "314_1335114138.94729" 
    .const 'Sub' $P4196 = "315_1335114138.94729" 
    .const 'Sub' $P4197 = "316_1335114138.94729" 
    .const 'Sub' $P4198 = "317_1335114138.94729" 
    .const 'Sub' $P4199 = "318_1335114138.94729" 
    .const 'Sub' $P4200 = "319_1335114138.94729" 
    .const 'Sub' $P4201 = "320_1335114138.94729" 
    .const 'Sub' $P4202 = "321_1335114138.94729" 
    .const 'Sub' $P4203 = "322_1335114138.94729" 
    .const 'Sub' $P4204 = "323_1335114138.94729" 
    .const 'Sub' $P4205 = "324_1335114138.94729" 
    .const 'Sub' $P4206 = "325_1335114138.94729" 
    .const 'Sub' $P4207 = "326_1335114138.94729" 
    .const 'Sub' $P4208 = "327_1335114138.94729" 
    .const 'Sub' $P4209 = "328_1335114138.94729" 
    .const 'Sub' $P4210 = "329_1335114138.94729" 
    .const 'Sub' $P4211 = "330_1335114138.94729" 
    .const 'Sub' $P4212 = "331_1335114138.94729" 
    .const 'Sub' $P4213 = "332_1335114138.94729" 
    .const 'Sub' $P4214 = "333_1335114138.94729" 
    .const 'Sub' $P4215 = "334_1335114138.94729" 
    .const 'Sub' $P4216 = "335_1335114138.94729" 
    .const 'Sub' $P4217 = "336_1335114138.94729" 
    .const 'Sub' $P4218 = "337_1335114138.94729" 
    .const 'Sub' $P4219 = "338_1335114138.94729" 
    .const 'Sub' $P4220 = "339_1335114138.94729" 
    .const 'Sub' $P4221 = "340_1335114138.94729" 
    .const 'Sub' $P4222 = "341_1335114138.94729" 
    .const 'Sub' $P4223 = "342_1335114138.94729" 
    .const 'Sub' $P4224 = "343_1335114138.94729" 
    .const 'Sub' $P4225 = "344_1335114138.94729" 
    .const 'Sub' $P4226 = "345_1335114138.94729" 
    .const 'Sub' $P4227 = "346_1335114138.94729" 
    .const 'Sub' $P4228 = "347_1335114138.94729" 
    .const 'Sub' $P4229 = "348_1335114138.94729" 
    .const 'Sub' $P4230 = "349_1335114138.94729" 
    .const 'Sub' $P4231 = "350_1335114138.94729" 
    .const 'Sub' $P4232 = "351_1335114138.94729" 
    .const 'Sub' $P4233 = "352_1335114138.94729" 
    .const 'Sub' $P4234 = "353_1335114138.94729" 
    .const 'Sub' $P4235 = "354_1335114138.94729" 
    .const 'Sub' $P4236 = "355_1335114138.94729" 
    .const 'Sub' $P4237 = "356_1335114138.94729" 
    .const 'Sub' $P4238 = "357_1335114138.94729" 
    .const 'Sub' $P4239 = "358_1335114138.94729" 
    .const 'Sub' $P4240 = "359_1335114138.94729" 
    .const 'Sub' $P4241 = "360_1335114138.94729" 
    .const 'Sub' $P4242 = "361_1335114138.94729" 
    .const 'Sub' $P4243 = "362_1335114138.94729" 
    .const 'Sub' $P4244 = "363_1335114138.94729" 
    .const 'Sub' $P4245 = "364_1335114138.94729" 
    .const 'Sub' $P4246 = "365_1335114138.94729" 
    .const 'Sub' $P4247 = "366_1335114138.94729" 
    .const 'Sub' $P4248 = "367_1335114138.94729" 
    .const 'Sub' $P4249 = "368_1335114138.94729" 
    .const 'Sub' $P4250 = "369_1335114138.94729" 
    .const 'Sub' $P4251 = "370_1335114138.94729" 
    .const 'Sub' $P4252 = "371_1335114138.94729" 
    .const 'Sub' $P4253 = "372_1335114138.94729" 
    .const 'Sub' $P4254 = "373_1335114138.94729" 
    .const 'Sub' $P4255 = "374_1335114138.94729" 
    .const 'Sub' $P4256 = "375_1335114138.94729" 
    .const 'Sub' $P4257 = "376_1335114138.94729" 
    .const 'Sub' $P4258 = "377_1335114138.94729" 
    .const 'Sub' $P4259 = "378_1335114138.94729" 
    .const 'Sub' $P4260 = "379_1335114138.94729" 
    .const 'Sub' $P4261 = "380_1335114138.94729" 
    .const 'Sub' $P4262 = "381_1335114138.94729" 
    .const 'Sub' $P4263 = "382_1335114138.94729" 
    .const 'Sub' $P4264 = "383_1335114138.94729" 
    .const 'Sub' $P4265 = "384_1335114138.94729" 
    .const 'Sub' $P4266 = "385_1335114138.94729" 
    .const 'Sub' $P4267 = "386_1335114138.94729" 
    .const 'Sub' $P4268 = "387_1335114138.94729" 
    .const 'Sub' $P4269 = "388_1335114138.94729" 
    .const 'Sub' $P4270 = "389_1335114138.94729" 
    .const 'Sub' $P4271 = "390_1335114138.94729" 
    .const 'Sub' $P4272 = "391_1335114138.94729" 
    .const 'Sub' $P4273 = "392_1335114138.94729" 
    .const 'Sub' $P4274 = "393_1335114138.94729" 
    .const 'Sub' $P4275 = "394_1335114138.94729" 
    .const 'Sub' $P4276 = "395_1335114138.94729" 
    .const 'Sub' $P4277 = "396_1335114138.94729" 
    .const 'Sub' $P4278 = "397_1335114138.94729" 
    .const 'Sub' $P4279 = "398_1335114138.94729" 
    .const 'Sub' $P4280 = "399_1335114138.94729" 
    .const 'Sub' $P4281 = "400_1335114138.94729" 
    .const 'Sub' $P4282 = "401_1335114138.94729" 
    .const 'Sub' $P4283 = "402_1335114138.94729" 
    .const 'Sub' $P4284 = "403_1335114138.94729" 
    .const 'Sub' $P4285 = "404_1335114138.94729" 
    .const 'Sub' $P4286 = "405_1335114138.94729" 
    .const 'Sub' $P4287 = "406_1335114138.94729" 
    .const 'Sub' $P4288 = "407_1335114138.94729" 
    .const 'Sub' $P4289 = "408_1335114138.94729" 
    .const 'Sub' $P4290 = "409_1335114138.94729" 
    .const 'Sub' $P4291 = "410_1335114138.94729" 
    .const 'Sub' $P4292 = "411_1335114138.94729" 
    .const 'Sub' $P4293 = "412_1335114138.94729" 
    .const 'Sub' $P4294 = "413_1335114138.94729" 
    .const 'Sub' $P4295 = "414_1335114138.94729" 
    .const 'Sub' $P4296 = "415_1335114138.94729" 
    .const 'Sub' $P4297 = "416_1335114138.94729" 
    .const 'Sub' $P4298 = "417_1335114138.94729" 
    .const 'Sub' $P4299 = "418_1335114138.94729" 
    .const 'Sub' $P4300 = "419_1335114138.94729" 
    .const 'Sub' $P4301 = "420_1335114138.94729" 
    .const 'Sub' $P4302 = "421_1335114138.94729" 
    .const 'Sub' $P4303 = "422_1335114138.94729" 
    .const 'Sub' $P4304 = "423_1335114138.94729" 
    .const 'Sub' $P4305 = "424_1335114138.94729" 
    .const 'Sub' $P4306 = "425_1335114138.94729" 
    .const 'Sub' $P4307 = "426_1335114138.94729" 
    .const 'Sub' $P4308 = "427_1335114138.94729" 
    .const 'Sub' $P4309 = "428_1335114138.94729" 
    .const 'Sub' $P4310 = "429_1335114138.94729" 
    .const 'Sub' $P4311 = "430_1335114138.94729" 
    .const 'Sub' $P4312 = "431_1335114138.94729" 
    .const 'Sub' $P4313 = "432_1335114138.94729" 
    .const 'Sub' $P4314 = "433_1335114138.94729" 
    .const 'Sub' $P4315 = "434_1335114138.94729" 
    .const 'Sub' $P4316 = "435_1335114138.94729" 
    .const 'Sub' $P4317 = "436_1335114138.94729" 
    .const 'Sub' $P4318 = "437_1335114138.94729" 
    .const 'Sub' $P4319 = "438_1335114138.94729" 
    .const 'Sub' $P4320 = "439_1335114138.94729" 
    .const 'Sub' $P4321 = "440_1335114138.94729" 
    .const 'Sub' $P4322 = "441_1335114138.94729" 
    .const 'Sub' $P4323 = "442_1335114138.94729" 
    .const 'Sub' $P4324 = "443_1335114138.94729" 
    .const 'Sub' $P4325 = "444_1335114138.94729" 
    .const 'Sub' $P4326 = "445_1335114138.94729" 
    .const 'Sub' $P4327 = "446_1335114138.94729" 
    .const 'Sub' $P4328 = "447_1335114138.94729" 
    .const 'Sub' $P4329 = "448_1335114138.94729" 
    .const 'Sub' $P4330 = "449_1335114138.94729" 
    .const 'Sub' $P4331 = "450_1335114138.94729" 
    .const 'Sub' $P4332 = "451_1335114138.94729" 
    .const 'Sub' $P4333 = "452_1335114138.94729" 
    .const 'Sub' $P4334 = "453_1335114138.94729" 
    .const 'Sub' $P4335 = "454_1335114138.94729" 
    .const 'Sub' $P4336 = "455_1335114138.94729" 
    .const 'Sub' $P4337 = "456_1335114138.94729" 
    .const 'Sub' $P4338 = "457_1335114138.94729" 
    .const 'Sub' $P4339 = "458_1335114138.94729" 
    .const 'Sub' $P4340 = "459_1335114138.94729" 
    .const 'Sub' $P4341 = "460_1335114138.94729" 
    .const 'Sub' $P4342 = "461_1335114138.94729" 
    .const 'Sub' $P4343 = "462_1335114138.94729" 
    .const 'Sub' $P4344 = "463_1335114138.94729" 
    .const 'Sub' $P4345 = "464_1335114138.94729" 
    .const 'Sub' $P4346 = "465_1335114138.94729" 
    .const 'Sub' $P4347 = "466_1335114138.94729" 
    .const 'Sub' $P4348 = "467_1335114138.94729" 
    .const 'Sub' $P4349 = "468_1335114138.94729" 
    .const 'Sub' $P4350 = "469_1335114138.94729" 
    .const 'Sub' $P4351 = "470_1335114138.94729" 
    .const 'Sub' $P4352 = "471_1335114138.94729" 
    .const 'Sub' $P4353 = "472_1335114138.94729" 
    .const 'Sub' $P4354 = "473_1335114138.94729" 
    .const 'Sub' $P4355 = "474_1335114138.94729" 
    .const 'Sub' $P4356 = "475_1335114138.94729" 
    .const 'Sub' $P4357 = "476_1335114138.94729" 
    .const 'Sub' $P4358 = "477_1335114138.94729" 
    .const 'Sub' $P4359 = "478_1335114138.94729" 
    .const 'Sub' $P4360 = "479_1335114138.94729" 
    .const 'Sub' $P4361 = "480_1335114138.94729" 
    .const 'Sub' $P4362 = "481_1335114138.94729" 
    .const 'Sub' $P4363 = "482_1335114138.94729" 
    .const 'Sub' $P4364 = "483_1335114138.94729" 
    .const 'Sub' $P4365 = "484_1335114138.94729" 
    .const 'Sub' $P4366 = "485_1335114138.94729" 
    .const 'Sub' $P4367 = "486_1335114138.94729" 
    .const 'Sub' $P4368 = "487_1335114138.94729" 
    .const 'Sub' $P4369 = "488_1335114138.94729" 
    .const 'Sub' $P4370 = "489_1335114138.94729" 
    .const 'Sub' $P4371 = "490_1335114138.94729" 
    .const 'Sub' $P4372 = "491_1335114138.94729" 
    .const 'Sub' $P4373 = "492_1335114138.94729" 
    .const 'Sub' $P4374 = "493_1335114138.94729" 
    .const 'Sub' $P4375 = "494_1335114138.94729" 
    .const 'Sub' $P4376 = "495_1335114138.94729" 
    .const 'Sub' $P4377 = "496_1335114138.94729" 
    .const 'Sub' $P4378 = "497_1335114138.94729" 
    .const 'Sub' $P4379 = "498_1335114138.94729" 
    .const 'Sub' $P4380 = "499_1335114138.94729" 
    .const 'Sub' $P4381 = "500_1335114138.94729" 
    .const 'Sub' $P4382 = "501_1335114138.94729" 
    .const 'Sub' $P4383 = "502_1335114138.94729" 
    .const 'Sub' $P4384 = "503_1335114138.94729" 
    .const 'Sub' $P4385 = "504_1335114138.94729" 
    .const 'Sub' $P4386 = "505_1335114138.94729" 
    .const 'Sub' $P4387 = "506_1335114138.94729" 
    .const 'Sub' $P4388 = "507_1335114138.94729" 
    .const 'Sub' $P4389 = "508_1335114138.94729" 
    .const 'Sub' $P4390 = "509_1335114138.94729" 
    .const 'Sub' $P4391 = "510_1335114138.94729" 
    .const 'Sub' $P4392 = "511_1335114138.94729" 
    .const 'Sub' $P4393 = "512_1335114138.94729" 
    .const 'Sub' $P4394 = "513_1335114138.94729" 
    .const 'Sub' $P4395 = "514_1335114138.94729" 
    .const 'Sub' $P4396 = "515_1335114138.94729" 
    .const 'Sub' $P4397 = "516_1335114138.94729" 
    .const 'Sub' $P4398 = "517_1335114138.94729" 
    .const 'Sub' $P4399 = "518_1335114138.94729" 
    .const 'Sub' $P4400 = "519_1335114138.94729" 
    .const 'Sub' $P4401 = "520_1335114138.94729" 
    .const 'Sub' $P4402 = "521_1335114138.94729" 
    .const 'Sub' $P4403 = "522_1335114138.94729" 
    .const 'Sub' $P4404 = "523_1335114138.94729" 
    .const 'Sub' $P4405 = "524_1335114138.94729" 
    .const 'Sub' $P4406 = "525_1335114138.94729" 
    .const 'Sub' $P4407 = "526_1335114138.94729" 
    .const 'Sub' $P4408 = "527_1335114138.94729" 
    .const 'Sub' $P4409 = "528_1335114138.94729" 
    .const 'Sub' $P4410 = "529_1335114138.94729" 
    .const 'Sub' $P4411 = "530_1335114138.94729" 
    .const 'Sub' $P4412 = "531_1335114138.94729" 
    .const 'Sub' $P4413 = "532_1335114138.94729" 
    .const 'Sub' $P4414 = "533_1335114138.94729" 
    .const 'Sub' $P4415 = "534_1335114138.94729" 
    .const 'Sub' $P4416 = "535_1335114138.94729" 
    .const 'Sub' $P4417 = "536_1335114138.94729" 
    .const 'Sub' $P4418 = "537_1335114138.94729" 
    .const 'Sub' $P4419 = "538_1335114138.94729" 
    .const 'Sub' $P4420 = "539_1335114138.94729" 
    .const 'Sub' $P4421 = "540_1335114138.94729" 
    .const 'Sub' $P4422 = "541_1335114138.94729" 
    new $P116, "ResizablePMCArray"
    push $P116, $P3891
    push $P116, $P3892
    push $P116, $P3893
    push $P116, $P3894
    push $P116, $P3895
    push $P116, $P3896
    push $P116, $P3897
    push $P116, $P3898
    push $P116, $P3899
    push $P116, $P3900
    push $P116, $P3901
    push $P116, $P3902
    push $P116, $P3903
    push $P116, $P3904
    push $P116, $P3905
    push $P116, $P3906
    push $P116, $P3907
    push $P116, $P3908
    push $P116, $P3909
    push $P116, $P3910
    push $P116, $P3911
    push $P116, $P3912
    push $P116, $P3913
    push $P116, $P3914
    push $P116, $P3915
    push $P116, $P3916
    push $P116, $P3917
    push $P116, $P3918
    push $P116, $P3919
    push $P116, $P3920
    push $P116, $P3921
    push $P116, $P3922
    push $P116, $P3923
    push $P116, $P3924
    push $P116, $P3925
    push $P116, $P3926
    push $P116, $P3927
    push $P116, $P3928
    push $P116, $P3929
    push $P116, $P3930
    push $P116, $P3931
    push $P116, $P3932
    push $P116, $P3933
    push $P116, $P3934
    push $P116, $P3935
    push $P116, $P3936
    push $P116, $P3937
    push $P116, $P3938
    push $P116, $P3939
    push $P116, $P3940
    push $P116, $P3941
    push $P116, $P3942
    push $P116, $P3943
    push $P116, $P3944
    push $P116, $P3945
    push $P116, $P3946
    push $P116, $P3947
    push $P116, $P3948
    push $P116, $P3949
    push $P116, $P3950
    push $P116, $P3951
    push $P116, $P3952
    push $P116, $P3953
    push $P116, $P3954
    push $P116, $P3955
    push $P116, $P3956
    push $P116, $P3957
    push $P116, $P3958
    push $P116, $P3959
    push $P116, $P3960
    push $P116, $P3961
    push $P116, $P3962
    push $P116, $P3963
    push $P116, $P3964
    push $P116, $P3965
    push $P116, $P3966
    push $P116, $P3967
    push $P116, $P3968
    push $P116, $P3969
    push $P116, $P3970
    push $P116, $P3971
    push $P116, $P3972
    push $P116, $P3973
    push $P116, $P3974
    push $P116, $P3975
    push $P116, $P3976
    push $P116, $P3977
    push $P116, $P3978
    push $P116, $P3979
    push $P116, $P3980
    push $P116, $P3981
    push $P116, $P3982
    push $P116, $P3983
    push $P116, $P3984
    push $P116, $P3985
    push $P116, $P3986
    push $P116, $P3987
    push $P116, $P3988
    push $P116, $P3989
    push $P116, $P3990
    push $P116, $P3991
    push $P116, $P3992
    push $P116, $P3993
    push $P116, $P3994
    push $P116, $P3995
    push $P116, $P3996
    push $P116, $P3997
    push $P116, $P3998
    push $P116, $P3999
    push $P116, $P4000
    push $P116, $P4001
    push $P116, $P4002
    push $P116, $P4003
    push $P116, $P4004
    push $P116, $P4005
    push $P116, $P4006
    push $P116, $P4007
    push $P116, $P4008
    push $P116, $P4009
    push $P116, $P4010
    push $P116, $P4011
    push $P116, $P4012
    push $P116, $P4013
    push $P116, $P4014
    push $P116, $P4015
    push $P116, $P4016
    push $P116, $P4017
    push $P116, $P4018
    push $P116, $P4019
    push $P116, $P4020
    push $P116, $P4021
    push $P116, $P4022
    push $P116, $P4023
    push $P116, $P4024
    push $P116, $P4025
    push $P116, $P4026
    push $P116, $P4027
    push $P116, $P4028
    push $P116, $P4029
    push $P116, $P4030
    push $P116, $P4031
    push $P116, $P4032
    push $P116, $P4033
    push $P116, $P4034
    push $P116, $P4035
    push $P116, $P4036
    push $P116, $P4037
    push $P116, $P4038
    push $P116, $P4039
    push $P116, $P4040
    push $P116, $P4041
    push $P116, $P4042
    push $P116, $P4043
    push $P116, $P4044
    push $P116, $P4045
    push $P116, $P4046
    push $P116, $P4047
    push $P116, $P4048
    push $P116, $P4049
    push $P116, $P4050
    push $P116, $P4051
    push $P116, $P4052
    push $P116, $P4053
    push $P116, $P4054
    push $P116, $P4055
    push $P116, $P4056
    push $P116, $P4057
    push $P116, $P4058
    push $P116, $P4059
    push $P116, $P4060
    push $P116, $P4061
    push $P116, $P4062
    push $P116, $P4063
    push $P116, $P4064
    push $P116, $P4065
    push $P116, $P4066
    push $P116, $P4067
    push $P116, $P4068
    push $P116, $P4069
    push $P116, $P4070
    push $P116, $P4071
    push $P116, $P4072
    push $P116, $P4073
    push $P116, $P4074
    push $P116, $P4075
    push $P116, $P4076
    push $P116, $P4077
    push $P116, $P4078
    push $P116, $P4079
    push $P116, $P4080
    push $P116, $P4081
    push $P116, $P4082
    push $P116, $P4083
    push $P116, $P4084
    push $P116, $P4085
    push $P116, $P4086
    push $P116, $P4087
    push $P116, $P4088
    push $P116, $P4089
    push $P116, $P4090
    push $P116, $P4091
    push $P116, $P4092
    push $P116, $P4093
    push $P116, $P4094
    push $P116, $P4095
    push $P116, $P4096
    push $P116, $P4097
    push $P116, $P4098
    push $P116, $P4099
    push $P116, $P4100
    push $P116, $P4101
    push $P116, $P4102
    push $P116, $P4103
    push $P116, $P4104
    push $P116, $P4105
    push $P116, $P4106
    push $P116, $P4107
    push $P116, $P4108
    push $P116, $P4109
    push $P116, $P4110
    push $P116, $P4111
    push $P116, $P4112
    push $P116, $P4113
    push $P116, $P4114
    push $P116, $P4115
    push $P116, $P4116
    push $P116, $P4117
    push $P116, $P4118
    push $P116, $P4119
    push $P116, $P4120
    push $P116, $P4121
    push $P116, $P4122
    push $P116, $P4123
    push $P116, $P4124
    push $P116, $P4125
    push $P116, $P4126
    push $P116, $P4127
    push $P116, $P4128
    push $P116, $P4129
    push $P116, $P4130
    push $P116, $P4131
    push $P116, $P4132
    push $P116, $P4133
    push $P116, $P4134
    push $P116, $P4135
    push $P116, $P4136
    push $P116, $P4137
    push $P116, $P4138
    push $P116, $P4139
    push $P116, $P4140
    push $P116, $P4141
    push $P116, $P4142
    push $P116, $P4143
    push $P116, $P4144
    push $P116, $P4145
    push $P116, $P4146
    push $P116, $P4147
    push $P116, $P4148
    push $P116, $P4149
    push $P116, $P4150
    push $P116, $P4151
    push $P116, $P4152
    push $P116, $P4153
    push $P116, $P4154
    push $P116, $P4155
    push $P116, $P4156
    push $P116, $P4157
    push $P116, $P4158
    push $P116, $P4159
    push $P116, $P4160
    push $P116, $P4161
    push $P116, $P4162
    push $P116, $P4163
    push $P116, $P4164
    push $P116, $P4165
    push $P116, $P4166
    push $P116, $P4167
    push $P116, $P4168
    push $P116, $P4169
    push $P116, $P4170
    push $P116, $P4171
    push $P116, $P4172
    push $P116, $P4173
    push $P116, $P4174
    push $P116, $P4175
    push $P116, $P4176
    push $P116, $P4177
    push $P116, $P4178
    push $P116, $P4179
    push $P116, $P4180
    push $P116, $P4181
    push $P116, $P4182
    push $P116, $P4183
    push $P116, $P4184
    push $P116, $P4185
    push $P116, $P4186
    push $P116, $P4187
    push $P116, $P4188
    push $P116, $P4189
    push $P116, $P4190
    push $P116, $P4191
    push $P116, $P4192
    push $P116, $P4193
    push $P116, $P4194
    push $P116, $P4195
    push $P116, $P4196
    push $P116, $P4197
    push $P116, $P4198
    push $P116, $P4199
    push $P116, $P4200
    push $P116, $P4201
    push $P116, $P4202
    push $P116, $P4203
    push $P116, $P4204
    push $P116, $P4205
    push $P116, $P4206
    push $P116, $P4207
    push $P116, $P4208
    push $P116, $P4209
    push $P116, $P4210
    push $P116, $P4211
    push $P116, $P4212
    push $P116, $P4213
    push $P116, $P4214
    push $P116, $P4215
    push $P116, $P4216
    push $P116, $P4217
    push $P116, $P4218
    push $P116, $P4219
    push $P116, $P4220
    push $P116, $P4221
    push $P116, $P4222
    push $P116, $P4223
    push $P116, $P4224
    push $P116, $P4225
    push $P116, $P4226
    push $P116, $P4227
    push $P116, $P4228
    push $P116, $P4229
    push $P116, $P4230
    push $P116, $P4231
    push $P116, $P4232
    push $P116, $P4233
    push $P116, $P4234
    push $P116, $P4235
    push $P116, $P4236
    push $P116, $P4237
    push $P116, $P4238
    push $P116, $P4239
    push $P116, $P4240
    push $P116, $P4241
    push $P116, $P4242
    push $P116, $P4243
    push $P116, $P4244
    push $P116, $P4245
    push $P116, $P4246
    push $P116, $P4247
    push $P116, $P4248
    push $P116, $P4249
    push $P116, $P4250
    push $P116, $P4251
    push $P116, $P4252
    push $P116, $P4253
    push $P116, $P4254
    push $P116, $P4255
    push $P116, $P4256
    push $P116, $P4257
    push $P116, $P4258
    push $P116, $P4259
    push $P116, $P4260
    push $P116, $P4261
    push $P116, $P4262
    push $P116, $P4263
    push $P116, $P4264
    push $P116, $P4265
    push $P116, $P4266
    push $P116, $P4267
    push $P116, $P4268
    push $P116, $P4269
    push $P116, $P4270
    push $P116, $P4271
    push $P116, $P4272
    push $P116, $P4273
    push $P116, $P4274
    push $P116, $P4275
    push $P116, $P4276
    push $P116, $P4277
    push $P116, $P4278
    push $P116, $P4279
    push $P116, $P4280
    push $P116, $P4281
    push $P116, $P4282
    push $P116, $P4283
    push $P116, $P4284
    push $P116, $P4285
    push $P116, $P4286
    push $P116, $P4287
    push $P116, $P4288
    push $P116, $P4289
    push $P116, $P4290
    push $P116, $P4291
    push $P116, $P4292
    push $P116, $P4293
    push $P116, $P4294
    push $P116, $P4295
    push $P116, $P4296
    push $P116, $P4297
    push $P116, $P4298
    push $P116, $P4299
    push $P116, $P4300
    push $P116, $P4301
    push $P116, $P4302
    push $P116, $P4303
    push $P116, $P4304
    push $P116, $P4305
    push $P116, $P4306
    push $P116, $P4307
    push $P116, $P4308
    push $P116, $P4309
    push $P116, $P4310
    push $P116, $P4311
    push $P116, $P4312
    push $P116, $P4313
    push $P116, $P4314
    push $P116, $P4315
    push $P116, $P4316
    push $P116, $P4317
    push $P116, $P4318
    push $P116, $P4319
    push $P116, $P4320
    push $P116, $P4321
    push $P116, $P4322
    push $P116, $P4323
    push $P116, $P4324
    push $P116, $P4325
    push $P116, $P4326
    push $P116, $P4327
    push $P116, $P4328
    push $P116, $P4329
    push $P116, $P4330
    push $P116, $P4331
    push $P116, $P4332
    push $P116, $P4333
    push $P116, $P4334
    push $P116, $P4335
    push $P116, $P4336
    push $P116, $P4337
    push $P116, $P4338
    push $P116, $P4339
    push $P116, $P4340
    push $P116, $P4341
    push $P116, $P4342
    push $P116, $P4343
    push $P116, $P4344
    push $P116, $P4345
    push $P116, $P4346
    push $P116, $P4347
    push $P116, $P4348
    push $P116, $P4349
    push $P116, $P4350
    push $P116, $P4351
    push $P116, $P4352
    push $P116, $P4353
    push $P116, $P4354
    push $P116, $P4355
    push $P116, $P4356
    push $P116, $P4357
    push $P116, $P4358
    push $P116, $P4359
    push $P116, $P4360
    push $P116, $P4361
    push $P116, $P4362
    push $P116, $P4363
    push $P116, $P4364
    push $P116, $P4365
    push $P116, $P4366
    push $P116, $P4367
    push $P116, $P4368
    push $P116, $P4369
    push $P116, $P4370
    push $P116, $P4371
    push $P116, $P4372
    push $P116, $P4373
    push $P116, $P4374
    push $P116, $P4375
    push $P116, $P4376
    push $P116, $P4377
    push $P116, $P4378
    push $P116, $P4379
    push $P116, $P4380
    push $P116, $P4381
    push $P116, $P4382
    push $P116, $P4383
    push $P116, $P4384
    push $P116, $P4385
    push $P116, $P4386
    push $P116, $P4387
    push $P116, $P4388
    push $P116, $P4389
    push $P116, $P4390
    push $P116, $P4391
    push $P116, $P4392
    push $P116, $P4393
    push $P116, $P4394
    push $P116, $P4395
    push $P116, $P4396
    push $P116, $P4397
    push $P116, $P4398
    push $P116, $P4399
    push $P116, $P4400
    push $P116, $P4401
    push $P116, $P4402
    push $P116, $P4403
    push $P116, $P4404
    push $P116, $P4405
    push $P116, $P4406
    push $P116, $P4407
    push $P116, $P4408
    push $P116, $P4409
    push $P116, $P4410
    push $P116, $P4411
    push $P116, $P4412
    push $P116, $P4413
    push $P116, $P4414
    push $P116, $P4415
    push $P116, $P4416
    push $P116, $P4417
    push $P116, $P4418
    push $P116, $P4419
    push $P116, $P4420
    push $P116, $P4421
    push $P116, $P4422
    .return ($P116)
.end


.HLL "nqp"

.namespace []
.sub "MAIN"  :subid("543_1335114138.94729") :outer("542_1335114138.94729")
    .param pmc param_1007
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2920
    .lex "@ARGS", param_1007
.annotate 'line', 2922
    new $P100, "Undef"
    set $P1008, $P100
    .lex "$nqpcomp", $P1008
.annotate 'line', 2929
    $P1010 = root_new ['parrot';'ResizablePMCArray']
    set $P1009, $P1010
    .lex "@clo", $P1009
.annotate 'line', 2922
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "NQP"
    get_who $P103, $P102
    set $P104, $P103["Compiler"]
    $P105 = $P104."new"()
    set $P1008, $P105
.annotate 'line', 2923
    set $P101, $P1008
    unless_null $P101, vivify_657
    new $P101, "Undef"
  vivify_657:
    $P101."language"("nqp")
.annotate 'line', 2924
    set $P101, $P1008
    unless_null $P101, vivify_658
    new $P101, "Undef"
  vivify_658:
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "NQP"
    get_who $P104, $P103
    set $P105, $P104["Grammar"]
    $P101."parsegrammar"($P105)
.annotate 'line', 2925
    set $P101, $P1008
    unless_null $P101, vivify_659
    new $P101, "Undef"
  vivify_659:
    get_hll_global $P102, "GLOBAL"
    nqp_get_package_through_who $P103, $P102, "NQP"
    get_who $P104, $P103
    set $P105, $P104["Actions"]
    $P101."parseactions"($P105)
.annotate 'line', 2926
    set $P101, $P1008
    unless_null $P101, vivify_660
    new $P101, "Undef"
  vivify_660:
    $P102 = $P101."config"()
    "hll-config"($P102)
.annotate 'line', 2929
    set $P101, $P1008
    unless_null $P101, vivify_661
    new $P101, "Undef"
  vivify_661:
    $P102 = $P101."commandline_options"()
    set $P1009, $P102
.annotate 'line', 2930
    set $P1011, $P1009
    unless_null $P1011, vivify_662
    $P1011 = root_new ['parrot';'ResizablePMCArray']
  vivify_662:
    $P1011."push"("parsetrace")
.annotate 'line', 2931
    set $P1012, $P1009
    unless_null $P1012, vivify_663
    $P1012 = root_new ['parrot';'ResizablePMCArray']
  vivify_663:
    $P1012."push"("setting=s")
.annotate 'line', 2932
    set $P1013, $P1009
    unless_null $P1013, vivify_664
    $P1013 = root_new ['parrot';'ResizablePMCArray']
  vivify_664:
    $P1013."push"("setting-path=s")
.annotate 'line', 2933
    set $P1014, $P1009
    unless_null $P1014, vivify_665
    $P1014 = root_new ['parrot';'ResizablePMCArray']
  vivify_665:
    $P1014."push"("module-path=s")
.annotate 'line', 2934
    set $P1015, $P1009
    unless_null $P1015, vivify_666
    $P1015 = root_new ['parrot';'ResizablePMCArray']
  vivify_666:
    $P1015."push"("vmlibs=s")
.annotate 'line', 2937
    set $P101, $P1008
    unless_null $P101, vivify_667
    new $P101, "Undef"
  vivify_667:
    set $P1016, param_1007
    unless_null $P1016, vivify_668
    $P1016 = root_new ['parrot';'ResizablePMCArray']
  vivify_668:
    $P101."command_line"($P1016, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 2939
    set $P101, $P1008
    unless_null $P101, vivify_669
    new $P101, "Undef"
  vivify_669:
    $P102 = $P101."nqpevent"()
.annotate 'line', 2920
    .return ($P102)
.end


.HLL "nqp"

.namespace []
.sub "hll-config"  :subid("544_1335114138.94729") :outer("542_1335114138.94729")
    .param pmc param_1020
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2943
    .lex "$config", param_1020
.annotate 'line', 2944
    new $P101, "String"
    assign $P101, "2012.04-20-g09bf632"
    set $P1021, param_1020
    unless_null $P1021, vivify_670
    $P1021 = root_new ['parrot';'Hash']
    set param_1020, $P1021
  vivify_670:
    set $P1021["version"], $P101
.annotate 'line', 2945
    new $P101, "String"
    assign $P101, "2012-04-22T17:02:18Z"
    set $P1022, param_1020
    unless_null $P1022, vivify_671
    $P1022 = root_new ['parrot';'Hash']
    set param_1020, $P1022
  vivify_671:
    set $P1022["build-date"], $P101
.annotate 'line', 2943
    .return ($P101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1024"  :subid("545_1335114138.94729") :outer("542_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 7
    .const 'Sub' $P1384 = "39_1335114138.94729" 
    capture_lex $P1384
    .const 'Sub' $P1369 = "38_1335114138.94729" 
    capture_lex $P1369
    .const 'Sub' $P1352 = "37_1335114138.94729" 
    capture_lex $P1352
    .const 'Sub' $P1349 = "36_1335114138.94729" 
    capture_lex $P1349
    .const 'Sub' $P1346 = "35_1335114138.94729" 
    capture_lex $P1346
    .const 'Sub' $P1318 = "34_1335114138.94729" 
    capture_lex $P1318
    .const 'Sub' $P1304 = "33_1335114138.94729" 
    capture_lex $P1304
    .const 'Sub' $P1266 = "32_1335114138.94729" 
    capture_lex $P1266
    .const 'Sub' $P1263 = "31_1335114138.94729" 
    capture_lex $P1263
    .const 'Sub' $P1258 = "30_1335114138.94729" 
    capture_lex $P1258
    .const 'Sub' $P1253 = "29_1335114138.94729" 
    capture_lex $P1253
    .const 'Sub' $P1248 = "28_1335114138.94729" 
    capture_lex $P1248
    .const 'Sub' $P1233 = "27_1335114138.94729" 
    capture_lex $P1233
    .const 'Sub' $P1225 = "26_1335114138.94729" 
    capture_lex $P1225
    .const 'Sub' $P1219 = "25_1335114138.94729" 
    capture_lex $P1219
    .const 'Sub' $P1210 = "24_1335114138.94729" 
    capture_lex $P1210
    .const 'Sub' $P1193 = "23_1335114138.94729" 
    capture_lex $P1193
    .const 'Sub' $P1100 = "22_1335114138.94729" 
    capture_lex $P1100
    .const 'Sub' $P1094 = "18_1335114138.94729" 
    capture_lex $P1094
    .const 'Sub' $P1087 = "17_1335114138.94729" 
    capture_lex $P1087
    .const 'Sub' $P1073 = "16_1335114138.94729" 
    capture_lex $P1073
    .const 'Sub' $P1065 = "15_1335114138.94729" 
    capture_lex $P1065
    .const 'Sub' $P1054 = "14_1335114138.94729" 
    capture_lex $P1054
    .const 'Sub' $P1047 = "13_1335114138.94729" 
    capture_lex $P1047
    .const 'Sub' $P1043 = "12_1335114138.94729" 
    capture_lex $P1043
    .const 'Sub' $P1040 = "11_1335114138.94729" 
    capture_lex $P1040
    .const 'Sub' $P1029 = "10_1335114138.94729" 
    capture_lex $P1029
.annotate 'line', 58
    new $P103, "Undef"
    set $P1026, $P103
    .lex "$loader", $P1026
    .lex "$?PACKAGE", $P1027
    .lex "$?CLASS", $P1028
    get_hll_global $P104, "ModuleLoader"
    set $P1026, $P104
.annotate 'line', 572
    .const 'Sub' $P1384 = "39_1335114138.94729" 
    newclosure $P1438, $P1384
.annotate 'line', 7
    .return ($P1438)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "push_lexpad" :anon :subid("10_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1030
    .param pmc param_1031
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 27
    .lex "self", param_1030
    .lex "$/", param_1031
.annotate 'line', 29
    new $P104, "Undef"
    set $P1032, $P104
    .lex "$pad", $P1032
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Block"]
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Stmts"]
    $P113 = $P112."new"()
    set $P114, param_1031
    unless_null $P114, vivify_672
    new $P114, "Undef"
  vivify_672:
    $P115 = $P108."new"($P113, $P114 :named("node"))
    set $P1032, $P115
.annotate 'line', 30
    set $P105, param_1030
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1034, $P106, $P107, "@!BLOCKS", 8
    unless_null $P1034, vivify_673
    $P1034 = root_new ['parrot';'ResizablePMCArray']
  vivify_673:
    set $N100, $P1034
    unless $N100, if_1033_end
.annotate 'line', 31
    set $P108, param_1030
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1035, $P109, $P110, "@!BLOCKS", 8
    unless_null $P1035, vivify_674
    $P1035 = root_new ['parrot';'ResizablePMCArray']
  vivify_674:
    set $N101, $P1035
    new $P111, 'Float'
    set $P111, $N101
    sub $P112, $P111, 1
    set $I100, $P112
    set $P113, param_1030
    nqp_decontainerize $P114, $P113
    nqp_get_sc_object $P115, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1036, $P114, $P115, "@!BLOCKS", 8
    unless_null $P1036, vivify_675
    $P1036 = root_new ['parrot';'ResizablePMCArray']
  vivify_675:
    set $P116, $P1036[$I100]
    unless_null $P116, vivify_676
    new $P116, "Undef"
  vivify_676:
    set $P1037, $P1032
    unless_null $P1037, vivify_677
    $P1037 = root_new ['parrot';'Hash']
    set $P1032, $P1037
  vivify_677:
    set $P1037["outer"], $P116
  if_1033_end:
.annotate 'line', 33
    set $P105, $P1032
    unless_null $P105, vivify_678
    new $P105, "Undef"
  vivify_678:
    set $P106, param_1030
    nqp_decontainerize $P107, $P106
    nqp_get_sc_object $P108, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1038, $P107, $P108, "@!BLOCKS", 8
    unless_null $P1038, vivify_679
    $P1038 = root_new ['parrot';'ResizablePMCArray']
  vivify_679:
    set $N100, $P1038
    set $I100, $N100
    set $P109, param_1030
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1039, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1039, vivify_680
    $P1039 = root_new ['parrot';'ResizablePMCArray']
    repr_bind_attr_obj $P110, $P111, "@!BLOCKS", 8, $P1039
  vivify_680:
    set $P1039[$I100], $P105
.annotate 'line', 27
    set $P105, $P1032
    unless_null $P105, vivify_681
    new $P105, "Undef"
  vivify_681:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pop_lexpad" :anon :subid("11_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1041
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 38
    .lex "self", param_1041
.annotate 'line', 39
    set $P104, param_1041
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1042, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1042, vivify_682
    $P1042 = root_new ['parrot';'ResizablePMCArray']
  vivify_682:
    $P107 = $P1042."pop"()
.annotate 'line', 38
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "cur_lexpad" :anon :subid("12_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1044
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 43
    .lex "self", param_1044
.annotate 'line', 44
    set $P104, param_1044
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1045, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1045, vivify_683
    $P1045 = root_new ['parrot';'ResizablePMCArray']
  vivify_683:
    set $N100, $P1045
    new $P107, 'Float'
    set $P107, $N100
    sub $P108, $P107, 1
    set $I100, $P108
.annotate 'line', 43
    set $P109, param_1044
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1046, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1046, vivify_684
    $P1046 = root_new ['parrot';'ResizablePMCArray']
  vivify_684:
    set $P112, $P1046[$I100]
    unless_null $P112, vivify_685
    new $P112, "Undef"
  vivify_685:
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "get_legacy_block_list" :anon :subid("13_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1048
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 48
    .lex "self", param_1048
.annotate 'line', 49
    $P1050 = root_new ['parrot';'ResizablePMCArray']
    set $P1049, $P1050
    .lex "@x", $P1049
    set $P104, param_1048
    nqp_decontainerize $P105, $P104
    nqp_get_sc_object $P106, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1051, $P105, $P106, "@!BLOCKS", 8
    unless_null $P1051, vivify_686
    $P1051 = root_new ['parrot';'ResizablePMCArray']
  vivify_686:
    clone $P107, $P1051
    set $P1049, $P107
.annotate 'line', 50
    set $P1052, $P1049
    unless_null $P1052, vivify_687
    $P1052 = root_new ['parrot';'ResizablePMCArray']
  vivify_687:
    $P1052."reverse"()
.annotate 'line', 48
    set $P1053, $P1049
    unless_null $P1053, vivify_688
    $P1053 = root_new ['parrot';'ResizablePMCArray']
  vivify_688:
    .return ($P1053)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_setting" :anon :subid("14_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1057
    .param pmc param_1058
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 61
    .const 'Sub' $P1061 = "546_1335114138.94729" 
    capture_lex $P1061
    new $P1056, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1056, control_1055
    push_eh $P1056
    .lex "self", param_1057
    .lex "$setting_name", param_1058
.annotate 'line', 63
    set $P105, param_1058
    unless_null $P105, vivify_689
    new $P105, "Undef"
  vivify_689:
    set $S100, $P105
    isne $I100, $S100, "NULL"
    if $I100, if_1059
    new $P104, 'Integer'
    set $P104, $I100
    goto if_1059_end
  if_1059:
    .const 'Sub' $P1061 = "546_1335114138.94729" 
    capture_lex $P1061
    $P107 = $P1061()
    set $P104, $P107
  if_1059_end:
.annotate 'line', 61
    .return ($P104)
  control_1055:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1060"  :anon :subid("546_1335114138.94729") :outer("14_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 67
    new $P106, "Undef"
    set $P1062, $P106
    .lex "$setting", $P1062
.annotate 'line', 68
    find_lex $P107, "$loader"
    unless_null $P107, vivify_690
    new $P107, "Undef"
  vivify_690:
    find_lex $P108, "$setting_name"
    unless_null $P108, vivify_691
    new $P108, "Undef"
  vivify_691:
    $P109 = $P107."load_setting"($P108)
    find_dynamic_lex $P112, "%*COMPILING"
    unless_null $P112, vivify_692
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["%COMPILING"]
    unless_null $P112, vivify_693
    die "Contextual %*COMPILING not found"
  vivify_693:
    store_dynamic_lex "%*COMPILING", $P112
  vivify_692:
    set $P1063, $P112["%?OPTIONS"]
    unless_null $P1063, vivify_694
    $P1063 = root_new ['parrot';'Hash']
    set $P112["%?OPTIONS"], $P1063
  vivify_694:
    set $P1063["outer_ctx"], $P109
    set $P1062, $P109
.annotate 'line', 71
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    $P109 = $P108."is_precompilation_mode"()
    if $P109, if_1064
.annotate 'line', 89
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 91
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    $P120 = $P119."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 92
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 94
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    new $P129, "ResizablePMCArray"
    $P130 = $P128."new"("ModuleLoader" :named("name"), $P129 :named("namespace"), "package" :named("scope"))
    find_lex $P131, "$setting_name"
    unless_null $P131, vivify_695
    new $P131, "Undef"
  vivify_695:
    $P132 = $P124."new"($P130, $P131, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 92
    $P133 = $P115."new"($P120, $P132, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 89
    $P111."add_fixup_task"($P133 :named("fixup_past"))
.annotate 'line', 87
    goto if_1064_end
  if_1064:
.annotate 'line', 72
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
.annotate 'line', 73
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
    $P120 = $P119."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 76
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Op"]
.annotate 'line', 78
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 79
    get_hll_global $P130, "GLOBAL"
    nqp_get_package_through_who $P131, $P130, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
.annotate 'line', 81
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    new $P138, "ResizablePMCArray"
    $P139 = $P137."new"("ModuleLoader" :named("name"), $P138 :named("namespace"), "package" :named("scope"))
    find_lex $P140, "$setting_name"
    unless_null $P140, vivify_696
    new $P140, "Undef"
  vivify_696:
    $P141 = $P133."new"($P139, $P140, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 79
    $P142 = $P124."new"($P129, $P141, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 76
    $P143 = $P115."new"($P120, $P142)
.annotate 'line', 72
    $P111."add_load_dependency_task"($P143 :named("deserialize_past"))
  if_1064_end:
.annotate 'line', 100
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    set $P108, $P1062
    unless_null $P108, vivify_697
    new $P108, "Undef"
  vivify_697:
    getattribute $P109, $P108, "lex_pad"
    setattribute $P107, 'payload', $P109
    throw $P107
.annotate 'line', 63
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "load_module" :anon :subid("15_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1068
    .param pmc param_1069
    .param pmc param_1070
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 106
    new $P1067, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1067, control_1066
    push_eh $P1067
    .lex "self", param_1068
    .lex "$module_name", param_1069
    .lex "$cur_GLOBALish", param_1070
.annotate 'line', 108
    new $P104, "Undef"
    set $P1071, $P104
    .lex "$module", $P1071
    find_lex $P105, "$loader"
    unless_null $P105, vivify_698
    new $P105, "Undef"
  vivify_698:
    set $P106, param_1069
    unless_null $P106, vivify_699
    new $P106, "Undef"
  vivify_699:
    set $P107, param_1070
    unless_null $P107, vivify_700
    new $P107, "Undef"
  vivify_700:
    $P108 = $P105."load_module"($P106, $P107)
    set $P1071, $P108
.annotate 'line', 111
    set $P105, param_1068
    nqp_decontainerize $P106, $P105
    $P107 = $P106."is_precompilation_mode"()
    unless $P107, if_1072_end
.annotate 'line', 112
    set $P108, param_1068
    nqp_decontainerize $P109, $P108
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
.annotate 'line', 113
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    $P118 = $P117."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 116
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Op"]
.annotate 'line', 118
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    new $P127, "ResizablePMCArray"
    $P128 = $P126."new"("ModuleLoader" :named("name"), $P127 :named("namespace"), "package" :named("scope"))
    set $P129, param_1069
    unless_null $P129, vivify_701
    new $P129, "Undef"
  vivify_701:
    $P130 = $P122."new"($P128, $P129, "callmethod" :named("pasttype"), "load_module" :named("name"))
.annotate 'line', 116
    $P131 = $P113."new"($P118, $P130)
.annotate 'line', 112
    $P109."add_load_dependency_task"($P131 :named("deserialize_past"))
  if_1072_end:
.annotate 'line', 123
    new $P105, "Exception"
    set $P105['type'], .CONTROL_RETURN
    set $P106, $P1071
    unless_null $P106, vivify_702
    new $P106, "Undef"
  vivify_702:
    getattribute $P107, $P106, "lex_pad"
    setattribute $P105, 'payload', $P107
    throw $P105
.annotate 'line', 106
    .return ()
  control_1066:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "install_package_symbol" :anon :subid("16_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1074
    .param pmc param_1075
    .param pmc param_1076
    .param pmc param_1077
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 128
    .const 'Sub' $P1084 = "547_1335114138.94729" 
    capture_lex $P1084
    .lex "self", param_1074
    .lex "$package", param_1075
    .lex "@sym", param_1076
    .lex "$obj", param_1077
.annotate 'line', 130
    new $P104, "Undef"
    set $P1078, $P104
    .lex "$name", $P1078
.annotate 'line', 133
    new $P105, "Undef"
    set $P1079, $P105
    .lex "$target", $P1079
.annotate 'line', 129
    set $P1080, param_1076
    unless_null $P1080, vivify_703
    $P1080 = root_new ['parrot';'ResizablePMCArray']
  vivify_703:
    clone $P106, $P1080
    set param_1076, $P106
.annotate 'line', 130
    set $P1081, param_1076
    unless_null $P1081, vivify_704
    $P1081 = root_new ['parrot';'ResizablePMCArray']
  vivify_704:
    $P106 = $P1081."pop"()
    set $S100, $P106
    new $P107, 'String'
    set $P107, $S100
    set $P1078, $P107
.annotate 'line', 133
    set $P106, param_1075
    unless_null $P106, vivify_705
    new $P106, "Undef"
  vivify_705:
    set $P1079, $P106
.annotate 'line', 134
    set $P1082, param_1076
    unless_null $P1082, vivify_706
    $P1082 = root_new ['parrot';'ResizablePMCArray']
  vivify_706:
    defined $I100, $P1082
    unless $I100, for_undef_707
    iter $P106, $P1082
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1086_handler
    push_eh $P108
  loop1086_test:
    unless $P106, loop1086_done
    shift $P107, $P106
  loop1086_redo:
    .const 'Sub' $P1084 = "547_1335114138.94729" 
    capture_lex $P1084
    $P1084($P107)
  loop1086_next:
    goto loop1086_test
  loop1086_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1086_next
    eq $P109, .CONTROL_LOOP_REDO, loop1086_redo
  loop1086_done:
    pop_eh 
  for_undef_707:
.annotate 'line', 137
    set $P106, param_1077
    unless_null $P106, vivify_710
    new $P106, "Undef"
  vivify_710:
    set $P107, $P1078
    unless_null $P107, vivify_711
    new $P107, "Undef"
  vivify_711:
    set $P108, $P1079
    unless_null $P108, vivify_712
    new $P108, "Undef"
    set $P1079, $P108
  vivify_712:
    get_who $P109, $P108
    set $P109[$P107], $P106
.annotate 'line', 128
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1083"  :anon :subid("547_1335114138.94729") :outer("16_1335114138.94729")
    .param pmc param_1085
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 134
    .lex "$_", param_1085
.annotate 'line', 135
    find_lex $P108, "$target"
    unless_null $P108, vivify_708
    new $P108, "Undef"
  vivify_708:
    find_lex $P109, "$_"
    unless_null $P109, vivify_709
    new $P109, "Undef"
  vivify_709:
    set $S100, $P109
    nqp_get_package_through_who $P110, $P108, $S100
    store_lex "$target", $P110
.annotate 'line', 134
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_lexical_symbol" :anon :subid("17_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1088
    .param pmc param_1089
    .param pmc param_1090
    .param pmc param_1091
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 144
    .lex "self", param_1088
    .lex "$block", param_1089
    .lex "$name", param_1090
    .lex "$obj", param_1091
.annotate 'line', 151
    new $P104, "Undef"
    set $P1092, $P104
    .lex "$fixup", $P1092
.annotate 'line', 146
    set $P105, param_1089
    unless_null $P105, vivify_713
    new $P105, "Undef"
  vivify_713:
    set $P106, param_1090
    unless_null $P106, vivify_714
    new $P106, "Undef"
  vivify_714:
    set $P107, param_1091
    unless_null $P107, vivify_715
    new $P107, "Undef"
  vivify_715:
    $P105."symbol"($P106, "lexical" :named("scope"), $P107 :named("value"))
.annotate 'line', 147
    new $P105, "Float"
    assign $P105, 0
    set $I100, $P105
    set $P1093, param_1089
    unless_null $P1093, vivify_716
    $P1093 = root_new ['parrot';'ResizablePMCArray']
  vivify_716:
    set $P106, $P1093[$I100]
    unless_null $P106, vivify_717
    new $P106, "Undef"
  vivify_717:
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Var"]
    set $P111, param_1090
    unless_null $P111, vivify_718
    new $P111, "Undef"
  vivify_718:
    $P112 = $P110."new"("lexical" :named("scope"), $P111 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"))
    $P106."push"($P112)
.annotate 'line', 151
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Stmts"]
.annotate 'line', 152
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
.annotate 'line', 154
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Val"]
    set $P117, param_1089
    unless_null $P117, vivify_719
    new $P117, "Undef"
  vivify_719:
    $P118 = $P116."new"($P117 :named("value"), "LexInfo" :named("returns"))
.annotate 'line', 155
    set $P119, param_1090
    unless_null $P119, vivify_720
    new $P119, "Undef"
  vivify_720:
    set $S100, $P119
    set $P120, param_1088
    nqp_decontainerize $P121, $P120
    set $P122, param_1091
    unless_null $P122, vivify_721
    new $P122, "Undef"
  vivify_721:
    $P123 = $P121."get_slot_past_for_object"($P122)
    $P124 = $P112."new"($P118, $S100, $P123, "callmethod" :named("pasttype"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 159
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 161
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Val"]
    set $P133, param_1089
    unless_null $P133, vivify_722
    new $P133, "Undef"
  vivify_722:
    $P134 = $P132."new"($P133 :named("value"), "LexInfo" :named("returns"))
    $P135 = $P128."new"($P134, "callmethod" :named("pasttype"), "finish_static_lexpad" :named("name"))
.annotate 'line', 159
    $P136 = $P108."new"($P124, $P135)
.annotate 'line', 151
    set $P1092, $P136
.annotate 'line', 164
    set $P105, param_1088
    nqp_decontainerize $P106, $P105
    set $P107, $P1092
    unless_null $P107, vivify_723
    new $P107, "Undef"
  vivify_723:
    set $P108, $P1092
    unless_null $P108, vivify_724
    new $P108, "Undef"
  vivify_724:
    $P109 = $P106."add_fixup_task"($P107 :named("deserialize_past"), $P108 :named("fixup_past"))
.annotate 'line', 144
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "install_package_routine" :anon :subid("18_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1095
    .param pmc param_1096
    .param pmc param_1097
    .param pmc param_1098
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 169
    .lex "self", param_1095
    .lex "$package", param_1096
    .lex "$name", param_1097
    .lex "$past_block", param_1098
.annotate 'line', 170
    new $P104, "Undef"
    set $P1099, $P104
    .lex "$fixup", $P1099
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Op"]
.annotate 'line', 172
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Var"]
.annotate 'line', 174
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
    set $P117, param_1095
    nqp_decontainerize $P118, $P117
    set $P119, param_1096
    unless_null $P119, vivify_725
    new $P119, "Undef"
  vivify_725:
    $P120 = $P118."get_slot_past_for_object"($P119)
    $P121 = $P116."new"($P120, "get_who PP" :named("pirop"))
.annotate 'line', 175
    set $P122, param_1097
    unless_null $P122, vivify_726
    new $P122, "Undef"
  vivify_726:
    set $S100, $P122
    $P123 = $P112."new"($P121, $S100, "keyed" :named("scope"))
.annotate 'line', 177
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Val"]
    set $P128, param_1098
    unless_null $P128, vivify_727
    new $P128, "Undef"
  vivify_727:
    $P129 = $P127."new"($P128 :named("value"))
    $P130 = $P108."new"($P123, $P129, "bind_6model" :named("pasttype"))
.annotate 'line', 170
    set $P1099, $P130
.annotate 'line', 179
    set $P105, param_1095
    nqp_decontainerize $P106, $P105
    set $P107, $P1099
    unless_null $P107, vivify_728
    new $P107, "Undef"
  vivify_728:
    set $P108, $P1099
    unless_null $P108, vivify_729
    new $P108, "Undef"
  vivify_729:
    $P109 = $P106."add_fixup_task"($P107 :named("deserialize_past"), $P108 :named("fixup_past"))
.annotate 'line', 169
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "create_code" :anon :subid("22_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1103
    .param pmc param_1104
    .param pmc param_1105
    .param pmc param_1106
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 184
    .const 'Sub' $P1188 = "552_1335114138.94729" 
    capture_lex $P1188
    .const 'Sub' $P1180 = "21_1335114138.94729" 
    capture_lex $P1180
    .const 'Sub' $P1173 = "20_1335114138.94729" 
    capture_lex $P1173
    .const 'Sub' $P1123 = "19_1335114138.94729" 
    capture_lex $P1123
    .const 'Sub' $P1114 = "548_1335114138.94729" 
    capture_lex $P1114
    new $P1102, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1102, control_1101
    push_eh $P1102
    .lex "self", param_1103
    .lex "$past", param_1104
    .lex "$name", param_1105
    .lex "$is_dispatcher", param_1106
.annotate 'line', 186
    new $P104, "Undef"
    set $P1107, $P104
    .lex "$code_type", $P1107
.annotate 'line', 187
    new $P105, "Undef"
    set $P1108, $P105
    .lex "$have_code_type", $P1108
.annotate 'line', 197
    new $P106, "Undef"
    set $P1109, $P106
    .lex "$stub_code", $P1109
.annotate 'line', 235
    new $P107, "Undef"
    set $P1110, $P107
    .lex "$fixups", $P1110
.annotate 'line', 236
    new $P108, "Undef"
    set $P1111, $P108
    .lex "$dummy", $P1111
.annotate 'line', 237
    new $P109, "Undef"
    set $P1112, $P109
    .lex "$code_ref_idx", $P1112
.annotate 'line', 184
    set $P110, $P1107
    unless_null $P110, vivify_730
    new $P110, "Undef"
  vivify_730:
.annotate 'line', 187
    new $P110, "Float"
    assign $P110, 0
    set $P1108, $P110
.annotate 'line', 188
    .const 'Sub' $P1114 = "548_1335114138.94729" 
    capture_lex $P1114
    $P1114()
.annotate 'line', 197
    .const 'Sub' $P1123 = "19_1335114138.94729" 
    newclosure $P1163, $P1123
    set $P1109, $P1163
.annotate 'line', 235
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1110, $P114
.annotate 'line', 184
    set $P110, $P1111
    unless_null $P110, vivify_790
    new $P110, "Undef"
  vivify_790:
    set $P110, $P1112
    unless_null $P110, vivify_791
    new $P110, "Undef"
  vivify_791:
.annotate 'line', 238
    set $P1165, param_1104
    unless_null $P1165, vivify_792
    $P1165 = root_new ['parrot';'Hash']
  vivify_792:
    set $P110, $P1165["compile_time_dummy"]
    unless_null $P110, vivify_793
    new $P110, "Undef"
  vivify_793:
    defined $I100, $P110
    if $I100, if_1164
.annotate 'line', 243
    set $P111, $P1109
    unless_null $P111, vivify_794
    new $P111, "Undef"
  vivify_794:
    nqp_fresh_stub $P112, $P111
    set $P1111, $P112
.annotate 'line', 244
    set $P111, $P1111
    unless_null $P111, vivify_795
    new $P111, "Undef"
  vivify_795:
    set $P112, param_1105
    unless_null $P112, vivify_796
    new $P112, "Undef"
  vivify_796:
    set $S100, $P112
    assign $P111, $S100
.annotate 'line', 247
    set $P111, $P1111
    unless_null $P111, vivify_797
    new $P111, "Undef"
  vivify_797:
    set $P112, $P1111
    unless_null $P112, vivify_798
    new $P112, "Undef"
  vivify_798:
    setprop $P111, "STATIC_CODE_REF", $P112
.annotate 'line', 248
    set $P111, param_1103
    nqp_decontainerize $P112, $P111
    set $P113, $P1111
    unless_null $P113, vivify_799
    new $P113, "Undef"
  vivify_799:
    set $P114, param_1104
    unless_null $P114, vivify_800
    new $P114, "Undef"
  vivify_800:
    $P115 = $P112."add_root_code_ref"($P113, $P114)
    set $P1112, $P115
.annotate 'line', 249
    set $P111, $P1112
    unless_null $P111, vivify_801
    new $P111, "Undef"
  vivify_801:
    set $P112, param_1104
    unless_null $P112, vivify_802
    new $P112, "Undef"
  vivify_802:
    $P113 = $P112."subid"()
    set $P114, param_1103
    nqp_decontainerize $P115, $P114
    nqp_get_sc_object $P116, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1167, $P115, $P116, "%!code_stub_sc_idx", 11
    unless_null $P1167, vivify_803
    $P1167 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P115, $P116, "%!code_stub_sc_idx", 11, $P1167
  vivify_803:
    set $P1167[$P113], $P111
.annotate 'line', 250
    set $P111, $P1111
    unless_null $P111, vivify_804
    new $P111, "Undef"
  vivify_804:
    set $P1168, param_1104
    unless_null $P1168, vivify_805
    $P1168 = root_new ['parrot';'Hash']
    set param_1104, $P1168
  vivify_805:
    set $P1168["compile_time_dummy"], $P111
.annotate 'line', 253
    set $P111, $P1111
    unless_null $P111, vivify_806
    new $P111, "Undef"
  vivify_806:
    set $P112, param_1104
    unless_null $P112, vivify_807
    new $P112, "Undef"
  vivify_807:
    setprop $P111, "PAST", $P112
.annotate 'line', 258
    set $P111, $P1108
    unless_null $P111, vivify_808
    new $P111, "Undef"
  vivify_808:
    unless $P111, if_1169_end
.annotate 'line', 259
    set $P112, $P1110
    unless_null $P112, vivify_809
    new $P112, "Undef"
  vivify_809:
    set $P113, param_1104
    unless_null $P113, vivify_810
    new $P113, "Undef"
  vivify_810:
    $P114 = $P113."subid"()
    set $P115, param_1103
    nqp_decontainerize $P116, $P115
    nqp_get_sc_object $P117, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1170, $P116, $P117, "%!code_object_fixup_list", 10
    unless_null $P1170, vivify_811
    $P1170 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P116, $P117, "%!code_object_fixup_list", 10, $P1170
  vivify_811:
    set $P1170[$P114], $P112
.annotate 'line', 260
    set $P112, param_1103
    nqp_decontainerize $P113, $P112
    $P114 = $P113."is_precompilation_mode"()
    if $P114, if_1171
.annotate 'line', 266
    set $P115, $P1111
    unless_null $P115, vivify_812
    new $P115, "Undef"
  vivify_812:
    .const 'Sub' $P1180 = "21_1335114138.94729" 
    newclosure $P1185, $P1180
    setprop $P115, "CLONE_CALLBACK", $P1185
.annotate 'line', 265
    goto if_1171_end
  if_1171:
.annotate 'line', 261
    set $P115, $P1111
    unless_null $P115, vivify_823
    new $P115, "Undef"
  vivify_823:
    .const 'Sub' $P1173 = "20_1335114138.94729" 
    newclosure $P1178, $P1173
    setprop $P115, "CLONE_CALLBACK", $P1178
  if_1171_end:
  if_1169_end:
.annotate 'line', 241
    goto if_1164_end
  if_1164:
.annotate 'line', 239
    set $P1166, param_1104
    unless_null $P1166, vivify_828
    $P1166 = root_new ['parrot';'Hash']
  vivify_828:
    set $P111, $P1166["compile_time_dummy"]
    unless_null $P111, vivify_829
    new $P111, "Undef"
  vivify_829:
    set $P1111, $P111
  if_1164_end:
.annotate 'line', 289
    set $P110, param_1103
    nqp_decontainerize $P111, $P110
    set $P112, $P1110
    unless_null $P112, vivify_830
    new $P112, "Undef"
  vivify_830:
    $P111."add_fixup_task"($P112 :named("fixup_past"))
.annotate 'line', 293
    set $P111, $P1108
    unless_null $P111, vivify_831
    new $P111, "Undef"
  vivify_831:
    if $P111, if_1186
.annotate 'line', 331
    set $P116, $P1110
    unless_null $P116, vivify_832
    new $P116, "Undef"
  vivify_832:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Op"]
.annotate 'line', 333
    set $P121, param_1103
    nqp_decontainerize $P122, $P121
    set $P123, $P1112
    unless_null $P123, vivify_833
    new $P123, "Undef"
  vivify_833:
    $P124 = $P122."get_slot_past_for_code_ref_at"($P123)
.annotate 'line', 334
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Val"]
    set $P129, param_1104
    unless_null $P129, vivify_834
    new $P129, "Undef"
  vivify_834:
    $P130 = $P128."new"($P129 :named("value"))
    $P131 = $P120."new"($P124, $P130, "assign vPP" :named("pirop"))
.annotate 'line', 331
    $P116."push"($P131)
.annotate 'line', 336
    new $P116, "Exception"
    set $P116['type'], .CONTROL_RETURN
    set $P117, $P1111
    unless_null $P117, vivify_835
    new $P117, "Undef"
  vivify_835:
    setattribute $P116, 'payload', $P117
    throw $P116
.annotate 'line', 328
    goto if_1186_end
  if_1186:
.annotate 'line', 293
    .const 'Sub' $P1188 = "552_1335114138.94729" 
    capture_lex $P1188
    $P115 = $P1188()
    set $P110, $P115
  if_1186_end:
.annotate 'line', 184
    .return ($P110)
  control_1101:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P111, exception, "payload"
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1113"  :anon :subid("548_1335114138.94729") :outer("22_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 188
    new $P1117, 'ExceptionHandler'
    set_label $P1117, control_1116
    $P1117."handle_types_except"(.CONTROL_ALL)
    push_eh $P1117
.annotate 'line', 189
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    new $P112, "ResizablePMCArray"
    push $P112, "NQPRoutine"
    $P113 = $P111."find_sym"($P112)
    store_lex "$code_type", $P113
.annotate 'line', 190
    find_dynamic_lex $P112, "$*PACKAGE"
    unless_null $P112, vivify_731
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$PACKAGE"]
    unless_null $P112, vivify_732
    die "Contextual $*PACKAGE not found"
  vivify_732:
  vivify_731:
    get_how $P113, $P112
    find_dynamic_lex $P116, "$*PACKAGE"
    unless_null $P116, vivify_733
    get_hll_global $P114, "GLOBAL"
    get_who $P115, $P114
    set $P116, $P115["$PACKAGE"]
    unless_null $P116, vivify_734
    die "Contextual $*PACKAGE not found"
  vivify_734:
  vivify_733:
    $S100 = $P113."name"($P116)
    isne $I100, $S100, "NQPRoutine"
    new $P117, 'Integer'
    set $P117, $I100
    store_lex "$have_code_type", $P117
.annotate 'line', 188
    pop_eh 
    goto skip_handler_1115
  control_1116:
    peek_exception $P1118
    .local pmc exception 
    .get_results (exception) 
    new $P1120, 'Integer'
    set $P1120, 1
    set exception["handled"], $P1120
    set $I1121, exception["handled"]
    eq $I1121, 1, handled_1119
    rethrow exception
  handled_1119:
    finalize $P1118
    .return (exception)
  skip_handler_1115:
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1122"  :anon :subid("19_1335114138.94729") :outer("22_1335114138.94729")
    .param pmc param_1124 :slurpy
    .param pmc param_1125 :slurpy :named
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 197
    .const 'Sub' $P1137 = "549_1335114138.94729" 
    capture_lex $P1137
    .lex "@args", param_1124
    .lex "%named", param_1125
.annotate 'line', 200
    new $P110, "Undef"
    set $P1126, $P110
    .lex "$nqpcomp", $P1126
.annotate 'line', 201
    new $P111, "Undef"
    set $P1127, $P111
    .lex "$post", $P1127
.annotate 'line', 202
    new $P112, "Undef"
    set $P1128, $P112
    .lex "$pir", $P1128
.annotate 'line', 203
    new $P113, "Undef"
    set $P1129, $P113
    .lex "$compiled", $P1129
.annotate 'line', 206
    $P1131 = root_new ['parrot';'ResizablePMCArray']
    set $P1130, $P1131
    .lex "@all_subs", $P1130
.annotate 'line', 207
    new $P114, "Undef"
    set $P1132, $P114
    .lex "$c", $P1132
.annotate 'line', 208
    new $P115, "Undef"
    set $P1133, $P115
    .lex "$i", $P1133
.annotate 'line', 230
    new $P116, "Undef"
    set $P1134, $P116
    .lex "$main_sub", $P1134
.annotate 'line', 199
    find_lex $P117, "self"
    nqp_decontainerize $P118, $P117
    find_lex $P119, "$past"
    unless_null $P119, vivify_735
    new $P119, "Undef"
  vivify_735:
    $P118."set_nqp_language_defaults"($P119)
.annotate 'line', 200
    compreg $P117, "nqp"
    set $P1126, $P117
.annotate 'line', 201
    set $P117, $P1126
    unless_null $P117, vivify_736
    new $P117, "Undef"
  vivify_736:
    find_lex $P118, "$past"
    unless_null $P118, vivify_737
    new $P118, "Undef"
  vivify_737:
    $P119 = $P117."post"($P118)
    set $P1127, $P119
.annotate 'line', 202
    set $P117, $P1126
    unless_null $P117, vivify_738
    new $P117, "Undef"
  vivify_738:
    set $P118, $P1127
    unless_null $P118, vivify_739
    new $P118, "Undef"
  vivify_739:
    $P119 = $P117."pir"($P118)
    set $P1128, $P119
.annotate 'line', 203
    set $P117, $P1126
    unless_null $P117, vivify_740
    new $P117, "Undef"
  vivify_740:
    set $P118, $P1128
    unless_null $P118, vivify_741
    new $P118, "Undef"
  vivify_741:
    $P119 = $P117."evalpmc"($P118)
    set $P1129, $P119
.annotate 'line', 206
    set $P117, $P1129
    unless_null $P117, vivify_742
    new $P117, "Undef"
  vivify_742:
    $P118 = $P117."all_subs"()
    set $P1130, $P118
.annotate 'line', 207
    set $P1135, $P1130
    unless_null $P1135, vivify_743
    $P1135 = root_new ['parrot';'ResizablePMCArray']
  vivify_743:
    elements $I100, $P1135
    new $P117, 'Integer'
    set $P117, $I100
    set $P1132, $P117
.annotate 'line', 208
    new $P117, "Float"
    assign $P117, 0
    set $P1133, $P117
.annotate 'line', 209
    new $P120, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P120, loop1160_handler
    push_eh $P120
  loop1160_test:
    set $P117, $P1133
    unless_null $P117, vivify_744
    new $P117, "Undef"
  vivify_744:
    set $N100, $P117
    set $P118, $P1132
    unless_null $P118, vivify_745
    new $P118, "Undef"
  vivify_745:
    set $N101, $P118
    islt $I100, $N100, $N101
    unless $I100, loop1160_done
  loop1160_redo:
    .const 'Sub' $P1137 = "549_1335114138.94729" 
    capture_lex $P1137
    $P1137()
  loop1160_next:
    goto loop1160_test
  loop1160_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P122, exception, 'type'
    eq $P122, .CONTROL_LOOP_NEXT, loop1160_next
    eq $P122, .CONTROL_LOOP_REDO, loop1160_redo
  loop1160_done:
    pop_eh 
.annotate 'line', 230
    set $P117, $P1129
    unless_null $P117, vivify_786
    new $P117, "Undef"
  vivify_786:
    $P118 = $P117."main_sub"()
    set $P1134, $P118
.annotate 'line', 231
    set $P117, $P1134
    unless_null $P117, vivify_787
    new $P117, "Undef"
  vivify_787:
    set $P1161, param_1124
    unless_null $P1161, vivify_788
    $P1161 = root_new ['parrot';'ResizablePMCArray']
  vivify_788:
    set $P1162, param_1125
    unless_null $P1162, vivify_789
    $P1162 = root_new ['parrot';'Hash']
  vivify_789:
    $P118 = $P117($P1161 :flat, $P1162 :flat)
.annotate 'line', 197
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1136"  :anon :subid("549_1335114138.94729") :outer("19_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 209
    .const 'Sub' $P1143 = "550_1335114138.94729" 
    capture_lex $P1143
.annotate 'line', 210
    new $P119, "Undef"
    set $P1138, $P119
    .lex "$subid", $P1138
    find_lex $P120, "$i"
    unless_null $P120, vivify_746
    new $P120, "Undef"
  vivify_746:
    set $I101, $P120
    find_lex $P1139, "@all_subs"
    unless_null $P1139, vivify_747
    $P1139 = root_new ['parrot';'ResizablePMCArray']
  vivify_747:
    set $P121, $P1139[$I101]
    unless_null $P121, vivify_748
    new $P121, "Undef"
  vivify_748:
    $P122 = $P121."get_subid"()
    set $P1138, $P122
.annotate 'line', 211
    set $P123, $P1138
    unless_null $P123, vivify_749
    new $P123, "Undef"
  vivify_749:
    find_lex $P120, "self"
    nqp_decontainerize $P121, $P120
    nqp_get_sc_object $P122, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1141, $P121, $P122, "%!code_objects_to_fix_up", 9
    unless_null $P1141, vivify_750
    $P1141 = root_new ['parrot';'Hash']
  vivify_750:
    exists $I101, $P1141[$P123]
    unless $I101, if_1140_end
    .const 'Sub' $P1143 = "550_1335114138.94729" 
    capture_lex $P1143
    $P1143()
  if_1140_end:
.annotate 'line', 227
    find_lex $P120, "$i"
    unless_null $P120, vivify_785
    new $P120, "Undef"
  vivify_785:
    add $P121, $P120, 1
    store_lex "$i", $P121
.annotate 'line', 209
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1142"  :anon :subid("550_1335114138.94729") :outer("549_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 211
    .const 'Sub' $P1150 = "551_1335114138.94729" 
    capture_lex $P1150
.annotate 'line', 215
    new $P124, "Undef"
    set $P1144, $P124
    .lex "$static", $P1144
.annotate 'line', 224
    new $P125, "Undef"
    set $P1145, $P125
    .lex "$fixup_stmts", $P1145
.annotate 'line', 215
    find_lex $P126, "$subid"
    unless_null $P126, vivify_751
    new $P126, "Undef"
  vivify_751:
    find_lex $P127, "self"
    nqp_decontainerize $P128, $P127
    nqp_get_sc_object $P129, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1146, $P128, $P129, "%!code_objects_to_fix_up", 9
    unless_null $P1146, vivify_752
    $P1146 = root_new ['parrot';'Hash']
  vivify_752:
    set $P130, $P1146[$P126]
    unless_null $P130, vivify_753
    new $P130, "Undef"
  vivify_753:
    $P131 = $P130."shift"()
    set $P1144, $P131
.annotate 'line', 216
    set $P126, $P1144
    unless_null $P126, vivify_754
    new $P126, "Undef"
  vivify_754:
    find_lex $P127, "$code_type"
    unless_null $P127, vivify_755
    new $P127, "Undef"
  vivify_755:
    find_lex $P128, "$i"
    unless_null $P128, vivify_756
    new $P128, "Undef"
  vivify_756:
    set $I102, $P128
    find_lex $P1147, "@all_subs"
    unless_null $P1147, vivify_757
    $P1147 = root_new ['parrot';'ResizablePMCArray']
  vivify_757:
    set $P129, $P1147[$I102]
    unless_null $P129, vivify_758
    new $P129, "Undef"
  vivify_758:
    setattribute $P126, $P127, "$!do", $P129
.annotate 'line', 217
    find_lex $P127, "$subid"
    unless_null $P127, vivify_759
    new $P127, "Undef"
  vivify_759:
    find_lex $P128, "self"
    nqp_decontainerize $P129, $P128
    nqp_get_sc_object $P130, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1148, $P129, $P130, "%!code_objects_to_fix_up", 9
    unless_null $P1148, vivify_760
    $P1148 = root_new ['parrot';'Hash']
  vivify_760:
    set $P131, $P1148[$P127]
    unless_null $P131, vivify_761
    new $P131, "Undef"
  vivify_761:
    defined $I102, $P131
    unless $I102, for_undef_762
    iter $P126, $P131
    new $P133, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P133, loop1153_handler
    push_eh $P133
  loop1153_test:
    unless $P126, loop1153_done
    shift $P132, $P126
  loop1153_redo:
    .const 'Sub' $P1150 = "551_1335114138.94729" 
    capture_lex $P1150
    $P1150($P132)
  loop1153_next:
    goto loop1153_test
  loop1153_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P134, exception, 'type'
    eq $P134, .CONTROL_LOOP_NEXT, loop1153_next
    eq $P134, .CONTROL_LOOP_REDO, loop1153_redo
  loop1153_done:
    pop_eh 
  for_undef_762:
.annotate 'line', 220
    find_lex $P126, "$i"
    unless_null $P126, vivify_768
    new $P126, "Undef"
  vivify_768:
    set $I102, $P126
    find_lex $P1154, "@all_subs"
    unless_null $P1154, vivify_769
    $P1154 = root_new ['parrot';'ResizablePMCArray']
  vivify_769:
    set $P127, $P1154[$I102]
    unless_null $P127, vivify_770
    new $P127, "Undef"
  vivify_770:
    find_lex $P128, "$i"
    unless_null $P128, vivify_771
    new $P128, "Undef"
  vivify_771:
    set $I103, $P128
    find_lex $P1155, "@all_subs"
    unless_null $P1155, vivify_772
    $P1155 = root_new ['parrot';'ResizablePMCArray']
  vivify_772:
    set $P129, $P1155[$I103]
    unless_null $P129, vivify_773
    new $P129, "Undef"
  vivify_773:
    setprop $P127, "STATIC_CODE_REF", $P129
.annotate 'line', 221
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    find_lex $P128, "$subid"
    unless_null $P128, vivify_774
    new $P128, "Undef"
  vivify_774:
    find_lex $P129, "self"
    nqp_decontainerize $P130, $P129
    nqp_get_sc_object $P131, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1156, $P130, $P131, "%!code_stub_sc_idx", 11
    unless_null $P1156, vivify_775
    $P1156 = root_new ['parrot';'Hash']
  vivify_775:
    set $P132, $P1156[$P128]
    unless_null $P132, vivify_776
    new $P132, "Undef"
  vivify_776:
    find_lex $P133, "$i"
    unless_null $P133, vivify_777
    new $P133, "Undef"
  vivify_777:
    set $I102, $P133
    find_lex $P1157, "@all_subs"
    unless_null $P1157, vivify_778
    $P1157 = root_new ['parrot';'ResizablePMCArray']
  vivify_778:
    set $P134, $P1157[$I102]
    unless_null $P134, vivify_779
    new $P134, "Undef"
  vivify_779:
    $P127."update_root_code_ref"($P132, $P134)
.annotate 'line', 224
    find_lex $P126, "$subid"
    unless_null $P126, vivify_780
    new $P126, "Undef"
  vivify_780:
    find_lex $P127, "self"
    nqp_decontainerize $P128, $P127
    nqp_get_sc_object $P129, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1158, $P128, $P129, "%!code_object_fixup_list", 10
    unless_null $P1158, vivify_781
    $P1158 = root_new ['parrot';'Hash']
  vivify_781:
    set $P130, $P1158[$P126]
    unless_null $P130, vivify_782
    new $P130, "Undef"
  vivify_782:
    set $P1145, $P130
.annotate 'line', 225
    new $P129, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P129, loop1159_handler
    push_eh $P129
  loop1159_test:
    set $P126, $P1145
    unless_null $P126, vivify_783
    new $P126, "Undef"
  vivify_783:
    $P127 = $P126."list"()
    set $N102, $P127
    unless $N102, loop1159_done
  loop1159_redo:
    set $P128, $P1145
    unless_null $P128, vivify_784
    new $P128, "Undef"
  vivify_784:
    $P128."shift"()
  loop1159_next:
    goto loop1159_test
  loop1159_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P130, exception, 'type'
    eq $P130, .CONTROL_LOOP_NEXT, loop1159_next
    eq $P130, .CONTROL_LOOP_REDO, loop1159_redo
  loop1159_done:
    pop_eh 
.annotate 'line', 211
    .return ($N102)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1149"  :anon :subid("551_1335114138.94729") :outer("550_1335114138.94729")
    .param pmc param_1151
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 217
    .lex "$_", param_1151
.annotate 'line', 218
    find_lex $P133, "$_"
    unless_null $P133, vivify_763
    new $P133, "Undef"
  vivify_763:
    find_lex $P134, "$code_type"
    unless_null $P134, vivify_764
    new $P134, "Undef"
  vivify_764:
    find_lex $P135, "$i"
    unless_null $P135, vivify_765
    new $P135, "Undef"
  vivify_765:
    set $I103, $P135
    find_lex $P1152, "@all_subs"
    unless_null $P1152, vivify_766
    $P1152 = root_new ['parrot';'ResizablePMCArray']
  vivify_766:
    set $P136, $P1152[$I103]
    unless_null $P136, vivify_767
    new $P136, "Undef"
  vivify_767:
    clone $P137, $P136
    setattribute $P133, $P134, "$!do", $P137
.annotate 'line', 217
    .return ($P137)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1179"  :anon :subid("21_1335114138.94729") :outer("22_1335114138.94729")
    .param pmc param_1181
    .param pmc param_1182
    .param pmc param_1183
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 266
    .lex "$orig", param_1181
    .lex "$clone", param_1182
    .lex "$code_obj", param_1183
.annotate 'line', 268
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    set $P118, param_1183
    unless_null $P118, vivify_813
    new $P118, "Undef"
  vivify_813:
    $P117."add_object"($P118)
.annotate 'line', 269
    find_lex $P116, "$fixups"
    unless_null $P116, vivify_814
    new $P116, "Undef"
  vivify_814:
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Op"]
.annotate 'line', 271
    find_lex $P121, "self"
    nqp_decontainerize $P122, $P121
    set $P123, param_1183
    unless_null $P123, vivify_815
    new $P123, "Undef"
  vivify_815:
    $P124 = $P122."get_ref"($P123)
.annotate 'line', 272
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    find_lex $P127, "$code_type"
    unless_null $P127, vivify_816
    new $P127, "Undef"
  vivify_816:
    $P128 = $P126."get_ref"($P127)
.annotate 'line', 274
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Op"]
.annotate 'line', 276
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Val"]
    find_lex $P141, "$past"
    unless_null $P141, vivify_817
    new $P141, "Undef"
  vivify_817:
    $P142 = $P140."new"($P141 :named("value"))
    $P143 = $P136."new"($P142, "clone PP" :named("pirop"))
.annotate 'line', 277
    find_lex $P144, "self"
    nqp_decontainerize $P145, $P144
    set $P146, param_1183
    unless_null $P146, vivify_818
    new $P146, "Undef"
  vivify_818:
    $P147 = $P145."get_ref"($P146)
    $P148 = $P132."new"($P143, $P147, "set_sub_code_object 0PP" :named("pirop"))
.annotate 'line', 274
    $P149 = $P120."new"($P124, $P128, "$!do", $P148, "setattribute vPPsP" :named("pirop"))
.annotate 'line', 269
    $P116."push"($P149)
.annotate 'line', 282
    find_lex $P116, "$past"
    unless_null $P116, vivify_819
    new $P116, "Undef"
  vivify_819:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1184, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1184, vivify_820
    $P1184 = root_new ['parrot';'Hash']
  vivify_820:
    set $P121, $P1184[$P117]
    unless_null $P121, vivify_821
    new $P121, "Undef"
  vivify_821:
    set $P122, param_1183
    unless_null $P122, vivify_822
    new $P122, "Undef"
  vivify_822:
    $P123 = $P121."push"($P122)
.annotate 'line', 266
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1172"  :anon :subid("20_1335114138.94729") :outer("22_1335114138.94729")
    .param pmc param_1174
    .param pmc param_1175
    .param pmc param_1176
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 261
    .lex "$orig", param_1174
    .lex "$clone", param_1175
    .lex "$code_obj", param_1176
.annotate 'line', 262
    find_lex $P116, "$past"
    unless_null $P116, vivify_824
    new $P116, "Undef"
  vivify_824:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1177, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1177, vivify_825
    $P1177 = root_new ['parrot';'Hash']
  vivify_825:
    set $P121, $P1177[$P117]
    unless_null $P121, vivify_826
    new $P121, "Undef"
  vivify_826:
    set $P122, param_1176
    unless_null $P122, vivify_827
    new $P122, "Undef"
  vivify_827:
    $P123 = $P121."push"($P122)
.annotate 'line', 261
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1187"  :anon :subid("552_1335114138.94729") :outer("22_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 295
    new $P112, "Undef"
    set $P1189, $P112
    .lex "$code_obj", $P1189
.annotate 'line', 299
    new $P113, "Undef"
    set $P1190, $P113
    .lex "$slot", $P1190
.annotate 'line', 295
    find_lex $P114, "$code_type"
    unless_null $P114, vivify_836
    new $P114, "Undef"
  vivify_836:
    repr_instance_of $P115, $P114
    set $P1189, $P115
.annotate 'line', 296
    set $P114, $P1189
    unless_null $P114, vivify_837
    new $P114, "Undef"
  vivify_837:
    find_lex $P115, "$code_type"
    unless_null $P115, vivify_838
    new $P115, "Undef"
  vivify_838:
    find_lex $P116, "$dummy"
    unless_null $P116, vivify_839
    new $P116, "Undef"
  vivify_839:
    setattribute $P114, $P115, "$!do", $P116
.annotate 'line', 297
    find_lex $P114, "$is_dispatcher"
    unless_null $P114, vivify_840
    new $P114, "Undef"
  vivify_840:
    unless $P114, if_1191_end
    set $P115, $P1189
    unless_null $P115, vivify_841
    new $P115, "Undef"
  vivify_841:
    find_lex $P116, "$code_type"
    unless_null $P116, vivify_842
    new $P116, "Undef"
  vivify_842:
    new $P117, "ResizablePMCArray"
    setattribute $P115, $P116, "$!dispatchees", $P117
  if_1191_end:
.annotate 'line', 299
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    set $P116, $P1189
    unless_null $P116, vivify_843
    new $P116, "Undef"
  vivify_843:
    $P117 = $P115."add_object"($P116)
    set $P1190, $P117
.annotate 'line', 302
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
.annotate 'line', 303
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Op"]
.annotate 'line', 305
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Val"]
    find_lex $P124, "$past"
    unless_null $P124, vivify_844
    new $P124, "Undef"
  vivify_844:
    $P125 = $P123."new"($P124 :named("value"))
.annotate 'line', 306
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    set $P128, $P1189
    unless_null $P128, vivify_845
    new $P128, "Undef"
  vivify_845:
    $P129 = $P127."get_ref"($P128)
    $P130 = $P119."new"($P125, $P129, "set_sub_code_object vPP" :named("pirop"))
.annotate 'line', 302
    $P115."add_fixup_task"($P130 :named("deserialize_past"))
.annotate 'line', 310
    find_lex $P114, "$fixups"
    unless_null $P114, vivify_846
    new $P114, "Undef"
  vivify_846:
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
.annotate 'line', 312
    find_lex $P119, "self"
    nqp_decontainerize $P120, $P119
    set $P121, $P1189
    unless_null $P121, vivify_847
    new $P121, "Undef"
  vivify_847:
    $P122 = $P120."get_ref"($P121)
.annotate 'line', 313
    find_lex $P123, "self"
    nqp_decontainerize $P124, $P123
    find_lex $P125, "$code_type"
    unless_null $P125, vivify_848
    new $P125, "Undef"
  vivify_848:
    $P126 = $P124."get_ref"($P125)
.annotate 'line', 315
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P130, $P129["Val"]
    find_lex $P131, "$past"
    unless_null $P131, vivify_849
    new $P131, "Undef"
  vivify_849:
    $P132 = $P130."new"($P131 :named("value"))
    $P133 = $P118."new"($P122, $P126, "$!do", $P132, "setattribute vPPsP" :named("pirop"))
.annotate 'line', 310
    $P114."push"($P133)
.annotate 'line', 317
    find_lex $P114, "$fixups"
    unless_null $P114, vivify_850
    new $P114, "Undef"
  vivify_850:
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
.annotate 'line', 319
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "PAST"
    get_who $P121, $P120
    set $P122, $P121["Val"]
    find_lex $P123, "$past"
    unless_null $P123, vivify_851
    new $P123, "Undef"
  vivify_851:
    $P124 = $P122."new"($P123 :named("value"))
.annotate 'line', 320
    find_lex $P125, "self"
    nqp_decontainerize $P126, $P125
    set $P127, $P1189
    unless_null $P127, vivify_852
    new $P127, "Undef"
  vivify_852:
    $P128 = $P126."get_ref"($P127)
    $P129 = $P118."new"($P124, $P128, "set_sub_code_object vPP" :named("pirop"))
.annotate 'line', 317
    $P114."push"($P129)
.annotate 'line', 324
    set $P114, $P1189
    unless_null $P114, vivify_853
    new $P114, "Undef"
  vivify_853:
    new $P115, "ResizablePMCArray"
    push $P115, $P114
    find_lex $P116, "$past"
    unless_null $P116, vivify_854
    new $P116, "Undef"
  vivify_854:
    $P117 = $P116."subid"()
    find_lex $P118, "self"
    nqp_decontainerize $P119, $P118
    nqp_get_sc_object $P120, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1192, $P119, $P120, "%!code_objects_to_fix_up", 9
    unless_null $P1192, vivify_855
    $P1192 = root_new ['parrot';'Hash']
    repr_bind_attr_obj $P119, $P120, "%!code_objects_to_fix_up", 9, $P1192
  vivify_855:
    set $P1192[$P117], $P115
.annotate 'line', 293
    set $P114, $P1189
    unless_null $P114, vivify_856
    new $P114, "Undef"
  vivify_856:
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "pkg_create_mo" :anon :subid("23_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1196
    .param pmc param_1197
    .param pmc param_1198 :optional :named("name")
    .param int has_param_1198 :opt_flag
    .param pmc param_1199 :optional :named("repr")
    .param int has_param_1199 :opt_flag
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 342
    new $P1195, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1195, control_1194
    push_eh $P1195
    .lex "self", param_1196
    .lex "$how", param_1197
    if has_param_1198, optparam_857
    new $P104, "Undef"
    set param_1198, $P104
  optparam_857:
    .lex "$name", param_1198
    if has_param_1199, optparam_858
    new $P105, "Undef"
    set param_1199, $P105
  optparam_858:
    .lex "$repr", param_1199
.annotate 'line', 344
    $P1201 = root_new ['parrot';'Hash']
    set $P1200, $P1201
    .lex "%args", $P1200
.annotate 'line', 347
    new $P106, "Undef"
    set $P1202, $P106
    .lex "$mo", $P1202
.annotate 'line', 348
    new $P107, "Undef"
    set $P1203, $P107
    .lex "$slot", $P1203
.annotate 'line', 342
    set $P1204, $P1200
    unless_null $P1204, vivify_859
    $P1204 = root_new ['parrot';'Hash']
  vivify_859:
.annotate 'line', 345
    set $P108, param_1198
    unless_null $P108, vivify_860
    new $P108, "Undef"
  vivify_860:
    defined $I100, $P108
    unless $I100, if_1205_end
    set $P109, param_1198
    unless_null $P109, vivify_861
    new $P109, "Undef"
  vivify_861:
    set $P1206, $P1200
    unless_null $P1206, vivify_862
    $P1206 = root_new ['parrot';'Hash']
    set $P1200, $P1206
  vivify_862:
    set $P1206["name"], $P109
  if_1205_end:
.annotate 'line', 346
    set $P108, param_1199
    unless_null $P108, vivify_863
    new $P108, "Undef"
  vivify_863:
    defined $I100, $P108
    unless $I100, if_1207_end
    set $P109, param_1199
    unless_null $P109, vivify_864
    new $P109, "Undef"
  vivify_864:
    set $P1208, $P1200
    unless_null $P1208, vivify_865
    $P1208 = root_new ['parrot';'Hash']
    set $P1200, $P1208
  vivify_865:
    set $P1208["repr"], $P109
  if_1207_end:
.annotate 'line', 347
    set $P108, param_1197
    unless_null $P108, vivify_866
    new $P108, "Undef"
  vivify_866:
    set $P1209, $P1200
    unless_null $P1209, vivify_867
    $P1209 = root_new ['parrot';'Hash']
  vivify_867:
    $P109 = $P108."new_type"($P1209 :flat)
    set $P1202, $P109
.annotate 'line', 348
    set $P108, param_1196
    nqp_decontainerize $P109, $P108
    set $P110, $P1202
    unless_null $P110, vivify_868
    new $P110, "Undef"
  vivify_868:
    $P111 = $P109."add_object"($P110)
    set $P1203, $P111
.annotate 'line', 351
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P109, $P1202
    unless_null $P109, vivify_869
    new $P109, "Undef"
  vivify_869:
    setattribute $P108, 'payload', $P109
    throw $P108
.annotate 'line', 342
    .return ()
  control_1194:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_attribute" :anon :subid("24_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1211
    .param pmc param_1212
    .param pmc param_1213
    .param pmc param_1214
    .param pmc param_1215
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 359
    .lex "self", param_1211
    .lex "$obj", param_1212
    .lex "$meta_attr", param_1213
    .lex "%lit_args", param_1214
    .lex "%obj_args", param_1215
.annotate 'line', 360
    new $P104, "Undef"
    set $P1216, $P104
    .lex "$attr", $P1216
    set $P105, param_1213
    unless_null $P105, vivify_870
    new $P105, "Undef"
  vivify_870:
    set $P1217, param_1214
    unless_null $P1217, vivify_871
    $P1217 = root_new ['parrot';'Hash']
  vivify_871:
    set $P1218, param_1215
    unless_null $P1218, vivify_872
    $P1218 = root_new ['parrot';'Hash']
  vivify_872:
    $P106 = $P105."new"($P1217 :flat, $P1218 :flat)
    set $P1216, $P106
.annotate 'line', 361
    set $P105, param_1212
    unless_null $P105, vivify_873
    new $P105, "Undef"
  vivify_873:
    get_how $P106, $P105
    set $P107, param_1212
    unless_null $P107, vivify_874
    new $P107, "Undef"
  vivify_874:
    set $P108, $P1216
    unless_null $P108, vivify_875
    new $P108, "Undef"
  vivify_875:
    $P109 = $P106."add_attribute"($P107, $P108)
.annotate 'line', 359
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_method" :anon :subid("25_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1220
    .param pmc param_1221
    .param pmc param_1222
    .param pmc param_1223
    .param pmc param_1224
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 365
    .lex "self", param_1220
    .lex "$obj", param_1221
    .lex "$meta_method_name", param_1222
    .lex "$name", param_1223
    .lex "$code", param_1224
.annotate 'line', 366
    set $P104, param_1221
    unless_null $P104, vivify_876
    new $P104, "Undef"
  vivify_876:
    get_how $P105, $P104
    set $P106, param_1221
    unless_null $P106, vivify_877
    new $P106, "Undef"
  vivify_877:
    set $P107, param_1223
    unless_null $P107, vivify_878
    new $P107, "Undef"
  vivify_878:
    set $P108, param_1224
    unless_null $P108, vivify_879
    new $P108, "Undef"
  vivify_879:
    set $P109, param_1222
    unless_null $P109, vivify_880
    new $P109, "Undef"
  vivify_880:
    set $S100, $P109
    $P110 = $P105.$S100($P106, $P107, $P108)
.annotate 'line', 365
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "set_routine_signature" :anon :subid("26_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1226
    .param pmc param_1227
    .param pmc param_1228
    .param pmc param_1229
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 370
    .lex "self", param_1226
    .lex "$code_obj", param_1227
    .lex "$types", param_1228
    .lex "$definednesses", param_1229
.annotate 'line', 371
    new $P104, "Undef"
    set $P1230, $P104
    .lex "$sig_type", $P1230
.annotate 'line', 372
    new $P105, "Undef"
    set $P1231, $P105
    .lex "$code_type", $P1231
.annotate 'line', 373
    new $P106, "Undef"
    set $P1232, $P106
    .lex "$sig_obj", $P1232
.annotate 'line', 371
    set $P107, param_1226
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPSignature"
    $P110 = $P108."find_sym"($P109)
    set $P1230, $P110
.annotate 'line', 372
    set $P107, param_1226
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPRoutine"
    $P110 = $P108."find_sym"($P109)
    set $P1231, $P110
.annotate 'line', 373
    set $P107, $P1230
    unless_null $P107, vivify_881
    new $P107, "Undef"
  vivify_881:
    repr_instance_of $P108, $P107
    set $P1232, $P108
.annotate 'line', 374
    set $P107, $P1232
    unless_null $P107, vivify_882
    new $P107, "Undef"
  vivify_882:
    set $P108, $P1230
    unless_null $P108, vivify_883
    new $P108, "Undef"
  vivify_883:
    set $P109, param_1228
    unless_null $P109, vivify_884
    new $P109, "Undef"
  vivify_884:
    setattribute $P107, $P108, "$!types", $P109
.annotate 'line', 375
    set $P107, $P1232
    unless_null $P107, vivify_885
    new $P107, "Undef"
  vivify_885:
    set $P108, $P1230
    unless_null $P108, vivify_886
    new $P108, "Undef"
  vivify_886:
    set $P109, param_1229
    unless_null $P109, vivify_887
    new $P109, "Undef"
  vivify_887:
    setattribute $P107, $P108, "$!definednesses", $P109
.annotate 'line', 376
    set $P107, param_1227
    unless_null $P107, vivify_888
    new $P107, "Undef"
  vivify_888:
    set $P108, $P1231
    unless_null $P108, vivify_889
    new $P108, "Undef"
  vivify_889:
    set $P109, $P1232
    unless_null $P109, vivify_890
    new $P109, "Undef"
  vivify_890:
    setattribute $P107, $P108, "$!signature", $P109
.annotate 'line', 370
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "set_routine_signature_on_parrot_sub" :anon :subid("27_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1234
    .param pmc param_1235
    .param pmc param_1236
    .param pmc param_1237
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 380
    .const 'Sub' $P1243 = "553_1335114138.94729" 
    capture_lex $P1243
    .lex "self", param_1234
    .lex "$routine", param_1235
    .lex "$types", param_1236
    .lex "$definednesses", param_1237
.annotate 'line', 382
    new $P104, "Undef"
    set $P1238, $P104
    .lex "$sig_type", $P1238
.annotate 'line', 383
    new $P105, "Undef"
    set $P1239, $P105
    .lex "$sig_obj", $P1239
.annotate 'line', 386
    new $P106, "Undef"
    set $P1240, $P106
    .lex "$slot", $P1240
.annotate 'line', 382
    set $P107, param_1234
    nqp_decontainerize $P108, $P107
    new $P109, "ResizablePMCArray"
    push $P109, "NQPSignature"
    $P110 = $P108."find_sym"($P109)
    set $P1238, $P110
.annotate 'line', 383
    set $P107, $P1238
    unless_null $P107, vivify_891
    new $P107, "Undef"
  vivify_891:
    repr_instance_of $P108, $P107
    set $P1239, $P108
.annotate 'line', 384
    set $P107, $P1239
    unless_null $P107, vivify_892
    new $P107, "Undef"
  vivify_892:
    set $P108, $P1238
    unless_null $P108, vivify_893
    new $P108, "Undef"
  vivify_893:
    set $P109, param_1236
    unless_null $P109, vivify_894
    new $P109, "Undef"
  vivify_894:
    setattribute $P107, $P108, "$!types", $P109
.annotate 'line', 385
    set $P107, $P1239
    unless_null $P107, vivify_895
    new $P107, "Undef"
  vivify_895:
    set $P108, $P1238
    unless_null $P108, vivify_896
    new $P108, "Undef"
  vivify_896:
    set $P109, param_1237
    unless_null $P109, vivify_897
    new $P109, "Undef"
  vivify_897:
    setattribute $P107, $P108, "$!definednesses", $P109
.annotate 'line', 386
    set $P107, param_1234
    nqp_decontainerize $P108, $P107
    set $P109, $P1239
    unless_null $P109, vivify_898
    new $P109, "Undef"
  vivify_898:
    $P110 = $P108."add_object"($P109)
    set $P1240, $P110
.annotate 'line', 388
    set $P108, param_1234
    nqp_decontainerize $P109, $P108
    $P110 = $P109."is_precompilation_mode"()
    if $P110, if_1241
.annotate 'line', 395
    .const 'Sub' $P1243 = "553_1335114138.94729" 
    capture_lex $P1243
    $P112 = $P1243()
    set $P107, $P112
.annotate 'line', 388
    goto if_1241_end
  if_1241:
.annotate 'line', 389
    set $P111, param_1234
    nqp_decontainerize $P112, $P111
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Op"]
.annotate 'line', 391
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P119, $P118
    set $P120, $P119["Val"]
    set $P121, param_1235
    unless_null $P121, vivify_908
    new $P121, "Undef"
  vivify_908:
    $P122 = $P120."new"($P121 :named("value"))
.annotate 'line', 392
    set $P123, param_1234
    nqp_decontainerize $P124, $P123
    set $P125, $P1239
    unless_null $P125, vivify_909
    new $P125, "Undef"
  vivify_909:
    $P126 = $P124."get_ref"($P125)
    $P127 = $P116."new"($P122, $P126, "set_sub_multisig vPP" :named("pirop"))
.annotate 'line', 389
    $P128 = $P112."add_fixup_task"($P127 :named("deserialize_past"))
.annotate 'line', 388
    set $P107, $P128
  if_1241_end:
.annotate 'line', 380
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1242"  :anon :subid("553_1335114138.94729") :outer("27_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 398
    new $P111, "Undef"
    set $P1244, $P111
    .lex "$fixup", $P1244
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
    find_lex $P116, "self"
    nqp_decontainerize $P117, $P116
    find_lex $P118, "$sig_obj"
    unless_null $P118, vivify_899
    new $P118, "Undef"
  vivify_899:
    $P119 = $P117."get_ref"($P118)
    $P120 = $P115."new"($P119, "set_sub_multisig vPP" :named("pirop"))
    set $P1244, $P120
.annotate 'line', 399
    find_lex $P1246, "$routine"
    unless_null $P1246, vivify_900
    $P1246 = root_new ['parrot';'Hash']
  vivify_900:
    set $P112, $P1246["compile_time_dummy"]
    unless_null $P112, vivify_901
    new $P112, "Undef"
  vivify_901:
    defined $I100, $P112
    if $I100, if_1245
.annotate 'line', 403
    set $P113, $P1244
    unless_null $P113, vivify_902
    new $P113, "Undef"
  vivify_902:
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Val"]
    find_lex $P118, "$routine"
    unless_null $P118, vivify_903
    new $P118, "Undef"
  vivify_903:
    $P119 = $P117."new"($P118 :named("value"))
    $P113."unshift"($P119)
.annotate 'line', 402
    goto if_1245_end
  if_1245:
.annotate 'line', 400
    set $P113, $P1244
    unless_null $P113, vivify_904
    new $P113, "Undef"
  vivify_904:
    find_lex $P114, "self"
    nqp_decontainerize $P115, $P114
    find_lex $P1247, "$routine"
    unless_null $P1247, vivify_905
    $P1247 = root_new ['parrot';'Hash']
  vivify_905:
    set $P116, $P1247["compile_time_dummy"]
    unless_null $P116, vivify_906
    new $P116, "Undef"
  vivify_906:
    $P117 = $P115."get_slot_past_for_object"($P116)
    $P113."unshift"($P117)
  if_1245_end:
.annotate 'line', 405
    find_lex $P112, "self"
    nqp_decontainerize $P113, $P112
    set $P114, $P1244
    unless_null $P114, vivify_907
    new $P114, "Undef"
  vivify_907:
    $P115 = $P113."add_fixup_task"($P114 :named("fixup_past"))
.annotate 'line', 395
    .return ($P115)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_set_body_block" :anon :subid("28_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1249
    .param pmc param_1250
    .param pmc param_1251
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 410
    .lex "self", param_1249
    .lex "$obj", param_1250
    .lex "$body_past", param_1251
.annotate 'line', 412
    new $P104, "Undef"
    set $P1252, $P104
    .lex "$body_code_obj", $P1252
    set $P105, param_1249
    nqp_decontainerize $P106, $P105
    set $P107, param_1251
    unless_null $P107, vivify_910
    new $P107, "Undef"
  vivify_910:
    set $P108, param_1251
    unless_null $P108, vivify_911
    new $P108, "Undef"
  vivify_911:
    $P109 = $P108."name"()
    $P110 = $P106."create_code"($P107, $P109, 0)
    set $P1252, $P110
.annotate 'line', 415
    set $P105, param_1250
    unless_null $P105, vivify_912
    new $P105, "Undef"
  vivify_912:
    get_how $P106, $P105
    set $P107, param_1250
    unless_null $P107, vivify_913
    new $P107, "Undef"
  vivify_913:
    set $P108, $P1252
    unless_null $P108, vivify_914
    new $P108, "Undef"
  vivify_914:
    $P109 = $P106."set_body_block"($P107, $P108)
.annotate 'line', 410
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parent_or_role" :anon :subid("29_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1254
    .param pmc param_1255
    .param pmc param_1256
    .param pmc param_1257
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 419
    .lex "self", param_1254
    .lex "$obj", param_1255
    .lex "$meta_method_name", param_1256
    .lex "$to_add", param_1257
.annotate 'line', 420
    set $P104, param_1255
    unless_null $P104, vivify_915
    new $P104, "Undef"
  vivify_915:
    get_how $P105, $P104
    set $P106, param_1255
    unless_null $P106, vivify_916
    new $P106, "Undef"
  vivify_916:
    set $P107, param_1257
    unless_null $P107, vivify_917
    new $P107, "Undef"
  vivify_917:
    set $P108, param_1256
    unless_null $P108, vivify_918
    new $P108, "Undef"
  vivify_918:
    set $S100, $P108
    $P109 = $P105.$S100($P106, $P107)
.annotate 'line', 419
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_add_parrot_vtable_handler_mapping" :anon :subid("30_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1259
    .param pmc param_1260
    .param pmc param_1261
    .param pmc param_1262
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 423
    .lex "self", param_1259
    .lex "$obj", param_1260
    .lex "$name", param_1261
    .lex "$att_name", param_1262
.annotate 'line', 424
    set $P104, param_1260
    unless_null $P104, vivify_919
    new $P104, "Undef"
  vivify_919:
    get_how $P105, $P104
    set $P106, param_1260
    unless_null $P106, vivify_920
    new $P106, "Undef"
  vivify_920:
    set $P107, param_1261
    unless_null $P107, vivify_921
    new $P107, "Undef"
  vivify_921:
    set $P108, param_1262
    unless_null $P108, vivify_922
    new $P108, "Undef"
  vivify_922:
    $P109 = $P105."add_parrot_vtable_handler_mapping"($P106, $P107, $P108)
.annotate 'line', 423
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "pkg_compose" :anon :subid("31_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1264
    .param pmc param_1265
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 428
    .lex "self", param_1264
    .lex "$obj", param_1265
.annotate 'line', 429
    set $P104, param_1265
    unless_null $P104, vivify_923
    new $P104, "Undef"
  vivify_923:
    get_how $P105, $P104
    set $P106, param_1265
    unless_null $P106, vivify_924
    new $P106, "Undef"
  vivify_924:
    $P107 = $P105."compose"($P106)
.annotate 'line', 428
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "run_begin_block" :anon :subid("32_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1269
    .param pmc param_1270
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 433
    .const 'Sub' $P1280 = "554_1335114138.94729" 
    capture_lex $P1280
    new $P1268, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1268, control_1267
    push_eh $P1268
    .lex "self", param_1269
    .lex "$past", param_1270
.annotate 'line', 435
    new $P104, "Undef"
    set $P1271, $P104
    .lex "$wrapper", $P1271
.annotate 'line', 439
    $P1273 = root_new ['parrot';'Hash']
    set $P1272, $P1273
    .lex "%seen", $P1272
.annotate 'line', 440
    new $P105, "Undef"
    set $P1274, $P105
    .lex "$i", $P1274
.annotate 'line', 458
    new $P106, "Undef"
    set $P1275, $P106
    .lex "$code", $P1275
.annotate 'line', 459
    new $P107, "Undef"
    set $P1276, $P107
    .lex "$old_global", $P1276
.annotate 'line', 435
    get_hll_global $P108, "GLOBAL"
    nqp_get_package_through_who $P109, $P108, "PAST"
    get_who $P110, $P109
    set $P111, $P110["Block"]
.annotate 'line', 436
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
    $P116 = $P115."new"()
    set $P117, param_1270
    unless_null $P117, vivify_925
    new $P117, "Undef"
  vivify_925:
    $P118 = $P111."new"($P116, $P117)
.annotate 'line', 435
    set $P1271, $P118
.annotate 'line', 433
    set $P1277, $P1272
    unless_null $P1277, vivify_926
    $P1277 = root_new ['parrot';'Hash']
  vivify_926:
.annotate 'line', 440
    set $P108, param_1269
    nqp_decontainerize $P109, $P108
    nqp_get_sc_object $P110, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1278, $P109, $P110, "@!BLOCKS", 8
    unless_null $P1278, vivify_927
    $P1278 = root_new ['parrot';'ResizablePMCArray']
  vivify_927:
    set $N100, $P1278
    new $P111, 'Float'
    set $P111, $N100
    set $P1274, $P111
.annotate 'line', 441
    new $P110, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P110, loop1303_handler
    push_eh $P110
  loop1303_test:
    set $P108, $P1274
    unless_null $P108, vivify_928
    new $P108, "Undef"
  vivify_928:
    set $N100, $P108
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1303_done
  loop1303_redo:
    .const 'Sub' $P1280 = "554_1335114138.94729" 
    capture_lex $P1280
    $P1280()
  loop1303_next:
    goto loop1303_test
  loop1303_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P111, exception, 'type'
    eq $P111, .CONTROL_LOOP_NEXT, loop1303_next
    eq $P111, .CONTROL_LOOP_REDO, loop1303_redo
  loop1303_done:
    pop_eh 
.annotate 'line', 458
    set $P108, param_1269
    nqp_decontainerize $P109, $P108
    set $P110, $P1271
    unless_null $P110, vivify_946
    new $P110, "Undef"
  vivify_946:
    $P111 = $P109."create_code"($P110, "BEGIN block", 0)
    set $P1275, $P111
.annotate 'line', 459
    new $P108, "ResizablePMCArray"
    get_hll_global $P109, $P108, "GLOBAL"
    set $P1276, $P109
.annotate 'line', 460
    new $P108, "ResizablePMCArray"
    find_dynamic_lex $P111, "$*GLOBALish"
    unless_null $P111, vivify_947
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$GLOBALish"]
    unless_null $P111, vivify_948
    die "Contextual $*GLOBALish not found"
  vivify_948:
  vivify_947:
    set_hll_global $P108, "GLOBAL", $P111
.annotate 'line', 461
    set $P108, $P1275
    unless_null $P108, vivify_949
    new $P108, "Undef"
  vivify_949:
    $P108()
.annotate 'line', 462
    new $P108, "ResizablePMCArray"
    set $P109, $P1276
    unless_null $P109, vivify_950
    new $P109, "Undef"
  vivify_950:
    set_hll_global $P108, "GLOBAL", $P109
.annotate 'line', 466
    set $P108, $P1271
    unless_null $P108, vivify_951
    new $P108, "Undef"
  vivify_951:
    $P108."shift"()
.annotate 'line', 467
    new $P108, "Exception"
    set $P108['type'], .CONTROL_RETURN
    set $P109, $P1271
    unless_null $P109, vivify_952
    new $P109, "Undef"
  vivify_952:
    setattribute $P108, 'payload', $P109
    throw $P108
.annotate 'line', 433
    .return ()
  control_1267:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P108, exception, "payload"
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1279"  :anon :subid("554_1335114138.94729") :outer("32_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 441
    .const 'Sub' $P1286 = "555_1335114138.94729" 
    capture_lex $P1286
.annotate 'line', 443
    $P1282 = root_new ['parrot';'Hash']
    set $P1281, $P1282
    .lex "%symbols", $P1281
.annotate 'line', 442
    find_lex $P109, "$i"
    unless_null $P109, vivify_929
    new $P109, "Undef"
  vivify_929:
    sub $P110, $P109, 1
    store_lex "$i", $P110
.annotate 'line', 443
    find_lex $P109, "$i"
    unless_null $P109, vivify_930
    new $P109, "Undef"
  vivify_930:
    set $I101, $P109
    find_lex $P110, "self"
    nqp_decontainerize $P111, $P110
    nqp_get_sc_object $P112, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1283, $P111, $P112, "@!BLOCKS", 8
    unless_null $P1283, vivify_931
    $P1283 = root_new ['parrot';'ResizablePMCArray']
  vivify_931:
    set $P113, $P1283[$I101]
    unless_null $P113, vivify_932
    new $P113, "Undef"
  vivify_932:
    $P114 = $P113."symtable"()
    set $P1281, $P114
.annotate 'line', 444
    set $P1284, $P1281
    unless_null $P1284, vivify_933
    $P1284 = root_new ['parrot';'Hash']
  vivify_933:
    defined $I101, $P1284
    unless $I101, for_undef_934
    iter $P109, $P1284
    new $P112, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P112, loop1302_handler
    push_eh $P112
  loop1302_test:
    unless $P109, loop1302_done
    shift $P110, $P109
  loop1302_redo:
    .const 'Sub' $P1286 = "555_1335114138.94729" 
    capture_lex $P1286
    $P1286($P110)
  loop1302_next:
    goto loop1302_test
  loop1302_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P113, exception, 'type'
    eq $P113, .CONTROL_LOOP_NEXT, loop1302_next
    eq $P113, .CONTROL_LOOP_REDO, loop1302_redo
  loop1302_done:
    pop_eh 
  for_undef_934:
.annotate 'line', 441
    .return ($P109)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1285"  :anon :subid("555_1335114138.94729") :outer("554_1335114138.94729")
    .param pmc param_1287
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 444
    .const 'Sub' $P1292 = "556_1335114138.94729" 
    capture_lex $P1292
    .lex "$_", param_1287
.annotate 'line', 445
    find_lex $P113, "$_"
    unless_null $P113, vivify_935
    new $P113, "Undef"
  vivify_935:
    $P114 = $P113."key"()
    find_lex $P1290, "%seen"
    unless_null $P1290, vivify_936
    $P1290 = root_new ['parrot';'Hash']
  vivify_936:
    set $P115, $P1290[$P114]
    unless_null $P115, vivify_937
    new $P115, "Undef"
  vivify_937:
    isfalse $I102, $P115
    if $I102, if_1289
    new $P112, 'Integer'
    set $P112, $I102
    goto if_1289_end
  if_1289:
    find_lex $P116, "$_"
    unless_null $P116, vivify_938
    new $P116, "Undef"
  vivify_938:
    $P117 = $P116."value"()
    exists $I103, $P117["value"]
    new $P112, 'Integer'
    set $P112, $I103
  if_1289_end:
    if $P112, if_1288
    set $P111, $P112
    goto if_1288_end
  if_1288:
.annotate 'line', 446
    .const 'Sub' $P1292 = "556_1335114138.94729" 
    capture_lex $P1292
    $P1292()
.annotate 'line', 452
    new $P118, "Float"
    assign $P118, 1
    find_lex $P119, "$_"
    unless_null $P119, vivify_944
    new $P119, "Undef"
  vivify_944:
    $P120 = $P119."key"()
    find_lex $P1301, "%seen"
    unless_null $P1301, vivify_945
    $P1301 = root_new ['parrot';'Hash']
    store_lex "%seen", $P1301
  vivify_945:
    set $P1301[$P120], $P118
.annotate 'line', 445
    set $P111, $P118
  if_1288_end:
.annotate 'line', 444
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1291"  :anon :subid("556_1335114138.94729") :outer("555_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 446
    new $P1296, 'ExceptionHandler'
    set_label $P1296, control_1295
    $P1296."handle_types_except"(.CONTROL_ALL)
    push_eh $P1296
.annotate 'line', 447
    new $P118, "Float"
    assign $P118, 0
    set $I104, $P118
    find_lex $P1293, "$wrapper"
    unless_null $P1293, vivify_939
    $P1293 = root_new ['parrot';'ResizablePMCArray']
  vivify_939:
    set $P119, $P1293[$I104]
    unless_null $P119, vivify_940
    new $P119, "Undef"
  vivify_940:
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Var"]
.annotate 'line', 448
    find_lex $P124, "$_"
    unless_null $P124, vivify_941
    new $P124, "Undef"
  vivify_941:
    $P125 = $P124."key"()
.annotate 'line', 449
    find_lex $P126, "self"
    nqp_decontainerize $P127, $P126
    find_lex $P128, "$_"
    unless_null $P128, vivify_942
    new $P128, "Undef"
  vivify_942:
    $P129 = $P128."value"()
    set $P130, $P129["value"]
    unless_null $P130, vivify_943
    new $P130, "Undef"
  vivify_943:
    $P131 = $P127."get_ref"($P130)
.annotate 'line', 447
    $P132 = $P123."new"($P125 :named("name"), "lexical_6model" :named("scope"), 1 :named("isdecl"), $P131 :named("viviself"))
    $P133 = $P119."push"($P132)
.annotate 'line', 446
    pop_eh 
    goto skip_handler_1294
  control_1295:
    peek_exception $P1297
    .local pmc exception 
    .get_results (exception) 
    new $P1299, 'Integer'
    set $P1299, 1
    set exception["handled"], $P1299
    set $I1300, exception["handled"]
    eq $I1300, 1, handled_1298
    rethrow exception
  handled_1298:
    finalize $P1297
    .return (exception)
  skip_handler_1294:
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "set_nqp_language_defaults" :anon :subid("33_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1305
    .param pmc param_1306
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 471
    .const 'Sub' $P1313 = "557_1335114138.94729" 
    capture_lex $P1313
    .lex "self", param_1305
    .lex "$block", param_1306
.annotate 'line', 473
    $P1308 = root_new ['parrot';'ResizablePMCArray']
    set $P1307, $P1308
    .lex "@loadlibs", $P1307
    new $P104, "ResizablePMCArray"
    push $P104, "nqp_group"
    push $P104, "nqp_ops"
    push $P104, "nqp_bigint_ops"
    push $P104, "trans_ops"
    push $P104, "io_ops"
    set $P1307, $P104
.annotate 'line', 474
    find_dynamic_lex $P106, "%*COMPILING"
    unless_null $P106, vivify_953
    get_hll_global $P104, "GLOBAL"
    get_who $P105, $P104
    set $P106, $P105["%COMPILING"]
    unless_null $P106, vivify_954
    die "Contextual %*COMPILING not found"
  vivify_954:
  vivify_953:
    set $P1310, $P106["%?OPTIONS"]
    unless_null $P1310, vivify_955
    $P1310 = root_new ['parrot';'Hash']
  vivify_955:
    set $P107, $P1310["vmlibs"]
    unless_null $P107, vivify_956
    new $P107, "Undef"
  vivify_956:
    unless $P107, if_1309_end
.annotate 'line', 475
    find_dynamic_lex $P111, "%*COMPILING"
    unless_null $P111, vivify_957
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["%COMPILING"]
    unless_null $P111, vivify_958
    die "Contextual %*COMPILING not found"
  vivify_958:
  vivify_957:
    set $P1311, $P111["%?OPTIONS"]
    unless_null $P1311, vivify_959
    $P1311 = root_new ['parrot';'Hash']
  vivify_959:
    set $P112, $P1311["vmlibs"]
    unless_null $P112, vivify_960
    new $P112, "Undef"
  vivify_960:
    set $S100, $P112
    split $P113, ",", $S100
    defined $I100, $P113
    unless $I100, for_undef_961
    iter $P108, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1316_handler
    push_eh $P115
  loop1316_test:
    unless $P108, loop1316_done
    shift $P114, $P108
  loop1316_redo:
    .const 'Sub' $P1313 = "557_1335114138.94729" 
    capture_lex $P1313
    $P1313($P114)
  loop1316_next:
    goto loop1316_test
  loop1316_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P117, exception, 'type'
    eq $P117, .CONTROL_LOOP_NEXT, loop1316_next
    eq $P117, .CONTROL_LOOP_REDO, loop1316_redo
  loop1316_done:
    pop_eh 
  for_undef_961:
  if_1309_end:
.annotate 'line', 479
    set $P104, param_1306
    unless_null $P104, vivify_964
    new $P104, "Undef"
  vivify_964:
    set $P1317, $P1307
    unless_null $P1317, vivify_965
    $P1317 = root_new ['parrot';'ResizablePMCArray']
  vivify_965:
    $P104."loadlibs"($P1317 :flat)
.annotate 'line', 482
    set $P104, param_1306
    unless_null $P104, vivify_966
    new $P104, "Undef"
  vivify_966:
    $P105 = $P104."hll"("nqp")
.annotate 'line', 471
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1312"  :anon :subid("557_1335114138.94729") :outer("33_1335114138.94729")
    .param pmc param_1314
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 475
    .lex "$_", param_1314
.annotate 'line', 476
    find_lex $P1315, "@loadlibs"
    unless_null $P1315, vivify_962
    $P1315 = root_new ['parrot';'ResizablePMCArray']
  vivify_962:
    find_lex $P115, "$_"
    unless_null $P115, vivify_963
    new $P115, "Undef"
  vivify_963:
    $P116 = $P1315."push"($P115)
.annotate 'line', 475
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "to_past" :anon :subid("34_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1321
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 487
    .const 'Sub' $P1336 = "561_1335114138.94729" 
    capture_lex $P1336
    .const 'Sub' $P1324 = "558_1335114138.94729" 
    capture_lex $P1324
    new $P1320, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1320, control_1319
    push_eh $P1320
    .lex "self", param_1321
.annotate 'line', 488
    set $P105, param_1321
    nqp_decontainerize $P106, $P105
    $P107 = $P106."is_precompilation_mode"()
    if $P107, if_1322
.annotate 'line', 521
    .const 'Sub' $P1336 = "561_1335114138.94729" 
    capture_lex $P1336
    $P112 = $P1336()
    set $P104, $P112
.annotate 'line', 488
    goto if_1322_end
  if_1322:
    .const 'Sub' $P1324 = "558_1335114138.94729" 
    capture_lex $P1324
    $P110 = $P1324()
    set $P104, $P110
  if_1322_end:
.annotate 'line', 487
    .return ($P104)
  control_1319:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1335"  :anon :subid("561_1335114138.94729") :outer("34_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 521
    .const 'Sub' $P1343 = "563_1335114138.94729" 
    capture_lex $P1343
    .const 'Sub' $P1339 = "562_1335114138.94729" 
    capture_lex $P1339
.annotate 'line', 522
    new $P111, "Undef"
    set $P1337, $P111
    .lex "$tasks", $P1337
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Stmts"]
    $P116 = $P115."new"()
    set $P1337, $P116
.annotate 'line', 523
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    $P115 = $P114."load_dependency_tasks"()
    defined $I100, $P115
    unless $I100, for_undef_967
    iter $P112, $P115
    new $P117, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P117, loop1341_handler
    push_eh $P117
  loop1341_test:
    unless $P112, loop1341_done
    shift $P116, $P112
  loop1341_redo:
    .const 'Sub' $P1339 = "562_1335114138.94729" 
    capture_lex $P1339
    $P1339($P116)
  loop1341_next:
    goto loop1341_test
  loop1341_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P118, exception, 'type'
    eq $P118, .CONTROL_LOOP_NEXT, loop1341_next
    eq $P118, .CONTROL_LOOP_REDO, loop1341_redo
  loop1341_done:
    pop_eh 
  for_undef_967:
.annotate 'line', 526
    find_lex $P113, "self"
    nqp_decontainerize $P114, $P113
    $P115 = $P114."fixup_tasks"()
    defined $I100, $P115
    unless $I100, for_undef_970
    iter $P112, $P115
    new $P117, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P117, loop1345_handler
    push_eh $P117
  loop1345_test:
    unless $P112, loop1345_done
    shift $P116, $P112
  loop1345_redo:
    .const 'Sub' $P1343 = "563_1335114138.94729" 
    capture_lex $P1343
    $P1343($P116)
  loop1345_next:
    goto loop1345_test
  loop1345_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P118, exception, 'type'
    eq $P118, .CONTROL_LOOP_NEXT, loop1345_next
    eq $P118, .CONTROL_LOOP_REDO, loop1345_redo
  loop1345_done:
    pop_eh 
  for_undef_970:
.annotate 'line', 529
    new $P112, "Exception"
    set $P112['type'], .CONTROL_RETURN
    set $P113, $P1337
    unless_null $P113, vivify_973
    new $P113, "Undef"
  vivify_973:
    setattribute $P112, 'payload', $P113
    throw $P112
.annotate 'line', 521
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1338"  :anon :subid("562_1335114138.94729") :outer("561_1335114138.94729")
    .param pmc param_1340
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 523
    .lex "$_", param_1340
.annotate 'line', 524
    find_lex $P117, "$tasks"
    unless_null $P117, vivify_968
    new $P117, "Undef"
  vivify_968:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Stmt"]
    find_lex $P122, "$_"
    unless_null $P122, vivify_969
    new $P122, "Undef"
  vivify_969:
    $P123 = $P121."new"($P122)
    $P124 = $P117."push"($P123)
.annotate 'line', 523
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1342"  :anon :subid("563_1335114138.94729") :outer("561_1335114138.94729")
    .param pmc param_1344
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 526
    .lex "$_", param_1344
.annotate 'line', 527
    find_lex $P117, "$tasks"
    unless_null $P117, vivify_971
    new $P117, "Undef"
  vivify_971:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Stmt"]
    find_lex $P122, "$_"
    unless_null $P122, vivify_972
    new $P122, "Undef"
  vivify_972:
    $P123 = $P121."new"($P122)
    $P124 = $P117."push"($P123)
.annotate 'line', 526
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1323"  :anon :subid("558_1335114138.94729") :outer("34_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 488
    .const 'Sub' $P1332 = "560_1335114138.94729" 
    capture_lex $P1332
    .const 'Sub' $P1328 = "559_1335114138.94729" 
    capture_lex $P1328
.annotate 'line', 489
    new $P108, "Undef"
    set $P1325, $P108
    .lex "$load_tasks", $P1325
.annotate 'line', 493
    new $P109, "Undef"
    set $P1326, $P109
    .lex "$fixup_tasks", $P1326
.annotate 'line', 489
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1325, $P114
.annotate 'line', 490
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."load_dependency_tasks"()
    defined $I100, $P113
    unless $I100, for_undef_974
    iter $P110, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1330_handler
    push_eh $P115
  loop1330_test:
    unless $P110, loop1330_done
    shift $P114, $P110
  loop1330_redo:
    .const 'Sub' $P1328 = "559_1335114138.94729" 
    capture_lex $P1328
    $P1328($P114)
  loop1330_next:
    goto loop1330_test
  loop1330_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1330_next
    eq $P116, .CONTROL_LOOP_REDO, loop1330_redo
  loop1330_done:
    pop_eh 
  for_undef_974:
.annotate 'line', 493
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    $P114 = $P113."new"()
    set $P1326, $P114
.annotate 'line', 494
    find_lex $P111, "self"
    nqp_decontainerize $P112, $P111
    $P113 = $P112."fixup_tasks"()
    defined $I100, $P113
    unless $I100, for_undef_977
    iter $P110, $P113
    new $P115, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P115, loop1334_handler
    push_eh $P115
  loop1334_test:
    unless $P110, loop1334_done
    shift $P114, $P110
  loop1334_redo:
    .const 'Sub' $P1332 = "560_1335114138.94729" 
    capture_lex $P1332
    $P1332($P114)
  loop1334_next:
    goto loop1334_test
  loop1334_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P116, exception, 'type'
    eq $P116, .CONTROL_LOOP_NEXT, loop1334_next
    eq $P116, .CONTROL_LOOP_REDO, loop1334_redo
  loop1334_done:
    pop_eh 
  for_undef_977:
.annotate 'line', 497
    new $P110, "Exception"
    set $P110['type'], .CONTROL_RETURN
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Stmts"]
.annotate 'line', 498
    get_hll_global $P115, "GLOBAL"
    nqp_get_package_through_who $P116, $P115, "PAST"
    get_who $P117, $P116
    set $P118, $P117["Op"]
    $P119 = $P118."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 499
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    $P124 = $P123."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 500
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 502
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P130, $P129, "PAST"
    get_who $P131, $P130
    set $P132, $P131["Op"]
    $P133 = $P132."new"("getinterp P" :named("pirop"))
.annotate 'line', 503
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Op"]
    $P138 = $P137."new"("LexPad", "get_class Ps" :named("pirop"))
.annotate 'line', 504
    get_hll_global $P139, "GLOBAL"
    nqp_get_package_through_who $P140, $P139, "PAST"
    get_who $P141, $P140
    set $P142, $P141["Op"]
    $P143 = $P142."new"("NQPLexPad", "get_class Ps" :named("pirop"))
    $P144 = $P128."new"($P133, $P138, $P143, "callmethod" :named("pasttype"), "hll_map" :named("name"))
.annotate 'line', 506
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P148, $P147["Op"]
.annotate 'line', 508
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    $P153 = $P152."new"("cur_sc" :named("name"), "register" :named("scope"), 1 :named("isdecl"))
.annotate 'line', 509
    get_hll_global $P154, "GLOBAL"
    nqp_get_package_through_who $P155, $P154, "PAST"
    get_who $P156, $P155
    set $P157, $P156["Op"]
    find_lex $P158, "self"
    nqp_decontainerize $P159, $P158
    $P160 = $P159."handle"()
    $P161 = $P157."new"($P160, "nqp_create_sc Ps" :named("pirop"))
    $P162 = $P148."new"($P153, $P161, "bind_6model" :named("pasttype"))
.annotate 'line', 511
    get_hll_global $P163, "GLOBAL"
    nqp_get_package_through_who $P164, $P163, "PAST"
    get_who $P165, $P164
    set $P166, $P165["Op"]
.annotate 'line', 513
    get_hll_global $P167, "GLOBAL"
    nqp_get_package_through_who $P168, $P167, "PAST"
    get_who $P169, $P168
    set $P170, $P169["Var"]
    $P171 = $P170."new"("cur_sc" :named("name"), "register" :named("scope"))
.annotate 'line', 514
    find_lex $P172, "self"
    nqp_decontainerize $P173, $P172
    $P174 = $P173."sc"()
    $P175 = $P174."description"()
    $P176 = $P166."new"($P171, $P175, "callmethod" :named("pasttype"), "set_description" :named("name"))
.annotate 'line', 511
    set $P177, $P1325
    unless_null $P177, vivify_980
    new $P177, "Undef"
  vivify_980:
.annotate 'line', 517
    find_lex $P178, "self"
    nqp_decontainerize $P179, $P178
    $P180 = $P179."serialize_and_produce_deserialization_past"("cur_sc")
    set $P181, $P1326
    unless_null $P181, vivify_981
    new $P181, "Undef"
  vivify_981:
    $P182 = $P114."new"($P119, $P124, $P144, $P162, $P176, $P177, $P180, $P181)
.annotate 'line', 497
    setattribute $P110, 'payload', $P182
    throw $P110
.annotate 'line', 488
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1327"  :anon :subid("559_1335114138.94729") :outer("558_1335114138.94729")
    .param pmc param_1329
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 490
    .lex "$_", param_1329
.annotate 'line', 491
    find_lex $P115, "$load_tasks"
    unless_null $P115, vivify_975
    new $P115, "Undef"
  vivify_975:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmt"]
    find_lex $P120, "$_"
    unless_null $P120, vivify_976
    new $P120, "Undef"
  vivify_976:
    $P121 = $P119."new"($P120)
    $P122 = $P115."push"($P121)
.annotate 'line', 490
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1331"  :anon :subid("560_1335114138.94729") :outer("558_1335114138.94729")
    .param pmc param_1333
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 494
    .lex "$_", param_1333
.annotate 'line', 495
    find_lex $P115, "$fixup_tasks"
    unless_null $P115, vivify_978
    new $P115, "Undef"
  vivify_978:
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmt"]
    find_lex $P120, "$_"
    unless_null $P120, vivify_979
    new $P120, "Undef"
  vivify_979:
    $P121 = $P119."new"($P120)
    $P122 = $P115."push"($P121)
.annotate 'line', 494
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_lexical" :anon :subid("35_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1347
    .param pmc param_1348
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 535
    .lex "self", param_1347
    .lex "$name", param_1348
.annotate 'line', 536
    set $P104, param_1347
    nqp_decontainerize $P105, $P104
    set $P106, param_1348
    unless_null $P106, vivify_982
    new $P106, "Undef"
  vivify_982:
    $P107 = $P105."is_scope"($P106, "lexical")
.annotate 'line', 535
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "is_package" :anon :subid("36_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1350
    .param pmc param_1351
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 541
    .lex "self", param_1350
    .lex "$name", param_1351
.annotate 'line', 542
    set $P104, param_1350
    nqp_decontainerize $P105, $P104
    set $P106, param_1351
    unless_null $P106, vivify_983
    new $P106, "Undef"
  vivify_983:
    $P107 = $P105."is_scope"($P106, "package")
.annotate 'line', 541
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "is_scope" :anon :subid("37_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1355
    .param pmc param_1356
    .param pmc param_1357
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 547
    .const 'Sub' $P1361 = "564_1335114138.94729" 
    capture_lex $P1361
    new $P1354, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1354, control_1353
    push_eh $P1354
    .lex "self", param_1355
    .lex "$name", param_1356
    .lex "$wanted_scope", param_1357
.annotate 'line', 548
    new $P104, "Undef"
    set $P1358, $P104
    .lex "$i", $P1358
    set $P105, param_1355
    nqp_decontainerize $P106, $P105
    nqp_get_sc_object $P107, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1359, $P106, $P107, "@!BLOCKS", 8
    unless_null $P1359, vivify_984
    $P1359 = root_new ['parrot';'ResizablePMCArray']
  vivify_984:
    set $N100, $P1359
    new $P108, 'Float'
    set $P108, $N100
    set $P1358, $P108
.annotate 'line', 549
    new $P107, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P107, loop1368_handler
    push_eh $P107
  loop1368_test:
    set $P105, $P1358
    unless_null $P105, vivify_985
    new $P105, "Undef"
  vivify_985:
    set $N100, $P105
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop1368_done
  loop1368_redo:
    .const 'Sub' $P1361 = "564_1335114138.94729" 
    capture_lex $P1361
    $P1361()
  loop1368_next:
    goto loop1368_test
  loop1368_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P108, exception, 'type'
    eq $P108, .CONTROL_LOOP_NEXT, loop1368_next
    eq $P108, .CONTROL_LOOP_REDO, loop1368_redo
  loop1368_done:
    pop_eh 
.annotate 'line', 547
    .return (0)
  control_1353:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P105, exception, "payload"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1360"  :anon :subid("564_1335114138.94729") :outer("37_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 551
    $P1363 = root_new ['parrot';'Hash']
    set $P1362, $P1363
    .lex "%sym", $P1362
.annotate 'line', 550
    find_lex $P106, "$i"
    unless_null $P106, vivify_986
    new $P106, "Undef"
  vivify_986:
    sub $P107, $P106, 1
    store_lex "$i", $P107
.annotate 'line', 551
    find_lex $P106, "$i"
    unless_null $P106, vivify_987
    new $P106, "Undef"
  vivify_987:
    set $I101, $P106
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1364, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1364, vivify_988
    $P1364 = root_new ['parrot';'ResizablePMCArray']
  vivify_988:
    set $P110, $P1364[$I101]
    unless_null $P110, vivify_989
    new $P110, "Undef"
  vivify_989:
    find_lex $P111, "$name"
    unless_null $P111, vivify_990
    new $P111, "Undef"
  vivify_990:
    $P112 = $P110."symbol"($P111)
    set $P1362, $P112
.annotate 'line', 552
    set $P1366, $P1362
    unless_null $P1366, vivify_991
    $P1366 = root_new ['parrot';'Hash']
  vivify_991:
    set $N102, $P1366
    if $N102, if_1365
    new $P106, 'Float'
    set $P106, $N102
    goto if_1365_end
  if_1365:
.annotate 'line', 553
    new $P107, "Exception"
    set $P107['type'], .CONTROL_RETURN
    set $P1367, $P1362
    unless_null $P1367, vivify_992
    $P1367 = root_new ['parrot';'Hash']
  vivify_992:
    set $P108, $P1367["scope"]
    unless_null $P108, vivify_993
    new $P108, "Undef"
  vivify_993:
    set $S100, $P108
    find_lex $P109, "$wanted_scope"
    unless_null $P109, vivify_994
    new $P109, "Undef"
  vivify_994:
    set $S101, $P109
    iseq $I101, $S100, $S101
    new $P110, 'Integer'
    set $P110, $I101
    setattribute $P107, 'payload', $P110
    throw $P107
  if_1365_end:
.annotate 'line', 549
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "known_sym" :anon :subid("38_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1370
    .param pmc param_1371
    .param pmc param_1372
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 560
    .const 'Sub' $P1375 = "565_1335114138.94729" 
    capture_lex $P1375
    .lex "self", param_1370
    .lex "$/", param_1371
    .lex "@name", param_1372
.annotate 'line', 561
    new $P104, "Undef"
    set $P1373, $P104
    .lex "$known", $P1373
    new $P105, "Float"
    assign $P105, 0
    set $P1373, $P105
.annotate 'line', 562
    .const 'Sub' $P1375 = "565_1335114138.94729" 
    capture_lex $P1375
    $P1375()
.annotate 'line', 560
    set $P105, $P1373
    unless_null $P105, vivify_996
    new $P105, "Undef"
  vivify_996:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1374"  :anon :subid("565_1335114138.94729") :outer("38_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 562
    new $P1379, 'ExceptionHandler'
    set_label $P1379, control_1378
    $P1379."handle_types_except"(.CONTROL_ALL)
    push_eh $P1379
.annotate 'line', 563
    find_lex $P105, "self"
    nqp_decontainerize $P106, $P105
    find_lex $P1376, "@name"
    unless_null $P1376, vivify_995
    $P1376 = root_new ['parrot';'ResizablePMCArray']
  vivify_995:
    $P106."find_sym"($P1376)
.annotate 'line', 564
    new $P105, "Float"
    assign $P105, 1
    store_lex "$known", $P105
.annotate 'line', 562
    pop_eh 
    goto skip_handler_1377
  control_1378:
    peek_exception $P1380
    .local pmc exception 
    .get_results (exception) 
    new $P1382, 'Integer'
    set $P1382, 1
    set exception["handled"], $P1382
    set $I1383, exception["handled"]
    eq $I1383, 1, handled_1381
    rethrow exception
  handled_1381:
    finalize $P1380
    .return (exception)
  skip_handler_1377:
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "find_sym" :anon :subid("39_1335114138.94729") :outer("545_1335114138.94729")
    .param pmc param_1387
    .param pmc param_1388
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 572
    .const 'Sub' $P1433 = "570_1335114138.94729" 
    capture_lex $P1433
    .const 'Sub' $P1414 = "568_1335114138.94729" 
    capture_lex $P1414
    .const 'Sub' $P1395 = "566_1335114138.94729" 
    capture_lex $P1395
    new $P1386, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P1386, control_1385
    push_eh $P1386
    .lex "self", param_1387
    .lex "@name", param_1388
.annotate 'line', 598
    new $P104, "Undef"
    set $P1389, $P104
    .lex "$result", $P1389
.annotate 'line', 574
    set $P1391, param_1388
    unless_null $P1391, vivify_997
    $P1391 = root_new ['parrot';'ResizablePMCArray']
  vivify_997:
    set $N100, $P1391
    if $N100, unless_1390_end
    die "Cannot look up empty name"
  unless_1390_end:
.annotate 'line', 578
    set $P1393, param_1388
    unless_null $P1393, vivify_998
    $P1393 = root_new ['parrot';'ResizablePMCArray']
  vivify_998:
    set $N100, $P1393
    set $N101, 1
    iseq $I100, $N100, $N101
    unless $I100, if_1392_end
    .const 'Sub' $P1395 = "566_1335114138.94729" 
    capture_lex $P1395
    $P1395()
  if_1392_end:
.annotate 'line', 598
    find_dynamic_lex $P107, "$*GLOBALish"
    unless_null $P107, vivify_1013
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$GLOBALish"]
    unless_null $P107, vivify_1014
    die "Contextual $*GLOBALish not found"
  vivify_1014:
  vivify_1013:
    set $P1389, $P107
.annotate 'line', 599
    set $P1412, param_1388
    unless_null $P1412, vivify_1015
    $P1412 = root_new ['parrot';'ResizablePMCArray']
  vivify_1015:
    set $N100, $P1412
    set $N101, 2
    isge $I100, $N100, $N101
    unless $I100, if_1411_end
    .const 'Sub' $P1414 = "568_1335114138.94729" 
    capture_lex $P1414
    $P1414()
  if_1411_end:
.annotate 'line', 619
    set $P1431, param_1388
    unless_null $P1431, vivify_1031
    $P1431 = root_new ['parrot';'ResizablePMCArray']
  vivify_1031:
    defined $I100, $P1431
    unless $I100, for_undef_1032
    iter $P105, $P1431
    new $P108, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P108, loop1437_handler
    push_eh $P108
  loop1437_test:
    unless $P105, loop1437_done
    shift $P106, $P105
  loop1437_redo:
    .const 'Sub' $P1433 = "570_1335114138.94729" 
    capture_lex $P1433
    $P1433($P106)
  loop1437_next:
    goto loop1437_test
  loop1437_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P109, exception, 'type'
    eq $P109, .CONTROL_LOOP_NEXT, loop1437_next
    eq $P109, .CONTROL_LOOP_REDO, loop1437_redo
  loop1437_done:
    pop_eh 
  for_undef_1032:
.annotate 'line', 572
    set $P105, $P1389
    unless_null $P105, vivify_1039
    new $P105, "Undef"
  vivify_1039:
    .return ($P105)
  control_1385:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P106, exception, "payload"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1394"  :anon :subid("566_1335114138.94729") :outer("39_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 578
    .const 'Sub' $P1401 = "567_1335114138.94729" 
    capture_lex $P1401
.annotate 'line', 579
    new $P105, "Undef"
    set $P1396, $P105
    .lex "$final_name", $P1396
.annotate 'line', 580
    new $P106, "Undef"
    set $P1397, $P106
    .lex "$i", $P1397
.annotate 'line', 579
    new $P107, "Float"
    assign $P107, 0
    set $I101, $P107
    find_lex $P1398, "@name"
    unless_null $P1398, vivify_999
    $P1398 = root_new ['parrot';'ResizablePMCArray']
  vivify_999:
    set $P108, $P1398[$I101]
    unless_null $P108, vivify_1000
    new $P108, "Undef"
  vivify_1000:
    set $P1396, $P108
.annotate 'line', 580
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1399, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1399, vivify_1001
    $P1399 = root_new ['parrot';'ResizablePMCArray']
  vivify_1001:
    set $N102, $P1399
    new $P110, 'Float'
    set $P110, $N102
    set $P1397, $P110
.annotate 'line', 581
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1410_handler
    push_eh $P109
  loop1410_test:
    set $P107, $P1397
    unless_null $P107, vivify_1002
    new $P107, "Undef"
  vivify_1002:
    set $N102, $P107
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1410_done
  loop1410_redo:
    .const 'Sub' $P1401 = "567_1335114138.94729" 
    capture_lex $P1401
    $P1401()
  loop1410_next:
    goto loop1410_test
  loop1410_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1410_next
    eq $P110, .CONTROL_LOOP_REDO, loop1410_redo
  loop1410_done:
    pop_eh 
.annotate 'line', 578
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1400"  :anon :subid("567_1335114138.94729") :outer("566_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 583
    $P1403 = root_new ['parrot';'Hash']
    set $P1402, $P1403
    .lex "%sym", $P1402
.annotate 'line', 582
    find_lex $P108, "$i"
    unless_null $P108, vivify_1003
    new $P108, "Undef"
  vivify_1003:
    sub $P109, $P108, 1
    store_lex "$i", $P109
.annotate 'line', 583
    find_lex $P108, "$i"
    unless_null $P108, vivify_1004
    new $P108, "Undef"
  vivify_1004:
    set $I102, $P108
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1404, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1404, vivify_1005
    $P1404 = root_new ['parrot';'ResizablePMCArray']
  vivify_1005:
    set $P112, $P1404[$I102]
    unless_null $P112, vivify_1006
    new $P112, "Undef"
  vivify_1006:
    find_lex $P113, "$final_name"
    unless_null $P113, vivify_1007
    new $P113, "Undef"
  vivify_1007:
    $P114 = $P112."symbol"($P113)
    set $P1402, $P114
.annotate 'line', 584
    set $P1406, $P1402
    unless_null $P1406, vivify_1008
    $P1406 = root_new ['parrot';'Hash']
  vivify_1008:
    set $N104, $P1406
    if $N104, if_1405
    new $P108, 'Float'
    set $P108, $N104
    goto if_1405_end
  if_1405:
.annotate 'line', 585
    set $P1408, $P1402
    unless_null $P1408, vivify_1009
    $P1408 = root_new ['parrot';'Hash']
  vivify_1009:
    exists $I102, $P1408["value"]
    if $I102, if_1407
.annotate 'line', 589
    new $P110, 'String'
    set $P110, "No compile-time value for "
    find_lex $P111, "$final_name"
    unless_null $P111, vivify_1010
    new $P111, "Undef"
  vivify_1010:
    concat $P112, $P110, $P111
    die $P112
.annotate 'line', 588
    goto if_1407_end
  if_1407:
.annotate 'line', 586
    new $P110, "Exception"
    set $P110['type'], .CONTROL_RETURN
    set $P1409, $P1402
    unless_null $P1409, vivify_1011
    $P1409 = root_new ['parrot';'Hash']
  vivify_1011:
    set $P111, $P1409["value"]
    unless_null $P111, vivify_1012
    new $P111, "Undef"
  vivify_1012:
    setattribute $P110, 'payload', $P111
    throw $P110
  if_1407_end:
.annotate 'line', 584
    set $P108, $P109
  if_1405_end:
.annotate 'line', 581
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.include "except_types.pasm"
.sub "_block1413"  :anon :subid("568_1335114138.94729") :outer("39_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 599
    .const 'Sub' $P1420 = "569_1335114138.94729" 
    capture_lex $P1420
.annotate 'line', 600
    new $P105, "Undef"
    set $P1415, $P105
    .lex "$first", $P1415
.annotate 'line', 601
    new $P106, "Undef"
    set $P1416, $P106
    .lex "$i", $P1416
.annotate 'line', 600
    new $P107, "Float"
    assign $P107, 0
    set $I101, $P107
    find_lex $P1417, "@name"
    unless_null $P1417, vivify_1016
    $P1417 = root_new ['parrot';'ResizablePMCArray']
  vivify_1016:
    set $P108, $P1417[$I101]
    unless_null $P108, vivify_1017
    new $P108, "Undef"
  vivify_1017:
    set $P1415, $P108
.annotate 'line', 601
    find_lex $P107, "self"
    nqp_decontainerize $P108, $P107
    nqp_get_sc_object $P109, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1418, $P108, $P109, "@!BLOCKS", 8
    unless_null $P1418, vivify_1018
    $P1418 = root_new ['parrot';'ResizablePMCArray']
  vivify_1018:
    set $N102, $P1418
    new $P110, 'Float'
    set $P110, $N102
    set $P1416, $P110
.annotate 'line', 602
    new $P109, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P109, loop1430_handler
    push_eh $P109
  loop1430_test:
    set $P107, $P1416
    unless_null $P107, vivify_1019
    new $P107, "Undef"
  vivify_1019:
    set $N102, $P107
    set $N103, 0
    isgt $I101, $N102, $N103
    unless $I101, loop1430_done
  loop1430_redo:
    .const 'Sub' $P1420 = "569_1335114138.94729" 
    capture_lex $P1420
    $P1420()
  loop1430_next:
    goto loop1430_test
  loop1430_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P110, exception, 'type'
    eq $P110, .CONTROL_LOOP_NEXT, loop1430_next
    eq $P110, .CONTROL_LOOP_REDO, loop1430_redo
  loop1430_done:
    pop_eh 
.annotate 'line', 599
    .return ($I101)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1419"  :anon :subid("569_1335114138.94729") :outer("568_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 604
    $P1422 = root_new ['parrot';'Hash']
    set $P1421, $P1422
    .lex "%sym", $P1421
.annotate 'line', 603
    find_lex $P108, "$i"
    unless_null $P108, vivify_1020
    new $P108, "Undef"
  vivify_1020:
    sub $P109, $P108, 1
    store_lex "$i", $P109
.annotate 'line', 604
    find_lex $P108, "$i"
    unless_null $P108, vivify_1021
    new $P108, "Undef"
  vivify_1021:
    set $I102, $P108
    find_lex $P109, "self"
    nqp_decontainerize $P110, $P109
    nqp_get_sc_object $P111, "3C95AE4A6627BB8C289ADAC07442638C9A4C67B6-1335114138.70076", 1
    repr_get_attr_obj $P1423, $P110, $P111, "@!BLOCKS", 8
    unless_null $P1423, vivify_1022
    $P1423 = root_new ['parrot';'ResizablePMCArray']
  vivify_1022:
    set $P112, $P1423[$I102]
    unless_null $P112, vivify_1023
    new $P112, "Undef"
  vivify_1023:
    find_lex $P113, "$first"
    unless_null $P113, vivify_1024
    new $P113, "Undef"
  vivify_1024:
    $P114 = $P112."symbol"($P113)
    set $P1421, $P114
.annotate 'line', 605
    set $P1425, $P1421
    unless_null $P1425, vivify_1025
    $P1425 = root_new ['parrot';'Hash']
  vivify_1025:
    set $N104, $P1425
    if $N104, if_1424
    new $P108, 'Float'
    set $P108, $N104
    goto if_1424_end
  if_1424:
.annotate 'line', 606
    set $P1427, $P1421
    unless_null $P1427, vivify_1026
    $P1427 = root_new ['parrot';'Hash']
  vivify_1026:
    exists $I102, $P1427["value"]
    if $I102, if_1426
.annotate 'line', 612
    new $P111, 'String'
    set $P111, "No compile-time value for "
    find_lex $P112, "$first"
    unless_null $P112, vivify_1027
    new $P112, "Undef"
  vivify_1027:
    concat $P113, $P111, $P112
    die $P113
.annotate 'line', 611
    goto if_1426_end
  if_1426:
.annotate 'line', 607
    set $P1428, $P1421
    unless_null $P1428, vivify_1028
    $P1428 = root_new ['parrot';'Hash']
  vivify_1028:
    set $P110, $P1428["value"]
    unless_null $P110, vivify_1029
    new $P110, "Undef"
  vivify_1029:
    store_lex "$result", $P110
.annotate 'line', 608
    find_lex $P1429, "@name"
    unless_null $P1429, vivify_1030
    $P1429 = root_new ['parrot';'ResizablePMCArray']
  vivify_1030:
    $P1429."shift"()
.annotate 'line', 609
    new $P110, "Float"
    assign $P110, 0
    store_lex "$i", $P110
.annotate 'line', 606
    set $P109, $P110
  if_1426_end:
.annotate 'line', 605
    set $P108, $P109
  if_1424_end:
.annotate 'line', 602
    .return ($P108)
.end


.HLL "nqp"

.namespace ["NQP";"World"]
.sub "_block1432"  :anon :subid("570_1335114138.94729") :outer("39_1335114138.94729")
    .param pmc param_1434
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 619
    .lex "$_", param_1434
.annotate 'line', 620
    find_lex $P110, "$_"
    unless_null $P110, vivify_1033
    new $P110, "Undef"
  vivify_1033:
    set $S100, $P110
    find_lex $P108, "$result"
    unless_null $P108, vivify_1034
    new $P108, "Undef"
  vivify_1034:
    get_who $P109, $P108
    exists $I101, $P109[$S100]
    if $I101, if_1435
.annotate 'line', 624
    new $P111, "String"
    assign $P111, "Could not locate compile-time value for symbol "
.annotate 'line', 625
    find_lex $P1436, "@name"
    unless_null $P1436, vivify_1035
    $P1436 = root_new ['parrot';'ResizablePMCArray']
  vivify_1035:
    join $S101, "::", $P1436
    concat $P112, $P111, $S101
.annotate 'line', 624
    die $P112
.annotate 'line', 623
    goto if_1435_end
  if_1435:
.annotate 'line', 621
    find_lex $P111, "$_"
    unless_null $P111, vivify_1036
    new $P111, "Undef"
  vivify_1036:
    find_lex $P112, "$result"
    unless_null $P112, vivify_1037
    new $P112, "Undef"
  vivify_1037:
    get_who $P113, $P112
    set $P114, $P113[$P111]
    unless_null $P114, vivify_1038
    new $P114, "Undef"
  vivify_1038:
    store_lex "$result", $P114
.annotate 'line', 620
    set $P107, $P114
  if_1435_end:
.annotate 'line', 619
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1439"  :subid("571_1335114138.94729") :outer("542_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 634
    .const 'Sub' $P2539 = "405_1335114138.94729" 
    capture_lex $P2539
    .const 'Sub' $P2538 = "404_1335114138.94729" 
    capture_lex $P2538
    .const 'Sub' $P2534 = "403_1335114138.94729" 
    capture_lex $P2534
    .const 'Sub' $P2533 = "402_1335114138.94729" 
    capture_lex $P2533
    .const 'Sub' $P2529 = "401_1335114138.94729" 
    capture_lex $P2529
    .const 'Sub' $P2528 = "400_1335114138.94729" 
    capture_lex $P2528
    .const 'Sub' $P2524 = "399_1335114138.94729" 
    capture_lex $P2524
    .const 'Sub' $P2523 = "398_1335114138.94729" 
    capture_lex $P2523
    .const 'Sub' $P2519 = "397_1335114138.94729" 
    capture_lex $P2519
    .const 'Sub' $P2518 = "396_1335114138.94729" 
    capture_lex $P2518
    .const 'Sub' $P2512 = "395_1335114138.94729" 
    capture_lex $P2512
    .const 'Sub' $P2511 = "394_1335114138.94729" 
    capture_lex $P2511
    .const 'Sub' $P2507 = "393_1335114138.94729" 
    capture_lex $P2507
    .const 'Sub' $P2506 = "392_1335114138.94729" 
    capture_lex $P2506
    .const 'Sub' $P2502 = "391_1335114138.94729" 
    capture_lex $P2502
    .const 'Sub' $P2501 = "390_1335114138.94729" 
    capture_lex $P2501
    .const 'Sub' $P2497 = "389_1335114138.94729" 
    capture_lex $P2497
    .const 'Sub' $P2496 = "388_1335114138.94729" 
    capture_lex $P2496
    .const 'Sub' $P2492 = "387_1335114138.94729" 
    capture_lex $P2492
    .const 'Sub' $P2491 = "386_1335114138.94729" 
    capture_lex $P2491
    .const 'Sub' $P2488 = "385_1335114138.94729" 
    capture_lex $P2488
    .const 'Sub' $P2487 = "384_1335114138.94729" 
    capture_lex $P2487
    .const 'Sub' $P2483 = "383_1335114138.94729" 
    capture_lex $P2483
    .const 'Sub' $P2482 = "382_1335114138.94729" 
    capture_lex $P2482
    .const 'Sub' $P2478 = "381_1335114138.94729" 
    capture_lex $P2478
    .const 'Sub' $P2477 = "380_1335114138.94729" 
    capture_lex $P2477
    .const 'Sub' $P2473 = "379_1335114138.94729" 
    capture_lex $P2473
    .const 'Sub' $P2472 = "378_1335114138.94729" 
    capture_lex $P2472
    .const 'Sub' $P2468 = "377_1335114138.94729" 
    capture_lex $P2468
    .const 'Sub' $P2467 = "376_1335114138.94729" 
    capture_lex $P2467
    .const 'Sub' $P2463 = "375_1335114138.94729" 
    capture_lex $P2463
    .const 'Sub' $P2462 = "374_1335114138.94729" 
    capture_lex $P2462
    .const 'Sub' $P2458 = "373_1335114138.94729" 
    capture_lex $P2458
    .const 'Sub' $P2457 = "372_1335114138.94729" 
    capture_lex $P2457
    .const 'Sub' $P2453 = "371_1335114138.94729" 
    capture_lex $P2453
    .const 'Sub' $P2452 = "370_1335114138.94729" 
    capture_lex $P2452
    .const 'Sub' $P2448 = "369_1335114138.94729" 
    capture_lex $P2448
    .const 'Sub' $P2447 = "368_1335114138.94729" 
    capture_lex $P2447
    .const 'Sub' $P2443 = "367_1335114138.94729" 
    capture_lex $P2443
    .const 'Sub' $P2442 = "366_1335114138.94729" 
    capture_lex $P2442
    .const 'Sub' $P2438 = "365_1335114138.94729" 
    capture_lex $P2438
    .const 'Sub' $P2437 = "364_1335114138.94729" 
    capture_lex $P2437
    .const 'Sub' $P2433 = "363_1335114138.94729" 
    capture_lex $P2433
    .const 'Sub' $P2432 = "362_1335114138.94729" 
    capture_lex $P2432
    .const 'Sub' $P2428 = "361_1335114138.94729" 
    capture_lex $P2428
    .const 'Sub' $P2427 = "360_1335114138.94729" 
    capture_lex $P2427
    .const 'Sub' $P2423 = "359_1335114138.94729" 
    capture_lex $P2423
    .const 'Sub' $P2422 = "358_1335114138.94729" 
    capture_lex $P2422
    .const 'Sub' $P2418 = "357_1335114138.94729" 
    capture_lex $P2418
    .const 'Sub' $P2417 = "356_1335114138.94729" 
    capture_lex $P2417
    .const 'Sub' $P2413 = "355_1335114138.94729" 
    capture_lex $P2413
    .const 'Sub' $P2412 = "354_1335114138.94729" 
    capture_lex $P2412
    .const 'Sub' $P2408 = "353_1335114138.94729" 
    capture_lex $P2408
    .const 'Sub' $P2407 = "352_1335114138.94729" 
    capture_lex $P2407
    .const 'Sub' $P2403 = "351_1335114138.94729" 
    capture_lex $P2403
    .const 'Sub' $P2402 = "350_1335114138.94729" 
    capture_lex $P2402
    .const 'Sub' $P2398 = "349_1335114138.94729" 
    capture_lex $P2398
    .const 'Sub' $P2397 = "348_1335114138.94729" 
    capture_lex $P2397
    .const 'Sub' $P2393 = "347_1335114138.94729" 
    capture_lex $P2393
    .const 'Sub' $P2392 = "346_1335114138.94729" 
    capture_lex $P2392
    .const 'Sub' $P2388 = "345_1335114138.94729" 
    capture_lex $P2388
    .const 'Sub' $P2387 = "344_1335114138.94729" 
    capture_lex $P2387
    .const 'Sub' $P2383 = "343_1335114138.94729" 
    capture_lex $P2383
    .const 'Sub' $P2382 = "342_1335114138.94729" 
    capture_lex $P2382
    .const 'Sub' $P2378 = "341_1335114138.94729" 
    capture_lex $P2378
    .const 'Sub' $P2377 = "340_1335114138.94729" 
    capture_lex $P2377
    .const 'Sub' $P2373 = "339_1335114138.94729" 
    capture_lex $P2373
    .const 'Sub' $P2372 = "338_1335114138.94729" 
    capture_lex $P2372
    .const 'Sub' $P2368 = "337_1335114138.94729" 
    capture_lex $P2368
    .const 'Sub' $P2367 = "336_1335114138.94729" 
    capture_lex $P2367
    .const 'Sub' $P2363 = "335_1335114138.94729" 
    capture_lex $P2363
    .const 'Sub' $P2362 = "334_1335114138.94729" 
    capture_lex $P2362
    .const 'Sub' $P2358 = "333_1335114138.94729" 
    capture_lex $P2358
    .const 'Sub' $P2357 = "332_1335114138.94729" 
    capture_lex $P2357
    .const 'Sub' $P2353 = "331_1335114138.94729" 
    capture_lex $P2353
    .const 'Sub' $P2352 = "330_1335114138.94729" 
    capture_lex $P2352
    .const 'Sub' $P2348 = "329_1335114138.94729" 
    capture_lex $P2348
    .const 'Sub' $P2347 = "328_1335114138.94729" 
    capture_lex $P2347
    .const 'Sub' $P2343 = "327_1335114138.94729" 
    capture_lex $P2343
    .const 'Sub' $P2342 = "326_1335114138.94729" 
    capture_lex $P2342
    .const 'Sub' $P2338 = "325_1335114138.94729" 
    capture_lex $P2338
    .const 'Sub' $P2337 = "324_1335114138.94729" 
    capture_lex $P2337
    .const 'Sub' $P2333 = "323_1335114138.94729" 
    capture_lex $P2333
    .const 'Sub' $P2332 = "322_1335114138.94729" 
    capture_lex $P2332
    .const 'Sub' $P2328 = "321_1335114138.94729" 
    capture_lex $P2328
    .const 'Sub' $P2327 = "320_1335114138.94729" 
    capture_lex $P2327
    .const 'Sub' $P2323 = "319_1335114138.94729" 
    capture_lex $P2323
    .const 'Sub' $P2322 = "318_1335114138.94729" 
    capture_lex $P2322
    .const 'Sub' $P2318 = "317_1335114138.94729" 
    capture_lex $P2318
    .const 'Sub' $P2317 = "316_1335114138.94729" 
    capture_lex $P2317
    .const 'Sub' $P2313 = "315_1335114138.94729" 
    capture_lex $P2313
    .const 'Sub' $P2312 = "314_1335114138.94729" 
    capture_lex $P2312
    .const 'Sub' $P2308 = "313_1335114138.94729" 
    capture_lex $P2308
    .const 'Sub' $P2307 = "312_1335114138.94729" 
    capture_lex $P2307
    .const 'Sub' $P2303 = "311_1335114138.94729" 
    capture_lex $P2303
    .const 'Sub' $P2302 = "310_1335114138.94729" 
    capture_lex $P2302
    .const 'Sub' $P2299 = "309_1335114138.94729" 
    capture_lex $P2299
    .const 'Sub' $P2298 = "308_1335114138.94729" 
    capture_lex $P2298
    .const 'Sub' $P2295 = "307_1335114138.94729" 
    capture_lex $P2295
    .const 'Sub' $P2294 = "306_1335114138.94729" 
    capture_lex $P2294
    .const 'Sub' $P2291 = "305_1335114138.94729" 
    capture_lex $P2291
    .const 'Sub' $P2290 = "304_1335114138.94729" 
    capture_lex $P2290
    .const 'Sub' $P2287 = "303_1335114138.94729" 
    capture_lex $P2287
    .const 'Sub' $P2286 = "302_1335114138.94729" 
    capture_lex $P2286
    .const 'Sub' $P2283 = "301_1335114138.94729" 
    capture_lex $P2283
    .const 'Sub' $P2282 = "300_1335114138.94729" 
    capture_lex $P2282
    .const 'Sub' $P2279 = "299_1335114138.94729" 
    capture_lex $P2279
    .const 'Sub' $P2278 = "298_1335114138.94729" 
    capture_lex $P2278
    .const 'Sub' $P2275 = "297_1335114138.94729" 
    capture_lex $P2275
    .const 'Sub' $P2274 = "296_1335114138.94729" 
    capture_lex $P2274
    .const 'Sub' $P2271 = "295_1335114138.94729" 
    capture_lex $P2271
    .const 'Sub' $P2270 = "294_1335114138.94729" 
    capture_lex $P2270
    .const 'Sub' $P2265 = "293_1335114138.94729" 
    capture_lex $P2265
    .const 'Sub' $P2264 = "292_1335114138.94729" 
    capture_lex $P2264
    .const 'Sub' $P2261 = "291_1335114138.94729" 
    capture_lex $P2261
    .const 'Sub' $P2260 = "290_1335114138.94729" 
    capture_lex $P2260
    .const 'Sub' $P2257 = "289_1335114138.94729" 
    capture_lex $P2257
    .const 'Sub' $P2256 = "288_1335114138.94729" 
    capture_lex $P2256
    .const 'Sub' $P2253 = "287_1335114138.94729" 
    capture_lex $P2253
    .const 'Sub' $P2252 = "286_1335114138.94729" 
    capture_lex $P2252
    .const 'Sub' $P2247 = "285_1335114138.94729" 
    capture_lex $P2247
    .const 'Sub' $P2246 = "284_1335114138.94729" 
    capture_lex $P2246
    .const 'Sub' $P2241 = "283_1335114138.94729" 
    capture_lex $P2241
    .const 'Sub' $P2240 = "282_1335114138.94729" 
    capture_lex $P2240
    .const 'Sub' $P2237 = "281_1335114138.94729" 
    capture_lex $P2237
    .const 'Sub' $P2236 = "280_1335114138.94729" 
    capture_lex $P2236
    .const 'Sub' $P2233 = "279_1335114138.94729" 
    capture_lex $P2233
    .const 'Sub' $P2232 = "278_1335114138.94729" 
    capture_lex $P2232
    .const 'Sub' $P2229 = "277_1335114138.94729" 
    capture_lex $P2229
    .const 'Sub' $P2228 = "276_1335114138.94729" 
    capture_lex $P2228
    .const 'Sub' $P2225 = "275_1335114138.94729" 
    capture_lex $P2225
    .const 'Sub' $P2224 = "274_1335114138.94729" 
    capture_lex $P2224
    .const 'Sub' $P2220 = "273_1335114138.94729" 
    capture_lex $P2220
    .const 'Sub' $P2219 = "272_1335114138.94729" 
    capture_lex $P2219
    .const 'Sub' $P2215 = "271_1335114138.94729" 
    capture_lex $P2215
    .const 'Sub' $P2214 = "270_1335114138.94729" 
    capture_lex $P2214
    .const 'Sub' $P2210 = "269_1335114138.94729" 
    capture_lex $P2210
    .const 'Sub' $P2209 = "268_1335114138.94729" 
    capture_lex $P2209
    .const 'Sub' $P2205 = "267_1335114138.94729" 
    capture_lex $P2205
    .const 'Sub' $P2204 = "266_1335114138.94729" 
    capture_lex $P2204
    .const 'Sub' $P2201 = "265_1335114138.94729" 
    capture_lex $P2201
    .const 'Sub' $P2200 = "264_1335114138.94729" 
    capture_lex $P2200
    .const 'Sub' $P2197 = "263_1335114138.94729" 
    capture_lex $P2197
    .const 'Sub' $P2192 = "260_1335114138.94729" 
    capture_lex $P2192
    .const 'Sub' $P2186 = "259_1335114138.94729" 
    capture_lex $P2186
    .const 'Sub' $P2185 = "258_1335114138.94729" 
    capture_lex $P2185
    .const 'Sub' $P2181 = "257_1335114138.94729" 
    capture_lex $P2181
    .const 'Sub' $P2180 = "256_1335114138.94729" 
    capture_lex $P2180
    .const 'Sub' $P2177 = "255_1335114138.94729" 
    capture_lex $P2177
    .const 'Sub' $P2176 = "254_1335114138.94729" 
    capture_lex $P2176
    .const 'Sub' $P2172 = "253_1335114138.94729" 
    capture_lex $P2172
    .const 'Sub' $P2171 = "252_1335114138.94729" 
    capture_lex $P2171
    .const 'Sub' $P2168 = "251_1335114138.94729" 
    capture_lex $P2168
    .const 'Sub' $P2167 = "250_1335114138.94729" 
    capture_lex $P2167
    .const 'Sub' $P2161 = "249_1335114138.94729" 
    capture_lex $P2161
    .const 'Sub' $P2160 = "248_1335114138.94729" 
    capture_lex $P2160
    .const 'Sub' $P2154 = "247_1335114138.94729" 
    capture_lex $P2154
    .const 'Sub' $P2153 = "246_1335114138.94729" 
    capture_lex $P2153
    .const 'Sub' $P2149 = "245_1335114138.94729" 
    capture_lex $P2149
    .const 'Sub' $P2148 = "244_1335114138.94729" 
    capture_lex $P2148
    .const 'Sub' $P2142 = "243_1335114138.94729" 
    capture_lex $P2142
    .const 'Sub' $P2141 = "242_1335114138.94729" 
    capture_lex $P2141
    .const 'Sub' $P2136 = "241_1335114138.94729" 
    capture_lex $P2136
    .const 'Sub' $P2135 = "240_1335114138.94729" 
    capture_lex $P2135
    .const 'Sub' $P2132 = "239_1335114138.94729" 
    capture_lex $P2132
    .const 'Sub' $P2131 = "238_1335114138.94729" 
    capture_lex $P2131
    .const 'Sub' $P2127 = "237_1335114138.94729" 
    capture_lex $P2127
    .const 'Sub' $P2122 = "234_1335114138.94729" 
    capture_lex $P2122
    .const 'Sub' $P2115 = "233_1335114138.94729" 
    capture_lex $P2115
    .const 'Sub' $P2114 = "232_1335114138.94729" 
    capture_lex $P2114
    .const 'Sub' $P2104 = "231_1335114138.94729" 
    capture_lex $P2104
    .const 'Sub' $P2103 = "230_1335114138.94729" 
    capture_lex $P2103
    .const 'Sub' $P2097 = "229_1335114138.94729" 
    capture_lex $P2097
    .const 'Sub' $P2092 = "226_1335114138.94729" 
    capture_lex $P2092
    .const 'Sub' $P2089 = "225_1335114138.94729" 
    capture_lex $P2089
    .const 'Sub' $P2088 = "224_1335114138.94729" 
    capture_lex $P2088
    .const 'Sub' $P2085 = "223_1335114138.94729" 
    capture_lex $P2085
    .const 'Sub' $P2084 = "222_1335114138.94729" 
    capture_lex $P2084
    .const 'Sub' $P2081 = "221_1335114138.94729" 
    capture_lex $P2081
    .const 'Sub' $P2080 = "220_1335114138.94729" 
    capture_lex $P2080
    .const 'Sub' $P2073 = "219_1335114138.94729" 
    capture_lex $P2073
    .const 'Sub' $P2072 = "218_1335114138.94729" 
    capture_lex $P2072
    .const 'Sub' $P2059 = "217_1335114138.94729" 
    capture_lex $P2059
    .const 'Sub' $P2058 = "216_1335114138.94729" 
    capture_lex $P2058
    .const 'Sub' $P2050 = "215_1335114138.94729" 
    capture_lex $P2050
    .const 'Sub' $P2049 = "214_1335114138.94729" 
    capture_lex $P2049
    .const 'Sub' $P2045 = "213_1335114138.94729" 
    capture_lex $P2045
    .const 'Sub' $P2044 = "212_1335114138.94729" 
    capture_lex $P2044
    .const 'Sub' $P2038 = "211_1335114138.94729" 
    capture_lex $P2038
    .const 'Sub' $P2037 = "210_1335114138.94729" 
    capture_lex $P2037
    .const 'Sub' $P2031 = "209_1335114138.94729" 
    capture_lex $P2031
    .const 'Sub' $P2026 = "206_1335114138.94729" 
    capture_lex $P2026
    .const 'Sub' $P2021 = "205_1335114138.94729" 
    capture_lex $P2021
    .const 'Sub' $P2020 = "204_1335114138.94729" 
    capture_lex $P2020
    .const 'Sub' $P2005 = "203_1335114138.94729" 
    capture_lex $P2005
    .const 'Sub' $P2004 = "202_1335114138.94729" 
    capture_lex $P2004
    .const 'Sub' $P1993 = "201_1335114138.94729" 
    capture_lex $P1993
    .const 'Sub' $P1992 = "200_1335114138.94729" 
    capture_lex $P1992
    .const 'Sub' $P1988 = "199_1335114138.94729" 
    capture_lex $P1988
    .const 'Sub' $P1987 = "198_1335114138.94729" 
    capture_lex $P1987
    .const 'Sub' $P1983 = "197_1335114138.94729" 
    capture_lex $P1983
    .const 'Sub' $P1978 = "194_1335114138.94729" 
    capture_lex $P1978
    .const 'Sub' $P1968 = "193_1335114138.94729" 
    capture_lex $P1968
    .const 'Sub' $P1967 = "192_1335114138.94729" 
    capture_lex $P1967
    .const 'Sub' $P1963 = "191_1335114138.94729" 
    capture_lex $P1963
    .const 'Sub' $P1962 = "190_1335114138.94729" 
    capture_lex $P1962
    .const 'Sub' $P1955 = "189_1335114138.94729" 
    capture_lex $P1955
    .const 'Sub' $P1954 = "188_1335114138.94729" 
    capture_lex $P1954
    .const 'Sub' $P1949 = "187_1335114138.94729" 
    capture_lex $P1949
    .const 'Sub' $P1948 = "186_1335114138.94729" 
    capture_lex $P1948
    .const 'Sub' $P1944 = "185_1335114138.94729" 
    capture_lex $P1944
    .const 'Sub' $P1943 = "184_1335114138.94729" 
    capture_lex $P1943
    .const 'Sub' $P1939 = "183_1335114138.94729" 
    capture_lex $P1939
    .const 'Sub' $P1938 = "182_1335114138.94729" 
    capture_lex $P1938
    .const 'Sub' $P1934 = "181_1335114138.94729" 
    capture_lex $P1934
    .const 'Sub' $P1929 = "178_1335114138.94729" 
    capture_lex $P1929
    .const 'Sub' $P1887 = "177_1335114138.94729" 
    capture_lex $P1887
    .const 'Sub' $P1886 = "176_1335114138.94729" 
    capture_lex $P1886
    .const 'Sub' $P1880 = "175_1335114138.94729" 
    capture_lex $P1880
    .const 'Sub' $P1879 = "174_1335114138.94729" 
    capture_lex $P1879
    .const 'Sub' $P1873 = "173_1335114138.94729" 
    capture_lex $P1873
    .const 'Sub' $P1872 = "172_1335114138.94729" 
    capture_lex $P1872
    .const 'Sub' $P1866 = "171_1335114138.94729" 
    capture_lex $P1866
    .const 'Sub' $P1865 = "170_1335114138.94729" 
    capture_lex $P1865
    .const 'Sub' $P1859 = "169_1335114138.94729" 
    capture_lex $P1859
    .const 'Sub' $P1858 = "168_1335114138.94729" 
    capture_lex $P1858
    .const 'Sub' $P1852 = "167_1335114138.94729" 
    capture_lex $P1852
    .const 'Sub' $P1851 = "166_1335114138.94729" 
    capture_lex $P1851
    .const 'Sub' $P1845 = "165_1335114138.94729" 
    capture_lex $P1845
    .const 'Sub' $P1844 = "164_1335114138.94729" 
    capture_lex $P1844
    .const 'Sub' $P1838 = "163_1335114138.94729" 
    capture_lex $P1838
    .const 'Sub' $P1833 = "160_1335114138.94729" 
    capture_lex $P1833
    .const 'Sub' $P1830 = "159_1335114138.94729" 
    capture_lex $P1830
    .const 'Sub' $P1829 = "158_1335114138.94729" 
    capture_lex $P1829
    .const 'Sub' $P1826 = "157_1335114138.94729" 
    capture_lex $P1826
    .const 'Sub' $P1825 = "156_1335114138.94729" 
    capture_lex $P1825
    .const 'Sub' $P1817 = "155_1335114138.94729" 
    capture_lex $P1817
    .const 'Sub' $P1816 = "154_1335114138.94729" 
    capture_lex $P1816
    .const 'Sub' $P1809 = "153_1335114138.94729" 
    capture_lex $P1809
    .const 'Sub' $P1808 = "152_1335114138.94729" 
    capture_lex $P1808
    .const 'Sub' $P1804 = "151_1335114138.94729" 
    capture_lex $P1804
    .const 'Sub' $P1803 = "150_1335114138.94729" 
    capture_lex $P1803
    .const 'Sub' $P1800 = "149_1335114138.94729" 
    capture_lex $P1800
    .const 'Sub' $P1799 = "148_1335114138.94729" 
    capture_lex $P1799
    .const 'Sub' $P1796 = "147_1335114138.94729" 
    capture_lex $P1796
    .const 'Sub' $P1795 = "146_1335114138.94729" 
    capture_lex $P1795
    .const 'Sub' $P1792 = "145_1335114138.94729" 
    capture_lex $P1792
    .const 'Sub' $P1791 = "144_1335114138.94729" 
    capture_lex $P1791
    .const 'Sub' $P1778 = "143_1335114138.94729" 
    capture_lex $P1778
    .const 'Sub' $P1777 = "142_1335114138.94729" 
    capture_lex $P1777
    .const 'Sub' $P1774 = "141_1335114138.94729" 
    capture_lex $P1774
    .const 'Sub' $P1773 = "140_1335114138.94729" 
    capture_lex $P1773
    .const 'Sub' $P1770 = "139_1335114138.94729" 
    capture_lex $P1770
    .const 'Sub' $P1769 = "138_1335114138.94729" 
    capture_lex $P1769
    .const 'Sub' $P1766 = "137_1335114138.94729" 
    capture_lex $P1766
    .const 'Sub' $P1765 = "136_1335114138.94729" 
    capture_lex $P1765
    .const 'Sub' $P1762 = "135_1335114138.94729" 
    capture_lex $P1762
    .const 'Sub' $P1761 = "134_1335114138.94729" 
    capture_lex $P1761
    .const 'Sub' $P1758 = "133_1335114138.94729" 
    capture_lex $P1758
    .const 'Sub' $P1757 = "132_1335114138.94729" 
    capture_lex $P1757
    .const 'Sub' $P1754 = "131_1335114138.94729" 
    capture_lex $P1754
    .const 'Sub' $P1753 = "130_1335114138.94729" 
    capture_lex $P1753
    .const 'Sub' $P1749 = "129_1335114138.94729" 
    capture_lex $P1749
    .const 'Sub' $P1748 = "128_1335114138.94729" 
    capture_lex $P1748
    .const 'Sub' $P1744 = "127_1335114138.94729" 
    capture_lex $P1744
    .const 'Sub' $P1743 = "126_1335114138.94729" 
    capture_lex $P1743
    .const 'Sub' $P1739 = "125_1335114138.94729" 
    capture_lex $P1739
    .const 'Sub' $P1734 = "122_1335114138.94729" 
    capture_lex $P1734
    .const 'Sub' $P1730 = "121_1335114138.94729" 
    capture_lex $P1730
    .const 'Sub' $P1729 = "120_1335114138.94729" 
    capture_lex $P1729
    .const 'Sub' $P1725 = "119_1335114138.94729" 
    capture_lex $P1725
    .const 'Sub' $P1720 = "116_1335114138.94729" 
    capture_lex $P1720
    .const 'Sub' $P1716 = "115_1335114138.94729" 
    capture_lex $P1716
    .const 'Sub' $P1715 = "114_1335114138.94729" 
    capture_lex $P1715
    .const 'Sub' $P1711 = "113_1335114138.94729" 
    capture_lex $P1711
    .const 'Sub' $P1710 = "112_1335114138.94729" 
    capture_lex $P1710
    .const 'Sub' $P1706 = "111_1335114138.94729" 
    capture_lex $P1706
    .const 'Sub' $P1705 = "110_1335114138.94729" 
    capture_lex $P1705
    .const 'Sub' $P1701 = "109_1335114138.94729" 
    capture_lex $P1701
    .const 'Sub' $P1696 = "106_1335114138.94729" 
    capture_lex $P1696
    .const 'Sub' $P1692 = "105_1335114138.94729" 
    capture_lex $P1692
    .const 'Sub' $P1691 = "104_1335114138.94729" 
    capture_lex $P1691
    .const 'Sub' $P1687 = "103_1335114138.94729" 
    capture_lex $P1687
    .const 'Sub' $P1686 = "102_1335114138.94729" 
    capture_lex $P1686
    .const 'Sub' $P1682 = "101_1335114138.94729" 
    capture_lex $P1682
    .const 'Sub' $P1681 = "100_1335114138.94729" 
    capture_lex $P1681
    .const 'Sub' $P1672 = "99_1335114138.94729" 
    capture_lex $P1672
    .const 'Sub' $P1671 = "98_1335114138.94729" 
    capture_lex $P1671
    .const 'Sub' $P1666 = "97_1335114138.94729" 
    capture_lex $P1666
    .const 'Sub' $P1665 = "96_1335114138.94729" 
    capture_lex $P1665
    .const 'Sub' $P1656 = "95_1335114138.94729" 
    capture_lex $P1656
    .const 'Sub' $P1655 = "94_1335114138.94729" 
    capture_lex $P1655
    .const 'Sub' $P1649 = "93_1335114138.94729" 
    capture_lex $P1649
    .const 'Sub' $P1648 = "92_1335114138.94729" 
    capture_lex $P1648
    .const 'Sub' $P1644 = "91_1335114138.94729" 
    capture_lex $P1644
    .const 'Sub' $P1639 = "88_1335114138.94729" 
    capture_lex $P1639
    .const 'Sub' $P1636 = "87_1335114138.94729" 
    capture_lex $P1636
    .const 'Sub' $P1635 = "86_1335114138.94729" 
    capture_lex $P1635
    .const 'Sub' $P1632 = "85_1335114138.94729" 
    capture_lex $P1632
    .const 'Sub' $P1627 = "82_1335114138.94729" 
    capture_lex $P1627
    .const 'Sub' $P1624 = "81_1335114138.94729" 
    capture_lex $P1624
    .const 'Sub' $P1623 = "80_1335114138.94729" 
    capture_lex $P1623
    .const 'Sub' $P1620 = "79_1335114138.94729" 
    capture_lex $P1620
    .const 'Sub' $P1619 = "78_1335114138.94729" 
    capture_lex $P1619
    .const 'Sub' $P1616 = "77_1335114138.94729" 
    capture_lex $P1616
    .const 'Sub' $P1615 = "76_1335114138.94729" 
    capture_lex $P1615
    .const 'Sub' $P1612 = "75_1335114138.94729" 
    capture_lex $P1612
    .const 'Sub' $P1611 = "74_1335114138.94729" 
    capture_lex $P1611
    .const 'Sub' $P1608 = "73_1335114138.94729" 
    capture_lex $P1608
    .const 'Sub' $P1607 = "72_1335114138.94729" 
    capture_lex $P1607
    .const 'Sub' $P1601 = "71_1335114138.94729" 
    capture_lex $P1601
    .const 'Sub' $P1600 = "70_1335114138.94729" 
    capture_lex $P1600
    .const 'Sub' $P1596 = "69_1335114138.94729" 
    capture_lex $P1596
    .const 'Sub' $P1595 = "68_1335114138.94729" 
    capture_lex $P1595
    .const 'Sub' $P1591 = "67_1335114138.94729" 
    capture_lex $P1591
    .const 'Sub' $P1590 = "66_1335114138.94729" 
    capture_lex $P1590
    .const 'Sub' $P1586 = "65_1335114138.94729" 
    capture_lex $P1586
    .const 'Sub' $P1585 = "64_1335114138.94729" 
    capture_lex $P1585
    .const 'Sub' $P1582 = "63_1335114138.94729" 
    capture_lex $P1582
    .const 'Sub' $P1581 = "62_1335114138.94729" 
    capture_lex $P1581
    .const 'Sub' $P1577 = "61_1335114138.94729" 
    capture_lex $P1577
    .const 'Sub' $P1576 = "60_1335114138.94729" 
    capture_lex $P1576
    .const 'Sub' $P1563 = "59_1335114138.94729" 
    capture_lex $P1563
    .const 'Sub' $P1562 = "58_1335114138.94729" 
    capture_lex $P1562
    .const 'Sub' $P1557 = "57_1335114138.94729" 
    capture_lex $P1557
    .const 'Sub' $P1556 = "56_1335114138.94729" 
    capture_lex $P1556
    .const 'Sub' $P1547 = "55_1335114138.94729" 
    capture_lex $P1547
    .const 'Sub' $P1546 = "54_1335114138.94729" 
    capture_lex $P1546
    .const 'Sub' $P1510 = "53_1335114138.94729" 
    capture_lex $P1510
    .const 'Sub' $P1509 = "52_1335114138.94729" 
    capture_lex $P1509
    .const 'Sub' $P1496 = "51_1335114138.94729" 
    capture_lex $P1496
    .const 'Sub' $P1495 = "50_1335114138.94729" 
    capture_lex $P1495
    .const 'Sub' $P1486 = "49_1335114138.94729" 
    capture_lex $P1486
    .const 'Sub' $P1485 = "48_1335114138.94729" 
    capture_lex $P1485
    .const 'Sub' $P1475 = "47_1335114138.94729" 
    capture_lex $P1475
    .const 'Sub' $P1474 = "46_1335114138.94729" 
    capture_lex $P1474
    .const 'Sub' $P1469 = "45_1335114138.94729" 
    capture_lex $P1469
    .const 'Sub' $P1468 = "44_1335114138.94729" 
    capture_lex $P1468
    .const 'Sub' $P1463 = "43_1335114138.94729" 
    capture_lex $P1463
    .const 'Sub' $P1462 = "42_1335114138.94729" 
    capture_lex $P1462
    .const 'Sub' $P1458 = "41_1335114138.94729" 
    capture_lex $P1458
    .const 'Sub' $P1443 = "40_1335114138.94729" 
    capture_lex $P1443
    .lex "$?PACKAGE", $P1441
    .lex "$?CLASS", $P1442
.annotate 'line', 1251
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1252
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1253
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1254
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1255
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1256
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1257
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1258
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1259
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1260
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1261
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1262
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1263
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1264
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1265
    get_hll_global $P103, "GLOBAL"
    nqp_get_package_through_who $P104, $P103, "NQP"
    get_who $P105, $P104
    set $P106, $P105["Grammar"]
    $P106."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 1364
    .const 'Sub' $P2539 = "405_1335114138.94729" 
    newclosure $P2547, $P2539
.annotate 'line', 634
    .return ($P2547)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "TOP" :anon :subid("40_1335114138.94729") :outer("571_1335114138.94729")
    .param pmc param_1444
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 635
    .lex "self", param_1444
.annotate 'line', 637
    $P1446 = root_new ['parrot';'Hash']
    set $P1445, $P1446
    .lex "%*LANG", $P1445
.annotate 'line', 646
    $P1448 = root_new ['parrot';'Hash']
    set $P1447, $P1448
    .lex "%*HOW", $P1447
.annotate 'line', 653
    new $P103, "Undef"
    set $P1449, $P103
    .lex "$file", $P1449
.annotate 'line', 654
    new $P104, "Undef"
    set $P1450, $P104
    .lex "$source_id", $P1450
.annotate 'line', 656
    new $P105, "Undef"
    set $P1451, $P105
    .lex "$*W", $P1451
.annotate 'line', 660
    new $P106, "Undef"
    set $P1452, $P106
    .lex "$*SCOPE", $P1452
.annotate 'line', 661
    new $P107, "Undef"
    set $P1453, $P107
    .lex "$*MULTINESS", $P1453
.annotate 'line', 662
    new $P108, "Undef"
    set $P1454, $P108
    .lex "$*PKGDECL", $P1454
.annotate 'line', 663
    new $P109, "Undef"
    set $P1455, $P109
    .lex "$*INVOCANT_OK", $P1455
.annotate 'line', 664
    new $P110, "Undef"
    set $P1456, $P110
    .lex "$*RETURN_USED", $P1456
.annotate 'line', 635
    set $P113, $P1445
    unless_null $P113, vivify_1040
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["%LANG"]
    unless_null $P113, vivify_1041
    die "Contextual %*LANG not found"
  vivify_1041:
  vivify_1040:
.annotate 'line', 638
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Regex"]
    set $P117, $P1445
    unless_null $P117, vivify_1042
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1043
    die "Contextual %*LANG not found"
  vivify_1043:
    set $P1445, $P117
  vivify_1042:
    set $P117["Regex"], $P114
.annotate 'line', 639
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["RegexActions"]
    set $P117, $P1445
    unless_null $P117, vivify_1044
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1045
    die "Contextual %*LANG not found"
  vivify_1045:
    set $P1445, $P117
  vivify_1044:
    set $P117["Regex-actions"], $P114
.annotate 'line', 640
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Grammar"]
    set $P117, $P1445
    unless_null $P117, vivify_1046
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1047
    die "Contextual %*LANG not found"
  vivify_1047:
    set $P1445, $P117
  vivify_1046:
    set $P117["MAIN"], $P114
.annotate 'line', 641
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "NQP"
    get_who $P113, $P112
    set $P114, $P113["Actions"]
    set $P117, $P1445
    unless_null $P117, vivify_1048
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["%LANG"]
    unless_null $P117, vivify_1049
    die "Contextual %*LANG not found"
  vivify_1049:
    set $P1445, $P117
  vivify_1048:
    set $P117["MAIN-actions"], $P114
.annotate 'line', 635
    set $P113, $P1447
    unless_null $P113, vivify_1050
    get_hll_global $P111, "GLOBAL"
    get_who $P112, $P111
    set $P113, $P112["%HOW"]
    unless_null $P113, vivify_1051
    die "Contextual %*HOW not found"
  vivify_1051:
  vivify_1050:
.annotate 'line', 647
    get_knowhow $P111
    set $P114, $P1447
    unless_null $P114, vivify_1052
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%HOW"]
    unless_null $P114, vivify_1053
    die "Contextual %*HOW not found"
  vivify_1053:
    set $P1447, $P114
  vivify_1052:
    set $P114["knowhow"], $P111
.annotate 'line', 648
    get_knowhow_attribute $P111
    set $P114, $P1447
    unless_null $P114, vivify_1054
    get_hll_global $P112, "GLOBAL"
    get_who $P113, $P112
    set $P114, $P113["%HOW"]
    unless_null $P114, vivify_1055
    die "Contextual %*HOW not found"
  vivify_1055:
    set $P1447, $P114
  vivify_1054:
    set $P114["knowhow-attr"], $P111
.annotate 'line', 653
    find_caller_lex $P111, "$?FILES"
    set $P1449, $P111
.annotate 'line', 654
    set $P111, param_1444
    nqp_decontainerize $P112, $P111
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "Regex"
    get_who $P115, $P114
    set $P116, $P115["Cursor"]
    getattribute $P117, $P112, $P116, "$!target"
    set $S100, $P117
    nqp_sha1 $S101, $S100
    new $P118, 'String'
    set $P118, $S101
    concat $P119, $P118, "-"
.annotate 'line', 655
    time $N100
    set $S102, $N100
    concat $P120, $P119, $S102
    set $P1450, $P120
.annotate 'line', 656
    set $P112, $P1449
    unless_null $P112, vivify_1056
    new $P112, "Undef"
  vivify_1056:
    isnull $I100, $P112
    if $I100, if_1457
.annotate 'line', 658
    get_hll_global $P119, "GLOBAL"
    nqp_get_package_through_who $P120, $P119, "NQP"
    get_who $P121, $P120
    set $P122, $P121["World"]
    set $P123, $P1450
    unless_null $P123, vivify_1057
    new $P123, "Undef"
  vivify_1057:
    set $P124, $P1449
    unless_null $P124, vivify_1058
    new $P124, "Undef"
  vivify_1058:
    $P125 = $P122."new"($P123 :named("handle"), $P124 :named("description"))
    set $P111, $P125
.annotate 'line', 656
    goto if_1457_end
  if_1457:
.annotate 'line', 657
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "NQP"
    get_who $P115, $P114
    set $P116, $P115["World"]
    set $P117, $P1450
    unless_null $P117, vivify_1059
    new $P117, "Undef"
  vivify_1059:
    $P118 = $P116."new"($P117 :named("handle"))
    set $P111, $P118
  if_1457_end:
.annotate 'line', 656
    set $P1451, $P111
.annotate 'line', 660
    new $P111, "String"
    assign $P111, ""
    set $P1452, $P111
.annotate 'line', 661
    new $P111, "String"
    assign $P111, ""
    set $P1453, $P111
.annotate 'line', 662
    new $P111, "String"
    assign $P111, ""
    set $P1454, $P111
.annotate 'line', 663
    new $P111, "Float"
    assign $P111, 0
    set $P1455, $P111
.annotate 'line', 664
    new $P111, "Float"
    assign $P111, 0
    set $P1456, $P111
.annotate 'line', 665
    set $P111, param_1444
    nqp_decontainerize $P112, $P111
    $P113 = $P112."comp_unit"()
.annotate 'line', 635
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "identifier"  :subid("41_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 670
    .local string rx1459_tgt
    .local int rx1459_pos
    .local int rx1459_off
    .local int rx1459_eos
    .local int rx1459_rep
    .local pmc rx1459_cur
    .local pmc rx1459_debug
    (rx1459_cur, rx1459_pos, rx1459_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1459_cur
    .local pmc match
    .lex "$/", match
    length rx1459_eos, rx1459_tgt
    gt rx1459_pos, rx1459_eos, rx1459_done
    set rx1459_off, 0
    lt rx1459_pos, 2, rx1459_start
    sub rx1459_off, rx1459_pos, 1
    substr rx1459_tgt, rx1459_tgt, rx1459_off
  rx1459_start:
    eq $I10, 1, rx1459_restart
    if_null rx1459_debug, debug_1060
    rx1459_cur."!cursor_debug"("START", "identifier")
  debug_1060:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1460_done
    goto rxscan1460_scan
  rxscan1460_loop:
    (rx1459_pos) = rx1459_cur."from"()
    inc rx1459_pos
    rx1459_cur."!cursor_from"(rx1459_pos)
    ge rx1459_pos, rx1459_eos, rxscan1460_done
  rxscan1460_scan:
    set_addr $I10, rxscan1460_loop
    rx1459_cur."!mark_push"(0, rx1459_pos, $I10)
  rxscan1460_done:
  # rx subrule "ident" subtype=method negate=
    rx1459_cur."!cursor_pos"(rx1459_pos)
    $P10 = rx1459_cur."ident"()
    unless $P10, rx1459_fail
    rx1459_pos = $P10."pos"()
  # rx rxquantr1461 ** 0..*
    set_addr $I10, rxquantr1461_done
    rx1459_cur."!mark_push"(0, rx1459_pos, $I10)
  rxquantr1461_loop:
  # rx enumcharlist negate=0 
    ge rx1459_pos, rx1459_eos, rx1459_fail
    sub $I10, rx1459_pos, rx1459_off
    substr $S10, rx1459_tgt, $I10, 1
    index $I11, "-'", $S10
    lt $I11, 0, rx1459_fail
    inc rx1459_pos
  # rx subrule "ident" subtype=method negate=
    rx1459_cur."!cursor_pos"(rx1459_pos)
    $P10 = rx1459_cur."ident"()
    unless $P10, rx1459_fail
    rx1459_pos = $P10."pos"()
    set_addr $I10, rxquantr1461_done
    (rx1459_rep) = rx1459_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1461_done
    rx1459_cur."!mark_push"(rx1459_rep, rx1459_pos, $I10)
    goto rxquantr1461_loop
  rxquantr1461_done:
  # rx pass
    rx1459_cur."!cursor_pass"(rx1459_pos, "identifier")
    if_null rx1459_debug, debug_1061
    rx1459_cur."!cursor_debug"("PASS", "identifier", " at pos=", rx1459_pos)
  debug_1061:
    .return (rx1459_cur)
  rx1459_restart:
    if_null rx1459_debug, debug_1062
    rx1459_cur."!cursor_debug"("NEXT", "identifier")
  debug_1062:
  rx1459_fail:
    (rx1459_rep, rx1459_pos, $I10, $P10) = rx1459_cur."!mark_fail"(0)
    lt rx1459_pos, -1, rx1459_done
    eq rx1459_pos, -1, rx1459_fail
    jump $I10
  rx1459_done:
    rx1459_cur."!cursor_fail"()
    if_null rx1459_debug, debug_1063
    rx1459_cur."!cursor_debug"("FAIL", "identifier")
  debug_1063:
    .return (rx1459_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__identifier"  :subid("42_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 670
    $P103 = self."!PREFIX__!subrule"("ident", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "name"  :subid("43_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 672
    .local string rx1464_tgt
    .local int rx1464_pos
    .local int rx1464_off
    .local int rx1464_eos
    .local int rx1464_rep
    .local pmc rx1464_cur
    .local pmc rx1464_debug
    (rx1464_cur, rx1464_pos, rx1464_tgt, $I10) = self."!cursor_start"()
    rx1464_cur."!cursor_caparray"("identifier")
    .lex unicode:"$\x{a2}", rx1464_cur
    .local pmc match
    .lex "$/", match
    length rx1464_eos, rx1464_tgt
    gt rx1464_pos, rx1464_eos, rx1464_done
    set rx1464_off, 0
    lt rx1464_pos, 2, rx1464_start
    sub rx1464_off, rx1464_pos, 1
    substr rx1464_tgt, rx1464_tgt, rx1464_off
  rx1464_start:
    eq $I10, 1, rx1464_restart
    if_null rx1464_debug, debug_1064
    rx1464_cur."!cursor_debug"("START", "name")
  debug_1064:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1465_done
    goto rxscan1465_scan
  rxscan1465_loop:
    (rx1464_pos) = rx1464_cur."from"()
    inc rx1464_pos
    rx1464_cur."!cursor_from"(rx1464_pos)
    ge rx1464_pos, rx1464_eos, rxscan1465_done
  rxscan1465_scan:
    set_addr $I10, rxscan1465_loop
    rx1464_cur."!mark_push"(0, rx1464_pos, $I10)
  rxscan1465_done:
  # rx rxquantr1466 ** 1..*
    set_addr $I10, rxquantr1466_done
    rx1464_cur."!mark_push"(0, -1, $I10)
  rxquantr1466_loop:
  # rx subrule "identifier" subtype=capture negate=
    rx1464_cur."!cursor_pos"(rx1464_pos)
    $P10 = rx1464_cur."identifier"()
    unless $P10, rx1464_fail
    goto rxsubrule1467_pass
  rxsubrule1467_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1464_fail
  rxsubrule1467_pass:
    set_addr $I10, rxsubrule1467_back
    rx1464_cur."!mark_push"(0, rx1464_pos, $I10, $P10)
    $P10."!cursor_names"("identifier")
    rx1464_pos = $P10."pos"()
    set_addr $I10, rxquantr1466_done
    (rx1464_rep) = rx1464_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1466_done
    rx1464_cur."!mark_push"(rx1464_rep, rx1464_pos, $I10)
  # rx literal  "::"
    add $I11, rx1464_pos, 2
    gt $I11, rx1464_eos, rx1464_fail
    sub $I11, rx1464_pos, rx1464_off
    substr $S10, rx1464_tgt, $I11, 2
    ne $S10, "::", rx1464_fail
    add rx1464_pos, 2
    goto rxquantr1466_loop
  rxquantr1466_done:
  # rx pass
    rx1464_cur."!cursor_pass"(rx1464_pos, "name")
    if_null rx1464_debug, debug_1065
    rx1464_cur."!cursor_debug"("PASS", "name", " at pos=", rx1464_pos)
  debug_1065:
    .return (rx1464_cur)
  rx1464_restart:
    if_null rx1464_debug, debug_1066
    rx1464_cur."!cursor_debug"("NEXT", "name")
  debug_1066:
  rx1464_fail:
    (rx1464_rep, rx1464_pos, $I10, $P10) = rx1464_cur."!mark_fail"(0)
    lt rx1464_pos, -1, rx1464_done
    eq rx1464_pos, -1, rx1464_fail
    jump $I10
  rx1464_done:
    rx1464_cur."!cursor_fail"()
    if_null rx1464_debug, debug_1067
    rx1464_cur."!cursor_debug"("FAIL", "name")
  debug_1067:
    .return (rx1464_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__name"  :subid("44_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 672
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "deflongname"  :subid("45_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 674
    .local string rx1470_tgt
    .local int rx1470_pos
    .local int rx1470_off
    .local int rx1470_eos
    .local int rx1470_rep
    .local pmc rx1470_cur
    .local pmc rx1470_debug
    (rx1470_cur, rx1470_pos, rx1470_tgt, $I10) = self."!cursor_start"()
    rx1470_cur."!cursor_caparray"("colonpair")
    .lex unicode:"$\x{a2}", rx1470_cur
    .local pmc match
    .lex "$/", match
    length rx1470_eos, rx1470_tgt
    gt rx1470_pos, rx1470_eos, rx1470_done
    set rx1470_off, 0
    lt rx1470_pos, 2, rx1470_start
    sub rx1470_off, rx1470_pos, 1
    substr rx1470_tgt, rx1470_tgt, rx1470_off
  rx1470_start:
    eq $I10, 1, rx1470_restart
    if_null rx1470_debug, debug_1068
    rx1470_cur."!cursor_debug"("START", "deflongname")
  debug_1068:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1471_done
    goto rxscan1471_scan
  rxscan1471_loop:
    (rx1470_pos) = rx1470_cur."from"()
    inc rx1470_pos
    rx1470_cur."!cursor_from"(rx1470_pos)
    ge rx1470_pos, rx1470_eos, rxscan1471_done
  rxscan1471_scan:
    set_addr $I10, rxscan1471_loop
    rx1470_cur."!mark_push"(0, rx1470_pos, $I10)
  rxscan1471_done:
.annotate 'line', 675
  # rx subrule "identifier" subtype=capture negate=
    rx1470_cur."!cursor_pos"(rx1470_pos)
    $P10 = rx1470_cur."identifier"()
    unless $P10, rx1470_fail
    rx1470_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1470_pos = $P10."pos"()
  # rx rxquantr1472 ** 0..1
    set_addr $I10, rxquantr1472_done
    rx1470_cur."!mark_push"(0, rx1470_pos, $I10)
  rxquantr1472_loop:
  # rx subrule "colonpair" subtype=capture negate=
    rx1470_cur."!cursor_pos"(rx1470_pos)
    $P10 = rx1470_cur."colonpair"()
    unless $P10, rx1470_fail
    goto rxsubrule1473_pass
  rxsubrule1473_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1470_fail
  rxsubrule1473_pass:
    set_addr $I10, rxsubrule1473_back
    rx1470_cur."!mark_push"(0, rx1470_pos, $I10, $P10)
    $P10."!cursor_names"("colonpair")
    rx1470_pos = $P10."pos"()
    set_addr $I10, rxquantr1472_done
    (rx1470_rep) = rx1470_cur."!mark_commit"($I10)
  rxquantr1472_done:
.annotate 'line', 674
  # rx pass
    rx1470_cur."!cursor_pass"(rx1470_pos, "deflongname")
    if_null rx1470_debug, debug_1069
    rx1470_cur."!cursor_debug"("PASS", "deflongname", " at pos=", rx1470_pos)
  debug_1069:
    .return (rx1470_cur)
  rx1470_restart:
    if_null rx1470_debug, debug_1070
    rx1470_cur."!cursor_debug"("NEXT", "deflongname")
  debug_1070:
  rx1470_fail:
    (rx1470_rep, rx1470_pos, $I10, $P10) = rx1470_cur."!mark_fail"(0)
    lt rx1470_pos, -1, rx1470_done
    eq rx1470_pos, -1, rx1470_fail
    jump $I10
  rx1470_done:
    rx1470_cur."!cursor_fail"()
    if_null rx1470_debug, debug_1071
    rx1470_cur."!cursor_debug"("FAIL", "deflongname")
  debug_1071:
    .return (rx1470_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__deflongname"  :subid("46_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 674
    $P103 = self."!PREFIX__!subrule"("identifier", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ENDSTMT"  :subid("47_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 678
    .local string rx1476_tgt
    .local int rx1476_pos
    .local int rx1476_off
    .local int rx1476_eos
    .local int rx1476_rep
    .local pmc rx1476_cur
    .local pmc rx1476_debug
    (rx1476_cur, rx1476_pos, rx1476_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1476_cur
    .local pmc match
    .lex "$/", match
    length rx1476_eos, rx1476_tgt
    gt rx1476_pos, rx1476_eos, rx1476_done
    set rx1476_off, 0
    lt rx1476_pos, 2, rx1476_start
    sub rx1476_off, rx1476_pos, 1
    substr rx1476_tgt, rx1476_tgt, rx1476_off
  rx1476_start:
    eq $I10, 1, rx1476_restart
    if_null rx1476_debug, debug_1072
    rx1476_cur."!cursor_debug"("START", "ENDSTMT")
  debug_1072:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1477_done
    goto rxscan1477_scan
  rxscan1477_loop:
    (rx1476_pos) = rx1476_cur."from"()
    inc rx1476_pos
    rx1476_cur."!cursor_from"(rx1476_pos)
    ge rx1476_pos, rx1476_eos, rxscan1477_done
  rxscan1477_scan:
    set_addr $I10, rxscan1477_loop
    rx1476_cur."!mark_push"(0, rx1476_pos, $I10)
  rxscan1477_done:
.annotate 'line', 682
  # rx rxquantr1478 ** 0..1
    set_addr $I10, rxquantr1478_done
    rx1476_cur."!mark_push"(0, rx1476_pos, $I10)
  rxquantr1478_loop:
  alt1479_0:
.annotate 'line', 679
    set_addr $I10, alt1479_1
    rx1476_cur."!mark_push"(0, rx1476_pos, $I10)
.annotate 'line', 680
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1476_pos, rx1476_off
    set rx1476_rep, 0
    sub $I12, rx1476_eos, rx1476_pos
  rxenumcharlistq1480_loop:
    le $I12, 0, rxenumcharlistq1480_done
    substr $S10, rx1476_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1480_done
    inc rx1476_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1480_loop
  rxenumcharlistq1480_done:
    add rx1476_pos, rx1476_pos, rx1476_rep
  # rxanchor eol
    sub $I10, rx1476_pos, rx1476_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1476_tgt, $I10
    if $I11, rxanchor1481_done
    ne rx1476_pos, rx1476_eos, rx1476_fail
    eq rx1476_pos, 0, rxanchor1481_done
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1476_tgt, $I10
    if $I11, rx1476_fail
  rxanchor1481_done:
  # rx subrule "ws" subtype=method negate=
    rx1476_cur."!cursor_pos"(rx1476_pos)
    $P10 = rx1476_cur."ws"()
    unless $P10, rx1476_fail
    rx1476_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1476_cur."!cursor_pos"(rx1476_pos)
    $P10 = rx1476_cur."MARKER"("endstmt")
    unless $P10, rx1476_fail
    goto alt1479_end
  alt1479_1:
.annotate 'line', 681
  # rx rxquantr1482 ** 0..1
    set_addr $I10, rxquantr1482_done
    rx1476_cur."!mark_push"(0, rx1476_pos, $I10)
  rxquantr1482_loop:
  # rx subrule "unv" subtype=method negate=
    rx1476_cur."!cursor_pos"(rx1476_pos)
    $P10 = rx1476_cur."unv"()
    unless $P10, rx1476_fail
    goto rxsubrule1483_pass
  rxsubrule1483_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1476_fail
  rxsubrule1483_pass:
    set_addr $I10, rxsubrule1483_back
    rx1476_cur."!mark_push"(0, rx1476_pos, $I10, $P10)
    rx1476_pos = $P10."pos"()
    set_addr $I10, rxquantr1482_done
    (rx1476_rep) = rx1476_cur."!mark_commit"($I10)
  rxquantr1482_done:
  # rxanchor eol
    sub $I10, rx1476_pos, rx1476_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1476_tgt, $I10
    if $I11, rxanchor1484_done
    ne rx1476_pos, rx1476_eos, rx1476_fail
    eq rx1476_pos, 0, rxanchor1484_done
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1476_tgt, $I10
    if $I11, rx1476_fail
  rxanchor1484_done:
  # rx subrule "ws" subtype=method negate=
    rx1476_cur."!cursor_pos"(rx1476_pos)
    $P10 = rx1476_cur."ws"()
    unless $P10, rx1476_fail
    rx1476_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1476_cur."!cursor_pos"(rx1476_pos)
    $P10 = rx1476_cur."MARKER"("endstmt")
    unless $P10, rx1476_fail
  alt1479_end:
.annotate 'line', 682
    set_addr $I10, rxquantr1478_done
    (rx1476_rep) = rx1476_cur."!mark_commit"($I10)
  rxquantr1478_done:
.annotate 'line', 678
  # rx pass
    rx1476_cur."!cursor_pass"(rx1476_pos, "ENDSTMT")
    if_null rx1476_debug, debug_1073
    rx1476_cur."!cursor_debug"("PASS", "ENDSTMT", " at pos=", rx1476_pos)
  debug_1073:
    .return (rx1476_cur)
  rx1476_restart:
    if_null rx1476_debug, debug_1074
    rx1476_cur."!cursor_debug"("NEXT", "ENDSTMT")
  debug_1074:
  rx1476_fail:
    (rx1476_rep, rx1476_pos, $I10, $P10) = rx1476_cur."!mark_fail"(0)
    lt rx1476_pos, -1, rx1476_done
    eq rx1476_pos, -1, rx1476_fail
    jump $I10
  rx1476_done:
    rx1476_cur."!cursor_fail"()
    if_null rx1476_debug, debug_1075
    rx1476_cur."!cursor_debug"("FAIL", "ENDSTMT")
  debug_1075:
    .return (rx1476_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ENDSTMT"  :subid("48_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 678
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ws"  :subid("49_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 685
    .local string rx1487_tgt
    .local int rx1487_pos
    .local int rx1487_off
    .local int rx1487_eos
    .local int rx1487_rep
    .local pmc rx1487_cur
    .local pmc rx1487_debug
    (rx1487_cur, rx1487_pos, rx1487_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1487_cur
    .local pmc match
    .lex "$/", match
    length rx1487_eos, rx1487_tgt
    gt rx1487_pos, rx1487_eos, rx1487_done
    set rx1487_off, 0
    lt rx1487_pos, 2, rx1487_start
    sub rx1487_off, rx1487_pos, 1
    substr rx1487_tgt, rx1487_tgt, rx1487_off
  rx1487_start:
    eq $I10, 1, rx1487_restart
    if_null rx1487_debug, debug_1076
    rx1487_cur."!cursor_debug"("START", "ws")
  debug_1076:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1488_done
    goto rxscan1488_scan
  rxscan1488_loop:
    (rx1487_pos) = rx1487_cur."from"()
    inc rx1487_pos
    rx1487_cur."!cursor_from"(rx1487_pos)
    ge rx1487_pos, rx1487_eos, rxscan1488_done
  rxscan1488_scan:
    set_addr $I10, rxscan1488_loop
    rx1487_cur."!mark_push"(0, rx1487_pos, $I10)
  rxscan1488_done:
  alt1489_0:
    set_addr $I10, alt1489_1
    rx1487_cur."!mark_push"(0, rx1487_pos, $I10)
.annotate 'line', 686
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1487_cur."!cursor_pos"(rx1487_pos)
    $P10 = rx1487_cur."MARKED"("ws")
    unless $P10, rx1487_fail
    goto alt1489_end
  alt1489_1:
.annotate 'line', 687
  # rx subrule "ww" subtype=zerowidth negate=1
    rx1487_cur."!cursor_pos"(rx1487_pos)
    $P10 = rx1487_cur."ww"()
    if $P10, rx1487_fail
.annotate 'line', 692
  # rx rxquantr1490 ** 0..*
    set_addr $I10, rxquantr1490_done
    rx1487_cur."!mark_push"(0, rx1487_pos, $I10)
  rxquantr1490_loop:
  alt1491_0:
.annotate 'line', 688
    set_addr $I10, alt1491_1
    rx1487_cur."!mark_push"(0, rx1487_pos, $I10)
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1487_pos, rx1487_off
    set rx1487_rep, 0
    sub $I12, rx1487_eos, rx1487_pos
  rxenumcharlistq1492_loop:
    le $I12, 0, rxenumcharlistq1492_done
    substr $S10, rx1487_tgt, $I10, 1
    index $I11, unicode:"\n\x{b}\f\r\x{85}\u2028\u2029", $S10
    lt $I11, 0, rxenumcharlistq1492_done
    inc rx1487_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1492_loop
  rxenumcharlistq1492_done:
    lt rx1487_rep, 1, rx1487_fail
    add rx1487_pos, rx1487_pos, rx1487_rep
    goto alt1491_end
  alt1491_1:
    set_addr $I10, alt1491_2
    rx1487_cur."!mark_push"(0, rx1487_pos, $I10)
.annotate 'line', 689
  # rx literal  "#"
    add $I11, rx1487_pos, 1
    gt $I11, rx1487_eos, rx1487_fail
    sub $I11, rx1487_pos, rx1487_off
    ord $I11, rx1487_tgt, $I11
    ne $I11, 35, rx1487_fail
    add rx1487_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx1487_pos, rx1487_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1487_tgt, $I10, rx1487_eos
    add rx1487_pos, rx1487_off, $I11
    goto alt1491_end
  alt1491_2:
    set_addr $I10, alt1491_3
    rx1487_cur."!mark_push"(0, rx1487_pos, $I10)
.annotate 'line', 690
  # rxanchor bol
    eq rx1487_pos, 0, rxanchor1493_done
    ge rx1487_pos, rx1487_eos, rx1487_fail
    sub $I10, rx1487_pos, rx1487_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1487_tgt, $I10
    unless $I11, rx1487_fail
  rxanchor1493_done:
  # rx subrule "pod_comment" subtype=method negate=
    rx1487_cur."!cursor_pos"(rx1487_pos)
    $P10 = rx1487_cur."pod_comment"()
    unless $P10, rx1487_fail
    rx1487_pos = $P10."pos"()
    goto alt1491_end
  alt1491_3:
.annotate 'line', 691
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1487_pos, rx1487_off
    set rx1487_rep, 0
    sub $I12, rx1487_eos, rx1487_pos
  rxenumcharlistq1494_loop:
    le $I12, 0, rxenumcharlistq1494_done
    substr $S10, rx1487_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1494_done
    inc rx1487_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1494_loop
  rxenumcharlistq1494_done:
    lt rx1487_rep, 1, rx1487_fail
    add rx1487_pos, rx1487_pos, rx1487_rep
  alt1491_end:
.annotate 'line', 692
    set_addr $I10, rxquantr1490_done
    (rx1487_rep) = rx1487_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1490_done
    rx1487_cur."!mark_push"(rx1487_rep, rx1487_pos, $I10)
    goto rxquantr1490_loop
  rxquantr1490_done:
.annotate 'line', 693
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1487_cur."!cursor_pos"(rx1487_pos)
    $P10 = rx1487_cur."MARKER"("ws")
    unless $P10, rx1487_fail
  alt1489_end:
.annotate 'line', 685
  # rx pass
    rx1487_cur."!cursor_pass"(rx1487_pos, "ws")
    if_null rx1487_debug, debug_1077
    rx1487_cur."!cursor_debug"("PASS", "ws", " at pos=", rx1487_pos)
  debug_1077:
    .return (rx1487_cur)
  rx1487_restart:
    if_null rx1487_debug, debug_1078
    rx1487_cur."!cursor_debug"("NEXT", "ws")
  debug_1078:
  rx1487_fail:
    (rx1487_rep, rx1487_pos, $I10, $P10) = rx1487_cur."!mark_fail"(0)
    lt rx1487_pos, -1, rx1487_done
    eq rx1487_pos, -1, rx1487_fail
    jump $I10
  rx1487_done:
    rx1487_cur."!cursor_fail"()
    if_null rx1487_debug, debug_1079
    rx1487_cur."!cursor_debug"("FAIL", "ws")
  debug_1079:
    .return (rx1487_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ws"  :subid("50_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 685
    new $P103, "ResizablePMCArray"
    push $P103, ""
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "unv"  :subid("51_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 696
    .const 'Sub' $P1502 = "572_1335114138.94729" 
    capture_lex $P1502
    .local string rx1497_tgt
    .local int rx1497_pos
    .local int rx1497_off
    .local int rx1497_eos
    .local int rx1497_rep
    .local pmc rx1497_cur
    .local pmc rx1497_debug
    (rx1497_cur, rx1497_pos, rx1497_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1497_cur
    .local pmc match
    .lex "$/", match
    length rx1497_eos, rx1497_tgt
    gt rx1497_pos, rx1497_eos, rx1497_done
    set rx1497_off, 0
    lt rx1497_pos, 2, rx1497_start
    sub rx1497_off, rx1497_pos, 1
    substr rx1497_tgt, rx1497_tgt, rx1497_off
  rx1497_start:
    eq $I10, 1, rx1497_restart
    if_null rx1497_debug, debug_1080
    rx1497_cur."!cursor_debug"("START", "unv")
  debug_1080:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1498_done
    goto rxscan1498_scan
  rxscan1498_loop:
    (rx1497_pos) = rx1497_cur."from"()
    inc rx1497_pos
    rx1497_cur."!cursor_from"(rx1497_pos)
    ge rx1497_pos, rx1497_eos, rxscan1498_done
  rxscan1498_scan:
    set_addr $I10, rxscan1498_loop
    rx1497_cur."!mark_push"(0, rx1497_pos, $I10)
  rxscan1498_done:
  alt1499_0:
.annotate 'line', 698
    set_addr $I10, alt1499_1
    rx1497_cur."!mark_push"(0, rx1497_pos, $I10)
.annotate 'line', 699
  # rxanchor bol
    eq rx1497_pos, 0, rxanchor1500_done
    ge rx1497_pos, rx1497_eos, rx1497_fail
    sub $I10, rx1497_pos, rx1497_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1497_tgt, $I10
    unless $I11, rx1497_fail
  rxanchor1500_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx1497_cur."!cursor_pos"(rx1497_pos)
    .const 'Sub' $P1502 = "572_1335114138.94729" 
    capture_lex $P1502
    $P10 = rx1497_cur."before"($P1502)
    unless $P10, rx1497_fail
  # rx subrule "pod_comment" subtype=method negate=
    rx1497_cur."!cursor_pos"(rx1497_pos)
    $P10 = rx1497_cur."pod_comment"()
    unless $P10, rx1497_fail
    rx1497_pos = $P10."pos"()
    goto alt1499_end
  alt1499_1:
    set_addr $I10, alt1499_2
    rx1497_cur."!mark_push"(0, rx1497_pos, $I10)
.annotate 'line', 700
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1497_pos, rx1497_off
    set rx1497_rep, 0
    sub $I12, rx1497_eos, rx1497_pos
  rxenumcharlistq1507_loop:
    le $I12, 0, rxenumcharlistq1507_done
    substr $S10, rx1497_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1507_done
    inc rx1497_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1507_loop
  rxenumcharlistq1507_done:
    add rx1497_pos, rx1497_pos, rx1497_rep
  # rx literal  "#"
    add $I11, rx1497_pos, 1
    gt $I11, rx1497_eos, rx1497_fail
    sub $I11, rx1497_pos, rx1497_off
    ord $I11, rx1497_tgt, $I11
    ne $I11, 35, rx1497_fail
    add rx1497_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx1497_pos, rx1497_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1497_tgt, $I10, rx1497_eos
    add rx1497_pos, rx1497_off, $I11
    goto alt1499_end
  alt1499_2:
.annotate 'line', 701
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1497_pos, rx1497_off
    set rx1497_rep, 0
    sub $I12, rx1497_eos, rx1497_pos
  rxenumcharlistq1508_loop:
    le $I12, 0, rxenumcharlistq1508_done
    substr $S10, rx1497_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1508_done
    inc rx1497_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1508_loop
  rxenumcharlistq1508_done:
    lt rx1497_rep, 1, rx1497_fail
    add rx1497_pos, rx1497_pos, rx1497_rep
  alt1499_end:
.annotate 'line', 696
  # rx pass
    rx1497_cur."!cursor_pass"(rx1497_pos, "unv")
    if_null rx1497_debug, debug_1085
    rx1497_cur."!cursor_debug"("PASS", "unv", " at pos=", rx1497_pos)
  debug_1085:
    .return (rx1497_cur)
  rx1497_restart:
    if_null rx1497_debug, debug_1086
    rx1497_cur."!cursor_debug"("NEXT", "unv")
  debug_1086:
  rx1497_fail:
    (rx1497_rep, rx1497_pos, $I10, $P10) = rx1497_cur."!mark_fail"(0)
    lt rx1497_pos, -1, rx1497_done
    eq rx1497_pos, -1, rx1497_fail
    jump $I10
  rx1497_done:
    rx1497_cur."!cursor_fail"()
    if_null rx1497_debug, debug_1087
    rx1497_cur."!cursor_debug"("FAIL", "unv")
  debug_1087:
    .return (rx1497_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1501"  :anon :subid("572_1335114138.94729") :method :outer("51_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 699
    .local string rx1503_tgt
    .local int rx1503_pos
    .local int rx1503_off
    .local int rx1503_eos
    .local int rx1503_rep
    .local pmc rx1503_cur
    .local pmc rx1503_debug
    (rx1503_cur, rx1503_pos, rx1503_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1503_cur
    .local pmc match
    .lex "$/", match
    length rx1503_eos, rx1503_tgt
    gt rx1503_pos, rx1503_eos, rx1503_done
    set rx1503_off, 0
    lt rx1503_pos, 2, rx1503_start
    sub rx1503_off, rx1503_pos, 1
    substr rx1503_tgt, rx1503_tgt, rx1503_off
  rx1503_start:
    eq $I10, 1, rx1503_restart
    if_null rx1503_debug, debug_1081
    rx1503_cur."!cursor_debug"("START", "")
  debug_1081:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1504_done
    goto rxscan1504_scan
  rxscan1504_loop:
    (rx1503_pos) = rx1503_cur."from"()
    inc rx1503_pos
    rx1503_cur."!cursor_from"(rx1503_pos)
    ge rx1503_pos, rx1503_eos, rxscan1504_done
  rxscan1504_scan:
    set_addr $I10, rxscan1504_loop
    rx1503_cur."!mark_push"(0, rx1503_pos, $I10)
  rxscan1504_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1503_pos, rx1503_off
    set rx1503_rep, 0
    sub $I12, rx1503_eos, rx1503_pos
  rxenumcharlistq1505_loop:
    le $I12, 0, rxenumcharlistq1505_done
    substr $S10, rx1503_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1505_done
    inc rx1503_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1505_loop
  rxenumcharlistq1505_done:
    add rx1503_pos, rx1503_pos, rx1503_rep
  # rx literal  "="
    add $I11, rx1503_pos, 1
    gt $I11, rx1503_eos, rx1503_fail
    sub $I11, rx1503_pos, rx1503_off
    ord $I11, rx1503_tgt, $I11
    ne $I11, 61, rx1503_fail
    add rx1503_pos, 1
  alt1506_0:
    set_addr $I10, alt1506_1
    rx1503_cur."!mark_push"(0, rx1503_pos, $I10)
  # rx charclass w
    ge rx1503_pos, rx1503_eos, rx1503_fail
    sub $I10, rx1503_pos, rx1503_off
    is_cclass $I11, .CCLASS_WORD, rx1503_tgt, $I10
    unless $I11, rx1503_fail
    inc rx1503_pos
    goto alt1506_end
  alt1506_1:
  # rx literal  "\\"
    add $I11, rx1503_pos, 1
    gt $I11, rx1503_eos, rx1503_fail
    sub $I11, rx1503_pos, rx1503_off
    ord $I11, rx1503_tgt, $I11
    ne $I11, 92, rx1503_fail
    add rx1503_pos, 1
  alt1506_end:
  # rx pass
    rx1503_cur."!cursor_pass"(rx1503_pos, "")
    if_null rx1503_debug, debug_1082
    rx1503_cur."!cursor_debug"("PASS", "", " at pos=", rx1503_pos)
  debug_1082:
    .return (rx1503_cur)
  rx1503_restart:
    if_null rx1503_debug, debug_1083
    rx1503_cur."!cursor_debug"("NEXT", "")
  debug_1083:
  rx1503_fail:
    (rx1503_rep, rx1503_pos, $I10, $P10) = rx1503_cur."!mark_fail"(0)
    lt rx1503_pos, -1, rx1503_done
    eq rx1503_pos, -1, rx1503_fail
    jump $I10
  rx1503_done:
    rx1503_cur."!cursor_fail"()
    if_null rx1503_debug, debug_1084
    rx1503_cur."!cursor_debug"("FAIL", "")
  debug_1084:
    .return (rx1503_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__unv"  :subid("52_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 696
    new $P103, "ResizablePMCArray"
    push $P103, ""
    push $P103, ""
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pod_comment"  :subid("53_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 705
    .const 'Sub' $P1539 = "573_1335114138.94729" 
    capture_lex $P1539
    .local string rx1511_tgt
    .local int rx1511_pos
    .local int rx1511_off
    .local int rx1511_eos
    .local int rx1511_rep
    .local pmc rx1511_cur
    .local pmc rx1511_debug
    (rx1511_cur, rx1511_pos, rx1511_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1511_cur
    .local pmc match
    .lex "$/", match
    length rx1511_eos, rx1511_tgt
    gt rx1511_pos, rx1511_eos, rx1511_done
    set rx1511_off, 0
    lt rx1511_pos, 2, rx1511_start
    sub rx1511_off, rx1511_pos, 1
    substr rx1511_tgt, rx1511_tgt, rx1511_off
  rx1511_start:
    eq $I10, 1, rx1511_restart
    if_null rx1511_debug, debug_1088
    rx1511_cur."!cursor_debug"("START", "pod_comment")
  debug_1088:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1512_done
    goto rxscan1512_scan
  rxscan1512_loop:
    (rx1511_pos) = rx1511_cur."from"()
    inc rx1511_pos
    rx1511_cur."!cursor_from"(rx1511_pos)
    ge rx1511_pos, rx1511_eos, rxscan1512_done
  rxscan1512_scan:
    set_addr $I10, rxscan1512_loop
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
  rxscan1512_done:
.annotate 'line', 706
  # rxanchor bol
    eq rx1511_pos, 0, rxanchor1513_done
    ge rx1511_pos, rx1511_eos, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10
    unless $I11, rx1511_fail
  rxanchor1513_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    set rx1511_rep, 0
    sub $I12, rx1511_eos, rx1511_pos
  rxenumcharlistq1514_loop:
    le $I12, 0, rxenumcharlistq1514_done
    substr $S10, rx1511_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1514_done
    inc rx1511_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1514_loop
  rxenumcharlistq1514_done:
    add rx1511_pos, rx1511_pos, rx1511_rep
  # rx literal  "="
    add $I11, rx1511_pos, 1
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    ord $I11, rx1511_tgt, $I11
    ne $I11, 61, rx1511_fail
    add rx1511_pos, 1
  alt1515_0:
.annotate 'line', 707
    set_addr $I10, alt1515_1
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
.annotate 'line', 708
  # rx literal  "begin"
    add $I11, rx1511_pos, 5
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    substr $S10, rx1511_tgt, $I11, 5
    ne $S10, "begin", rx1511_fail
    add rx1511_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1511_pos, rx1511_off
    set rx1511_rep, 0
    sub $I12, rx1511_eos, rx1511_pos
  rxenumcharlistq1516_loop:
    le $I12, 0, rxenumcharlistq1516_done
    substr $S10, rx1511_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1516_done
    inc rx1511_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1516_loop
  rxenumcharlistq1516_done:
    lt rx1511_rep, 1, rx1511_fail
    add rx1511_pos, rx1511_pos, rx1511_rep
  # rx literal  "END"
    add $I11, rx1511_pos, 3
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    substr $S10, rx1511_tgt, $I11, 3
    ne $S10, "END", rx1511_fail
    add rx1511_pos, 3
  # rxanchor rwb
    le rx1511_pos, 0, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    if $I11, rx1511_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    unless $I11, rx1511_fail
  alt1517_0:
.annotate 'line', 709
    set_addr $I10, alt1517_1
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
  # rx rxquantf1518 ** 0..*
    set_addr $I10, rxquantf1518_loop
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
    goto rxquantf1518_done
  rxquantf1518_loop:
  # rx charclass .
    ge rx1511_pos, rx1511_eos, rx1511_fail
    inc rx1511_pos
    set_addr $I10, rxquantf1518_loop
    rx1511_cur."!mark_push"(rx1511_rep, rx1511_pos, $I10)
  rxquantf1518_done:
  # rx charclass nl
    ge rx1511_pos, rx1511_eos, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10
    unless $I11, rx1511_fail
    substr $S10, rx1511_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1511_pos, $I11
    inc rx1511_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    set rx1511_rep, 0
    sub $I12, rx1511_eos, rx1511_pos
  rxenumcharlistq1520_loop:
    le $I12, 0, rxenumcharlistq1520_done
    substr $S10, rx1511_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1520_done
    inc rx1511_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1520_loop
  rxenumcharlistq1520_done:
    add rx1511_pos, rx1511_pos, rx1511_rep
  # rx literal  "=end"
    add $I11, rx1511_pos, 4
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    substr $S10, rx1511_tgt, $I11, 4
    ne $S10, "=end", rx1511_fail
    add rx1511_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1511_pos, rx1511_off
    set rx1511_rep, 0
    sub $I12, rx1511_eos, rx1511_pos
  rxenumcharlistq1521_loop:
    le $I12, 0, rxenumcharlistq1521_done
    substr $S10, rx1511_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1521_done
    inc rx1511_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1521_loop
  rxenumcharlistq1521_done:
    lt rx1511_rep, 1, rx1511_fail
    add rx1511_pos, rx1511_pos, rx1511_rep
  # rx literal  "END"
    add $I11, rx1511_pos, 3
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    substr $S10, rx1511_tgt, $I11, 3
    ne $S10, "END", rx1511_fail
    add rx1511_pos, 3
  # rxanchor rwb
    le rx1511_pos, 0, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    if $I11, rx1511_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    unless $I11, rx1511_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10, rx1511_eos
    add rx1511_pos, rx1511_off, $I11
    goto alt1517_end
  alt1517_1:
  # rx charclass_q . r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    find_not_cclass $I11, .CCLASS_ANY, rx1511_tgt, $I10, rx1511_eos
    add rx1511_pos, rx1511_off, $I11
  alt1517_end:
.annotate 'line', 708
    goto alt1515_end
  alt1515_1:
    set_addr $I10, alt1515_2
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
.annotate 'line', 710
  # rx literal  "begin"
    add $I11, rx1511_pos, 5
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    substr $S10, rx1511_tgt, $I11, 5
    ne $S10, "begin", rx1511_fail
    add rx1511_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1511_pos, rx1511_off
    set rx1511_rep, 0
    sub $I12, rx1511_eos, rx1511_pos
  rxenumcharlistq1522_loop:
    le $I12, 0, rxenumcharlistq1522_done
    substr $S10, rx1511_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1522_done
    inc rx1511_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1522_loop
  rxenumcharlistq1522_done:
    lt rx1511_rep, 1, rx1511_fail
    add rx1511_pos, rx1511_pos, rx1511_rep
  # rx subrule "identifier" subtype=capture negate=
    rx1511_cur."!cursor_pos"(rx1511_pos)
    $P10 = rx1511_cur."identifier"()
    unless $P10, rx1511_fail
    rx1511_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1511_pos = $P10."pos"()
  alt1523_0:
.annotate 'line', 711
    set_addr $I10, alt1523_1
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
.annotate 'line', 712
  # rx rxquantf1524 ** 0..*
    set_addr $I10, rxquantf1524_loop
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
    goto rxquantf1524_done
  rxquantf1524_loop:
  # rx charclass .
    ge rx1511_pos, rx1511_eos, rx1511_fail
    inc rx1511_pos
    set_addr $I10, rxquantf1524_loop
    rx1511_cur."!mark_push"(rx1511_rep, rx1511_pos, $I10)
  rxquantf1524_done:
  # rx charclass nl
    ge rx1511_pos, rx1511_eos, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10
    unless $I11, rx1511_fail
    substr $S10, rx1511_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1511_pos, $I11
    inc rx1511_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    set rx1511_rep, 0
    sub $I12, rx1511_eos, rx1511_pos
  rxenumcharlistq1526_loop:
    le $I12, 0, rxenumcharlistq1526_done
    substr $S10, rx1511_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1526_done
    inc rx1511_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1526_loop
  rxenumcharlistq1526_done:
    add rx1511_pos, rx1511_pos, rx1511_rep
  # rx literal  "=end"
    add $I11, rx1511_pos, 4
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    substr $S10, rx1511_tgt, $I11, 4
    ne $S10, "=end", rx1511_fail
    add rx1511_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1511_pos, rx1511_off
    set rx1511_rep, 0
    sub $I12, rx1511_eos, rx1511_pos
  rxenumcharlistq1527_loop:
    le $I12, 0, rxenumcharlistq1527_done
    substr $S10, rx1511_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1527_done
    inc rx1511_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1527_loop
  rxenumcharlistq1527_done:
    lt rx1511_rep, 1, rx1511_fail
    add rx1511_pos, rx1511_pos, rx1511_rep
  # rx subrule "!BACKREF" subtype=method negate=
    rx1511_cur."!cursor_pos"(rx1511_pos)
    $P10 = rx1511_cur."!BACKREF"("identifier")
    unless $P10, rx1511_fail
    rx1511_pos = $P10."pos"()
  # rxanchor rwb
    le rx1511_pos, 0, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    if $I11, rx1511_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    unless $I11, rx1511_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10, rx1511_eos
    add rx1511_pos, rx1511_off, $I11
    goto alt1523_end
  alt1523_1:
.annotate 'line', 713
  # rx subrule "panic" subtype=method negate=
    rx1511_cur."!cursor_pos"(rx1511_pos)
    $P10 = rx1511_cur."panic"("=begin without matching =end")
    unless $P10, rx1511_fail
    rx1511_pos = $P10."pos"()
  alt1523_end:
.annotate 'line', 710
    goto alt1515_end
  alt1515_2:
    set_addr $I10, alt1515_3
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
.annotate 'line', 715
  # rx literal  "begin"
    add $I11, rx1511_pos, 5
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    substr $S10, rx1511_tgt, $I11, 5
    ne $S10, "begin", rx1511_fail
    add rx1511_pos, 5
  # rxanchor rwb
    le rx1511_pos, 0, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    if $I11, rx1511_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    unless $I11, rx1511_fail
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    set rx1511_rep, 0
    sub $I12, rx1511_eos, rx1511_pos
  rxenumcharlistq1528_loop:
    le $I12, 0, rxenumcharlistq1528_done
    substr $S10, rx1511_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1528_done
    inc rx1511_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1528_loop
  rxenumcharlistq1528_done:
    add rx1511_pos, rx1511_pos, rx1511_rep
  alt1529_0:
.annotate 'line', 716
    set_addr $I10, alt1529_1
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
  # rxanchor eol
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10
    if $I11, rxanchor1530_done
    ne rx1511_pos, rx1511_eos, rx1511_fail
    eq rx1511_pos, 0, rxanchor1530_done
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10
    if $I11, rx1511_fail
  rxanchor1530_done:
    goto alt1529_end
  alt1529_1:
    set_addr $I10, alt1529_2
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
  # rx literal  "#"
    add $I11, rx1511_pos, 1
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    ord $I11, rx1511_tgt, $I11
    ne $I11, 35, rx1511_fail
    add rx1511_pos, 1
    goto alt1529_end
  alt1529_2:
  # rx subrule "panic" subtype=method negate=
    rx1511_cur."!cursor_pos"(rx1511_pos)
    $P10 = rx1511_cur."panic"("Unrecognized token after =begin")
    unless $P10, rx1511_fail
    rx1511_pos = $P10."pos"()
  alt1529_end:
  alt1531_0:
.annotate 'line', 717
    set_addr $I10, alt1531_1
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
.annotate 'line', 718
  # rx rxquantf1532 ** 0..*
    set_addr $I10, rxquantf1532_loop
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
    goto rxquantf1532_done
  rxquantf1532_loop:
  # rx charclass .
    ge rx1511_pos, rx1511_eos, rx1511_fail
    inc rx1511_pos
    set_addr $I10, rxquantf1532_loop
    rx1511_cur."!mark_push"(rx1511_rep, rx1511_pos, $I10)
  rxquantf1532_done:
  # rx charclass nl
    ge rx1511_pos, rx1511_eos, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10
    unless $I11, rx1511_fail
    substr $S10, rx1511_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1511_pos, $I11
    inc rx1511_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    set rx1511_rep, 0
    sub $I12, rx1511_eos, rx1511_pos
  rxenumcharlistq1534_loop:
    le $I12, 0, rxenumcharlistq1534_done
    substr $S10, rx1511_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1534_done
    inc rx1511_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1534_loop
  rxenumcharlistq1534_done:
    add rx1511_pos, rx1511_pos, rx1511_rep
  # rx literal  "=end"
    add $I11, rx1511_pos, 4
    gt $I11, rx1511_eos, rx1511_fail
    sub $I11, rx1511_pos, rx1511_off
    substr $S10, rx1511_tgt, $I11, 4
    ne $S10, "=end", rx1511_fail
    add rx1511_pos, 4
  # rxanchor rwb
    le rx1511_pos, 0, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    if $I11, rx1511_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1511_tgt, $I10
    unless $I11, rx1511_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10, rx1511_eos
    add rx1511_pos, rx1511_off, $I11
    goto alt1531_end
  alt1531_1:
.annotate 'line', 719
  # rx subrule "panic" subtype=method negate=
    rx1511_cur."!cursor_pos"(rx1511_pos)
    $P10 = rx1511_cur."panic"("=begin without matching =end")
    unless $P10, rx1511_fail
    rx1511_pos = $P10."pos"()
  alt1531_end:
.annotate 'line', 715
    goto alt1515_end
  alt1515_3:
    set_addr $I10, alt1515_4
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
.annotate 'line', 721
  # rx subrule "identifier" subtype=capture negate=
    rx1511_cur."!cursor_pos"(rx1511_pos)
    $P10 = rx1511_cur."identifier"()
    unless $P10, rx1511_fail
    rx1511_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1511_pos = $P10."pos"()
.annotate 'line', 722
  # rx rxquantf1535 ** 0..*
    set_addr $I10, rxquantf1535_loop
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
    goto rxquantf1535_done
  rxquantf1535_loop:
  # rx charclass .
    ge rx1511_pos, rx1511_eos, rx1511_fail
    inc rx1511_pos
    set_addr $I10, rxquantf1535_loop
    rx1511_cur."!mark_push"(rx1511_rep, rx1511_pos, $I10)
  rxquantf1535_done:
  # rxanchor bol
    eq rx1511_pos, 0, rxanchor1537_done
    ge rx1511_pos, rx1511_eos, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    dec $I10
    is_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10
    unless $I11, rx1511_fail
  rxanchor1537_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx1511_cur."!cursor_pos"(rx1511_pos)
    .const 'Sub' $P1539 = "573_1335114138.94729" 
    capture_lex $P1539
    $P10 = rx1511_cur."before"($P1539)
    unless $P10, rx1511_fail
.annotate 'line', 721
    goto alt1515_end
  alt1515_4:
  alt1545_0:
.annotate 'line', 728
    set_addr $I10, alt1545_1
    rx1511_cur."!mark_push"(0, rx1511_pos, $I10)
  # rx charclass s
    ge rx1511_pos, rx1511_eos, rx1511_fail
    sub $I10, rx1511_pos, rx1511_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1511_tgt, $I10
    unless $I11, rx1511_fail
    inc rx1511_pos
    goto alt1545_end
  alt1545_1:
  # rx subrule "panic" subtype=method negate=
    rx1511_cur."!cursor_pos"(rx1511_pos)
    $P10 = rx1511_cur."panic"("Illegal pod directive")
    unless $P10, rx1511_fail
    rx1511_pos = $P10."pos"()
  alt1545_end:
.annotate 'line', 729
  # rx charclass_q N r 0..-1
    sub $I10, rx1511_pos, rx1511_off
    find_cclass $I11, .CCLASS_NEWLINE, rx1511_tgt, $I10, rx1511_eos
    add rx1511_pos, rx1511_off, $I11
  alt1515_end:
.annotate 'line', 705
  # rx pass
    rx1511_cur."!cursor_pass"(rx1511_pos, "pod_comment")
    if_null rx1511_debug, debug_1093
    rx1511_cur."!cursor_debug"("PASS", "pod_comment", " at pos=", rx1511_pos)
  debug_1093:
    .return (rx1511_cur)
  rx1511_restart:
    if_null rx1511_debug, debug_1094
    rx1511_cur."!cursor_debug"("NEXT", "pod_comment")
  debug_1094:
  rx1511_fail:
    (rx1511_rep, rx1511_pos, $I10, $P10) = rx1511_cur."!mark_fail"(0)
    lt rx1511_pos, -1, rx1511_done
    eq rx1511_pos, -1, rx1511_fail
    jump $I10
  rx1511_done:
    rx1511_cur."!cursor_fail"()
    if_null rx1511_debug, debug_1095
    rx1511_cur."!cursor_debug"("FAIL", "pod_comment")
  debug_1095:
    .return (rx1511_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1538"  :anon :subid("573_1335114138.94729") :method :outer("53_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 722
    .local string rx1540_tgt
    .local int rx1540_pos
    .local int rx1540_off
    .local int rx1540_eos
    .local int rx1540_rep
    .local pmc rx1540_cur
    .local pmc rx1540_debug
    (rx1540_cur, rx1540_pos, rx1540_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1540_cur
    .local pmc match
    .lex "$/", match
    length rx1540_eos, rx1540_tgt
    gt rx1540_pos, rx1540_eos, rx1540_done
    set rx1540_off, 0
    lt rx1540_pos, 2, rx1540_start
    sub rx1540_off, rx1540_pos, 1
    substr rx1540_tgt, rx1540_tgt, rx1540_off
  rx1540_start:
    eq $I10, 1, rx1540_restart
    if_null rx1540_debug, debug_1089
    rx1540_cur."!cursor_debug"("START", "")
  debug_1089:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1541_done
    goto rxscan1541_scan
  rxscan1541_loop:
    (rx1540_pos) = rx1540_cur."from"()
    inc rx1540_pos
    rx1540_cur."!cursor_from"(rx1540_pos)
    ge rx1540_pos, rx1540_eos, rxscan1541_done
  rxscan1541_scan:
    set_addr $I10, rxscan1541_loop
    rx1540_cur."!mark_push"(0, rx1540_pos, $I10)
  rxscan1541_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1540_pos, rx1540_off
    set rx1540_rep, 0
    sub $I12, rx1540_eos, rx1540_pos
  rxenumcharlistq1542_loop:
    le $I12, 0, rxenumcharlistq1542_done
    substr $S10, rx1540_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1542_done
    inc rx1540_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1542_loop
  rxenumcharlistq1542_done:
    add rx1540_pos, rx1540_pos, rx1540_rep
  alt1543_0:
    set_addr $I10, alt1543_1
    rx1540_cur."!mark_push"(0, rx1540_pos, $I10)
.annotate 'line', 723
  # rx literal  "="
    add $I11, rx1540_pos, 1
    gt $I11, rx1540_eos, rx1540_fail
    sub $I11, rx1540_pos, rx1540_off
    ord $I11, rx1540_tgt, $I11
    ne $I11, 61, rx1540_fail
    add rx1540_pos, 1
.annotate 'line', 725
  # rx rxquantr1544 ** 0..1
    set_addr $I10, rxquantr1544_done
    rx1540_cur."!mark_push"(0, rx1540_pos, $I10)
  rxquantr1544_loop:
.annotate 'line', 724
  # rx literal  "cut"
    add $I11, rx1540_pos, 3
    gt $I11, rx1540_eos, rx1540_fail
    sub $I11, rx1540_pos, rx1540_off
    substr $S10, rx1540_tgt, $I11, 3
    ne $S10, "cut", rx1540_fail
    add rx1540_pos, 3
  # rxanchor rwb
    le rx1540_pos, 0, rx1540_fail
    sub $I10, rx1540_pos, rx1540_off
    is_cclass $I11, .CCLASS_WORD, rx1540_tgt, $I10
    if $I11, rx1540_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx1540_tgt, $I10
    unless $I11, rx1540_fail
.annotate 'line', 725
  # rx subrule "panic" subtype=method negate=
    rx1540_cur."!cursor_pos"(rx1540_pos)
    $P10 = rx1540_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    unless $P10, rx1540_fail
    rx1540_pos = $P10."pos"()
    set_addr $I10, rxquantr1544_done
    (rx1540_rep) = rx1540_cur."!mark_commit"($I10)
  rxquantr1544_done:
.annotate 'line', 722
    goto alt1543_end
  alt1543_1:
.annotate 'line', 726
  # rx charclass nl
    ge rx1540_pos, rx1540_eos, rx1540_fail
    sub $I10, rx1540_pos, rx1540_off
    is_cclass $I11, .CCLASS_NEWLINE, rx1540_tgt, $I10
    unless $I11, rx1540_fail
    substr $S10, rx1540_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1540_pos, $I11
    inc rx1540_pos
  alt1543_end:
.annotate 'line', 722
  # rx pass
    rx1540_cur."!cursor_pass"(rx1540_pos, "")
    if_null rx1540_debug, debug_1090
    rx1540_cur."!cursor_debug"("PASS", "", " at pos=", rx1540_pos)
  debug_1090:
    .return (rx1540_cur)
  rx1540_restart:
    if_null rx1540_debug, debug_1091
    rx1540_cur."!cursor_debug"("NEXT", "")
  debug_1091:
  rx1540_fail:
    (rx1540_rep, rx1540_pos, $I10, $P10) = rx1540_cur."!mark_fail"(0)
    lt rx1540_pos, -1, rx1540_done
    eq rx1540_pos, -1, rx1540_fail
    jump $I10
  rx1540_done:
    rx1540_cur."!cursor_fail"()
    if_null rx1540_debug, debug_1092
    rx1540_cur."!cursor_debug"("FAIL", "")
  debug_1092:
    .return (rx1540_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pod_comment"  :subid("54_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 705
    new $P104, "ResizablePMCArray"
    push $P104, ""
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "comp_unit"  :subid("55_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 737
    new $P103, "Undef"
    set $P1548, $P103
    .lex "$*IN_DECL", $P1548
.annotate 'line', 739
    new $P104, "Undef"
    set $P1549, $P104
    .lex "$*HAS_YOU_ARE_HERE", $P1549
.annotate 'line', 740
    new $P105, "Undef"
    set $P1550, $P105
    .lex "$*MAIN_SUB", $P1550
.annotate 'line', 743
    new $P106, "Undef"
    set $P1551, $P106
    .lex "$*PACKAGE", $P1551
.annotate 'line', 744
    new $P107, "Undef"
    set $P1552, $P107
    .lex "$*GLOBALish", $P1552
.annotate 'line', 736
    .local string rx1553_tgt
    .local int rx1553_pos
    .local int rx1553_off
    .local int rx1553_eos
    .local int rx1553_rep
    .local pmc rx1553_cur
    .local pmc rx1553_debug
    (rx1553_cur, rx1553_pos, rx1553_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1553_cur
    .local pmc match
    .lex "$/", match
    length rx1553_eos, rx1553_tgt
    gt rx1553_pos, rx1553_eos, rx1553_done
    set rx1553_off, 0
    lt rx1553_pos, 2, rx1553_start
    sub rx1553_off, rx1553_pos, 1
    substr rx1553_tgt, rx1553_tgt, rx1553_off
  rx1553_start:
    eq $I10, 1, rx1553_restart
    if_null rx1553_debug, debug_1096
    rx1553_cur."!cursor_debug"("START", "comp_unit")
  debug_1096:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1554_done
    goto rxscan1554_scan
  rxscan1554_loop:
    (rx1553_pos) = rx1553_cur."from"()
    inc rx1553_pos
    rx1553_cur."!cursor_from"(rx1553_pos)
    ge rx1553_pos, rx1553_eos, rxscan1554_done
  rxscan1554_scan:
    set_addr $I10, rxscan1554_loop
    rx1553_cur."!mark_push"(0, rx1553_pos, $I10)
  rxscan1554_done:
.annotate 'line', 737
    rx1553_cur."!cursor_pos"(rx1553_pos)
    new $P108, "String"
    assign $P108, ""
    set $P1548, $P108
.annotate 'line', 739
    rx1553_cur."!cursor_pos"(rx1553_pos)
    new $P109, "Float"
    assign $P109, 0
    set $P1549, $P109
.annotate 'line', 740
    rx1553_cur."!cursor_pos"(rx1553_pos)
    set $P112, $P1550
    unless_null $P112, vivify_1097
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$MAIN_SUB"]
    unless_null $P112, vivify_1098
    die "Contextual $*MAIN_SUB not found"
  vivify_1098:
  vivify_1097:
.annotate 'line', 741
  # rx subrule "newpad" subtype=method negate=
    rx1553_cur."!cursor_pos"(rx1553_pos)
    $P10 = rx1553_cur."newpad"()
    unless $P10, rx1553_fail
    rx1553_pos = $P10."pos"()
.annotate 'line', 743
    rx1553_cur."!cursor_pos"(rx1553_pos)
    set $P115, $P1551
    unless_null $P115, vivify_1099
    get_hll_global $P113, "GLOBAL"
    get_who $P114, $P113
    set $P115, $P114["$PACKAGE"]
    unless_null $P115, vivify_1100
    die "Contextual $*PACKAGE not found"
  vivify_1100:
  vivify_1099:
.annotate 'line', 744
    rx1553_cur."!cursor_pos"(rx1553_pos)
    set $P118, $P1552
    unless_null $P118, vivify_1101
    get_hll_global $P116, "GLOBAL"
    get_who $P117, $P116
    set $P118, $P117["$GLOBALish"]
    unless_null $P118, vivify_1102
    die "Contextual $*GLOBALish not found"
  vivify_1102:
  vivify_1101:
.annotate 'line', 745
  # rx subrule "GLOBALish" subtype=method negate=
    rx1553_cur."!cursor_pos"(rx1553_pos)
    $P10 = rx1553_cur."GLOBALish"()
    unless $P10, rx1553_fail
    rx1553_pos = $P10."pos"()
.annotate 'line', 747
  # rx subrule "outerctx" subtype=method negate=
    rx1553_cur."!cursor_pos"(rx1553_pos)
    $P10 = rx1553_cur."outerctx"()
    unless $P10, rx1553_fail
    rx1553_pos = $P10."pos"()
.annotate 'line', 749
  # rx subrule "statementlist" subtype=capture negate=
    rx1553_cur."!cursor_pos"(rx1553_pos)
    $P10 = rx1553_cur."statementlist"()
    unless $P10, rx1553_fail
    rx1553_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx1553_pos = $P10."pos"()
  alt1555_0:
.annotate 'line', 750
    set_addr $I10, alt1555_1
    rx1553_cur."!mark_push"(0, rx1553_pos, $I10)
  # rxanchor eos
    ne rx1553_pos, rx1553_eos, rx1553_fail
    goto alt1555_end
  alt1555_1:
  # rx subrule "panic" subtype=method negate=
    rx1553_cur."!cursor_pos"(rx1553_pos)
    $P10 = rx1553_cur."panic"("Confused")
    unless $P10, rx1553_fail
    rx1553_pos = $P10."pos"()
  alt1555_end:
.annotate 'line', 736
  # rx pass
    rx1553_cur."!cursor_pass"(rx1553_pos, "comp_unit")
    if_null rx1553_debug, debug_1103
    rx1553_cur."!cursor_debug"("PASS", "comp_unit", " at pos=", rx1553_pos)
  debug_1103:
    .return (rx1553_cur)
  rx1553_restart:
    if_null rx1553_debug, debug_1104
    rx1553_cur."!cursor_debug"("NEXT", "comp_unit")
  debug_1104:
  rx1553_fail:
    (rx1553_rep, rx1553_pos, $I10, $P10) = rx1553_cur."!mark_fail"(0)
    lt rx1553_pos, -1, rx1553_done
    eq rx1553_pos, -1, rx1553_fail
    jump $I10
  rx1553_done:
    rx1553_cur."!cursor_fail"()
    if_null rx1553_debug, debug_1105
    rx1553_cur."!cursor_debug"("FAIL", "comp_unit")
  debug_1105:
    .return (rx1553_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__comp_unit"  :subid("56_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 736
    $P119 = self."!PREFIX__!subrule"("newpad", "")
    new $P120, "ResizablePMCArray"
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statementlist"  :subid("57_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 753
    .local string rx1558_tgt
    .local int rx1558_pos
    .local int rx1558_off
    .local int rx1558_eos
    .local int rx1558_rep
    .local pmc rx1558_cur
    .local pmc rx1558_debug
    (rx1558_cur, rx1558_pos, rx1558_tgt, $I10) = self."!cursor_start"()
    rx1558_cur."!cursor_caparray"("statement")
    .lex unicode:"$\x{a2}", rx1558_cur
    .local pmc match
    .lex "$/", match
    length rx1558_eos, rx1558_tgt
    gt rx1558_pos, rx1558_eos, rx1558_done
    set rx1558_off, 0
    lt rx1558_pos, 2, rx1558_start
    sub rx1558_off, rx1558_pos, 1
    substr rx1558_tgt, rx1558_tgt, rx1558_off
  rx1558_start:
    eq $I10, 1, rx1558_restart
    if_null rx1558_debug, debug_1106
    rx1558_cur."!cursor_debug"("START", "statementlist")
  debug_1106:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1559_done
    goto rxscan1559_scan
  rxscan1559_loop:
    (rx1558_pos) = rx1558_cur."from"()
    inc rx1558_pos
    rx1558_cur."!cursor_from"(rx1558_pos)
    ge rx1558_pos, rx1558_eos, rxscan1559_done
  rxscan1559_scan:
    set_addr $I10, rxscan1559_loop
    rx1558_cur."!mark_push"(0, rx1558_pos, $I10)
  rxscan1559_done:
  alt1560_0:
    set_addr $I10, alt1560_1
    rx1558_cur."!mark_push"(0, rx1558_pos, $I10)
.annotate 'line', 754
  # rx subrule "ws" subtype=method negate=
    rx1558_cur."!cursor_pos"(rx1558_pos)
    $P10 = rx1558_cur."ws"()
    unless $P10, rx1558_fail
    rx1558_pos = $P10."pos"()
  # rxanchor eos
    ne rx1558_pos, rx1558_eos, rx1558_fail
  # rx subrule "ws" subtype=method negate=
    rx1558_cur."!cursor_pos"(rx1558_pos)
    $P10 = rx1558_cur."ws"()
    unless $P10, rx1558_fail
    rx1558_pos = $P10."pos"()
    goto alt1560_end
  alt1560_1:
.annotate 'line', 755
  # rx subrule "ws" subtype=method negate=
    rx1558_cur."!cursor_pos"(rx1558_pos)
    $P10 = rx1558_cur."ws"()
    unless $P10, rx1558_fail
    rx1558_pos = $P10."pos"()
  # rx rxquantr1561 ** 0..*
    set_addr $I10, rxquantr1561_done
    rx1558_cur."!mark_push"(0, rx1558_pos, $I10)
  rxquantr1561_loop:
  # rx subrule "statement" subtype=capture negate=
    rx1558_cur."!cursor_pos"(rx1558_pos)
    $P10 = rx1558_cur."statement"()
    unless $P10, rx1558_fail
    rx1558_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1558_pos = $P10."pos"()
  # rx subrule "eat_terminator" subtype=method negate=
    rx1558_cur."!cursor_pos"(rx1558_pos)
    $P10 = rx1558_cur."eat_terminator"()
    unless $P10, rx1558_fail
    rx1558_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1558_cur."!cursor_pos"(rx1558_pos)
    $P10 = rx1558_cur."ws"()
    unless $P10, rx1558_fail
    rx1558_pos = $P10."pos"()
    set_addr $I10, rxquantr1561_done
    (rx1558_rep) = rx1558_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1561_done
    rx1558_cur."!mark_push"(rx1558_rep, rx1558_pos, $I10)
    goto rxquantr1561_loop
  rxquantr1561_done:
  # rx subrule "ws" subtype=method negate=
    rx1558_cur."!cursor_pos"(rx1558_pos)
    $P10 = rx1558_cur."ws"()
    unless $P10, rx1558_fail
    rx1558_pos = $P10."pos"()
  alt1560_end:
.annotate 'line', 753
  # rx pass
    rx1558_cur."!cursor_pass"(rx1558_pos, "statementlist")
    if_null rx1558_debug, debug_1107
    rx1558_cur."!cursor_debug"("PASS", "statementlist", " at pos=", rx1558_pos)
  debug_1107:
    .return (rx1558_cur)
  rx1558_restart:
    if_null rx1558_debug, debug_1108
    rx1558_cur."!cursor_debug"("NEXT", "statementlist")
  debug_1108:
  rx1558_fail:
    (rx1558_rep, rx1558_pos, $I10, $P10) = rx1558_cur."!mark_fail"(0)
    lt rx1558_pos, -1, rx1558_done
    eq rx1558_pos, -1, rx1558_fail
    jump $I10
  rx1558_done:
    rx1558_cur."!cursor_fail"()
    if_null rx1558_debug, debug_1109
    rx1558_cur."!cursor_debug"("FAIL", "statementlist")
  debug_1109:
    .return (rx1558_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statementlist"  :subid("58_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 753
    $P108 = self."!PREFIX__!subrule"("ws", "")
    $P109 = self."!PREFIX__!subrule"("ws", "")
    new $P110, "ResizablePMCArray"
    push $P110, $P108
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement"  :subid("59_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 758
    .const 'Sub' $P1567 = "574_1335114138.94729" 
    capture_lex $P1567
    .local string rx1564_tgt
    .local int rx1564_pos
    .local int rx1564_off
    .local int rx1564_eos
    .local int rx1564_rep
    .local pmc rx1564_cur
    .local pmc rx1564_debug
    (rx1564_cur, rx1564_pos, rx1564_tgt, $I10) = self."!cursor_start"()
    rx1564_cur."!cursor_caparray"("statement_mod_cond", "statement_mod_loop")
    .lex unicode:"$\x{a2}", rx1564_cur
    .local pmc match
    .lex "$/", match
    length rx1564_eos, rx1564_tgt
    gt rx1564_pos, rx1564_eos, rx1564_done
    set rx1564_off, 0
    lt rx1564_pos, 2, rx1564_start
    sub rx1564_off, rx1564_pos, 1
    substr rx1564_tgt, rx1564_tgt, rx1564_off
  rx1564_start:
    eq $I10, 1, rx1564_restart
    if_null rx1564_debug, debug_1110
    rx1564_cur."!cursor_debug"("START", "statement")
  debug_1110:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1565_done
    goto rxscan1565_scan
  rxscan1565_loop:
    (rx1564_pos) = rx1564_cur."from"()
    inc rx1564_pos
    rx1564_cur."!cursor_from"(rx1564_pos)
    ge rx1564_pos, rx1564_eos, rxscan1565_done
  rxscan1565_scan:
    set_addr $I10, rxscan1565_loop
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
  rxscan1565_done:
.annotate 'line', 759
  # rx subrule "before" subtype=zerowidth negate=1
    rx1564_cur."!cursor_pos"(rx1564_pos)
    .const 'Sub' $P1567 = "574_1335114138.94729" 
    capture_lex $P1567
    $P10 = rx1564_cur."before"($P1567)
    if $P10, rx1564_fail
  alt1571_0:
.annotate 'line', 760
    set_addr $I10, alt1571_1
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
.annotate 'line', 761
  # rx subrule "statement_control" subtype=capture negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."statement_control"()
    unless $P10, rx1564_fail
    rx1564_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_control")
    rx1564_pos = $P10."pos"()
    goto alt1571_end
  alt1571_1:
.annotate 'line', 762
  # rx subrule "EXPR" subtype=capture negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."EXPR"()
    unless $P10, rx1564_fail
    rx1564_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1564_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."ws"()
    unless $P10, rx1564_fail
    rx1564_pos = $P10."pos"()
.annotate 'line', 767
  # rx rxquantr1572 ** 0..1
    set_addr $I10, rxquantr1572_done
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
  rxquantr1572_loop:
  alt1573_0:
.annotate 'line', 763
    set_addr $I10, alt1573_1
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
.annotate 'line', 764
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."MARKED"("endstmt")
    unless $P10, rx1564_fail
    goto alt1573_end
  alt1573_1:
    set_addr $I10, alt1573_2
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
.annotate 'line', 765
  # rx subrule "statement_mod_cond" subtype=capture negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."statement_mod_cond"()
    unless $P10, rx1564_fail
    rx1564_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_cond")
    rx1564_pos = $P10."pos"()
  # rx rxquantr1574 ** 0..1
    set_addr $I10, rxquantr1574_done
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10)
  rxquantr1574_loop:
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."statement_mod_loop"()
    unless $P10, rx1564_fail
    goto rxsubrule1575_pass
  rxsubrule1575_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1564_fail
  rxsubrule1575_pass:
    set_addr $I10, rxsubrule1575_back
    rx1564_cur."!mark_push"(0, rx1564_pos, $I10, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx1564_pos = $P10."pos"()
    set_addr $I10, rxquantr1574_done
    (rx1564_rep) = rx1564_cur."!mark_commit"($I10)
  rxquantr1574_done:
    goto alt1573_end
  alt1573_2:
.annotate 'line', 766
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx1564_cur."!cursor_pos"(rx1564_pos)
    $P10 = rx1564_cur."statement_mod_loop"()
    unless $P10, rx1564_fail
    rx1564_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx1564_pos = $P10."pos"()
  alt1573_end:
.annotate 'line', 767
    set_addr $I10, rxquantr1572_done
    (rx1564_rep) = rx1564_cur."!mark_commit"($I10)
  rxquantr1572_done:
  alt1571_end:
.annotate 'line', 758
  # rx pass
    rx1564_cur."!cursor_pass"(rx1564_pos, "statement")
    if_null rx1564_debug, debug_1115
    rx1564_cur."!cursor_debug"("PASS", "statement", " at pos=", rx1564_pos)
  debug_1115:
    .return (rx1564_cur)
  rx1564_restart:
    if_null rx1564_debug, debug_1116
    rx1564_cur."!cursor_debug"("NEXT", "statement")
  debug_1116:
  rx1564_fail:
    (rx1564_rep, rx1564_pos, $I10, $P10) = rx1564_cur."!mark_fail"(0)
    lt rx1564_pos, -1, rx1564_done
    eq rx1564_pos, -1, rx1564_fail
    jump $I10
  rx1564_done:
    rx1564_cur."!cursor_fail"()
    if_null rx1564_debug, debug_1117
    rx1564_cur."!cursor_debug"("FAIL", "statement")
  debug_1117:
    .return (rx1564_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1566"  :anon :subid("574_1335114138.94729") :method :outer("59_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 759
    .local string rx1568_tgt
    .local int rx1568_pos
    .local int rx1568_off
    .local int rx1568_eos
    .local int rx1568_rep
    .local pmc rx1568_cur
    .local pmc rx1568_debug
    (rx1568_cur, rx1568_pos, rx1568_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1568_cur
    .local pmc match
    .lex "$/", match
    length rx1568_eos, rx1568_tgt
    gt rx1568_pos, rx1568_eos, rx1568_done
    set rx1568_off, 0
    lt rx1568_pos, 2, rx1568_start
    sub rx1568_off, rx1568_pos, 1
    substr rx1568_tgt, rx1568_tgt, rx1568_off
  rx1568_start:
    eq $I10, 1, rx1568_restart
    if_null rx1568_debug, debug_1111
    rx1568_cur."!cursor_debug"("START", "")
  debug_1111:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1569_done
    goto rxscan1569_scan
  rxscan1569_loop:
    (rx1568_pos) = rx1568_cur."from"()
    inc rx1568_pos
    rx1568_cur."!cursor_from"(rx1568_pos)
    ge rx1568_pos, rx1568_eos, rxscan1569_done
  rxscan1569_scan:
    set_addr $I10, rxscan1569_loop
    rx1568_cur."!mark_push"(0, rx1568_pos, $I10)
  rxscan1569_done:
  alt1570_0:
    set_addr $I10, alt1570_1
    rx1568_cur."!mark_push"(0, rx1568_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx1568_pos, rx1568_eos, rx1568_fail
    sub $I10, rx1568_pos, rx1568_off
    substr $S10, rx1568_tgt, $I10, 1
    index $I11, "])}", $S10
    lt $I11, 0, rx1568_fail
    inc rx1568_pos
    goto alt1570_end
  alt1570_1:
  # rxanchor eos
    ne rx1568_pos, rx1568_eos, rx1568_fail
  alt1570_end:
  # rx pass
    rx1568_cur."!cursor_pass"(rx1568_pos, "")
    if_null rx1568_debug, debug_1112
    rx1568_cur."!cursor_debug"("PASS", "", " at pos=", rx1568_pos)
  debug_1112:
    .return (rx1568_cur)
  rx1568_restart:
    if_null rx1568_debug, debug_1113
    rx1568_cur."!cursor_debug"("NEXT", "")
  debug_1113:
  rx1568_fail:
    (rx1568_rep, rx1568_pos, $I10, $P10) = rx1568_cur."!mark_fail"(0)
    lt rx1568_pos, -1, rx1568_done
    eq rx1568_pos, -1, rx1568_fail
    jump $I10
  rx1568_done:
    rx1568_cur."!cursor_fail"()
    if_null rx1568_debug, debug_1114
    rx1568_cur."!cursor_debug"("FAIL", "")
  debug_1114:
    .return (rx1568_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement"  :subid("60_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 758
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "eat_terminator"  :subid("61_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 771
    .local string rx1578_tgt
    .local int rx1578_pos
    .local int rx1578_off
    .local int rx1578_eos
    .local int rx1578_rep
    .local pmc rx1578_cur
    .local pmc rx1578_debug
    (rx1578_cur, rx1578_pos, rx1578_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1578_cur
    .local pmc match
    .lex "$/", match
    length rx1578_eos, rx1578_tgt
    gt rx1578_pos, rx1578_eos, rx1578_done
    set rx1578_off, 0
    lt rx1578_pos, 2, rx1578_start
    sub rx1578_off, rx1578_pos, 1
    substr rx1578_tgt, rx1578_tgt, rx1578_off
  rx1578_start:
    eq $I10, 1, rx1578_restart
    if_null rx1578_debug, debug_1118
    rx1578_cur."!cursor_debug"("START", "eat_terminator")
  debug_1118:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1579_done
    goto rxscan1579_scan
  rxscan1579_loop:
    (rx1578_pos) = rx1578_cur."from"()
    inc rx1578_pos
    rx1578_cur."!cursor_from"(rx1578_pos)
    ge rx1578_pos, rx1578_eos, rxscan1579_done
  rxscan1579_scan:
    set_addr $I10, rxscan1579_loop
    rx1578_cur."!mark_push"(0, rx1578_pos, $I10)
  rxscan1579_done:
  alt1580_0:
    set_addr $I10, alt1580_1
    rx1578_cur."!mark_push"(0, rx1578_pos, $I10)
.annotate 'line', 772
  # rx literal  ";"
    add $I11, rx1578_pos, 1
    gt $I11, rx1578_eos, rx1578_fail
    sub $I11, rx1578_pos, rx1578_off
    ord $I11, rx1578_tgt, $I11
    ne $I11, 59, rx1578_fail
    add rx1578_pos, 1
    goto alt1580_end
  alt1580_1:
    set_addr $I10, alt1580_2
    rx1578_cur."!mark_push"(0, rx1578_pos, $I10)
.annotate 'line', 773
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1578_cur."!cursor_pos"(rx1578_pos)
    $P10 = rx1578_cur."MARKED"("endstmt")
    unless $P10, rx1578_fail
    goto alt1580_end
  alt1580_2:
    set_addr $I10, alt1580_3
    rx1578_cur."!mark_push"(0, rx1578_pos, $I10)
.annotate 'line', 774
  # rx subrule "terminator" subtype=zerowidth negate=
    rx1578_cur."!cursor_pos"(rx1578_pos)
    $P10 = rx1578_cur."terminator"()
    unless $P10, rx1578_fail
    goto alt1580_end
  alt1580_3:
.annotate 'line', 775
  # rxanchor eos
    ne rx1578_pos, rx1578_eos, rx1578_fail
  alt1580_end:
.annotate 'line', 771
  # rx pass
    rx1578_cur."!cursor_pass"(rx1578_pos, "eat_terminator")
    if_null rx1578_debug, debug_1119
    rx1578_cur."!cursor_debug"("PASS", "eat_terminator", " at pos=", rx1578_pos)
  debug_1119:
    .return (rx1578_cur)
  rx1578_restart:
    if_null rx1578_debug, debug_1120
    rx1578_cur."!cursor_debug"("NEXT", "eat_terminator")
  debug_1120:
  rx1578_fail:
    (rx1578_rep, rx1578_pos, $I10, $P10) = rx1578_cur."!mark_fail"(0)
    lt rx1578_pos, -1, rx1578_done
    eq rx1578_pos, -1, rx1578_fail
    jump $I10
  rx1578_done:
    rx1578_cur."!cursor_fail"()
    if_null rx1578_debug, debug_1121
    rx1578_cur."!cursor_debug"("FAIL", "eat_terminator")
  debug_1121:
    .return (rx1578_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__eat_terminator"  :subid("62_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 771
    new $P103, "ResizablePMCArray"
    push $P103, ""
    push $P103, ""
    push $P103, ""
    push $P103, ";"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "xblock"  :subid("63_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 778
    .local string rx1583_tgt
    .local int rx1583_pos
    .local int rx1583_off
    .local int rx1583_eos
    .local int rx1583_rep
    .local pmc rx1583_cur
    .local pmc rx1583_debug
    (rx1583_cur, rx1583_pos, rx1583_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1583_cur
    .local pmc match
    .lex "$/", match
    length rx1583_eos, rx1583_tgt
    gt rx1583_pos, rx1583_eos, rx1583_done
    set rx1583_off, 0
    lt rx1583_pos, 2, rx1583_start
    sub rx1583_off, rx1583_pos, 1
    substr rx1583_tgt, rx1583_tgt, rx1583_off
  rx1583_start:
    eq $I10, 1, rx1583_restart
    if_null rx1583_debug, debug_1122
    rx1583_cur."!cursor_debug"("START", "xblock")
  debug_1122:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1584_done
    goto rxscan1584_scan
  rxscan1584_loop:
    (rx1583_pos) = rx1583_cur."from"()
    inc rx1583_pos
    rx1583_cur."!cursor_from"(rx1583_pos)
    ge rx1583_pos, rx1583_eos, rxscan1584_done
  rxscan1584_scan:
    set_addr $I10, rxscan1584_loop
    rx1583_cur."!mark_push"(0, rx1583_pos, $I10)
  rxscan1584_done:
.annotate 'line', 779
  # rx subrule "EXPR" subtype=capture negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."EXPR"()
    unless $P10, rx1583_fail
    rx1583_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1583_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."ws"()
    unless $P10, rx1583_fail
    rx1583_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1583_cur."!cursor_pos"(rx1583_pos)
    $P10 = rx1583_cur."pblock"()
    unless $P10, rx1583_fail
    rx1583_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1583_pos = $P10."pos"()
.annotate 'line', 778
  # rx pass
    rx1583_cur."!cursor_pass"(rx1583_pos, "xblock")
    if_null rx1583_debug, debug_1123
    rx1583_cur."!cursor_debug"("PASS", "xblock", " at pos=", rx1583_pos)
  debug_1123:
    .return (rx1583_cur)
  rx1583_restart:
    if_null rx1583_debug, debug_1124
    rx1583_cur."!cursor_debug"("NEXT", "xblock")
  debug_1124:
  rx1583_fail:
    (rx1583_rep, rx1583_pos, $I10, $P10) = rx1583_cur."!mark_fail"(0)
    lt rx1583_pos, -1, rx1583_done
    eq rx1583_pos, -1, rx1583_fail
    jump $I10
  rx1583_done:
    rx1583_cur."!cursor_fail"()
    if_null rx1583_debug, debug_1125
    rx1583_cur."!cursor_debug"("FAIL", "xblock")
  debug_1125:
    .return (rx1583_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__xblock"  :subid("64_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 778
    $P103 = self."!PREFIX__!subrule"("EXPR", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pblock"  :subid("65_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 782
    .local string rx1587_tgt
    .local int rx1587_pos
    .local int rx1587_off
    .local int rx1587_eos
    .local int rx1587_rep
    .local pmc rx1587_cur
    .local pmc rx1587_debug
    (rx1587_cur, rx1587_pos, rx1587_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1587_cur
    .local pmc match
    .lex "$/", match
    length rx1587_eos, rx1587_tgt
    gt rx1587_pos, rx1587_eos, rx1587_done
    set rx1587_off, 0
    lt rx1587_pos, 2, rx1587_start
    sub rx1587_off, rx1587_pos, 1
    substr rx1587_tgt, rx1587_tgt, rx1587_off
  rx1587_start:
    eq $I10, 1, rx1587_restart
    if_null rx1587_debug, debug_1126
    rx1587_cur."!cursor_debug"("START", "pblock")
  debug_1126:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1588_done
    goto rxscan1588_scan
  rxscan1588_loop:
    (rx1587_pos) = rx1587_cur."from"()
    inc rx1587_pos
    rx1587_cur."!cursor_from"(rx1587_pos)
    ge rx1587_pos, rx1587_eos, rxscan1588_done
  rxscan1588_scan:
    set_addr $I10, rxscan1588_loop
    rx1587_cur."!mark_push"(0, rx1587_pos, $I10)
  rxscan1588_done:
  alt1589_0:
    set_addr $I10, alt1589_1
    rx1587_cur."!mark_push"(0, rx1587_pos, $I10)
.annotate 'line', 783
  # rx subrule "lambda" subtype=method negate=
    rx1587_cur."!cursor_pos"(rx1587_pos)
    $P10 = rx1587_cur."lambda"()
    unless $P10, rx1587_fail
    rx1587_pos = $P10."pos"()
.annotate 'line', 784
  # rx subrule "newpad" subtype=method negate=
    rx1587_cur."!cursor_pos"(rx1587_pos)
    $P10 = rx1587_cur."newpad"()
    unless $P10, rx1587_fail
    rx1587_pos = $P10."pos"()
.annotate 'line', 785
  # rx subrule "signature" subtype=capture negate=
    rx1587_cur."!cursor_pos"(rx1587_pos)
    $P10 = rx1587_cur."signature"()
    unless $P10, rx1587_fail
    rx1587_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1587_pos = $P10."pos"()
.annotate 'line', 786
  # rx subrule "blockoid" subtype=capture negate=
    rx1587_cur."!cursor_pos"(rx1587_pos)
    $P10 = rx1587_cur."blockoid"()
    unless $P10, rx1587_fail
    rx1587_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1587_pos = $P10."pos"()
.annotate 'line', 783
    goto alt1589_end
  alt1589_1:
    set_addr $I10, alt1589_2
    rx1587_cur."!mark_push"(0, rx1587_pos, $I10)
.annotate 'line', 787
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1587_pos, rx1587_off
    substr $S10, rx1587_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1587_fail
.annotate 'line', 788
  # rx subrule "newpad" subtype=method negate=
    rx1587_cur."!cursor_pos"(rx1587_pos)
    $P10 = rx1587_cur."newpad"()
    unless $P10, rx1587_fail
    rx1587_pos = $P10."pos"()
.annotate 'line', 789
  # rx subrule "blockoid" subtype=capture negate=
    rx1587_cur."!cursor_pos"(rx1587_pos)
    $P10 = rx1587_cur."blockoid"()
    unless $P10, rx1587_fail
    rx1587_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1587_pos = $P10."pos"()
.annotate 'line', 787
    goto alt1589_end
  alt1589_2:
.annotate 'line', 790
  # rx subrule "panic" subtype=method negate=
    rx1587_cur."!cursor_pos"(rx1587_pos)
    $P10 = rx1587_cur."panic"("Missing block")
    unless $P10, rx1587_fail
    rx1587_pos = $P10."pos"()
  alt1589_end:
.annotate 'line', 782
  # rx pass
    rx1587_cur."!cursor_pass"(rx1587_pos, "pblock")
    if_null rx1587_debug, debug_1127
    rx1587_cur."!cursor_debug"("PASS", "pblock", " at pos=", rx1587_pos)
  debug_1127:
    .return (rx1587_cur)
  rx1587_restart:
    if_null rx1587_debug, debug_1128
    rx1587_cur."!cursor_debug"("NEXT", "pblock")
  debug_1128:
  rx1587_fail:
    (rx1587_rep, rx1587_pos, $I10, $P10) = rx1587_cur."!mark_fail"(0)
    lt rx1587_pos, -1, rx1587_done
    eq rx1587_pos, -1, rx1587_fail
    jump $I10
  rx1587_done:
    rx1587_cur."!cursor_fail"()
    if_null rx1587_debug, debug_1129
    rx1587_cur."!cursor_debug"("FAIL", "pblock")
  debug_1129:
    .return (rx1587_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pblock"  :subid("66_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 782
    $P103 = self."!PREFIX__!subrule"("panic", "")
    $P104 = self."!PREFIX__!subrule"("lambda", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, "{"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "lambda"  :subid("67_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 793
    .local string rx1592_tgt
    .local int rx1592_pos
    .local int rx1592_off
    .local int rx1592_eos
    .local int rx1592_rep
    .local pmc rx1592_cur
    .local pmc rx1592_debug
    (rx1592_cur, rx1592_pos, rx1592_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1592_cur
    .local pmc match
    .lex "$/", match
    length rx1592_eos, rx1592_tgt
    gt rx1592_pos, rx1592_eos, rx1592_done
    set rx1592_off, 0
    lt rx1592_pos, 2, rx1592_start
    sub rx1592_off, rx1592_pos, 1
    substr rx1592_tgt, rx1592_tgt, rx1592_off
  rx1592_start:
    eq $I10, 1, rx1592_restart
    if_null rx1592_debug, debug_1130
    rx1592_cur."!cursor_debug"("START", "lambda")
  debug_1130:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1593_done
    goto rxscan1593_scan
  rxscan1593_loop:
    (rx1592_pos) = rx1592_cur."from"()
    inc rx1592_pos
    rx1592_cur."!cursor_from"(rx1592_pos)
    ge rx1592_pos, rx1592_eos, rxscan1593_done
  rxscan1593_scan:
    set_addr $I10, rxscan1593_loop
    rx1592_cur."!mark_push"(0, rx1592_pos, $I10)
  rxscan1593_done:
  alt1594_0:
    set_addr $I10, alt1594_1
    rx1592_cur."!mark_push"(0, rx1592_pos, $I10)
  # rx literal  "->"
    add $I11, rx1592_pos, 2
    gt $I11, rx1592_eos, rx1592_fail
    sub $I11, rx1592_pos, rx1592_off
    substr $S10, rx1592_tgt, $I11, 2
    ne $S10, "->", rx1592_fail
    add rx1592_pos, 2
    goto alt1594_end
  alt1594_1:
  # rx literal  "<->"
    add $I11, rx1592_pos, 3
    gt $I11, rx1592_eos, rx1592_fail
    sub $I11, rx1592_pos, rx1592_off
    substr $S10, rx1592_tgt, $I11, 3
    ne $S10, "<->", rx1592_fail
    add rx1592_pos, 3
  alt1594_end:
  # rx pass
    rx1592_cur."!cursor_pass"(rx1592_pos, "lambda")
    if_null rx1592_debug, debug_1131
    rx1592_cur."!cursor_debug"("PASS", "lambda", " at pos=", rx1592_pos)
  debug_1131:
    .return (rx1592_cur)
  rx1592_restart:
    if_null rx1592_debug, debug_1132
    rx1592_cur."!cursor_debug"("NEXT", "lambda")
  debug_1132:
  rx1592_fail:
    (rx1592_rep, rx1592_pos, $I10, $P10) = rx1592_cur."!mark_fail"(0)
    lt rx1592_pos, -1, rx1592_done
    eq rx1592_pos, -1, rx1592_fail
    jump $I10
  rx1592_done:
    rx1592_cur."!cursor_fail"()
    if_null rx1592_debug, debug_1133
    rx1592_cur."!cursor_debug"("FAIL", "lambda")
  debug_1133:
    .return (rx1592_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__lambda"  :subid("68_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 793
    new $P103, "ResizablePMCArray"
    push $P103, "<->"
    push $P103, "->"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "block"  :subid("69_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 795
    .local string rx1597_tgt
    .local int rx1597_pos
    .local int rx1597_off
    .local int rx1597_eos
    .local int rx1597_rep
    .local pmc rx1597_cur
    .local pmc rx1597_debug
    (rx1597_cur, rx1597_pos, rx1597_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1597_cur
    .local pmc match
    .lex "$/", match
    length rx1597_eos, rx1597_tgt
    gt rx1597_pos, rx1597_eos, rx1597_done
    set rx1597_off, 0
    lt rx1597_pos, 2, rx1597_start
    sub rx1597_off, rx1597_pos, 1
    substr rx1597_tgt, rx1597_tgt, rx1597_off
  rx1597_start:
    eq $I10, 1, rx1597_restart
    if_null rx1597_debug, debug_1134
    rx1597_cur."!cursor_debug"("START", "block")
  debug_1134:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1598_done
    goto rxscan1598_scan
  rxscan1598_loop:
    (rx1597_pos) = rx1597_cur."from"()
    inc rx1597_pos
    rx1597_cur."!cursor_from"(rx1597_pos)
    ge rx1597_pos, rx1597_eos, rxscan1598_done
  rxscan1598_scan:
    set_addr $I10, rxscan1598_loop
    rx1597_cur."!mark_push"(0, rx1597_pos, $I10)
  rxscan1598_done:
  alt1599_0:
.annotate 'line', 796
    set_addr $I10, alt1599_1
    rx1597_cur."!mark_push"(0, rx1597_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1597_pos, rx1597_off
    substr $S10, rx1597_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1597_fail
    goto alt1599_end
  alt1599_1:
  # rx subrule "panic" subtype=method negate=
    rx1597_cur."!cursor_pos"(rx1597_pos)
    $P10 = rx1597_cur."panic"("Missing block")
    unless $P10, rx1597_fail
    rx1597_pos = $P10."pos"()
  alt1599_end:
.annotate 'line', 797
  # rx subrule "newpad" subtype=method negate=
    rx1597_cur."!cursor_pos"(rx1597_pos)
    $P10 = rx1597_cur."newpad"()
    unless $P10, rx1597_fail
    rx1597_pos = $P10."pos"()
.annotate 'line', 798
  # rx subrule "blockoid" subtype=capture negate=
    rx1597_cur."!cursor_pos"(rx1597_pos)
    $P10 = rx1597_cur."blockoid"()
    unless $P10, rx1597_fail
    rx1597_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1597_pos = $P10."pos"()
.annotate 'line', 795
  # rx pass
    rx1597_cur."!cursor_pass"(rx1597_pos, "block")
    if_null rx1597_debug, debug_1135
    rx1597_cur."!cursor_debug"("PASS", "block", " at pos=", rx1597_pos)
  debug_1135:
    .return (rx1597_cur)
  rx1597_restart:
    if_null rx1597_debug, debug_1136
    rx1597_cur."!cursor_debug"("NEXT", "block")
  debug_1136:
  rx1597_fail:
    (rx1597_rep, rx1597_pos, $I10, $P10) = rx1597_cur."!mark_fail"(0)
    lt rx1597_pos, -1, rx1597_done
    eq rx1597_pos, -1, rx1597_fail
    jump $I10
  rx1597_done:
    rx1597_cur."!cursor_fail"()
    if_null rx1597_debug, debug_1137
    rx1597_cur."!cursor_debug"("FAIL", "block")
  debug_1137:
    .return (rx1597_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__block"  :subid("70_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 795
    $P103 = self."!PREFIX__!subrule"("panic", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    push $P104, "{"
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blockoid"  :subid("71_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 801
    .local string rx1602_tgt
    .local int rx1602_pos
    .local int rx1602_off
    .local int rx1602_eos
    .local int rx1602_rep
    .local pmc rx1602_cur
    .local pmc rx1602_debug
    (rx1602_cur, rx1602_pos, rx1602_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1602_cur
    .local pmc match
    .lex "$/", match
    length rx1602_eos, rx1602_tgt
    gt rx1602_pos, rx1602_eos, rx1602_done
    set rx1602_off, 0
    lt rx1602_pos, 2, rx1602_start
    sub rx1602_off, rx1602_pos, 1
    substr rx1602_tgt, rx1602_tgt, rx1602_off
  rx1602_start:
    eq $I10, 1, rx1602_restart
    if_null rx1602_debug, debug_1138
    rx1602_cur."!cursor_debug"("START", "blockoid")
  debug_1138:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1603_done
    goto rxscan1603_scan
  rxscan1603_loop:
    (rx1602_pos) = rx1602_cur."from"()
    inc rx1602_pos
    rx1602_cur."!cursor_from"(rx1602_pos)
    ge rx1602_pos, rx1602_eos, rxscan1603_done
  rxscan1603_scan:
    set_addr $I10, rxscan1603_loop
    rx1602_cur."!mark_push"(0, rx1602_pos, $I10)
  rxscan1603_done:
.annotate 'line', 802
  # rx subrule "finishpad" subtype=method negate=
    rx1602_cur."!cursor_pos"(rx1602_pos)
    $P10 = rx1602_cur."finishpad"()
    unless $P10, rx1602_fail
    rx1602_pos = $P10."pos"()
  alt1604_0:
.annotate 'line', 803
    set_addr $I10, alt1604_1
    rx1602_cur."!mark_push"(0, rx1602_pos, $I10)
.annotate 'line', 804
  # rx literal  "{YOU_ARE_HERE}"
    add $I11, rx1602_pos, 14
    gt $I11, rx1602_eos, rx1602_fail
    sub $I11, rx1602_pos, rx1602_off
    substr $S10, rx1602_tgt, $I11, 14
    ne $S10, "{YOU_ARE_HERE}", rx1602_fail
    add rx1602_pos, 14
  # rx subrule "you_are_here" subtype=capture negate=
    rx1602_cur."!cursor_pos"(rx1602_pos)
    $P10 = rx1602_cur."you_are_here"()
    unless $P10, rx1602_fail
    rx1602_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("you_are_here")
    rx1602_pos = $P10."pos"()
    goto alt1604_end
  alt1604_1:
.annotate 'line', 805
  # rx literal  "{"
    add $I11, rx1602_pos, 1
    gt $I11, rx1602_eos, rx1602_fail
    sub $I11, rx1602_pos, rx1602_off
    ord $I11, rx1602_tgt, $I11
    ne $I11, 123, rx1602_fail
    add rx1602_pos, 1
  # rx subrule "statementlist" subtype=capture negate=
    rx1602_cur."!cursor_pos"(rx1602_pos)
    $P10 = rx1602_cur."statementlist"()
    unless $P10, rx1602_fail
    rx1602_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx1602_pos = $P10."pos"()
  alt1605_0:
    set_addr $I10, alt1605_1
    rx1602_cur."!mark_push"(0, rx1602_pos, $I10)
  # rx literal  "}"
    add $I11, rx1602_pos, 1
    gt $I11, rx1602_eos, rx1602_fail
    sub $I11, rx1602_pos, rx1602_off
    ord $I11, rx1602_tgt, $I11
    ne $I11, 125, rx1602_fail
    add rx1602_pos, 1
    goto alt1605_end
  alt1605_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx1602_cur."!cursor_pos"(rx1602_pos)
    $P10 = rx1602_cur."FAILGOAL"("'}'")
    unless $P10, rx1602_fail
    goto rxsubrule1606_pass
  rxsubrule1606_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1602_fail
  rxsubrule1606_pass:
    set_addr $I10, rxsubrule1606_back
    rx1602_cur."!mark_push"(0, rx1602_pos, $I10, $P10)
    rx1602_pos = $P10."pos"()
  alt1605_end:
  alt1604_end:
.annotate 'line', 807
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1602_cur."!cursor_pos"(rx1602_pos)
    $P10 = rx1602_cur."ENDSTMT"()
    unless $P10, rx1602_fail
.annotate 'line', 801
  # rx pass
    rx1602_cur."!cursor_pass"(rx1602_pos, "blockoid")
    if_null rx1602_debug, debug_1139
    rx1602_cur."!cursor_debug"("PASS", "blockoid", " at pos=", rx1602_pos)
  debug_1139:
    .return (rx1602_cur)
  rx1602_restart:
    if_null rx1602_debug, debug_1140
    rx1602_cur."!cursor_debug"("NEXT", "blockoid")
  debug_1140:
  rx1602_fail:
    (rx1602_rep, rx1602_pos, $I10, $P10) = rx1602_cur."!mark_fail"(0)
    lt rx1602_pos, -1, rx1602_done
    eq rx1602_pos, -1, rx1602_fail
    jump $I10
  rx1602_done:
    rx1602_cur."!cursor_fail"()
    if_null rx1602_debug, debug_1141
    rx1602_cur."!cursor_debug"("FAIL", "blockoid")
  debug_1141:
    .return (rx1602_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blockoid"  :subid("72_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 801
    $P104 = self."!PREFIX__!subrule"("finishpad", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "newpad"  :subid("73_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 810
    .local string rx1609_tgt
    .local int rx1609_pos
    .local int rx1609_off
    .local int rx1609_eos
    .local int rx1609_rep
    .local pmc rx1609_cur
    .local pmc rx1609_debug
    (rx1609_cur, rx1609_pos, rx1609_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1609_cur
    .local pmc match
    .lex "$/", match
    length rx1609_eos, rx1609_tgt
    gt rx1609_pos, rx1609_eos, rx1609_done
    set rx1609_off, 0
    lt rx1609_pos, 2, rx1609_start
    sub rx1609_off, rx1609_pos, 1
    substr rx1609_tgt, rx1609_tgt, rx1609_off
  rx1609_start:
    eq $I10, 1, rx1609_restart
    if_null rx1609_debug, debug_1142
    rx1609_cur."!cursor_debug"("START", "newpad")
  debug_1142:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1610_done
    goto rxscan1610_scan
  rxscan1610_loop:
    (rx1609_pos) = rx1609_cur."from"()
    inc rx1609_pos
    rx1609_cur."!cursor_from"(rx1609_pos)
    ge rx1609_pos, rx1609_eos, rxscan1610_done
  rxscan1610_scan:
    set_addr $I10, rxscan1610_loop
    rx1609_cur."!mark_push"(0, rx1609_pos, $I10)
  rxscan1610_done:
  # rx pass
    rx1609_cur."!cursor_pass"(rx1609_pos, "newpad")
    if_null rx1609_debug, debug_1143
    rx1609_cur."!cursor_debug"("PASS", "newpad", " at pos=", rx1609_pos)
  debug_1143:
    .return (rx1609_cur)
  rx1609_restart:
    if_null rx1609_debug, debug_1144
    rx1609_cur."!cursor_debug"("NEXT", "newpad")
  debug_1144:
  rx1609_fail:
    (rx1609_rep, rx1609_pos, $I10, $P10) = rx1609_cur."!mark_fail"(0)
    lt rx1609_pos, -1, rx1609_done
    eq rx1609_pos, -1, rx1609_fail
    jump $I10
  rx1609_done:
    rx1609_cur."!cursor_fail"()
    if_null rx1609_debug, debug_1145
    rx1609_cur."!cursor_debug"("FAIL", "newpad")
  debug_1145:
    .return (rx1609_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__newpad"  :subid("74_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 810
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "outerctx"  :subid("75_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 811
    .local string rx1613_tgt
    .local int rx1613_pos
    .local int rx1613_off
    .local int rx1613_eos
    .local int rx1613_rep
    .local pmc rx1613_cur
    .local pmc rx1613_debug
    (rx1613_cur, rx1613_pos, rx1613_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1613_cur
    .local pmc match
    .lex "$/", match
    length rx1613_eos, rx1613_tgt
    gt rx1613_pos, rx1613_eos, rx1613_done
    set rx1613_off, 0
    lt rx1613_pos, 2, rx1613_start
    sub rx1613_off, rx1613_pos, 1
    substr rx1613_tgt, rx1613_tgt, rx1613_off
  rx1613_start:
    eq $I10, 1, rx1613_restart
    if_null rx1613_debug, debug_1146
    rx1613_cur."!cursor_debug"("START", "outerctx")
  debug_1146:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1614_done
    goto rxscan1614_scan
  rxscan1614_loop:
    (rx1613_pos) = rx1613_cur."from"()
    inc rx1613_pos
    rx1613_cur."!cursor_from"(rx1613_pos)
    ge rx1613_pos, rx1613_eos, rxscan1614_done
  rxscan1614_scan:
    set_addr $I10, rxscan1614_loop
    rx1613_cur."!mark_push"(0, rx1613_pos, $I10)
  rxscan1614_done:
  # rx pass
    rx1613_cur."!cursor_pass"(rx1613_pos, "outerctx")
    if_null rx1613_debug, debug_1147
    rx1613_cur."!cursor_debug"("PASS", "outerctx", " at pos=", rx1613_pos)
  debug_1147:
    .return (rx1613_cur)
  rx1613_restart:
    if_null rx1613_debug, debug_1148
    rx1613_cur."!cursor_debug"("NEXT", "outerctx")
  debug_1148:
  rx1613_fail:
    (rx1613_rep, rx1613_pos, $I10, $P10) = rx1613_cur."!mark_fail"(0)
    lt rx1613_pos, -1, rx1613_done
    eq rx1613_pos, -1, rx1613_fail
    jump $I10
  rx1613_done:
    rx1613_cur."!cursor_fail"()
    if_null rx1613_debug, debug_1149
    rx1613_cur."!cursor_debug"("FAIL", "outerctx")
  debug_1149:
    .return (rx1613_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__outerctx"  :subid("76_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 811
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "GLOBALish"  :subid("77_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 812
    .local string rx1617_tgt
    .local int rx1617_pos
    .local int rx1617_off
    .local int rx1617_eos
    .local int rx1617_rep
    .local pmc rx1617_cur
    .local pmc rx1617_debug
    (rx1617_cur, rx1617_pos, rx1617_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1617_cur
    .local pmc match
    .lex "$/", match
    length rx1617_eos, rx1617_tgt
    gt rx1617_pos, rx1617_eos, rx1617_done
    set rx1617_off, 0
    lt rx1617_pos, 2, rx1617_start
    sub rx1617_off, rx1617_pos, 1
    substr rx1617_tgt, rx1617_tgt, rx1617_off
  rx1617_start:
    eq $I10, 1, rx1617_restart
    if_null rx1617_debug, debug_1150
    rx1617_cur."!cursor_debug"("START", "GLOBALish")
  debug_1150:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1618_done
    goto rxscan1618_scan
  rxscan1618_loop:
    (rx1617_pos) = rx1617_cur."from"()
    inc rx1617_pos
    rx1617_cur."!cursor_from"(rx1617_pos)
    ge rx1617_pos, rx1617_eos, rxscan1618_done
  rxscan1618_scan:
    set_addr $I10, rxscan1618_loop
    rx1617_cur."!mark_push"(0, rx1617_pos, $I10)
  rxscan1618_done:
  # rx pass
    rx1617_cur."!cursor_pass"(rx1617_pos, "GLOBALish")
    if_null rx1617_debug, debug_1151
    rx1617_cur."!cursor_debug"("PASS", "GLOBALish", " at pos=", rx1617_pos)
  debug_1151:
    .return (rx1617_cur)
  rx1617_restart:
    if_null rx1617_debug, debug_1152
    rx1617_cur."!cursor_debug"("NEXT", "GLOBALish")
  debug_1152:
  rx1617_fail:
    (rx1617_rep, rx1617_pos, $I10, $P10) = rx1617_cur."!mark_fail"(0)
    lt rx1617_pos, -1, rx1617_done
    eq rx1617_pos, -1, rx1617_fail
    jump $I10
  rx1617_done:
    rx1617_cur."!cursor_fail"()
    if_null rx1617_debug, debug_1153
    rx1617_cur."!cursor_debug"("FAIL", "GLOBALish")
  debug_1153:
    .return (rx1617_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__GLOBALish"  :subid("78_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 812
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "finishpad"  :subid("79_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 813
    .local string rx1621_tgt
    .local int rx1621_pos
    .local int rx1621_off
    .local int rx1621_eos
    .local int rx1621_rep
    .local pmc rx1621_cur
    .local pmc rx1621_debug
    (rx1621_cur, rx1621_pos, rx1621_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1621_cur
    .local pmc match
    .lex "$/", match
    length rx1621_eos, rx1621_tgt
    gt rx1621_pos, rx1621_eos, rx1621_done
    set rx1621_off, 0
    lt rx1621_pos, 2, rx1621_start
    sub rx1621_off, rx1621_pos, 1
    substr rx1621_tgt, rx1621_tgt, rx1621_off
  rx1621_start:
    eq $I10, 1, rx1621_restart
    if_null rx1621_debug, debug_1154
    rx1621_cur."!cursor_debug"("START", "finishpad")
  debug_1154:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1622_done
    goto rxscan1622_scan
  rxscan1622_loop:
    (rx1621_pos) = rx1621_cur."from"()
    inc rx1621_pos
    rx1621_cur."!cursor_from"(rx1621_pos)
    ge rx1621_pos, rx1621_eos, rxscan1622_done
  rxscan1622_scan:
    set_addr $I10, rxscan1622_loop
    rx1621_cur."!mark_push"(0, rx1621_pos, $I10)
  rxscan1622_done:
  # rx pass
    rx1621_cur."!cursor_pass"(rx1621_pos, "finishpad")
    if_null rx1621_debug, debug_1155
    rx1621_cur."!cursor_debug"("PASS", "finishpad", " at pos=", rx1621_pos)
  debug_1155:
    .return (rx1621_cur)
  rx1621_restart:
    if_null rx1621_debug, debug_1156
    rx1621_cur."!cursor_debug"("NEXT", "finishpad")
  debug_1156:
  rx1621_fail:
    (rx1621_rep, rx1621_pos, $I10, $P10) = rx1621_cur."!mark_fail"(0)
    lt rx1621_pos, -1, rx1621_done
    eq rx1621_pos, -1, rx1621_fail
    jump $I10
  rx1621_done:
    rx1621_cur."!cursor_fail"()
    if_null rx1621_debug, debug_1157
    rx1621_cur."!cursor_debug"("FAIL", "finishpad")
  debug_1157:
    .return (rx1621_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__finishpad"  :subid("80_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 813
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "you_are_here"  :subid("81_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 814
    .local string rx1625_tgt
    .local int rx1625_pos
    .local int rx1625_off
    .local int rx1625_eos
    .local int rx1625_rep
    .local pmc rx1625_cur
    .local pmc rx1625_debug
    (rx1625_cur, rx1625_pos, rx1625_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1625_cur
    .local pmc match
    .lex "$/", match
    length rx1625_eos, rx1625_tgt
    gt rx1625_pos, rx1625_eos, rx1625_done
    set rx1625_off, 0
    lt rx1625_pos, 2, rx1625_start
    sub rx1625_off, rx1625_pos, 1
    substr rx1625_tgt, rx1625_tgt, rx1625_off
  rx1625_start:
    eq $I10, 1, rx1625_restart
    if_null rx1625_debug, debug_1158
    rx1625_cur."!cursor_debug"("START", "you_are_here")
  debug_1158:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1626_done
    goto rxscan1626_scan
  rxscan1626_loop:
    (rx1625_pos) = rx1625_cur."from"()
    inc rx1625_pos
    rx1625_cur."!cursor_from"(rx1625_pos)
    ge rx1625_pos, rx1625_eos, rxscan1626_done
  rxscan1626_scan:
    set_addr $I10, rxscan1626_loop
    rx1625_cur."!mark_push"(0, rx1625_pos, $I10)
  rxscan1626_done:
  # rx pass
    rx1625_cur."!cursor_pass"(rx1625_pos, "you_are_here")
    if_null rx1625_debug, debug_1159
    rx1625_cur."!cursor_debug"("PASS", "you_are_here", " at pos=", rx1625_pos)
  debug_1159:
    .return (rx1625_cur)
  rx1625_restart:
    if_null rx1625_debug, debug_1160
    rx1625_cur."!cursor_debug"("NEXT", "you_are_here")
  debug_1160:
  rx1625_fail:
    (rx1625_rep, rx1625_pos, $I10, $P10) = rx1625_cur."!mark_fail"(0)
    lt rx1625_pos, -1, rx1625_done
    eq rx1625_pos, -1, rx1625_fail
    jump $I10
  rx1625_done:
    rx1625_cur."!cursor_fail"()
    if_null rx1625_debug, debug_1161
    rx1625_cur."!cursor_debug"("FAIL", "you_are_here")
  debug_1161:
    .return (rx1625_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__you_are_here"  :subid("82_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 814
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator"  :subid("83_1335114138.94729")
    .param pmc param_1629
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 816
    .lex "self", param_1629
    $P103 = param_1629."!protoregex"("terminator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator"  :subid("84_1335114138.94729")
    .param pmc param_1631
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 816
    .lex "self", param_1631
    $P104 = param_1631."!PREFIX__!protoregex"("terminator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<;>"  :subid("85_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 818
    .local string rx1633_tgt
    .local int rx1633_pos
    .local int rx1633_off
    .local int rx1633_eos
    .local int rx1633_rep
    .local pmc rx1633_cur
    .local pmc rx1633_debug
    (rx1633_cur, rx1633_pos, rx1633_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1633_cur
    .local pmc match
    .lex "$/", match
    length rx1633_eos, rx1633_tgt
    gt rx1633_pos, rx1633_eos, rx1633_done
    set rx1633_off, 0
    lt rx1633_pos, 2, rx1633_start
    sub rx1633_off, rx1633_pos, 1
    substr rx1633_tgt, rx1633_tgt, rx1633_off
  rx1633_start:
    eq $I10, 1, rx1633_restart
    if_null rx1633_debug, debug_1162
    rx1633_cur."!cursor_debug"("START", "terminator:sym<;>")
  debug_1162:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1634_done
    goto rxscan1634_scan
  rxscan1634_loop:
    (rx1633_pos) = rx1633_cur."from"()
    inc rx1633_pos
    rx1633_cur."!cursor_from"(rx1633_pos)
    ge rx1633_pos, rx1633_eos, rxscan1634_done
  rxscan1634_scan:
    set_addr $I10, rxscan1634_loop
    rx1633_cur."!mark_push"(0, rx1633_pos, $I10)
  rxscan1634_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1633_pos, rx1633_off
    substr $S10, rx1633_tgt, $I10, 1
    index $I11, ";", $S10
    lt $I11, 0, rx1633_fail
  # rx pass
    rx1633_cur."!cursor_pass"(rx1633_pos, "terminator:sym<;>")
    if_null rx1633_debug, debug_1163
    rx1633_cur."!cursor_debug"("PASS", "terminator:sym<;>", " at pos=", rx1633_pos)
  debug_1163:
    .return (rx1633_cur)
  rx1633_restart:
    if_null rx1633_debug, debug_1164
    rx1633_cur."!cursor_debug"("NEXT", "terminator:sym<;>")
  debug_1164:
  rx1633_fail:
    (rx1633_rep, rx1633_pos, $I10, $P10) = rx1633_cur."!mark_fail"(0)
    lt rx1633_pos, -1, rx1633_done
    eq rx1633_pos, -1, rx1633_fail
    jump $I10
  rx1633_done:
    rx1633_cur."!cursor_fail"()
    if_null rx1633_debug, debug_1165
    rx1633_cur."!cursor_debug"("FAIL", "terminator:sym<;>")
  debug_1165:
    .return (rx1633_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<;>"  :subid("86_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 818
    new $P103, "ResizablePMCArray"
    push $P103, ";"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<}>"  :subid("87_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 819
    .local string rx1637_tgt
    .local int rx1637_pos
    .local int rx1637_off
    .local int rx1637_eos
    .local int rx1637_rep
    .local pmc rx1637_cur
    .local pmc rx1637_debug
    (rx1637_cur, rx1637_pos, rx1637_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1637_cur
    .local pmc match
    .lex "$/", match
    length rx1637_eos, rx1637_tgt
    gt rx1637_pos, rx1637_eos, rx1637_done
    set rx1637_off, 0
    lt rx1637_pos, 2, rx1637_start
    sub rx1637_off, rx1637_pos, 1
    substr rx1637_tgt, rx1637_tgt, rx1637_off
  rx1637_start:
    eq $I10, 1, rx1637_restart
    if_null rx1637_debug, debug_1166
    rx1637_cur."!cursor_debug"("START", "terminator:sym<}>")
  debug_1166:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1638_done
    goto rxscan1638_scan
  rxscan1638_loop:
    (rx1637_pos) = rx1637_cur."from"()
    inc rx1637_pos
    rx1637_cur."!cursor_from"(rx1637_pos)
    ge rx1637_pos, rx1637_eos, rxscan1638_done
  rxscan1638_scan:
    set_addr $I10, rxscan1638_loop
    rx1637_cur."!mark_push"(0, rx1637_pos, $I10)
  rxscan1638_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1637_pos, rx1637_off
    substr $S10, rx1637_tgt, $I10, 1
    index $I11, "}", $S10
    lt $I11, 0, rx1637_fail
  # rx pass
    rx1637_cur."!cursor_pass"(rx1637_pos, "terminator:sym<}>")
    if_null rx1637_debug, debug_1167
    rx1637_cur."!cursor_debug"("PASS", "terminator:sym<}>", " at pos=", rx1637_pos)
  debug_1167:
    .return (rx1637_cur)
  rx1637_restart:
    if_null rx1637_debug, debug_1168
    rx1637_cur."!cursor_debug"("NEXT", "terminator:sym<}>")
  debug_1168:
  rx1637_fail:
    (rx1637_rep, rx1637_pos, $I10, $P10) = rx1637_cur."!mark_fail"(0)
    lt rx1637_pos, -1, rx1637_done
    eq rx1637_pos, -1, rx1637_fail
    jump $I10
  rx1637_done:
    rx1637_cur."!cursor_fail"()
    if_null rx1637_debug, debug_1169
    rx1637_cur."!cursor_debug"("FAIL", "terminator:sym<}>")
  debug_1169:
    .return (rx1637_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<}>"  :subid("88_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 819
    new $P103, "ResizablePMCArray"
    push $P103, "}"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control"  :subid("89_1335114138.94729")
    .param pmc param_1641
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 823
    .lex "self", param_1641
    $P103 = param_1641."!protoregex"("statement_control")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control"  :subid("90_1335114138.94729")
    .param pmc param_1643
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 823
    .lex "self", param_1643
    $P104 = param_1643."!PREFIX__!protoregex"("statement_control")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<use>"  :subid("91_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 825
    .local string rx1645_tgt
    .local int rx1645_pos
    .local int rx1645_off
    .local int rx1645_eos
    .local int rx1645_rep
    .local pmc rx1645_cur
    .local pmc rx1645_debug
    (rx1645_cur, rx1645_pos, rx1645_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1645_cur
    .local pmc match
    .lex "$/", match
    length rx1645_eos, rx1645_tgt
    gt rx1645_pos, rx1645_eos, rx1645_done
    set rx1645_off, 0
    lt rx1645_pos, 2, rx1645_start
    sub rx1645_off, rx1645_pos, 1
    substr rx1645_tgt, rx1645_tgt, rx1645_off
  rx1645_start:
    eq $I10, 1, rx1645_restart
    if_null rx1645_debug, debug_1170
    rx1645_cur."!cursor_debug"("START", "statement_control:sym<use>")
  debug_1170:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1646_done
    goto rxscan1646_scan
  rxscan1646_loop:
    (rx1645_pos) = rx1645_cur."from"()
    inc rx1645_pos
    rx1645_cur."!cursor_from"(rx1645_pos)
    ge rx1645_pos, rx1645_eos, rxscan1646_done
  rxscan1646_scan:
    set_addr $I10, rxscan1646_loop
    rx1645_cur."!mark_push"(0, rx1645_pos, $I10)
  rxscan1646_done:
.annotate 'line', 826
  # rx subcapture "sym"
    set_addr $I10, rxcap_1647_fail
    rx1645_cur."!mark_push"(0, rx1645_pos, $I10)
  # rx literal  "use"
    add $I11, rx1645_pos, 3
    gt $I11, rx1645_eos, rx1645_fail
    sub $I11, rx1645_pos, rx1645_off
    substr $S10, rx1645_tgt, $I11, 3
    ne $S10, "use", rx1645_fail
    add rx1645_pos, 3
    set_addr $I10, rxcap_1647_fail
    ($I12, $I11) = rx1645_cur."!mark_peek"($I10)
    rx1645_cur."!cursor_pos"($I11)
    ($P10) = rx1645_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1645_pos, "")
    rx1645_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1647_done
  rxcap_1647_fail:
    goto rx1645_fail
  rxcap_1647_done:
  # rx charclass s
    ge rx1645_pos, rx1645_eos, rx1645_fail
    sub $I10, rx1645_pos, rx1645_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1645_tgt, $I10
    unless $I11, rx1645_fail
    inc rx1645_pos
  # rx subrule "ws" subtype=method negate=
    rx1645_cur."!cursor_pos"(rx1645_pos)
    $P10 = rx1645_cur."ws"()
    unless $P10, rx1645_fail
    rx1645_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1645_cur."!cursor_pos"(rx1645_pos)
    $P10 = rx1645_cur."name"()
    unless $P10, rx1645_fail
    rx1645_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1645_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1645_cur."!cursor_pos"(rx1645_pos)
    $P10 = rx1645_cur."ws"()
    unless $P10, rx1645_fail
    rx1645_pos = $P10."pos"()
.annotate 'line', 825
  # rx pass
    rx1645_cur."!cursor_pass"(rx1645_pos, "statement_control:sym<use>")
    if_null rx1645_debug, debug_1171
    rx1645_cur."!cursor_debug"("PASS", "statement_control:sym<use>", " at pos=", rx1645_pos)
  debug_1171:
    .return (rx1645_cur)
  rx1645_restart:
    if_null rx1645_debug, debug_1172
    rx1645_cur."!cursor_debug"("NEXT", "statement_control:sym<use>")
  debug_1172:
  rx1645_fail:
    (rx1645_rep, rx1645_pos, $I10, $P10) = rx1645_cur."!mark_fail"(0)
    lt rx1645_pos, -1, rx1645_done
    eq rx1645_pos, -1, rx1645_fail
    jump $I10
  rx1645_done:
    rx1645_cur."!cursor_fail"()
    if_null rx1645_debug, debug_1173
    rx1645_cur."!cursor_debug"("FAIL", "statement_control:sym<use>")
  debug_1173:
    .return (rx1645_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<use>"  :subid("92_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 825
    new $P105, "ResizablePMCArray"
    push $P105, "use"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<if>"  :subid("93_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 829
    .local string rx1650_tgt
    .local int rx1650_pos
    .local int rx1650_off
    .local int rx1650_eos
    .local int rx1650_rep
    .local pmc rx1650_cur
    .local pmc rx1650_debug
    (rx1650_cur, rx1650_pos, rx1650_tgt, $I10) = self."!cursor_start"()
    rx1650_cur."!cursor_caparray"("xblock", "else")
    .lex unicode:"$\x{a2}", rx1650_cur
    .local pmc match
    .lex "$/", match
    length rx1650_eos, rx1650_tgt
    gt rx1650_pos, rx1650_eos, rx1650_done
    set rx1650_off, 0
    lt rx1650_pos, 2, rx1650_start
    sub rx1650_off, rx1650_pos, 1
    substr rx1650_tgt, rx1650_tgt, rx1650_off
  rx1650_start:
    eq $I10, 1, rx1650_restart
    if_null rx1650_debug, debug_1174
    rx1650_cur."!cursor_debug"("START", "statement_control:sym<if>")
  debug_1174:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1651_done
    goto rxscan1651_scan
  rxscan1651_loop:
    (rx1650_pos) = rx1650_cur."from"()
    inc rx1650_pos
    rx1650_cur."!cursor_from"(rx1650_pos)
    ge rx1650_pos, rx1650_eos, rxscan1651_done
  rxscan1651_scan:
    set_addr $I10, rxscan1651_loop
    rx1650_cur."!mark_push"(0, rx1650_pos, $I10)
  rxscan1651_done:
.annotate 'line', 830
  # rx subcapture "sym"
    set_addr $I10, rxcap_1652_fail
    rx1650_cur."!mark_push"(0, rx1650_pos, $I10)
  # rx literal  "if"
    add $I11, rx1650_pos, 2
    gt $I11, rx1650_eos, rx1650_fail
    sub $I11, rx1650_pos, rx1650_off
    substr $S10, rx1650_tgt, $I11, 2
    ne $S10, "if", rx1650_fail
    add rx1650_pos, 2
    set_addr $I10, rxcap_1652_fail
    ($I12, $I11) = rx1650_cur."!mark_peek"($I10)
    rx1650_cur."!cursor_pos"($I11)
    ($P10) = rx1650_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1650_pos, "")
    rx1650_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1652_done
  rxcap_1652_fail:
    goto rx1650_fail
  rxcap_1652_done:
  # rx charclass s
    ge rx1650_pos, rx1650_eos, rx1650_fail
    sub $I10, rx1650_pos, rx1650_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1650_tgt, $I10
    unless $I11, rx1650_fail
    inc rx1650_pos
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
.annotate 'line', 831
  # rx subrule "xblock" subtype=capture negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."xblock"()
    unless $P10, rx1650_fail
    rx1650_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1650_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
.annotate 'line', 832
  # rx rxquantr1653 ** 0..*
    set_addr $I10, rxquantr1653_done
    rx1650_cur."!mark_push"(0, rx1650_pos, $I10)
  rxquantr1653_loop:
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
  # rx literal  "elsif"
    add $I11, rx1650_pos, 5
    gt $I11, rx1650_eos, rx1650_fail
    sub $I11, rx1650_pos, rx1650_off
    substr $S10, rx1650_tgt, $I11, 5
    ne $S10, "elsif", rx1650_fail
    add rx1650_pos, 5
  # rx charclass s
    ge rx1650_pos, rx1650_eos, rx1650_fail
    sub $I10, rx1650_pos, rx1650_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1650_tgt, $I10
    unless $I11, rx1650_fail
    inc rx1650_pos
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."xblock"()
    unless $P10, rx1650_fail
    rx1650_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1650_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
    set_addr $I10, rxquantr1653_done
    (rx1650_rep) = rx1650_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1653_done
    rx1650_cur."!mark_push"(rx1650_rep, rx1650_pos, $I10)
    goto rxquantr1653_loop
  rxquantr1653_done:
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
.annotate 'line', 833
  # rx rxquantr1654 ** 0..1
    set_addr $I10, rxquantr1654_done
    rx1650_cur."!mark_push"(0, rx1650_pos, $I10)
  rxquantr1654_loop:
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
  # rx literal  "else"
    add $I11, rx1650_pos, 4
    gt $I11, rx1650_eos, rx1650_fail
    sub $I11, rx1650_pos, rx1650_off
    substr $S10, rx1650_tgt, $I11, 4
    ne $S10, "else", rx1650_fail
    add rx1650_pos, 4
  # rx charclass s
    ge rx1650_pos, rx1650_eos, rx1650_fail
    sub $I10, rx1650_pos, rx1650_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1650_tgt, $I10
    unless $I11, rx1650_fail
    inc rx1650_pos
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."pblock"()
    unless $P10, rx1650_fail
    rx1650_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("else")
    rx1650_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
    set_addr $I10, rxquantr1654_done
    (rx1650_rep) = rx1650_cur."!mark_commit"($I10)
  rxquantr1654_done:
  # rx subrule "ws" subtype=method negate=
    rx1650_cur."!cursor_pos"(rx1650_pos)
    $P10 = rx1650_cur."ws"()
    unless $P10, rx1650_fail
    rx1650_pos = $P10."pos"()
.annotate 'line', 829
  # rx pass
    rx1650_cur."!cursor_pass"(rx1650_pos, "statement_control:sym<if>")
    if_null rx1650_debug, debug_1175
    rx1650_cur."!cursor_debug"("PASS", "statement_control:sym<if>", " at pos=", rx1650_pos)
  debug_1175:
    .return (rx1650_cur)
  rx1650_restart:
    if_null rx1650_debug, debug_1176
    rx1650_cur."!cursor_debug"("NEXT", "statement_control:sym<if>")
  debug_1176:
  rx1650_fail:
    (rx1650_rep, rx1650_pos, $I10, $P10) = rx1650_cur."!mark_fail"(0)
    lt rx1650_pos, -1, rx1650_done
    eq rx1650_pos, -1, rx1650_fail
    jump $I10
  rx1650_done:
    rx1650_cur."!cursor_fail"()
    if_null rx1650_debug, debug_1177
    rx1650_cur."!cursor_debug"("FAIL", "statement_control:sym<if>")
  debug_1177:
    .return (rx1650_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<if>"  :subid("94_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 829
    new $P113, "ResizablePMCArray"
    push $P113, "if"
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<unless>"  :subid("95_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 836
    .const 'Sub' $P1662 = "575_1335114138.94729" 
    capture_lex $P1662
    .local string rx1657_tgt
    .local int rx1657_pos
    .local int rx1657_off
    .local int rx1657_eos
    .local int rx1657_rep
    .local pmc rx1657_cur
    .local pmc rx1657_debug
    (rx1657_cur, rx1657_pos, rx1657_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1657_cur
    .local pmc match
    .lex "$/", match
    length rx1657_eos, rx1657_tgt
    gt rx1657_pos, rx1657_eos, rx1657_done
    set rx1657_off, 0
    lt rx1657_pos, 2, rx1657_start
    sub rx1657_off, rx1657_pos, 1
    substr rx1657_tgt, rx1657_tgt, rx1657_off
  rx1657_start:
    eq $I10, 1, rx1657_restart
    if_null rx1657_debug, debug_1178
    rx1657_cur."!cursor_debug"("START", "statement_control:sym<unless>")
  debug_1178:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1658_done
    goto rxscan1658_scan
  rxscan1658_loop:
    (rx1657_pos) = rx1657_cur."from"()
    inc rx1657_pos
    rx1657_cur."!cursor_from"(rx1657_pos)
    ge rx1657_pos, rx1657_eos, rxscan1658_done
  rxscan1658_scan:
    set_addr $I10, rxscan1658_loop
    rx1657_cur."!mark_push"(0, rx1657_pos, $I10)
  rxscan1658_done:
.annotate 'line', 837
  # rx subcapture "sym"
    set_addr $I10, rxcap_1659_fail
    rx1657_cur."!mark_push"(0, rx1657_pos, $I10)
  # rx literal  "unless"
    add $I11, rx1657_pos, 6
    gt $I11, rx1657_eos, rx1657_fail
    sub $I11, rx1657_pos, rx1657_off
    substr $S10, rx1657_tgt, $I11, 6
    ne $S10, "unless", rx1657_fail
    add rx1657_pos, 6
    set_addr $I10, rxcap_1659_fail
    ($I12, $I11) = rx1657_cur."!mark_peek"($I10)
    rx1657_cur."!cursor_pos"($I11)
    ($P10) = rx1657_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1657_pos, "")
    rx1657_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1659_done
  rxcap_1659_fail:
    goto rx1657_fail
  rxcap_1659_done:
  # rx charclass s
    ge rx1657_pos, rx1657_eos, rx1657_fail
    sub $I10, rx1657_pos, rx1657_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1657_tgt, $I10
    unless $I11, rx1657_fail
    inc rx1657_pos
  # rx subrule "ws" subtype=method negate=
    rx1657_cur."!cursor_pos"(rx1657_pos)
    $P10 = rx1657_cur."ws"()
    unless $P10, rx1657_fail
    rx1657_pos = $P10."pos"()
.annotate 'line', 838
  # rx subrule "xblock" subtype=capture negate=
    rx1657_cur."!cursor_pos"(rx1657_pos)
    $P10 = rx1657_cur."xblock"()
    unless $P10, rx1657_fail
    rx1657_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1657_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1657_cur."!cursor_pos"(rx1657_pos)
    $P10 = rx1657_cur."ws"()
    unless $P10, rx1657_fail
    rx1657_pos = $P10."pos"()
  alt1660_0:
.annotate 'line', 839
    set_addr $I10, alt1660_1
    rx1657_cur."!mark_push"(0, rx1657_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx1657_cur."!cursor_pos"(rx1657_pos)
    $P10 = rx1657_cur."ws"()
    unless $P10, rx1657_fail
    rx1657_pos = $P10."pos"()
  # rx subrule "before" subtype=zerowidth negate=1
    rx1657_cur."!cursor_pos"(rx1657_pos)
    .const 'Sub' $P1662 = "575_1335114138.94729" 
    capture_lex $P1662
    $P10 = rx1657_cur."before"($P1662)
    if $P10, rx1657_fail
  # rx subrule "ws" subtype=method negate=
    rx1657_cur."!cursor_pos"(rx1657_pos)
    $P10 = rx1657_cur."ws"()
    unless $P10, rx1657_fail
    rx1657_pos = $P10."pos"()
    goto alt1660_end
  alt1660_1:
  # rx subrule "ws" subtype=method negate=
    rx1657_cur."!cursor_pos"(rx1657_pos)
    $P10 = rx1657_cur."ws"()
    unless $P10, rx1657_fail
    rx1657_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1657_cur."!cursor_pos"(rx1657_pos)
    $P10 = rx1657_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    unless $P10, rx1657_fail
    rx1657_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1657_cur."!cursor_pos"(rx1657_pos)
    $P10 = rx1657_cur."ws"()
    unless $P10, rx1657_fail
    rx1657_pos = $P10."pos"()
  alt1660_end:
  # rx subrule "ws" subtype=method negate=
    rx1657_cur."!cursor_pos"(rx1657_pos)
    $P10 = rx1657_cur."ws"()
    unless $P10, rx1657_fail
    rx1657_pos = $P10."pos"()
.annotate 'line', 836
  # rx pass
    rx1657_cur."!cursor_pass"(rx1657_pos, "statement_control:sym<unless>")
    if_null rx1657_debug, debug_1183
    rx1657_cur."!cursor_debug"("PASS", "statement_control:sym<unless>", " at pos=", rx1657_pos)
  debug_1183:
    .return (rx1657_cur)
  rx1657_restart:
    if_null rx1657_debug, debug_1184
    rx1657_cur."!cursor_debug"("NEXT", "statement_control:sym<unless>")
  debug_1184:
  rx1657_fail:
    (rx1657_rep, rx1657_pos, $I10, $P10) = rx1657_cur."!mark_fail"(0)
    lt rx1657_pos, -1, rx1657_done
    eq rx1657_pos, -1, rx1657_fail
    jump $I10
  rx1657_done:
    rx1657_cur."!cursor_fail"()
    if_null rx1657_debug, debug_1185
    rx1657_cur."!cursor_debug"("FAIL", "statement_control:sym<unless>")
  debug_1185:
    .return (rx1657_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1661"  :anon :subid("575_1335114138.94729") :method :outer("95_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 839
    .local string rx1663_tgt
    .local int rx1663_pos
    .local int rx1663_off
    .local int rx1663_eos
    .local int rx1663_rep
    .local pmc rx1663_cur
    .local pmc rx1663_debug
    (rx1663_cur, rx1663_pos, rx1663_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1663_cur
    .local pmc match
    .lex "$/", match
    length rx1663_eos, rx1663_tgt
    gt rx1663_pos, rx1663_eos, rx1663_done
    set rx1663_off, 0
    lt rx1663_pos, 2, rx1663_start
    sub rx1663_off, rx1663_pos, 1
    substr rx1663_tgt, rx1663_tgt, rx1663_off
  rx1663_start:
    eq $I10, 1, rx1663_restart
    if_null rx1663_debug, debug_1179
    rx1663_cur."!cursor_debug"("START", "")
  debug_1179:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1664_done
    goto rxscan1664_scan
  rxscan1664_loop:
    (rx1663_pos) = rx1663_cur."from"()
    inc rx1663_pos
    rx1663_cur."!cursor_from"(rx1663_pos)
    ge rx1663_pos, rx1663_eos, rxscan1664_done
  rxscan1664_scan:
    set_addr $I10, rxscan1664_loop
    rx1663_cur."!mark_push"(0, rx1663_pos, $I10)
  rxscan1664_done:
  # rx literal  "else"
    add $I11, rx1663_pos, 4
    gt $I11, rx1663_eos, rx1663_fail
    sub $I11, rx1663_pos, rx1663_off
    substr $S10, rx1663_tgt, $I11, 4
    ne $S10, "else", rx1663_fail
    add rx1663_pos, 4
  # rx pass
    rx1663_cur."!cursor_pass"(rx1663_pos, "")
    if_null rx1663_debug, debug_1180
    rx1663_cur."!cursor_debug"("PASS", "", " at pos=", rx1663_pos)
  debug_1180:
    .return (rx1663_cur)
  rx1663_restart:
    if_null rx1663_debug, debug_1181
    rx1663_cur."!cursor_debug"("NEXT", "")
  debug_1181:
  rx1663_fail:
    (rx1663_rep, rx1663_pos, $I10, $P10) = rx1663_cur."!mark_fail"(0)
    lt rx1663_pos, -1, rx1663_done
    eq rx1663_pos, -1, rx1663_fail
    jump $I10
  rx1663_done:
    rx1663_cur."!cursor_fail"()
    if_null rx1663_debug, debug_1182
    rx1663_cur."!cursor_debug"("FAIL", "")
  debug_1182:
    .return (rx1663_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<unless>"  :subid("96_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 836
    new $P110, "ResizablePMCArray"
    push $P110, "unless"
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<while>"  :subid("97_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 842
    .local string rx1667_tgt
    .local int rx1667_pos
    .local int rx1667_off
    .local int rx1667_eos
    .local int rx1667_rep
    .local pmc rx1667_cur
    .local pmc rx1667_debug
    (rx1667_cur, rx1667_pos, rx1667_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1667_cur
    .local pmc match
    .lex "$/", match
    length rx1667_eos, rx1667_tgt
    gt rx1667_pos, rx1667_eos, rx1667_done
    set rx1667_off, 0
    lt rx1667_pos, 2, rx1667_start
    sub rx1667_off, rx1667_pos, 1
    substr rx1667_tgt, rx1667_tgt, rx1667_off
  rx1667_start:
    eq $I10, 1, rx1667_restart
    if_null rx1667_debug, debug_1186
    rx1667_cur."!cursor_debug"("START", "statement_control:sym<while>")
  debug_1186:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1668_done
    goto rxscan1668_scan
  rxscan1668_loop:
    (rx1667_pos) = rx1667_cur."from"()
    inc rx1667_pos
    rx1667_cur."!cursor_from"(rx1667_pos)
    ge rx1667_pos, rx1667_eos, rxscan1668_done
  rxscan1668_scan:
    set_addr $I10, rxscan1668_loop
    rx1667_cur."!mark_push"(0, rx1667_pos, $I10)
  rxscan1668_done:
.annotate 'line', 843
  # rx subcapture "sym"
    set_addr $I10, rxcap_1670_fail
    rx1667_cur."!mark_push"(0, rx1667_pos, $I10)
  alt1669_0:
    set_addr $I10, alt1669_1
    rx1667_cur."!mark_push"(0, rx1667_pos, $I10)
  # rx literal  "while"
    add $I11, rx1667_pos, 5
    gt $I11, rx1667_eos, rx1667_fail
    sub $I11, rx1667_pos, rx1667_off
    substr $S10, rx1667_tgt, $I11, 5
    ne $S10, "while", rx1667_fail
    add rx1667_pos, 5
    goto alt1669_end
  alt1669_1:
  # rx literal  "until"
    add $I11, rx1667_pos, 5
    gt $I11, rx1667_eos, rx1667_fail
    sub $I11, rx1667_pos, rx1667_off
    substr $S10, rx1667_tgt, $I11, 5
    ne $S10, "until", rx1667_fail
    add rx1667_pos, 5
  alt1669_end:
    set_addr $I10, rxcap_1670_fail
    ($I12, $I11) = rx1667_cur."!mark_peek"($I10)
    rx1667_cur."!cursor_pos"($I11)
    ($P10) = rx1667_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1667_pos, "")
    rx1667_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1670_done
  rxcap_1670_fail:
    goto rx1667_fail
  rxcap_1670_done:
  # rx charclass s
    ge rx1667_pos, rx1667_eos, rx1667_fail
    sub $I10, rx1667_pos, rx1667_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1667_tgt, $I10
    unless $I11, rx1667_fail
    inc rx1667_pos
  # rx subrule "ws" subtype=method negate=
    rx1667_cur."!cursor_pos"(rx1667_pos)
    $P10 = rx1667_cur."ws"()
    unless $P10, rx1667_fail
    rx1667_pos = $P10."pos"()
.annotate 'line', 844
  # rx subrule "xblock" subtype=capture negate=
    rx1667_cur."!cursor_pos"(rx1667_pos)
    $P10 = rx1667_cur."xblock"()
    unless $P10, rx1667_fail
    rx1667_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1667_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1667_cur."!cursor_pos"(rx1667_pos)
    $P10 = rx1667_cur."ws"()
    unless $P10, rx1667_fail
    rx1667_pos = $P10."pos"()
.annotate 'line', 842
  # rx pass
    rx1667_cur."!cursor_pass"(rx1667_pos, "statement_control:sym<while>")
    if_null rx1667_debug, debug_1187
    rx1667_cur."!cursor_debug"("PASS", "statement_control:sym<while>", " at pos=", rx1667_pos)
  debug_1187:
    .return (rx1667_cur)
  rx1667_restart:
    if_null rx1667_debug, debug_1188
    rx1667_cur."!cursor_debug"("NEXT", "statement_control:sym<while>")
  debug_1188:
  rx1667_fail:
    (rx1667_rep, rx1667_pos, $I10, $P10) = rx1667_cur."!mark_fail"(0)
    lt rx1667_pos, -1, rx1667_done
    eq rx1667_pos, -1, rx1667_fail
    jump $I10
  rx1667_done:
    rx1667_cur."!cursor_fail"()
    if_null rx1667_debug, debug_1189
    rx1667_cur."!cursor_debug"("FAIL", "statement_control:sym<while>")
  debug_1189:
    .return (rx1667_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<while>"  :subid("98_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 842
    new $P105, "ResizablePMCArray"
    push $P105, "until"
    push $P105, "while"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<repeat>"  :subid("99_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 847
    .local string rx1673_tgt
    .local int rx1673_pos
    .local int rx1673_off
    .local int rx1673_eos
    .local int rx1673_rep
    .local pmc rx1673_cur
    .local pmc rx1673_debug
    (rx1673_cur, rx1673_pos, rx1673_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1673_cur
    .local pmc match
    .lex "$/", match
    length rx1673_eos, rx1673_tgt
    gt rx1673_pos, rx1673_eos, rx1673_done
    set rx1673_off, 0
    lt rx1673_pos, 2, rx1673_start
    sub rx1673_off, rx1673_pos, 1
    substr rx1673_tgt, rx1673_tgt, rx1673_off
  rx1673_start:
    eq $I10, 1, rx1673_restart
    if_null rx1673_debug, debug_1190
    rx1673_cur."!cursor_debug"("START", "statement_control:sym<repeat>")
  debug_1190:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1674_done
    goto rxscan1674_scan
  rxscan1674_loop:
    (rx1673_pos) = rx1673_cur."from"()
    inc rx1673_pos
    rx1673_cur."!cursor_from"(rx1673_pos)
    ge rx1673_pos, rx1673_eos, rxscan1674_done
  rxscan1674_scan:
    set_addr $I10, rxscan1674_loop
    rx1673_cur."!mark_push"(0, rx1673_pos, $I10)
  rxscan1674_done:
.annotate 'line', 848
  # rx subcapture "sym"
    set_addr $I10, rxcap_1675_fail
    rx1673_cur."!mark_push"(0, rx1673_pos, $I10)
  # rx literal  "repeat"
    add $I11, rx1673_pos, 6
    gt $I11, rx1673_eos, rx1673_fail
    sub $I11, rx1673_pos, rx1673_off
    substr $S10, rx1673_tgt, $I11, 6
    ne $S10, "repeat", rx1673_fail
    add rx1673_pos, 6
    set_addr $I10, rxcap_1675_fail
    ($I12, $I11) = rx1673_cur."!mark_peek"($I10)
    rx1673_cur."!cursor_pos"($I11)
    ($P10) = rx1673_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1673_pos, "")
    rx1673_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1675_done
  rxcap_1675_fail:
    goto rx1673_fail
  rxcap_1675_done:
  # rx charclass s
    ge rx1673_pos, rx1673_eos, rx1673_fail
    sub $I10, rx1673_pos, rx1673_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1673_tgt, $I10
    unless $I11, rx1673_fail
    inc rx1673_pos
  # rx subrule "ws" subtype=method negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."ws"()
    unless $P10, rx1673_fail
    rx1673_pos = $P10."pos"()
  alt1676_0:
.annotate 'line', 849
    set_addr $I10, alt1676_1
    rx1673_cur."!mark_push"(0, rx1673_pos, $I10)
.annotate 'line', 850
  # rx subrule "ws" subtype=method negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."ws"()
    unless $P10, rx1673_fail
    rx1673_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_1678_fail
    rx1673_cur."!mark_push"(0, rx1673_pos, $I10)
  alt1677_0:
    set_addr $I10, alt1677_1
    rx1673_cur."!mark_push"(0, rx1673_pos, $I10)
  # rx literal  "while"
    add $I11, rx1673_pos, 5
    gt $I11, rx1673_eos, rx1673_fail
    sub $I11, rx1673_pos, rx1673_off
    substr $S10, rx1673_tgt, $I11, 5
    ne $S10, "while", rx1673_fail
    add rx1673_pos, 5
    goto alt1677_end
  alt1677_1:
  # rx literal  "until"
    add $I11, rx1673_pos, 5
    gt $I11, rx1673_eos, rx1673_fail
    sub $I11, rx1673_pos, rx1673_off
    substr $S10, rx1673_tgt, $I11, 5
    ne $S10, "until", rx1673_fail
    add rx1673_pos, 5
  alt1677_end:
    set_addr $I10, rxcap_1678_fail
    ($I12, $I11) = rx1673_cur."!mark_peek"($I10)
    rx1673_cur."!cursor_pos"($I11)
    ($P10) = rx1673_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1673_pos, "")
    rx1673_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_1678_done
  rxcap_1678_fail:
    goto rx1673_fail
  rxcap_1678_done:
  # rx charclass s
    ge rx1673_pos, rx1673_eos, rx1673_fail
    sub $I10, rx1673_pos, rx1673_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1673_tgt, $I10
    unless $I11, rx1673_fail
    inc rx1673_pos
  # rx subrule "ws" subtype=method negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."ws"()
    unless $P10, rx1673_fail
    rx1673_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."xblock"()
    unless $P10, rx1673_fail
    rx1673_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1673_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."ws"()
    unless $P10, rx1673_fail
    rx1673_pos = $P10."pos"()
    goto alt1676_end
  alt1676_1:
.annotate 'line', 851
  # rx subrule "ws" subtype=method negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."ws"()
    unless $P10, rx1673_fail
    rx1673_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."pblock"()
    unless $P10, rx1673_fail
    rx1673_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1673_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."ws"()
    unless $P10, rx1673_fail
    rx1673_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_1680_fail
    rx1673_cur."!mark_push"(0, rx1673_pos, $I10)
  alt1679_0:
    set_addr $I10, alt1679_1
    rx1673_cur."!mark_push"(0, rx1673_pos, $I10)
  # rx literal  "while"
    add $I11, rx1673_pos, 5
    gt $I11, rx1673_eos, rx1673_fail
    sub $I11, rx1673_pos, rx1673_off
    substr $S10, rx1673_tgt, $I11, 5
    ne $S10, "while", rx1673_fail
    add rx1673_pos, 5
    goto alt1679_end
  alt1679_1:
  # rx literal  "until"
    add $I11, rx1673_pos, 5
    gt $I11, rx1673_eos, rx1673_fail
    sub $I11, rx1673_pos, rx1673_off
    substr $S10, rx1673_tgt, $I11, 5
    ne $S10, "until", rx1673_fail
    add rx1673_pos, 5
  alt1679_end:
    set_addr $I10, rxcap_1680_fail
    ($I12, $I11) = rx1673_cur."!mark_peek"($I10)
    rx1673_cur."!cursor_pos"($I11)
    ($P10) = rx1673_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1673_pos, "")
    rx1673_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_1680_done
  rxcap_1680_fail:
    goto rx1673_fail
  rxcap_1680_done:
  # rx charclass s
    ge rx1673_pos, rx1673_eos, rx1673_fail
    sub $I10, rx1673_pos, rx1673_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1673_tgt, $I10
    unless $I11, rx1673_fail
    inc rx1673_pos
  # rx subrule "ws" subtype=method negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."ws"()
    unless $P10, rx1673_fail
    rx1673_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."EXPR"()
    unless $P10, rx1673_fail
    rx1673_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1673_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."ws"()
    unless $P10, rx1673_fail
    rx1673_pos = $P10."pos"()
  alt1676_end:
.annotate 'line', 852
  # rx subrule "ws" subtype=method negate=
    rx1673_cur."!cursor_pos"(rx1673_pos)
    $P10 = rx1673_cur."ws"()
    unless $P10, rx1673_fail
    rx1673_pos = $P10."pos"()
.annotate 'line', 847
  # rx pass
    rx1673_cur."!cursor_pass"(rx1673_pos, "statement_control:sym<repeat>")
    if_null rx1673_debug, debug_1191
    rx1673_cur."!cursor_debug"("PASS", "statement_control:sym<repeat>", " at pos=", rx1673_pos)
  debug_1191:
    .return (rx1673_cur)
  rx1673_restart:
    if_null rx1673_debug, debug_1192
    rx1673_cur."!cursor_debug"("NEXT", "statement_control:sym<repeat>")
  debug_1192:
  rx1673_fail:
    (rx1673_rep, rx1673_pos, $I10, $P10) = rx1673_cur."!mark_fail"(0)
    lt rx1673_pos, -1, rx1673_done
    eq rx1673_pos, -1, rx1673_fail
    jump $I10
  rx1673_done:
    rx1673_cur."!cursor_fail"()
    if_null rx1673_debug, debug_1193
    rx1673_cur."!cursor_debug"("FAIL", "statement_control:sym<repeat>")
  debug_1193:
    .return (rx1673_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<repeat>"  :subid("100_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 847
    new $P112, "ResizablePMCArray"
    push $P112, "repeat"
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<for>"  :subid("101_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 855
    .local string rx1683_tgt
    .local int rx1683_pos
    .local int rx1683_off
    .local int rx1683_eos
    .local int rx1683_rep
    .local pmc rx1683_cur
    .local pmc rx1683_debug
    (rx1683_cur, rx1683_pos, rx1683_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1683_cur
    .local pmc match
    .lex "$/", match
    length rx1683_eos, rx1683_tgt
    gt rx1683_pos, rx1683_eos, rx1683_done
    set rx1683_off, 0
    lt rx1683_pos, 2, rx1683_start
    sub rx1683_off, rx1683_pos, 1
    substr rx1683_tgt, rx1683_tgt, rx1683_off
  rx1683_start:
    eq $I10, 1, rx1683_restart
    if_null rx1683_debug, debug_1194
    rx1683_cur."!cursor_debug"("START", "statement_control:sym<for>")
  debug_1194:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1684_done
    goto rxscan1684_scan
  rxscan1684_loop:
    (rx1683_pos) = rx1683_cur."from"()
    inc rx1683_pos
    rx1683_cur."!cursor_from"(rx1683_pos)
    ge rx1683_pos, rx1683_eos, rxscan1684_done
  rxscan1684_scan:
    set_addr $I10, rxscan1684_loop
    rx1683_cur."!mark_push"(0, rx1683_pos, $I10)
  rxscan1684_done:
.annotate 'line', 856
  # rx subcapture "sym"
    set_addr $I10, rxcap_1685_fail
    rx1683_cur."!mark_push"(0, rx1683_pos, $I10)
  # rx literal  "for"
    add $I11, rx1683_pos, 3
    gt $I11, rx1683_eos, rx1683_fail
    sub $I11, rx1683_pos, rx1683_off
    substr $S10, rx1683_tgt, $I11, 3
    ne $S10, "for", rx1683_fail
    add rx1683_pos, 3
    set_addr $I10, rxcap_1685_fail
    ($I12, $I11) = rx1683_cur."!mark_peek"($I10)
    rx1683_cur."!cursor_pos"($I11)
    ($P10) = rx1683_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1683_pos, "")
    rx1683_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1685_done
  rxcap_1685_fail:
    goto rx1683_fail
  rxcap_1685_done:
  # rx charclass s
    ge rx1683_pos, rx1683_eos, rx1683_fail
    sub $I10, rx1683_pos, rx1683_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1683_tgt, $I10
    unless $I11, rx1683_fail
    inc rx1683_pos
  # rx subrule "ws" subtype=method negate=
    rx1683_cur."!cursor_pos"(rx1683_pos)
    $P10 = rx1683_cur."ws"()
    unless $P10, rx1683_fail
    rx1683_pos = $P10."pos"()
.annotate 'line', 857
  # rx subrule "xblock" subtype=capture negate=
    rx1683_cur."!cursor_pos"(rx1683_pos)
    $P10 = rx1683_cur."xblock"()
    unless $P10, rx1683_fail
    rx1683_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1683_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1683_cur."!cursor_pos"(rx1683_pos)
    $P10 = rx1683_cur."ws"()
    unless $P10, rx1683_fail
    rx1683_pos = $P10."pos"()
.annotate 'line', 855
  # rx pass
    rx1683_cur."!cursor_pass"(rx1683_pos, "statement_control:sym<for>")
    if_null rx1683_debug, debug_1195
    rx1683_cur."!cursor_debug"("PASS", "statement_control:sym<for>", " at pos=", rx1683_pos)
  debug_1195:
    .return (rx1683_cur)
  rx1683_restart:
    if_null rx1683_debug, debug_1196
    rx1683_cur."!cursor_debug"("NEXT", "statement_control:sym<for>")
  debug_1196:
  rx1683_fail:
    (rx1683_rep, rx1683_pos, $I10, $P10) = rx1683_cur."!mark_fail"(0)
    lt rx1683_pos, -1, rx1683_done
    eq rx1683_pos, -1, rx1683_fail
    jump $I10
  rx1683_done:
    rx1683_cur."!cursor_fail"()
    if_null rx1683_debug, debug_1197
    rx1683_cur."!cursor_debug"("FAIL", "statement_control:sym<for>")
  debug_1197:
    .return (rx1683_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<for>"  :subid("102_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 855
    new $P105, "ResizablePMCArray"
    push $P105, "for"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CATCH>"  :subid("103_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 860
    .local string rx1688_tgt
    .local int rx1688_pos
    .local int rx1688_off
    .local int rx1688_eos
    .local int rx1688_rep
    .local pmc rx1688_cur
    .local pmc rx1688_debug
    (rx1688_cur, rx1688_pos, rx1688_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1688_cur
    .local pmc match
    .lex "$/", match
    length rx1688_eos, rx1688_tgt
    gt rx1688_pos, rx1688_eos, rx1688_done
    set rx1688_off, 0
    lt rx1688_pos, 2, rx1688_start
    sub rx1688_off, rx1688_pos, 1
    substr rx1688_tgt, rx1688_tgt, rx1688_off
  rx1688_start:
    eq $I10, 1, rx1688_restart
    if_null rx1688_debug, debug_1198
    rx1688_cur."!cursor_debug"("START", "statement_control:sym<CATCH>")
  debug_1198:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1689_done
    goto rxscan1689_scan
  rxscan1689_loop:
    (rx1688_pos) = rx1688_cur."from"()
    inc rx1688_pos
    rx1688_cur."!cursor_from"(rx1688_pos)
    ge rx1688_pos, rx1688_eos, rxscan1689_done
  rxscan1689_scan:
    set_addr $I10, rxscan1689_loop
    rx1688_cur."!mark_push"(0, rx1688_pos, $I10)
  rxscan1689_done:
.annotate 'line', 861
  # rx subcapture "sym"
    set_addr $I10, rxcap_1690_fail
    rx1688_cur."!mark_push"(0, rx1688_pos, $I10)
  # rx literal  "CATCH"
    add $I11, rx1688_pos, 5
    gt $I11, rx1688_eos, rx1688_fail
    sub $I11, rx1688_pos, rx1688_off
    substr $S10, rx1688_tgt, $I11, 5
    ne $S10, "CATCH", rx1688_fail
    add rx1688_pos, 5
    set_addr $I10, rxcap_1690_fail
    ($I12, $I11) = rx1688_cur."!mark_peek"($I10)
    rx1688_cur."!cursor_pos"($I11)
    ($P10) = rx1688_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1688_pos, "")
    rx1688_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1690_done
  rxcap_1690_fail:
    goto rx1688_fail
  rxcap_1690_done:
  # rx charclass s
    ge rx1688_pos, rx1688_eos, rx1688_fail
    sub $I10, rx1688_pos, rx1688_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1688_tgt, $I10
    unless $I11, rx1688_fail
    inc rx1688_pos
  # rx subrule "ws" subtype=method negate=
    rx1688_cur."!cursor_pos"(rx1688_pos)
    $P10 = rx1688_cur."ws"()
    unless $P10, rx1688_fail
    rx1688_pos = $P10."pos"()
.annotate 'line', 862
  # rx subrule "block" subtype=capture negate=
    rx1688_cur."!cursor_pos"(rx1688_pos)
    $P10 = rx1688_cur."block"()
    unless $P10, rx1688_fail
    rx1688_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1688_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1688_cur."!cursor_pos"(rx1688_pos)
    $P10 = rx1688_cur."ws"()
    unless $P10, rx1688_fail
    rx1688_pos = $P10."pos"()
.annotate 'line', 860
  # rx pass
    rx1688_cur."!cursor_pass"(rx1688_pos, "statement_control:sym<CATCH>")
    if_null rx1688_debug, debug_1199
    rx1688_cur."!cursor_debug"("PASS", "statement_control:sym<CATCH>", " at pos=", rx1688_pos)
  debug_1199:
    .return (rx1688_cur)
  rx1688_restart:
    if_null rx1688_debug, debug_1200
    rx1688_cur."!cursor_debug"("NEXT", "statement_control:sym<CATCH>")
  debug_1200:
  rx1688_fail:
    (rx1688_rep, rx1688_pos, $I10, $P10) = rx1688_cur."!mark_fail"(0)
    lt rx1688_pos, -1, rx1688_done
    eq rx1688_pos, -1, rx1688_fail
    jump $I10
  rx1688_done:
    rx1688_cur."!cursor_fail"()
    if_null rx1688_debug, debug_1201
    rx1688_cur."!cursor_debug"("FAIL", "statement_control:sym<CATCH>")
  debug_1201:
    .return (rx1688_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CATCH>"  :subid("104_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 860
    new $P105, "ResizablePMCArray"
    push $P105, "CATCH"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CONTROL>"  :subid("105_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 865
    .local string rx1693_tgt
    .local int rx1693_pos
    .local int rx1693_off
    .local int rx1693_eos
    .local int rx1693_rep
    .local pmc rx1693_cur
    .local pmc rx1693_debug
    (rx1693_cur, rx1693_pos, rx1693_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1693_cur
    .local pmc match
    .lex "$/", match
    length rx1693_eos, rx1693_tgt
    gt rx1693_pos, rx1693_eos, rx1693_done
    set rx1693_off, 0
    lt rx1693_pos, 2, rx1693_start
    sub rx1693_off, rx1693_pos, 1
    substr rx1693_tgt, rx1693_tgt, rx1693_off
  rx1693_start:
    eq $I10, 1, rx1693_restart
    if_null rx1693_debug, debug_1202
    rx1693_cur."!cursor_debug"("START", "statement_control:sym<CONTROL>")
  debug_1202:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1694_done
    goto rxscan1694_scan
  rxscan1694_loop:
    (rx1693_pos) = rx1693_cur."from"()
    inc rx1693_pos
    rx1693_cur."!cursor_from"(rx1693_pos)
    ge rx1693_pos, rx1693_eos, rxscan1694_done
  rxscan1694_scan:
    set_addr $I10, rxscan1694_loop
    rx1693_cur."!mark_push"(0, rx1693_pos, $I10)
  rxscan1694_done:
.annotate 'line', 866
  # rx subcapture "sym"
    set_addr $I10, rxcap_1695_fail
    rx1693_cur."!mark_push"(0, rx1693_pos, $I10)
  # rx literal  "CONTROL"
    add $I11, rx1693_pos, 7
    gt $I11, rx1693_eos, rx1693_fail
    sub $I11, rx1693_pos, rx1693_off
    substr $S10, rx1693_tgt, $I11, 7
    ne $S10, "CONTROL", rx1693_fail
    add rx1693_pos, 7
    set_addr $I10, rxcap_1695_fail
    ($I12, $I11) = rx1693_cur."!mark_peek"($I10)
    rx1693_cur."!cursor_pos"($I11)
    ($P10) = rx1693_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1693_pos, "")
    rx1693_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1695_done
  rxcap_1695_fail:
    goto rx1693_fail
  rxcap_1695_done:
  # rx charclass s
    ge rx1693_pos, rx1693_eos, rx1693_fail
    sub $I10, rx1693_pos, rx1693_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1693_tgt, $I10
    unless $I11, rx1693_fail
    inc rx1693_pos
  # rx subrule "ws" subtype=method negate=
    rx1693_cur."!cursor_pos"(rx1693_pos)
    $P10 = rx1693_cur."ws"()
    unless $P10, rx1693_fail
    rx1693_pos = $P10."pos"()
.annotate 'line', 867
  # rx subrule "block" subtype=capture negate=
    rx1693_cur."!cursor_pos"(rx1693_pos)
    $P10 = rx1693_cur."block"()
    unless $P10, rx1693_fail
    rx1693_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1693_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1693_cur."!cursor_pos"(rx1693_pos)
    $P10 = rx1693_cur."ws"()
    unless $P10, rx1693_fail
    rx1693_pos = $P10."pos"()
.annotate 'line', 865
  # rx pass
    rx1693_cur."!cursor_pass"(rx1693_pos, "statement_control:sym<CONTROL>")
    if_null rx1693_debug, debug_1203
    rx1693_cur."!cursor_debug"("PASS", "statement_control:sym<CONTROL>", " at pos=", rx1693_pos)
  debug_1203:
    .return (rx1693_cur)
  rx1693_restart:
    if_null rx1693_debug, debug_1204
    rx1693_cur."!cursor_debug"("NEXT", "statement_control:sym<CONTROL>")
  debug_1204:
  rx1693_fail:
    (rx1693_rep, rx1693_pos, $I10, $P10) = rx1693_cur."!mark_fail"(0)
    lt rx1693_pos, -1, rx1693_done
    eq rx1693_pos, -1, rx1693_fail
    jump $I10
  rx1693_done:
    rx1693_cur."!cursor_fail"()
    if_null rx1693_debug, debug_1205
    rx1693_cur."!cursor_debug"("FAIL", "statement_control:sym<CONTROL>")
  debug_1205:
    .return (rx1693_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CONTROL>"  :subid("106_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 865
    new $P105, "ResizablePMCArray"
    push $P105, "CONTROL"
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix"  :subid("107_1335114138.94729")
    .param pmc param_1698
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 870
    .lex "self", param_1698
    $P103 = param_1698."!protoregex"("statement_prefix")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix"  :subid("108_1335114138.94729")
    .param pmc param_1700
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 870
    .lex "self", param_1700
    $P104 = param_1700."!PREFIX__!protoregex"("statement_prefix")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<BEGIN>"  :subid("109_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 871
    .local string rx1702_tgt
    .local int rx1702_pos
    .local int rx1702_off
    .local int rx1702_eos
    .local int rx1702_rep
    .local pmc rx1702_cur
    .local pmc rx1702_debug
    (rx1702_cur, rx1702_pos, rx1702_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1702_cur
    .local pmc match
    .lex "$/", match
    length rx1702_eos, rx1702_tgt
    gt rx1702_pos, rx1702_eos, rx1702_done
    set rx1702_off, 0
    lt rx1702_pos, 2, rx1702_start
    sub rx1702_off, rx1702_pos, 1
    substr rx1702_tgt, rx1702_tgt, rx1702_off
  rx1702_start:
    eq $I10, 1, rx1702_restart
    if_null rx1702_debug, debug_1206
    rx1702_cur."!cursor_debug"("START", "statement_prefix:sym<BEGIN>")
  debug_1206:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1703_done
    goto rxscan1703_scan
  rxscan1703_loop:
    (rx1702_pos) = rx1702_cur."from"()
    inc rx1702_pos
    rx1702_cur."!cursor_from"(rx1702_pos)
    ge rx1702_pos, rx1702_eos, rxscan1703_done
  rxscan1703_scan:
    set_addr $I10, rxscan1703_loop
    rx1702_cur."!mark_push"(0, rx1702_pos, $I10)
  rxscan1703_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1704_fail
    rx1702_cur."!mark_push"(0, rx1702_pos, $I10)
  # rx literal  "BEGIN"
    add $I11, rx1702_pos, 5
    gt $I11, rx1702_eos, rx1702_fail
    sub $I11, rx1702_pos, rx1702_off
    substr $S10, rx1702_tgt, $I11, 5
    ne $S10, "BEGIN", rx1702_fail
    add rx1702_pos, 5
    set_addr $I10, rxcap_1704_fail
    ($I12, $I11) = rx1702_cur."!mark_peek"($I10)
    rx1702_cur."!cursor_pos"($I11)
    ($P10) = rx1702_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1702_pos, "")
    rx1702_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1704_done
  rxcap_1704_fail:
    goto rx1702_fail
  rxcap_1704_done:
  # rx subrule "blorst" subtype=capture negate=
    rx1702_cur."!cursor_pos"(rx1702_pos)
    $P10 = rx1702_cur."blorst"()
    unless $P10, rx1702_fail
    rx1702_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1702_pos = $P10."pos"()
  # rx pass
    rx1702_cur."!cursor_pass"(rx1702_pos, "statement_prefix:sym<BEGIN>")
    if_null rx1702_debug, debug_1207
    rx1702_cur."!cursor_debug"("PASS", "statement_prefix:sym<BEGIN>", " at pos=", rx1702_pos)
  debug_1207:
    .return (rx1702_cur)
  rx1702_restart:
    if_null rx1702_debug, debug_1208
    rx1702_cur."!cursor_debug"("NEXT", "statement_prefix:sym<BEGIN>")
  debug_1208:
  rx1702_fail:
    (rx1702_rep, rx1702_pos, $I10, $P10) = rx1702_cur."!mark_fail"(0)
    lt rx1702_pos, -1, rx1702_done
    eq rx1702_pos, -1, rx1702_fail
    jump $I10
  rx1702_done:
    rx1702_cur."!cursor_fail"()
    if_null rx1702_debug, debug_1209
    rx1702_cur."!cursor_debug"("FAIL", "statement_prefix:sym<BEGIN>")
  debug_1209:
    .return (rx1702_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<BEGIN>"  :subid("110_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 871
    $P103 = self."!PREFIX__!subrule"("blorst", "BEGIN")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<INIT>"  :subid("111_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 872
    .local string rx1707_tgt
    .local int rx1707_pos
    .local int rx1707_off
    .local int rx1707_eos
    .local int rx1707_rep
    .local pmc rx1707_cur
    .local pmc rx1707_debug
    (rx1707_cur, rx1707_pos, rx1707_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1707_cur
    .local pmc match
    .lex "$/", match
    length rx1707_eos, rx1707_tgt
    gt rx1707_pos, rx1707_eos, rx1707_done
    set rx1707_off, 0
    lt rx1707_pos, 2, rx1707_start
    sub rx1707_off, rx1707_pos, 1
    substr rx1707_tgt, rx1707_tgt, rx1707_off
  rx1707_start:
    eq $I10, 1, rx1707_restart
    if_null rx1707_debug, debug_1210
    rx1707_cur."!cursor_debug"("START", "statement_prefix:sym<INIT>")
  debug_1210:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1708_done
    goto rxscan1708_scan
  rxscan1708_loop:
    (rx1707_pos) = rx1707_cur."from"()
    inc rx1707_pos
    rx1707_cur."!cursor_from"(rx1707_pos)
    ge rx1707_pos, rx1707_eos, rxscan1708_done
  rxscan1708_scan:
    set_addr $I10, rxscan1708_loop
    rx1707_cur."!mark_push"(0, rx1707_pos, $I10)
  rxscan1708_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1709_fail
    rx1707_cur."!mark_push"(0, rx1707_pos, $I10)
  # rx literal  "INIT"
    add $I11, rx1707_pos, 4
    gt $I11, rx1707_eos, rx1707_fail
    sub $I11, rx1707_pos, rx1707_off
    substr $S10, rx1707_tgt, $I11, 4
    ne $S10, "INIT", rx1707_fail
    add rx1707_pos, 4
    set_addr $I10, rxcap_1709_fail
    ($I12, $I11) = rx1707_cur."!mark_peek"($I10)
    rx1707_cur."!cursor_pos"($I11)
    ($P10) = rx1707_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1707_pos, "")
    rx1707_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1709_done
  rxcap_1709_fail:
    goto rx1707_fail
  rxcap_1709_done:
  # rx subrule "blorst" subtype=capture negate=
    rx1707_cur."!cursor_pos"(rx1707_pos)
    $P10 = rx1707_cur."blorst"()
    unless $P10, rx1707_fail
    rx1707_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1707_pos = $P10."pos"()
  # rx pass
    rx1707_cur."!cursor_pass"(rx1707_pos, "statement_prefix:sym<INIT>")
    if_null rx1707_debug, debug_1211
    rx1707_cur."!cursor_debug"("PASS", "statement_prefix:sym<INIT>", " at pos=", rx1707_pos)
  debug_1211:
    .return (rx1707_cur)
  rx1707_restart:
    if_null rx1707_debug, debug_1212
    rx1707_cur."!cursor_debug"("NEXT", "statement_prefix:sym<INIT>")
  debug_1212:
  rx1707_fail:
    (rx1707_rep, rx1707_pos, $I10, $P10) = rx1707_cur."!mark_fail"(0)
    lt rx1707_pos, -1, rx1707_done
    eq rx1707_pos, -1, rx1707_fail
    jump $I10
  rx1707_done:
    rx1707_cur."!cursor_fail"()
    if_null rx1707_debug, debug_1213
    rx1707_cur."!cursor_debug"("FAIL", "statement_prefix:sym<INIT>")
  debug_1213:
    .return (rx1707_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<INIT>"  :subid("112_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 872
    $P103 = self."!PREFIX__!subrule"("blorst", "INIT")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<try>"  :subid("113_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 874
    .local string rx1712_tgt
    .local int rx1712_pos
    .local int rx1712_off
    .local int rx1712_eos
    .local int rx1712_rep
    .local pmc rx1712_cur
    .local pmc rx1712_debug
    (rx1712_cur, rx1712_pos, rx1712_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1712_cur
    .local pmc match
    .lex "$/", match
    length rx1712_eos, rx1712_tgt
    gt rx1712_pos, rx1712_eos, rx1712_done
    set rx1712_off, 0
    lt rx1712_pos, 2, rx1712_start
    sub rx1712_off, rx1712_pos, 1
    substr rx1712_tgt, rx1712_tgt, rx1712_off
  rx1712_start:
    eq $I10, 1, rx1712_restart
    if_null rx1712_debug, debug_1214
    rx1712_cur."!cursor_debug"("START", "statement_prefix:sym<try>")
  debug_1214:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1713_done
    goto rxscan1713_scan
  rxscan1713_loop:
    (rx1712_pos) = rx1712_cur."from"()
    inc rx1712_pos
    rx1712_cur."!cursor_from"(rx1712_pos)
    ge rx1712_pos, rx1712_eos, rxscan1713_done
  rxscan1713_scan:
    set_addr $I10, rxscan1713_loop
    rx1712_cur."!mark_push"(0, rx1712_pos, $I10)
  rxscan1713_done:
.annotate 'line', 875
  # rx subcapture "sym"
    set_addr $I10, rxcap_1714_fail
    rx1712_cur."!mark_push"(0, rx1712_pos, $I10)
  # rx literal  "try"
    add $I11, rx1712_pos, 3
    gt $I11, rx1712_eos, rx1712_fail
    sub $I11, rx1712_pos, rx1712_off
    substr $S10, rx1712_tgt, $I11, 3
    ne $S10, "try", rx1712_fail
    add rx1712_pos, 3
    set_addr $I10, rxcap_1714_fail
    ($I12, $I11) = rx1712_cur."!mark_peek"($I10)
    rx1712_cur."!cursor_pos"($I11)
    ($P10) = rx1712_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1712_pos, "")
    rx1712_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1714_done
  rxcap_1714_fail:
    goto rx1712_fail
  rxcap_1714_done:
.annotate 'line', 876
  # rx subrule "blorst" subtype=capture negate=
    rx1712_cur."!cursor_pos"(rx1712_pos)
    $P10 = rx1712_cur."blorst"()
    unless $P10, rx1712_fail
    rx1712_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1712_pos = $P10."pos"()
.annotate 'line', 874
  # rx pass
    rx1712_cur."!cursor_pass"(rx1712_pos, "statement_prefix:sym<try>")
    if_null rx1712_debug, debug_1215
    rx1712_cur."!cursor_debug"("PASS", "statement_prefix:sym<try>", " at pos=", rx1712_pos)
  debug_1215:
    .return (rx1712_cur)
  rx1712_restart:
    if_null rx1712_debug, debug_1216
    rx1712_cur."!cursor_debug"("NEXT", "statement_prefix:sym<try>")
  debug_1216:
  rx1712_fail:
    (rx1712_rep, rx1712_pos, $I10, $P10) = rx1712_cur."!mark_fail"(0)
    lt rx1712_pos, -1, rx1712_done
    eq rx1712_pos, -1, rx1712_fail
    jump $I10
  rx1712_done:
    rx1712_cur."!cursor_fail"()
    if_null rx1712_debug, debug_1217
    rx1712_cur."!cursor_debug"("FAIL", "statement_prefix:sym<try>")
  debug_1217:
    .return (rx1712_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<try>"  :subid("114_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 874
    $P103 = self."!PREFIX__!subrule"("blorst", "try")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blorst"  :subid("115_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 879
    .local string rx1717_tgt
    .local int rx1717_pos
    .local int rx1717_off
    .local int rx1717_eos
    .local int rx1717_rep
    .local pmc rx1717_cur
    .local pmc rx1717_debug
    (rx1717_cur, rx1717_pos, rx1717_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1717_cur
    .local pmc match
    .lex "$/", match
    length rx1717_eos, rx1717_tgt
    gt rx1717_pos, rx1717_eos, rx1717_done
    set rx1717_off, 0
    lt rx1717_pos, 2, rx1717_start
    sub rx1717_off, rx1717_pos, 1
    substr rx1717_tgt, rx1717_tgt, rx1717_off
  rx1717_start:
    eq $I10, 1, rx1717_restart
    if_null rx1717_debug, debug_1218
    rx1717_cur."!cursor_debug"("START", "blorst")
  debug_1218:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1718_done
    goto rxscan1718_scan
  rxscan1718_loop:
    (rx1717_pos) = rx1717_cur."from"()
    inc rx1717_pos
    rx1717_cur."!cursor_from"(rx1717_pos)
    ge rx1717_pos, rx1717_eos, rxscan1718_done
  rxscan1718_scan:
    set_addr $I10, rxscan1718_loop
    rx1717_cur."!mark_push"(0, rx1717_pos, $I10)
  rxscan1718_done:
.annotate 'line', 880
  # rx charclass s
    ge rx1717_pos, rx1717_eos, rx1717_fail
    sub $I10, rx1717_pos, rx1717_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx1717_tgt, $I10
    unless $I11, rx1717_fail
    inc rx1717_pos
  # rx subrule "ws" subtype=method negate=
    rx1717_cur."!cursor_pos"(rx1717_pos)
    $P10 = rx1717_cur."ws"()
    unless $P10, rx1717_fail
    rx1717_pos = $P10."pos"()
  alt1719_0:
    set_addr $I10, alt1719_1
    rx1717_cur."!mark_push"(0, rx1717_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1717_pos, rx1717_off
    substr $S10, rx1717_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1717_fail
  # rx subrule "block" subtype=capture negate=
    rx1717_cur."!cursor_pos"(rx1717_pos)
    $P10 = rx1717_cur."block"()
    unless $P10, rx1717_fail
    rx1717_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1717_pos = $P10."pos"()
    goto alt1719_end
  alt1719_1:
  # rx subrule "statement" subtype=capture negate=
    rx1717_cur."!cursor_pos"(rx1717_pos)
    $P10 = rx1717_cur."statement"()
    unless $P10, rx1717_fail
    rx1717_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1717_pos = $P10."pos"()
  alt1719_end:
.annotate 'line', 879
  # rx pass
    rx1717_cur."!cursor_pass"(rx1717_pos, "blorst")
    if_null rx1717_debug, debug_1219
    rx1717_cur."!cursor_debug"("PASS", "blorst", " at pos=", rx1717_pos)
  debug_1219:
    .return (rx1717_cur)
  rx1717_restart:
    if_null rx1717_debug, debug_1220
    rx1717_cur."!cursor_debug"("NEXT", "blorst")
  debug_1220:
  rx1717_fail:
    (rx1717_rep, rx1717_pos, $I10, $P10) = rx1717_cur."!mark_fail"(0)
    lt rx1717_pos, -1, rx1717_done
    eq rx1717_pos, -1, rx1717_fail
    jump $I10
  rx1717_done:
    rx1717_cur."!cursor_fail"()
    if_null rx1717_debug, debug_1221
    rx1717_cur."!cursor_debug"("FAIL", "blorst")
  debug_1221:
    .return (rx1717_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blorst"  :subid("116_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 879
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond"  :subid("117_1335114138.94729")
    .param pmc param_1722
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 885
    .lex "self", param_1722
    $P103 = param_1722."!protoregex"("statement_mod_cond")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond"  :subid("118_1335114138.94729")
    .param pmc param_1724
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 885
    .lex "self", param_1724
    $P104 = param_1724."!PREFIX__!protoregex"("statement_mod_cond")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<if>"  :subid("119_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 887
    .local string rx1726_tgt
    .local int rx1726_pos
    .local int rx1726_off
    .local int rx1726_eos
    .local int rx1726_rep
    .local pmc rx1726_cur
    .local pmc rx1726_debug
    (rx1726_cur, rx1726_pos, rx1726_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1726_cur
    .local pmc match
    .lex "$/", match
    length rx1726_eos, rx1726_tgt
    gt rx1726_pos, rx1726_eos, rx1726_done
    set rx1726_off, 0
    lt rx1726_pos, 2, rx1726_start
    sub rx1726_off, rx1726_pos, 1
    substr rx1726_tgt, rx1726_tgt, rx1726_off
  rx1726_start:
    eq $I10, 1, rx1726_restart
    if_null rx1726_debug, debug_1222
    rx1726_cur."!cursor_debug"("START", "statement_mod_cond:sym<if>")
  debug_1222:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1727_done
    goto rxscan1727_scan
  rxscan1727_loop:
    (rx1726_pos) = rx1726_cur."from"()
    inc rx1726_pos
    rx1726_cur."!cursor_from"(rx1726_pos)
    ge rx1726_pos, rx1726_eos, rxscan1727_done
  rxscan1727_scan:
    set_addr $I10, rxscan1727_loop
    rx1726_cur."!mark_push"(0, rx1726_pos, $I10)
  rxscan1727_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1728_fail
    rx1726_cur."!mark_push"(0, rx1726_pos, $I10)
  # rx literal  "if"
    add $I11, rx1726_pos, 2
    gt $I11, rx1726_eos, rx1726_fail
    sub $I11, rx1726_pos, rx1726_off
    substr $S10, rx1726_tgt, $I11, 2
    ne $S10, "if", rx1726_fail
    add rx1726_pos, 2
    set_addr $I10, rxcap_1728_fail
    ($I12, $I11) = rx1726_cur."!mark_peek"($I10)
    rx1726_cur."!cursor_pos"($I11)
    ($P10) = rx1726_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1726_pos, "")
    rx1726_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1728_done
  rxcap_1728_fail:
    goto rx1726_fail
  rxcap_1728_done:
  # rx subrule "ws" subtype=method negate=
    rx1726_cur."!cursor_pos"(rx1726_pos)
    $P10 = rx1726_cur."ws"()
    unless $P10, rx1726_fail
    rx1726_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1726_cur."!cursor_pos"(rx1726_pos)
    $P10 = rx1726_cur."EXPR"()
    unless $P10, rx1726_fail
    rx1726_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1726_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1726_cur."!cursor_pos"(rx1726_pos)
    $P10 = rx1726_cur."ws"()
    unless $P10, rx1726_fail
    rx1726_pos = $P10."pos"()
  # rx pass
    rx1726_cur."!cursor_pass"(rx1726_pos, "statement_mod_cond:sym<if>")
    if_null rx1726_debug, debug_1223
    rx1726_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<if>", " at pos=", rx1726_pos)
  debug_1223:
    .return (rx1726_cur)
  rx1726_restart:
    if_null rx1726_debug, debug_1224
    rx1726_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<if>")
  debug_1224:
  rx1726_fail:
    (rx1726_rep, rx1726_pos, $I10, $P10) = rx1726_cur."!mark_fail"(0)
    lt rx1726_pos, -1, rx1726_done
    eq rx1726_pos, -1, rx1726_fail
    jump $I10
  rx1726_done:
    rx1726_cur."!cursor_fail"()
    if_null rx1726_debug, debug_1225
    rx1726_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<if>")
  debug_1225:
    .return (rx1726_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<if>"  :subid("120_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 887
    $P105 = self."!PREFIX__!subrule"("ws", "if")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<unless>"  :subid("121_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 888
    .local string rx1731_tgt
    .local int rx1731_pos
    .local int rx1731_off
    .local int rx1731_eos
    .local int rx1731_rep
    .local pmc rx1731_cur
    .local pmc rx1731_debug
    (rx1731_cur, rx1731_pos, rx1731_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1731_cur
    .local pmc match
    .lex "$/", match
    length rx1731_eos, rx1731_tgt
    gt rx1731_pos, rx1731_eos, rx1731_done
    set rx1731_off, 0
    lt rx1731_pos, 2, rx1731_start
    sub rx1731_off, rx1731_pos, 1
    substr rx1731_tgt, rx1731_tgt, rx1731_off
  rx1731_start:
    eq $I10, 1, rx1731_restart
    if_null rx1731_debug, debug_1226
    rx1731_cur."!cursor_debug"("START", "statement_mod_cond:sym<unless>")
  debug_1226:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1732_done
    goto rxscan1732_scan
  rxscan1732_loop:
    (rx1731_pos) = rx1731_cur."from"()
    inc rx1731_pos
    rx1731_cur."!cursor_from"(rx1731_pos)
    ge rx1731_pos, rx1731_eos, rxscan1732_done
  rxscan1732_scan:
    set_addr $I10, rxscan1732_loop
    rx1731_cur."!mark_push"(0, rx1731_pos, $I10)
  rxscan1732_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1733_fail
    rx1731_cur."!mark_push"(0, rx1731_pos, $I10)
  # rx literal  "unless"
    add $I11, rx1731_pos, 6
    gt $I11, rx1731_eos, rx1731_fail
    sub $I11, rx1731_pos, rx1731_off
    substr $S10, rx1731_tgt, $I11, 6
    ne $S10, "unless", rx1731_fail
    add rx1731_pos, 6
    set_addr $I10, rxcap_1733_fail
    ($I12, $I11) = rx1731_cur."!mark_peek"($I10)
    rx1731_cur."!cursor_pos"($I11)
    ($P10) = rx1731_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1731_pos, "")
    rx1731_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1733_done
  rxcap_1733_fail:
    goto rx1731_fail
  rxcap_1733_done:
  # rx subrule "ws" subtype=method negate=
    rx1731_cur."!cursor_pos"(rx1731_pos)
    $P10 = rx1731_cur."ws"()
    unless $P10, rx1731_fail
    rx1731_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1731_cur."!cursor_pos"(rx1731_pos)
    $P10 = rx1731_cur."EXPR"()
    unless $P10, rx1731_fail
    rx1731_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1731_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1731_cur."!cursor_pos"(rx1731_pos)
    $P10 = rx1731_cur."ws"()
    unless $P10, rx1731_fail
    rx1731_pos = $P10."pos"()
  # rx pass
    rx1731_cur."!cursor_pass"(rx1731_pos, "statement_mod_cond:sym<unless>")
    if_null rx1731_debug, debug_1227
    rx1731_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<unless>", " at pos=", rx1731_pos)
  debug_1227:
    .return (rx1731_cur)
  rx1731_restart:
    if_null rx1731_debug, debug_1228
    rx1731_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<unless>")
  debug_1228:
  rx1731_fail:
    (rx1731_rep, rx1731_pos, $I10, $P10) = rx1731_cur."!mark_fail"(0)
    lt rx1731_pos, -1, rx1731_done
    eq rx1731_pos, -1, rx1731_fail
    jump $I10
  rx1731_done:
    rx1731_cur."!cursor_fail"()
    if_null rx1731_debug, debug_1229
    rx1731_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<unless>")
  debug_1229:
    .return (rx1731_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<unless>"  :subid("122_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 888
    $P105 = self."!PREFIX__!subrule"("ws", "unless")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop"  :subid("123_1335114138.94729")
    .param pmc param_1736
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 890
    .lex "self", param_1736
    $P103 = param_1736."!protoregex"("statement_mod_loop")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop"  :subid("124_1335114138.94729")
    .param pmc param_1738
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 890
    .lex "self", param_1738
    $P104 = param_1738."!PREFIX__!protoregex"("statement_mod_loop")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<while>"  :subid("125_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 892
    .local string rx1740_tgt
    .local int rx1740_pos
    .local int rx1740_off
    .local int rx1740_eos
    .local int rx1740_rep
    .local pmc rx1740_cur
    .local pmc rx1740_debug
    (rx1740_cur, rx1740_pos, rx1740_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1740_cur
    .local pmc match
    .lex "$/", match
    length rx1740_eos, rx1740_tgt
    gt rx1740_pos, rx1740_eos, rx1740_done
    set rx1740_off, 0
    lt rx1740_pos, 2, rx1740_start
    sub rx1740_off, rx1740_pos, 1
    substr rx1740_tgt, rx1740_tgt, rx1740_off
  rx1740_start:
    eq $I10, 1, rx1740_restart
    if_null rx1740_debug, debug_1230
    rx1740_cur."!cursor_debug"("START", "statement_mod_loop:sym<while>")
  debug_1230:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1741_done
    goto rxscan1741_scan
  rxscan1741_loop:
    (rx1740_pos) = rx1740_cur."from"()
    inc rx1740_pos
    rx1740_cur."!cursor_from"(rx1740_pos)
    ge rx1740_pos, rx1740_eos, rxscan1741_done
  rxscan1741_scan:
    set_addr $I10, rxscan1741_loop
    rx1740_cur."!mark_push"(0, rx1740_pos, $I10)
  rxscan1741_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1742_fail
    rx1740_cur."!mark_push"(0, rx1740_pos, $I10)
  # rx literal  "while"
    add $I11, rx1740_pos, 5
    gt $I11, rx1740_eos, rx1740_fail
    sub $I11, rx1740_pos, rx1740_off
    substr $S10, rx1740_tgt, $I11, 5
    ne $S10, "while", rx1740_fail
    add rx1740_pos, 5
    set_addr $I10, rxcap_1742_fail
    ($I12, $I11) = rx1740_cur."!mark_peek"($I10)
    rx1740_cur."!cursor_pos"($I11)
    ($P10) = rx1740_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1740_pos, "")
    rx1740_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1742_done
  rxcap_1742_fail:
    goto rx1740_fail
  rxcap_1742_done:
  # rx subrule "ws" subtype=method negate=
    rx1740_cur."!cursor_pos"(rx1740_pos)
    $P10 = rx1740_cur."ws"()
    unless $P10, rx1740_fail
    rx1740_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1740_cur."!cursor_pos"(rx1740_pos)
    $P10 = rx1740_cur."EXPR"()
    unless $P10, rx1740_fail
    rx1740_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1740_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1740_cur."!cursor_pos"(rx1740_pos)
    $P10 = rx1740_cur."ws"()
    unless $P10, rx1740_fail
    rx1740_pos = $P10."pos"()
  # rx pass
    rx1740_cur."!cursor_pass"(rx1740_pos, "statement_mod_loop:sym<while>")
    if_null rx1740_debug, debug_1231
    rx1740_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<while>", " at pos=", rx1740_pos)
  debug_1231:
    .return (rx1740_cur)
  rx1740_restart:
    if_null rx1740_debug, debug_1232
    rx1740_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<while>")
  debug_1232:
  rx1740_fail:
    (rx1740_rep, rx1740_pos, $I10, $P10) = rx1740_cur."!mark_fail"(0)
    lt rx1740_pos, -1, rx1740_done
    eq rx1740_pos, -1, rx1740_fail
    jump $I10
  rx1740_done:
    rx1740_cur."!cursor_fail"()
    if_null rx1740_debug, debug_1233
    rx1740_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<while>")
  debug_1233:
    .return (rx1740_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<while>"  :subid("126_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 892
    $P105 = self."!PREFIX__!subrule"("ws", "while")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<until>"  :subid("127_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 893
    .local string rx1745_tgt
    .local int rx1745_pos
    .local int rx1745_off
    .local int rx1745_eos
    .local int rx1745_rep
    .local pmc rx1745_cur
    .local pmc rx1745_debug
    (rx1745_cur, rx1745_pos, rx1745_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1745_cur
    .local pmc match
    .lex "$/", match
    length rx1745_eos, rx1745_tgt
    gt rx1745_pos, rx1745_eos, rx1745_done
    set rx1745_off, 0
    lt rx1745_pos, 2, rx1745_start
    sub rx1745_off, rx1745_pos, 1
    substr rx1745_tgt, rx1745_tgt, rx1745_off
  rx1745_start:
    eq $I10, 1, rx1745_restart
    if_null rx1745_debug, debug_1234
    rx1745_cur."!cursor_debug"("START", "statement_mod_loop:sym<until>")
  debug_1234:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1746_done
    goto rxscan1746_scan
  rxscan1746_loop:
    (rx1745_pos) = rx1745_cur."from"()
    inc rx1745_pos
    rx1745_cur."!cursor_from"(rx1745_pos)
    ge rx1745_pos, rx1745_eos, rxscan1746_done
  rxscan1746_scan:
    set_addr $I10, rxscan1746_loop
    rx1745_cur."!mark_push"(0, rx1745_pos, $I10)
  rxscan1746_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1747_fail
    rx1745_cur."!mark_push"(0, rx1745_pos, $I10)
  # rx literal  "until"
    add $I11, rx1745_pos, 5
    gt $I11, rx1745_eos, rx1745_fail
    sub $I11, rx1745_pos, rx1745_off
    substr $S10, rx1745_tgt, $I11, 5
    ne $S10, "until", rx1745_fail
    add rx1745_pos, 5
    set_addr $I10, rxcap_1747_fail
    ($I12, $I11) = rx1745_cur."!mark_peek"($I10)
    rx1745_cur."!cursor_pos"($I11)
    ($P10) = rx1745_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1745_pos, "")
    rx1745_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1747_done
  rxcap_1747_fail:
    goto rx1745_fail
  rxcap_1747_done:
  # rx subrule "ws" subtype=method negate=
    rx1745_cur."!cursor_pos"(rx1745_pos)
    $P10 = rx1745_cur."ws"()
    unless $P10, rx1745_fail
    rx1745_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1745_cur."!cursor_pos"(rx1745_pos)
    $P10 = rx1745_cur."EXPR"()
    unless $P10, rx1745_fail
    rx1745_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1745_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1745_cur."!cursor_pos"(rx1745_pos)
    $P10 = rx1745_cur."ws"()
    unless $P10, rx1745_fail
    rx1745_pos = $P10."pos"()
  # rx pass
    rx1745_cur."!cursor_pass"(rx1745_pos, "statement_mod_loop:sym<until>")
    if_null rx1745_debug, debug_1235
    rx1745_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<until>", " at pos=", rx1745_pos)
  debug_1235:
    .return (rx1745_cur)
  rx1745_restart:
    if_null rx1745_debug, debug_1236
    rx1745_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<until>")
  debug_1236:
  rx1745_fail:
    (rx1745_rep, rx1745_pos, $I10, $P10) = rx1745_cur."!mark_fail"(0)
    lt rx1745_pos, -1, rx1745_done
    eq rx1745_pos, -1, rx1745_fail
    jump $I10
  rx1745_done:
    rx1745_cur."!cursor_fail"()
    if_null rx1745_debug, debug_1237
    rx1745_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<until>")
  debug_1237:
    .return (rx1745_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<until>"  :subid("128_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 893
    $P105 = self."!PREFIX__!subrule"("ws", "until")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<for>"  :subid("129_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 894
    .local string rx1750_tgt
    .local int rx1750_pos
    .local int rx1750_off
    .local int rx1750_eos
    .local int rx1750_rep
    .local pmc rx1750_cur
    .local pmc rx1750_debug
    (rx1750_cur, rx1750_pos, rx1750_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1750_cur
    .local pmc match
    .lex "$/", match
    length rx1750_eos, rx1750_tgt
    gt rx1750_pos, rx1750_eos, rx1750_done
    set rx1750_off, 0
    lt rx1750_pos, 2, rx1750_start
    sub rx1750_off, rx1750_pos, 1
    substr rx1750_tgt, rx1750_tgt, rx1750_off
  rx1750_start:
    eq $I10, 1, rx1750_restart
    if_null rx1750_debug, debug_1238
    rx1750_cur."!cursor_debug"("START", "statement_mod_loop:sym<for>")
  debug_1238:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1751_done
    goto rxscan1751_scan
  rxscan1751_loop:
    (rx1750_pos) = rx1750_cur."from"()
    inc rx1750_pos
    rx1750_cur."!cursor_from"(rx1750_pos)
    ge rx1750_pos, rx1750_eos, rxscan1751_done
  rxscan1751_scan:
    set_addr $I10, rxscan1751_loop
    rx1750_cur."!mark_push"(0, rx1750_pos, $I10)
  rxscan1751_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1752_fail
    rx1750_cur."!mark_push"(0, rx1750_pos, $I10)
  # rx literal  "for"
    add $I11, rx1750_pos, 3
    gt $I11, rx1750_eos, rx1750_fail
    sub $I11, rx1750_pos, rx1750_off
    substr $S10, rx1750_tgt, $I11, 3
    ne $S10, "for", rx1750_fail
    add rx1750_pos, 3
    set_addr $I10, rxcap_1752_fail
    ($I12, $I11) = rx1750_cur."!mark_peek"($I10)
    rx1750_cur."!cursor_pos"($I11)
    ($P10) = rx1750_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1750_pos, "")
    rx1750_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1752_done
  rxcap_1752_fail:
    goto rx1750_fail
  rxcap_1752_done:
  # rx subrule "ws" subtype=method negate=
    rx1750_cur."!cursor_pos"(rx1750_pos)
    $P10 = rx1750_cur."ws"()
    unless $P10, rx1750_fail
    rx1750_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1750_cur."!cursor_pos"(rx1750_pos)
    $P10 = rx1750_cur."EXPR"()
    unless $P10, rx1750_fail
    rx1750_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1750_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1750_cur."!cursor_pos"(rx1750_pos)
    $P10 = rx1750_cur."ws"()
    unless $P10, rx1750_fail
    rx1750_pos = $P10."pos"()
  # rx pass
    rx1750_cur."!cursor_pass"(rx1750_pos, "statement_mod_loop:sym<for>")
    if_null rx1750_debug, debug_1239
    rx1750_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<for>", " at pos=", rx1750_pos)
  debug_1239:
    .return (rx1750_cur)
  rx1750_restart:
    if_null rx1750_debug, debug_1240
    rx1750_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<for>")
  debug_1240:
  rx1750_fail:
    (rx1750_rep, rx1750_pos, $I10, $P10) = rx1750_cur."!mark_fail"(0)
    lt rx1750_pos, -1, rx1750_done
    eq rx1750_pos, -1, rx1750_fail
    jump $I10
  rx1750_done:
    rx1750_cur."!cursor_fail"()
    if_null rx1750_debug, debug_1241
    rx1750_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<for>")
  debug_1241:
    .return (rx1750_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<for>"  :subid("130_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 894
    $P105 = self."!PREFIX__!subrule"("ws", "for")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<fatarrow>"  :subid("131_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 898
    .local string rx1755_tgt
    .local int rx1755_pos
    .local int rx1755_off
    .local int rx1755_eos
    .local int rx1755_rep
    .local pmc rx1755_cur
    .local pmc rx1755_debug
    (rx1755_cur, rx1755_pos, rx1755_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1755_cur
    .local pmc match
    .lex "$/", match
    length rx1755_eos, rx1755_tgt
    gt rx1755_pos, rx1755_eos, rx1755_done
    set rx1755_off, 0
    lt rx1755_pos, 2, rx1755_start
    sub rx1755_off, rx1755_pos, 1
    substr rx1755_tgt, rx1755_tgt, rx1755_off
  rx1755_start:
    eq $I10, 1, rx1755_restart
    if_null rx1755_debug, debug_1242
    rx1755_cur."!cursor_debug"("START", "term:sym<fatarrow>")
  debug_1242:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1756_done
    goto rxscan1756_scan
  rxscan1756_loop:
    (rx1755_pos) = rx1755_cur."from"()
    inc rx1755_pos
    rx1755_cur."!cursor_from"(rx1755_pos)
    ge rx1755_pos, rx1755_eos, rxscan1756_done
  rxscan1756_scan:
    set_addr $I10, rxscan1756_loop
    rx1755_cur."!mark_push"(0, rx1755_pos, $I10)
  rxscan1756_done:
  # rx subrule "fatarrow" subtype=capture negate=
    rx1755_cur."!cursor_pos"(rx1755_pos)
    $P10 = rx1755_cur."fatarrow"()
    unless $P10, rx1755_fail
    rx1755_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("fatarrow")
    rx1755_pos = $P10."pos"()
  # rx pass
    rx1755_cur."!cursor_pass"(rx1755_pos, "term:sym<fatarrow>")
    if_null rx1755_debug, debug_1243
    rx1755_cur."!cursor_debug"("PASS", "term:sym<fatarrow>", " at pos=", rx1755_pos)
  debug_1243:
    .return (rx1755_cur)
  rx1755_restart:
    if_null rx1755_debug, debug_1244
    rx1755_cur."!cursor_debug"("NEXT", "term:sym<fatarrow>")
  debug_1244:
  rx1755_fail:
    (rx1755_rep, rx1755_pos, $I10, $P10) = rx1755_cur."!mark_fail"(0)
    lt rx1755_pos, -1, rx1755_done
    eq rx1755_pos, -1, rx1755_fail
    jump $I10
  rx1755_done:
    rx1755_cur."!cursor_fail"()
    if_null rx1755_debug, debug_1245
    rx1755_cur."!cursor_debug"("FAIL", "term:sym<fatarrow>")
  debug_1245:
    .return (rx1755_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<fatarrow>"  :subid("132_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 898
    $P103 = self."!PREFIX__!subrule"("fatarrow", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<colonpair>"  :subid("133_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 899
    .local string rx1759_tgt
    .local int rx1759_pos
    .local int rx1759_off
    .local int rx1759_eos
    .local int rx1759_rep
    .local pmc rx1759_cur
    .local pmc rx1759_debug
    (rx1759_cur, rx1759_pos, rx1759_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1759_cur
    .local pmc match
    .lex "$/", match
    length rx1759_eos, rx1759_tgt
    gt rx1759_pos, rx1759_eos, rx1759_done
    set rx1759_off, 0
    lt rx1759_pos, 2, rx1759_start
    sub rx1759_off, rx1759_pos, 1
    substr rx1759_tgt, rx1759_tgt, rx1759_off
  rx1759_start:
    eq $I10, 1, rx1759_restart
    if_null rx1759_debug, debug_1246
    rx1759_cur."!cursor_debug"("START", "term:sym<colonpair>")
  debug_1246:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1760_done
    goto rxscan1760_scan
  rxscan1760_loop:
    (rx1759_pos) = rx1759_cur."from"()
    inc rx1759_pos
    rx1759_cur."!cursor_from"(rx1759_pos)
    ge rx1759_pos, rx1759_eos, rxscan1760_done
  rxscan1760_scan:
    set_addr $I10, rxscan1760_loop
    rx1759_cur."!mark_push"(0, rx1759_pos, $I10)
  rxscan1760_done:
  # rx subrule "colonpair" subtype=capture negate=
    rx1759_cur."!cursor_pos"(rx1759_pos)
    $P10 = rx1759_cur."colonpair"()
    unless $P10, rx1759_fail
    rx1759_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("colonpair")
    rx1759_pos = $P10."pos"()
  # rx pass
    rx1759_cur."!cursor_pass"(rx1759_pos, "term:sym<colonpair>")
    if_null rx1759_debug, debug_1247
    rx1759_cur."!cursor_debug"("PASS", "term:sym<colonpair>", " at pos=", rx1759_pos)
  debug_1247:
    .return (rx1759_cur)
  rx1759_restart:
    if_null rx1759_debug, debug_1248
    rx1759_cur."!cursor_debug"("NEXT", "term:sym<colonpair>")
  debug_1248:
  rx1759_fail:
    (rx1759_rep, rx1759_pos, $I10, $P10) = rx1759_cur."!mark_fail"(0)
    lt rx1759_pos, -1, rx1759_done
    eq rx1759_pos, -1, rx1759_fail
    jump $I10
  rx1759_done:
    rx1759_cur."!cursor_fail"()
    if_null rx1759_debug, debug_1249
    rx1759_cur."!cursor_debug"("FAIL", "term:sym<colonpair>")
  debug_1249:
    .return (rx1759_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<colonpair>"  :subid("134_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 899
    $P103 = self."!PREFIX__!subrule"("colonpair", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<variable>"  :subid("135_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 900
    .local string rx1763_tgt
    .local int rx1763_pos
    .local int rx1763_off
    .local int rx1763_eos
    .local int rx1763_rep
    .local pmc rx1763_cur
    .local pmc rx1763_debug
    (rx1763_cur, rx1763_pos, rx1763_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1763_cur
    .local pmc match
    .lex "$/", match
    length rx1763_eos, rx1763_tgt
    gt rx1763_pos, rx1763_eos, rx1763_done
    set rx1763_off, 0
    lt rx1763_pos, 2, rx1763_start
    sub rx1763_off, rx1763_pos, 1
    substr rx1763_tgt, rx1763_tgt, rx1763_off
  rx1763_start:
    eq $I10, 1, rx1763_restart
    if_null rx1763_debug, debug_1250
    rx1763_cur."!cursor_debug"("START", "term:sym<variable>")
  debug_1250:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1764_done
    goto rxscan1764_scan
  rxscan1764_loop:
    (rx1763_pos) = rx1763_cur."from"()
    inc rx1763_pos
    rx1763_cur."!cursor_from"(rx1763_pos)
    ge rx1763_pos, rx1763_eos, rxscan1764_done
  rxscan1764_scan:
    set_addr $I10, rxscan1764_loop
    rx1763_cur."!mark_push"(0, rx1763_pos, $I10)
  rxscan1764_done:
  # rx subrule "variable" subtype=capture negate=
    rx1763_cur."!cursor_pos"(rx1763_pos)
    $P10 = rx1763_cur."variable"()
    unless $P10, rx1763_fail
    rx1763_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1763_pos = $P10."pos"()
  # rx pass
    rx1763_cur."!cursor_pass"(rx1763_pos, "term:sym<variable>")
    if_null rx1763_debug, debug_1251
    rx1763_cur."!cursor_debug"("PASS", "term:sym<variable>", " at pos=", rx1763_pos)
  debug_1251:
    .return (rx1763_cur)
  rx1763_restart:
    if_null rx1763_debug, debug_1252
    rx1763_cur."!cursor_debug"("NEXT", "term:sym<variable>")
  debug_1252:
  rx1763_fail:
    (rx1763_rep, rx1763_pos, $I10, $P10) = rx1763_cur."!mark_fail"(0)
    lt rx1763_pos, -1, rx1763_done
    eq rx1763_pos, -1, rx1763_fail
    jump $I10
  rx1763_done:
    rx1763_cur."!cursor_fail"()
    if_null rx1763_debug, debug_1253
    rx1763_cur."!cursor_debug"("FAIL", "term:sym<variable>")
  debug_1253:
    .return (rx1763_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<variable>"  :subid("136_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 900
    $P103 = self."!PREFIX__!subrule"("variable", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<package_declarator>"  :subid("137_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 901
    .local string rx1767_tgt
    .local int rx1767_pos
    .local int rx1767_off
    .local int rx1767_eos
    .local int rx1767_rep
    .local pmc rx1767_cur
    .local pmc rx1767_debug
    (rx1767_cur, rx1767_pos, rx1767_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1767_cur
    .local pmc match
    .lex "$/", match
    length rx1767_eos, rx1767_tgt
    gt rx1767_pos, rx1767_eos, rx1767_done
    set rx1767_off, 0
    lt rx1767_pos, 2, rx1767_start
    sub rx1767_off, rx1767_pos, 1
    substr rx1767_tgt, rx1767_tgt, rx1767_off
  rx1767_start:
    eq $I10, 1, rx1767_restart
    if_null rx1767_debug, debug_1254
    rx1767_cur."!cursor_debug"("START", "term:sym<package_declarator>")
  debug_1254:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1768_done
    goto rxscan1768_scan
  rxscan1768_loop:
    (rx1767_pos) = rx1767_cur."from"()
    inc rx1767_pos
    rx1767_cur."!cursor_from"(rx1767_pos)
    ge rx1767_pos, rx1767_eos, rxscan1768_done
  rxscan1768_scan:
    set_addr $I10, rxscan1768_loop
    rx1767_cur."!mark_push"(0, rx1767_pos, $I10)
  rxscan1768_done:
  # rx subrule "package_declarator" subtype=capture negate=
    rx1767_cur."!cursor_pos"(rx1767_pos)
    $P10 = rx1767_cur."package_declarator"()
    unless $P10, rx1767_fail
    rx1767_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx1767_pos = $P10."pos"()
  # rx pass
    rx1767_cur."!cursor_pass"(rx1767_pos, "term:sym<package_declarator>")
    if_null rx1767_debug, debug_1255
    rx1767_cur."!cursor_debug"("PASS", "term:sym<package_declarator>", " at pos=", rx1767_pos)
  debug_1255:
    .return (rx1767_cur)
  rx1767_restart:
    if_null rx1767_debug, debug_1256
    rx1767_cur."!cursor_debug"("NEXT", "term:sym<package_declarator>")
  debug_1256:
  rx1767_fail:
    (rx1767_rep, rx1767_pos, $I10, $P10) = rx1767_cur."!mark_fail"(0)
    lt rx1767_pos, -1, rx1767_done
    eq rx1767_pos, -1, rx1767_fail
    jump $I10
  rx1767_done:
    rx1767_cur."!cursor_fail"()
    if_null rx1767_debug, debug_1257
    rx1767_cur."!cursor_debug"("FAIL", "term:sym<package_declarator>")
  debug_1257:
    .return (rx1767_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<package_declarator>"  :subid("138_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 901
    $P103 = self."!PREFIX__!subrule"("package_declarator", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<scope_declarator>"  :subid("139_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 902
    .local string rx1771_tgt
    .local int rx1771_pos
    .local int rx1771_off
    .local int rx1771_eos
    .local int rx1771_rep
    .local pmc rx1771_cur
    .local pmc rx1771_debug
    (rx1771_cur, rx1771_pos, rx1771_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1771_cur
    .local pmc match
    .lex "$/", match
    length rx1771_eos, rx1771_tgt
    gt rx1771_pos, rx1771_eos, rx1771_done
    set rx1771_off, 0
    lt rx1771_pos, 2, rx1771_start
    sub rx1771_off, rx1771_pos, 1
    substr rx1771_tgt, rx1771_tgt, rx1771_off
  rx1771_start:
    eq $I10, 1, rx1771_restart
    if_null rx1771_debug, debug_1258
    rx1771_cur."!cursor_debug"("START", "term:sym<scope_declarator>")
  debug_1258:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1772_done
    goto rxscan1772_scan
  rxscan1772_loop:
    (rx1771_pos) = rx1771_cur."from"()
    inc rx1771_pos
    rx1771_cur."!cursor_from"(rx1771_pos)
    ge rx1771_pos, rx1771_eos, rxscan1772_done
  rxscan1772_scan:
    set_addr $I10, rxscan1772_loop
    rx1771_cur."!mark_push"(0, rx1771_pos, $I10)
  rxscan1772_done:
  # rx subrule "scope_declarator" subtype=capture negate=
    rx1771_cur."!cursor_pos"(rx1771_pos)
    $P10 = rx1771_cur."scope_declarator"()
    unless $P10, rx1771_fail
    rx1771_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scope_declarator")
    rx1771_pos = $P10."pos"()
  # rx pass
    rx1771_cur."!cursor_pass"(rx1771_pos, "term:sym<scope_declarator>")
    if_null rx1771_debug, debug_1259
    rx1771_cur."!cursor_debug"("PASS", "term:sym<scope_declarator>", " at pos=", rx1771_pos)
  debug_1259:
    .return (rx1771_cur)
  rx1771_restart:
    if_null rx1771_debug, debug_1260
    rx1771_cur."!cursor_debug"("NEXT", "term:sym<scope_declarator>")
  debug_1260:
  rx1771_fail:
    (rx1771_rep, rx1771_pos, $I10, $P10) = rx1771_cur."!mark_fail"(0)
    lt rx1771_pos, -1, rx1771_done
    eq rx1771_pos, -1, rx1771_fail
    jump $I10
  rx1771_done:
    rx1771_cur."!cursor_fail"()
    if_null rx1771_debug, debug_1261
    rx1771_cur."!cursor_debug"("FAIL", "term:sym<scope_declarator>")
  debug_1261:
    .return (rx1771_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<scope_declarator>"  :subid("140_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 902
    $P103 = self."!PREFIX__!subrule"("scope_declarator", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<routine_declarator>"  :subid("141_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 903
    .local string rx1775_tgt
    .local int rx1775_pos
    .local int rx1775_off
    .local int rx1775_eos
    .local int rx1775_rep
    .local pmc rx1775_cur
    .local pmc rx1775_debug
    (rx1775_cur, rx1775_pos, rx1775_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1775_cur
    .local pmc match
    .lex "$/", match
    length rx1775_eos, rx1775_tgt
    gt rx1775_pos, rx1775_eos, rx1775_done
    set rx1775_off, 0
    lt rx1775_pos, 2, rx1775_start
    sub rx1775_off, rx1775_pos, 1
    substr rx1775_tgt, rx1775_tgt, rx1775_off
  rx1775_start:
    eq $I10, 1, rx1775_restart
    if_null rx1775_debug, debug_1262
    rx1775_cur."!cursor_debug"("START", "term:sym<routine_declarator>")
  debug_1262:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1776_done
    goto rxscan1776_scan
  rxscan1776_loop:
    (rx1775_pos) = rx1775_cur."from"()
    inc rx1775_pos
    rx1775_cur."!cursor_from"(rx1775_pos)
    ge rx1775_pos, rx1775_eos, rxscan1776_done
  rxscan1776_scan:
    set_addr $I10, rxscan1776_loop
    rx1775_cur."!mark_push"(0, rx1775_pos, $I10)
  rxscan1776_done:
  # rx subrule "routine_declarator" subtype=capture negate=
    rx1775_cur."!cursor_pos"(rx1775_pos)
    $P10 = rx1775_cur."routine_declarator"()
    unless $P10, rx1775_fail
    rx1775_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx1775_pos = $P10."pos"()
  # rx pass
    rx1775_cur."!cursor_pass"(rx1775_pos, "term:sym<routine_declarator>")
    if_null rx1775_debug, debug_1263
    rx1775_cur."!cursor_debug"("PASS", "term:sym<routine_declarator>", " at pos=", rx1775_pos)
  debug_1263:
    .return (rx1775_cur)
  rx1775_restart:
    if_null rx1775_debug, debug_1264
    rx1775_cur."!cursor_debug"("NEXT", "term:sym<routine_declarator>")
  debug_1264:
  rx1775_fail:
    (rx1775_rep, rx1775_pos, $I10, $P10) = rx1775_cur."!mark_fail"(0)
    lt rx1775_pos, -1, rx1775_done
    eq rx1775_pos, -1, rx1775_fail
    jump $I10
  rx1775_done:
    rx1775_cur."!cursor_fail"()
    if_null rx1775_debug, debug_1265
    rx1775_cur."!cursor_debug"("FAIL", "term:sym<routine_declarator>")
  debug_1265:
    .return (rx1775_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<routine_declarator>"  :subid("142_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 903
    $P103 = self."!PREFIX__!subrule"("routine_declarator", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<multi_declarator>"  :subid("143_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 904
    .const 'Sub' $P1787 = "577_1335114138.94729" 
    capture_lex $P1787
    .const 'Sub' $P1782 = "576_1335114138.94729" 
    capture_lex $P1782
    .local string rx1779_tgt
    .local int rx1779_pos
    .local int rx1779_off
    .local int rx1779_eos
    .local int rx1779_rep
    .local pmc rx1779_cur
    .local pmc rx1779_debug
    (rx1779_cur, rx1779_pos, rx1779_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1779_cur
    .local pmc match
    .lex "$/", match
    length rx1779_eos, rx1779_tgt
    gt rx1779_pos, rx1779_eos, rx1779_done
    set rx1779_off, 0
    lt rx1779_pos, 2, rx1779_start
    sub rx1779_off, rx1779_pos, 1
    substr rx1779_tgt, rx1779_tgt, rx1779_off
  rx1779_start:
    eq $I10, 1, rx1779_restart
    if_null rx1779_debug, debug_1266
    rx1779_cur."!cursor_debug"("START", "term:sym<multi_declarator>")
  debug_1266:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1780_done
    goto rxscan1780_scan
  rxscan1780_loop:
    (rx1779_pos) = rx1779_cur."from"()
    inc rx1779_pos
    rx1779_cur."!cursor_from"(rx1779_pos)
    ge rx1779_pos, rx1779_eos, rxscan1780_done
  rxscan1780_scan:
    set_addr $I10, rxscan1780_loop
    rx1779_cur."!mark_push"(0, rx1779_pos, $I10)
  rxscan1780_done:
.annotate 'line', 905
  # rx subrule "before" subtype=zerowidth negate=
    rx1779_cur."!cursor_pos"(rx1779_pos)
    .const 'Sub' $P1782 = "576_1335114138.94729" 
    capture_lex $P1782
    $P10 = rx1779_cur."before"($P1782)
    unless $P10, rx1779_fail
.annotate 'line', 906
  # rx subrule "before" subtype=zerowidth negate=1
    rx1779_cur."!cursor_pos"(rx1779_pos)
    .const 'Sub' $P1787 = "577_1335114138.94729" 
    capture_lex $P1787
    $P10 = rx1779_cur."before"($P1787)
    if $P10, rx1779_fail
.annotate 'line', 907
  # rx subrule "multi_declarator" subtype=capture negate=
    rx1779_cur."!cursor_pos"(rx1779_pos)
    $P10 = rx1779_cur."multi_declarator"()
    unless $P10, rx1779_fail
    rx1779_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx1779_pos = $P10."pos"()
.annotate 'line', 904
  # rx pass
    rx1779_cur."!cursor_pass"(rx1779_pos, "term:sym<multi_declarator>")
    if_null rx1779_debug, debug_1275
    rx1779_cur."!cursor_debug"("PASS", "term:sym<multi_declarator>", " at pos=", rx1779_pos)
  debug_1275:
    .return (rx1779_cur)
  rx1779_restart:
    if_null rx1779_debug, debug_1276
    rx1779_cur."!cursor_debug"("NEXT", "term:sym<multi_declarator>")
  debug_1276:
  rx1779_fail:
    (rx1779_rep, rx1779_pos, $I10, $P10) = rx1779_cur."!mark_fail"(0)
    lt rx1779_pos, -1, rx1779_done
    eq rx1779_pos, -1, rx1779_fail
    jump $I10
  rx1779_done:
    rx1779_cur."!cursor_fail"()
    if_null rx1779_debug, debug_1277
    rx1779_cur."!cursor_debug"("FAIL", "term:sym<multi_declarator>")
  debug_1277:
    .return (rx1779_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1781"  :anon :subid("576_1335114138.94729") :method :outer("143_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 905
    .local string rx1783_tgt
    .local int rx1783_pos
    .local int rx1783_off
    .local int rx1783_eos
    .local int rx1783_rep
    .local pmc rx1783_cur
    .local pmc rx1783_debug
    (rx1783_cur, rx1783_pos, rx1783_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1783_cur
    .local pmc match
    .lex "$/", match
    length rx1783_eos, rx1783_tgt
    gt rx1783_pos, rx1783_eos, rx1783_done
    set rx1783_off, 0
    lt rx1783_pos, 2, rx1783_start
    sub rx1783_off, rx1783_pos, 1
    substr rx1783_tgt, rx1783_tgt, rx1783_off
  rx1783_start:
    eq $I10, 1, rx1783_restart
    if_null rx1783_debug, debug_1267
    rx1783_cur."!cursor_debug"("START", "")
  debug_1267:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1784_done
    goto rxscan1784_scan
  rxscan1784_loop:
    (rx1783_pos) = rx1783_cur."from"()
    inc rx1783_pos
    rx1783_cur."!cursor_from"(rx1783_pos)
    ge rx1783_pos, rx1783_eos, rxscan1784_done
  rxscan1784_scan:
    set_addr $I10, rxscan1784_loop
    rx1783_cur."!mark_push"(0, rx1783_pos, $I10)
  rxscan1784_done:
  alt1785_0:
    set_addr $I10, alt1785_1
    rx1783_cur."!mark_push"(0, rx1783_pos, $I10)
  # rx literal  "multi"
    add $I11, rx1783_pos, 5
    gt $I11, rx1783_eos, rx1783_fail
    sub $I11, rx1783_pos, rx1783_off
    substr $S10, rx1783_tgt, $I11, 5
    ne $S10, "multi", rx1783_fail
    add rx1783_pos, 5
    goto alt1785_end
  alt1785_1:
    set_addr $I10, alt1785_2
    rx1783_cur."!mark_push"(0, rx1783_pos, $I10)
  # rx literal  "proto"
    add $I11, rx1783_pos, 5
    gt $I11, rx1783_eos, rx1783_fail
    sub $I11, rx1783_pos, rx1783_off
    substr $S10, rx1783_tgt, $I11, 5
    ne $S10, "proto", rx1783_fail
    add rx1783_pos, 5
    goto alt1785_end
  alt1785_2:
  # rx literal  "only"
    add $I11, rx1783_pos, 4
    gt $I11, rx1783_eos, rx1783_fail
    sub $I11, rx1783_pos, rx1783_off
    substr $S10, rx1783_tgt, $I11, 4
    ne $S10, "only", rx1783_fail
    add rx1783_pos, 4
  alt1785_end:
  # rx pass
    rx1783_cur."!cursor_pass"(rx1783_pos, "")
    if_null rx1783_debug, debug_1268
    rx1783_cur."!cursor_debug"("PASS", "", " at pos=", rx1783_pos)
  debug_1268:
    .return (rx1783_cur)
  rx1783_restart:
    if_null rx1783_debug, debug_1269
    rx1783_cur."!cursor_debug"("NEXT", "")
  debug_1269:
  rx1783_fail:
    (rx1783_rep, rx1783_pos, $I10, $P10) = rx1783_cur."!mark_fail"(0)
    lt rx1783_pos, -1, rx1783_done
    eq rx1783_pos, -1, rx1783_fail
    jump $I10
  rx1783_done:
    rx1783_cur."!cursor_fail"()
    if_null rx1783_debug, debug_1270
    rx1783_cur."!cursor_debug"("FAIL", "")
  debug_1270:
    .return (rx1783_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1786"  :anon :subid("577_1335114138.94729") :method :outer("143_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 906
    .local string rx1788_tgt
    .local int rx1788_pos
    .local int rx1788_off
    .local int rx1788_eos
    .local int rx1788_rep
    .local pmc rx1788_cur
    .local pmc rx1788_debug
    (rx1788_cur, rx1788_pos, rx1788_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1788_cur
    .local pmc match
    .lex "$/", match
    length rx1788_eos, rx1788_tgt
    gt rx1788_pos, rx1788_eos, rx1788_done
    set rx1788_off, 0
    lt rx1788_pos, 2, rx1788_start
    sub rx1788_off, rx1788_pos, 1
    substr rx1788_tgt, rx1788_tgt, rx1788_off
  rx1788_start:
    eq $I10, 1, rx1788_restart
    if_null rx1788_debug, debug_1271
    rx1788_cur."!cursor_debug"("START", "")
  debug_1271:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1789_done
    goto rxscan1789_scan
  rxscan1789_loop:
    (rx1788_pos) = rx1788_cur."from"()
    inc rx1788_pos
    rx1788_cur."!cursor_from"(rx1788_pos)
    ge rx1788_pos, rx1788_eos, rxscan1789_done
  rxscan1789_scan:
    set_addr $I10, rxscan1789_loop
    rx1788_cur."!mark_push"(0, rx1788_pos, $I10)
  rxscan1789_done:
  # rx literal  "proto"
    add $I11, rx1788_pos, 5
    gt $I11, rx1788_eos, rx1788_fail
    sub $I11, rx1788_pos, rx1788_off
    substr $S10, rx1788_tgt, $I11, 5
    ne $S10, "proto", rx1788_fail
    add rx1788_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1788_cur."!cursor_pos"(rx1788_pos)
    $P10 = rx1788_cur."ws"()
    unless $P10, rx1788_fail
    rx1788_pos = $P10."pos"()
  alt1790_0:
    set_addr $I10, alt1790_1
    rx1788_cur."!mark_push"(0, rx1788_pos, $I10)
  # rx literal  "regex"
    add $I11, rx1788_pos, 5
    gt $I11, rx1788_eos, rx1788_fail
    sub $I11, rx1788_pos, rx1788_off
    substr $S10, rx1788_tgt, $I11, 5
    ne $S10, "regex", rx1788_fail
    add rx1788_pos, 5
    goto alt1790_end
  alt1790_1:
    set_addr $I10, alt1790_2
    rx1788_cur."!mark_push"(0, rx1788_pos, $I10)
  # rx literal  "token"
    add $I11, rx1788_pos, 5
    gt $I11, rx1788_eos, rx1788_fail
    sub $I11, rx1788_pos, rx1788_off
    substr $S10, rx1788_tgt, $I11, 5
    ne $S10, "token", rx1788_fail
    add rx1788_pos, 5
    goto alt1790_end
  alt1790_2:
  # rx literal  "rule"
    add $I11, rx1788_pos, 4
    gt $I11, rx1788_eos, rx1788_fail
    sub $I11, rx1788_pos, rx1788_off
    substr $S10, rx1788_tgt, $I11, 4
    ne $S10, "rule", rx1788_fail
    add rx1788_pos, 4
  alt1790_end:
  # rx pass
    rx1788_cur."!cursor_pass"(rx1788_pos, "")
    if_null rx1788_debug, debug_1272
    rx1788_cur."!cursor_debug"("PASS", "", " at pos=", rx1788_pos)
  debug_1272:
    .return (rx1788_cur)
  rx1788_restart:
    if_null rx1788_debug, debug_1273
    rx1788_cur."!cursor_debug"("NEXT", "")
  debug_1273:
  rx1788_fail:
    (rx1788_rep, rx1788_pos, $I10, $P10) = rx1788_cur."!mark_fail"(0)
    lt rx1788_pos, -1, rx1788_done
    eq rx1788_pos, -1, rx1788_fail
    jump $I10
  rx1788_done:
    rx1788_cur."!cursor_fail"()
    if_null rx1788_debug, debug_1274
    rx1788_cur."!cursor_debug"("FAIL", "")
  debug_1274:
    .return (rx1788_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<multi_declarator>"  :subid("144_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 904
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<regex_declarator>"  :subid("145_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 909
    .local string rx1793_tgt
    .local int rx1793_pos
    .local int rx1793_off
    .local int rx1793_eos
    .local int rx1793_rep
    .local pmc rx1793_cur
    .local pmc rx1793_debug
    (rx1793_cur, rx1793_pos, rx1793_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1793_cur
    .local pmc match
    .lex "$/", match
    length rx1793_eos, rx1793_tgt
    gt rx1793_pos, rx1793_eos, rx1793_done
    set rx1793_off, 0
    lt rx1793_pos, 2, rx1793_start
    sub rx1793_off, rx1793_pos, 1
    substr rx1793_tgt, rx1793_tgt, rx1793_off
  rx1793_start:
    eq $I10, 1, rx1793_restart
    if_null rx1793_debug, debug_1278
    rx1793_cur."!cursor_debug"("START", "term:sym<regex_declarator>")
  debug_1278:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1794_done
    goto rxscan1794_scan
  rxscan1794_loop:
    (rx1793_pos) = rx1793_cur."from"()
    inc rx1793_pos
    rx1793_cur."!cursor_from"(rx1793_pos)
    ge rx1793_pos, rx1793_eos, rxscan1794_done
  rxscan1794_scan:
    set_addr $I10, rxscan1794_loop
    rx1793_cur."!mark_push"(0, rx1793_pos, $I10)
  rxscan1794_done:
  # rx subrule "regex_declarator" subtype=capture negate=
    rx1793_cur."!cursor_pos"(rx1793_pos)
    $P10 = rx1793_cur."regex_declarator"()
    unless $P10, rx1793_fail
    rx1793_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("regex_declarator")
    rx1793_pos = $P10."pos"()
  # rx pass
    rx1793_cur."!cursor_pass"(rx1793_pos, "term:sym<regex_declarator>")
    if_null rx1793_debug, debug_1279
    rx1793_cur."!cursor_debug"("PASS", "term:sym<regex_declarator>", " at pos=", rx1793_pos)
  debug_1279:
    .return (rx1793_cur)
  rx1793_restart:
    if_null rx1793_debug, debug_1280
    rx1793_cur."!cursor_debug"("NEXT", "term:sym<regex_declarator>")
  debug_1280:
  rx1793_fail:
    (rx1793_rep, rx1793_pos, $I10, $P10) = rx1793_cur."!mark_fail"(0)
    lt rx1793_pos, -1, rx1793_done
    eq rx1793_pos, -1, rx1793_fail
    jump $I10
  rx1793_done:
    rx1793_cur."!cursor_fail"()
    if_null rx1793_debug, debug_1281
    rx1793_cur."!cursor_debug"("FAIL", "term:sym<regex_declarator>")
  debug_1281:
    .return (rx1793_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<regex_declarator>"  :subid("146_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 909
    $P103 = self."!PREFIX__!subrule"("regex_declarator", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<statement_prefix>"  :subid("147_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 910
    .local string rx1797_tgt
    .local int rx1797_pos
    .local int rx1797_off
    .local int rx1797_eos
    .local int rx1797_rep
    .local pmc rx1797_cur
    .local pmc rx1797_debug
    (rx1797_cur, rx1797_pos, rx1797_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1797_cur
    .local pmc match
    .lex "$/", match
    length rx1797_eos, rx1797_tgt
    gt rx1797_pos, rx1797_eos, rx1797_done
    set rx1797_off, 0
    lt rx1797_pos, 2, rx1797_start
    sub rx1797_off, rx1797_pos, 1
    substr rx1797_tgt, rx1797_tgt, rx1797_off
  rx1797_start:
    eq $I10, 1, rx1797_restart
    if_null rx1797_debug, debug_1282
    rx1797_cur."!cursor_debug"("START", "term:sym<statement_prefix>")
  debug_1282:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1798_done
    goto rxscan1798_scan
  rxscan1798_loop:
    (rx1797_pos) = rx1797_cur."from"()
    inc rx1797_pos
    rx1797_cur."!cursor_from"(rx1797_pos)
    ge rx1797_pos, rx1797_eos, rxscan1798_done
  rxscan1798_scan:
    set_addr $I10, rxscan1798_loop
    rx1797_cur."!mark_push"(0, rx1797_pos, $I10)
  rxscan1798_done:
  # rx subrule "statement_prefix" subtype=capture negate=
    rx1797_cur."!cursor_pos"(rx1797_pos)
    $P10 = rx1797_cur."statement_prefix"()
    unless $P10, rx1797_fail
    rx1797_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_prefix")
    rx1797_pos = $P10."pos"()
  # rx pass
    rx1797_cur."!cursor_pass"(rx1797_pos, "term:sym<statement_prefix>")
    if_null rx1797_debug, debug_1283
    rx1797_cur."!cursor_debug"("PASS", "term:sym<statement_prefix>", " at pos=", rx1797_pos)
  debug_1283:
    .return (rx1797_cur)
  rx1797_restart:
    if_null rx1797_debug, debug_1284
    rx1797_cur."!cursor_debug"("NEXT", "term:sym<statement_prefix>")
  debug_1284:
  rx1797_fail:
    (rx1797_rep, rx1797_pos, $I10, $P10) = rx1797_cur."!mark_fail"(0)
    lt rx1797_pos, -1, rx1797_done
    eq rx1797_pos, -1, rx1797_fail
    jump $I10
  rx1797_done:
    rx1797_cur."!cursor_fail"()
    if_null rx1797_debug, debug_1285
    rx1797_cur."!cursor_debug"("FAIL", "term:sym<statement_prefix>")
  debug_1285:
    .return (rx1797_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<statement_prefix>"  :subid("148_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 910
    $P103 = self."!PREFIX__!subrule"("statement_prefix", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<lambda>"  :subid("149_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 911
    .local string rx1801_tgt
    .local int rx1801_pos
    .local int rx1801_off
    .local int rx1801_eos
    .local int rx1801_rep
    .local pmc rx1801_cur
    .local pmc rx1801_debug
    (rx1801_cur, rx1801_pos, rx1801_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1801_cur
    .local pmc match
    .lex "$/", match
    length rx1801_eos, rx1801_tgt
    gt rx1801_pos, rx1801_eos, rx1801_done
    set rx1801_off, 0
    lt rx1801_pos, 2, rx1801_start
    sub rx1801_off, rx1801_pos, 1
    substr rx1801_tgt, rx1801_tgt, rx1801_off
  rx1801_start:
    eq $I10, 1, rx1801_restart
    if_null rx1801_debug, debug_1286
    rx1801_cur."!cursor_debug"("START", "term:sym<lambda>")
  debug_1286:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1802_done
    goto rxscan1802_scan
  rxscan1802_loop:
    (rx1801_pos) = rx1801_cur."from"()
    inc rx1801_pos
    rx1801_cur."!cursor_from"(rx1801_pos)
    ge rx1801_pos, rx1801_eos, rxscan1802_done
  rxscan1802_scan:
    set_addr $I10, rxscan1802_loop
    rx1801_cur."!mark_push"(0, rx1801_pos, $I10)
  rxscan1802_done:
  # rx subrule "lambda" subtype=zerowidth negate=
    rx1801_cur."!cursor_pos"(rx1801_pos)
    $P10 = rx1801_cur."lambda"()
    unless $P10, rx1801_fail
  # rx subrule "pblock" subtype=capture negate=
    rx1801_cur."!cursor_pos"(rx1801_pos)
    $P10 = rx1801_cur."pblock"()
    unless $P10, rx1801_fail
    rx1801_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1801_pos = $P10."pos"()
  # rx pass
    rx1801_cur."!cursor_pass"(rx1801_pos, "term:sym<lambda>")
    if_null rx1801_debug, debug_1287
    rx1801_cur."!cursor_debug"("PASS", "term:sym<lambda>", " at pos=", rx1801_pos)
  debug_1287:
    .return (rx1801_cur)
  rx1801_restart:
    if_null rx1801_debug, debug_1288
    rx1801_cur."!cursor_debug"("NEXT", "term:sym<lambda>")
  debug_1288:
  rx1801_fail:
    (rx1801_rep, rx1801_pos, $I10, $P10) = rx1801_cur."!mark_fail"(0)
    lt rx1801_pos, -1, rx1801_done
    eq rx1801_pos, -1, rx1801_fail
    jump $I10
  rx1801_done:
    rx1801_cur."!cursor_fail"()
    if_null rx1801_debug, debug_1289
    rx1801_cur."!cursor_debug"("FAIL", "term:sym<lambda>")
  debug_1289:
    .return (rx1801_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<lambda>"  :subid("150_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 911
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "fatarrow"  :subid("151_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 913
    .local string rx1805_tgt
    .local int rx1805_pos
    .local int rx1805_off
    .local int rx1805_eos
    .local int rx1805_rep
    .local pmc rx1805_cur
    .local pmc rx1805_debug
    (rx1805_cur, rx1805_pos, rx1805_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1805_cur
    .local pmc match
    .lex "$/", match
    length rx1805_eos, rx1805_tgt
    gt rx1805_pos, rx1805_eos, rx1805_done
    set rx1805_off, 0
    lt rx1805_pos, 2, rx1805_start
    sub rx1805_off, rx1805_pos, 1
    substr rx1805_tgt, rx1805_tgt, rx1805_off
  rx1805_start:
    eq $I10, 1, rx1805_restart
    if_null rx1805_debug, debug_1290
    rx1805_cur."!cursor_debug"("START", "fatarrow")
  debug_1290:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1806_done
    goto rxscan1806_scan
  rxscan1806_loop:
    (rx1805_pos) = rx1805_cur."from"()
    inc rx1805_pos
    rx1805_cur."!cursor_from"(rx1805_pos)
    ge rx1805_pos, rx1805_eos, rxscan1806_done
  rxscan1806_scan:
    set_addr $I10, rxscan1806_loop
    rx1805_cur."!mark_push"(0, rx1805_pos, $I10)
  rxscan1806_done:
.annotate 'line', 914
  # rx subrule "identifier" subtype=capture negate=
    rx1805_cur."!cursor_pos"(rx1805_pos)
    $P10 = rx1805_cur."identifier"()
    unless $P10, rx1805_fail
    rx1805_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("key")
    rx1805_pos = $P10."pos"()
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1805_pos, rx1805_off
    set rx1805_rep, 0
    sub $I12, rx1805_eos, rx1805_pos
  rxenumcharlistq1807_loop:
    le $I12, 0, rxenumcharlistq1807_done
    substr $S10, rx1805_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1807_done
    inc rx1805_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1807_loop
  rxenumcharlistq1807_done:
    add rx1805_pos, rx1805_pos, rx1805_rep
  # rx literal  "=>"
    add $I11, rx1805_pos, 2
    gt $I11, rx1805_eos, rx1805_fail
    sub $I11, rx1805_pos, rx1805_off
    substr $S10, rx1805_tgt, $I11, 2
    ne $S10, "=>", rx1805_fail
    add rx1805_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1805_cur."!cursor_pos"(rx1805_pos)
    $P10 = rx1805_cur."ws"()
    unless $P10, rx1805_fail
    rx1805_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1805_cur."!cursor_pos"(rx1805_pos)
    $P10 = rx1805_cur."EXPR"("i=")
    unless $P10, rx1805_fail
    rx1805_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("val")
    rx1805_pos = $P10."pos"()
.annotate 'line', 913
  # rx pass
    rx1805_cur."!cursor_pass"(rx1805_pos, "fatarrow")
    if_null rx1805_debug, debug_1291
    rx1805_cur."!cursor_debug"("PASS", "fatarrow", " at pos=", rx1805_pos)
  debug_1291:
    .return (rx1805_cur)
  rx1805_restart:
    if_null rx1805_debug, debug_1292
    rx1805_cur."!cursor_debug"("NEXT", "fatarrow")
  debug_1292:
  rx1805_fail:
    (rx1805_rep, rx1805_pos, $I10, $P10) = rx1805_cur."!mark_fail"(0)
    lt rx1805_pos, -1, rx1805_done
    eq rx1805_pos, -1, rx1805_fail
    jump $I10
  rx1805_done:
    rx1805_cur."!cursor_fail"()
    if_null rx1805_debug, debug_1293
    rx1805_cur."!cursor_debug"("FAIL", "fatarrow")
  debug_1293:
    .return (rx1805_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__fatarrow"  :subid("152_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 913
    $P103 = self."!PREFIX__!subrule"("identifier", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "colonpair"  :subid("153_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 917
    .local string rx1810_tgt
    .local int rx1810_pos
    .local int rx1810_off
    .local int rx1810_eos
    .local int rx1810_rep
    .local pmc rx1810_cur
    .local pmc rx1810_debug
    (rx1810_cur, rx1810_pos, rx1810_tgt, $I10) = self."!cursor_start"()
    rx1810_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx1810_cur
    .local pmc match
    .lex "$/", match
    length rx1810_eos, rx1810_tgt
    gt rx1810_pos, rx1810_eos, rx1810_done
    set rx1810_off, 0
    lt rx1810_pos, 2, rx1810_start
    sub rx1810_off, rx1810_pos, 1
    substr rx1810_tgt, rx1810_tgt, rx1810_off
  rx1810_start:
    eq $I10, 1, rx1810_restart
    if_null rx1810_debug, debug_1294
    rx1810_cur."!cursor_debug"("START", "colonpair")
  debug_1294:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1811_done
    goto rxscan1811_scan
  rxscan1811_loop:
    (rx1810_pos) = rx1810_cur."from"()
    inc rx1810_pos
    rx1810_cur."!cursor_from"(rx1810_pos)
    ge rx1810_pos, rx1810_eos, rxscan1811_done
  rxscan1811_scan:
    set_addr $I10, rxscan1811_loop
    rx1810_cur."!mark_push"(0, rx1810_pos, $I10)
  rxscan1811_done:
.annotate 'line', 918
  # rx literal  ":"
    add $I11, rx1810_pos, 1
    gt $I11, rx1810_eos, rx1810_fail
    sub $I11, rx1810_pos, rx1810_off
    ord $I11, rx1810_tgt, $I11
    ne $I11, 58, rx1810_fail
    add rx1810_pos, 1
  alt1812_0:
.annotate 'line', 919
    set_addr $I10, alt1812_1
    rx1810_cur."!mark_push"(0, rx1810_pos, $I10)
.annotate 'line', 920
  # rx subcapture "not"
    set_addr $I10, rxcap_1813_fail
    rx1810_cur."!mark_push"(0, rx1810_pos, $I10)
  # rx literal  "!"
    add $I11, rx1810_pos, 1
    gt $I11, rx1810_eos, rx1810_fail
    sub $I11, rx1810_pos, rx1810_off
    ord $I11, rx1810_tgt, $I11
    ne $I11, 33, rx1810_fail
    add rx1810_pos, 1
    set_addr $I10, rxcap_1813_fail
    ($I12, $I11) = rx1810_cur."!mark_peek"($I10)
    rx1810_cur."!cursor_pos"($I11)
    ($P10) = rx1810_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1810_pos, "")
    rx1810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("not")
    goto rxcap_1813_done
  rxcap_1813_fail:
    goto rx1810_fail
  rxcap_1813_done:
  # rx subrule "identifier" subtype=capture negate=
    rx1810_cur."!cursor_pos"(rx1810_pos)
    $P10 = rx1810_cur."identifier"()
    unless $P10, rx1810_fail
    rx1810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1810_pos = $P10."pos"()
    goto alt1812_end
  alt1812_1:
    set_addr $I10, alt1812_2
    rx1810_cur."!mark_push"(0, rx1810_pos, $I10)
.annotate 'line', 921
  # rx subrule "identifier" subtype=capture negate=
    rx1810_cur."!cursor_pos"(rx1810_pos)
    $P10 = rx1810_cur."identifier"()
    unless $P10, rx1810_fail
    rx1810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1810_pos = $P10."pos"()
  # rx rxquantr1814 ** 0..1
    set_addr $I10, rxquantr1814_done
    rx1810_cur."!mark_push"(0, rx1810_pos, $I10)
  rxquantr1814_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx1810_cur."!cursor_pos"(rx1810_pos)
    $P10 = rx1810_cur."circumfix"()
    unless $P10, rx1810_fail
    goto rxsubrule1815_pass
  rxsubrule1815_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1810_fail
  rxsubrule1815_pass:
    set_addr $I10, rxsubrule1815_back
    rx1810_cur."!mark_push"(0, rx1810_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx1810_pos = $P10."pos"()
    set_addr $I10, rxquantr1814_done
    (rx1810_rep) = rx1810_cur."!mark_commit"($I10)
  rxquantr1814_done:
    goto alt1812_end
  alt1812_2:
    set_addr $I10, alt1812_3
    rx1810_cur."!mark_push"(0, rx1810_pos, $I10)
.annotate 'line', 922
  # rx subrule "circumfix" subtype=capture negate=
    rx1810_cur."!cursor_pos"(rx1810_pos)
    $P10 = rx1810_cur."circumfix"()
    unless $P10, rx1810_fail
    rx1810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("circumfix")
    rx1810_pos = $P10."pos"()
    goto alt1812_end
  alt1812_3:
.annotate 'line', 923
  # rx subrule "variable" subtype=capture negate=
    rx1810_cur."!cursor_pos"(rx1810_pos)
    $P10 = rx1810_cur."variable"()
    unless $P10, rx1810_fail
    rx1810_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1810_pos = $P10."pos"()
  alt1812_end:
.annotate 'line', 917
  # rx pass
    rx1810_cur."!cursor_pass"(rx1810_pos, "colonpair")
    if_null rx1810_debug, debug_1295
    rx1810_cur."!cursor_debug"("PASS", "colonpair", " at pos=", rx1810_pos)
  debug_1295:
    .return (rx1810_cur)
  rx1810_restart:
    if_null rx1810_debug, debug_1296
    rx1810_cur."!cursor_debug"("NEXT", "colonpair")
  debug_1296:
  rx1810_fail:
    (rx1810_rep, rx1810_pos, $I10, $P10) = rx1810_cur."!mark_fail"(0)
    lt rx1810_pos, -1, rx1810_done
    eq rx1810_pos, -1, rx1810_fail
    jump $I10
  rx1810_done:
    rx1810_cur."!cursor_fail"()
    if_null rx1810_debug, debug_1297
    rx1810_cur."!cursor_debug"("FAIL", "colonpair")
  debug_1297:
    .return (rx1810_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__colonpair"  :subid("154_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 917
    $P103 = self."!PREFIX__!subrule"("variable", ":")
    $P104 = self."!PREFIX__!subrule"("circumfix", ":")
    $P105 = self."!PREFIX__!subrule"("identifier", ":")
    $P106 = self."!PREFIX__!subrule"("identifier", ":!")
    new $P107, "ResizablePMCArray"
    push $P107, $P103
    push $P107, $P104
    push $P107, $P105
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable"  :subid("155_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 927
    .local string rx1818_tgt
    .local int rx1818_pos
    .local int rx1818_off
    .local int rx1818_eos
    .local int rx1818_rep
    .local pmc rx1818_cur
    .local pmc rx1818_debug
    (rx1818_cur, rx1818_pos, rx1818_tgt, $I10) = self."!cursor_start"()
    rx1818_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx1818_cur
    .local pmc match
    .lex "$/", match
    length rx1818_eos, rx1818_tgt
    gt rx1818_pos, rx1818_eos, rx1818_done
    set rx1818_off, 0
    lt rx1818_pos, 2, rx1818_start
    sub rx1818_off, rx1818_pos, 1
    substr rx1818_tgt, rx1818_tgt, rx1818_off
  rx1818_start:
    eq $I10, 1, rx1818_restart
    if_null rx1818_debug, debug_1298
    rx1818_cur."!cursor_debug"("START", "variable")
  debug_1298:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1819_done
    goto rxscan1819_scan
  rxscan1819_loop:
    (rx1818_pos) = rx1818_cur."from"()
    inc rx1818_pos
    rx1818_cur."!cursor_from"(rx1818_pos)
    ge rx1818_pos, rx1818_eos, rxscan1819_done
  rxscan1819_scan:
    set_addr $I10, rxscan1819_loop
    rx1818_cur."!mark_push"(0, rx1818_pos, $I10)
  rxscan1819_done:
  alt1820_0:
    set_addr $I10, alt1820_1
    rx1818_cur."!mark_push"(0, rx1818_pos, $I10)
.annotate 'line', 928
  # rx subrule "sigil" subtype=capture negate=
    rx1818_cur."!cursor_pos"(rx1818_pos)
    $P10 = rx1818_cur."sigil"()
    unless $P10, rx1818_fail
    rx1818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1818_pos = $P10."pos"()
  # rx rxquantr1821 ** 0..1
    set_addr $I10, rxquantr1821_done
    rx1818_cur."!mark_push"(0, rx1818_pos, $I10)
  rxquantr1821_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx1818_cur."!cursor_pos"(rx1818_pos)
    $P10 = rx1818_cur."twigil"()
    unless $P10, rx1818_fail
    goto rxsubrule1822_pass
  rxsubrule1822_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1818_fail
  rxsubrule1822_pass:
    set_addr $I10, rxsubrule1822_back
    rx1818_cur."!mark_push"(0, rx1818_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx1818_pos = $P10."pos"()
    set_addr $I10, rxquantr1821_done
    (rx1818_rep) = rx1818_cur."!mark_commit"($I10)
  rxquantr1821_done:
  # rx subrule "name" subtype=capture negate=
    rx1818_cur."!cursor_pos"(rx1818_pos)
    $P10 = rx1818_cur."name"()
    unless $P10, rx1818_fail
    rx1818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    rx1818_pos = $P10."pos"()
    goto alt1820_end
  alt1820_1:
    set_addr $I10, alt1820_2
    rx1818_cur."!mark_push"(0, rx1818_pos, $I10)
.annotate 'line', 929
  # rx subrule "sigil" subtype=capture negate=
    rx1818_cur."!cursor_pos"(rx1818_pos)
    $P10 = rx1818_cur."sigil"()
    unless $P10, rx1818_fail
    rx1818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1818_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1818_pos, rx1818_off
    substr $S10, rx1818_tgt, $I10, 1
    index $I11, "<[", $S10
    lt $I11, 0, rx1818_fail
  # rx subrule "postcircumfix" subtype=capture negate=
    rx1818_cur."!cursor_pos"(rx1818_pos)
    $P10 = rx1818_cur."postcircumfix"()
    unless $P10, rx1818_fail
    rx1818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("postcircumfix")
    rx1818_pos = $P10."pos"()
    goto alt1820_end
  alt1820_2:
.annotate 'line', 930
  # rx subcapture "sigil"
    set_addr $I10, rxcap_1823_fail
    rx1818_cur."!mark_push"(0, rx1818_pos, $I10)
  # rx literal  "$"
    add $I11, rx1818_pos, 1
    gt $I11, rx1818_eos, rx1818_fail
    sub $I11, rx1818_pos, rx1818_off
    ord $I11, rx1818_tgt, $I11
    ne $I11, 36, rx1818_fail
    add rx1818_pos, 1
    set_addr $I10, rxcap_1823_fail
    ($I12, $I11) = rx1818_cur."!mark_peek"($I10)
    rx1818_cur."!cursor_pos"($I11)
    ($P10) = rx1818_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1818_pos, "")
    rx1818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_1823_done
  rxcap_1823_fail:
    goto rx1818_fail
  rxcap_1823_done:
  # rx subcapture "desigilname"
    set_addr $I10, rxcap_1824_fail
    rx1818_cur."!mark_push"(0, rx1818_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx1818_pos, rx1818_eos, rx1818_fail
    sub $I10, rx1818_pos, rx1818_off
    substr $S10, rx1818_tgt, $I10, 1
    index $I11, "/_!", $S10
    lt $I11, 0, rx1818_fail
    inc rx1818_pos
    set_addr $I10, rxcap_1824_fail
    ($I12, $I11) = rx1818_cur."!mark_peek"($I10)
    rx1818_cur."!cursor_pos"($I11)
    ($P10) = rx1818_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1818_pos, "")
    rx1818_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    goto rxcap_1824_done
  rxcap_1824_fail:
    goto rx1818_fail
  rxcap_1824_done:
  alt1820_end:
.annotate 'line', 927
  # rx pass
    rx1818_cur."!cursor_pass"(rx1818_pos, "variable")
    if_null rx1818_debug, debug_1299
    rx1818_cur."!cursor_debug"("PASS", "variable", " at pos=", rx1818_pos)
  debug_1299:
    .return (rx1818_cur)
  rx1818_restart:
    if_null rx1818_debug, debug_1300
    rx1818_cur."!cursor_debug"("NEXT", "variable")
  debug_1300:
  rx1818_fail:
    (rx1818_rep, rx1818_pos, $I10, $P10) = rx1818_cur."!mark_fail"(0)
    lt rx1818_pos, -1, rx1818_done
    eq rx1818_pos, -1, rx1818_fail
    jump $I10
  rx1818_done:
    rx1818_cur."!cursor_fail"()
    if_null rx1818_debug, debug_1301
    rx1818_cur."!cursor_debug"("FAIL", "variable")
  debug_1301:
    .return (rx1818_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable"  :subid("156_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 927
    $P103 = self."!PREFIX__!subrule"("sigil", "")
    $P104 = self."!PREFIX__!subrule"("sigil", "")
    new $P105, "ResizablePMCArray"
    push $P105, "/"
    push $P105, "_"
    push $P105, "!"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "sigil"  :subid("157_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 933
    .local string rx1827_tgt
    .local int rx1827_pos
    .local int rx1827_off
    .local int rx1827_eos
    .local int rx1827_rep
    .local pmc rx1827_cur
    .local pmc rx1827_debug
    (rx1827_cur, rx1827_pos, rx1827_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1827_cur
    .local pmc match
    .lex "$/", match
    length rx1827_eos, rx1827_tgt
    gt rx1827_pos, rx1827_eos, rx1827_done
    set rx1827_off, 0
    lt rx1827_pos, 2, rx1827_start
    sub rx1827_off, rx1827_pos, 1
    substr rx1827_tgt, rx1827_tgt, rx1827_off
  rx1827_start:
    eq $I10, 1, rx1827_restart
    if_null rx1827_debug, debug_1302
    rx1827_cur."!cursor_debug"("START", "sigil")
  debug_1302:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1828_done
    goto rxscan1828_scan
  rxscan1828_loop:
    (rx1827_pos) = rx1827_cur."from"()
    inc rx1827_pos
    rx1827_cur."!cursor_from"(rx1827_pos)
    ge rx1827_pos, rx1827_eos, rxscan1828_done
  rxscan1828_scan:
    set_addr $I10, rxscan1828_loop
    rx1827_cur."!mark_push"(0, rx1827_pos, $I10)
  rxscan1828_done:
  # rx enumcharlist negate=0 
    ge rx1827_pos, rx1827_eos, rx1827_fail
    sub $I10, rx1827_pos, rx1827_off
    substr $S10, rx1827_tgt, $I10, 1
    index $I11, "$@%&", $S10
    lt $I11, 0, rx1827_fail
    inc rx1827_pos
  # rx pass
    rx1827_cur."!cursor_pass"(rx1827_pos, "sigil")
    if_null rx1827_debug, debug_1303
    rx1827_cur."!cursor_debug"("PASS", "sigil", " at pos=", rx1827_pos)
  debug_1303:
    .return (rx1827_cur)
  rx1827_restart:
    if_null rx1827_debug, debug_1304
    rx1827_cur."!cursor_debug"("NEXT", "sigil")
  debug_1304:
  rx1827_fail:
    (rx1827_rep, rx1827_pos, $I10, $P10) = rx1827_cur."!mark_fail"(0)
    lt rx1827_pos, -1, rx1827_done
    eq rx1827_pos, -1, rx1827_fail
    jump $I10
  rx1827_done:
    rx1827_cur."!cursor_fail"()
    if_null rx1827_debug, debug_1305
    rx1827_cur."!cursor_debug"("FAIL", "sigil")
  debug_1305:
    .return (rx1827_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__sigil"  :subid("158_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 933
    new $P103, "ResizablePMCArray"
    push $P103, "$"
    push $P103, "@"
    push $P103, "%"
    push $P103, "&"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "twigil"  :subid("159_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 935
    .local string rx1831_tgt
    .local int rx1831_pos
    .local int rx1831_off
    .local int rx1831_eos
    .local int rx1831_rep
    .local pmc rx1831_cur
    .local pmc rx1831_debug
    (rx1831_cur, rx1831_pos, rx1831_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1831_cur
    .local pmc match
    .lex "$/", match
    length rx1831_eos, rx1831_tgt
    gt rx1831_pos, rx1831_eos, rx1831_done
    set rx1831_off, 0
    lt rx1831_pos, 2, rx1831_start
    sub rx1831_off, rx1831_pos, 1
    substr rx1831_tgt, rx1831_tgt, rx1831_off
  rx1831_start:
    eq $I10, 1, rx1831_restart
    if_null rx1831_debug, debug_1306
    rx1831_cur."!cursor_debug"("START", "twigil")
  debug_1306:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1832_done
    goto rxscan1832_scan
  rxscan1832_loop:
    (rx1831_pos) = rx1831_cur."from"()
    inc rx1831_pos
    rx1831_cur."!cursor_from"(rx1831_pos)
    ge rx1831_pos, rx1831_eos, rxscan1832_done
  rxscan1832_scan:
    set_addr $I10, rxscan1832_loop
    rx1831_cur."!mark_push"(0, rx1831_pos, $I10)
  rxscan1832_done:
  # rx enumcharlist negate=0 
    ge rx1831_pos, rx1831_eos, rx1831_fail
    sub $I10, rx1831_pos, rx1831_off
    substr $S10, rx1831_tgt, $I10, 1
    index $I11, "*!?", $S10
    lt $I11, 0, rx1831_fail
    inc rx1831_pos
  # rx pass
    rx1831_cur."!cursor_pass"(rx1831_pos, "twigil")
    if_null rx1831_debug, debug_1307
    rx1831_cur."!cursor_debug"("PASS", "twigil", " at pos=", rx1831_pos)
  debug_1307:
    .return (rx1831_cur)
  rx1831_restart:
    if_null rx1831_debug, debug_1308
    rx1831_cur."!cursor_debug"("NEXT", "twigil")
  debug_1308:
  rx1831_fail:
    (rx1831_rep, rx1831_pos, $I10, $P10) = rx1831_cur."!mark_fail"(0)
    lt rx1831_pos, -1, rx1831_done
    eq rx1831_pos, -1, rx1831_fail
    jump $I10
  rx1831_done:
    rx1831_cur."!cursor_fail"()
    if_null rx1831_debug, debug_1309
    rx1831_cur."!cursor_debug"("FAIL", "twigil")
  debug_1309:
    .return (rx1831_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__twigil"  :subid("160_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 935
    new $P103, "ResizablePMCArray"
    push $P103, "*"
    push $P103, "!"
    push $P103, "?"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator"  :subid("161_1335114138.94729")
    .param pmc param_1835
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 937
    .lex "self", param_1835
    $P103 = param_1835."!protoregex"("package_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator"  :subid("162_1335114138.94729")
    .param pmc param_1837
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 937
    .lex "self", param_1837
    $P104 = param_1837."!PREFIX__!protoregex"("package_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<module>"  :subid("163_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 939
    new $P103, "Undef"
    set $P1839, $P103
    .lex "$*OUTERPACKAGE", $P1839
.annotate 'line', 940
    new $P104, "Undef"
    set $P1840, $P104
    .lex "$*PKGDECL", $P1840
.annotate 'line', 938
    .local string rx1841_tgt
    .local int rx1841_pos
    .local int rx1841_off
    .local int rx1841_eos
    .local int rx1841_rep
    .local pmc rx1841_cur
    .local pmc rx1841_debug
    (rx1841_cur, rx1841_pos, rx1841_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1841_cur
    .local pmc match
    .lex "$/", match
    length rx1841_eos, rx1841_tgt
    gt rx1841_pos, rx1841_eos, rx1841_done
    set rx1841_off, 0
    lt rx1841_pos, 2, rx1841_start
    sub rx1841_off, rx1841_pos, 1
    substr rx1841_tgt, rx1841_tgt, rx1841_off
  rx1841_start:
    eq $I10, 1, rx1841_restart
    if_null rx1841_debug, debug_1310
    rx1841_cur."!cursor_debug"("START", "package_declarator:sym<module>")
  debug_1310:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1842_done
    goto rxscan1842_scan
  rxscan1842_loop:
    (rx1841_pos) = rx1841_cur."from"()
    inc rx1841_pos
    rx1841_cur."!cursor_from"(rx1841_pos)
    ge rx1841_pos, rx1841_eos, rxscan1842_done
  rxscan1842_scan:
    set_addr $I10, rxscan1842_loop
    rx1841_cur."!mark_push"(0, rx1841_pos, $I10)
  rxscan1842_done:
.annotate 'line', 939
    rx1841_cur."!cursor_pos"(rx1841_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1311
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1312
    die "Contextual $*PACKAGE not found"
  vivify_1312:
  vivify_1311:
    set $P1839, $P107
.annotate 'line', 940
    rx1841_cur."!cursor_pos"(rx1841_pos)
    new $P108, "String"
    assign $P108, "module"
    set $P1840, $P108
.annotate 'line', 941
  # rx subcapture "sym"
    set_addr $I10, rxcap_1843_fail
    rx1841_cur."!mark_push"(0, rx1841_pos, $I10)
  # rx literal  "module"
    add $I11, rx1841_pos, 6
    gt $I11, rx1841_eos, rx1841_fail
    sub $I11, rx1841_pos, rx1841_off
    substr $S10, rx1841_tgt, $I11, 6
    ne $S10, "module", rx1841_fail
    add rx1841_pos, 6
    set_addr $I10, rxcap_1843_fail
    ($I12, $I11) = rx1841_cur."!mark_peek"($I10)
    rx1841_cur."!cursor_pos"($I11)
    ($P10) = rx1841_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1841_pos, "")
    rx1841_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1843_done
  rxcap_1843_fail:
    goto rx1841_fail
  rxcap_1843_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1841_cur."!cursor_pos"(rx1841_pos)
    $P10 = rx1841_cur."package_def"()
    unless $P10, rx1841_fail
    rx1841_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1841_pos = $P10."pos"()
.annotate 'line', 938
  # rx pass
    rx1841_cur."!cursor_pass"(rx1841_pos, "package_declarator:sym<module>")
    if_null rx1841_debug, debug_1313
    rx1841_cur."!cursor_debug"("PASS", "package_declarator:sym<module>", " at pos=", rx1841_pos)
  debug_1313:
    .return (rx1841_cur)
  rx1841_restart:
    if_null rx1841_debug, debug_1314
    rx1841_cur."!cursor_debug"("NEXT", "package_declarator:sym<module>")
  debug_1314:
  rx1841_fail:
    (rx1841_rep, rx1841_pos, $I10, $P10) = rx1841_cur."!mark_fail"(0)
    lt rx1841_pos, -1, rx1841_done
    eq rx1841_pos, -1, rx1841_fail
    jump $I10
  rx1841_done:
    rx1841_cur."!cursor_fail"()
    if_null rx1841_debug, debug_1315
    rx1841_cur."!cursor_debug"("FAIL", "package_declarator:sym<module>")
  debug_1315:
    .return (rx1841_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<module>"  :subid("164_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 938
    $P109 = self."!PREFIX__!subrule"("package_def", "module")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<knowhow>"  :subid("165_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 944
    new $P103, "Undef"
    set $P1846, $P103
    .lex "$*OUTERPACKAGE", $P1846
.annotate 'line', 945
    new $P104, "Undef"
    set $P1847, $P104
    .lex "$*PKGDECL", $P1847
.annotate 'line', 943
    .local string rx1848_tgt
    .local int rx1848_pos
    .local int rx1848_off
    .local int rx1848_eos
    .local int rx1848_rep
    .local pmc rx1848_cur
    .local pmc rx1848_debug
    (rx1848_cur, rx1848_pos, rx1848_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1848_cur
    .local pmc match
    .lex "$/", match
    length rx1848_eos, rx1848_tgt
    gt rx1848_pos, rx1848_eos, rx1848_done
    set rx1848_off, 0
    lt rx1848_pos, 2, rx1848_start
    sub rx1848_off, rx1848_pos, 1
    substr rx1848_tgt, rx1848_tgt, rx1848_off
  rx1848_start:
    eq $I10, 1, rx1848_restart
    if_null rx1848_debug, debug_1316
    rx1848_cur."!cursor_debug"("START", "package_declarator:sym<knowhow>")
  debug_1316:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1849_done
    goto rxscan1849_scan
  rxscan1849_loop:
    (rx1848_pos) = rx1848_cur."from"()
    inc rx1848_pos
    rx1848_cur."!cursor_from"(rx1848_pos)
    ge rx1848_pos, rx1848_eos, rxscan1849_done
  rxscan1849_scan:
    set_addr $I10, rxscan1849_loop
    rx1848_cur."!mark_push"(0, rx1848_pos, $I10)
  rxscan1849_done:
.annotate 'line', 944
    rx1848_cur."!cursor_pos"(rx1848_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1317
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1318
    die "Contextual $*PACKAGE not found"
  vivify_1318:
  vivify_1317:
    set $P1846, $P107
.annotate 'line', 945
    rx1848_cur."!cursor_pos"(rx1848_pos)
    new $P108, "String"
    assign $P108, "knowhow"
    set $P1847, $P108
.annotate 'line', 946
  # rx subcapture "sym"
    set_addr $I10, rxcap_1850_fail
    rx1848_cur."!mark_push"(0, rx1848_pos, $I10)
  # rx literal  "knowhow"
    add $I11, rx1848_pos, 7
    gt $I11, rx1848_eos, rx1848_fail
    sub $I11, rx1848_pos, rx1848_off
    substr $S10, rx1848_tgt, $I11, 7
    ne $S10, "knowhow", rx1848_fail
    add rx1848_pos, 7
    set_addr $I10, rxcap_1850_fail
    ($I12, $I11) = rx1848_cur."!mark_peek"($I10)
    rx1848_cur."!cursor_pos"($I11)
    ($P10) = rx1848_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1848_pos, "")
    rx1848_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1850_done
  rxcap_1850_fail:
    goto rx1848_fail
  rxcap_1850_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1848_cur."!cursor_pos"(rx1848_pos)
    $P10 = rx1848_cur."package_def"()
    unless $P10, rx1848_fail
    rx1848_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1848_pos = $P10."pos"()
.annotate 'line', 943
  # rx pass
    rx1848_cur."!cursor_pass"(rx1848_pos, "package_declarator:sym<knowhow>")
    if_null rx1848_debug, debug_1319
    rx1848_cur."!cursor_debug"("PASS", "package_declarator:sym<knowhow>", " at pos=", rx1848_pos)
  debug_1319:
    .return (rx1848_cur)
  rx1848_restart:
    if_null rx1848_debug, debug_1320
    rx1848_cur."!cursor_debug"("NEXT", "package_declarator:sym<knowhow>")
  debug_1320:
  rx1848_fail:
    (rx1848_rep, rx1848_pos, $I10, $P10) = rx1848_cur."!mark_fail"(0)
    lt rx1848_pos, -1, rx1848_done
    eq rx1848_pos, -1, rx1848_fail
    jump $I10
  rx1848_done:
    rx1848_cur."!cursor_fail"()
    if_null rx1848_debug, debug_1321
    rx1848_cur."!cursor_debug"("FAIL", "package_declarator:sym<knowhow>")
  debug_1321:
    .return (rx1848_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<knowhow>"  :subid("166_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 943
    $P109 = self."!PREFIX__!subrule"("package_def", "knowhow")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<class>"  :subid("167_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 949
    new $P103, "Undef"
    set $P1853, $P103
    .lex "$*OUTERPACKAGE", $P1853
.annotate 'line', 950
    new $P104, "Undef"
    set $P1854, $P104
    .lex "$*PKGDECL", $P1854
.annotate 'line', 948
    .local string rx1855_tgt
    .local int rx1855_pos
    .local int rx1855_off
    .local int rx1855_eos
    .local int rx1855_rep
    .local pmc rx1855_cur
    .local pmc rx1855_debug
    (rx1855_cur, rx1855_pos, rx1855_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1855_cur
    .local pmc match
    .lex "$/", match
    length rx1855_eos, rx1855_tgt
    gt rx1855_pos, rx1855_eos, rx1855_done
    set rx1855_off, 0
    lt rx1855_pos, 2, rx1855_start
    sub rx1855_off, rx1855_pos, 1
    substr rx1855_tgt, rx1855_tgt, rx1855_off
  rx1855_start:
    eq $I10, 1, rx1855_restart
    if_null rx1855_debug, debug_1322
    rx1855_cur."!cursor_debug"("START", "package_declarator:sym<class>")
  debug_1322:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1856_done
    goto rxscan1856_scan
  rxscan1856_loop:
    (rx1855_pos) = rx1855_cur."from"()
    inc rx1855_pos
    rx1855_cur."!cursor_from"(rx1855_pos)
    ge rx1855_pos, rx1855_eos, rxscan1856_done
  rxscan1856_scan:
    set_addr $I10, rxscan1856_loop
    rx1855_cur."!mark_push"(0, rx1855_pos, $I10)
  rxscan1856_done:
.annotate 'line', 949
    rx1855_cur."!cursor_pos"(rx1855_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1323
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1324
    die "Contextual $*PACKAGE not found"
  vivify_1324:
  vivify_1323:
    set $P1853, $P107
.annotate 'line', 950
    rx1855_cur."!cursor_pos"(rx1855_pos)
    new $P108, "String"
    assign $P108, "class"
    set $P1854, $P108
.annotate 'line', 951
  # rx subcapture "sym"
    set_addr $I10, rxcap_1857_fail
    rx1855_cur."!mark_push"(0, rx1855_pos, $I10)
  # rx literal  "class"
    add $I11, rx1855_pos, 5
    gt $I11, rx1855_eos, rx1855_fail
    sub $I11, rx1855_pos, rx1855_off
    substr $S10, rx1855_tgt, $I11, 5
    ne $S10, "class", rx1855_fail
    add rx1855_pos, 5
    set_addr $I10, rxcap_1857_fail
    ($I12, $I11) = rx1855_cur."!mark_peek"($I10)
    rx1855_cur."!cursor_pos"($I11)
    ($P10) = rx1855_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1855_pos, "")
    rx1855_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1857_done
  rxcap_1857_fail:
    goto rx1855_fail
  rxcap_1857_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1855_cur."!cursor_pos"(rx1855_pos)
    $P10 = rx1855_cur."package_def"()
    unless $P10, rx1855_fail
    rx1855_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1855_pos = $P10."pos"()
.annotate 'line', 948
  # rx pass
    rx1855_cur."!cursor_pass"(rx1855_pos, "package_declarator:sym<class>")
    if_null rx1855_debug, debug_1325
    rx1855_cur."!cursor_debug"("PASS", "package_declarator:sym<class>", " at pos=", rx1855_pos)
  debug_1325:
    .return (rx1855_cur)
  rx1855_restart:
    if_null rx1855_debug, debug_1326
    rx1855_cur."!cursor_debug"("NEXT", "package_declarator:sym<class>")
  debug_1326:
  rx1855_fail:
    (rx1855_rep, rx1855_pos, $I10, $P10) = rx1855_cur."!mark_fail"(0)
    lt rx1855_pos, -1, rx1855_done
    eq rx1855_pos, -1, rx1855_fail
    jump $I10
  rx1855_done:
    rx1855_cur."!cursor_fail"()
    if_null rx1855_debug, debug_1327
    rx1855_cur."!cursor_debug"("FAIL", "package_declarator:sym<class>")
  debug_1327:
    .return (rx1855_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<class>"  :subid("168_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 948
    $P109 = self."!PREFIX__!subrule"("package_def", "class")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<grammar>"  :subid("169_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 954
    new $P103, "Undef"
    set $P1860, $P103
    .lex "$*OUTERPACKAGE", $P1860
.annotate 'line', 955
    new $P104, "Undef"
    set $P1861, $P104
    .lex "$*PKGDECL", $P1861
.annotate 'line', 953
    .local string rx1862_tgt
    .local int rx1862_pos
    .local int rx1862_off
    .local int rx1862_eos
    .local int rx1862_rep
    .local pmc rx1862_cur
    .local pmc rx1862_debug
    (rx1862_cur, rx1862_pos, rx1862_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1862_cur
    .local pmc match
    .lex "$/", match
    length rx1862_eos, rx1862_tgt
    gt rx1862_pos, rx1862_eos, rx1862_done
    set rx1862_off, 0
    lt rx1862_pos, 2, rx1862_start
    sub rx1862_off, rx1862_pos, 1
    substr rx1862_tgt, rx1862_tgt, rx1862_off
  rx1862_start:
    eq $I10, 1, rx1862_restart
    if_null rx1862_debug, debug_1328
    rx1862_cur."!cursor_debug"("START", "package_declarator:sym<grammar>")
  debug_1328:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1863_done
    goto rxscan1863_scan
  rxscan1863_loop:
    (rx1862_pos) = rx1862_cur."from"()
    inc rx1862_pos
    rx1862_cur."!cursor_from"(rx1862_pos)
    ge rx1862_pos, rx1862_eos, rxscan1863_done
  rxscan1863_scan:
    set_addr $I10, rxscan1863_loop
    rx1862_cur."!mark_push"(0, rx1862_pos, $I10)
  rxscan1863_done:
.annotate 'line', 954
    rx1862_cur."!cursor_pos"(rx1862_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1329
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1330
    die "Contextual $*PACKAGE not found"
  vivify_1330:
  vivify_1329:
    set $P1860, $P107
.annotate 'line', 955
    rx1862_cur."!cursor_pos"(rx1862_pos)
    new $P108, "String"
    assign $P108, "grammar"
    set $P1861, $P108
.annotate 'line', 956
  # rx subcapture "sym"
    set_addr $I10, rxcap_1864_fail
    rx1862_cur."!mark_push"(0, rx1862_pos, $I10)
  # rx literal  "grammar"
    add $I11, rx1862_pos, 7
    gt $I11, rx1862_eos, rx1862_fail
    sub $I11, rx1862_pos, rx1862_off
    substr $S10, rx1862_tgt, $I11, 7
    ne $S10, "grammar", rx1862_fail
    add rx1862_pos, 7
    set_addr $I10, rxcap_1864_fail
    ($I12, $I11) = rx1862_cur."!mark_peek"($I10)
    rx1862_cur."!cursor_pos"($I11)
    ($P10) = rx1862_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1862_pos, "")
    rx1862_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1864_done
  rxcap_1864_fail:
    goto rx1862_fail
  rxcap_1864_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1862_cur."!cursor_pos"(rx1862_pos)
    $P10 = rx1862_cur."package_def"()
    unless $P10, rx1862_fail
    rx1862_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1862_pos = $P10."pos"()
.annotate 'line', 953
  # rx pass
    rx1862_cur."!cursor_pass"(rx1862_pos, "package_declarator:sym<grammar>")
    if_null rx1862_debug, debug_1331
    rx1862_cur."!cursor_debug"("PASS", "package_declarator:sym<grammar>", " at pos=", rx1862_pos)
  debug_1331:
    .return (rx1862_cur)
  rx1862_restart:
    if_null rx1862_debug, debug_1332
    rx1862_cur."!cursor_debug"("NEXT", "package_declarator:sym<grammar>")
  debug_1332:
  rx1862_fail:
    (rx1862_rep, rx1862_pos, $I10, $P10) = rx1862_cur."!mark_fail"(0)
    lt rx1862_pos, -1, rx1862_done
    eq rx1862_pos, -1, rx1862_fail
    jump $I10
  rx1862_done:
    rx1862_cur."!cursor_fail"()
    if_null rx1862_debug, debug_1333
    rx1862_cur."!cursor_debug"("FAIL", "package_declarator:sym<grammar>")
  debug_1333:
    .return (rx1862_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<grammar>"  :subid("170_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 953
    $P109 = self."!PREFIX__!subrule"("package_def", "grammar")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<role>"  :subid("171_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 959
    new $P103, "Undef"
    set $P1867, $P103
    .lex "$*OUTERPACKAGE", $P1867
.annotate 'line', 960
    new $P104, "Undef"
    set $P1868, $P104
    .lex "$*PKGDECL", $P1868
.annotate 'line', 958
    .local string rx1869_tgt
    .local int rx1869_pos
    .local int rx1869_off
    .local int rx1869_eos
    .local int rx1869_rep
    .local pmc rx1869_cur
    .local pmc rx1869_debug
    (rx1869_cur, rx1869_pos, rx1869_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1869_cur
    .local pmc match
    .lex "$/", match
    length rx1869_eos, rx1869_tgt
    gt rx1869_pos, rx1869_eos, rx1869_done
    set rx1869_off, 0
    lt rx1869_pos, 2, rx1869_start
    sub rx1869_off, rx1869_pos, 1
    substr rx1869_tgt, rx1869_tgt, rx1869_off
  rx1869_start:
    eq $I10, 1, rx1869_restart
    if_null rx1869_debug, debug_1334
    rx1869_cur."!cursor_debug"("START", "package_declarator:sym<role>")
  debug_1334:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1870_done
    goto rxscan1870_scan
  rxscan1870_loop:
    (rx1869_pos) = rx1869_cur."from"()
    inc rx1869_pos
    rx1869_cur."!cursor_from"(rx1869_pos)
    ge rx1869_pos, rx1869_eos, rxscan1870_done
  rxscan1870_scan:
    set_addr $I10, rxscan1870_loop
    rx1869_cur."!mark_push"(0, rx1869_pos, $I10)
  rxscan1870_done:
.annotate 'line', 959
    rx1869_cur."!cursor_pos"(rx1869_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1335
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1336
    die "Contextual $*PACKAGE not found"
  vivify_1336:
  vivify_1335:
    set $P1867, $P107
.annotate 'line', 960
    rx1869_cur."!cursor_pos"(rx1869_pos)
    new $P108, "String"
    assign $P108, "role"
    set $P1868, $P108
.annotate 'line', 961
  # rx subcapture "sym"
    set_addr $I10, rxcap_1871_fail
    rx1869_cur."!mark_push"(0, rx1869_pos, $I10)
  # rx literal  "role"
    add $I11, rx1869_pos, 4
    gt $I11, rx1869_eos, rx1869_fail
    sub $I11, rx1869_pos, rx1869_off
    substr $S10, rx1869_tgt, $I11, 4
    ne $S10, "role", rx1869_fail
    add rx1869_pos, 4
    set_addr $I10, rxcap_1871_fail
    ($I12, $I11) = rx1869_cur."!mark_peek"($I10)
    rx1869_cur."!cursor_pos"($I11)
    ($P10) = rx1869_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1869_pos, "")
    rx1869_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1871_done
  rxcap_1871_fail:
    goto rx1869_fail
  rxcap_1871_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1869_cur."!cursor_pos"(rx1869_pos)
    $P10 = rx1869_cur."package_def"()
    unless $P10, rx1869_fail
    rx1869_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1869_pos = $P10."pos"()
.annotate 'line', 958
  # rx pass
    rx1869_cur."!cursor_pass"(rx1869_pos, "package_declarator:sym<role>")
    if_null rx1869_debug, debug_1337
    rx1869_cur."!cursor_debug"("PASS", "package_declarator:sym<role>", " at pos=", rx1869_pos)
  debug_1337:
    .return (rx1869_cur)
  rx1869_restart:
    if_null rx1869_debug, debug_1338
    rx1869_cur."!cursor_debug"("NEXT", "package_declarator:sym<role>")
  debug_1338:
  rx1869_fail:
    (rx1869_rep, rx1869_pos, $I10, $P10) = rx1869_cur."!mark_fail"(0)
    lt rx1869_pos, -1, rx1869_done
    eq rx1869_pos, -1, rx1869_fail
    jump $I10
  rx1869_done:
    rx1869_cur."!cursor_fail"()
    if_null rx1869_debug, debug_1339
    rx1869_cur."!cursor_debug"("FAIL", "package_declarator:sym<role>")
  debug_1339:
    .return (rx1869_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<role>"  :subid("172_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 958
    $P109 = self."!PREFIX__!subrule"("package_def", "role")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<native>"  :subid("173_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 964
    new $P103, "Undef"
    set $P1874, $P103
    .lex "$*OUTERPACKAGE", $P1874
.annotate 'line', 965
    new $P104, "Undef"
    set $P1875, $P104
    .lex "$*PKGDECL", $P1875
.annotate 'line', 963
    .local string rx1876_tgt
    .local int rx1876_pos
    .local int rx1876_off
    .local int rx1876_eos
    .local int rx1876_rep
    .local pmc rx1876_cur
    .local pmc rx1876_debug
    (rx1876_cur, rx1876_pos, rx1876_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1876_cur
    .local pmc match
    .lex "$/", match
    length rx1876_eos, rx1876_tgt
    gt rx1876_pos, rx1876_eos, rx1876_done
    set rx1876_off, 0
    lt rx1876_pos, 2, rx1876_start
    sub rx1876_off, rx1876_pos, 1
    substr rx1876_tgt, rx1876_tgt, rx1876_off
  rx1876_start:
    eq $I10, 1, rx1876_restart
    if_null rx1876_debug, debug_1340
    rx1876_cur."!cursor_debug"("START", "package_declarator:sym<native>")
  debug_1340:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1877_done
    goto rxscan1877_scan
  rxscan1877_loop:
    (rx1876_pos) = rx1876_cur."from"()
    inc rx1876_pos
    rx1876_cur."!cursor_from"(rx1876_pos)
    ge rx1876_pos, rx1876_eos, rxscan1877_done
  rxscan1877_scan:
    set_addr $I10, rxscan1877_loop
    rx1876_cur."!mark_push"(0, rx1876_pos, $I10)
  rxscan1877_done:
.annotate 'line', 964
    rx1876_cur."!cursor_pos"(rx1876_pos)
    find_dynamic_lex $P107, "$*PACKAGE"
    unless_null $P107, vivify_1341
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1342
    die "Contextual $*PACKAGE not found"
  vivify_1342:
  vivify_1341:
    set $P1874, $P107
.annotate 'line', 965
    rx1876_cur."!cursor_pos"(rx1876_pos)
    new $P108, "String"
    assign $P108, "native"
    set $P1875, $P108
.annotate 'line', 966
  # rx subcapture "sym"
    set_addr $I10, rxcap_1878_fail
    rx1876_cur."!mark_push"(0, rx1876_pos, $I10)
  # rx literal  "native"
    add $I11, rx1876_pos, 6
    gt $I11, rx1876_eos, rx1876_fail
    sub $I11, rx1876_pos, rx1876_off
    substr $S10, rx1876_tgt, $I11, 6
    ne $S10, "native", rx1876_fail
    add rx1876_pos, 6
    set_addr $I10, rxcap_1878_fail
    ($I12, $I11) = rx1876_cur."!mark_peek"($I10)
    rx1876_cur."!cursor_pos"($I11)
    ($P10) = rx1876_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1876_pos, "")
    rx1876_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1878_done
  rxcap_1878_fail:
    goto rx1876_fail
  rxcap_1878_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1876_cur."!cursor_pos"(rx1876_pos)
    $P10 = rx1876_cur."package_def"()
    unless $P10, rx1876_fail
    rx1876_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1876_pos = $P10."pos"()
.annotate 'line', 963
  # rx pass
    rx1876_cur."!cursor_pass"(rx1876_pos, "package_declarator:sym<native>")
    if_null rx1876_debug, debug_1343
    rx1876_cur."!cursor_debug"("PASS", "package_declarator:sym<native>", " at pos=", rx1876_pos)
  debug_1343:
    .return (rx1876_cur)
  rx1876_restart:
    if_null rx1876_debug, debug_1344
    rx1876_cur."!cursor_debug"("NEXT", "package_declarator:sym<native>")
  debug_1344:
  rx1876_fail:
    (rx1876_rep, rx1876_pos, $I10, $P10) = rx1876_cur."!mark_fail"(0)
    lt rx1876_pos, -1, rx1876_done
    eq rx1876_pos, -1, rx1876_fail
    jump $I10
  rx1876_done:
    rx1876_cur."!cursor_fail"()
    if_null rx1876_debug, debug_1345
    rx1876_cur."!cursor_debug"("FAIL", "package_declarator:sym<native>")
  debug_1345:
    .return (rx1876_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<native>"  :subid("174_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 963
    $P109 = self."!PREFIX__!subrule"("package_def", "native")
    new $P110, "ResizablePMCArray"
    push $P110, $P109
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<stub>"  :subid("175_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 969
    new $P103, "Undef"
    set $P1881, $P103
    .lex "$*OUTERPACKAGE", $P1881
.annotate 'line', 970
    new $P104, "Undef"
    set $P1882, $P104
    .lex "$*PKGDECL", $P1882
.annotate 'line', 968
    .local string rx1883_tgt
    .local int rx1883_pos
    .local int rx1883_off
    .local int rx1883_eos
    .local int rx1883_rep
    .local pmc rx1883_cur
    .local pmc rx1883_debug
    (rx1883_cur, rx1883_pos, rx1883_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1883_cur
    .local pmc match
    .lex "$/", match
    length rx1883_eos, rx1883_tgt
    gt rx1883_pos, rx1883_eos, rx1883_done
    set rx1883_off, 0
    lt rx1883_pos, 2, rx1883_start
    sub rx1883_off, rx1883_pos, 1
    substr rx1883_tgt, rx1883_tgt, rx1883_off
  rx1883_start:
    eq $I10, 1, rx1883_restart
    if_null rx1883_debug, debug_1346
    rx1883_cur."!cursor_debug"("START", "package_declarator:sym<stub>")
  debug_1346:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1884_done
    goto rxscan1884_scan
  rxscan1884_loop:
    (rx1883_pos) = rx1883_cur."from"()
    inc rx1883_pos
    rx1883_cur."!cursor_from"(rx1883_pos)
    ge rx1883_pos, rx1883_eos, rxscan1884_done
  rxscan1884_scan:
    set_addr $I10, rxscan1884_loop
    rx1883_cur."!mark_push"(0, rx1883_pos, $I10)
  rxscan1884_done:
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
.annotate 'line', 969
    rx1883_cur."!cursor_pos"(rx1883_pos)
    find_dynamic_lex $P108, "$*PACKAGE"
    unless_null $P108, vivify_1347
    get_hll_global $P106, "GLOBAL"
    get_who $P107, $P106
    set $P108, $P107["$PACKAGE"]
    unless_null $P108, vivify_1348
    die "Contextual $*PACKAGE not found"
  vivify_1348:
  vivify_1347:
    set $P1881, $P108
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
.annotate 'line', 970
    rx1883_cur."!cursor_pos"(rx1883_pos)
    new $P110, "String"
    assign $P110, "stub"
    set $P1882, $P110
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
.annotate 'line', 971
  # rx subcapture "sym"
    set_addr $I10, rxcap_1885_fail
    rx1883_cur."!mark_push"(0, rx1883_pos, $I10)
  # rx literal  "stub"
    add $I11, rx1883_pos, 4
    gt $I11, rx1883_eos, rx1883_fail
    sub $I11, rx1883_pos, rx1883_off
    substr $S10, rx1883_tgt, $I11, 4
    ne $S10, "stub", rx1883_fail
    add rx1883_pos, 4
    set_addr $I10, rxcap_1885_fail
    ($I12, $I11) = rx1883_cur."!mark_peek"($I10)
    rx1883_cur."!cursor_pos"($I11)
    ($P10) = rx1883_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1883_pos, "")
    rx1883_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1885_done
  rxcap_1885_fail:
    goto rx1883_fail
  rxcap_1885_done:
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."name"()
    unless $P10, rx1883_fail
    rx1883_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1883_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
.annotate 'line', 972
  # rx literal  "metaclass"
    add $I11, rx1883_pos, 9
    gt $I11, rx1883_eos, rx1883_fail
    sub $I11, rx1883_pos, rx1883_off
    substr $S10, rx1883_tgt, $I11, 9
    ne $S10, "metaclass", rx1883_fail
    add rx1883_pos, 9
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."name"()
    unless $P10, rx1883_fail
    rx1883_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("metaclass")
    rx1883_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
.annotate 'line', 973
  # rx literal  "{"
    add $I11, rx1883_pos, 1
    gt $I11, rx1883_eos, rx1883_fail
    sub $I11, rx1883_pos, rx1883_off
    ord $I11, rx1883_tgt, $I11
    ne $I11, 123, rx1883_fail
    add rx1883_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
  # rx literal  "..."
    add $I11, rx1883_pos, 3
    gt $I11, rx1883_eos, rx1883_fail
    sub $I11, rx1883_pos, rx1883_off
    substr $S10, rx1883_tgt, $I11, 3
    ne $S10, "...", rx1883_fail
    add rx1883_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1883_pos, 1
    gt $I11, rx1883_eos, rx1883_fail
    sub $I11, rx1883_pos, rx1883_off
    ord $I11, rx1883_tgt, $I11
    ne $I11, 125, rx1883_fail
    add rx1883_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1883_cur."!cursor_pos"(rx1883_pos)
    $P10 = rx1883_cur."ws"()
    unless $P10, rx1883_fail
    rx1883_pos = $P10."pos"()
.annotate 'line', 968
  # rx pass
    rx1883_cur."!cursor_pass"(rx1883_pos, "package_declarator:sym<stub>")
    if_null rx1883_debug, debug_1349
    rx1883_cur."!cursor_debug"("PASS", "package_declarator:sym<stub>", " at pos=", rx1883_pos)
  debug_1349:
    .return (rx1883_cur)
  rx1883_restart:
    if_null rx1883_debug, debug_1350
    rx1883_cur."!cursor_debug"("NEXT", "package_declarator:sym<stub>")
  debug_1350:
  rx1883_fail:
    (rx1883_rep, rx1883_pos, $I10, $P10) = rx1883_cur."!mark_fail"(0)
    lt rx1883_pos, -1, rx1883_done
    eq rx1883_pos, -1, rx1883_fail
    jump $I10
  rx1883_done:
    rx1883_cur."!cursor_fail"()
    if_null rx1883_debug, debug_1351
    rx1883_cur."!cursor_debug"("FAIL", "package_declarator:sym<stub>")
  debug_1351:
    .return (rx1883_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<stub>"  :subid("176_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 968
    $P119 = self."!PREFIX__!subrule"("ws", "")
    new $P120, "ResizablePMCArray"
    push $P120, $P119
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_def"  :subid("177_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 976
    .const 'Sub' $P1893 = "578_1335114138.94729" 
    capture_lex $P1893
.annotate 'line', 977
    new $P103, "Undef"
    set $P1888, $P103
    .lex "$*PACKAGE", $P1888
.annotate 'line', 976
    .local string rx1889_tgt
    .local int rx1889_pos
    .local int rx1889_off
    .local int rx1889_eos
    .local int rx1889_rep
    .local pmc rx1889_cur
    .local pmc rx1889_debug
    (rx1889_cur, rx1889_pos, rx1889_tgt, $I10) = self."!cursor_start"()
    rx1889_cur."!cursor_caparray"("repr", "parent", "role")
    .lex unicode:"$\x{a2}", rx1889_cur
    .local pmc match
    .lex "$/", match
    length rx1889_eos, rx1889_tgt
    gt rx1889_pos, rx1889_eos, rx1889_done
    set rx1889_off, 0
    lt rx1889_pos, 2, rx1889_start
    sub rx1889_off, rx1889_pos, 1
    substr rx1889_tgt, rx1889_tgt, rx1889_off
  rx1889_start:
    eq $I10, 1, rx1889_restart
    if_null rx1889_debug, debug_1352
    rx1889_cur."!cursor_debug"("START", "package_def")
  debug_1352:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1890_done
    goto rxscan1890_scan
  rxscan1890_loop:
    (rx1889_pos) = rx1889_cur."from"()
    inc rx1889_pos
    rx1889_cur."!cursor_from"(rx1889_pos)
    ge rx1889_pos, rx1889_eos, rxscan1890_done
  rxscan1890_scan:
    set_addr $I10, rxscan1890_loop
    rx1889_cur."!mark_push"(0, rx1889_pos, $I10)
  rxscan1890_done:
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
.annotate 'line', 977
    rx1889_cur."!cursor_pos"(rx1889_pos)
    set $P107, $P1888
    unless_null $P107, vivify_1353
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$PACKAGE"]
    unless_null $P107, vivify_1354
    die "Contextual $*PACKAGE not found"
  vivify_1354:
  vivify_1353:
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
.annotate 'line', 979
  # rx subrule "name" subtype=capture negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."name"()
    unless $P10, rx1889_fail
    rx1889_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1889_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
.annotate 'line', 980
  # rx rxquantr1891 ** 0..1
    set_addr $I10, rxquantr1891_done
    rx1889_cur."!mark_push"(0, rx1889_pos, $I10)
  rxquantr1891_loop:
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx1889_pos, 2
    gt $I11, rx1889_eos, rx1889_fail
    sub $I11, rx1889_pos, rx1889_off
    substr $S10, rx1889_tgt, $I11, 2
    ne $S10, "is", rx1889_fail
    add rx1889_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx literal  "repr("
    add $I11, rx1889_pos, 5
    gt $I11, rx1889_eos, rx1889_fail
    sub $I11, rx1889_pos, rx1889_off
    substr $S10, rx1889_tgt, $I11, 5
    ne $S10, "repr(", rx1889_fail
    add rx1889_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."quote_EXPR"()
    unless $P10, rx1889_fail
    rx1889_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("repr")
    rx1889_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1889_pos, 1
    gt $I11, rx1889_eos, rx1889_fail
    sub $I11, rx1889_pos, rx1889_off
    ord $I11, rx1889_tgt, $I11
    ne $I11, 41, rx1889_fail
    add rx1889_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
    set_addr $I10, rxquantr1891_done
    (rx1889_rep) = rx1889_cur."!mark_commit"($I10)
  rxquantr1891_done:
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
.annotate 'line', 982
    rx1889_cur."!cursor_pos"(rx1889_pos)
    find_lex $P116, unicode:"$\x{a2}"
    $P117 = $P116."MATCH"()
    store_lex "$/", $P117
    .const 'Sub' $P1893 = "578_1335114138.94729" 
    capture_lex $P1893
    $P119 = $P1893()
.annotate 'line', 1008
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
.annotate 'line', 1010
  # rx rxquantr1926 ** 0..1
    set_addr $I10, rxquantr1926_done
    rx1889_cur."!mark_push"(0, rx1889_pos, $I10)
  rxquantr1926_loop:
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx1889_pos, 2
    gt $I11, rx1889_eos, rx1889_fail
    sub $I11, rx1889_pos, rx1889_off
    substr $S10, rx1889_tgt, $I11, 2
    ne $S10, "is", rx1889_fail
    add rx1889_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."name"()
    unless $P10, rx1889_fail
    rx1889_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parent")
    rx1889_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
    set_addr $I10, rxquantr1926_done
    (rx1889_rep) = rx1889_cur."!mark_commit"($I10)
  rxquantr1926_done:
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
.annotate 'line', 1011
  # rx rxquantr1927 ** 0..*
    set_addr $I10, rxquantr1927_done
    rx1889_cur."!mark_push"(0, rx1889_pos, $I10)
  rxquantr1927_loop:
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx literal  "does"
    add $I11, rx1889_pos, 4
    gt $I11, rx1889_eos, rx1889_fail
    sub $I11, rx1889_pos, rx1889_off
    substr $S10, rx1889_tgt, $I11, 4
    ne $S10, "does", rx1889_fail
    add rx1889_pos, 4
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."name"()
    unless $P10, rx1889_fail
    rx1889_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("role")
    rx1889_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
    set_addr $I10, rxquantr1927_done
    (rx1889_rep) = rx1889_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1927_done
    rx1889_cur."!mark_push"(rx1889_rep, rx1889_pos, $I10)
    goto rxquantr1927_loop
  rxquantr1927_done:
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  alt1928_0:
.annotate 'line', 1012
    set_addr $I10, alt1928_1
    rx1889_cur."!mark_push"(0, rx1889_pos, $I10)
.annotate 'line', 1013
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx1889_pos, 1
    gt $I11, rx1889_eos, rx1889_fail
    sub $I11, rx1889_pos, rx1889_off
    ord $I11, rx1889_tgt, $I11
    ne $I11, 59, rx1889_fail
    add rx1889_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx subrule "comp_unit" subtype=capture negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."comp_unit"()
    unless $P10, rx1889_fail
    rx1889_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("comp_unit")
    rx1889_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
    goto alt1928_end
  alt1928_1:
    set_addr $I10, alt1928_2
    rx1889_cur."!mark_push"(0, rx1889_pos, $I10)
.annotate 'line', 1014
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1889_pos, rx1889_off
    substr $S10, rx1889_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1889_fail
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx subrule "block" subtype=capture negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."block"()
    unless $P10, rx1889_fail
    rx1889_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1889_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
    goto alt1928_end
  alt1928_2:
.annotate 'line', 1015
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."panic"("Malformed package declaration")
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
  alt1928_end:
.annotate 'line', 1016
  # rx subrule "ws" subtype=method negate=
    rx1889_cur."!cursor_pos"(rx1889_pos)
    $P10 = rx1889_cur."ws"()
    unless $P10, rx1889_fail
    rx1889_pos = $P10."pos"()
.annotate 'line', 976
  # rx pass
    rx1889_cur."!cursor_pass"(rx1889_pos, "package_def")
    if_null rx1889_debug, debug_1422
    rx1889_cur."!cursor_debug"("PASS", "package_def", " at pos=", rx1889_pos)
  debug_1422:
    .return (rx1889_cur)
  rx1889_restart:
    if_null rx1889_debug, debug_1423
    rx1889_cur."!cursor_debug"("NEXT", "package_def")
  debug_1423:
  rx1889_fail:
    (rx1889_rep, rx1889_pos, $I10, $P10) = rx1889_cur."!mark_fail"(0)
    lt rx1889_pos, -1, rx1889_done
    eq rx1889_pos, -1, rx1889_fail
    jump $I10
  rx1889_done:
    rx1889_cur."!cursor_fail"()
    if_null rx1889_debug, debug_1424
    rx1889_cur."!cursor_debug"("FAIL", "package_def")
  debug_1424:
    .return (rx1889_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1892"  :anon :subid("578_1335114138.94729") :outer("177_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 985
    $P1895 = root_new ['parrot';'Hash']
    set $P1894, $P1895
    .lex "%args", $P1894
.annotate 'line', 982
    set $P1896, $P1894
    unless_null $P1896, vivify_1355
    $P1896 = root_new ['parrot';'Hash']
  vivify_1355:
.annotate 'line', 986
    find_lex $P1897, "$/"
    unless_null $P1897, vivify_1356
    $P1897 = root_new ['parrot';'Hash']
  vivify_1356:
    set $P118, $P1897["name"]
    unless_null $P118, vivify_1357
    new $P118, "Undef"
  vivify_1357:
    set $S100, $P118
    new $P119, 'String'
    set $P119, $S100
    set $P1898, $P1894
    unless_null $P1898, vivify_1358
    $P1898 = root_new ['parrot';'Hash']
    set $P1894, $P1898
  vivify_1358:
    set $P1898["name"], $P119
.annotate 'line', 987
    find_lex $P1900, "$/"
    unless_null $P1900, vivify_1359
    $P1900 = root_new ['parrot';'Hash']
  vivify_1359:
    set $P118, $P1900["repr"]
    unless_null $P118, vivify_1360
    new $P118, "Undef"
  vivify_1360:
    unless $P118, if_1899_end
.annotate 'line', 988
    new $P119, "Float"
    assign $P119, 0
    set $I100, $P119
    new $P120, "Float"
    assign $P120, 0
    set $I101, $P120
    find_lex $P1901, "$/"
    unless_null $P1901, vivify_1361
    $P1901 = root_new ['parrot';'Hash']
  vivify_1361:
    set $P1902, $P1901["repr"]
    unless_null $P1902, vivify_1362
    $P1902 = root_new ['parrot';'ResizablePMCArray']
  vivify_1362:
    set $P1903, $P1902[$I101]
    unless_null $P1903, vivify_1363
    $P1903 = root_new ['parrot';'Hash']
  vivify_1363:
    set $P1904, $P1903["quote_delimited"]
    unless_null $P1904, vivify_1364
    $P1904 = root_new ['parrot';'Hash']
  vivify_1364:
    set $P1905, $P1904["quote_atom"]
    unless_null $P1905, vivify_1365
    $P1905 = root_new ['parrot';'ResizablePMCArray']
  vivify_1365:
    set $P121, $P1905[$I100]
    unless_null $P121, vivify_1366
    new $P121, "Undef"
  vivify_1366:
    set $S100, $P121
    new $P122, 'String'
    set $P122, $S100
    set $P1906, $P1894
    unless_null $P1906, vivify_1367
    $P1906 = root_new ['parrot';'Hash']
    set $P1894, $P1906
  vivify_1367:
    set $P1906["repr"], $P122
  if_1899_end:
.annotate 'line', 990
    find_dynamic_lex $P120, "$*W"
    unless_null $P120, vivify_1368
    get_hll_global $P118, "GLOBAL"
    get_who $P119, $P118
    set $P120, $P119["$W"]
    unless_null $P120, vivify_1369
    die "Contextual $*W not found"
  vivify_1369:
  vivify_1368:
    find_dynamic_lex $P123, "$*PKGDECL"
    unless_null $P123, vivify_1370
    get_hll_global $P121, "GLOBAL"
    get_who $P122, $P121
    set $P123, $P122["$PKGDECL"]
    unless_null $P123, vivify_1371
    die "Contextual $*PKGDECL not found"
  vivify_1371:
  vivify_1370:
    find_dynamic_lex $P126, "%*HOW"
    unless_null $P126, vivify_1372
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["%HOW"]
    unless_null $P126, vivify_1373
    die "Contextual %*HOW not found"
  vivify_1373:
  vivify_1372:
    set $P127, $P126[$P123]
    unless_null $P127, vivify_1374
    new $P127, "Undef"
  vivify_1374:
    set $P1907, $P1894
    unless_null $P1907, vivify_1375
    $P1907 = root_new ['parrot';'Hash']
  vivify_1375:
    $P128 = $P120."pkg_create_mo"($P127, $P1907 :flat)
    store_dynamic_lex "$*PACKAGE", $P128
.annotate 'line', 993
    find_dynamic_lex $P122, "$*SCOPE"
    unless_null $P122, vivify_1376
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P122, $P121["$SCOPE"]
    unless_null $P122, vivify_1377
    die "Contextual $*SCOPE not found"
  vivify_1377:
  vivify_1376:
    set $S100, $P122
    iseq $I100, $S100, "our"
    unless $I100, unless_1909
    new $P119, 'Integer'
    set $P119, $I100
    goto unless_1909_end
  unless_1909:
    find_dynamic_lex $P125, "$*SCOPE"
    unless_null $P125, vivify_1378
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$SCOPE"]
    unless_null $P125, vivify_1379
    die "Contextual $*SCOPE not found"
  vivify_1379:
  vivify_1378:
    set $S101, $P125
    iseq $I101, $S101, ""
    new $P119, 'Integer'
    set $P119, $I101
  unless_1909_end:
    if $P119, if_1908
.annotate 'line', 999
    find_dynamic_lex $P130, "$*SCOPE"
    unless_null $P130, vivify_1380
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P130, $P129["$SCOPE"]
    unless_null $P130, vivify_1381
    die "Contextual $*SCOPE not found"
  vivify_1381:
  vivify_1380:
    set $S102, $P130
    iseq $I102, $S102, "my"
    if $I102, if_1918
.annotate 'line', 1006
    find_lex $P131, "$/"
    unless_null $P131, vivify_1382
    new $P131, "Undef"
  vivify_1382:
    $P132 = $P131."CURSOR"()
    find_dynamic_lex $P135, "$*SCOPE"
    unless_null $P135, vivify_1383
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$SCOPE"]
    unless_null $P135, vivify_1384
    die "Contextual $*SCOPE not found"
  vivify_1384:
  vivify_1383:
    concat $P136, $P135, " scoped packages are not supported"
    $P137 = $P132."panic"($P136)
.annotate 'line', 1005
    set $P127, $P137
.annotate 'line', 999
    goto if_1918_end
  if_1918:
.annotate 'line', 1000
    find_lex $P1920, "$/"
    unless_null $P1920, vivify_1385
    $P1920 = root_new ['parrot';'Hash']
  vivify_1385:
    set $P1921, $P1920["name"]
    unless_null $P1921, vivify_1386
    $P1921 = root_new ['parrot';'Hash']
  vivify_1386:
    set $P131, $P1921["identifier"]
    unless_null $P131, vivify_1387
    new $P131, "Undef"
  vivify_1387:
    set $N100, $P131
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_1919_end
.annotate 'line', 1001
    find_lex $P1922, "$/"
    unless_null $P1922, vivify_1388
    $P1922 = root_new ['parrot';'Hash']
  vivify_1388:
    set $P132, $P1922["name"]
    unless_null $P132, vivify_1389
    new $P132, "Undef"
  vivify_1389:
    $P133 = $P132."CURSOR"()
    $P133."panic"("A my scoped package cannot have a multi-part name yet")
  if_1919_end:
.annotate 'line', 1003
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_1390
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_1391
    die "Contextual $*W not found"
  vivify_1391:
  vivify_1390:
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_1392
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_1393
    die "Contextual $*W not found"
  vivify_1393:
  vivify_1392:
    $P137 = $P136."cur_lexpad"()
    new $P138, "Float"
    assign $P138, 0
    set $I103, $P138
    find_lex $P1923, "$/"
    unless_null $P1923, vivify_1394
    $P1923 = root_new ['parrot';'Hash']
  vivify_1394:
    set $P1924, $P1923["name"]
    unless_null $P1924, vivify_1395
    $P1924 = root_new ['parrot';'Hash']
  vivify_1395:
    set $P1925, $P1924["identifier"]
    unless_null $P1925, vivify_1396
    $P1925 = root_new ['parrot';'ResizablePMCArray']
  vivify_1396:
    set $P139, $P1925[$I103]
    unless_null $P139, vivify_1397
    new $P139, "Undef"
  vivify_1397:
    find_dynamic_lex $P142, "$*PACKAGE"
    unless_null $P142, vivify_1398
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$PACKAGE"]
    unless_null $P142, vivify_1399
    die "Contextual $*PACKAGE not found"
  vivify_1399:
  vivify_1398:
    $P143 = $P133."install_lexical_symbol"($P137, $P139, $P142)
.annotate 'line', 999
    set $P127, $P143
  if_1918_end:
    set $P118, $P127
.annotate 'line', 993
    goto if_1908_end
  if_1908:
.annotate 'line', 994
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_1400
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_1401
    die "Contextual $*W not found"
  vivify_1401:
  vivify_1400:
    find_dynamic_lex $P131, "$*OUTERPACKAGE"
    unless_null $P131, vivify_1402
    get_hll_global $P129, "GLOBAL"
    get_who $P130, $P129
    set $P131, $P130["$OUTERPACKAGE"]
    unless_null $P131, vivify_1403
    die "Contextual $*OUTERPACKAGE not found"
  vivify_1403:
  vivify_1402:
    find_lex $P1910, "$/"
    unless_null $P1910, vivify_1404
    $P1910 = root_new ['parrot';'Hash']
  vivify_1404:
    set $P1911, $P1910["name"]
    unless_null $P1911, vivify_1405
    $P1911 = root_new ['parrot';'Hash']
  vivify_1405:
    set $P132, $P1911["identifier"]
    unless_null $P132, vivify_1406
    new $P132, "Undef"
  vivify_1406:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_1407
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_1408
    die "Contextual $*PACKAGE not found"
  vivify_1408:
  vivify_1407:
    $P128."install_package_symbol"($P131, $P132, $P135)
.annotate 'line', 995
    find_lex $P1913, "$/"
    unless_null $P1913, vivify_1409
    $P1913 = root_new ['parrot';'Hash']
  vivify_1409:
    set $P1914, $P1913["name"]
    unless_null $P1914, vivify_1410
    $P1914 = root_new ['parrot';'Hash']
  vivify_1410:
    set $P127, $P1914["identifier"]
    unless_null $P127, vivify_1411
    new $P127, "Undef"
  vivify_1411:
    set $N100, $P127
    set $N101, 1
    iseq $I102, $N100, $N101
    if $I102, if_1912
    new $P126, 'Integer'
    set $P126, $I102
    goto if_1912_end
  if_1912:
.annotate 'line', 996
    find_dynamic_lex $P130, "$*W"
    unless_null $P130, vivify_1412
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P130, $P129["$W"]
    unless_null $P130, vivify_1413
    die "Contextual $*W not found"
  vivify_1413:
  vivify_1412:
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_1414
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_1415
    die "Contextual $*W not found"
  vivify_1415:
  vivify_1414:
    $P134 = $P133."cur_lexpad"()
    new $P135, "Float"
    assign $P135, 0
    set $I103, $P135
    find_lex $P1915, "$/"
    unless_null $P1915, vivify_1416
    $P1915 = root_new ['parrot';'Hash']
  vivify_1416:
    set $P1916, $P1915["name"]
    unless_null $P1916, vivify_1417
    $P1916 = root_new ['parrot';'Hash']
  vivify_1417:
    set $P1917, $P1916["identifier"]
    unless_null $P1917, vivify_1418
    $P1917 = root_new ['parrot';'ResizablePMCArray']
  vivify_1418:
    set $P136, $P1917[$I103]
    unless_null $P136, vivify_1419
    new $P136, "Undef"
  vivify_1419:
    find_dynamic_lex $P139, "$*PACKAGE"
    unless_null $P139, vivify_1420
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PACKAGE"]
    unless_null $P139, vivify_1421
    die "Contextual $*PACKAGE not found"
  vivify_1421:
  vivify_1420:
    $P140 = $P130."install_lexical_symbol"($P134, $P136, $P139)
.annotate 'line', 995
    set $P126, $P140
  if_1912_end:
.annotate 'line', 993
    set $P118, $P126
  if_1908_end:
.annotate 'line', 982
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_def"  :subid("178_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 976
    $P138 = self."!PREFIX__!subrule"("ws", "")
    new $P139, "ResizablePMCArray"
    push $P139, $P138
    .return ($P139)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator"  :subid("179_1335114138.94729")
    .param pmc param_1931
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1019
    .lex "self", param_1931
    $P103 = param_1931."!protoregex"("scope_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator"  :subid("180_1335114138.94729")
    .param pmc param_1933
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1019
    .lex "self", param_1933
    $P104 = param_1933."!PREFIX__!protoregex"("scope_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<my>"  :subid("181_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1020
    .local string rx1935_tgt
    .local int rx1935_pos
    .local int rx1935_off
    .local int rx1935_eos
    .local int rx1935_rep
    .local pmc rx1935_cur
    .local pmc rx1935_debug
    (rx1935_cur, rx1935_pos, rx1935_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1935_cur
    .local pmc match
    .lex "$/", match
    length rx1935_eos, rx1935_tgt
    gt rx1935_pos, rx1935_eos, rx1935_done
    set rx1935_off, 0
    lt rx1935_pos, 2, rx1935_start
    sub rx1935_off, rx1935_pos, 1
    substr rx1935_tgt, rx1935_tgt, rx1935_off
  rx1935_start:
    eq $I10, 1, rx1935_restart
    if_null rx1935_debug, debug_1425
    rx1935_cur."!cursor_debug"("START", "scope_declarator:sym<my>")
  debug_1425:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1936_done
    goto rxscan1936_scan
  rxscan1936_loop:
    (rx1935_pos) = rx1935_cur."from"()
    inc rx1935_pos
    rx1935_cur."!cursor_from"(rx1935_pos)
    ge rx1935_pos, rx1935_eos, rxscan1936_done
  rxscan1936_scan:
    set_addr $I10, rxscan1936_loop
    rx1935_cur."!mark_push"(0, rx1935_pos, $I10)
  rxscan1936_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1937_fail
    rx1935_cur."!mark_push"(0, rx1935_pos, $I10)
  # rx literal  "my"
    add $I11, rx1935_pos, 2
    gt $I11, rx1935_eos, rx1935_fail
    sub $I11, rx1935_pos, rx1935_off
    substr $S10, rx1935_tgt, $I11, 2
    ne $S10, "my", rx1935_fail
    add rx1935_pos, 2
    set_addr $I10, rxcap_1937_fail
    ($I12, $I11) = rx1935_cur."!mark_peek"($I10)
    rx1935_cur."!cursor_pos"($I11)
    ($P10) = rx1935_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1935_pos, "")
    rx1935_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1937_done
  rxcap_1937_fail:
    goto rx1935_fail
  rxcap_1937_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1935_cur."!cursor_pos"(rx1935_pos)
    $P10 = rx1935_cur."scoped"("my")
    unless $P10, rx1935_fail
    rx1935_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1935_pos = $P10."pos"()
  # rx pass
    rx1935_cur."!cursor_pass"(rx1935_pos, "scope_declarator:sym<my>")
    if_null rx1935_debug, debug_1426
    rx1935_cur."!cursor_debug"("PASS", "scope_declarator:sym<my>", " at pos=", rx1935_pos)
  debug_1426:
    .return (rx1935_cur)
  rx1935_restart:
    if_null rx1935_debug, debug_1427
    rx1935_cur."!cursor_debug"("NEXT", "scope_declarator:sym<my>")
  debug_1427:
  rx1935_fail:
    (rx1935_rep, rx1935_pos, $I10, $P10) = rx1935_cur."!mark_fail"(0)
    lt rx1935_pos, -1, rx1935_done
    eq rx1935_pos, -1, rx1935_fail
    jump $I10
  rx1935_done:
    rx1935_cur."!cursor_fail"()
    if_null rx1935_debug, debug_1428
    rx1935_cur."!cursor_debug"("FAIL", "scope_declarator:sym<my>")
  debug_1428:
    .return (rx1935_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<my>"  :subid("182_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1020
    $P103 = self."!PREFIX__!subrule"("scoped", "my")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<our>"  :subid("183_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1021
    .local string rx1940_tgt
    .local int rx1940_pos
    .local int rx1940_off
    .local int rx1940_eos
    .local int rx1940_rep
    .local pmc rx1940_cur
    .local pmc rx1940_debug
    (rx1940_cur, rx1940_pos, rx1940_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1940_cur
    .local pmc match
    .lex "$/", match
    length rx1940_eos, rx1940_tgt
    gt rx1940_pos, rx1940_eos, rx1940_done
    set rx1940_off, 0
    lt rx1940_pos, 2, rx1940_start
    sub rx1940_off, rx1940_pos, 1
    substr rx1940_tgt, rx1940_tgt, rx1940_off
  rx1940_start:
    eq $I10, 1, rx1940_restart
    if_null rx1940_debug, debug_1429
    rx1940_cur."!cursor_debug"("START", "scope_declarator:sym<our>")
  debug_1429:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1941_done
    goto rxscan1941_scan
  rxscan1941_loop:
    (rx1940_pos) = rx1940_cur."from"()
    inc rx1940_pos
    rx1940_cur."!cursor_from"(rx1940_pos)
    ge rx1940_pos, rx1940_eos, rxscan1941_done
  rxscan1941_scan:
    set_addr $I10, rxscan1941_loop
    rx1940_cur."!mark_push"(0, rx1940_pos, $I10)
  rxscan1941_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1942_fail
    rx1940_cur."!mark_push"(0, rx1940_pos, $I10)
  # rx literal  "our"
    add $I11, rx1940_pos, 3
    gt $I11, rx1940_eos, rx1940_fail
    sub $I11, rx1940_pos, rx1940_off
    substr $S10, rx1940_tgt, $I11, 3
    ne $S10, "our", rx1940_fail
    add rx1940_pos, 3
    set_addr $I10, rxcap_1942_fail
    ($I12, $I11) = rx1940_cur."!mark_peek"($I10)
    rx1940_cur."!cursor_pos"($I11)
    ($P10) = rx1940_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1940_pos, "")
    rx1940_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1942_done
  rxcap_1942_fail:
    goto rx1940_fail
  rxcap_1942_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1940_cur."!cursor_pos"(rx1940_pos)
    $P10 = rx1940_cur."scoped"("our")
    unless $P10, rx1940_fail
    rx1940_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1940_pos = $P10."pos"()
  # rx pass
    rx1940_cur."!cursor_pass"(rx1940_pos, "scope_declarator:sym<our>")
    if_null rx1940_debug, debug_1430
    rx1940_cur."!cursor_debug"("PASS", "scope_declarator:sym<our>", " at pos=", rx1940_pos)
  debug_1430:
    .return (rx1940_cur)
  rx1940_restart:
    if_null rx1940_debug, debug_1431
    rx1940_cur."!cursor_debug"("NEXT", "scope_declarator:sym<our>")
  debug_1431:
  rx1940_fail:
    (rx1940_rep, rx1940_pos, $I10, $P10) = rx1940_cur."!mark_fail"(0)
    lt rx1940_pos, -1, rx1940_done
    eq rx1940_pos, -1, rx1940_fail
    jump $I10
  rx1940_done:
    rx1940_cur."!cursor_fail"()
    if_null rx1940_debug, debug_1432
    rx1940_cur."!cursor_debug"("FAIL", "scope_declarator:sym<our>")
  debug_1432:
    .return (rx1940_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<our>"  :subid("184_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1021
    $P103 = self."!PREFIX__!subrule"("scoped", "our")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<has>"  :subid("185_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1022
    .local string rx1945_tgt
    .local int rx1945_pos
    .local int rx1945_off
    .local int rx1945_eos
    .local int rx1945_rep
    .local pmc rx1945_cur
    .local pmc rx1945_debug
    (rx1945_cur, rx1945_pos, rx1945_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1945_cur
    .local pmc match
    .lex "$/", match
    length rx1945_eos, rx1945_tgt
    gt rx1945_pos, rx1945_eos, rx1945_done
    set rx1945_off, 0
    lt rx1945_pos, 2, rx1945_start
    sub rx1945_off, rx1945_pos, 1
    substr rx1945_tgt, rx1945_tgt, rx1945_off
  rx1945_start:
    eq $I10, 1, rx1945_restart
    if_null rx1945_debug, debug_1433
    rx1945_cur."!cursor_debug"("START", "scope_declarator:sym<has>")
  debug_1433:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1946_done
    goto rxscan1946_scan
  rxscan1946_loop:
    (rx1945_pos) = rx1945_cur."from"()
    inc rx1945_pos
    rx1945_cur."!cursor_from"(rx1945_pos)
    ge rx1945_pos, rx1945_eos, rxscan1946_done
  rxscan1946_scan:
    set_addr $I10, rxscan1946_loop
    rx1945_cur."!mark_push"(0, rx1945_pos, $I10)
  rxscan1946_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1947_fail
    rx1945_cur."!mark_push"(0, rx1945_pos, $I10)
  # rx literal  "has"
    add $I11, rx1945_pos, 3
    gt $I11, rx1945_eos, rx1945_fail
    sub $I11, rx1945_pos, rx1945_off
    substr $S10, rx1945_tgt, $I11, 3
    ne $S10, "has", rx1945_fail
    add rx1945_pos, 3
    set_addr $I10, rxcap_1947_fail
    ($I12, $I11) = rx1945_cur."!mark_peek"($I10)
    rx1945_cur."!cursor_pos"($I11)
    ($P10) = rx1945_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1945_pos, "")
    rx1945_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1947_done
  rxcap_1947_fail:
    goto rx1945_fail
  rxcap_1947_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1945_cur."!cursor_pos"(rx1945_pos)
    $P10 = rx1945_cur."scoped"("has")
    unless $P10, rx1945_fail
    rx1945_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1945_pos = $P10."pos"()
  # rx pass
    rx1945_cur."!cursor_pass"(rx1945_pos, "scope_declarator:sym<has>")
    if_null rx1945_debug, debug_1434
    rx1945_cur."!cursor_debug"("PASS", "scope_declarator:sym<has>", " at pos=", rx1945_pos)
  debug_1434:
    .return (rx1945_cur)
  rx1945_restart:
    if_null rx1945_debug, debug_1435
    rx1945_cur."!cursor_debug"("NEXT", "scope_declarator:sym<has>")
  debug_1435:
  rx1945_fail:
    (rx1945_rep, rx1945_pos, $I10, $P10) = rx1945_cur."!mark_fail"(0)
    lt rx1945_pos, -1, rx1945_done
    eq rx1945_pos, -1, rx1945_fail
    jump $I10
  rx1945_done:
    rx1945_cur."!cursor_fail"()
    if_null rx1945_debug, debug_1436
    rx1945_cur."!cursor_debug"("FAIL", "scope_declarator:sym<has>")
  debug_1436:
    .return (rx1945_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<has>"  :subid("186_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1022
    $P103 = self."!PREFIX__!subrule"("scoped", "has")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scoped"  :subid("187_1335114138.94729") :method :outer("571_1335114138.94729")
    .param pmc param_1950
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1024
    .lex "$*SCOPE", param_1950
    .local string rx1951_tgt
    .local int rx1951_pos
    .local int rx1951_off
    .local int rx1951_eos
    .local int rx1951_rep
    .local pmc rx1951_cur
    .local pmc rx1951_debug
    (rx1951_cur, rx1951_pos, rx1951_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1951_cur
    .local pmc match
    .lex "$/", match
    length rx1951_eos, rx1951_tgt
    gt rx1951_pos, rx1951_eos, rx1951_done
    set rx1951_off, 0
    lt rx1951_pos, 2, rx1951_start
    sub rx1951_off, rx1951_pos, 1
    substr rx1951_tgt, rx1951_tgt, rx1951_off
  rx1951_start:
    eq $I10, 1, rx1951_restart
    if_null rx1951_debug, debug_1437
    rx1951_cur."!cursor_debug"("START", "scoped")
  debug_1437:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1952_done
    goto rxscan1952_scan
  rxscan1952_loop:
    (rx1951_pos) = rx1951_cur."from"()
    inc rx1951_pos
    rx1951_cur."!cursor_from"(rx1951_pos)
    ge rx1951_pos, rx1951_eos, rxscan1952_done
  rxscan1952_scan:
    set_addr $I10, rxscan1952_loop
    rx1951_cur."!mark_push"(0, rx1951_pos, $I10)
  rxscan1952_done:
  alt1953_0:
    set_addr $I10, alt1953_1
    rx1951_cur."!mark_push"(0, rx1951_pos, $I10)
.annotate 'line', 1025
  # rx subrule "ws" subtype=method negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."ws"()
    unless $P10, rx1951_fail
    rx1951_pos = $P10."pos"()
  # rx subrule "declarator" subtype=capture negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."declarator"()
    unless $P10, rx1951_fail
    rx1951_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx1951_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."ws"()
    unless $P10, rx1951_fail
    rx1951_pos = $P10."pos"()
    goto alt1953_end
  alt1953_1:
    set_addr $I10, alt1953_2
    rx1951_cur."!mark_push"(0, rx1951_pos, $I10)
.annotate 'line', 1026
  # rx subrule "ws" subtype=method negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."ws"()
    unless $P10, rx1951_fail
    rx1951_pos = $P10."pos"()
  # rx subrule "multi_declarator" subtype=capture negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."multi_declarator"()
    unless $P10, rx1951_fail
    rx1951_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx1951_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."ws"()
    unless $P10, rx1951_fail
    rx1951_pos = $P10."pos"()
    goto alt1953_end
  alt1953_2:
.annotate 'line', 1027
  # rx subrule "ws" subtype=method negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."ws"()
    unless $P10, rx1951_fail
    rx1951_pos = $P10."pos"()
  # rx subrule "package_declarator" subtype=capture negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."package_declarator"()
    unless $P10, rx1951_fail
    rx1951_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx1951_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1951_cur."!cursor_pos"(rx1951_pos)
    $P10 = rx1951_cur."ws"()
    unless $P10, rx1951_fail
    rx1951_pos = $P10."pos"()
  alt1953_end:
.annotate 'line', 1024
  # rx pass
    rx1951_cur."!cursor_pass"(rx1951_pos, "scoped")
    if_null rx1951_debug, debug_1438
    rx1951_cur."!cursor_debug"("PASS", "scoped", " at pos=", rx1951_pos)
  debug_1438:
    .return (rx1951_cur)
  rx1951_restart:
    if_null rx1951_debug, debug_1439
    rx1951_cur."!cursor_debug"("NEXT", "scoped")
  debug_1439:
  rx1951_fail:
    (rx1951_rep, rx1951_pos, $I10, $P10) = rx1951_cur."!mark_fail"(0)
    lt rx1951_pos, -1, rx1951_done
    eq rx1951_pos, -1, rx1951_fail
    jump $I10
  rx1951_done:
    rx1951_cur."!cursor_fail"()
    if_null rx1951_debug, debug_1440
    rx1951_cur."!cursor_debug"("FAIL", "scoped")
  debug_1440:
    .return (rx1951_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scoped"  :subid("188_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1024
    $P109 = self."!PREFIX__!subrule"("ws", "")
    $P110 = self."!PREFIX__!subrule"("ws", "")
    $P111 = self."!PREFIX__!subrule"("ws", "")
    new $P112, "ResizablePMCArray"
    push $P112, $P109
    push $P112, $P110
    push $P112, $P111
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "typename"  :subid("189_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1030
    .const 'Sub' $P1959 = "579_1335114138.94729" 
    capture_lex $P1959
    .local string rx1956_tgt
    .local int rx1956_pos
    .local int rx1956_off
    .local int rx1956_eos
    .local int rx1956_rep
    .local pmc rx1956_cur
    .local pmc rx1956_debug
    (rx1956_cur, rx1956_pos, rx1956_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1956_cur
    .local pmc match
    .lex "$/", match
    length rx1956_eos, rx1956_tgt
    gt rx1956_pos, rx1956_eos, rx1956_done
    set rx1956_off, 0
    lt rx1956_pos, 2, rx1956_start
    sub rx1956_off, rx1956_pos, 1
    substr rx1956_tgt, rx1956_tgt, rx1956_off
  rx1956_start:
    eq $I10, 1, rx1956_restart
    if_null rx1956_debug, debug_1441
    rx1956_cur."!cursor_debug"("START", "typename")
  debug_1441:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1957_done
    goto rxscan1957_scan
  rxscan1957_loop:
    (rx1956_pos) = rx1956_cur."from"()
    inc rx1956_pos
    rx1956_cur."!cursor_from"(rx1956_pos)
    ge rx1956_pos, rx1956_eos, rxscan1957_done
  rxscan1957_scan:
    set_addr $I10, rxscan1957_loop
    rx1956_cur."!mark_push"(0, rx1956_pos, $I10)
  rxscan1957_done:
.annotate 'line', 1031
  # rx subrule "name" subtype=capture negate=
    rx1956_cur."!cursor_pos"(rx1956_pos)
    $P10 = rx1956_cur."name"()
    unless $P10, rx1956_fail
    rx1956_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1956_pos = $P10."pos"()
.annotate 'line', 1032
    rx1956_cur."!cursor_pos"(rx1956_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P1959 = "579_1335114138.94729" 
    capture_lex $P1959
    $P105 = $P1959()
    unless $P105, rx1956_fail
.annotate 'line', 1030
  # rx pass
    rx1956_cur."!cursor_pass"(rx1956_pos, "typename")
    if_null rx1956_debug, debug_1448
    rx1956_cur."!cursor_debug"("PASS", "typename", " at pos=", rx1956_pos)
  debug_1448:
    .return (rx1956_cur)
  rx1956_restart:
    if_null rx1956_debug, debug_1449
    rx1956_cur."!cursor_debug"("NEXT", "typename")
  debug_1449:
  rx1956_fail:
    (rx1956_rep, rx1956_pos, $I10, $P10) = rx1956_cur."!mark_fail"(0)
    lt rx1956_pos, -1, rx1956_done
    eq rx1956_pos, -1, rx1956_fail
    jump $I10
  rx1956_done:
    rx1956_cur."!cursor_fail"()
    if_null rx1956_debug, debug_1450
    rx1956_cur."!cursor_debug"("FAIL", "typename")
  debug_1450:
    .return (rx1956_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1958"  :anon :subid("579_1335114138.94729") :outer("189_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1032
    find_dynamic_lex $P107, "$*W"
    unless_null $P107, vivify_1442
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$W"]
    unless_null $P107, vivify_1443
    die "Contextual $*W not found"
  vivify_1443:
  vivify_1442:
    find_lex $P108, "$/"
    unless_null $P108, vivify_1444
    new $P108, "Undef"
  vivify_1444:
    find_lex $P1960, "$/"
    unless_null $P1960, vivify_1445
    $P1960 = root_new ['parrot';'Hash']
  vivify_1445:
    set $P1961, $P1960["name"]
    unless_null $P1961, vivify_1446
    $P1961 = root_new ['parrot';'Hash']
  vivify_1446:
    set $P109, $P1961["identifier"]
    unless_null $P109, vivify_1447
    new $P109, "Undef"
  vivify_1447:
    $P110 = $P107."known_sym"($P108, $P109)
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__typename"  :subid("190_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1030
    $P106 = self."!PREFIX__!subrule"("name", "")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "declarator"  :subid("191_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1035
    .local string rx1964_tgt
    .local int rx1964_pos
    .local int rx1964_off
    .local int rx1964_eos
    .local int rx1964_rep
    .local pmc rx1964_cur
    .local pmc rx1964_debug
    (rx1964_cur, rx1964_pos, rx1964_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1964_cur
    .local pmc match
    .lex "$/", match
    length rx1964_eos, rx1964_tgt
    gt rx1964_pos, rx1964_eos, rx1964_done
    set rx1964_off, 0
    lt rx1964_pos, 2, rx1964_start
    sub rx1964_off, rx1964_pos, 1
    substr rx1964_tgt, rx1964_tgt, rx1964_off
  rx1964_start:
    eq $I10, 1, rx1964_restart
    if_null rx1964_debug, debug_1451
    rx1964_cur."!cursor_debug"("START", "declarator")
  debug_1451:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1965_done
    goto rxscan1965_scan
  rxscan1965_loop:
    (rx1964_pos) = rx1964_cur."from"()
    inc rx1964_pos
    rx1964_cur."!cursor_from"(rx1964_pos)
    ge rx1964_pos, rx1964_eos, rxscan1965_done
  rxscan1965_scan:
    set_addr $I10, rxscan1965_loop
    rx1964_cur."!mark_push"(0, rx1964_pos, $I10)
  rxscan1965_done:
  alt1966_0:
    set_addr $I10, alt1966_1
    rx1964_cur."!mark_push"(0, rx1964_pos, $I10)
.annotate 'line', 1036
  # rx subrule "variable_declarator" subtype=capture negate=
    rx1964_cur."!cursor_pos"(rx1964_pos)
    $P10 = rx1964_cur."variable_declarator"()
    unless $P10, rx1964_fail
    rx1964_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable_declarator")
    rx1964_pos = $P10."pos"()
    goto alt1966_end
  alt1966_1:
.annotate 'line', 1037
  # rx subrule "routine_declarator" subtype=capture negate=
    rx1964_cur."!cursor_pos"(rx1964_pos)
    $P10 = rx1964_cur."routine_declarator"()
    unless $P10, rx1964_fail
    rx1964_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx1964_pos = $P10."pos"()
  alt1966_end:
.annotate 'line', 1035
  # rx pass
    rx1964_cur."!cursor_pass"(rx1964_pos, "declarator")
    if_null rx1964_debug, debug_1452
    rx1964_cur."!cursor_debug"("PASS", "declarator", " at pos=", rx1964_pos)
  debug_1452:
    .return (rx1964_cur)
  rx1964_restart:
    if_null rx1964_debug, debug_1453
    rx1964_cur."!cursor_debug"("NEXT", "declarator")
  debug_1453:
  rx1964_fail:
    (rx1964_rep, rx1964_pos, $I10, $P10) = rx1964_cur."!mark_fail"(0)
    lt rx1964_pos, -1, rx1964_done
    eq rx1964_pos, -1, rx1964_fail
    jump $I10
  rx1964_done:
    rx1964_cur."!cursor_fail"()
    if_null rx1964_debug, debug_1454
    rx1964_cur."!cursor_debug"("FAIL", "declarator")
  debug_1454:
    .return (rx1964_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__declarator"  :subid("192_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1035
    $P103 = self."!PREFIX__!subrule"("routine_declarator", "")
    $P104 = self."!PREFIX__!subrule"("variable_declarator", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable_declarator"  :subid("193_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1040
    .const 'Sub' $P1975 = "580_1335114138.94729" 
    capture_lex $P1975
.annotate 'line', 1042
    new $P103, "Undef"
    set $P1969, $P103
    .lex "$*IN_DECL", $P1969
.annotate 'line', 1040
    .local string rx1970_tgt
    .local int rx1970_pos
    .local int rx1970_off
    .local int rx1970_eos
    .local int rx1970_rep
    .local pmc rx1970_cur
    .local pmc rx1970_debug
    (rx1970_cur, rx1970_pos, rx1970_tgt, $I10) = self."!cursor_start"()
    rx1970_cur."!cursor_caparray"("typename", "trait")
    .lex unicode:"$\x{a2}", rx1970_cur
    .local pmc match
    .lex "$/", match
    length rx1970_eos, rx1970_tgt
    gt rx1970_pos, rx1970_eos, rx1970_done
    set rx1970_off, 0
    lt rx1970_pos, 2, rx1970_start
    sub rx1970_off, rx1970_pos, 1
    substr rx1970_tgt, rx1970_tgt, rx1970_off
  rx1970_start:
    eq $I10, 1, rx1970_restart
    if_null rx1970_debug, debug_1455
    rx1970_cur."!cursor_debug"("START", "variable_declarator")
  debug_1455:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1971_done
    goto rxscan1971_scan
  rxscan1971_loop:
    (rx1970_pos) = rx1970_cur."from"()
    inc rx1970_pos
    rx1970_cur."!cursor_from"(rx1970_pos)
    ge rx1970_pos, rx1970_eos, rxscan1971_done
  rxscan1971_scan:
    set_addr $I10, rxscan1971_loop
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
  rxscan1971_done:
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1041
  # rx rxquantr1972 ** 0..1
    set_addr $I10, rxquantr1972_done
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
  rxquantr1972_loop:
  # rx subrule "typename" subtype=capture negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."typename"()
    unless $P10, rx1970_fail
    goto rxsubrule1973_pass
  rxsubrule1973_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1970_fail
  rxsubrule1973_pass:
    set_addr $I10, rxsubrule1973_back
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10, $P10)
    $P10."!cursor_names"("typename")
    rx1970_pos = $P10."pos"()
    set_addr $I10, rxquantr1972_done
    (rx1970_rep) = rx1970_cur."!mark_commit"($I10)
  rxquantr1972_done:
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1042
    rx1970_cur."!cursor_pos"(rx1970_pos)
    new $P106, "String"
    assign $P106, "variable"
    set $P1969, $P106
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1043
  # rx subrule "variable" subtype=capture negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."variable"()
    unless $P10, rx1970_fail
    rx1970_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1970_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1044
    rx1970_cur."!cursor_pos"(rx1970_pos)
    find_lex $P109, unicode:"$\x{a2}"
    $P110 = $P109."MATCH"()
    store_lex "$/", $P110
    .const 'Sub' $P1975 = "580_1335114138.94729" 
    capture_lex $P1975
    $P112 = $P1975()
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1045
  # rx rxquantr1976 ** 0..*
    set_addr $I10, rxquantr1976_done
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10)
  rxquantr1976_loop:
  # rx subrule "trait" subtype=capture negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."trait"()
    unless $P10, rx1970_fail
    goto rxsubrule1977_pass
  rxsubrule1977_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1970_fail
  rxsubrule1977_pass:
    set_addr $I10, rxsubrule1977_back
    rx1970_cur."!mark_push"(0, rx1970_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx1970_pos = $P10."pos"()
    set_addr $I10, rxquantr1976_done
    (rx1970_rep) = rx1970_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1976_done
    rx1970_cur."!mark_push"(rx1970_rep, rx1970_pos, $I10)
    goto rxquantr1976_loop
  rxquantr1976_done:
  # rx subrule "ws" subtype=method negate=
    rx1970_cur."!cursor_pos"(rx1970_pos)
    $P10 = rx1970_cur."ws"()
    unless $P10, rx1970_fail
    rx1970_pos = $P10."pos"()
.annotate 'line', 1040
  # rx pass
    rx1970_cur."!cursor_pass"(rx1970_pos, "variable_declarator")
    if_null rx1970_debug, debug_1456
    rx1970_cur."!cursor_debug"("PASS", "variable_declarator", " at pos=", rx1970_pos)
  debug_1456:
    .return (rx1970_cur)
  rx1970_restart:
    if_null rx1970_debug, debug_1457
    rx1970_cur."!cursor_debug"("NEXT", "variable_declarator")
  debug_1457:
  rx1970_fail:
    (rx1970_rep, rx1970_pos, $I10, $P10) = rx1970_cur."!mark_fail"(0)
    lt rx1970_pos, -1, rx1970_done
    eq rx1970_pos, -1, rx1970_fail
    jump $I10
  rx1970_done:
    rx1970_cur."!cursor_fail"()
    if_null rx1970_debug, debug_1458
    rx1970_cur."!cursor_debug"("FAIL", "variable_declarator")
  debug_1458:
    .return (rx1970_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1974"  :anon :subid("580_1335114138.94729") :outer("193_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1044
    new $P111, "Float"
    assign $P111, 0
    store_dynamic_lex "$*IN_DECL", $P111
    .return ($P111)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable_declarator"  :subid("194_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1040
    $P115 = self."!PREFIX__!subrule"("ws", "")
    new $P116, "ResizablePMCArray"
    push $P116, $P115
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator"  :subid("195_1335114138.94729")
    .param pmc param_1980
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1048
    .lex "self", param_1980
    $P103 = param_1980."!protoregex"("routine_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator"  :subid("196_1335114138.94729")
    .param pmc param_1982
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1048
    .lex "self", param_1982
    $P104 = param_1982."!PREFIX__!protoregex"("routine_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<sub>"  :subid("197_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1049
    .local string rx1984_tgt
    .local int rx1984_pos
    .local int rx1984_off
    .local int rx1984_eos
    .local int rx1984_rep
    .local pmc rx1984_cur
    .local pmc rx1984_debug
    (rx1984_cur, rx1984_pos, rx1984_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1984_cur
    .local pmc match
    .lex "$/", match
    length rx1984_eos, rx1984_tgt
    gt rx1984_pos, rx1984_eos, rx1984_done
    set rx1984_off, 0
    lt rx1984_pos, 2, rx1984_start
    sub rx1984_off, rx1984_pos, 1
    substr rx1984_tgt, rx1984_tgt, rx1984_off
  rx1984_start:
    eq $I10, 1, rx1984_restart
    if_null rx1984_debug, debug_1459
    rx1984_cur."!cursor_debug"("START", "routine_declarator:sym<sub>")
  debug_1459:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1985_done
    goto rxscan1985_scan
  rxscan1985_loop:
    (rx1984_pos) = rx1984_cur."from"()
    inc rx1984_pos
    rx1984_cur."!cursor_from"(rx1984_pos)
    ge rx1984_pos, rx1984_eos, rxscan1985_done
  rxscan1985_scan:
    set_addr $I10, rxscan1985_loop
    rx1984_cur."!mark_push"(0, rx1984_pos, $I10)
  rxscan1985_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1986_fail
    rx1984_cur."!mark_push"(0, rx1984_pos, $I10)
  # rx literal  "sub"
    add $I11, rx1984_pos, 3
    gt $I11, rx1984_eos, rx1984_fail
    sub $I11, rx1984_pos, rx1984_off
    substr $S10, rx1984_tgt, $I11, 3
    ne $S10, "sub", rx1984_fail
    add rx1984_pos, 3
    set_addr $I10, rxcap_1986_fail
    ($I12, $I11) = rx1984_cur."!mark_peek"($I10)
    rx1984_cur."!cursor_pos"($I11)
    ($P10) = rx1984_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1984_pos, "")
    rx1984_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1986_done
  rxcap_1986_fail:
    goto rx1984_fail
  rxcap_1986_done:
  # rx subrule "routine_def" subtype=capture negate=
    rx1984_cur."!cursor_pos"(rx1984_pos)
    $P10 = rx1984_cur."routine_def"()
    unless $P10, rx1984_fail
    rx1984_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx1984_pos = $P10."pos"()
  # rx pass
    rx1984_cur."!cursor_pass"(rx1984_pos, "routine_declarator:sym<sub>")
    if_null rx1984_debug, debug_1460
    rx1984_cur."!cursor_debug"("PASS", "routine_declarator:sym<sub>", " at pos=", rx1984_pos)
  debug_1460:
    .return (rx1984_cur)
  rx1984_restart:
    if_null rx1984_debug, debug_1461
    rx1984_cur."!cursor_debug"("NEXT", "routine_declarator:sym<sub>")
  debug_1461:
  rx1984_fail:
    (rx1984_rep, rx1984_pos, $I10, $P10) = rx1984_cur."!mark_fail"(0)
    lt rx1984_pos, -1, rx1984_done
    eq rx1984_pos, -1, rx1984_fail
    jump $I10
  rx1984_done:
    rx1984_cur."!cursor_fail"()
    if_null rx1984_debug, debug_1462
    rx1984_cur."!cursor_debug"("FAIL", "routine_declarator:sym<sub>")
  debug_1462:
    .return (rx1984_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<sub>"  :subid("198_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1049
    $P103 = self."!PREFIX__!subrule"("routine_def", "sub")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<method>"  :subid("199_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1050
    .local string rx1989_tgt
    .local int rx1989_pos
    .local int rx1989_off
    .local int rx1989_eos
    .local int rx1989_rep
    .local pmc rx1989_cur
    .local pmc rx1989_debug
    (rx1989_cur, rx1989_pos, rx1989_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1989_cur
    .local pmc match
    .lex "$/", match
    length rx1989_eos, rx1989_tgt
    gt rx1989_pos, rx1989_eos, rx1989_done
    set rx1989_off, 0
    lt rx1989_pos, 2, rx1989_start
    sub rx1989_off, rx1989_pos, 1
    substr rx1989_tgt, rx1989_tgt, rx1989_off
  rx1989_start:
    eq $I10, 1, rx1989_restart
    if_null rx1989_debug, debug_1463
    rx1989_cur."!cursor_debug"("START", "routine_declarator:sym<method>")
  debug_1463:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1990_done
    goto rxscan1990_scan
  rxscan1990_loop:
    (rx1989_pos) = rx1989_cur."from"()
    inc rx1989_pos
    rx1989_cur."!cursor_from"(rx1989_pos)
    ge rx1989_pos, rx1989_eos, rxscan1990_done
  rxscan1990_scan:
    set_addr $I10, rxscan1990_loop
    rx1989_cur."!mark_push"(0, rx1989_pos, $I10)
  rxscan1990_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_1991_fail
    rx1989_cur."!mark_push"(0, rx1989_pos, $I10)
  # rx literal  "method"
    add $I11, rx1989_pos, 6
    gt $I11, rx1989_eos, rx1989_fail
    sub $I11, rx1989_pos, rx1989_off
    substr $S10, rx1989_tgt, $I11, 6
    ne $S10, "method", rx1989_fail
    add rx1989_pos, 6
    set_addr $I10, rxcap_1991_fail
    ($I12, $I11) = rx1989_cur."!mark_peek"($I10)
    rx1989_cur."!cursor_pos"($I11)
    ($P10) = rx1989_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1989_pos, "")
    rx1989_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1991_done
  rxcap_1991_fail:
    goto rx1989_fail
  rxcap_1991_done:
  # rx subrule "method_def" subtype=capture negate=
    rx1989_cur."!cursor_pos"(rx1989_pos)
    $P10 = rx1989_cur."method_def"()
    unless $P10, rx1989_fail
    rx1989_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("method_def")
    rx1989_pos = $P10."pos"()
  # rx pass
    rx1989_cur."!cursor_pass"(rx1989_pos, "routine_declarator:sym<method>")
    if_null rx1989_debug, debug_1464
    rx1989_cur."!cursor_debug"("PASS", "routine_declarator:sym<method>", " at pos=", rx1989_pos)
  debug_1464:
    .return (rx1989_cur)
  rx1989_restart:
    if_null rx1989_debug, debug_1465
    rx1989_cur."!cursor_debug"("NEXT", "routine_declarator:sym<method>")
  debug_1465:
  rx1989_fail:
    (rx1989_rep, rx1989_pos, $I10, $P10) = rx1989_cur."!mark_fail"(0)
    lt rx1989_pos, -1, rx1989_done
    eq rx1989_pos, -1, rx1989_fail
    jump $I10
  rx1989_done:
    rx1989_cur."!cursor_fail"()
    if_null rx1989_debug, debug_1466
    rx1989_cur."!cursor_debug"("FAIL", "routine_declarator:sym<method>")
  debug_1466:
    .return (rx1989_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<method>"  :subid("200_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1050
    $P103 = self."!PREFIX__!subrule"("method_def", "method")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_def"  :subid("201_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1053
    new $P103, "Undef"
    set $P1994, $P103
    .lex "$*RETURN_USED", $P1994
.annotate 'line', 1052
    .local string rx1995_tgt
    .local int rx1995_pos
    .local int rx1995_off
    .local int rx1995_eos
    .local int rx1995_rep
    .local pmc rx1995_cur
    .local pmc rx1995_debug
    (rx1995_cur, rx1995_pos, rx1995_tgt, $I10) = self."!cursor_start"()
    rx1995_cur."!cursor_caparray"("sigil", "deflongname", "trait")
    .lex unicode:"$\x{a2}", rx1995_cur
    .local pmc match
    .lex "$/", match
    length rx1995_eos, rx1995_tgt
    gt rx1995_pos, rx1995_eos, rx1995_done
    set rx1995_off, 0
    lt rx1995_pos, 2, rx1995_start
    sub rx1995_off, rx1995_pos, 1
    substr rx1995_tgt, rx1995_tgt, rx1995_off
  rx1995_start:
    eq $I10, 1, rx1995_restart
    if_null rx1995_debug, debug_1467
    rx1995_cur."!cursor_debug"("START", "routine_def")
  debug_1467:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1996_done
    goto rxscan1996_scan
  rxscan1996_loop:
    (rx1995_pos) = rx1995_cur."from"()
    inc rx1995_pos
    rx1995_cur."!cursor_from"(rx1995_pos)
    ge rx1995_pos, rx1995_eos, rxscan1996_done
  rxscan1996_scan:
    set_addr $I10, rxscan1996_loop
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  rxscan1996_done:
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
.annotate 'line', 1053
    rx1995_cur."!cursor_pos"(rx1995_pos)
    new $P105, "Float"
    assign $P105, 0
    set $P1994, $P105
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
.annotate 'line', 1054
  # rx rxquantr1997 ** 0..1
    set_addr $I10, rxquantr1997_done
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  rxquantr1997_loop:
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  # rx subcapture "sigil"
    set_addr $I10, rxcap_1999_fail
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  # rx rxquantr1998 ** 0..1
    set_addr $I10, rxquantr1998_done
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  rxquantr1998_loop:
  # rx literal  "&"
    add $I11, rx1995_pos, 1
    gt $I11, rx1995_eos, rx1995_fail
    sub $I11, rx1995_pos, rx1995_off
    ord $I11, rx1995_tgt, $I11
    ne $I11, 38, rx1995_fail
    add rx1995_pos, 1
    set_addr $I10, rxquantr1998_done
    (rx1995_rep) = rx1995_cur."!mark_commit"($I10)
  rxquantr1998_done:
    set_addr $I10, rxcap_1999_fail
    ($I12, $I11) = rx1995_cur."!mark_peek"($I10)
    rx1995_cur."!cursor_pos"($I11)
    ($P10) = rx1995_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1995_pos, "")
    rx1995_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_1999_done
  rxcap_1999_fail:
    goto rx1995_fail
  rxcap_1999_done:
  # rx subrule "deflongname" subtype=capture negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."deflongname"()
    unless $P10, rx1995_fail
    rx1995_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx1995_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
    set_addr $I10, rxquantr1997_done
    (rx1995_rep) = rx1995_cur."!mark_commit"($I10)
  rxquantr1997_done:
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
.annotate 'line', 1055
  # rx subrule "newpad" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."newpad"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  alt2000_0:
.annotate 'line', 1056
    set_addr $I10, alt2000_1
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx1995_pos, 1
    gt $I11, rx1995_eos, rx1995_fail
    sub $I11, rx1995_pos, rx1995_off
    ord $I11, rx1995_tgt, $I11
    ne $I11, 40, rx1995_fail
    add rx1995_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."signature"()
    unless $P10, rx1995_fail
    rx1995_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1995_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1995_pos, 1
    gt $I11, rx1995_eos, rx1995_fail
    sub $I11, rx1995_pos, rx1995_off
    ord $I11, rx1995_tgt, $I11
    ne $I11, 41, rx1995_fail
    add rx1995_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
    goto alt2000_end
  alt2000_1:
.annotate 'line', 1057
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  alt2000_end:
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
.annotate 'line', 1058
  # rx rxquantr2001 ** 0..*
    set_addr $I10, rxquantr2001_done
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
  rxquantr2001_loop:
  # rx subrule "trait" subtype=capture negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."trait"()
    unless $P10, rx1995_fail
    goto rxsubrule2002_pass
  rxsubrule2002_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1995_fail
  rxsubrule2002_pass:
    set_addr $I10, rxsubrule2002_back
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx1995_pos = $P10."pos"()
    set_addr $I10, rxquantr2001_done
    (rx1995_rep) = rx1995_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2001_done
    rx1995_cur."!mark_push"(rx1995_rep, rx1995_pos, $I10)
    goto rxquantr2001_loop
  rxquantr2001_done:
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  alt2003_0:
.annotate 'line', 1059
    set_addr $I10, alt2003_1
    rx1995_cur."!mark_push"(0, rx1995_pos, $I10)
.annotate 'line', 1060
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."onlystar"()
    unless $P10, rx1995_fail
    rx1995_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx1995_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
    goto alt2003_end
  alt2003_1:
.annotate 'line', 1061
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."blockoid"()
    unless $P10, rx1995_fail
    rx1995_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1995_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
  alt2003_end:
.annotate 'line', 1062
  # rx subrule "ws" subtype=method negate=
    rx1995_cur."!cursor_pos"(rx1995_pos)
    $P10 = rx1995_cur."ws"()
    unless $P10, rx1995_fail
    rx1995_pos = $P10."pos"()
.annotate 'line', 1052
  # rx pass
    rx1995_cur."!cursor_pass"(rx1995_pos, "routine_def")
    if_null rx1995_debug, debug_1468
    rx1995_cur."!cursor_debug"("PASS", "routine_def", " at pos=", rx1995_pos)
  debug_1468:
    .return (rx1995_cur)
  rx1995_restart:
    if_null rx1995_debug, debug_1469
    rx1995_cur."!cursor_debug"("NEXT", "routine_def")
  debug_1469:
  rx1995_fail:
    (rx1995_rep, rx1995_pos, $I10, $P10) = rx1995_cur."!mark_fail"(0)
    lt rx1995_pos, -1, rx1995_done
    eq rx1995_pos, -1, rx1995_fail
    jump $I10
  rx1995_done:
    rx1995_cur."!cursor_fail"()
    if_null rx1995_debug, debug_1470
    rx1995_cur."!cursor_debug"("FAIL", "routine_def")
  debug_1470:
    .return (rx1995_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_def"  :subid("202_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1052
    $P124 = self."!PREFIX__!subrule"("ws", "")
    new $P125, "ResizablePMCArray"
    push $P125, $P124
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "method_def"  :subid("203_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1065
    .const 'Sub' $P2016 = "581_1335114138.94729" 
    capture_lex $P2016
.annotate 'line', 1066
    new $P103, "Undef"
    set $P2006, $P103
    .lex "$*RETURN_USED", $P2006
.annotate 'line', 1067
    new $P104, "Undef"
    set $P2007, $P104
    .lex "$*INVOCANT_OK", $P2007
.annotate 'line', 1065
    .local string rx2008_tgt
    .local int rx2008_pos
    .local int rx2008_off
    .local int rx2008_eos
    .local int rx2008_rep
    .local pmc rx2008_cur
    .local pmc rx2008_debug
    (rx2008_cur, rx2008_pos, rx2008_tgt, $I10) = self."!cursor_start"()
    rx2008_cur."!cursor_caparray"("deflongname", "trait")
    .lex unicode:"$\x{a2}", rx2008_cur
    .local pmc match
    .lex "$/", match
    length rx2008_eos, rx2008_tgt
    gt rx2008_pos, rx2008_eos, rx2008_done
    set rx2008_off, 0
    lt rx2008_pos, 2, rx2008_start
    sub rx2008_off, rx2008_pos, 1
    substr rx2008_tgt, rx2008_tgt, rx2008_off
  rx2008_start:
    eq $I10, 1, rx2008_restart
    if_null rx2008_debug, debug_1471
    rx2008_cur."!cursor_debug"("START", "method_def")
  debug_1471:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2009_done
    goto rxscan2009_scan
  rxscan2009_loop:
    (rx2008_pos) = rx2008_cur."from"()
    inc rx2008_pos
    rx2008_cur."!cursor_from"(rx2008_pos)
    ge rx2008_pos, rx2008_eos, rxscan2009_done
  rxscan2009_scan:
    set_addr $I10, rxscan2009_loop
    rx2008_cur."!mark_push"(0, rx2008_pos, $I10)
  rxscan2009_done:
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
.annotate 'line', 1066
    rx2008_cur."!cursor_pos"(rx2008_pos)
    new $P106, "Float"
    assign $P106, 0
    set $P2006, $P106
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
.annotate 'line', 1067
    rx2008_cur."!cursor_pos"(rx2008_pos)
    new $P108, "Float"
    assign $P108, 1
    set $P2007, $P108
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
.annotate 'line', 1068
  # rx subcapture "private"
    set_addr $I10, rxcap_2011_fail
    rx2008_cur."!mark_push"(0, rx2008_pos, $I10)
  # rx rxquantr2010 ** 0..1
    set_addr $I10, rxquantr2010_done
    rx2008_cur."!mark_push"(0, rx2008_pos, $I10)
  rxquantr2010_loop:
  # rx literal  "!"
    add $I11, rx2008_pos, 1
    gt $I11, rx2008_eos, rx2008_fail
    sub $I11, rx2008_pos, rx2008_off
    ord $I11, rx2008_tgt, $I11
    ne $I11, 33, rx2008_fail
    add rx2008_pos, 1
    set_addr $I10, rxquantr2010_done
    (rx2008_rep) = rx2008_cur."!mark_commit"($I10)
  rxquantr2010_done:
    set_addr $I10, rxcap_2011_fail
    ($I12, $I11) = rx2008_cur."!mark_peek"($I10)
    rx2008_cur."!cursor_pos"($I11)
    ($P10) = rx2008_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2008_pos, "")
    rx2008_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("private")
    goto rxcap_2011_done
  rxcap_2011_fail:
    goto rx2008_fail
  rxcap_2011_done:
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
.annotate 'line', 1069
  # rx rxquantr2012 ** 0..1
    set_addr $I10, rxquantr2012_done
    rx2008_cur."!mark_push"(0, rx2008_pos, $I10)
  rxquantr2012_loop:
  # rx subrule "deflongname" subtype=capture negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."deflongname"()
    unless $P10, rx2008_fail
    goto rxsubrule2013_pass
  rxsubrule2013_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2008_fail
  rxsubrule2013_pass:
    set_addr $I10, rxsubrule2013_back
    rx2008_cur."!mark_push"(0, rx2008_pos, $I10, $P10)
    $P10."!cursor_names"("deflongname")
    rx2008_pos = $P10."pos"()
    set_addr $I10, rxquantr2012_done
    (rx2008_rep) = rx2008_cur."!mark_commit"($I10)
  rxquantr2012_done:
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
.annotate 'line', 1070
  # rx subrule "newpad" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."newpad"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  alt2014_0:
.annotate 'line', 1071
    set_addr $I10, alt2014_1
    rx2008_cur."!mark_push"(0, rx2008_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2008_pos, 1
    gt $I11, rx2008_eos, rx2008_fail
    sub $I11, rx2008_pos, rx2008_off
    ord $I11, rx2008_tgt, $I11
    ne $I11, 40, rx2008_fail
    add rx2008_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."signature"()
    unless $P10, rx2008_fail
    rx2008_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx2008_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2008_pos, 1
    gt $I11, rx2008_eos, rx2008_fail
    sub $I11, rx2008_pos, rx2008_off
    ord $I11, rx2008_tgt, $I11
    ne $I11, 41, rx2008_fail
    add rx2008_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
    goto alt2014_end
  alt2014_1:
.annotate 'line', 1072
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  alt2014_end:
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
.annotate 'line', 1073
    rx2008_cur."!cursor_pos"(rx2008_pos)
    find_lex $P120, unicode:"$\x{a2}"
    $P121 = $P120."MATCH"()
    store_lex "$/", $P121
    .const 'Sub' $P2016 = "581_1335114138.94729" 
    capture_lex $P2016
    $P123 = $P2016()
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
.annotate 'line', 1074
  # rx rxquantr2017 ** 0..*
    set_addr $I10, rxquantr2017_done
    rx2008_cur."!mark_push"(0, rx2008_pos, $I10)
  rxquantr2017_loop:
  # rx subrule "trait" subtype=capture negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."trait"()
    unless $P10, rx2008_fail
    goto rxsubrule2018_pass
  rxsubrule2018_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2008_fail
  rxsubrule2018_pass:
    set_addr $I10, rxsubrule2018_back
    rx2008_cur."!mark_push"(0, rx2008_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx2008_pos = $P10."pos"()
    set_addr $I10, rxquantr2017_done
    (rx2008_rep) = rx2008_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2017_done
    rx2008_cur."!mark_push"(rx2008_rep, rx2008_pos, $I10)
    goto rxquantr2017_loop
  rxquantr2017_done:
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  alt2019_0:
.annotate 'line', 1075
    set_addr $I10, alt2019_1
    rx2008_cur."!mark_push"(0, rx2008_pos, $I10)
.annotate 'line', 1076
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."onlystar"()
    unless $P10, rx2008_fail
    rx2008_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx2008_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
    goto alt2019_end
  alt2019_1:
.annotate 'line', 1077
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."blockoid"()
    unless $P10, rx2008_fail
    rx2008_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx2008_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
  alt2019_end:
.annotate 'line', 1078
  # rx subrule "ws" subtype=method negate=
    rx2008_cur."!cursor_pos"(rx2008_pos)
    $P10 = rx2008_cur."ws"()
    unless $P10, rx2008_fail
    rx2008_pos = $P10."pos"()
.annotate 'line', 1065
  # rx pass
    rx2008_cur."!cursor_pass"(rx2008_pos, "method_def")
    if_null rx2008_debug, debug_1472
    rx2008_cur."!cursor_debug"("PASS", "method_def", " at pos=", rx2008_pos)
  debug_1472:
    .return (rx2008_cur)
  rx2008_restart:
    if_null rx2008_debug, debug_1473
    rx2008_cur."!cursor_debug"("NEXT", "method_def")
  debug_1473:
  rx2008_fail:
    (rx2008_rep, rx2008_pos, $I10, $P10) = rx2008_cur."!mark_fail"(0)
    lt rx2008_pos, -1, rx2008_done
    eq rx2008_pos, -1, rx2008_fail
    jump $I10
  rx2008_done:
    rx2008_cur."!cursor_fail"()
    if_null rx2008_debug, debug_1474
    rx2008_cur."!cursor_debug"("FAIL", "method_def")
  debug_1474:
    .return (rx2008_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2015"  :anon :subid("581_1335114138.94729") :outer("203_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1073
    new $P122, "Float"
    assign $P122, 0
    store_dynamic_lex "$*INVOCANT_OK", $P122
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__method_def"  :subid("204_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1065
    $P131 = self."!PREFIX__!subrule"("ws", "")
    new $P132, "ResizablePMCArray"
    push $P132, $P131
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "onlystar"  :subid("205_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1081
    .const 'Sub' $P2025 = "582_1335114138.94729" 
    capture_lex $P2025
    .local string rx2022_tgt
    .local int rx2022_pos
    .local int rx2022_off
    .local int rx2022_eos
    .local int rx2022_rep
    .local pmc rx2022_cur
    .local pmc rx2022_debug
    (rx2022_cur, rx2022_pos, rx2022_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2022_cur
    .local pmc match
    .lex "$/", match
    length rx2022_eos, rx2022_tgt
    gt rx2022_pos, rx2022_eos, rx2022_done
    set rx2022_off, 0
    lt rx2022_pos, 2, rx2022_start
    sub rx2022_off, rx2022_pos, 1
    substr rx2022_tgt, rx2022_tgt, rx2022_off
  rx2022_start:
    eq $I10, 1, rx2022_restart
    if_null rx2022_debug, debug_1475
    rx2022_cur."!cursor_debug"("START", "onlystar")
  debug_1475:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2023_done
    goto rxscan2023_scan
  rxscan2023_loop:
    (rx2022_pos) = rx2022_cur."from"()
    inc rx2022_pos
    rx2022_cur."!cursor_from"(rx2022_pos)
    ge rx2022_pos, rx2022_eos, rxscan2023_done
  rxscan2023_scan:
    set_addr $I10, rxscan2023_loop
    rx2022_cur."!mark_push"(0, rx2022_pos, $I10)
  rxscan2023_done:
.annotate 'line', 1082
    rx2022_cur."!cursor_pos"(rx2022_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P2025 = "582_1335114138.94729" 
    capture_lex $P2025
    $P105 = $P2025()
    unless $P105, rx2022_fail
.annotate 'line', 1083
  # rx literal  "{"
    add $I11, rx2022_pos, 1
    gt $I11, rx2022_eos, rx2022_fail
    sub $I11, rx2022_pos, rx2022_off
    ord $I11, rx2022_tgt, $I11
    ne $I11, 123, rx2022_fail
    add rx2022_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."ws"()
    unless $P10, rx2022_fail
    rx2022_pos = $P10."pos"()
  # rx literal  "*"
    add $I11, rx2022_pos, 1
    gt $I11, rx2022_eos, rx2022_fail
    sub $I11, rx2022_pos, rx2022_off
    ord $I11, rx2022_tgt, $I11
    ne $I11, 42, rx2022_fail
    add rx2022_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."ws"()
    unless $P10, rx2022_fail
    rx2022_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2022_pos, 1
    gt $I11, rx2022_eos, rx2022_fail
    sub $I11, rx2022_pos, rx2022_off
    ord $I11, rx2022_tgt, $I11
    ne $I11, 125, rx2022_fail
    add rx2022_pos, 1
.annotate 'line', 1084
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."ENDSTMT"()
    unless $P10, rx2022_fail
.annotate 'line', 1085
  # rx subrule "finishpad" subtype=method negate=
    rx2022_cur."!cursor_pos"(rx2022_pos)
    $P10 = rx2022_cur."finishpad"()
    unless $P10, rx2022_fail
    rx2022_pos = $P10."pos"()
.annotate 'line', 1081
  # rx pass
    rx2022_cur."!cursor_pass"(rx2022_pos, "onlystar")
    if_null rx2022_debug, debug_1478
    rx2022_cur."!cursor_debug"("PASS", "onlystar", " at pos=", rx2022_pos)
  debug_1478:
    .return (rx2022_cur)
  rx2022_restart:
    if_null rx2022_debug, debug_1479
    rx2022_cur."!cursor_debug"("NEXT", "onlystar")
  debug_1479:
  rx2022_fail:
    (rx2022_rep, rx2022_pos, $I10, $P10) = rx2022_cur."!mark_fail"(0)
    lt rx2022_pos, -1, rx2022_done
    eq rx2022_pos, -1, rx2022_fail
    jump $I10
  rx2022_done:
    rx2022_cur."!cursor_fail"()
    if_null rx2022_debug, debug_1480
    rx2022_cur."!cursor_debug"("FAIL", "onlystar")
  debug_1480:
    .return (rx2022_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2024"  :anon :subid("582_1335114138.94729") :outer("205_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1082
    find_dynamic_lex $P107, "$*MULTINESS"
    unless_null $P107, vivify_1476
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$MULTINESS"]
    unless_null $P107, vivify_1477
    die "Contextual $*MULTINESS not found"
  vivify_1477:
  vivify_1476:
    set $S100, $P107
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__onlystar"  :subid("206_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1081
    new $P106, "ResizablePMCArray"
    push $P106, ""
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator"  :subid("207_1335114138.94729")
    .param pmc param_2028
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1088
    .lex "self", param_2028
    $P103 = param_2028."!protoregex"("multi_declarator")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator"  :subid("208_1335114138.94729")
    .param pmc param_2030
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1088
    .lex "self", param_2030
    $P104 = param_2030."!PREFIX__!protoregex"("multi_declarator")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<multi>"  :subid("209_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1090
    new $P103, "Undef"
    set $P2032, $P103
    .lex "$*MULTINESS", $P2032
.annotate 'line', 1089
    .local string rx2033_tgt
    .local int rx2033_pos
    .local int rx2033_off
    .local int rx2033_eos
    .local int rx2033_rep
    .local pmc rx2033_cur
    .local pmc rx2033_debug
    (rx2033_cur, rx2033_pos, rx2033_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2033_cur
    .local pmc match
    .lex "$/", match
    length rx2033_eos, rx2033_tgt
    gt rx2033_pos, rx2033_eos, rx2033_done
    set rx2033_off, 0
    lt rx2033_pos, 2, rx2033_start
    sub rx2033_off, rx2033_pos, 1
    substr rx2033_tgt, rx2033_tgt, rx2033_off
  rx2033_start:
    eq $I10, 1, rx2033_restart
    if_null rx2033_debug, debug_1481
    rx2033_cur."!cursor_debug"("START", "multi_declarator:sym<multi>")
  debug_1481:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2034_done
    goto rxscan2034_scan
  rxscan2034_loop:
    (rx2033_pos) = rx2033_cur."from"()
    inc rx2033_pos
    rx2033_cur."!cursor_from"(rx2033_pos)
    ge rx2033_pos, rx2033_eos, rxscan2034_done
  rxscan2034_scan:
    set_addr $I10, rxscan2034_loop
    rx2033_cur."!mark_push"(0, rx2033_pos, $I10)
  rxscan2034_done:
.annotate 'line', 1090
    rx2033_cur."!cursor_pos"(rx2033_pos)
    new $P104, "String"
    assign $P104, "multi"
    set $P2032, $P104
.annotate 'line', 1091
  # rx subcapture "sym"
    set_addr $I10, rxcap_2035_fail
    rx2033_cur."!mark_push"(0, rx2033_pos, $I10)
  # rx literal  "multi"
    add $I11, rx2033_pos, 5
    gt $I11, rx2033_eos, rx2033_fail
    sub $I11, rx2033_pos, rx2033_off
    substr $S10, rx2033_tgt, $I11, 5
    ne $S10, "multi", rx2033_fail
    add rx2033_pos, 5
    set_addr $I10, rxcap_2035_fail
    ($I12, $I11) = rx2033_cur."!mark_peek"($I10)
    rx2033_cur."!cursor_pos"($I11)
    ($P10) = rx2033_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2033_pos, "")
    rx2033_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2035_done
  rxcap_2035_fail:
    goto rx2033_fail
  rxcap_2035_done:
.annotate 'line', 1092
  # rx subrule "ws" subtype=method negate=
    rx2033_cur."!cursor_pos"(rx2033_pos)
    $P10 = rx2033_cur."ws"()
    unless $P10, rx2033_fail
    rx2033_pos = $P10."pos"()
  alt2036_0:
    set_addr $I10, alt2036_1
    rx2033_cur."!mark_push"(0, rx2033_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx2033_cur."!cursor_pos"(rx2033_pos)
    $P10 = rx2033_cur."declarator"()
    unless $P10, rx2033_fail
    rx2033_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2033_pos = $P10."pos"()
    goto alt2036_end
  alt2036_1:
    set_addr $I10, alt2036_2
    rx2033_cur."!mark_push"(0, rx2033_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx2033_cur."!cursor_pos"(rx2033_pos)
    $P10 = rx2033_cur."routine_def"()
    unless $P10, rx2033_fail
    rx2033_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx2033_pos = $P10."pos"()
    goto alt2036_end
  alt2036_2:
  # rx subrule "panic" subtype=method negate=
    rx2033_cur."!cursor_pos"(rx2033_pos)
    $P10 = rx2033_cur."panic"("Malformed multi")
    unless $P10, rx2033_fail
    rx2033_pos = $P10."pos"()
  alt2036_end:
.annotate 'line', 1089
  # rx pass
    rx2033_cur."!cursor_pass"(rx2033_pos, "multi_declarator:sym<multi>")
    if_null rx2033_debug, debug_1482
    rx2033_cur."!cursor_debug"("PASS", "multi_declarator:sym<multi>", " at pos=", rx2033_pos)
  debug_1482:
    .return (rx2033_cur)
  rx2033_restart:
    if_null rx2033_debug, debug_1483
    rx2033_cur."!cursor_debug"("NEXT", "multi_declarator:sym<multi>")
  debug_1483:
  rx2033_fail:
    (rx2033_rep, rx2033_pos, $I10, $P10) = rx2033_cur."!mark_fail"(0)
    lt rx2033_pos, -1, rx2033_done
    eq rx2033_pos, -1, rx2033_fail
    jump $I10
  rx2033_done:
    rx2033_cur."!cursor_fail"()
    if_null rx2033_debug, debug_1484
    rx2033_cur."!cursor_debug"("FAIL", "multi_declarator:sym<multi>")
  debug_1484:
    .return (rx2033_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<multi>"  :subid("210_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1089
    $P105 = self."!PREFIX__!subrule"("ws", "multi")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<proto>"  :subid("211_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1095
    new $P103, "Undef"
    set $P2039, $P103
    .lex "$*MULTINESS", $P2039
.annotate 'line', 1094
    .local string rx2040_tgt
    .local int rx2040_pos
    .local int rx2040_off
    .local int rx2040_eos
    .local int rx2040_rep
    .local pmc rx2040_cur
    .local pmc rx2040_debug
    (rx2040_cur, rx2040_pos, rx2040_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2040_cur
    .local pmc match
    .lex "$/", match
    length rx2040_eos, rx2040_tgt
    gt rx2040_pos, rx2040_eos, rx2040_done
    set rx2040_off, 0
    lt rx2040_pos, 2, rx2040_start
    sub rx2040_off, rx2040_pos, 1
    substr rx2040_tgt, rx2040_tgt, rx2040_off
  rx2040_start:
    eq $I10, 1, rx2040_restart
    if_null rx2040_debug, debug_1485
    rx2040_cur."!cursor_debug"("START", "multi_declarator:sym<proto>")
  debug_1485:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2041_done
    goto rxscan2041_scan
  rxscan2041_loop:
    (rx2040_pos) = rx2040_cur."from"()
    inc rx2040_pos
    rx2040_cur."!cursor_from"(rx2040_pos)
    ge rx2040_pos, rx2040_eos, rxscan2041_done
  rxscan2041_scan:
    set_addr $I10, rxscan2041_loop
    rx2040_cur."!mark_push"(0, rx2040_pos, $I10)
  rxscan2041_done:
.annotate 'line', 1095
    rx2040_cur."!cursor_pos"(rx2040_pos)
    new $P104, "String"
    assign $P104, "proto"
    set $P2039, $P104
.annotate 'line', 1096
  # rx subcapture "sym"
    set_addr $I10, rxcap_2042_fail
    rx2040_cur."!mark_push"(0, rx2040_pos, $I10)
  # rx literal  "proto"
    add $I11, rx2040_pos, 5
    gt $I11, rx2040_eos, rx2040_fail
    sub $I11, rx2040_pos, rx2040_off
    substr $S10, rx2040_tgt, $I11, 5
    ne $S10, "proto", rx2040_fail
    add rx2040_pos, 5
    set_addr $I10, rxcap_2042_fail
    ($I12, $I11) = rx2040_cur."!mark_peek"($I10)
    rx2040_cur."!cursor_pos"($I11)
    ($P10) = rx2040_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2040_pos, "")
    rx2040_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2042_done
  rxcap_2042_fail:
    goto rx2040_fail
  rxcap_2042_done:
.annotate 'line', 1097
  # rx subrule "ws" subtype=method negate=
    rx2040_cur."!cursor_pos"(rx2040_pos)
    $P10 = rx2040_cur."ws"()
    unless $P10, rx2040_fail
    rx2040_pos = $P10."pos"()
  alt2043_0:
    set_addr $I10, alt2043_1
    rx2040_cur."!mark_push"(0, rx2040_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx2040_cur."!cursor_pos"(rx2040_pos)
    $P10 = rx2040_cur."declarator"()
    unless $P10, rx2040_fail
    rx2040_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2040_pos = $P10."pos"()
    goto alt2043_end
  alt2043_1:
    set_addr $I10, alt2043_2
    rx2040_cur."!mark_push"(0, rx2040_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx2040_cur."!cursor_pos"(rx2040_pos)
    $P10 = rx2040_cur."routine_def"()
    unless $P10, rx2040_fail
    rx2040_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx2040_pos = $P10."pos"()
    goto alt2043_end
  alt2043_2:
  # rx subrule "panic" subtype=method negate=
    rx2040_cur."!cursor_pos"(rx2040_pos)
    $P10 = rx2040_cur."panic"("Malformed proto")
    unless $P10, rx2040_fail
    rx2040_pos = $P10."pos"()
  alt2043_end:
.annotate 'line', 1094
  # rx pass
    rx2040_cur."!cursor_pass"(rx2040_pos, "multi_declarator:sym<proto>")
    if_null rx2040_debug, debug_1486
    rx2040_cur."!cursor_debug"("PASS", "multi_declarator:sym<proto>", " at pos=", rx2040_pos)
  debug_1486:
    .return (rx2040_cur)
  rx2040_restart:
    if_null rx2040_debug, debug_1487
    rx2040_cur."!cursor_debug"("NEXT", "multi_declarator:sym<proto>")
  debug_1487:
  rx2040_fail:
    (rx2040_rep, rx2040_pos, $I10, $P10) = rx2040_cur."!mark_fail"(0)
    lt rx2040_pos, -1, rx2040_done
    eq rx2040_pos, -1, rx2040_fail
    jump $I10
  rx2040_done:
    rx2040_cur."!cursor_fail"()
    if_null rx2040_debug, debug_1488
    rx2040_cur."!cursor_debug"("FAIL", "multi_declarator:sym<proto>")
  debug_1488:
    .return (rx2040_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<proto>"  :subid("212_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1094
    $P105 = self."!PREFIX__!subrule"("ws", "proto")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<null>"  :subid("213_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1100
    new $P103, "Undef"
    set $P2046, $P103
    .lex "$*MULTINESS", $P2046
.annotate 'line', 1099
    .local string rx2047_tgt
    .local int rx2047_pos
    .local int rx2047_off
    .local int rx2047_eos
    .local int rx2047_rep
    .local pmc rx2047_cur
    .local pmc rx2047_debug
    (rx2047_cur, rx2047_pos, rx2047_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2047_cur
    .local pmc match
    .lex "$/", match
    length rx2047_eos, rx2047_tgt
    gt rx2047_pos, rx2047_eos, rx2047_done
    set rx2047_off, 0
    lt rx2047_pos, 2, rx2047_start
    sub rx2047_off, rx2047_pos, 1
    substr rx2047_tgt, rx2047_tgt, rx2047_off
  rx2047_start:
    eq $I10, 1, rx2047_restart
    if_null rx2047_debug, debug_1489
    rx2047_cur."!cursor_debug"("START", "multi_declarator:sym<null>")
  debug_1489:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2048_done
    goto rxscan2048_scan
  rxscan2048_loop:
    (rx2047_pos) = rx2047_cur."from"()
    inc rx2047_pos
    rx2047_cur."!cursor_from"(rx2047_pos)
    ge rx2047_pos, rx2047_eos, rxscan2048_done
  rxscan2048_scan:
    set_addr $I10, rxscan2048_loop
    rx2047_cur."!mark_push"(0, rx2047_pos, $I10)
  rxscan2048_done:
.annotate 'line', 1100
    rx2047_cur."!cursor_pos"(rx2047_pos)
    new $P104, "String"
    assign $P104, ""
    set $P2046, $P104
.annotate 'line', 1101
  # rx subrule "declarator" subtype=capture negate=
    rx2047_cur."!cursor_pos"(rx2047_pos)
    $P10 = rx2047_cur."declarator"()
    unless $P10, rx2047_fail
    rx2047_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2047_pos = $P10."pos"()
.annotate 'line', 1099
  # rx pass
    rx2047_cur."!cursor_pass"(rx2047_pos, "multi_declarator:sym<null>")
    if_null rx2047_debug, debug_1490
    rx2047_cur."!cursor_debug"("PASS", "multi_declarator:sym<null>", " at pos=", rx2047_pos)
  debug_1490:
    .return (rx2047_cur)
  rx2047_restart:
    if_null rx2047_debug, debug_1491
    rx2047_cur."!cursor_debug"("NEXT", "multi_declarator:sym<null>")
  debug_1491:
  rx2047_fail:
    (rx2047_rep, rx2047_pos, $I10, $P10) = rx2047_cur."!mark_fail"(0)
    lt rx2047_pos, -1, rx2047_done
    eq rx2047_pos, -1, rx2047_fail
    jump $I10
  rx2047_done:
    rx2047_cur."!cursor_fail"()
    if_null rx2047_debug, debug_1492
    rx2047_cur."!cursor_debug"("FAIL", "multi_declarator:sym<null>")
  debug_1492:
    .return (rx2047_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<null>"  :subid("214_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1099
    $P105 = self."!PREFIX__!subrule"("declarator", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "signature"  :subid("215_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1104
    .const 'Sub' $P2055 = "583_1335114138.94729" 
    capture_lex $P2055
    .local string rx2051_tgt
    .local int rx2051_pos
    .local int rx2051_off
    .local int rx2051_eos
    .local int rx2051_rep
    .local pmc rx2051_cur
    .local pmc rx2051_debug
    (rx2051_cur, rx2051_pos, rx2051_tgt, $I10) = self."!cursor_start"()
    rx2051_cur."!cursor_caparray"("invocant", "parameter")
    .lex unicode:"$\x{a2}", rx2051_cur
    .local pmc match
    .lex "$/", match
    length rx2051_eos, rx2051_tgt
    gt rx2051_pos, rx2051_eos, rx2051_done
    set rx2051_off, 0
    lt rx2051_pos, 2, rx2051_start
    sub rx2051_off, rx2051_pos, 1
    substr rx2051_tgt, rx2051_tgt, rx2051_off
  rx2051_start:
    eq $I10, 1, rx2051_restart
    if_null rx2051_debug, debug_1493
    rx2051_cur."!cursor_debug"("START", "signature")
  debug_1493:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2052_done
    goto rxscan2052_scan
  rxscan2052_loop:
    (rx2051_pos) = rx2051_cur."from"()
    inc rx2051_pos
    rx2051_cur."!cursor_from"(rx2051_pos)
    ge rx2051_pos, rx2051_eos, rxscan2052_done
  rxscan2052_scan:
    set_addr $I10, rxscan2052_loop
    rx2051_cur."!mark_push"(0, rx2051_pos, $I10)
  rxscan2052_done:
.annotate 'line', 1105
  # rx rxquantr2053 ** 0..1
    set_addr $I10, rxquantr2053_done
    rx2051_cur."!mark_push"(0, rx2051_pos, $I10)
  rxquantr2053_loop:
    rx2051_cur."!cursor_pos"(rx2051_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P2055 = "583_1335114138.94729" 
    capture_lex $P2055
    $P105 = $P2055()
    unless $P105, rx2051_fail
  # rx subrule "ws" subtype=method negate=
    rx2051_cur."!cursor_pos"(rx2051_pos)
    $P10 = rx2051_cur."ws"()
    unless $P10, rx2051_fail
    rx2051_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx2051_cur."!cursor_pos"(rx2051_pos)
    $P10 = rx2051_cur."parameter"()
    unless $P10, rx2051_fail
    rx2051_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("invocant")
    rx2051_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2051_cur."!cursor_pos"(rx2051_pos)
    $P10 = rx2051_cur."ws"()
    unless $P10, rx2051_fail
    rx2051_pos = $P10."pos"()
  # rx literal  ":"
    add $I11, rx2051_pos, 1
    gt $I11, rx2051_eos, rx2051_fail
    sub $I11, rx2051_pos, rx2051_off
    ord $I11, rx2051_tgt, $I11
    ne $I11, 58, rx2051_fail
    add rx2051_pos, 1
    set_addr $I10, rxquantr2053_done
    (rx2051_rep) = rx2051_cur."!mark_commit"($I10)
  rxquantr2053_done:
.annotate 'line', 1106
  # rx rxquantr2056 ** 0..1
    set_addr $I10, rxquantr2056_done
    rx2051_cur."!mark_push"(0, rx2051_pos, $I10)
  rxquantr2056_loop:
  # rx rxquantr2057 ** 1..*
    set_addr $I10, rxquantr2057_done
    rx2051_cur."!mark_push"(0, -1, $I10)
  rxquantr2057_loop:
  # rx subrule "ws" subtype=method negate=
    rx2051_cur."!cursor_pos"(rx2051_pos)
    $P10 = rx2051_cur."ws"()
    unless $P10, rx2051_fail
    rx2051_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx2051_cur."!cursor_pos"(rx2051_pos)
    $P10 = rx2051_cur."parameter"()
    unless $P10, rx2051_fail
    rx2051_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parameter")
    rx2051_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2051_cur."!cursor_pos"(rx2051_pos)
    $P10 = rx2051_cur."ws"()
    unless $P10, rx2051_fail
    rx2051_pos = $P10."pos"()
    set_addr $I10, rxquantr2057_done
    (rx2051_rep) = rx2051_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2057_done
    rx2051_cur."!mark_push"(rx2051_rep, rx2051_pos, $I10)
  # rx literal  ","
    add $I11, rx2051_pos, 1
    gt $I11, rx2051_eos, rx2051_fail
    sub $I11, rx2051_pos, rx2051_off
    ord $I11, rx2051_tgt, $I11
    ne $I11, 44, rx2051_fail
    add rx2051_pos, 1
    goto rxquantr2057_loop
  rxquantr2057_done:
    set_addr $I10, rxquantr2056_done
    (rx2051_rep) = rx2051_cur."!mark_commit"($I10)
  rxquantr2056_done:
.annotate 'line', 1104
  # rx pass
    rx2051_cur."!cursor_pass"(rx2051_pos, "signature")
    if_null rx2051_debug, debug_1496
    rx2051_cur."!cursor_debug"("PASS", "signature", " at pos=", rx2051_pos)
  debug_1496:
    .return (rx2051_cur)
  rx2051_restart:
    if_null rx2051_debug, debug_1497
    rx2051_cur."!cursor_debug"("NEXT", "signature")
  debug_1497:
  rx2051_fail:
    (rx2051_rep, rx2051_pos, $I10, $P10) = rx2051_cur."!mark_fail"(0)
    lt rx2051_pos, -1, rx2051_done
    eq rx2051_pos, -1, rx2051_fail
    jump $I10
  rx2051_done:
    rx2051_cur."!cursor_fail"()
    if_null rx2051_debug, debug_1498
    rx2051_cur."!cursor_debug"("FAIL", "signature")
  debug_1498:
    .return (rx2051_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2054"  :anon :subid("583_1335114138.94729") :outer("215_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1105
    find_dynamic_lex $P107, "$*INVOCANT_OK"
    unless_null $P107, vivify_1494
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$INVOCANT_OK"]
    unless_null $P107, vivify_1495
    die "Contextual $*INVOCANT_OK not found"
  vivify_1495:
  vivify_1494:
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__signature"  :subid("216_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1104
    new $P106, "ResizablePMCArray"
    push $P106, ""
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "parameter"  :subid("217_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1109
    .local string rx2060_tgt
    .local int rx2060_pos
    .local int rx2060_off
    .local int rx2060_eos
    .local int rx2060_rep
    .local pmc rx2060_cur
    .local pmc rx2060_debug
    (rx2060_cur, rx2060_pos, rx2060_tgt, $I10) = self."!cursor_start"()
    rx2060_cur."!cursor_caparray"("typename", "definedness", "default_value")
    .lex unicode:"$\x{a2}", rx2060_cur
    .local pmc match
    .lex "$/", match
    length rx2060_eos, rx2060_tgt
    gt rx2060_pos, rx2060_eos, rx2060_done
    set rx2060_off, 0
    lt rx2060_pos, 2, rx2060_start
    sub rx2060_off, rx2060_pos, 1
    substr rx2060_tgt, rx2060_tgt, rx2060_off
  rx2060_start:
    eq $I10, 1, rx2060_restart
    if_null rx2060_debug, debug_1499
    rx2060_cur."!cursor_debug"("START", "parameter")
  debug_1499:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2061_done
    goto rxscan2061_scan
  rxscan2061_loop:
    (rx2060_pos) = rx2060_cur."from"()
    inc rx2060_pos
    rx2060_cur."!cursor_from"(rx2060_pos)
    ge rx2060_pos, rx2060_eos, rxscan2061_done
  rxscan2061_scan:
    set_addr $I10, rxscan2061_loop
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  rxscan2061_done:
.annotate 'line', 1110
  # rx rxquantr2062 ** 0..*
    set_addr $I10, rxquantr2062_done
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  rxquantr2062_loop:
  # rx subrule "typename" subtype=capture negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."typename"()
    unless $P10, rx2060_fail
    rx2060_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("typename")
    rx2060_pos = $P10."pos"()
  # rx rxquantr2063 ** 0..1
    set_addr $I10, rxquantr2063_done
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  rxquantr2063_loop:
  # rx literal  ":"
    add $I11, rx2060_pos, 1
    gt $I11, rx2060_eos, rx2060_fail
    sub $I11, rx2060_pos, rx2060_off
    ord $I11, rx2060_tgt, $I11
    ne $I11, 58, rx2060_fail
    add rx2060_pos, 1
  # rx subcapture "definedness"
    set_addr $I10, rxcap_2064_fail
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2060_pos, rx2060_eos, rx2060_fail
    sub $I10, rx2060_pos, rx2060_off
    substr $S10, rx2060_tgt, $I10, 1
    index $I11, "_DU", $S10
    lt $I11, 0, rx2060_fail
    inc rx2060_pos
    set_addr $I10, rxcap_2064_fail
    ($I12, $I11) = rx2060_cur."!mark_peek"($I10)
    rx2060_cur."!cursor_pos"($I11)
    ($P10) = rx2060_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2060_pos, "")
    rx2060_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("definedness")
    goto rxcap_2064_done
  rxcap_2064_fail:
    goto rx2060_fail
  rxcap_2064_done:
    set_addr $I10, rxquantr2063_done
    (rx2060_rep) = rx2060_cur."!mark_commit"($I10)
  rxquantr2063_done:
  # rx subrule "ws" subtype=method negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."ws"()
    unless $P10, rx2060_fail
    rx2060_pos = $P10."pos"()
    set_addr $I10, rxquantr2062_done
    (rx2060_rep) = rx2060_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2062_done
    rx2060_cur."!mark_push"(rx2060_rep, rx2060_pos, $I10)
    goto rxquantr2062_loop
  rxquantr2062_done:
  alt2065_0:
.annotate 'line', 1111
    set_addr $I10, alt2065_1
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
.annotate 'line', 1112
  # rx subcapture "quant"
    set_addr $I10, rxcap_2066_fail
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  # rx literal  "*"
    add $I11, rx2060_pos, 1
    gt $I11, rx2060_eos, rx2060_fail
    sub $I11, rx2060_pos, rx2060_off
    ord $I11, rx2060_tgt, $I11
    ne $I11, 42, rx2060_fail
    add rx2060_pos, 1
    set_addr $I10, rxcap_2066_fail
    ($I12, $I11) = rx2060_cur."!mark_peek"($I10)
    rx2060_cur."!cursor_pos"($I11)
    ($P10) = rx2060_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2060_pos, "")
    rx2060_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_2066_done
  rxcap_2066_fail:
    goto rx2060_fail
  rxcap_2066_done:
  # rx subrule "param_var" subtype=capture negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."param_var"()
    unless $P10, rx2060_fail
    rx2060_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2060_pos = $P10."pos"()
    goto alt2065_end
  alt2065_1:
  alt2067_0:
.annotate 'line', 1113
    set_addr $I10, alt2067_1
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  # rx subrule "param_var" subtype=capture negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."param_var"()
    unless $P10, rx2060_fail
    rx2060_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2060_pos = $P10."pos"()
    goto alt2067_end
  alt2067_1:
  # rx subrule "named_param" subtype=capture negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."named_param"()
    unless $P10, rx2060_fail
    rx2060_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("named_param")
    rx2060_pos = $P10."pos"()
  alt2067_end:
  # rx subcapture "quant"
    set_addr $I10, rxcap_2069_fail
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  alt2068_0:
    set_addr $I10, alt2068_1
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  # rx literal  "?"
    add $I11, rx2060_pos, 1
    gt $I11, rx2060_eos, rx2060_fail
    sub $I11, rx2060_pos, rx2060_off
    ord $I11, rx2060_tgt, $I11
    ne $I11, 63, rx2060_fail
    add rx2060_pos, 1
    goto alt2068_end
  alt2068_1:
    set_addr $I10, alt2068_2
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  # rx literal  "!"
    add $I11, rx2060_pos, 1
    gt $I11, rx2060_eos, rx2060_fail
    sub $I11, rx2060_pos, rx2060_off
    ord $I11, rx2060_tgt, $I11
    ne $I11, 33, rx2060_fail
    add rx2060_pos, 1
    goto alt2068_end
  alt2068_2:
  alt2068_end:
    set_addr $I10, rxcap_2069_fail
    ($I12, $I11) = rx2060_cur."!mark_peek"($I10)
    rx2060_cur."!cursor_pos"($I11)
    ($P10) = rx2060_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2060_pos, "")
    rx2060_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_2069_done
  rxcap_2069_fail:
    goto rx2060_fail
  rxcap_2069_done:
  alt2065_end:
.annotate 'line', 1115
  # rx rxquantr2070 ** 0..1
    set_addr $I10, rxquantr2070_done
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10)
  rxquantr2070_loop:
  # rx subrule "default_value" subtype=capture negate=
    rx2060_cur."!cursor_pos"(rx2060_pos)
    $P10 = rx2060_cur."default_value"()
    unless $P10, rx2060_fail
    goto rxsubrule2071_pass
  rxsubrule2071_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2060_fail
  rxsubrule2071_pass:
    set_addr $I10, rxsubrule2071_back
    rx2060_cur."!mark_push"(0, rx2060_pos, $I10, $P10)
    $P10."!cursor_names"("default_value")
    rx2060_pos = $P10."pos"()
    set_addr $I10, rxquantr2070_done
    (rx2060_rep) = rx2060_cur."!mark_commit"($I10)
  rxquantr2070_done:
.annotate 'line', 1109
  # rx pass
    rx2060_cur."!cursor_pass"(rx2060_pos, "parameter")
    if_null rx2060_debug, debug_1500
    rx2060_cur."!cursor_debug"("PASS", "parameter", " at pos=", rx2060_pos)
  debug_1500:
    .return (rx2060_cur)
  rx2060_restart:
    if_null rx2060_debug, debug_1501
    rx2060_cur."!cursor_debug"("NEXT", "parameter")
  debug_1501:
  rx2060_fail:
    (rx2060_rep, rx2060_pos, $I10, $P10) = rx2060_cur."!mark_fail"(0)
    lt rx2060_pos, -1, rx2060_done
    eq rx2060_pos, -1, rx2060_fail
    jump $I10
  rx2060_done:
    rx2060_cur."!cursor_fail"()
    if_null rx2060_debug, debug_1502
    rx2060_cur."!cursor_debug"("FAIL", "parameter")
  debug_1502:
    .return (rx2060_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__parameter"  :subid("218_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1109
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "param_var"  :subid("219_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1118
    .local string rx2074_tgt
    .local int rx2074_pos
    .local int rx2074_off
    .local int rx2074_eos
    .local int rx2074_rep
    .local pmc rx2074_cur
    .local pmc rx2074_debug
    (rx2074_cur, rx2074_pos, rx2074_tgt, $I10) = self."!cursor_start"()
    rx2074_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx2074_cur
    .local pmc match
    .lex "$/", match
    length rx2074_eos, rx2074_tgt
    gt rx2074_pos, rx2074_eos, rx2074_done
    set rx2074_off, 0
    lt rx2074_pos, 2, rx2074_start
    sub rx2074_off, rx2074_pos, 1
    substr rx2074_tgt, rx2074_tgt, rx2074_off
  rx2074_start:
    eq $I10, 1, rx2074_restart
    if_null rx2074_debug, debug_1503
    rx2074_cur."!cursor_debug"("START", "param_var")
  debug_1503:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2075_done
    goto rxscan2075_scan
  rxscan2075_loop:
    (rx2074_pos) = rx2074_cur."from"()
    inc rx2074_pos
    rx2074_cur."!cursor_from"(rx2074_pos)
    ge rx2074_pos, rx2074_eos, rxscan2075_done
  rxscan2075_scan:
    set_addr $I10, rxscan2075_loop
    rx2074_cur."!mark_push"(0, rx2074_pos, $I10)
  rxscan2075_done:
.annotate 'line', 1119
  # rx subrule "sigil" subtype=capture negate=
    rx2074_cur."!cursor_pos"(rx2074_pos)
    $P10 = rx2074_cur."sigil"()
    unless $P10, rx2074_fail
    rx2074_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx2074_pos = $P10."pos"()
  # rx rxquantr2076 ** 0..1
    set_addr $I10, rxquantr2076_done
    rx2074_cur."!mark_push"(0, rx2074_pos, $I10)
  rxquantr2076_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx2074_cur."!cursor_pos"(rx2074_pos)
    $P10 = rx2074_cur."twigil"()
    unless $P10, rx2074_fail
    goto rxsubrule2077_pass
  rxsubrule2077_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2074_fail
  rxsubrule2077_pass:
    set_addr $I10, rxsubrule2077_back
    rx2074_cur."!mark_push"(0, rx2074_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx2074_pos = $P10."pos"()
    set_addr $I10, rxquantr2076_done
    (rx2074_rep) = rx2074_cur."!mark_commit"($I10)
  rxquantr2076_done:
  alt2078_0:
.annotate 'line', 1120
    set_addr $I10, alt2078_1
    rx2074_cur."!mark_push"(0, rx2074_pos, $I10)
  # rx subrule "ident" subtype=capture negate=
    rx2074_cur."!cursor_pos"(rx2074_pos)
    $P10 = rx2074_cur."ident"()
    unless $P10, rx2074_fail
    rx2074_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx2074_pos = $P10."pos"()
    goto alt2078_end
  alt2078_1:
  # rx subcapture "name"
    set_addr $I10, rxcap_2079_fail
    rx2074_cur."!mark_push"(0, rx2074_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2074_pos, rx2074_eos, rx2074_fail
    sub $I10, rx2074_pos, rx2074_off
    substr $S10, rx2074_tgt, $I10, 1
    index $I11, "/!", $S10
    lt $I11, 0, rx2074_fail
    inc rx2074_pos
    set_addr $I10, rxcap_2079_fail
    ($I12, $I11) = rx2074_cur."!mark_peek"($I10)
    rx2074_cur."!cursor_pos"($I11)
    ($P10) = rx2074_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2074_pos, "")
    rx2074_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    goto rxcap_2079_done
  rxcap_2079_fail:
    goto rx2074_fail
  rxcap_2079_done:
  alt2078_end:
.annotate 'line', 1118
  # rx pass
    rx2074_cur."!cursor_pass"(rx2074_pos, "param_var")
    if_null rx2074_debug, debug_1504
    rx2074_cur."!cursor_debug"("PASS", "param_var", " at pos=", rx2074_pos)
  debug_1504:
    .return (rx2074_cur)
  rx2074_restart:
    if_null rx2074_debug, debug_1505
    rx2074_cur."!cursor_debug"("NEXT", "param_var")
  debug_1505:
  rx2074_fail:
    (rx2074_rep, rx2074_pos, $I10, $P10) = rx2074_cur."!mark_fail"(0)
    lt rx2074_pos, -1, rx2074_done
    eq rx2074_pos, -1, rx2074_fail
    jump $I10
  rx2074_done:
    rx2074_cur."!cursor_fail"()
    if_null rx2074_debug, debug_1506
    rx2074_cur."!cursor_debug"("FAIL", "param_var")
  debug_1506:
    .return (rx2074_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__param_var"  :subid("220_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1118
    $P103 = self."!PREFIX__!subrule"("sigil", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "named_param"  :subid("221_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1123
    .local string rx2082_tgt
    .local int rx2082_pos
    .local int rx2082_off
    .local int rx2082_eos
    .local int rx2082_rep
    .local pmc rx2082_cur
    .local pmc rx2082_debug
    (rx2082_cur, rx2082_pos, rx2082_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2082_cur
    .local pmc match
    .lex "$/", match
    length rx2082_eos, rx2082_tgt
    gt rx2082_pos, rx2082_eos, rx2082_done
    set rx2082_off, 0
    lt rx2082_pos, 2, rx2082_start
    sub rx2082_off, rx2082_pos, 1
    substr rx2082_tgt, rx2082_tgt, rx2082_off
  rx2082_start:
    eq $I10, 1, rx2082_restart
    if_null rx2082_debug, debug_1507
    rx2082_cur."!cursor_debug"("START", "named_param")
  debug_1507:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2083_done
    goto rxscan2083_scan
  rxscan2083_loop:
    (rx2082_pos) = rx2082_cur."from"()
    inc rx2082_pos
    rx2082_cur."!cursor_from"(rx2082_pos)
    ge rx2082_pos, rx2082_eos, rxscan2083_done
  rxscan2083_scan:
    set_addr $I10, rxscan2083_loop
    rx2082_cur."!mark_push"(0, rx2082_pos, $I10)
  rxscan2083_done:
.annotate 'line', 1124
  # rx literal  ":"
    add $I11, rx2082_pos, 1
    gt $I11, rx2082_eos, rx2082_fail
    sub $I11, rx2082_pos, rx2082_off
    ord $I11, rx2082_tgt, $I11
    ne $I11, 58, rx2082_fail
    add rx2082_pos, 1
  # rx subrule "param_var" subtype=capture negate=
    rx2082_cur."!cursor_pos"(rx2082_pos)
    $P10 = rx2082_cur."param_var"()
    unless $P10, rx2082_fail
    rx2082_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2082_pos = $P10."pos"()
.annotate 'line', 1123
  # rx pass
    rx2082_cur."!cursor_pass"(rx2082_pos, "named_param")
    if_null rx2082_debug, debug_1508
    rx2082_cur."!cursor_debug"("PASS", "named_param", " at pos=", rx2082_pos)
  debug_1508:
    .return (rx2082_cur)
  rx2082_restart:
    if_null rx2082_debug, debug_1509
    rx2082_cur."!cursor_debug"("NEXT", "named_param")
  debug_1509:
  rx2082_fail:
    (rx2082_rep, rx2082_pos, $I10, $P10) = rx2082_cur."!mark_fail"(0)
    lt rx2082_pos, -1, rx2082_done
    eq rx2082_pos, -1, rx2082_fail
    jump $I10
  rx2082_done:
    rx2082_cur."!cursor_fail"()
    if_null rx2082_debug, debug_1510
    rx2082_cur."!cursor_debug"("FAIL", "named_param")
  debug_1510:
    .return (rx2082_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__named_param"  :subid("222_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1123
    $P103 = self."!PREFIX__!subrule"("param_var", ":")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "default_value"  :subid("223_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1127
    .local string rx2086_tgt
    .local int rx2086_pos
    .local int rx2086_off
    .local int rx2086_eos
    .local int rx2086_rep
    .local pmc rx2086_cur
    .local pmc rx2086_debug
    (rx2086_cur, rx2086_pos, rx2086_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2086_cur
    .local pmc match
    .lex "$/", match
    length rx2086_eos, rx2086_tgt
    gt rx2086_pos, rx2086_eos, rx2086_done
    set rx2086_off, 0
    lt rx2086_pos, 2, rx2086_start
    sub rx2086_off, rx2086_pos, 1
    substr rx2086_tgt, rx2086_tgt, rx2086_off
  rx2086_start:
    eq $I10, 1, rx2086_restart
    if_null rx2086_debug, debug_1511
    rx2086_cur."!cursor_debug"("START", "default_value")
  debug_1511:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2087_done
    goto rxscan2087_scan
  rxscan2087_loop:
    (rx2086_pos) = rx2086_cur."from"()
    inc rx2086_pos
    rx2086_cur."!cursor_from"(rx2086_pos)
    ge rx2086_pos, rx2086_eos, rxscan2087_done
  rxscan2087_scan:
    set_addr $I10, rxscan2087_loop
    rx2086_cur."!mark_push"(0, rx2086_pos, $I10)
  rxscan2087_done:
  # rx subrule "ws" subtype=method negate=
    rx2086_cur."!cursor_pos"(rx2086_pos)
    $P10 = rx2086_cur."ws"()
    unless $P10, rx2086_fail
    rx2086_pos = $P10."pos"()
  # rx literal  "="
    add $I11, rx2086_pos, 1
    gt $I11, rx2086_eos, rx2086_fail
    sub $I11, rx2086_pos, rx2086_off
    ord $I11, rx2086_tgt, $I11
    ne $I11, 61, rx2086_fail
    add rx2086_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2086_cur."!cursor_pos"(rx2086_pos)
    $P10 = rx2086_cur."ws"()
    unless $P10, rx2086_fail
    rx2086_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2086_cur."!cursor_pos"(rx2086_pos)
    $P10 = rx2086_cur."EXPR"("i=")
    unless $P10, rx2086_fail
    rx2086_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2086_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2086_cur."!cursor_pos"(rx2086_pos)
    $P10 = rx2086_cur."ws"()
    unless $P10, rx2086_fail
    rx2086_pos = $P10."pos"()
  # rx pass
    rx2086_cur."!cursor_pass"(rx2086_pos, "default_value")
    if_null rx2086_debug, debug_1512
    rx2086_cur."!cursor_debug"("PASS", "default_value", " at pos=", rx2086_pos)
  debug_1512:
    .return (rx2086_cur)
  rx2086_restart:
    if_null rx2086_debug, debug_1513
    rx2086_cur."!cursor_debug"("NEXT", "default_value")
  debug_1513:
  rx2086_fail:
    (rx2086_rep, rx2086_pos, $I10, $P10) = rx2086_cur."!mark_fail"(0)
    lt rx2086_pos, -1, rx2086_done
    eq rx2086_pos, -1, rx2086_fail
    jump $I10
  rx2086_done:
    rx2086_cur."!cursor_fail"()
    if_null rx2086_debug, debug_1514
    rx2086_cur."!cursor_debug"("FAIL", "default_value")
  debug_1514:
    .return (rx2086_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__default_value"  :subid("224_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1127
    $P106 = self."!PREFIX__!subrule"("ws", "")
    new $P107, "ResizablePMCArray"
    push $P107, $P106
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait"  :subid("225_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1129
    .local string rx2090_tgt
    .local int rx2090_pos
    .local int rx2090_off
    .local int rx2090_eos
    .local int rx2090_rep
    .local pmc rx2090_cur
    .local pmc rx2090_debug
    (rx2090_cur, rx2090_pos, rx2090_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2090_cur
    .local pmc match
    .lex "$/", match
    length rx2090_eos, rx2090_tgt
    gt rx2090_pos, rx2090_eos, rx2090_done
    set rx2090_off, 0
    lt rx2090_pos, 2, rx2090_start
    sub rx2090_off, rx2090_pos, 1
    substr rx2090_tgt, rx2090_tgt, rx2090_off
  rx2090_start:
    eq $I10, 1, rx2090_restart
    if_null rx2090_debug, debug_1515
    rx2090_cur."!cursor_debug"("START", "trait")
  debug_1515:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2091_done
    goto rxscan2091_scan
  rxscan2091_loop:
    (rx2090_pos) = rx2090_cur."from"()
    inc rx2090_pos
    rx2090_cur."!cursor_from"(rx2090_pos)
    ge rx2090_pos, rx2090_eos, rxscan2091_done
  rxscan2091_scan:
    set_addr $I10, rxscan2091_loop
    rx2090_cur."!mark_push"(0, rx2090_pos, $I10)
  rxscan2091_done:
  # rx subrule "ws" subtype=method negate=
    rx2090_cur."!cursor_pos"(rx2090_pos)
    $P10 = rx2090_cur."ws"()
    unless $P10, rx2090_fail
    rx2090_pos = $P10."pos"()
  # rx subrule "trait_mod" subtype=capture negate=
    rx2090_cur."!cursor_pos"(rx2090_pos)
    $P10 = rx2090_cur."trait_mod"()
    unless $P10, rx2090_fail
    rx2090_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("trait_mod")
    rx2090_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2090_cur."!cursor_pos"(rx2090_pos)
    $P10 = rx2090_cur."ws"()
    unless $P10, rx2090_fail
    rx2090_pos = $P10."pos"()
  # rx pass
    rx2090_cur."!cursor_pass"(rx2090_pos, "trait")
    if_null rx2090_debug, debug_1516
    rx2090_cur."!cursor_debug"("PASS", "trait", " at pos=", rx2090_pos)
  debug_1516:
    .return (rx2090_cur)
  rx2090_restart:
    if_null rx2090_debug, debug_1517
    rx2090_cur."!cursor_debug"("NEXT", "trait")
  debug_1517:
  rx2090_fail:
    (rx2090_rep, rx2090_pos, $I10, $P10) = rx2090_cur."!mark_fail"(0)
    lt rx2090_pos, -1, rx2090_done
    eq rx2090_pos, -1, rx2090_fail
    jump $I10
  rx2090_done:
    rx2090_cur."!cursor_fail"()
    if_null rx2090_debug, debug_1518
    rx2090_cur."!cursor_debug"("FAIL", "trait")
  debug_1518:
    .return (rx2090_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait"  :subid("226_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1129
    $P105 = self."!PREFIX__!subrule"("ws", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod"  :subid("227_1335114138.94729")
    .param pmc param_2094
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1131
    .lex "self", param_2094
    $P103 = param_2094."!protoregex"("trait_mod")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod"  :subid("228_1335114138.94729")
    .param pmc param_2096
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1131
    .lex "self", param_2096
    $P104 = param_2096."!PREFIX__!protoregex"("trait_mod")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod:sym<is>"  :subid("229_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1132
    .local string rx2098_tgt
    .local int rx2098_pos
    .local int rx2098_off
    .local int rx2098_eos
    .local int rx2098_rep
    .local pmc rx2098_cur
    .local pmc rx2098_debug
    (rx2098_cur, rx2098_pos, rx2098_tgt, $I10) = self."!cursor_start"()
    rx2098_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx2098_cur
    .local pmc match
    .lex "$/", match
    length rx2098_eos, rx2098_tgt
    gt rx2098_pos, rx2098_eos, rx2098_done
    set rx2098_off, 0
    lt rx2098_pos, 2, rx2098_start
    sub rx2098_off, rx2098_pos, 1
    substr rx2098_tgt, rx2098_tgt, rx2098_off
  rx2098_start:
    eq $I10, 1, rx2098_restart
    if_null rx2098_debug, debug_1519
    rx2098_cur."!cursor_debug"("START", "trait_mod:sym<is>")
  debug_1519:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2099_done
    goto rxscan2099_scan
  rxscan2099_loop:
    (rx2098_pos) = rx2098_cur."from"()
    inc rx2098_pos
    rx2098_cur."!cursor_from"(rx2098_pos)
    ge rx2098_pos, rx2098_eos, rxscan2099_done
  rxscan2099_scan:
    set_addr $I10, rxscan2099_loop
    rx2098_cur."!mark_push"(0, rx2098_pos, $I10)
  rxscan2099_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2100_fail
    rx2098_cur."!mark_push"(0, rx2098_pos, $I10)
  # rx literal  "is"
    add $I11, rx2098_pos, 2
    gt $I11, rx2098_eos, rx2098_fail
    sub $I11, rx2098_pos, rx2098_off
    substr $S10, rx2098_tgt, $I11, 2
    ne $S10, "is", rx2098_fail
    add rx2098_pos, 2
    set_addr $I10, rxcap_2100_fail
    ($I12, $I11) = rx2098_cur."!mark_peek"($I10)
    rx2098_cur."!cursor_pos"($I11)
    ($P10) = rx2098_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2098_pos, "")
    rx2098_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2100_done
  rxcap_2100_fail:
    goto rx2098_fail
  rxcap_2100_done:
  # rx subrule "ws" subtype=method negate=
    rx2098_cur."!cursor_pos"(rx2098_pos)
    $P10 = rx2098_cur."ws"()
    unless $P10, rx2098_fail
    rx2098_pos = $P10."pos"()
  # rx subrule "deflongname" subtype=capture negate=
    rx2098_cur."!cursor_pos"(rx2098_pos)
    $P10 = rx2098_cur."deflongname"()
    unless $P10, rx2098_fail
    rx2098_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx2098_pos = $P10."pos"()
  # rx rxquantr2101 ** 0..1
    set_addr $I10, rxquantr2101_done
    rx2098_cur."!mark_push"(0, rx2098_pos, $I10)
  rxquantr2101_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx2098_cur."!cursor_pos"(rx2098_pos)
    $P10 = rx2098_cur."circumfix"()
    unless $P10, rx2098_fail
    goto rxsubrule2102_pass
  rxsubrule2102_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2098_fail
  rxsubrule2102_pass:
    set_addr $I10, rxsubrule2102_back
    rx2098_cur."!mark_push"(0, rx2098_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx2098_pos = $P10."pos"()
    set_addr $I10, rxquantr2101_done
    (rx2098_rep) = rx2098_cur."!mark_commit"($I10)
  rxquantr2101_done:
  # rx subrule "ws" subtype=method negate=
    rx2098_cur."!cursor_pos"(rx2098_pos)
    $P10 = rx2098_cur."ws"()
    unless $P10, rx2098_fail
    rx2098_pos = $P10."pos"()
  # rx pass
    rx2098_cur."!cursor_pass"(rx2098_pos, "trait_mod:sym<is>")
    if_null rx2098_debug, debug_1520
    rx2098_cur."!cursor_debug"("PASS", "trait_mod:sym<is>", " at pos=", rx2098_pos)
  debug_1520:
    .return (rx2098_cur)
  rx2098_restart:
    if_null rx2098_debug, debug_1521
    rx2098_cur."!cursor_debug"("NEXT", "trait_mod:sym<is>")
  debug_1521:
  rx2098_fail:
    (rx2098_rep, rx2098_pos, $I10, $P10) = rx2098_cur."!mark_fail"(0)
    lt rx2098_pos, -1, rx2098_done
    eq rx2098_pos, -1, rx2098_fail
    jump $I10
  rx2098_done:
    rx2098_cur."!cursor_fail"()
    if_null rx2098_debug, debug_1522
    rx2098_cur."!cursor_debug"("FAIL", "trait_mod:sym<is>")
  debug_1522:
    .return (rx2098_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod:sym<is>"  :subid("230_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1132
    $P105 = self."!PREFIX__!subrule"("ws", "is")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "regex_declarator"  :subid("231_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1134
    .local string rx2105_tgt
    .local int rx2105_pos
    .local int rx2105_off
    .local int rx2105_eos
    .local int rx2105_rep
    .local pmc rx2105_cur
    .local pmc rx2105_debug
    (rx2105_cur, rx2105_pos, rx2105_tgt, $I10) = self."!cursor_start"()
    rx2105_cur."!cursor_caparray"("signature")
    .lex unicode:"$\x{a2}", rx2105_cur
    .local pmc match
    .lex "$/", match
    length rx2105_eos, rx2105_tgt
    gt rx2105_pos, rx2105_eos, rx2105_done
    set rx2105_off, 0
    lt rx2105_pos, 2, rx2105_start
    sub rx2105_off, rx2105_pos, 1
    substr rx2105_tgt, rx2105_tgt, rx2105_off
  rx2105_start:
    eq $I10, 1, rx2105_restart
    if_null rx2105_debug, debug_1523
    rx2105_cur."!cursor_debug"("START", "regex_declarator")
  debug_1523:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2106_done
    goto rxscan2106_scan
  rxscan2106_loop:
    (rx2105_pos) = rx2105_cur."from"()
    inc rx2105_pos
    rx2105_cur."!cursor_from"(rx2105_pos)
    ge rx2105_pos, rx2105_eos, rxscan2106_done
  rxscan2106_scan:
    set_addr $I10, rxscan2106_loop
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  rxscan2106_done:
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  alt2107_0:
.annotate 'line', 1135
    set_addr $I10, alt2107_1
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
.annotate 'line', 1136
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx subcapture "proto"
    set_addr $I10, rxcap_2108_fail
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  # rx literal  "proto"
    add $I11, rx2105_pos, 5
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 5
    ne $S10, "proto", rx2105_fail
    add rx2105_pos, 5
    set_addr $I10, rxcap_2108_fail
    ($I12, $I11) = rx2105_cur."!mark_peek"($I10)
    rx2105_cur."!cursor_pos"($I11)
    ($P10) = rx2105_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2105_pos, "")
    rx2105_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("proto")
    goto rxcap_2108_done
  rxcap_2108_fail:
    goto rx2105_fail
  rxcap_2108_done:
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  alt2109_0:
    set_addr $I10, alt2109_1
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  # rx literal  "regex"
    add $I11, rx2105_pos, 5
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 5
    ne $S10, "regex", rx2105_fail
    add rx2105_pos, 5
    goto alt2109_end
  alt2109_1:
    set_addr $I10, alt2109_2
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  # rx literal  "token"
    add $I11, rx2105_pos, 5
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 5
    ne $S10, "token", rx2105_fail
    add rx2105_pos, 5
    goto alt2109_end
  alt2109_2:
  # rx literal  "rule"
    add $I11, rx2105_pos, 4
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 4
    ne $S10, "rule", rx2105_fail
    add rx2105_pos, 4
  alt2109_end:
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
.annotate 'line', 1137
  # rx subrule "deflongname" subtype=capture negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."deflongname"()
    unless $P10, rx2105_fail
    rx2105_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2105_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  alt2110_0:
.annotate 'line', 1138
    set_addr $I10, alt2110_1
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
.annotate 'line', 1139
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx2105_pos, 1
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    ord $I11, rx2105_tgt, $I11
    ne $I11, 123, rx2105_fail
    add rx2105_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx literal  "<...>"
    add $I11, rx2105_pos, 5
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 5
    ne $S10, "<...>", rx2105_fail
    add rx2105_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2105_pos, 1
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    ord $I11, rx2105_tgt, $I11
    ne $I11, 125, rx2105_fail
    add rx2105_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ENDSTMT"()
    unless $P10, rx2105_fail
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
    goto alt2110_end
  alt2110_1:
    set_addr $I10, alt2110_2
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
.annotate 'line', 1140
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx2105_pos, 1
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    ord $I11, rx2105_tgt, $I11
    ne $I11, 123, rx2105_fail
    add rx2105_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx literal  "<*>"
    add $I11, rx2105_pos, 3
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 3
    ne $S10, "<*>", rx2105_fail
    add rx2105_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2105_pos, 1
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    ord $I11, rx2105_tgt, $I11
    ne $I11, 125, rx2105_fail
    add rx2105_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ENDSTMT"()
    unless $P10, rx2105_fail
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
    goto alt2110_end
  alt2110_2:
.annotate 'line', 1141
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."panic"("Proto regex body must be <*> (or <...>, which is deprecated)")
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  alt2110_end:
.annotate 'line', 1142
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
.annotate 'line', 1136
    goto alt2107_end
  alt2107_1:
.annotate 'line', 1143
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx subcapture "sym"
    set_addr $I10, rxcap_2112_fail
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  alt2111_0:
    set_addr $I10, alt2111_1
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  # rx literal  "regex"
    add $I11, rx2105_pos, 5
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 5
    ne $S10, "regex", rx2105_fail
    add rx2105_pos, 5
    goto alt2111_end
  alt2111_1:
    set_addr $I10, alt2111_2
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  # rx literal  "token"
    add $I11, rx2105_pos, 5
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 5
    ne $S10, "token", rx2105_fail
    add rx2105_pos, 5
    goto alt2111_end
  alt2111_2:
  # rx literal  "rule"
    add $I11, rx2105_pos, 4
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    substr $S10, rx2105_tgt, $I11, 4
    ne $S10, "rule", rx2105_fail
    add rx2105_pos, 4
  alt2111_end:
    set_addr $I10, rxcap_2112_fail
    ($I12, $I11) = rx2105_cur."!mark_peek"($I10)
    rx2105_cur."!cursor_pos"($I11)
    ($P10) = rx2105_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2105_pos, "")
    rx2105_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2112_done
  rxcap_2112_fail:
    goto rx2105_fail
  rxcap_2112_done:
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
.annotate 'line', 1144
  # rx subrule "deflongname" subtype=capture negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."deflongname"()
    unless $P10, rx2105_fail
    rx2105_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2105_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
.annotate 'line', 1145
  # rx subrule "newpad" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."newpad"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
.annotate 'line', 1146
  # rx rxquantr2113 ** 0..1
    set_addr $I10, rxquantr2113_done
    rx2105_cur."!mark_push"(0, rx2105_pos, $I10)
  rxquantr2113_loop:
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2105_pos, 1
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    ord $I11, rx2105_tgt, $I11
    ne $I11, 40, rx2105_fail
    add rx2105_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."signature"()
    unless $P10, rx2105_fail
    rx2105_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx2105_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2105_pos, 1
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    ord $I11, rx2105_tgt, $I11
    ne $I11, 41, rx2105_fail
    add rx2105_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
    set_addr $I10, rxquantr2113_done
    (rx2105_rep) = rx2105_cur."!mark_commit"($I10)
  rxquantr2113_done:
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
.annotate 'line', 1147
  # rx reduce name="regex_declarator" key="open"
    rx2105_cur."!cursor_pos"(rx2105_pos)
    rx2105_cur."!reduce"("regex_declarator", "open")
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
.annotate 'line', 1148
  # rx literal  "{"
    add $I11, rx2105_pos, 1
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    ord $I11, rx2105_tgt, $I11
    ne $I11, 123, rx2105_fail
    add rx2105_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."LANG"("Regex", "nibbler")
    unless $P10, rx2105_fail
    rx2105_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx2105_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2105_pos, 1
    gt $I11, rx2105_eos, rx2105_fail
    sub $I11, rx2105_pos, rx2105_off
    ord $I11, rx2105_tgt, $I11
    ne $I11, 125, rx2105_fail
    add rx2105_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ENDSTMT"()
    unless $P10, rx2105_fail
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
  alt2107_end:
.annotate 'line', 1149
  # rx subrule "ws" subtype=method negate=
    rx2105_cur."!cursor_pos"(rx2105_pos)
    $P10 = rx2105_cur."ws"()
    unless $P10, rx2105_fail
    rx2105_pos = $P10."pos"()
.annotate 'line', 1134
  # rx pass
    rx2105_cur."!cursor_pass"(rx2105_pos, "regex_declarator")
    if_null rx2105_debug, debug_1524
    rx2105_cur."!cursor_debug"("PASS", "regex_declarator", " at pos=", rx2105_pos)
  debug_1524:
    .return (rx2105_cur)
  rx2105_restart:
    if_null rx2105_debug, debug_1525
    rx2105_cur."!cursor_debug"("NEXT", "regex_declarator")
  debug_1525:
  rx2105_fail:
    (rx2105_rep, rx2105_pos, $I10, $P10) = rx2105_cur."!mark_fail"(0)
    lt rx2105_pos, -1, rx2105_done
    eq rx2105_pos, -1, rx2105_fail
    jump $I10
  rx2105_done:
    rx2105_cur."!cursor_fail"()
    if_null rx2105_debug, debug_1526
    rx2105_cur."!cursor_debug"("FAIL", "regex_declarator")
  debug_1526:
    .return (rx2105_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__regex_declarator"  :subid("232_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1134
    $P131 = self."!PREFIX__!subrule"("ws", "")
    new $P132, "ResizablePMCArray"
    push $P132, $P131
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "dotty"  :subid("233_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1152
    .local string rx2116_tgt
    .local int rx2116_pos
    .local int rx2116_off
    .local int rx2116_eos
    .local int rx2116_rep
    .local pmc rx2116_cur
    .local pmc rx2116_debug
    (rx2116_cur, rx2116_pos, rx2116_tgt, $I10) = self."!cursor_start"()
    rx2116_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2116_cur
    .local pmc match
    .lex "$/", match
    length rx2116_eos, rx2116_tgt
    gt rx2116_pos, rx2116_eos, rx2116_done
    set rx2116_off, 0
    lt rx2116_pos, 2, rx2116_start
    sub rx2116_off, rx2116_pos, 1
    substr rx2116_tgt, rx2116_tgt, rx2116_off
  rx2116_start:
    eq $I10, 1, rx2116_restart
    if_null rx2116_debug, debug_1527
    rx2116_cur."!cursor_debug"("START", "dotty")
  debug_1527:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2117_done
    goto rxscan2117_scan
  rxscan2117_loop:
    (rx2116_pos) = rx2116_cur."from"()
    inc rx2116_pos
    rx2116_cur."!cursor_from"(rx2116_pos)
    ge rx2116_pos, rx2116_eos, rxscan2117_done
  rxscan2117_scan:
    set_addr $I10, rxscan2117_loop
    rx2116_cur."!mark_push"(0, rx2116_pos, $I10)
  rxscan2117_done:
.annotate 'line', 1153
  # rx literal  "."
    add $I11, rx2116_pos, 1
    gt $I11, rx2116_eos, rx2116_fail
    sub $I11, rx2116_pos, rx2116_off
    ord $I11, rx2116_tgt, $I11
    ne $I11, 46, rx2116_fail
    add rx2116_pos, 1
  alt2118_0:
.annotate 'line', 1154
    set_addr $I10, alt2118_1
    rx2116_cur."!mark_push"(0, rx2116_pos, $I10)
  # rx subrule "deflongname" subtype=capture negate=
    rx2116_cur."!cursor_pos"(rx2116_pos)
    $P10 = rx2116_cur."deflongname"()
    unless $P10, rx2116_fail
    rx2116_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname=deflongname")
    rx2116_pos = $P10."pos"()
    goto alt2118_end
  alt2118_1:
.annotate 'line', 1155
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2116_pos, rx2116_off
    substr $S10, rx2116_tgt, $I10, 1
    index $I11, "'\"", $S10
    lt $I11, 0, rx2116_fail
  # rx subrule "quote" subtype=capture negate=
    rx2116_cur."!cursor_pos"(rx2116_pos)
    $P10 = rx2116_cur."quote"()
    unless $P10, rx2116_fail
    rx2116_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx2116_pos = $P10."pos"()
  alt2119_0:
.annotate 'line', 1156
    set_addr $I10, alt2119_1
    rx2116_cur."!mark_push"(0, rx2116_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2116_pos, rx2116_off
    substr $S10, rx2116_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2116_fail
    goto alt2119_end
  alt2119_1:
  # rx subrule "panic" subtype=method negate=
    rx2116_cur."!cursor_pos"(rx2116_pos)
    $P10 = rx2116_cur."panic"("Quoted method name requires parenthesized arguments")
    unless $P10, rx2116_fail
    rx2116_pos = $P10."pos"()
  alt2119_end:
  alt2118_end:
.annotate 'line', 1162
  # rx rxquantr2120 ** 0..1
    set_addr $I10, rxquantr2120_done
    rx2116_cur."!mark_push"(0, rx2116_pos, $I10)
  rxquantr2120_loop:
  alt2121_0:
.annotate 'line', 1159
    set_addr $I10, alt2121_1
    rx2116_cur."!mark_push"(0, rx2116_pos, $I10)
.annotate 'line', 1160
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2116_pos, rx2116_off
    substr $S10, rx2116_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2116_fail
  # rx subrule "args" subtype=capture negate=
    rx2116_cur."!cursor_pos"(rx2116_pos)
    $P10 = rx2116_cur."args"()
    unless $P10, rx2116_fail
    rx2116_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2116_pos = $P10."pos"()
    goto alt2121_end
  alt2121_1:
.annotate 'line', 1161
  # rx literal  ":"
    add $I11, rx2116_pos, 1
    gt $I11, rx2116_eos, rx2116_fail
    sub $I11, rx2116_pos, rx2116_off
    ord $I11, rx2116_tgt, $I11
    ne $I11, 58, rx2116_fail
    add rx2116_pos, 1
  # rx charclass s
    ge rx2116_pos, rx2116_eos, rx2116_fail
    sub $I10, rx2116_pos, rx2116_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx2116_tgt, $I10
    unless $I11, rx2116_fail
    inc rx2116_pos
  # rx subrule "arglist" subtype=capture negate=
    rx2116_cur."!cursor_pos"(rx2116_pos)
    $P10 = rx2116_cur."arglist"()
    unless $P10, rx2116_fail
    rx2116_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2116_pos = $P10."pos"()
  alt2121_end:
.annotate 'line', 1162
    set_addr $I10, rxquantr2120_done
    (rx2116_rep) = rx2116_cur."!mark_commit"($I10)
  rxquantr2120_done:
.annotate 'line', 1152
  # rx pass
    rx2116_cur."!cursor_pass"(rx2116_pos, "dotty")
    if_null rx2116_debug, debug_1528
    rx2116_cur."!cursor_debug"("PASS", "dotty", " at pos=", rx2116_pos)
  debug_1528:
    .return (rx2116_cur)
  rx2116_restart:
    if_null rx2116_debug, debug_1529
    rx2116_cur."!cursor_debug"("NEXT", "dotty")
  debug_1529:
  rx2116_fail:
    (rx2116_rep, rx2116_pos, $I10, $P10) = rx2116_cur."!mark_fail"(0)
    lt rx2116_pos, -1, rx2116_done
    eq rx2116_pos, -1, rx2116_fail
    jump $I10
  rx2116_done:
    rx2116_cur."!cursor_fail"()
    if_null rx2116_debug, debug_1530
    rx2116_cur."!cursor_debug"("FAIL", "dotty")
  debug_1530:
    .return (rx2116_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__dotty"  :subid("234_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1152
    $P103 = self."!PREFIX__!subrule"("deflongname", ".")
    new $P104, "ResizablePMCArray"
    push $P104, "'"
    push $P104, "\""
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term"  :subid("235_1335114138.94729")
    .param pmc param_2124
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1166
    .lex "self", param_2124
    $P103 = param_2124."!protoregex"("term")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term"  :subid("236_1335114138.94729")
    .param pmc param_2126
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1166
    .lex "self", param_2126
    $P104 = param_2126."!PREFIX__!protoregex"("term")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<self>"  :subid("237_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1168
    .local string rx2128_tgt
    .local int rx2128_pos
    .local int rx2128_off
    .local int rx2128_eos
    .local int rx2128_rep
    .local pmc rx2128_cur
    .local pmc rx2128_debug
    (rx2128_cur, rx2128_pos, rx2128_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2128_cur
    .local pmc match
    .lex "$/", match
    length rx2128_eos, rx2128_tgt
    gt rx2128_pos, rx2128_eos, rx2128_done
    set rx2128_off, 0
    lt rx2128_pos, 2, rx2128_start
    sub rx2128_off, rx2128_pos, 1
    substr rx2128_tgt, rx2128_tgt, rx2128_off
  rx2128_start:
    eq $I10, 1, rx2128_restart
    if_null rx2128_debug, debug_1531
    rx2128_cur."!cursor_debug"("START", "term:sym<self>")
  debug_1531:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2129_done
    goto rxscan2129_scan
  rxscan2129_loop:
    (rx2128_pos) = rx2128_cur."from"()
    inc rx2128_pos
    rx2128_cur."!cursor_from"(rx2128_pos)
    ge rx2128_pos, rx2128_eos, rxscan2129_done
  rxscan2129_scan:
    set_addr $I10, rxscan2129_loop
    rx2128_cur."!mark_push"(0, rx2128_pos, $I10)
  rxscan2129_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2130_fail
    rx2128_cur."!mark_push"(0, rx2128_pos, $I10)
  # rx literal  "self"
    add $I11, rx2128_pos, 4
    gt $I11, rx2128_eos, rx2128_fail
    sub $I11, rx2128_pos, rx2128_off
    substr $S10, rx2128_tgt, $I11, 4
    ne $S10, "self", rx2128_fail
    add rx2128_pos, 4
    set_addr $I10, rxcap_2130_fail
    ($I12, $I11) = rx2128_cur."!mark_peek"($I10)
    rx2128_cur."!cursor_pos"($I11)
    ($P10) = rx2128_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2128_pos, "")
    rx2128_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2130_done
  rxcap_2130_fail:
    goto rx2128_fail
  rxcap_2130_done:
  # rxanchor rwb
    le rx2128_pos, 0, rx2128_fail
    sub $I10, rx2128_pos, rx2128_off
    is_cclass $I11, .CCLASS_WORD, rx2128_tgt, $I10
    if $I11, rx2128_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2128_tgt, $I10
    unless $I11, rx2128_fail
  # rx pass
    rx2128_cur."!cursor_pass"(rx2128_pos, "term:sym<self>")
    if_null rx2128_debug, debug_1532
    rx2128_cur."!cursor_debug"("PASS", "term:sym<self>", " at pos=", rx2128_pos)
  debug_1532:
    .return (rx2128_cur)
  rx2128_restart:
    if_null rx2128_debug, debug_1533
    rx2128_cur."!cursor_debug"("NEXT", "term:sym<self>")
  debug_1533:
  rx2128_fail:
    (rx2128_rep, rx2128_pos, $I10, $P10) = rx2128_cur."!mark_fail"(0)
    lt rx2128_pos, -1, rx2128_done
    eq rx2128_pos, -1, rx2128_fail
    jump $I10
  rx2128_done:
    rx2128_cur."!cursor_fail"()
    if_null rx2128_debug, debug_1534
    rx2128_cur."!cursor_debug"("FAIL", "term:sym<self>")
  debug_1534:
    .return (rx2128_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<self>"  :subid("238_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1168
    new $P103, "ResizablePMCArray"
    push $P103, "self"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<identifier>"  :subid("239_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1170
    .local string rx2133_tgt
    .local int rx2133_pos
    .local int rx2133_off
    .local int rx2133_eos
    .local int rx2133_rep
    .local pmc rx2133_cur
    .local pmc rx2133_debug
    (rx2133_cur, rx2133_pos, rx2133_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2133_cur
    .local pmc match
    .lex "$/", match
    length rx2133_eos, rx2133_tgt
    gt rx2133_pos, rx2133_eos, rx2133_done
    set rx2133_off, 0
    lt rx2133_pos, 2, rx2133_start
    sub rx2133_off, rx2133_pos, 1
    substr rx2133_tgt, rx2133_tgt, rx2133_off
  rx2133_start:
    eq $I10, 1, rx2133_restart
    if_null rx2133_debug, debug_1535
    rx2133_cur."!cursor_debug"("START", "term:sym<identifier>")
  debug_1535:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2134_done
    goto rxscan2134_scan
  rxscan2134_loop:
    (rx2133_pos) = rx2133_cur."from"()
    inc rx2133_pos
    rx2133_cur."!cursor_from"(rx2133_pos)
    ge rx2133_pos, rx2133_eos, rxscan2134_done
  rxscan2134_scan:
    set_addr $I10, rxscan2134_loop
    rx2133_cur."!mark_push"(0, rx2133_pos, $I10)
  rxscan2134_done:
.annotate 'line', 1171
  # rx subrule "deflongname" subtype=capture negate=
    rx2133_cur."!cursor_pos"(rx2133_pos)
    $P10 = rx2133_cur."deflongname"()
    unless $P10, rx2133_fail
    rx2133_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2133_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2133_pos, rx2133_off
    substr $S10, rx2133_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2133_fail
  # rx subrule "args" subtype=capture negate=
    rx2133_cur."!cursor_pos"(rx2133_pos)
    $P10 = rx2133_cur."args"()
    unless $P10, rx2133_fail
    rx2133_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2133_pos = $P10."pos"()
.annotate 'line', 1170
  # rx pass
    rx2133_cur."!cursor_pass"(rx2133_pos, "term:sym<identifier>")
    if_null rx2133_debug, debug_1536
    rx2133_cur."!cursor_debug"("PASS", "term:sym<identifier>", " at pos=", rx2133_pos)
  debug_1536:
    .return (rx2133_cur)
  rx2133_restart:
    if_null rx2133_debug, debug_1537
    rx2133_cur."!cursor_debug"("NEXT", "term:sym<identifier>")
  debug_1537:
  rx2133_fail:
    (rx2133_rep, rx2133_pos, $I10, $P10) = rx2133_cur."!mark_fail"(0)
    lt rx2133_pos, -1, rx2133_done
    eq rx2133_pos, -1, rx2133_fail
    jump $I10
  rx2133_done:
    rx2133_cur."!cursor_fail"()
    if_null rx2133_debug, debug_1538
    rx2133_cur."!cursor_debug"("FAIL", "term:sym<identifier>")
  debug_1538:
    .return (rx2133_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<identifier>"  :subid("240_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1170
    $P103 = self."!PREFIX__!subrule"("deflongname", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<name>"  :subid("241_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1174
    .local string rx2137_tgt
    .local int rx2137_pos
    .local int rx2137_off
    .local int rx2137_eos
    .local int rx2137_rep
    .local pmc rx2137_cur
    .local pmc rx2137_debug
    (rx2137_cur, rx2137_pos, rx2137_tgt, $I10) = self."!cursor_start"()
    rx2137_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2137_cur
    .local pmc match
    .lex "$/", match
    length rx2137_eos, rx2137_tgt
    gt rx2137_pos, rx2137_eos, rx2137_done
    set rx2137_off, 0
    lt rx2137_pos, 2, rx2137_start
    sub rx2137_off, rx2137_pos, 1
    substr rx2137_tgt, rx2137_tgt, rx2137_off
  rx2137_start:
    eq $I10, 1, rx2137_restart
    if_null rx2137_debug, debug_1539
    rx2137_cur."!cursor_debug"("START", "term:sym<name>")
  debug_1539:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2138_done
    goto rxscan2138_scan
  rxscan2138_loop:
    (rx2137_pos) = rx2137_cur."from"()
    inc rx2137_pos
    rx2137_cur."!cursor_from"(rx2137_pos)
    ge rx2137_pos, rx2137_eos, rxscan2138_done
  rxscan2138_scan:
    set_addr $I10, rxscan2138_loop
    rx2137_cur."!mark_push"(0, rx2137_pos, $I10)
  rxscan2138_done:
.annotate 'line', 1175
  # rx subrule "name" subtype=capture negate=
    rx2137_cur."!cursor_pos"(rx2137_pos)
    $P10 = rx2137_cur."name"()
    unless $P10, rx2137_fail
    rx2137_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx2137_pos = $P10."pos"()
  # rx rxquantr2139 ** 0..1
    set_addr $I10, rxquantr2139_done
    rx2137_cur."!mark_push"(0, rx2137_pos, $I10)
  rxquantr2139_loop:
  # rx subrule "args" subtype=capture negate=
    rx2137_cur."!cursor_pos"(rx2137_pos)
    $P10 = rx2137_cur."args"()
    unless $P10, rx2137_fail
    goto rxsubrule2140_pass
  rxsubrule2140_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2137_fail
  rxsubrule2140_pass:
    set_addr $I10, rxsubrule2140_back
    rx2137_cur."!mark_push"(0, rx2137_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2137_pos = $P10."pos"()
    set_addr $I10, rxquantr2139_done
    (rx2137_rep) = rx2137_cur."!mark_commit"($I10)
  rxquantr2139_done:
.annotate 'line', 1174
  # rx pass
    rx2137_cur."!cursor_pass"(rx2137_pos, "term:sym<name>")
    if_null rx2137_debug, debug_1540
    rx2137_cur."!cursor_debug"("PASS", "term:sym<name>", " at pos=", rx2137_pos)
  debug_1540:
    .return (rx2137_cur)
  rx2137_restart:
    if_null rx2137_debug, debug_1541
    rx2137_cur."!cursor_debug"("NEXT", "term:sym<name>")
  debug_1541:
  rx2137_fail:
    (rx2137_rep, rx2137_pos, $I10, $P10) = rx2137_cur."!mark_fail"(0)
    lt rx2137_pos, -1, rx2137_done
    eq rx2137_pos, -1, rx2137_fail
    jump $I10
  rx2137_done:
    rx2137_cur."!cursor_fail"()
    if_null rx2137_debug, debug_1542
    rx2137_cur."!cursor_debug"("FAIL", "term:sym<name>")
  debug_1542:
    .return (rx2137_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<name>"  :subid("242_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1174
    $P103 = self."!PREFIX__!subrule"("name", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::op>"  :subid("243_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1178
    .local string rx2143_tgt
    .local int rx2143_pos
    .local int rx2143_off
    .local int rx2143_eos
    .local int rx2143_rep
    .local pmc rx2143_cur
    .local pmc rx2143_debug
    (rx2143_cur, rx2143_pos, rx2143_tgt, $I10) = self."!cursor_start"()
    rx2143_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2143_cur
    .local pmc match
    .lex "$/", match
    length rx2143_eos, rx2143_tgt
    gt rx2143_pos, rx2143_eos, rx2143_done
    set rx2143_off, 0
    lt rx2143_pos, 2, rx2143_start
    sub rx2143_off, rx2143_pos, 1
    substr rx2143_tgt, rx2143_tgt, rx2143_off
  rx2143_start:
    eq $I10, 1, rx2143_restart
    if_null rx2143_debug, debug_1543
    rx2143_cur."!cursor_debug"("START", "term:sym<pir::op>")
  debug_1543:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2144_done
    goto rxscan2144_scan
  rxscan2144_loop:
    (rx2143_pos) = rx2143_cur."from"()
    inc rx2143_pos
    rx2143_cur."!cursor_from"(rx2143_pos)
    ge rx2143_pos, rx2143_eos, rxscan2144_done
  rxscan2144_scan:
    set_addr $I10, rxscan2144_loop
    rx2143_cur."!mark_push"(0, rx2143_pos, $I10)
  rxscan2144_done:
.annotate 'line', 1179
  # rx literal  "pir::"
    add $I11, rx2143_pos, 5
    gt $I11, rx2143_eos, rx2143_fail
    sub $I11, rx2143_pos, rx2143_off
    substr $S10, rx2143_tgt, $I11, 5
    ne $S10, "pir::", rx2143_fail
    add rx2143_pos, 5
  # rx subcapture "op"
    set_addr $I10, rxcap_2145_fail
    rx2143_cur."!mark_push"(0, rx2143_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2143_pos, rx2143_off
    find_not_cclass $I11, .CCLASS_WORD, rx2143_tgt, $I10, rx2143_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2143_fail
    add rx2143_pos, rx2143_off, $I11
    set_addr $I10, rxcap_2145_fail
    ($I12, $I11) = rx2143_cur."!mark_peek"($I10)
    rx2143_cur."!cursor_pos"($I11)
    ($P10) = rx2143_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2143_pos, "")
    rx2143_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("op")
    goto rxcap_2145_done
  rxcap_2145_fail:
    goto rx2143_fail
  rxcap_2145_done:
  # rx rxquantr2146 ** 0..1
    set_addr $I10, rxquantr2146_done
    rx2143_cur."!mark_push"(0, rx2143_pos, $I10)
  rxquantr2146_loop:
  # rx subrule "args" subtype=capture negate=
    rx2143_cur."!cursor_pos"(rx2143_pos)
    $P10 = rx2143_cur."args"()
    unless $P10, rx2143_fail
    goto rxsubrule2147_pass
  rxsubrule2147_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2143_fail
  rxsubrule2147_pass:
    set_addr $I10, rxsubrule2147_back
    rx2143_cur."!mark_push"(0, rx2143_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2143_pos = $P10."pos"()
    set_addr $I10, rxquantr2146_done
    (rx2143_rep) = rx2143_cur."!mark_commit"($I10)
  rxquantr2146_done:
.annotate 'line', 1178
  # rx pass
    rx2143_cur."!cursor_pass"(rx2143_pos, "term:sym<pir::op>")
    if_null rx2143_debug, debug_1544
    rx2143_cur."!cursor_debug"("PASS", "term:sym<pir::op>", " at pos=", rx2143_pos)
  debug_1544:
    .return (rx2143_cur)
  rx2143_restart:
    if_null rx2143_debug, debug_1545
    rx2143_cur."!cursor_debug"("NEXT", "term:sym<pir::op>")
  debug_1545:
  rx2143_fail:
    (rx2143_rep, rx2143_pos, $I10, $P10) = rx2143_cur."!mark_fail"(0)
    lt rx2143_pos, -1, rx2143_done
    eq rx2143_pos, -1, rx2143_fail
    jump $I10
  rx2143_done:
    rx2143_cur."!cursor_fail"()
    if_null rx2143_debug, debug_1546
    rx2143_cur."!cursor_debug"("FAIL", "term:sym<pir::op>")
  debug_1546:
    .return (rx2143_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<pir::op>"  :subid("244_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1178
    new $P103, "ResizablePMCArray"
    push $P103, "pir::"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::const>"  :subid("245_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1182
    .local string rx2150_tgt
    .local int rx2150_pos
    .local int rx2150_off
    .local int rx2150_eos
    .local int rx2150_rep
    .local pmc rx2150_cur
    .local pmc rx2150_debug
    (rx2150_cur, rx2150_pos, rx2150_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2150_cur
    .local pmc match
    .lex "$/", match
    length rx2150_eos, rx2150_tgt
    gt rx2150_pos, rx2150_eos, rx2150_done
    set rx2150_off, 0
    lt rx2150_pos, 2, rx2150_start
    sub rx2150_off, rx2150_pos, 1
    substr rx2150_tgt, rx2150_tgt, rx2150_off
  rx2150_start:
    eq $I10, 1, rx2150_restart
    if_null rx2150_debug, debug_1547
    rx2150_cur."!cursor_debug"("START", "term:sym<pir::const>")
  debug_1547:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2151_done
    goto rxscan2151_scan
  rxscan2151_loop:
    (rx2150_pos) = rx2150_cur."from"()
    inc rx2150_pos
    rx2150_cur."!cursor_from"(rx2150_pos)
    ge rx2150_pos, rx2150_eos, rxscan2151_done
  rxscan2151_scan:
    set_addr $I10, rxscan2151_loop
    rx2150_cur."!mark_push"(0, rx2150_pos, $I10)
  rxscan2151_done:
.annotate 'line', 1183
  # rx literal  "pir::const::"
    add $I11, rx2150_pos, 12
    gt $I11, rx2150_eos, rx2150_fail
    sub $I11, rx2150_pos, rx2150_off
    substr $S10, rx2150_tgt, $I11, 12
    ne $S10, "pir::const::", rx2150_fail
    add rx2150_pos, 12
  # rx subcapture "const"
    set_addr $I10, rxcap_2152_fail
    rx2150_cur."!mark_push"(0, rx2150_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2150_pos, rx2150_off
    find_not_cclass $I11, .CCLASS_WORD, rx2150_tgt, $I10, rx2150_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2150_fail
    add rx2150_pos, rx2150_off, $I11
    set_addr $I10, rxcap_2152_fail
    ($I12, $I11) = rx2150_cur."!mark_peek"($I10)
    rx2150_cur."!cursor_pos"($I11)
    ($P10) = rx2150_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2150_pos, "")
    rx2150_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("const")
    goto rxcap_2152_done
  rxcap_2152_fail:
    goto rx2150_fail
  rxcap_2152_done:
.annotate 'line', 1182
  # rx pass
    rx2150_cur."!cursor_pass"(rx2150_pos, "term:sym<pir::const>")
    if_null rx2150_debug, debug_1548
    rx2150_cur."!cursor_debug"("PASS", "term:sym<pir::const>", " at pos=", rx2150_pos)
  debug_1548:
    .return (rx2150_cur)
  rx2150_restart:
    if_null rx2150_debug, debug_1549
    rx2150_cur."!cursor_debug"("NEXT", "term:sym<pir::const>")
  debug_1549:
  rx2150_fail:
    (rx2150_rep, rx2150_pos, $I10, $P10) = rx2150_cur."!mark_fail"(0)
    lt rx2150_pos, -1, rx2150_done
    eq rx2150_pos, -1, rx2150_fail
    jump $I10
  rx2150_done:
    rx2150_cur."!cursor_fail"()
    if_null rx2150_debug, debug_1550
    rx2150_cur."!cursor_debug"("FAIL", "term:sym<pir::const>")
  debug_1550:
    .return (rx2150_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<pir::const>"  :subid("246_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1182
    new $P103, "ResizablePMCArray"
    push $P103, "pir::const::"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<nqp::op>"  :subid("247_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1186
    .local string rx2155_tgt
    .local int rx2155_pos
    .local int rx2155_off
    .local int rx2155_eos
    .local int rx2155_rep
    .local pmc rx2155_cur
    .local pmc rx2155_debug
    (rx2155_cur, rx2155_pos, rx2155_tgt, $I10) = self."!cursor_start"()
    rx2155_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2155_cur
    .local pmc match
    .lex "$/", match
    length rx2155_eos, rx2155_tgt
    gt rx2155_pos, rx2155_eos, rx2155_done
    set rx2155_off, 0
    lt rx2155_pos, 2, rx2155_start
    sub rx2155_off, rx2155_pos, 1
    substr rx2155_tgt, rx2155_tgt, rx2155_off
  rx2155_start:
    eq $I10, 1, rx2155_restart
    if_null rx2155_debug, debug_1551
    rx2155_cur."!cursor_debug"("START", "term:sym<nqp::op>")
  debug_1551:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2156_done
    goto rxscan2156_scan
  rxscan2156_loop:
    (rx2155_pos) = rx2155_cur."from"()
    inc rx2155_pos
    rx2155_cur."!cursor_from"(rx2155_pos)
    ge rx2155_pos, rx2155_eos, rxscan2156_done
  rxscan2156_scan:
    set_addr $I10, rxscan2156_loop
    rx2155_cur."!mark_push"(0, rx2155_pos, $I10)
  rxscan2156_done:
.annotate 'line', 1187
  # rx literal  "nqp::"
    add $I11, rx2155_pos, 5
    gt $I11, rx2155_eos, rx2155_fail
    sub $I11, rx2155_pos, rx2155_off
    substr $S10, rx2155_tgt, $I11, 5
    ne $S10, "nqp::", rx2155_fail
    add rx2155_pos, 5
  # rx subcapture "op"
    set_addr $I10, rxcap_2157_fail
    rx2155_cur."!mark_push"(0, rx2155_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2155_pos, rx2155_off
    find_not_cclass $I11, .CCLASS_WORD, rx2155_tgt, $I10, rx2155_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2155_fail
    add rx2155_pos, rx2155_off, $I11
    set_addr $I10, rxcap_2157_fail
    ($I12, $I11) = rx2155_cur."!mark_peek"($I10)
    rx2155_cur."!cursor_pos"($I11)
    ($P10) = rx2155_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2155_pos, "")
    rx2155_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("op")
    goto rxcap_2157_done
  rxcap_2157_fail:
    goto rx2155_fail
  rxcap_2157_done:
  # rx rxquantr2158 ** 0..1
    set_addr $I10, rxquantr2158_done
    rx2155_cur."!mark_push"(0, rx2155_pos, $I10)
  rxquantr2158_loop:
  # rx subrule "args" subtype=capture negate=
    rx2155_cur."!cursor_pos"(rx2155_pos)
    $P10 = rx2155_cur."args"()
    unless $P10, rx2155_fail
    goto rxsubrule2159_pass
  rxsubrule2159_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2155_fail
  rxsubrule2159_pass:
    set_addr $I10, rxsubrule2159_back
    rx2155_cur."!mark_push"(0, rx2155_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2155_pos = $P10."pos"()
    set_addr $I10, rxquantr2158_done
    (rx2155_rep) = rx2155_cur."!mark_commit"($I10)
  rxquantr2158_done:
.annotate 'line', 1186
  # rx pass
    rx2155_cur."!cursor_pass"(rx2155_pos, "term:sym<nqp::op>")
    if_null rx2155_debug, debug_1552
    rx2155_cur."!cursor_debug"("PASS", "term:sym<nqp::op>", " at pos=", rx2155_pos)
  debug_1552:
    .return (rx2155_cur)
  rx2155_restart:
    if_null rx2155_debug, debug_1553
    rx2155_cur."!cursor_debug"("NEXT", "term:sym<nqp::op>")
  debug_1553:
  rx2155_fail:
    (rx2155_rep, rx2155_pos, $I10, $P10) = rx2155_cur."!mark_fail"(0)
    lt rx2155_pos, -1, rx2155_done
    eq rx2155_pos, -1, rx2155_fail
    jump $I10
  rx2155_done:
    rx2155_cur."!cursor_fail"()
    if_null rx2155_debug, debug_1554
    rx2155_cur."!cursor_debug"("FAIL", "term:sym<nqp::op>")
  debug_1554:
    .return (rx2155_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<nqp::op>"  :subid("248_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1186
    new $P103, "ResizablePMCArray"
    push $P103, "nqp::"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<onlystar>"  :subid("249_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1190
    .const 'Sub' $P2166 = "584_1335114138.94729" 
    capture_lex $P2166
    .local string rx2162_tgt
    .local int rx2162_pos
    .local int rx2162_off
    .local int rx2162_eos
    .local int rx2162_rep
    .local pmc rx2162_cur
    .local pmc rx2162_debug
    (rx2162_cur, rx2162_pos, rx2162_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2162_cur
    .local pmc match
    .lex "$/", match
    length rx2162_eos, rx2162_tgt
    gt rx2162_pos, rx2162_eos, rx2162_done
    set rx2162_off, 0
    lt rx2162_pos, 2, rx2162_start
    sub rx2162_off, rx2162_pos, 1
    substr rx2162_tgt, rx2162_tgt, rx2162_off
  rx2162_start:
    eq $I10, 1, rx2162_restart
    if_null rx2162_debug, debug_1555
    rx2162_cur."!cursor_debug"("START", "term:sym<onlystar>")
  debug_1555:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2163_done
    goto rxscan2163_scan
  rxscan2163_loop:
    (rx2162_pos) = rx2162_cur."from"()
    inc rx2162_pos
    rx2162_cur."!cursor_from"(rx2162_pos)
    ge rx2162_pos, rx2162_eos, rxscan2163_done
  rxscan2163_scan:
    set_addr $I10, rxscan2163_loop
    rx2162_cur."!mark_push"(0, rx2162_pos, $I10)
  rxscan2163_done:
.annotate 'line', 1191
  # rx literal  "{*}"
    add $I11, rx2162_pos, 3
    gt $I11, rx2162_eos, rx2162_fail
    sub $I11, rx2162_pos, rx2162_off
    substr $S10, rx2162_tgt, $I11, 3
    ne $S10, "{*}", rx2162_fail
    add rx2162_pos, 3
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2162_cur."!cursor_pos"(rx2162_pos)
    $P10 = rx2162_cur."ENDSTMT"()
    unless $P10, rx2162_fail
  alt2164_0:
.annotate 'line', 1192
    set_addr $I10, alt2164_1
    rx2162_cur."!mark_push"(0, rx2162_pos, $I10)
    rx2162_cur."!cursor_pos"(rx2162_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P2166 = "584_1335114138.94729" 
    capture_lex $P2166
    $P105 = $P2166()
    unless $P105, rx2162_fail
    goto alt2164_end
  alt2164_1:
  # rx subrule "panic" subtype=method negate=
    rx2162_cur."!cursor_pos"(rx2162_pos)
    $P10 = rx2162_cur."panic"("{*} may only appear in proto")
    unless $P10, rx2162_fail
    rx2162_pos = $P10."pos"()
  alt2164_end:
.annotate 'line', 1190
  # rx pass
    rx2162_cur."!cursor_pass"(rx2162_pos, "term:sym<onlystar>")
    if_null rx2162_debug, debug_1558
    rx2162_cur."!cursor_debug"("PASS", "term:sym<onlystar>", " at pos=", rx2162_pos)
  debug_1558:
    .return (rx2162_cur)
  rx2162_restart:
    if_null rx2162_debug, debug_1559
    rx2162_cur."!cursor_debug"("NEXT", "term:sym<onlystar>")
  debug_1559:
  rx2162_fail:
    (rx2162_rep, rx2162_pos, $I10, $P10) = rx2162_cur."!mark_fail"(0)
    lt rx2162_pos, -1, rx2162_done
    eq rx2162_pos, -1, rx2162_fail
    jump $I10
  rx2162_done:
    rx2162_cur."!cursor_fail"()
    if_null rx2162_debug, debug_1560
    rx2162_cur."!cursor_debug"("FAIL", "term:sym<onlystar>")
  debug_1560:
    .return (rx2162_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2165"  :anon :subid("584_1335114138.94729") :outer("249_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1192
    find_dynamic_lex $P107, "$*MULTINESS"
    unless_null $P107, vivify_1556
    get_hll_global $P105, "GLOBAL"
    get_who $P106, $P105
    set $P107, $P106["$MULTINESS"]
    unless_null $P107, vivify_1557
    die "Contextual $*MULTINESS not found"
  vivify_1557:
  vivify_1556:
    set $S100, $P107
    iseq $I100, $S100, "proto"
    .return ($I100)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<onlystar>"  :subid("250_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1190
    new $P106, "ResizablePMCArray"
    push $P106, "{*}"
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "args"  :subid("251_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1195
    .local string rx2169_tgt
    .local int rx2169_pos
    .local int rx2169_off
    .local int rx2169_eos
    .local int rx2169_rep
    .local pmc rx2169_cur
    .local pmc rx2169_debug
    (rx2169_cur, rx2169_pos, rx2169_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2169_cur
    .local pmc match
    .lex "$/", match
    length rx2169_eos, rx2169_tgt
    gt rx2169_pos, rx2169_eos, rx2169_done
    set rx2169_off, 0
    lt rx2169_pos, 2, rx2169_start
    sub rx2169_off, rx2169_pos, 1
    substr rx2169_tgt, rx2169_tgt, rx2169_off
  rx2169_start:
    eq $I10, 1, rx2169_restart
    if_null rx2169_debug, debug_1561
    rx2169_cur."!cursor_debug"("START", "args")
  debug_1561:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2170_done
    goto rxscan2170_scan
  rxscan2170_loop:
    (rx2169_pos) = rx2169_cur."from"()
    inc rx2169_pos
    rx2169_cur."!cursor_from"(rx2169_pos)
    ge rx2169_pos, rx2169_eos, rxscan2170_done
  rxscan2170_scan:
    set_addr $I10, rxscan2170_loop
    rx2169_cur."!mark_push"(0, rx2169_pos, $I10)
  rxscan2170_done:
.annotate 'line', 1196
  # rx literal  "("
    add $I11, rx2169_pos, 1
    gt $I11, rx2169_eos, rx2169_fail
    sub $I11, rx2169_pos, rx2169_off
    ord $I11, rx2169_tgt, $I11
    ne $I11, 40, rx2169_fail
    add rx2169_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx2169_cur."!cursor_pos"(rx2169_pos)
    $P10 = rx2169_cur."arglist"()
    unless $P10, rx2169_fail
    rx2169_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2169_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2169_pos, 1
    gt $I11, rx2169_eos, rx2169_fail
    sub $I11, rx2169_pos, rx2169_off
    ord $I11, rx2169_tgt, $I11
    ne $I11, 41, rx2169_fail
    add rx2169_pos, 1
  # rx pass
    rx2169_cur."!cursor_pass"(rx2169_pos, "args")
    if_null rx2169_debug, debug_1562
    rx2169_cur."!cursor_debug"("PASS", "args", " at pos=", rx2169_pos)
  debug_1562:
    .return (rx2169_cur)
  rx2169_restart:
.annotate 'line', 1195
    if_null rx2169_debug, debug_1563
    rx2169_cur."!cursor_debug"("NEXT", "args")
  debug_1563:
  rx2169_fail:
    (rx2169_rep, rx2169_pos, $I10, $P10) = rx2169_cur."!mark_fail"(0)
    lt rx2169_pos, -1, rx2169_done
    eq rx2169_pos, -1, rx2169_fail
    jump $I10
  rx2169_done:
    rx2169_cur."!cursor_fail"()
    if_null rx2169_debug, debug_1564
    rx2169_cur."!cursor_debug"("FAIL", "args")
  debug_1564:
    .return (rx2169_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__args"  :subid("252_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1195
    $P103 = self."!PREFIX__!subrule"("arglist", "(")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "arglist"  :subid("253_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1199
    .local string rx2173_tgt
    .local int rx2173_pos
    .local int rx2173_off
    .local int rx2173_eos
    .local int rx2173_rep
    .local pmc rx2173_cur
    .local pmc rx2173_debug
    (rx2173_cur, rx2173_pos, rx2173_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2173_cur
    .local pmc match
    .lex "$/", match
    length rx2173_eos, rx2173_tgt
    gt rx2173_pos, rx2173_eos, rx2173_done
    set rx2173_off, 0
    lt rx2173_pos, 2, rx2173_start
    sub rx2173_off, rx2173_pos, 1
    substr rx2173_tgt, rx2173_tgt, rx2173_off
  rx2173_start:
    eq $I10, 1, rx2173_restart
    if_null rx2173_debug, debug_1565
    rx2173_cur."!cursor_debug"("START", "arglist")
  debug_1565:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2174_done
    goto rxscan2174_scan
  rxscan2174_loop:
    (rx2173_pos) = rx2173_cur."from"()
    inc rx2173_pos
    rx2173_cur."!cursor_from"(rx2173_pos)
    ge rx2173_pos, rx2173_eos, rxscan2174_done
  rxscan2174_scan:
    set_addr $I10, rxscan2174_loop
    rx2173_cur."!mark_push"(0, rx2173_pos, $I10)
  rxscan2174_done:
.annotate 'line', 1200
  # rx subrule "ws" subtype=method negate=
    rx2173_cur."!cursor_pos"(rx2173_pos)
    $P10 = rx2173_cur."ws"()
    unless $P10, rx2173_fail
    rx2173_pos = $P10."pos"()
  alt2175_0:
.annotate 'line', 1201
    set_addr $I10, alt2175_1
    rx2173_cur."!mark_push"(0, rx2173_pos, $I10)
.annotate 'line', 1202
  # rx subrule "EXPR" subtype=capture negate=
    rx2173_cur."!cursor_pos"(rx2173_pos)
    $P10 = rx2173_cur."EXPR"("f=")
    unless $P10, rx2173_fail
    rx2173_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2173_pos = $P10."pos"()
    goto alt2175_end
  alt2175_1:
  alt2175_end:
.annotate 'line', 1199
  # rx pass
    rx2173_cur."!cursor_pass"(rx2173_pos, "arglist")
    if_null rx2173_debug, debug_1566
    rx2173_cur."!cursor_debug"("PASS", "arglist", " at pos=", rx2173_pos)
  debug_1566:
    .return (rx2173_cur)
  rx2173_restart:
    if_null rx2173_debug, debug_1567
    rx2173_cur."!cursor_debug"("NEXT", "arglist")
  debug_1567:
  rx2173_fail:
    (rx2173_rep, rx2173_pos, $I10, $P10) = rx2173_cur."!mark_fail"(0)
    lt rx2173_pos, -1, rx2173_done
    eq rx2173_pos, -1, rx2173_fail
    jump $I10
  rx2173_done:
    rx2173_cur."!cursor_fail"()
    if_null rx2173_debug, debug_1568
    rx2173_cur."!cursor_debug"("FAIL", "arglist")
  debug_1568:
    .return (rx2173_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__arglist"  :subid("254_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1199
    $P103 = self."!PREFIX__!subrule"("ws", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<value>"  :subid("255_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1208
    .local string rx2178_tgt
    .local int rx2178_pos
    .local int rx2178_off
    .local int rx2178_eos
    .local int rx2178_rep
    .local pmc rx2178_cur
    .local pmc rx2178_debug
    (rx2178_cur, rx2178_pos, rx2178_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2178_cur
    .local pmc match
    .lex "$/", match
    length rx2178_eos, rx2178_tgt
    gt rx2178_pos, rx2178_eos, rx2178_done
    set rx2178_off, 0
    lt rx2178_pos, 2, rx2178_start
    sub rx2178_off, rx2178_pos, 1
    substr rx2178_tgt, rx2178_tgt, rx2178_off
  rx2178_start:
    eq $I10, 1, rx2178_restart
    if_null rx2178_debug, debug_1569
    rx2178_cur."!cursor_debug"("START", "term:sym<value>")
  debug_1569:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2179_done
    goto rxscan2179_scan
  rxscan2179_loop:
    (rx2178_pos) = rx2178_cur."from"()
    inc rx2178_pos
    rx2178_cur."!cursor_from"(rx2178_pos)
    ge rx2178_pos, rx2178_eos, rxscan2179_done
  rxscan2179_scan:
    set_addr $I10, rxscan2179_loop
    rx2178_cur."!mark_push"(0, rx2178_pos, $I10)
  rxscan2179_done:
  # rx subrule "value" subtype=capture negate=
    rx2178_cur."!cursor_pos"(rx2178_pos)
    $P10 = rx2178_cur."value"()
    unless $P10, rx2178_fail
    rx2178_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("value")
    rx2178_pos = $P10."pos"()
  # rx pass
    rx2178_cur."!cursor_pass"(rx2178_pos, "term:sym<value>")
    if_null rx2178_debug, debug_1570
    rx2178_cur."!cursor_debug"("PASS", "term:sym<value>", " at pos=", rx2178_pos)
  debug_1570:
    .return (rx2178_cur)
  rx2178_restart:
    if_null rx2178_debug, debug_1571
    rx2178_cur."!cursor_debug"("NEXT", "term:sym<value>")
  debug_1571:
  rx2178_fail:
    (rx2178_rep, rx2178_pos, $I10, $P10) = rx2178_cur."!mark_fail"(0)
    lt rx2178_pos, -1, rx2178_done
    eq rx2178_pos, -1, rx2178_fail
    jump $I10
  rx2178_done:
    rx2178_cur."!cursor_fail"()
    if_null rx2178_debug, debug_1572
    rx2178_cur."!cursor_debug"("FAIL", "term:sym<value>")
  debug_1572:
    .return (rx2178_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<value>"  :subid("256_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1208
    $P103 = self."!PREFIX__!subrule"("value", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "value"  :subid("257_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1210
    .local string rx2182_tgt
    .local int rx2182_pos
    .local int rx2182_off
    .local int rx2182_eos
    .local int rx2182_rep
    .local pmc rx2182_cur
    .local pmc rx2182_debug
    (rx2182_cur, rx2182_pos, rx2182_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2182_cur
    .local pmc match
    .lex "$/", match
    length rx2182_eos, rx2182_tgt
    gt rx2182_pos, rx2182_eos, rx2182_done
    set rx2182_off, 0
    lt rx2182_pos, 2, rx2182_start
    sub rx2182_off, rx2182_pos, 1
    substr rx2182_tgt, rx2182_tgt, rx2182_off
  rx2182_start:
    eq $I10, 1, rx2182_restart
    if_null rx2182_debug, debug_1573
    rx2182_cur."!cursor_debug"("START", "value")
  debug_1573:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2183_done
    goto rxscan2183_scan
  rxscan2183_loop:
    (rx2182_pos) = rx2182_cur."from"()
    inc rx2182_pos
    rx2182_cur."!cursor_from"(rx2182_pos)
    ge rx2182_pos, rx2182_eos, rxscan2183_done
  rxscan2183_scan:
    set_addr $I10, rxscan2183_loop
    rx2182_cur."!mark_push"(0, rx2182_pos, $I10)
  rxscan2183_done:
  alt2184_0:
    set_addr $I10, alt2184_1
    rx2182_cur."!mark_push"(0, rx2182_pos, $I10)
.annotate 'line', 1211
  # rx subrule "quote" subtype=capture negate=
    rx2182_cur."!cursor_pos"(rx2182_pos)
    $P10 = rx2182_cur."quote"()
    unless $P10, rx2182_fail
    rx2182_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx2182_pos = $P10."pos"()
    goto alt2184_end
  alt2184_1:
.annotate 'line', 1212
  # rx subrule "number" subtype=capture negate=
    rx2182_cur."!cursor_pos"(rx2182_pos)
    $P10 = rx2182_cur."number"()
    unless $P10, rx2182_fail
    rx2182_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("number")
    rx2182_pos = $P10."pos"()
  alt2184_end:
.annotate 'line', 1210
  # rx pass
    rx2182_cur."!cursor_pass"(rx2182_pos, "value")
    if_null rx2182_debug, debug_1574
    rx2182_cur."!cursor_debug"("PASS", "value", " at pos=", rx2182_pos)
  debug_1574:
    .return (rx2182_cur)
  rx2182_restart:
    if_null rx2182_debug, debug_1575
    rx2182_cur."!cursor_debug"("NEXT", "value")
  debug_1575:
  rx2182_fail:
    (rx2182_rep, rx2182_pos, $I10, $P10) = rx2182_cur."!mark_fail"(0)
    lt rx2182_pos, -1, rx2182_done
    eq rx2182_pos, -1, rx2182_fail
    jump $I10
  rx2182_done:
    rx2182_cur."!cursor_fail"()
    if_null rx2182_debug, debug_1576
    rx2182_cur."!cursor_debug"("FAIL", "value")
  debug_1576:
    .return (rx2182_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__value"  :subid("258_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1210
    $P103 = self."!PREFIX__!subrule"("number", "")
    $P104 = self."!PREFIX__!subrule"("quote", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P103
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "number"  :subid("259_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1215
    .local string rx2187_tgt
    .local int rx2187_pos
    .local int rx2187_off
    .local int rx2187_eos
    .local int rx2187_rep
    .local pmc rx2187_cur
    .local pmc rx2187_debug
    (rx2187_cur, rx2187_pos, rx2187_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2187_cur
    .local pmc match
    .lex "$/", match
    length rx2187_eos, rx2187_tgt
    gt rx2187_pos, rx2187_eos, rx2187_done
    set rx2187_off, 0
    lt rx2187_pos, 2, rx2187_start
    sub rx2187_off, rx2187_pos, 1
    substr rx2187_tgt, rx2187_tgt, rx2187_off
  rx2187_start:
    eq $I10, 1, rx2187_restart
    if_null rx2187_debug, debug_1577
    rx2187_cur."!cursor_debug"("START", "number")
  debug_1577:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2188_done
    goto rxscan2188_scan
  rxscan2188_loop:
    (rx2187_pos) = rx2187_cur."from"()
    inc rx2187_pos
    rx2187_cur."!cursor_from"(rx2187_pos)
    ge rx2187_pos, rx2187_eos, rxscan2188_done
  rxscan2188_scan:
    set_addr $I10, rxscan2188_loop
    rx2187_cur."!mark_push"(0, rx2187_pos, $I10)
  rxscan2188_done:
.annotate 'line', 1216
  # rx subcapture "sign"
    set_addr $I10, rxcap_2190_fail
    rx2187_cur."!mark_push"(0, rx2187_pos, $I10)
  # rx enumcharlist_q negate=0  r 0..1
    sub $I10, rx2187_pos, rx2187_off
    set rx2187_rep, 0
    sub $I12, rx2187_eos, rx2187_pos
    le $I12, 1, rxenumcharlistq2189_loop
    set $I12, 1
  rxenumcharlistq2189_loop:
    le $I12, 0, rxenumcharlistq2189_done
    substr $S10, rx2187_tgt, $I10, 1
    index $I11, "+-", $S10
    lt $I11, 0, rxenumcharlistq2189_done
    inc rx2187_rep
  rxenumcharlistq2189_done:
    add rx2187_pos, rx2187_pos, rx2187_rep
    set_addr $I10, rxcap_2190_fail
    ($I12, $I11) = rx2187_cur."!mark_peek"($I10)
    rx2187_cur."!cursor_pos"($I11)
    ($P10) = rx2187_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2187_pos, "")
    rx2187_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sign")
    goto rxcap_2190_done
  rxcap_2190_fail:
    goto rx2187_fail
  rxcap_2190_done:
  alt2191_0:
.annotate 'line', 1217
    set_addr $I10, alt2191_1
    rx2187_cur."!mark_push"(0, rx2187_pos, $I10)
  # rx subrule "dec_number" subtype=capture negate=
    rx2187_cur."!cursor_pos"(rx2187_pos)
    $P10 = rx2187_cur."dec_number"()
    unless $P10, rx2187_fail
    rx2187_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dec_number")
    rx2187_pos = $P10."pos"()
    goto alt2191_end
  alt2191_1:
  # rx subrule "integer" subtype=capture negate=
    rx2187_cur."!cursor_pos"(rx2187_pos)
    $P10 = rx2187_cur."integer"()
    unless $P10, rx2187_fail
    rx2187_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("integer")
    rx2187_pos = $P10."pos"()
  alt2191_end:
.annotate 'line', 1215
  # rx pass
    rx2187_cur."!cursor_pass"(rx2187_pos, "number")
    if_null rx2187_debug, debug_1578
    rx2187_cur."!cursor_debug"("PASS", "number", " at pos=", rx2187_pos)
  debug_1578:
    .return (rx2187_cur)
  rx2187_restart:
    if_null rx2187_debug, debug_1579
    rx2187_cur."!cursor_debug"("NEXT", "number")
  debug_1579:
  rx2187_fail:
    (rx2187_rep, rx2187_pos, $I10, $P10) = rx2187_cur."!mark_fail"(0)
    lt rx2187_pos, -1, rx2187_done
    eq rx2187_pos, -1, rx2187_fail
    jump $I10
  rx2187_done:
    rx2187_cur."!cursor_fail"()
    if_null rx2187_debug, debug_1580
    rx2187_cur."!cursor_debug"("FAIL", "number")
  debug_1580:
    .return (rx2187_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__number"  :subid("260_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1215
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote"  :subid("261_1335114138.94729")
    .param pmc param_2194
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1220
    .lex "self", param_2194
    $P103 = param_2194."!protoregex"("quote")
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote"  :subid("262_1335114138.94729")
    .param pmc param_2196
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1220
    .lex "self", param_2196
    $P104 = param_2196."!PREFIX__!protoregex"("quote")
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<apos>"  :subid("263_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1221
    .local string rx2198_tgt
    .local int rx2198_pos
    .local int rx2198_off
    .local int rx2198_eos
    .local int rx2198_rep
    .local pmc rx2198_cur
    .local pmc rx2198_debug
    (rx2198_cur, rx2198_pos, rx2198_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2198_cur
    .local pmc match
    .lex "$/", match
    length rx2198_eos, rx2198_tgt
    gt rx2198_pos, rx2198_eos, rx2198_done
    set rx2198_off, 0
    lt rx2198_pos, 2, rx2198_start
    sub rx2198_off, rx2198_pos, 1
    substr rx2198_tgt, rx2198_tgt, rx2198_off
  rx2198_start:
    eq $I10, 1, rx2198_restart
    if_null rx2198_debug, debug_1581
    rx2198_cur."!cursor_debug"("START", "quote:sym<apos>")
  debug_1581:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2199_done
    goto rxscan2199_scan
  rxscan2199_loop:
    (rx2198_pos) = rx2198_cur."from"()
    inc rx2198_pos
    rx2198_cur."!cursor_from"(rx2198_pos)
    ge rx2198_pos, rx2198_eos, rxscan2199_done
  rxscan2199_scan:
    set_addr $I10, rxscan2199_loop
    rx2198_cur."!mark_push"(0, rx2198_pos, $I10)
  rxscan2199_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2198_pos, rx2198_off
    substr $S10, rx2198_tgt, $I10, 1
    index $I11, "'", $S10
    lt $I11, 0, rx2198_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2198_cur."!cursor_pos"(rx2198_pos)
    $P10 = rx2198_cur."quote_EXPR"(":q")
    unless $P10, rx2198_fail
    rx2198_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2198_pos = $P10."pos"()
  # rx pass
    rx2198_cur."!cursor_pass"(rx2198_pos, "quote:sym<apos>")
    if_null rx2198_debug, debug_1582
    rx2198_cur."!cursor_debug"("PASS", "quote:sym<apos>", " at pos=", rx2198_pos)
  debug_1582:
    .return (rx2198_cur)
  rx2198_restart:
    if_null rx2198_debug, debug_1583
    rx2198_cur."!cursor_debug"("NEXT", "quote:sym<apos>")
  debug_1583:
  rx2198_fail:
    (rx2198_rep, rx2198_pos, $I10, $P10) = rx2198_cur."!mark_fail"(0)
    lt rx2198_pos, -1, rx2198_done
    eq rx2198_pos, -1, rx2198_fail
    jump $I10
  rx2198_done:
    rx2198_cur."!cursor_fail"()
    if_null rx2198_debug, debug_1584
    rx2198_cur."!cursor_debug"("FAIL", "quote:sym<apos>")
  debug_1584:
    .return (rx2198_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<apos>"  :subid("264_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1221
    new $P103, "ResizablePMCArray"
    push $P103, "'"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<dblq>"  :subid("265_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1222
    .local string rx2202_tgt
    .local int rx2202_pos
    .local int rx2202_off
    .local int rx2202_eos
    .local int rx2202_rep
    .local pmc rx2202_cur
    .local pmc rx2202_debug
    (rx2202_cur, rx2202_pos, rx2202_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2202_cur
    .local pmc match
    .lex "$/", match
    length rx2202_eos, rx2202_tgt
    gt rx2202_pos, rx2202_eos, rx2202_done
    set rx2202_off, 0
    lt rx2202_pos, 2, rx2202_start
    sub rx2202_off, rx2202_pos, 1
    substr rx2202_tgt, rx2202_tgt, rx2202_off
  rx2202_start:
    eq $I10, 1, rx2202_restart
    if_null rx2202_debug, debug_1585
    rx2202_cur."!cursor_debug"("START", "quote:sym<dblq>")
  debug_1585:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2203_done
    goto rxscan2203_scan
  rxscan2203_loop:
    (rx2202_pos) = rx2202_cur."from"()
    inc rx2202_pos
    rx2202_cur."!cursor_from"(rx2202_pos)
    ge rx2202_pos, rx2202_eos, rxscan2203_done
  rxscan2203_scan:
    set_addr $I10, rxscan2203_loop
    rx2202_cur."!mark_push"(0, rx2202_pos, $I10)
  rxscan2203_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2202_pos, rx2202_off
    substr $S10, rx2202_tgt, $I10, 1
    index $I11, "\"", $S10
    lt $I11, 0, rx2202_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2202_cur."!cursor_pos"(rx2202_pos)
    $P10 = rx2202_cur."quote_EXPR"(":qq")
    unless $P10, rx2202_fail
    rx2202_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2202_pos = $P10."pos"()
  # rx pass
    rx2202_cur."!cursor_pass"(rx2202_pos, "quote:sym<dblq>")
    if_null rx2202_debug, debug_1586
    rx2202_cur."!cursor_debug"("PASS", "quote:sym<dblq>", " at pos=", rx2202_pos)
  debug_1586:
    .return (rx2202_cur)
  rx2202_restart:
    if_null rx2202_debug, debug_1587
    rx2202_cur."!cursor_debug"("NEXT", "quote:sym<dblq>")
  debug_1587:
  rx2202_fail:
    (rx2202_rep, rx2202_pos, $I10, $P10) = rx2202_cur."!mark_fail"(0)
    lt rx2202_pos, -1, rx2202_done
    eq rx2202_pos, -1, rx2202_fail
    jump $I10
  rx2202_done:
    rx2202_cur."!cursor_fail"()
    if_null rx2202_debug, debug_1588
    rx2202_cur."!cursor_debug"("FAIL", "quote:sym<dblq>")
  debug_1588:
    .return (rx2202_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<dblq>"  :subid("266_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1222
    new $P103, "ResizablePMCArray"
    push $P103, "\""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<q>"  :subid("267_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1223
    .local string rx2206_tgt
    .local int rx2206_pos
    .local int rx2206_off
    .local int rx2206_eos
    .local int rx2206_rep
    .local pmc rx2206_cur
    .local pmc rx2206_debug
    (rx2206_cur, rx2206_pos, rx2206_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2206_cur
    .local pmc match
    .lex "$/", match
    length rx2206_eos, rx2206_tgt
    gt rx2206_pos, rx2206_eos, rx2206_done
    set rx2206_off, 0
    lt rx2206_pos, 2, rx2206_start
    sub rx2206_off, rx2206_pos, 1
    substr rx2206_tgt, rx2206_tgt, rx2206_off
  rx2206_start:
    eq $I10, 1, rx2206_restart
    if_null rx2206_debug, debug_1589
    rx2206_cur."!cursor_debug"("START", "quote:sym<q>")
  debug_1589:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2207_done
    goto rxscan2207_scan
  rxscan2207_loop:
    (rx2206_pos) = rx2206_cur."from"()
    inc rx2206_pos
    rx2206_cur."!cursor_from"(rx2206_pos)
    ge rx2206_pos, rx2206_eos, rxscan2207_done
  rxscan2207_scan:
    set_addr $I10, rxscan2207_loop
    rx2206_cur."!mark_push"(0, rx2206_pos, $I10)
  rxscan2207_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2208_fail
    rx2206_cur."!mark_push"(0, rx2206_pos, $I10)
  # rx literal  "q"
    add $I11, rx2206_pos, 1
    gt $I11, rx2206_eos, rx2206_fail
    sub $I11, rx2206_pos, rx2206_off
    ord $I11, rx2206_tgt, $I11
    ne $I11, 113, rx2206_fail
    add rx2206_pos, 1
    set_addr $I10, rxcap_2208_fail
    ($I12, $I11) = rx2206_cur."!mark_peek"($I10)
    rx2206_cur."!cursor_pos"($I11)
    ($P10) = rx2206_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2206_pos, "")
    rx2206_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2208_done
  rxcap_2208_fail:
    goto rx2206_fail
  rxcap_2208_done:
  # rxanchor rwb
    le rx2206_pos, 0, rx2206_fail
    sub $I10, rx2206_pos, rx2206_off
    is_cclass $I11, .CCLASS_WORD, rx2206_tgt, $I10
    if $I11, rx2206_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2206_tgt, $I10
    unless $I11, rx2206_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2206_pos, rx2206_off
    substr $S10, rx2206_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2206_fail
  # rx subrule "ws" subtype=method negate=
    rx2206_cur."!cursor_pos"(rx2206_pos)
    $P10 = rx2206_cur."ws"()
    unless $P10, rx2206_fail
    rx2206_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2206_cur."!cursor_pos"(rx2206_pos)
    $P10 = rx2206_cur."quote_EXPR"(":q")
    unless $P10, rx2206_fail
    rx2206_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2206_pos = $P10."pos"()
  # rx pass
    rx2206_cur."!cursor_pass"(rx2206_pos, "quote:sym<q>")
    if_null rx2206_debug, debug_1590
    rx2206_cur."!cursor_debug"("PASS", "quote:sym<q>", " at pos=", rx2206_pos)
  debug_1590:
    .return (rx2206_cur)
  rx2206_restart:
    if_null rx2206_debug, debug_1591
    rx2206_cur."!cursor_debug"("NEXT", "quote:sym<q>")
  debug_1591:
  rx2206_fail:
    (rx2206_rep, rx2206_pos, $I10, $P10) = rx2206_cur."!mark_fail"(0)
    lt rx2206_pos, -1, rx2206_done
    eq rx2206_pos, -1, rx2206_fail
    jump $I10
  rx2206_done:
    rx2206_cur."!cursor_fail"()
    if_null rx2206_debug, debug_1592
    rx2206_cur."!cursor_debug"("FAIL", "quote:sym<q>")
  debug_1592:
    .return (rx2206_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<q>"  :subid("268_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1223
    $P103 = self."!PREFIX__!subrule"("ws", "q")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<qq>"  :subid("269_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1224
    .local string rx2211_tgt
    .local int rx2211_pos
    .local int rx2211_off
    .local int rx2211_eos
    .local int rx2211_rep
    .local pmc rx2211_cur
    .local pmc rx2211_debug
    (rx2211_cur, rx2211_pos, rx2211_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2211_cur
    .local pmc match
    .lex "$/", match
    length rx2211_eos, rx2211_tgt
    gt rx2211_pos, rx2211_eos, rx2211_done
    set rx2211_off, 0
    lt rx2211_pos, 2, rx2211_start
    sub rx2211_off, rx2211_pos, 1
    substr rx2211_tgt, rx2211_tgt, rx2211_off
  rx2211_start:
    eq $I10, 1, rx2211_restart
    if_null rx2211_debug, debug_1593
    rx2211_cur."!cursor_debug"("START", "quote:sym<qq>")
  debug_1593:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2212_done
    goto rxscan2212_scan
  rxscan2212_loop:
    (rx2211_pos) = rx2211_cur."from"()
    inc rx2211_pos
    rx2211_cur."!cursor_from"(rx2211_pos)
    ge rx2211_pos, rx2211_eos, rxscan2212_done
  rxscan2212_scan:
    set_addr $I10, rxscan2212_loop
    rx2211_cur."!mark_push"(0, rx2211_pos, $I10)
  rxscan2212_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2213_fail
    rx2211_cur."!mark_push"(0, rx2211_pos, $I10)
  # rx literal  "qq"
    add $I11, rx2211_pos, 2
    gt $I11, rx2211_eos, rx2211_fail
    sub $I11, rx2211_pos, rx2211_off
    substr $S10, rx2211_tgt, $I11, 2
    ne $S10, "qq", rx2211_fail
    add rx2211_pos, 2
    set_addr $I10, rxcap_2213_fail
    ($I12, $I11) = rx2211_cur."!mark_peek"($I10)
    rx2211_cur."!cursor_pos"($I11)
    ($P10) = rx2211_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2211_pos, "")
    rx2211_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2213_done
  rxcap_2213_fail:
    goto rx2211_fail
  rxcap_2213_done:
  # rxanchor rwb
    le rx2211_pos, 0, rx2211_fail
    sub $I10, rx2211_pos, rx2211_off
    is_cclass $I11, .CCLASS_WORD, rx2211_tgt, $I10
    if $I11, rx2211_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2211_tgt, $I10
    unless $I11, rx2211_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2211_pos, rx2211_off
    substr $S10, rx2211_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2211_fail
  # rx subrule "ws" subtype=method negate=
    rx2211_cur."!cursor_pos"(rx2211_pos)
    $P10 = rx2211_cur."ws"()
    unless $P10, rx2211_fail
    rx2211_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2211_cur."!cursor_pos"(rx2211_pos)
    $P10 = rx2211_cur."quote_EXPR"(":qq")
    unless $P10, rx2211_fail
    rx2211_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2211_pos = $P10."pos"()
  # rx pass
    rx2211_cur."!cursor_pass"(rx2211_pos, "quote:sym<qq>")
    if_null rx2211_debug, debug_1594
    rx2211_cur."!cursor_debug"("PASS", "quote:sym<qq>", " at pos=", rx2211_pos)
  debug_1594:
    .return (rx2211_cur)
  rx2211_restart:
    if_null rx2211_debug, debug_1595
    rx2211_cur."!cursor_debug"("NEXT", "quote:sym<qq>")
  debug_1595:
  rx2211_fail:
    (rx2211_rep, rx2211_pos, $I10, $P10) = rx2211_cur."!mark_fail"(0)
    lt rx2211_pos, -1, rx2211_done
    eq rx2211_pos, -1, rx2211_fail
    jump $I10
  rx2211_done:
    rx2211_cur."!cursor_fail"()
    if_null rx2211_debug, debug_1596
    rx2211_cur."!cursor_debug"("FAIL", "quote:sym<qq>")
  debug_1596:
    .return (rx2211_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<qq>"  :subid("270_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1224
    $P103 = self."!PREFIX__!subrule"("ws", "qq")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q>"  :subid("271_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1225
    .local string rx2216_tgt
    .local int rx2216_pos
    .local int rx2216_off
    .local int rx2216_eos
    .local int rx2216_rep
    .local pmc rx2216_cur
    .local pmc rx2216_debug
    (rx2216_cur, rx2216_pos, rx2216_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2216_cur
    .local pmc match
    .lex "$/", match
    length rx2216_eos, rx2216_tgt
    gt rx2216_pos, rx2216_eos, rx2216_done
    set rx2216_off, 0
    lt rx2216_pos, 2, rx2216_start
    sub rx2216_off, rx2216_pos, 1
    substr rx2216_tgt, rx2216_tgt, rx2216_off
  rx2216_start:
    eq $I10, 1, rx2216_restart
    if_null rx2216_debug, debug_1597
    rx2216_cur."!cursor_debug"("START", "quote:sym<Q>")
  debug_1597:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2217_done
    goto rxscan2217_scan
  rxscan2217_loop:
    (rx2216_pos) = rx2216_cur."from"()
    inc rx2216_pos
    rx2216_cur."!cursor_from"(rx2216_pos)
    ge rx2216_pos, rx2216_eos, rxscan2217_done
  rxscan2217_scan:
    set_addr $I10, rxscan2217_loop
    rx2216_cur."!mark_push"(0, rx2216_pos, $I10)
  rxscan2217_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2218_fail
    rx2216_cur."!mark_push"(0, rx2216_pos, $I10)
  # rx literal  "Q"
    add $I11, rx2216_pos, 1
    gt $I11, rx2216_eos, rx2216_fail
    sub $I11, rx2216_pos, rx2216_off
    ord $I11, rx2216_tgt, $I11
    ne $I11, 81, rx2216_fail
    add rx2216_pos, 1
    set_addr $I10, rxcap_2218_fail
    ($I12, $I11) = rx2216_cur."!mark_peek"($I10)
    rx2216_cur."!cursor_pos"($I11)
    ($P10) = rx2216_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2216_pos, "")
    rx2216_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2218_done
  rxcap_2218_fail:
    goto rx2216_fail
  rxcap_2218_done:
  # rxanchor rwb
    le rx2216_pos, 0, rx2216_fail
    sub $I10, rx2216_pos, rx2216_off
    is_cclass $I11, .CCLASS_WORD, rx2216_tgt, $I10
    if $I11, rx2216_fail
    dec $I10
    is_cclass $I11, .CCLASS_WORD, rx2216_tgt, $I10
    unless $I11, rx2216_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2216_pos, rx2216_off
    substr $S10, rx2216_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2216_fail
  # rx subrule "ws" subtype=method negate=
    rx2216_cur."!cursor_pos"(rx2216_pos)
    $P10 = rx2216_cur."ws"()
    unless $P10, rx2216_fail
    rx2216_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2216_cur."!cursor_pos"(rx2216_pos)
    $P10 = rx2216_cur."quote_EXPR"()
    unless $P10, rx2216_fail
    rx2216_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2216_pos = $P10."pos"()
  # rx pass
    rx2216_cur."!cursor_pass"(rx2216_pos, "quote:sym<Q>")
    if_null rx2216_debug, debug_1598
    rx2216_cur."!cursor_debug"("PASS", "quote:sym<Q>", " at pos=", rx2216_pos)
  debug_1598:
    .return (rx2216_cur)
  rx2216_restart:
    if_null rx2216_debug, debug_1599
    rx2216_cur."!cursor_debug"("NEXT", "quote:sym<Q>")
  debug_1599:
  rx2216_fail:
    (rx2216_rep, rx2216_pos, $I10, $P10) = rx2216_cur."!mark_fail"(0)
    lt rx2216_pos, -1, rx2216_done
    eq rx2216_pos, -1, rx2216_fail
    jump $I10
  rx2216_done:
    rx2216_cur."!cursor_fail"()
    if_null rx2216_debug, debug_1600
    rx2216_cur."!cursor_debug"("FAIL", "quote:sym<Q>")
  debug_1600:
    .return (rx2216_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q>"  :subid("272_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1225
    $P103 = self."!PREFIX__!subrule"("ws", "Q")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q:PIR>"  :subid("273_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1226
    .local string rx2221_tgt
    .local int rx2221_pos
    .local int rx2221_off
    .local int rx2221_eos
    .local int rx2221_rep
    .local pmc rx2221_cur
    .local pmc rx2221_debug
    (rx2221_cur, rx2221_pos, rx2221_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2221_cur
    .local pmc match
    .lex "$/", match
    length rx2221_eos, rx2221_tgt
    gt rx2221_pos, rx2221_eos, rx2221_done
    set rx2221_off, 0
    lt rx2221_pos, 2, rx2221_start
    sub rx2221_off, rx2221_pos, 1
    substr rx2221_tgt, rx2221_tgt, rx2221_off
  rx2221_start:
    eq $I10, 1, rx2221_restart
    if_null rx2221_debug, debug_1601
    rx2221_cur."!cursor_debug"("START", "quote:sym<Q:PIR>")
  debug_1601:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2222_done
    goto rxscan2222_scan
  rxscan2222_loop:
    (rx2221_pos) = rx2221_cur."from"()
    inc rx2221_pos
    rx2221_cur."!cursor_from"(rx2221_pos)
    ge rx2221_pos, rx2221_eos, rxscan2222_done
  rxscan2222_scan:
    set_addr $I10, rxscan2222_loop
    rx2221_cur."!mark_push"(0, rx2221_pos, $I10)
  rxscan2222_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2223_fail
    rx2221_cur."!mark_push"(0, rx2221_pos, $I10)
  # rx literal  "Q:PIR"
    add $I11, rx2221_pos, 5
    gt $I11, rx2221_eos, rx2221_fail
    sub $I11, rx2221_pos, rx2221_off
    substr $S10, rx2221_tgt, $I11, 5
    ne $S10, "Q:PIR", rx2221_fail
    add rx2221_pos, 5
    set_addr $I10, rxcap_2223_fail
    ($I12, $I11) = rx2221_cur."!mark_peek"($I10)
    rx2221_cur."!cursor_pos"($I11)
    ($P10) = rx2221_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2221_pos, "")
    rx2221_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2223_done
  rxcap_2223_fail:
    goto rx2221_fail
  rxcap_2223_done:
  # rx subrule "ws" subtype=method negate=
    rx2221_cur."!cursor_pos"(rx2221_pos)
    $P10 = rx2221_cur."ws"()
    unless $P10, rx2221_fail
    rx2221_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2221_cur."!cursor_pos"(rx2221_pos)
    $P10 = rx2221_cur."quote_EXPR"()
    unless $P10, rx2221_fail
    rx2221_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2221_pos = $P10."pos"()
  # rx pass
    rx2221_cur."!cursor_pass"(rx2221_pos, "quote:sym<Q:PIR>")
    if_null rx2221_debug, debug_1602
    rx2221_cur."!cursor_debug"("PASS", "quote:sym<Q:PIR>", " at pos=", rx2221_pos)
  debug_1602:
    .return (rx2221_cur)
  rx2221_restart:
    if_null rx2221_debug, debug_1603
    rx2221_cur."!cursor_debug"("NEXT", "quote:sym<Q:PIR>")
  debug_1603:
  rx2221_fail:
    (rx2221_rep, rx2221_pos, $I10, $P10) = rx2221_cur."!mark_fail"(0)
    lt rx2221_pos, -1, rx2221_done
    eq rx2221_pos, -1, rx2221_fail
    jump $I10
  rx2221_done:
    rx2221_cur."!cursor_fail"()
    if_null rx2221_debug, debug_1604
    rx2221_cur."!cursor_debug"("FAIL", "quote:sym<Q:PIR>")
  debug_1604:
    .return (rx2221_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q:PIR>"  :subid("274_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1226
    $P103 = self."!PREFIX__!subrule"("ws", "Q:PIR")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym</ />"  :subid("275_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1227
    .local string rx2226_tgt
    .local int rx2226_pos
    .local int rx2226_off
    .local int rx2226_eos
    .local int rx2226_rep
    .local pmc rx2226_cur
    .local pmc rx2226_debug
    (rx2226_cur, rx2226_pos, rx2226_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2226_cur
    .local pmc match
    .lex "$/", match
    length rx2226_eos, rx2226_tgt
    gt rx2226_pos, rx2226_eos, rx2226_done
    set rx2226_off, 0
    lt rx2226_pos, 2, rx2226_start
    sub rx2226_off, rx2226_pos, 1
    substr rx2226_tgt, rx2226_tgt, rx2226_off
  rx2226_start:
    eq $I10, 1, rx2226_restart
    if_null rx2226_debug, debug_1605
    rx2226_cur."!cursor_debug"("START", "quote:sym</ />")
  debug_1605:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2227_done
    goto rxscan2227_scan
  rxscan2227_loop:
    (rx2226_pos) = rx2226_cur."from"()
    inc rx2226_pos
    rx2226_cur."!cursor_from"(rx2226_pos)
    ge rx2226_pos, rx2226_eos, rxscan2227_done
  rxscan2227_scan:
    set_addr $I10, rxscan2227_loop
    rx2226_cur."!mark_push"(0, rx2226_pos, $I10)
  rxscan2227_done:
.annotate 'line', 1228
  # rx literal  "/"
    add $I11, rx2226_pos, 1
    gt $I11, rx2226_eos, rx2226_fail
    sub $I11, rx2226_pos, rx2226_off
    ord $I11, rx2226_tgt, $I11
    ne $I11, 47, rx2226_fail
    add rx2226_pos, 1
.annotate 'line', 1229
  # rx subrule "newpad" subtype=method negate=
    rx2226_cur."!cursor_pos"(rx2226_pos)
    $P10 = rx2226_cur."newpad"()
    unless $P10, rx2226_fail
    rx2226_pos = $P10."pos"()
.annotate 'line', 1230
  # rx reduce name="quote:sym</ />" key="open"
    rx2226_cur."!cursor_pos"(rx2226_pos)
    rx2226_cur."!reduce"("quote:sym</ />", "open")
.annotate 'line', 1231
  # rx subrule "LANG" subtype=capture negate=
    rx2226_cur."!cursor_pos"(rx2226_pos)
    $P10 = rx2226_cur."LANG"("Regex", "nibbler")
    unless $P10, rx2226_fail
    rx2226_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx2226_pos = $P10."pos"()
.annotate 'line', 1232
  # rx literal  "/"
    add $I11, rx2226_pos, 1
    gt $I11, rx2226_eos, rx2226_fail
    sub $I11, rx2226_pos, rx2226_off
    ord $I11, rx2226_tgt, $I11
    ne $I11, 47, rx2226_fail
    add rx2226_pos, 1
.annotate 'line', 1227
  # rx pass
    rx2226_cur."!cursor_pass"(rx2226_pos, "quote:sym</ />")
    if_null rx2226_debug, debug_1606
    rx2226_cur."!cursor_debug"("PASS", "quote:sym</ />", " at pos=", rx2226_pos)
  debug_1606:
    .return (rx2226_cur)
  rx2226_restart:
    if_null rx2226_debug, debug_1607
    rx2226_cur."!cursor_debug"("NEXT", "quote:sym</ />")
  debug_1607:
  rx2226_fail:
    (rx2226_rep, rx2226_pos, $I10, $P10) = rx2226_cur."!mark_fail"(0)
    lt rx2226_pos, -1, rx2226_done
    eq rx2226_pos, -1, rx2226_fail
    jump $I10
  rx2226_done:
    rx2226_cur."!cursor_fail"()
    if_null rx2226_debug, debug_1608
    rx2226_cur."!cursor_debug"("FAIL", "quote:sym</ />")
  debug_1608:
    .return (rx2226_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym</ />"  :subid("276_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1227
    $P103 = self."!PREFIX__!subrule"("newpad", "/")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<$>"  :subid("277_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1235
    .local string rx2230_tgt
    .local int rx2230_pos
    .local int rx2230_off
    .local int rx2230_eos
    .local int rx2230_rep
    .local pmc rx2230_cur
    .local pmc rx2230_debug
    (rx2230_cur, rx2230_pos, rx2230_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2230_cur
    .local pmc match
    .lex "$/", match
    length rx2230_eos, rx2230_tgt
    gt rx2230_pos, rx2230_eos, rx2230_done
    set rx2230_off, 0
    lt rx2230_pos, 2, rx2230_start
    sub rx2230_off, rx2230_pos, 1
    substr rx2230_tgt, rx2230_tgt, rx2230_off
  rx2230_start:
    eq $I10, 1, rx2230_restart
    if_null rx2230_debug, debug_1609
    rx2230_cur."!cursor_debug"("START", "quote_escape:sym<$>")
  debug_1609:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2231_done
    goto rxscan2231_scan
  rxscan2231_loop:
    (rx2230_pos) = rx2230_cur."from"()
    inc rx2230_pos
    rx2230_cur."!cursor_from"(rx2230_pos)
    ge rx2230_pos, rx2230_eos, rxscan2231_done
  rxscan2231_scan:
    set_addr $I10, rxscan2231_loop
    rx2230_cur."!mark_push"(0, rx2230_pos, $I10)
  rxscan2231_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2230_pos, rx2230_off
    substr $S10, rx2230_tgt, $I10, 1
    index $I11, "$", $S10
    lt $I11, 0, rx2230_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2230_cur."!cursor_pos"(rx2230_pos)
    $P10 = rx2230_cur."quotemod_check"("s")
    unless $P10, rx2230_fail
  # rx subrule "variable" subtype=capture negate=
    rx2230_cur."!cursor_pos"(rx2230_pos)
    $P10 = rx2230_cur."variable"()
    unless $P10, rx2230_fail
    rx2230_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx2230_pos = $P10."pos"()
  # rx pass
    rx2230_cur."!cursor_pass"(rx2230_pos, "quote_escape:sym<$>")
    if_null rx2230_debug, debug_1610
    rx2230_cur."!cursor_debug"("PASS", "quote_escape:sym<$>", " at pos=", rx2230_pos)
  debug_1610:
    .return (rx2230_cur)
  rx2230_restart:
    if_null rx2230_debug, debug_1611
    rx2230_cur."!cursor_debug"("NEXT", "quote_escape:sym<$>")
  debug_1611:
  rx2230_fail:
    (rx2230_rep, rx2230_pos, $I10, $P10) = rx2230_cur."!mark_fail"(0)
    lt rx2230_pos, -1, rx2230_done
    eq rx2230_pos, -1, rx2230_fail
    jump $I10
  rx2230_done:
    rx2230_cur."!cursor_fail"()
    if_null rx2230_debug, debug_1612
    rx2230_cur."!cursor_debug"("FAIL", "quote_escape:sym<$>")
  debug_1612:
    .return (rx2230_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<$>"  :subid("278_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1235
    new $P103, "ResizablePMCArray"
    push $P103, "$"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<{ }>"  :subid("279_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1236
    .local string rx2234_tgt
    .local int rx2234_pos
    .local int rx2234_off
    .local int rx2234_eos
    .local int rx2234_rep
    .local pmc rx2234_cur
    .local pmc rx2234_debug
    (rx2234_cur, rx2234_pos, rx2234_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2234_cur
    .local pmc match
    .lex "$/", match
    length rx2234_eos, rx2234_tgt
    gt rx2234_pos, rx2234_eos, rx2234_done
    set rx2234_off, 0
    lt rx2234_pos, 2, rx2234_start
    sub rx2234_off, rx2234_pos, 1
    substr rx2234_tgt, rx2234_tgt, rx2234_off
  rx2234_start:
    eq $I10, 1, rx2234_restart
    if_null rx2234_debug, debug_1613
    rx2234_cur."!cursor_debug"("START", "quote_escape:sym<{ }>")
  debug_1613:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2235_done
    goto rxscan2235_scan
  rxscan2235_loop:
    (rx2234_pos) = rx2234_cur."from"()
    inc rx2234_pos
    rx2234_cur."!cursor_from"(rx2234_pos)
    ge rx2234_pos, rx2234_eos, rxscan2235_done
  rxscan2235_scan:
    set_addr $I10, rxscan2235_loop
    rx2234_cur."!mark_push"(0, rx2234_pos, $I10)
  rxscan2235_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2234_pos, rx2234_off
    substr $S10, rx2234_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2234_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2234_cur."!cursor_pos"(rx2234_pos)
    $P10 = rx2234_cur."quotemod_check"("c")
    unless $P10, rx2234_fail
  # rx subrule "block" subtype=capture negate=
    rx2234_cur."!cursor_pos"(rx2234_pos)
    $P10 = rx2234_cur."block"()
    unless $P10, rx2234_fail
    rx2234_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx2234_pos = $P10."pos"()
  # rx pass
    rx2234_cur."!cursor_pass"(rx2234_pos, "quote_escape:sym<{ }>")
    if_null rx2234_debug, debug_1614
    rx2234_cur."!cursor_debug"("PASS", "quote_escape:sym<{ }>", " at pos=", rx2234_pos)
  debug_1614:
    .return (rx2234_cur)
  rx2234_restart:
    if_null rx2234_debug, debug_1615
    rx2234_cur."!cursor_debug"("NEXT", "quote_escape:sym<{ }>")
  debug_1615:
  rx2234_fail:
    (rx2234_rep, rx2234_pos, $I10, $P10) = rx2234_cur."!mark_fail"(0)
    lt rx2234_pos, -1, rx2234_done
    eq rx2234_pos, -1, rx2234_fail
    jump $I10
  rx2234_done:
    rx2234_cur."!cursor_fail"()
    if_null rx2234_debug, debug_1616
    rx2234_cur."!cursor_debug"("FAIL", "quote_escape:sym<{ }>")
  debug_1616:
    .return (rx2234_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<{ }>"  :subid("280_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1236
    new $P103, "ResizablePMCArray"
    push $P103, "{"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("281_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1237
    .local string rx2238_tgt
    .local int rx2238_pos
    .local int rx2238_off
    .local int rx2238_eos
    .local int rx2238_rep
    .local pmc rx2238_cur
    .local pmc rx2238_debug
    (rx2238_cur, rx2238_pos, rx2238_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2238_cur
    .local pmc match
    .lex "$/", match
    length rx2238_eos, rx2238_tgt
    gt rx2238_pos, rx2238_eos, rx2238_done
    set rx2238_off, 0
    lt rx2238_pos, 2, rx2238_start
    sub rx2238_off, rx2238_pos, 1
    substr rx2238_tgt, rx2238_tgt, rx2238_off
  rx2238_start:
    eq $I10, 1, rx2238_restart
    if_null rx2238_debug, debug_1617
    rx2238_cur."!cursor_debug"("START", "quote_escape:sym<esc>")
  debug_1617:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2239_done
    goto rxscan2239_scan
  rxscan2239_loop:
    (rx2238_pos) = rx2238_cur."from"()
    inc rx2238_pos
    rx2238_cur."!cursor_from"(rx2238_pos)
    ge rx2238_pos, rx2238_eos, rxscan2239_done
  rxscan2239_scan:
    set_addr $I10, rxscan2239_loop
    rx2238_cur."!mark_push"(0, rx2238_pos, $I10)
  rxscan2239_done:
  # rx literal  "\\e"
    add $I11, rx2238_pos, 2
    gt $I11, rx2238_eos, rx2238_fail
    sub $I11, rx2238_pos, rx2238_off
    substr $S10, rx2238_tgt, $I11, 2
    ne $S10, "\\e", rx2238_fail
    add rx2238_pos, 2
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2238_cur."!cursor_pos"(rx2238_pos)
    $P10 = rx2238_cur."quotemod_check"("b")
    unless $P10, rx2238_fail
  # rx pass
    rx2238_cur."!cursor_pass"(rx2238_pos, "quote_escape:sym<esc>")
    if_null rx2238_debug, debug_1618
    rx2238_cur."!cursor_debug"("PASS", "quote_escape:sym<esc>", " at pos=", rx2238_pos)
  debug_1618:
    .return (rx2238_cur)
  rx2238_restart:
    if_null rx2238_debug, debug_1619
    rx2238_cur."!cursor_debug"("NEXT", "quote_escape:sym<esc>")
  debug_1619:
  rx2238_fail:
    (rx2238_rep, rx2238_pos, $I10, $P10) = rx2238_cur."!mark_fail"(0)
    lt rx2238_pos, -1, rx2238_done
    eq rx2238_pos, -1, rx2238_fail
    jump $I10
  rx2238_done:
    rx2238_cur."!cursor_fail"()
    if_null rx2238_debug, debug_1620
    rx2238_cur."!cursor_debug"("FAIL", "quote_escape:sym<esc>")
  debug_1620:
    .return (rx2238_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<esc>"  :subid("282_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1237
    new $P103, "ResizablePMCArray"
    push $P103, "\\e"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<( )>"  :subid("283_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1239
    .local string rx2242_tgt
    .local int rx2242_pos
    .local int rx2242_off
    .local int rx2242_eos
    .local int rx2242_rep
    .local pmc rx2242_cur
    .local pmc rx2242_debug
    (rx2242_cur, rx2242_pos, rx2242_tgt, $I10) = self."!cursor_start"()
    rx2242_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx2242_cur
    .local pmc match
    .lex "$/", match
    length rx2242_eos, rx2242_tgt
    gt rx2242_pos, rx2242_eos, rx2242_done
    set rx2242_off, 0
    lt rx2242_pos, 2, rx2242_start
    sub rx2242_off, rx2242_pos, 1
    substr rx2242_tgt, rx2242_tgt, rx2242_off
  rx2242_start:
    eq $I10, 1, rx2242_restart
    if_null rx2242_debug, debug_1621
    rx2242_cur."!cursor_debug"("START", "circumfix:sym<( )>")
  debug_1621:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2243_done
    goto rxscan2243_scan
  rxscan2243_loop:
    (rx2242_pos) = rx2242_cur."from"()
    inc rx2242_pos
    rx2242_cur."!cursor_from"(rx2242_pos)
    ge rx2242_pos, rx2242_eos, rxscan2243_done
  rxscan2243_scan:
    set_addr $I10, rxscan2243_loop
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  rxscan2243_done:
  # rx literal  "("
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 40, rx2242_fail
    add rx2242_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx rxquantr2244 ** 0..1
    set_addr $I10, rxquantr2244_done
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  rxquantr2244_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."EXPR"()
    unless $P10, rx2242_fail
    goto rxsubrule2245_pass
  rxsubrule2245_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2242_fail
  rxsubrule2245_pass:
    set_addr $I10, rxsubrule2245_back
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx2242_pos = $P10."pos"()
    set_addr $I10, rxquantr2244_done
    (rx2242_rep) = rx2242_cur."!mark_commit"($I10)
  rxquantr2244_done:
  # rx literal  ")"
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 41, rx2242_fail
    add rx2242_pos, 1
  # rx pass
    rx2242_cur."!cursor_pass"(rx2242_pos, "circumfix:sym<( )>")
    if_null rx2242_debug, debug_1622
    rx2242_cur."!cursor_debug"("PASS", "circumfix:sym<( )>", " at pos=", rx2242_pos)
  debug_1622:
    .return (rx2242_cur)
  rx2242_restart:
    if_null rx2242_debug, debug_1623
    rx2242_cur."!cursor_debug"("NEXT", "circumfix:sym<( )>")
  debug_1623:
  rx2242_fail:
    (rx2242_rep, rx2242_pos, $I10, $P10) = rx2242_cur."!mark_fail"(0)
    lt rx2242_pos, -1, rx2242_done
    eq rx2242_pos, -1, rx2242_fail
    jump $I10
  rx2242_done:
    rx2242_cur."!cursor_fail"()
    if_null rx2242_debug, debug_1624
    rx2242_cur."!cursor_debug"("FAIL", "circumfix:sym<( )>")
  debug_1624:
    .return (rx2242_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<( )>"  :subid("284_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1239
    $P103 = self."!PREFIX__!subrule"("ws", "(")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<[ ]>"  :subid("285_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1240
    .local string rx2248_tgt
    .local int rx2248_pos
    .local int rx2248_off
    .local int rx2248_eos
    .local int rx2248_rep
    .local pmc rx2248_cur
    .local pmc rx2248_debug
    (rx2248_cur, rx2248_pos, rx2248_tgt, $I10) = self."!cursor_start"()
    rx2248_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx2248_cur
    .local pmc match
    .lex "$/", match
    length rx2248_eos, rx2248_tgt
    gt rx2248_pos, rx2248_eos, rx2248_done
    set rx2248_off, 0
    lt rx2248_pos, 2, rx2248_start
    sub rx2248_off, rx2248_pos, 1
    substr rx2248_tgt, rx2248_tgt, rx2248_off
  rx2248_start:
    eq $I10, 1, rx2248_restart
    if_null rx2248_debug, debug_1625
    rx2248_cur."!cursor_debug"("START", "circumfix:sym<[ ]>")
  debug_1625:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2249_done
    goto rxscan2249_scan
  rxscan2249_loop:
    (rx2248_pos) = rx2248_cur."from"()
    inc rx2248_pos
    rx2248_cur."!cursor_from"(rx2248_pos)
    ge rx2248_pos, rx2248_eos, rxscan2249_done
  rxscan2249_scan:
    set_addr $I10, rxscan2249_loop
    rx2248_cur."!mark_push"(0, rx2248_pos, $I10)
  rxscan2249_done:
  # rx literal  "["
    add $I11, rx2248_pos, 1
    gt $I11, rx2248_eos, rx2248_fail
    sub $I11, rx2248_pos, rx2248_off
    ord $I11, rx2248_tgt, $I11
    ne $I11, 91, rx2248_fail
    add rx2248_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2248_cur."!cursor_pos"(rx2248_pos)
    $P10 = rx2248_cur."ws"()
    unless $P10, rx2248_fail
    rx2248_pos = $P10."pos"()
  # rx rxquantr2250 ** 0..1
    set_addr $I10, rxquantr2250_done
    rx2248_cur."!mark_push"(0, rx2248_pos, $I10)
  rxquantr2250_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx2248_cur."!cursor_pos"(rx2248_pos)
    $P10 = rx2248_cur."EXPR"()
    unless $P10, rx2248_fail
    goto rxsubrule2251_pass
  rxsubrule2251_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2248_fail
  rxsubrule2251_pass:
    set_addr $I10, rxsubrule2251_back
    rx2248_cur."!mark_push"(0, rx2248_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx2248_pos = $P10."pos"()
    set_addr $I10, rxquantr2250_done
    (rx2248_rep) = rx2248_cur."!mark_commit"($I10)
  rxquantr2250_done:
  # rx literal  "]"
    add $I11, rx2248_pos, 1
    gt $I11, rx2248_eos, rx2248_fail
    sub $I11, rx2248_pos, rx2248_off
    ord $I11, rx2248_tgt, $I11
    ne $I11, 93, rx2248_fail
    add rx2248_pos, 1
  # rx pass
    rx2248_cur."!cursor_pass"(rx2248_pos, "circumfix:sym<[ ]>")
    if_null rx2248_debug, debug_1626
    rx2248_cur."!cursor_debug"("PASS", "circumfix:sym<[ ]>", " at pos=", rx2248_pos)
  debug_1626:
    .return (rx2248_cur)
  rx2248_restart:
    if_null rx2248_debug, debug_1627
    rx2248_cur."!cursor_debug"("NEXT", "circumfix:sym<[ ]>")
  debug_1627:
  rx2248_fail:
    (rx2248_rep, rx2248_pos, $I10, $P10) = rx2248_cur."!mark_fail"(0)
    lt rx2248_pos, -1, rx2248_done
    eq rx2248_pos, -1, rx2248_fail
    jump $I10
  rx2248_done:
    rx2248_cur."!cursor_fail"()
    if_null rx2248_debug, debug_1628
    rx2248_cur."!cursor_debug"("FAIL", "circumfix:sym<[ ]>")
  debug_1628:
    .return (rx2248_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<[ ]>"  :subid("286_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1240
    $P103 = self."!PREFIX__!subrule"("ws", "[")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<ang>"  :subid("287_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1241
    .local string rx2254_tgt
    .local int rx2254_pos
    .local int rx2254_off
    .local int rx2254_eos
    .local int rx2254_rep
    .local pmc rx2254_cur
    .local pmc rx2254_debug
    (rx2254_cur, rx2254_pos, rx2254_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2254_cur
    .local pmc match
    .lex "$/", match
    length rx2254_eos, rx2254_tgt
    gt rx2254_pos, rx2254_eos, rx2254_done
    set rx2254_off, 0
    lt rx2254_pos, 2, rx2254_start
    sub rx2254_off, rx2254_pos, 1
    substr rx2254_tgt, rx2254_tgt, rx2254_off
  rx2254_start:
    eq $I10, 1, rx2254_restart
    if_null rx2254_debug, debug_1629
    rx2254_cur."!cursor_debug"("START", "circumfix:sym<ang>")
  debug_1629:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2255_done
    goto rxscan2255_scan
  rxscan2255_loop:
    (rx2254_pos) = rx2254_cur."from"()
    inc rx2254_pos
    rx2254_cur."!cursor_from"(rx2254_pos)
    ge rx2254_pos, rx2254_eos, rxscan2255_done
  rxscan2255_scan:
    set_addr $I10, rxscan2255_loop
    rx2254_cur."!mark_push"(0, rx2254_pos, $I10)
  rxscan2255_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2254_pos, rx2254_off
    substr $S10, rx2254_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx2254_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2254_cur."!cursor_pos"(rx2254_pos)
    $P10 = rx2254_cur."quote_EXPR"(":q", ":w")
    unless $P10, rx2254_fail
    rx2254_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2254_pos = $P10."pos"()
  # rx pass
    rx2254_cur."!cursor_pass"(rx2254_pos, "circumfix:sym<ang>")
    if_null rx2254_debug, debug_1630
    rx2254_cur."!cursor_debug"("PASS", "circumfix:sym<ang>", " at pos=", rx2254_pos)
  debug_1630:
    .return (rx2254_cur)
  rx2254_restart:
    if_null rx2254_debug, debug_1631
    rx2254_cur."!cursor_debug"("NEXT", "circumfix:sym<ang>")
  debug_1631:
  rx2254_fail:
    (rx2254_rep, rx2254_pos, $I10, $P10) = rx2254_cur."!mark_fail"(0)
    lt rx2254_pos, -1, rx2254_done
    eq rx2254_pos, -1, rx2254_fail
    jump $I10
  rx2254_done:
    rx2254_cur."!cursor_fail"()
    if_null rx2254_debug, debug_1632
    rx2254_cur."!cursor_debug"("FAIL", "circumfix:sym<ang>")
  debug_1632:
    .return (rx2254_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<ang>"  :subid("288_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1241
    new $P103, "ResizablePMCArray"
    push $P103, "<"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("289_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1242
    .local string rx2258_tgt
    .local int rx2258_pos
    .local int rx2258_off
    .local int rx2258_eos
    .local int rx2258_rep
    .local pmc rx2258_cur
    .local pmc rx2258_debug
    (rx2258_cur, rx2258_pos, rx2258_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2258_cur
    .local pmc match
    .lex "$/", match
    length rx2258_eos, rx2258_tgt
    gt rx2258_pos, rx2258_eos, rx2258_done
    set rx2258_off, 0
    lt rx2258_pos, 2, rx2258_start
    sub rx2258_off, rx2258_pos, 1
    substr rx2258_tgt, rx2258_tgt, rx2258_off
  rx2258_start:
    eq $I10, 1, rx2258_restart
    if_null rx2258_debug, debug_1633
    rx2258_cur."!cursor_debug"("START", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1633:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2259_done
    goto rxscan2259_scan
  rxscan2259_loop:
    (rx2258_pos) = rx2258_cur."from"()
    inc rx2258_pos
    rx2258_cur."!cursor_from"(rx2258_pos)
    ge rx2258_pos, rx2258_eos, rxscan2259_done
  rxscan2259_scan:
    set_addr $I10, rxscan2259_loop
    rx2258_cur."!mark_push"(0, rx2258_pos, $I10)
  rxscan2259_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2258_pos, rx2258_off
    substr $S10, rx2258_tgt, $I10, 1
    index $I11, unicode:"\x{ab}", $S10
    lt $I11, 0, rx2258_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2258_cur."!cursor_pos"(rx2258_pos)
    $P10 = rx2258_cur."quote_EXPR"(":qq", ":w")
    unless $P10, rx2258_fail
    rx2258_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2258_pos = $P10."pos"()
  # rx pass
    rx2258_cur."!cursor_pass"(rx2258_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>")
    if_null rx2258_debug, debug_1634
    rx2258_cur."!cursor_debug"("PASS", unicode:"circumfix:sym<\x{ab} \x{bb}>", " at pos=", rx2258_pos)
  debug_1634:
    .return (rx2258_cur)
  rx2258_restart:
    if_null rx2258_debug, debug_1635
    rx2258_cur."!cursor_debug"("NEXT", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1635:
  rx2258_fail:
    (rx2258_rep, rx2258_pos, $I10, $P10) = rx2258_cur."!mark_fail"(0)
    lt rx2258_pos, -1, rx2258_done
    eq rx2258_pos, -1, rx2258_fail
    jump $I10
  rx2258_done:
    rx2258_cur."!cursor_fail"()
    if_null rx2258_debug, debug_1636
    rx2258_cur."!cursor_debug"("FAIL", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1636:
    .return (rx2258_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"  :subid("290_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1242
    new $P103, "ResizablePMCArray"
    push $P103, unicode:"\x{ab}"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<{ }>"  :subid("291_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1243
    .local string rx2262_tgt
    .local int rx2262_pos
    .local int rx2262_off
    .local int rx2262_eos
    .local int rx2262_rep
    .local pmc rx2262_cur
    .local pmc rx2262_debug
    (rx2262_cur, rx2262_pos, rx2262_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2262_cur
    .local pmc match
    .lex "$/", match
    length rx2262_eos, rx2262_tgt
    gt rx2262_pos, rx2262_eos, rx2262_done
    set rx2262_off, 0
    lt rx2262_pos, 2, rx2262_start
    sub rx2262_off, rx2262_pos, 1
    substr rx2262_tgt, rx2262_tgt, rx2262_off
  rx2262_start:
    eq $I10, 1, rx2262_restart
    if_null rx2262_debug, debug_1637
    rx2262_cur."!cursor_debug"("START", "circumfix:sym<{ }>")
  debug_1637:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2263_done
    goto rxscan2263_scan
  rxscan2263_loop:
    (rx2262_pos) = rx2262_cur."from"()
    inc rx2262_pos
    rx2262_cur."!cursor_from"(rx2262_pos)
    ge rx2262_pos, rx2262_eos, rxscan2263_done
  rxscan2263_scan:
    set_addr $I10, rxscan2263_loop
    rx2262_cur."!mark_push"(0, rx2262_pos, $I10)
  rxscan2263_done:
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2262_pos, rx2262_off
    substr $S10, rx2262_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2262_fail
  # rx subrule "pblock" subtype=capture negate=
    rx2262_cur."!cursor_pos"(rx2262_pos)
    $P10 = rx2262_cur."pblock"()
    unless $P10, rx2262_fail
    rx2262_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx2262_pos = $P10."pos"()
  # rx pass
    rx2262_cur."!cursor_pass"(rx2262_pos, "circumfix:sym<{ }>")
    if_null rx2262_debug, debug_1638
    rx2262_cur."!cursor_debug"("PASS", "circumfix:sym<{ }>", " at pos=", rx2262_pos)
  debug_1638:
    .return (rx2262_cur)
  rx2262_restart:
    if_null rx2262_debug, debug_1639
    rx2262_cur."!cursor_debug"("NEXT", "circumfix:sym<{ }>")
  debug_1639:
  rx2262_fail:
    (rx2262_rep, rx2262_pos, $I10, $P10) = rx2262_cur."!mark_fail"(0)
    lt rx2262_pos, -1, rx2262_done
    eq rx2262_pos, -1, rx2262_fail
    jump $I10
  rx2262_done:
    rx2262_cur."!cursor_fail"()
    if_null rx2262_debug, debug_1640
    rx2262_cur."!cursor_debug"("FAIL", "circumfix:sym<{ }>")
  debug_1640:
    .return (rx2262_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<{ }>"  :subid("292_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1243
    new $P103, "ResizablePMCArray"
    push $P103, "{"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<sigil>"  :subid("293_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1244
    .local string rx2266_tgt
    .local int rx2266_pos
    .local int rx2266_off
    .local int rx2266_eos
    .local int rx2266_rep
    .local pmc rx2266_cur
    .local pmc rx2266_debug
    (rx2266_cur, rx2266_pos, rx2266_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2266_cur
    .local pmc match
    .lex "$/", match
    length rx2266_eos, rx2266_tgt
    gt rx2266_pos, rx2266_eos, rx2266_done
    set rx2266_off, 0
    lt rx2266_pos, 2, rx2266_start
    sub rx2266_off, rx2266_pos, 1
    substr rx2266_tgt, rx2266_tgt, rx2266_off
  rx2266_start:
    eq $I10, 1, rx2266_restart
    if_null rx2266_debug, debug_1641
    rx2266_cur."!cursor_debug"("START", "circumfix:sym<sigil>")
  debug_1641:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2267_done
    goto rxscan2267_scan
  rxscan2267_loop:
    (rx2266_pos) = rx2266_cur."from"()
    inc rx2266_pos
    rx2266_cur."!cursor_from"(rx2266_pos)
    ge rx2266_pos, rx2266_eos, rxscan2267_done
  rxscan2267_scan:
    set_addr $I10, rxscan2267_loop
    rx2266_cur."!mark_push"(0, rx2266_pos, $I10)
  rxscan2267_done:
  # rx subrule "sigil" subtype=capture negate=
    rx2266_cur."!cursor_pos"(rx2266_pos)
    $P10 = rx2266_cur."sigil"()
    unless $P10, rx2266_fail
    rx2266_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx2266_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2266_pos, 1
    gt $I11, rx2266_eos, rx2266_fail
    sub $I11, rx2266_pos, rx2266_off
    ord $I11, rx2266_tgt, $I11
    ne $I11, 40, rx2266_fail
    add rx2266_pos, 1
  # rx subrule "semilist" subtype=capture negate=
    rx2266_cur."!cursor_pos"(rx2266_pos)
    $P10 = rx2266_cur."semilist"()
    unless $P10, rx2266_fail
    rx2266_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("semilist")
    rx2266_pos = $P10."pos"()
  alt2268_0:
    set_addr $I10, alt2268_1
    rx2266_cur."!mark_push"(0, rx2266_pos, $I10)
  # rx literal  ")"
    add $I11, rx2266_pos, 1
    gt $I11, rx2266_eos, rx2266_fail
    sub $I11, rx2266_pos, rx2266_off
    ord $I11, rx2266_tgt, $I11
    ne $I11, 41, rx2266_fail
    add rx2266_pos, 1
    goto alt2268_end
  alt2268_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx2266_cur."!cursor_pos"(rx2266_pos)
    $P10 = rx2266_cur."FAILGOAL"("')'")
    unless $P10, rx2266_fail
    goto rxsubrule2269_pass
  rxsubrule2269_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2266_fail
  rxsubrule2269_pass:
    set_addr $I10, rxsubrule2269_back
    rx2266_cur."!mark_push"(0, rx2266_pos, $I10, $P10)
    rx2266_pos = $P10."pos"()
  alt2268_end:
  # rx pass
    rx2266_cur."!cursor_pass"(rx2266_pos, "circumfix:sym<sigil>")
    if_null rx2266_debug, debug_1642
    rx2266_cur."!cursor_debug"("PASS", "circumfix:sym<sigil>", " at pos=", rx2266_pos)
  debug_1642:
    .return (rx2266_cur)
  rx2266_restart:
    if_null rx2266_debug, debug_1643
    rx2266_cur."!cursor_debug"("NEXT", "circumfix:sym<sigil>")
  debug_1643:
  rx2266_fail:
    (rx2266_rep, rx2266_pos, $I10, $P10) = rx2266_cur."!mark_fail"(0)
    lt rx2266_pos, -1, rx2266_done
    eq rx2266_pos, -1, rx2266_fail
    jump $I10
  rx2266_done:
    rx2266_cur."!cursor_fail"()
    if_null rx2266_debug, debug_1644
    rx2266_cur."!cursor_debug"("FAIL", "circumfix:sym<sigil>")
  debug_1644:
    .return (rx2266_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<sigil>"  :subid("294_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1244
    $P104 = self."!PREFIX__!subrule"("sigil", "")
    new $P105, "ResizablePMCArray"
    push $P105, $P104
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "semilist"  :subid("295_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1246
    .local string rx2272_tgt
    .local int rx2272_pos
    .local int rx2272_off
    .local int rx2272_eos
    .local int rx2272_rep
    .local pmc rx2272_cur
    .local pmc rx2272_debug
    (rx2272_cur, rx2272_pos, rx2272_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2272_cur
    .local pmc match
    .lex "$/", match
    length rx2272_eos, rx2272_tgt
    gt rx2272_pos, rx2272_eos, rx2272_done
    set rx2272_off, 0
    lt rx2272_pos, 2, rx2272_start
    sub rx2272_off, rx2272_pos, 1
    substr rx2272_tgt, rx2272_tgt, rx2272_off
  rx2272_start:
    eq $I10, 1, rx2272_restart
    if_null rx2272_debug, debug_1645
    rx2272_cur."!cursor_debug"("START", "semilist")
  debug_1645:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2273_done
    goto rxscan2273_scan
  rxscan2273_loop:
    (rx2272_pos) = rx2272_cur."from"()
    inc rx2272_pos
    rx2272_cur."!cursor_from"(rx2272_pos)
    ge rx2272_pos, rx2272_eos, rxscan2273_done
  rxscan2273_scan:
    set_addr $I10, rxscan2273_loop
    rx2272_cur."!mark_push"(0, rx2272_pos, $I10)
  rxscan2273_done:
  # rx subrule "ws" subtype=method negate=
    rx2272_cur."!cursor_pos"(rx2272_pos)
    $P10 = rx2272_cur."ws"()
    unless $P10, rx2272_fail
    rx2272_pos = $P10."pos"()
  # rx subrule "statement" subtype=capture negate=
    rx2272_cur."!cursor_pos"(rx2272_pos)
    $P10 = rx2272_cur."statement"()
    unless $P10, rx2272_fail
    rx2272_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx2272_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2272_cur."!cursor_pos"(rx2272_pos)
    $P10 = rx2272_cur."ws"()
    unless $P10, rx2272_fail
    rx2272_pos = $P10."pos"()
  # rx pass
    rx2272_cur."!cursor_pass"(rx2272_pos, "semilist")
    if_null rx2272_debug, debug_1646
    rx2272_cur."!cursor_debug"("PASS", "semilist", " at pos=", rx2272_pos)
  debug_1646:
    .return (rx2272_cur)
  rx2272_restart:
    if_null rx2272_debug, debug_1647
    rx2272_cur."!cursor_debug"("NEXT", "semilist")
  debug_1647:
  rx2272_fail:
    (rx2272_rep, rx2272_pos, $I10, $P10) = rx2272_cur."!mark_fail"(0)
    lt rx2272_pos, -1, rx2272_done
    eq rx2272_pos, -1, rx2272_fail
    jump $I10
  rx2272_done:
    rx2272_cur."!cursor_fail"()
    if_null rx2272_debug, debug_1648
    rx2272_cur."!cursor_debug"("FAIL", "semilist")
  debug_1648:
    .return (rx2272_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__semilist"  :subid("296_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1246
    $P105 = self."!PREFIX__!subrule"("ws", "")
    new $P106, "ResizablePMCArray"
    push $P106, $P105
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixish"  :subid("297_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1269
    .local string rx2276_tgt
    .local int rx2276_pos
    .local int rx2276_off
    .local int rx2276_eos
    .local int rx2276_rep
    .local pmc rx2276_cur
    .local pmc rx2276_debug
    (rx2276_cur, rx2276_pos, rx2276_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2276_cur
    .local pmc match
    .lex "$/", match
    length rx2276_eos, rx2276_tgt
    gt rx2276_pos, rx2276_eos, rx2276_done
    set rx2276_off, 0
    lt rx2276_pos, 2, rx2276_start
    sub rx2276_off, rx2276_pos, 1
    substr rx2276_tgt, rx2276_tgt, rx2276_off
  rx2276_start:
    eq $I10, 1, rx2276_restart
    if_null rx2276_debug, debug_1649
    rx2276_cur."!cursor_debug"("START", "infixish")
  debug_1649:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2277_done
    goto rxscan2277_scan
  rxscan2277_loop:
    (rx2276_pos) = rx2276_cur."from"()
    inc rx2276_pos
    rx2276_cur."!cursor_from"(rx2276_pos)
    ge rx2276_pos, rx2276_eos, rxscan2277_done
  rxscan2277_scan:
    set_addr $I10, rxscan2277_loop
    rx2276_cur."!mark_push"(0, rx2276_pos, $I10)
  rxscan2277_done:
  # rx subrule "infixstopper" subtype=zerowidth negate=1
    rx2276_cur."!cursor_pos"(rx2276_pos)
    $P10 = rx2276_cur."infixstopper"()
    if $P10, rx2276_fail
  # rx subrule "infix" subtype=capture negate=
    rx2276_cur."!cursor_pos"(rx2276_pos)
    $P10 = rx2276_cur."infix"()
    unless $P10, rx2276_fail
    rx2276_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("OPER=infix")
    rx2276_pos = $P10."pos"()
  # rx pass
    rx2276_cur."!cursor_pass"(rx2276_pos, "infixish")
    if_null rx2276_debug, debug_1650
    rx2276_cur."!cursor_debug"("PASS", "infixish", " at pos=", rx2276_pos)
  debug_1650:
    .return (rx2276_cur)
  rx2276_restart:
    if_null rx2276_debug, debug_1651
    rx2276_cur."!cursor_debug"("NEXT", "infixish")
  debug_1651:
  rx2276_fail:
    (rx2276_rep, rx2276_pos, $I10, $P10) = rx2276_cur."!mark_fail"(0)
    lt rx2276_pos, -1, rx2276_done
    eq rx2276_pos, -1, rx2276_fail
    jump $I10
  rx2276_done:
    rx2276_cur."!cursor_fail"()
    if_null rx2276_debug, debug_1652
    rx2276_cur."!cursor_debug"("FAIL", "infixish")
  debug_1652:
    .return (rx2276_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixish"  :subid("298_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1269
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixstopper"  :subid("299_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1270
    .local string rx2280_tgt
    .local int rx2280_pos
    .local int rx2280_off
    .local int rx2280_eos
    .local int rx2280_rep
    .local pmc rx2280_cur
    .local pmc rx2280_debug
    (rx2280_cur, rx2280_pos, rx2280_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2280_cur
    .local pmc match
    .lex "$/", match
    length rx2280_eos, rx2280_tgt
    gt rx2280_pos, rx2280_eos, rx2280_done
    set rx2280_off, 0
    lt rx2280_pos, 2, rx2280_start
    sub rx2280_off, rx2280_pos, 1
    substr rx2280_tgt, rx2280_tgt, rx2280_off
  rx2280_start:
    eq $I10, 1, rx2280_restart
    if_null rx2280_debug, debug_1653
    rx2280_cur."!cursor_debug"("START", "infixstopper")
  debug_1653:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2281_done
    goto rxscan2281_scan
  rxscan2281_loop:
    (rx2280_pos) = rx2280_cur."from"()
    inc rx2280_pos
    rx2280_cur."!cursor_from"(rx2280_pos)
    ge rx2280_pos, rx2280_eos, rxscan2281_done
  rxscan2281_scan:
    set_addr $I10, rxscan2281_loop
    rx2280_cur."!mark_push"(0, rx2280_pos, $I10)
  rxscan2281_done:
  # rx subrule "lambda" subtype=zerowidth negate=
    rx2280_cur."!cursor_pos"(rx2280_pos)
    $P10 = rx2280_cur."lambda"()
    unless $P10, rx2280_fail
  # rx pass
    rx2280_cur."!cursor_pass"(rx2280_pos, "infixstopper")
    if_null rx2280_debug, debug_1654
    rx2280_cur."!cursor_debug"("PASS", "infixstopper", " at pos=", rx2280_pos)
  debug_1654:
    .return (rx2280_cur)
  rx2280_restart:
    if_null rx2280_debug, debug_1655
    rx2280_cur."!cursor_debug"("NEXT", "infixstopper")
  debug_1655:
  rx2280_fail:
    (rx2280_rep, rx2280_pos, $I10, $P10) = rx2280_cur."!mark_fail"(0)
    lt rx2280_pos, -1, rx2280_done
    eq rx2280_pos, -1, rx2280_fail
    jump $I10
  rx2280_done:
    rx2280_cur."!cursor_fail"()
    if_null rx2280_debug, debug_1656
    rx2280_cur."!cursor_debug"("FAIL", "infixstopper")
  debug_1656:
    .return (rx2280_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixstopper"  :subid("300_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1270
    new $P103, "ResizablePMCArray"
    push $P103, ""
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<[ ]>"  :subid("301_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1272
    .local string rx2284_tgt
    .local int rx2284_pos
    .local int rx2284_off
    .local int rx2284_eos
    .local int rx2284_rep
    .local pmc rx2284_cur
    .local pmc rx2284_debug
    (rx2284_cur, rx2284_pos, rx2284_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2284_cur
    .local pmc match
    .lex "$/", match
    length rx2284_eos, rx2284_tgt
    gt rx2284_pos, rx2284_eos, rx2284_done
    set rx2284_off, 0
    lt rx2284_pos, 2, rx2284_start
    sub rx2284_off, rx2284_pos, 1
    substr rx2284_tgt, rx2284_tgt, rx2284_off
  rx2284_start:
    eq $I10, 1, rx2284_restart
    if_null rx2284_debug, debug_1657
    rx2284_cur."!cursor_debug"("START", "postcircumfix:sym<[ ]>")
  debug_1657:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2285_done
    goto rxscan2285_scan
  rxscan2285_loop:
    (rx2284_pos) = rx2284_cur."from"()
    inc rx2284_pos
    rx2284_cur."!cursor_from"(rx2284_pos)
    ge rx2284_pos, rx2284_eos, rxscan2285_done
  rxscan2285_scan:
    set_addr $I10, rxscan2285_loop
    rx2284_cur."!mark_push"(0, rx2284_pos, $I10)
  rxscan2285_done:
.annotate 'line', 1273
  # rx literal  "["
    add $I11, rx2284_pos, 1
    gt $I11, rx2284_eos, rx2284_fail
    sub $I11, rx2284_pos, rx2284_off
    ord $I11, rx2284_tgt, $I11
    ne $I11, 91, rx2284_fail
    add rx2284_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2284_cur."!cursor_pos"(rx2284_pos)
    $P10 = rx2284_cur."ws"()
    unless $P10, rx2284_fail
    rx2284_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2284_cur."!cursor_pos"(rx2284_pos)
    $P10 = rx2284_cur."EXPR"()
    unless $P10, rx2284_fail
    rx2284_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2284_pos = $P10."pos"()
  # rx literal  "]"
    add $I11, rx2284_pos, 1
    gt $I11, rx2284_eos, rx2284_fail
    sub $I11, rx2284_pos, rx2284_off
    ord $I11, rx2284_tgt, $I11
    ne $I11, 93, rx2284_fail
    add rx2284_pos, 1
.annotate 'line', 1274
  # rx subrule "O" subtype=capture negate=
    rx2284_cur."!cursor_pos"(rx2284_pos)
    $P10 = rx2284_cur."O"("%methodop")
    unless $P10, rx2284_fail
    rx2284_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2284_pos = $P10."pos"()
.annotate 'line', 1272
  # rx pass
    rx2284_cur."!cursor_pass"(rx2284_pos, "postcircumfix:sym<[ ]>")
    if_null rx2284_debug, debug_1658
    rx2284_cur."!cursor_debug"("PASS", "postcircumfix:sym<[ ]>", " at pos=", rx2284_pos)
  debug_1658:
    .return (rx2284_cur)
  rx2284_restart:
    if_null rx2284_debug, debug_1659
    rx2284_cur."!cursor_debug"("NEXT", "postcircumfix:sym<[ ]>")
  debug_1659:
  rx2284_fail:
    (rx2284_rep, rx2284_pos, $I10, $P10) = rx2284_cur."!mark_fail"(0)
    lt rx2284_pos, -1, rx2284_done
    eq rx2284_pos, -1, rx2284_fail
    jump $I10
  rx2284_done:
    rx2284_cur."!cursor_fail"()
    if_null rx2284_debug, debug_1660
    rx2284_cur."!cursor_debug"("FAIL", "postcircumfix:sym<[ ]>")
  debug_1660:
    .return (rx2284_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<[ ]>"  :subid("302_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1272
    $P103 = self."!PREFIX__!subrule"("ws", "[")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<{ }>"  :subid("303_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1277
    .local string rx2288_tgt
    .local int rx2288_pos
    .local int rx2288_off
    .local int rx2288_eos
    .local int rx2288_rep
    .local pmc rx2288_cur
    .local pmc rx2288_debug
    (rx2288_cur, rx2288_pos, rx2288_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2288_cur
    .local pmc match
    .lex "$/", match
    length rx2288_eos, rx2288_tgt
    gt rx2288_pos, rx2288_eos, rx2288_done
    set rx2288_off, 0
    lt rx2288_pos, 2, rx2288_start
    sub rx2288_off, rx2288_pos, 1
    substr rx2288_tgt, rx2288_tgt, rx2288_off
  rx2288_start:
    eq $I10, 1, rx2288_restart
    if_null rx2288_debug, debug_1661
    rx2288_cur."!cursor_debug"("START", "postcircumfix:sym<{ }>")
  debug_1661:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2289_done
    goto rxscan2289_scan
  rxscan2289_loop:
    (rx2288_pos) = rx2288_cur."from"()
    inc rx2288_pos
    rx2288_cur."!cursor_from"(rx2288_pos)
    ge rx2288_pos, rx2288_eos, rxscan2289_done
  rxscan2289_scan:
    set_addr $I10, rxscan2289_loop
    rx2288_cur."!mark_push"(0, rx2288_pos, $I10)
  rxscan2289_done:
.annotate 'line', 1278
  # rx literal  "{"
    add $I11, rx2288_pos, 1
    gt $I11, rx2288_eos, rx2288_fail
    sub $I11, rx2288_pos, rx2288_off
    ord $I11, rx2288_tgt, $I11
    ne $I11, 123, rx2288_fail
    add rx2288_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2288_cur."!cursor_pos"(rx2288_pos)
    $P10 = rx2288_cur."ws"()
    unless $P10, rx2288_fail
    rx2288_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2288_cur."!cursor_pos"(rx2288_pos)
    $P10 = rx2288_cur."EXPR"()
    unless $P10, rx2288_fail
    rx2288_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2288_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2288_pos, 1
    gt $I11, rx2288_eos, rx2288_fail
    sub $I11, rx2288_pos, rx2288_off
    ord $I11, rx2288_tgt, $I11
    ne $I11, 125, rx2288_fail
    add rx2288_pos, 1
.annotate 'line', 1279
  # rx subrule "O" subtype=capture negate=
    rx2288_cur."!cursor_pos"(rx2288_pos)
    $P10 = rx2288_cur."O"("%methodop")
    unless $P10, rx2288_fail
    rx2288_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2288_pos = $P10."pos"()
.annotate 'line', 1277
  # rx pass
    rx2288_cur."!cursor_pass"(rx2288_pos, "postcircumfix:sym<{ }>")
    if_null rx2288_debug, debug_1662
    rx2288_cur."!cursor_debug"("PASS", "postcircumfix:sym<{ }>", " at pos=", rx2288_pos)
  debug_1662:
    .return (rx2288_cur)
  rx2288_restart:
    if_null rx2288_debug, debug_1663
    rx2288_cur."!cursor_debug"("NEXT", "postcircumfix:sym<{ }>")
  debug_1663:
  rx2288_fail:
    (rx2288_rep, rx2288_pos, $I10, $P10) = rx2288_cur."!mark_fail"(0)
    lt rx2288_pos, -1, rx2288_done
    eq rx2288_pos, -1, rx2288_fail
    jump $I10
  rx2288_done:
    rx2288_cur."!cursor_fail"()
    if_null rx2288_debug, debug_1664
    rx2288_cur."!cursor_debug"("FAIL", "postcircumfix:sym<{ }>")
  debug_1664:
    .return (rx2288_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<{ }>"  :subid("304_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1277
    $P103 = self."!PREFIX__!subrule"("ws", "{")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<ang>"  :subid("305_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1282
    .local string rx2292_tgt
    .local int rx2292_pos
    .local int rx2292_off
    .local int rx2292_eos
    .local int rx2292_rep
    .local pmc rx2292_cur
    .local pmc rx2292_debug
    (rx2292_cur, rx2292_pos, rx2292_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2292_cur
    .local pmc match
    .lex "$/", match
    length rx2292_eos, rx2292_tgt
    gt rx2292_pos, rx2292_eos, rx2292_done
    set rx2292_off, 0
    lt rx2292_pos, 2, rx2292_start
    sub rx2292_off, rx2292_pos, 1
    substr rx2292_tgt, rx2292_tgt, rx2292_off
  rx2292_start:
    eq $I10, 1, rx2292_restart
    if_null rx2292_debug, debug_1665
    rx2292_cur."!cursor_debug"("START", "postcircumfix:sym<ang>")
  debug_1665:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2293_done
    goto rxscan2293_scan
  rxscan2293_loop:
    (rx2292_pos) = rx2292_cur."from"()
    inc rx2292_pos
    rx2292_cur."!cursor_from"(rx2292_pos)
    ge rx2292_pos, rx2292_eos, rxscan2293_done
  rxscan2293_scan:
    set_addr $I10, rxscan2293_loop
    rx2292_cur."!mark_push"(0, rx2292_pos, $I10)
  rxscan2293_done:
.annotate 'line', 1283
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2292_pos, rx2292_off
    substr $S10, rx2292_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx2292_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2292_cur."!cursor_pos"(rx2292_pos)
    $P10 = rx2292_cur."quote_EXPR"(":q")
    unless $P10, rx2292_fail
    rx2292_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2292_pos = $P10."pos"()
.annotate 'line', 1284
  # rx subrule "O" subtype=capture negate=
    rx2292_cur."!cursor_pos"(rx2292_pos)
    $P10 = rx2292_cur."O"("%methodop")
    unless $P10, rx2292_fail
    rx2292_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2292_pos = $P10."pos"()
.annotate 'line', 1282
  # rx pass
    rx2292_cur."!cursor_pass"(rx2292_pos, "postcircumfix:sym<ang>")
    if_null rx2292_debug, debug_1666
    rx2292_cur."!cursor_debug"("PASS", "postcircumfix:sym<ang>", " at pos=", rx2292_pos)
  debug_1666:
    .return (rx2292_cur)
  rx2292_restart:
    if_null rx2292_debug, debug_1667
    rx2292_cur."!cursor_debug"("NEXT", "postcircumfix:sym<ang>")
  debug_1667:
  rx2292_fail:
    (rx2292_rep, rx2292_pos, $I10, $P10) = rx2292_cur."!mark_fail"(0)
    lt rx2292_pos, -1, rx2292_done
    eq rx2292_pos, -1, rx2292_fail
    jump $I10
  rx2292_done:
    rx2292_cur."!cursor_fail"()
    if_null rx2292_debug, debug_1668
    rx2292_cur."!cursor_debug"("FAIL", "postcircumfix:sym<ang>")
  debug_1668:
    .return (rx2292_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<ang>"  :subid("306_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1282
    new $P103, "ResizablePMCArray"
    push $P103, "<"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<( )>"  :subid("307_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1287
    .local string rx2296_tgt
    .local int rx2296_pos
    .local int rx2296_off
    .local int rx2296_eos
    .local int rx2296_rep
    .local pmc rx2296_cur
    .local pmc rx2296_debug
    (rx2296_cur, rx2296_pos, rx2296_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2296_cur
    .local pmc match
    .lex "$/", match
    length rx2296_eos, rx2296_tgt
    gt rx2296_pos, rx2296_eos, rx2296_done
    set rx2296_off, 0
    lt rx2296_pos, 2, rx2296_start
    sub rx2296_off, rx2296_pos, 1
    substr rx2296_tgt, rx2296_tgt, rx2296_off
  rx2296_start:
    eq $I10, 1, rx2296_restart
    if_null rx2296_debug, debug_1669
    rx2296_cur."!cursor_debug"("START", "postcircumfix:sym<( )>")
  debug_1669:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2297_done
    goto rxscan2297_scan
  rxscan2297_loop:
    (rx2296_pos) = rx2296_cur."from"()
    inc rx2296_pos
    rx2296_cur."!cursor_from"(rx2296_pos)
    ge rx2296_pos, rx2296_eos, rxscan2297_done
  rxscan2297_scan:
    set_addr $I10, rxscan2297_loop
    rx2296_cur."!mark_push"(0, rx2296_pos, $I10)
  rxscan2297_done:
.annotate 'line', 1288
  # rx literal  "("
    add $I11, rx2296_pos, 1
    gt $I11, rx2296_eos, rx2296_fail
    sub $I11, rx2296_pos, rx2296_off
    ord $I11, rx2296_tgt, $I11
    ne $I11, 40, rx2296_fail
    add rx2296_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2296_cur."!cursor_pos"(rx2296_pos)
    $P10 = rx2296_cur."ws"()
    unless $P10, rx2296_fail
    rx2296_pos = $P10."pos"()
  # rx subrule "arglist" subtype=capture negate=
    rx2296_cur."!cursor_pos"(rx2296_pos)
    $P10 = rx2296_cur."arglist"()
    unless $P10, rx2296_fail
    rx2296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2296_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2296_pos, 1
    gt $I11, rx2296_eos, rx2296_fail
    sub $I11, rx2296_pos, rx2296_off
    ord $I11, rx2296_tgt, $I11
    ne $I11, 41, rx2296_fail
    add rx2296_pos, 1
.annotate 'line', 1289
  # rx subrule "O" subtype=capture negate=
    rx2296_cur."!cursor_pos"(rx2296_pos)
    $P10 = rx2296_cur."O"("%methodop")
    unless $P10, rx2296_fail
    rx2296_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2296_pos = $P10."pos"()
.annotate 'line', 1287
  # rx pass
    rx2296_cur."!cursor_pass"(rx2296_pos, "postcircumfix:sym<( )>")
    if_null rx2296_debug, debug_1670
    rx2296_cur."!cursor_debug"("PASS", "postcircumfix:sym<( )>", " at pos=", rx2296_pos)
  debug_1670:
    .return (rx2296_cur)
  rx2296_restart:
    if_null rx2296_debug, debug_1671
    rx2296_cur."!cursor_debug"("NEXT", "postcircumfix:sym<( )>")
  debug_1671:
  rx2296_fail:
    (rx2296_rep, rx2296_pos, $I10, $P10) = rx2296_cur."!mark_fail"(0)
    lt rx2296_pos, -1, rx2296_done
    eq rx2296_pos, -1, rx2296_fail
    jump $I10
  rx2296_done:
    rx2296_cur."!cursor_fail"()
    if_null rx2296_debug, debug_1672
    rx2296_cur."!cursor_debug"("FAIL", "postcircumfix:sym<( )>")
  debug_1672:
    .return (rx2296_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<( )>"  :subid("308_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1287
    $P103 = self."!PREFIX__!subrule"("ws", "(")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<.>"  :subid("309_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1292
    .local string rx2300_tgt
    .local int rx2300_pos
    .local int rx2300_off
    .local int rx2300_eos
    .local int rx2300_rep
    .local pmc rx2300_cur
    .local pmc rx2300_debug
    (rx2300_cur, rx2300_pos, rx2300_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2300_cur
    .local pmc match
    .lex "$/", match
    length rx2300_eos, rx2300_tgt
    gt rx2300_pos, rx2300_eos, rx2300_done
    set rx2300_off, 0
    lt rx2300_pos, 2, rx2300_start
    sub rx2300_off, rx2300_pos, 1
    substr rx2300_tgt, rx2300_tgt, rx2300_off
  rx2300_start:
    eq $I10, 1, rx2300_restart
    if_null rx2300_debug, debug_1673
    rx2300_cur."!cursor_debug"("START", "postfix:sym<.>")
  debug_1673:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2301_done
    goto rxscan2301_scan
  rxscan2301_loop:
    (rx2300_pos) = rx2300_cur."from"()
    inc rx2300_pos
    rx2300_cur."!cursor_from"(rx2300_pos)
    ge rx2300_pos, rx2300_eos, rxscan2301_done
  rxscan2301_scan:
    set_addr $I10, rxscan2301_loop
    rx2300_cur."!mark_push"(0, rx2300_pos, $I10)
  rxscan2301_done:
  # rx subrule "dotty" subtype=capture negate=
    rx2300_cur."!cursor_pos"(rx2300_pos)
    $P10 = rx2300_cur."dotty"()
    unless $P10, rx2300_fail
    rx2300_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dotty")
    rx2300_pos = $P10."pos"()
  # rx subrule "O" subtype=capture negate=
    rx2300_cur."!cursor_pos"(rx2300_pos)
    $P10 = rx2300_cur."O"("%methodop")
    unless $P10, rx2300_fail
    rx2300_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2300_pos = $P10."pos"()
  # rx pass
    rx2300_cur."!cursor_pass"(rx2300_pos, "postfix:sym<.>")
    if_null rx2300_debug, debug_1674
    rx2300_cur."!cursor_debug"("PASS", "postfix:sym<.>", " at pos=", rx2300_pos)
  debug_1674:
    .return (rx2300_cur)
  rx2300_restart:
    if_null rx2300_debug, debug_1675
    rx2300_cur."!cursor_debug"("NEXT", "postfix:sym<.>")
  debug_1675:
  rx2300_fail:
    (rx2300_rep, rx2300_pos, $I10, $P10) = rx2300_cur."!mark_fail"(0)
    lt rx2300_pos, -1, rx2300_done
    eq rx2300_pos, -1, rx2300_fail
    jump $I10
  rx2300_done:
    rx2300_cur."!cursor_fail"()
    if_null rx2300_debug, debug_1676
    rx2300_cur."!cursor_debug"("FAIL", "postfix:sym<.>")
  debug_1676:
    .return (rx2300_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<.>"  :subid("310_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1292
    $P103 = self."!PREFIX__!subrule"("dotty", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<++>"  :subid("311_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1294
    .local string rx2304_tgt
    .local int rx2304_pos
    .local int rx2304_off
    .local int rx2304_eos
    .local int rx2304_rep
    .local pmc rx2304_cur
    .local pmc rx2304_debug
    (rx2304_cur, rx2304_pos, rx2304_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2304_cur
    .local pmc match
    .lex "$/", match
    length rx2304_eos, rx2304_tgt
    gt rx2304_pos, rx2304_eos, rx2304_done
    set rx2304_off, 0
    lt rx2304_pos, 2, rx2304_start
    sub rx2304_off, rx2304_pos, 1
    substr rx2304_tgt, rx2304_tgt, rx2304_off
  rx2304_start:
    eq $I10, 1, rx2304_restart
    if_null rx2304_debug, debug_1677
    rx2304_cur."!cursor_debug"("START", "prefix:sym<++>")
  debug_1677:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2305_done
    goto rxscan2305_scan
  rxscan2305_loop:
    (rx2304_pos) = rx2304_cur."from"()
    inc rx2304_pos
    rx2304_cur."!cursor_from"(rx2304_pos)
    ge rx2304_pos, rx2304_eos, rxscan2305_done
  rxscan2305_scan:
    set_addr $I10, rxscan2305_loop
    rx2304_cur."!mark_push"(0, rx2304_pos, $I10)
  rxscan2305_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2306_fail
    rx2304_cur."!mark_push"(0, rx2304_pos, $I10)
  # rx literal  "++"
    add $I11, rx2304_pos, 2
    gt $I11, rx2304_eos, rx2304_fail
    sub $I11, rx2304_pos, rx2304_off
    substr $S10, rx2304_tgt, $I11, 2
    ne $S10, "++", rx2304_fail
    add rx2304_pos, 2
    set_addr $I10, rxcap_2306_fail
    ($I12, $I11) = rx2304_cur."!mark_peek"($I10)
    rx2304_cur."!cursor_pos"($I11)
    ($P10) = rx2304_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2304_pos, "")
    rx2304_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2306_done
  rxcap_2306_fail:
    goto rx2304_fail
  rxcap_2306_done:
  # rx subrule "O" subtype=capture negate=
    rx2304_cur."!cursor_pos"(rx2304_pos)
    $P10 = rx2304_cur."O"("%autoincrement, :pirop<inc>")
    unless $P10, rx2304_fail
    rx2304_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2304_pos = $P10."pos"()
  # rx pass
    rx2304_cur."!cursor_pass"(rx2304_pos, "prefix:sym<++>")
    if_null rx2304_debug, debug_1678
    rx2304_cur."!cursor_debug"("PASS", "prefix:sym<++>", " at pos=", rx2304_pos)
  debug_1678:
    .return (rx2304_cur)
  rx2304_restart:
    if_null rx2304_debug, debug_1679
    rx2304_cur."!cursor_debug"("NEXT", "prefix:sym<++>")
  debug_1679:
  rx2304_fail:
    (rx2304_rep, rx2304_pos, $I10, $P10) = rx2304_cur."!mark_fail"(0)
    lt rx2304_pos, -1, rx2304_done
    eq rx2304_pos, -1, rx2304_fail
    jump $I10
  rx2304_done:
    rx2304_cur."!cursor_fail"()
    if_null rx2304_debug, debug_1680
    rx2304_cur."!cursor_debug"("FAIL", "prefix:sym<++>")
  debug_1680:
    .return (rx2304_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<++>"  :subid("312_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1294
    $P103 = self."!PREFIX__!subrule"("O", "++")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<-->"  :subid("313_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1295
    .local string rx2309_tgt
    .local int rx2309_pos
    .local int rx2309_off
    .local int rx2309_eos
    .local int rx2309_rep
    .local pmc rx2309_cur
    .local pmc rx2309_debug
    (rx2309_cur, rx2309_pos, rx2309_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2309_cur
    .local pmc match
    .lex "$/", match
    length rx2309_eos, rx2309_tgt
    gt rx2309_pos, rx2309_eos, rx2309_done
    set rx2309_off, 0
    lt rx2309_pos, 2, rx2309_start
    sub rx2309_off, rx2309_pos, 1
    substr rx2309_tgt, rx2309_tgt, rx2309_off
  rx2309_start:
    eq $I10, 1, rx2309_restart
    if_null rx2309_debug, debug_1681
    rx2309_cur."!cursor_debug"("START", "prefix:sym<-->")
  debug_1681:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2310_done
    goto rxscan2310_scan
  rxscan2310_loop:
    (rx2309_pos) = rx2309_cur."from"()
    inc rx2309_pos
    rx2309_cur."!cursor_from"(rx2309_pos)
    ge rx2309_pos, rx2309_eos, rxscan2310_done
  rxscan2310_scan:
    set_addr $I10, rxscan2310_loop
    rx2309_cur."!mark_push"(0, rx2309_pos, $I10)
  rxscan2310_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2311_fail
    rx2309_cur."!mark_push"(0, rx2309_pos, $I10)
  # rx literal  "--"
    add $I11, rx2309_pos, 2
    gt $I11, rx2309_eos, rx2309_fail
    sub $I11, rx2309_pos, rx2309_off
    substr $S10, rx2309_tgt, $I11, 2
    ne $S10, "--", rx2309_fail
    add rx2309_pos, 2
    set_addr $I10, rxcap_2311_fail
    ($I12, $I11) = rx2309_cur."!mark_peek"($I10)
    rx2309_cur."!cursor_pos"($I11)
    ($P10) = rx2309_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2309_pos, "")
    rx2309_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2311_done
  rxcap_2311_fail:
    goto rx2309_fail
  rxcap_2311_done:
  # rx subrule "O" subtype=capture negate=
    rx2309_cur."!cursor_pos"(rx2309_pos)
    $P10 = rx2309_cur."O"("%autoincrement, :pirop<dec>")
    unless $P10, rx2309_fail
    rx2309_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2309_pos = $P10."pos"()
  # rx pass
    rx2309_cur."!cursor_pass"(rx2309_pos, "prefix:sym<-->")
    if_null rx2309_debug, debug_1682
    rx2309_cur."!cursor_debug"("PASS", "prefix:sym<-->", " at pos=", rx2309_pos)
  debug_1682:
    .return (rx2309_cur)
  rx2309_restart:
    if_null rx2309_debug, debug_1683
    rx2309_cur."!cursor_debug"("NEXT", "prefix:sym<-->")
  debug_1683:
  rx2309_fail:
    (rx2309_rep, rx2309_pos, $I10, $P10) = rx2309_cur."!mark_fail"(0)
    lt rx2309_pos, -1, rx2309_done
    eq rx2309_pos, -1, rx2309_fail
    jump $I10
  rx2309_done:
    rx2309_cur."!cursor_fail"()
    if_null rx2309_debug, debug_1684
    rx2309_cur."!cursor_debug"("FAIL", "prefix:sym<-->")
  debug_1684:
    .return (rx2309_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<-->"  :subid("314_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1295
    $P103 = self."!PREFIX__!subrule"("O", "--")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<++>"  :subid("315_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1298
    .local string rx2314_tgt
    .local int rx2314_pos
    .local int rx2314_off
    .local int rx2314_eos
    .local int rx2314_rep
    .local pmc rx2314_cur
    .local pmc rx2314_debug
    (rx2314_cur, rx2314_pos, rx2314_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2314_cur
    .local pmc match
    .lex "$/", match
    length rx2314_eos, rx2314_tgt
    gt rx2314_pos, rx2314_eos, rx2314_done
    set rx2314_off, 0
    lt rx2314_pos, 2, rx2314_start
    sub rx2314_off, rx2314_pos, 1
    substr rx2314_tgt, rx2314_tgt, rx2314_off
  rx2314_start:
    eq $I10, 1, rx2314_restart
    if_null rx2314_debug, debug_1685
    rx2314_cur."!cursor_debug"("START", "postfix:sym<++>")
  debug_1685:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2315_done
    goto rxscan2315_scan
  rxscan2315_loop:
    (rx2314_pos) = rx2314_cur."from"()
    inc rx2314_pos
    rx2314_cur."!cursor_from"(rx2314_pos)
    ge rx2314_pos, rx2314_eos, rxscan2315_done
  rxscan2315_scan:
    set_addr $I10, rxscan2315_loop
    rx2314_cur."!mark_push"(0, rx2314_pos, $I10)
  rxscan2315_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2316_fail
    rx2314_cur."!mark_push"(0, rx2314_pos, $I10)
  # rx literal  "++"
    add $I11, rx2314_pos, 2
    gt $I11, rx2314_eos, rx2314_fail
    sub $I11, rx2314_pos, rx2314_off
    substr $S10, rx2314_tgt, $I11, 2
    ne $S10, "++", rx2314_fail
    add rx2314_pos, 2
    set_addr $I10, rxcap_2316_fail
    ($I12, $I11) = rx2314_cur."!mark_peek"($I10)
    rx2314_cur."!cursor_pos"($I11)
    ($P10) = rx2314_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2314_pos, "")
    rx2314_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2316_done
  rxcap_2316_fail:
    goto rx2314_fail
  rxcap_2316_done:
  # rx subrule "O" subtype=capture negate=
    rx2314_cur."!cursor_pos"(rx2314_pos)
    $P10 = rx2314_cur."O"("%autoincrement")
    unless $P10, rx2314_fail
    rx2314_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2314_pos = $P10."pos"()
  # rx pass
    rx2314_cur."!cursor_pass"(rx2314_pos, "postfix:sym<++>")
    if_null rx2314_debug, debug_1686
    rx2314_cur."!cursor_debug"("PASS", "postfix:sym<++>", " at pos=", rx2314_pos)
  debug_1686:
    .return (rx2314_cur)
  rx2314_restart:
    if_null rx2314_debug, debug_1687
    rx2314_cur."!cursor_debug"("NEXT", "postfix:sym<++>")
  debug_1687:
  rx2314_fail:
    (rx2314_rep, rx2314_pos, $I10, $P10) = rx2314_cur."!mark_fail"(0)
    lt rx2314_pos, -1, rx2314_done
    eq rx2314_pos, -1, rx2314_fail
    jump $I10
  rx2314_done:
    rx2314_cur."!cursor_fail"()
    if_null rx2314_debug, debug_1688
    rx2314_cur."!cursor_debug"("FAIL", "postfix:sym<++>")
  debug_1688:
    .return (rx2314_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<++>"  :subid("316_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1298
    $P103 = self."!PREFIX__!subrule"("O", "++")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<-->"  :subid("317_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1299
    .local string rx2319_tgt
    .local int rx2319_pos
    .local int rx2319_off
    .local int rx2319_eos
    .local int rx2319_rep
    .local pmc rx2319_cur
    .local pmc rx2319_debug
    (rx2319_cur, rx2319_pos, rx2319_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2319_cur
    .local pmc match
    .lex "$/", match
    length rx2319_eos, rx2319_tgt
    gt rx2319_pos, rx2319_eos, rx2319_done
    set rx2319_off, 0
    lt rx2319_pos, 2, rx2319_start
    sub rx2319_off, rx2319_pos, 1
    substr rx2319_tgt, rx2319_tgt, rx2319_off
  rx2319_start:
    eq $I10, 1, rx2319_restart
    if_null rx2319_debug, debug_1689
    rx2319_cur."!cursor_debug"("START", "postfix:sym<-->")
  debug_1689:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2320_done
    goto rxscan2320_scan
  rxscan2320_loop:
    (rx2319_pos) = rx2319_cur."from"()
    inc rx2319_pos
    rx2319_cur."!cursor_from"(rx2319_pos)
    ge rx2319_pos, rx2319_eos, rxscan2320_done
  rxscan2320_scan:
    set_addr $I10, rxscan2320_loop
    rx2319_cur."!mark_push"(0, rx2319_pos, $I10)
  rxscan2320_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2321_fail
    rx2319_cur."!mark_push"(0, rx2319_pos, $I10)
  # rx literal  "--"
    add $I11, rx2319_pos, 2
    gt $I11, rx2319_eos, rx2319_fail
    sub $I11, rx2319_pos, rx2319_off
    substr $S10, rx2319_tgt, $I11, 2
    ne $S10, "--", rx2319_fail
    add rx2319_pos, 2
    set_addr $I10, rxcap_2321_fail
    ($I12, $I11) = rx2319_cur."!mark_peek"($I10)
    rx2319_cur."!cursor_pos"($I11)
    ($P10) = rx2319_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2319_pos, "")
    rx2319_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2321_done
  rxcap_2321_fail:
    goto rx2319_fail
  rxcap_2321_done:
  # rx subrule "O" subtype=capture negate=
    rx2319_cur."!cursor_pos"(rx2319_pos)
    $P10 = rx2319_cur."O"("%autoincrement")
    unless $P10, rx2319_fail
    rx2319_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2319_pos = $P10."pos"()
  # rx pass
    rx2319_cur."!cursor_pass"(rx2319_pos, "postfix:sym<-->")
    if_null rx2319_debug, debug_1690
    rx2319_cur."!cursor_debug"("PASS", "postfix:sym<-->", " at pos=", rx2319_pos)
  debug_1690:
    .return (rx2319_cur)
  rx2319_restart:
    if_null rx2319_debug, debug_1691
    rx2319_cur."!cursor_debug"("NEXT", "postfix:sym<-->")
  debug_1691:
  rx2319_fail:
    (rx2319_rep, rx2319_pos, $I10, $P10) = rx2319_cur."!mark_fail"(0)
    lt rx2319_pos, -1, rx2319_done
    eq rx2319_pos, -1, rx2319_fail
    jump $I10
  rx2319_done:
    rx2319_cur."!cursor_fail"()
    if_null rx2319_debug, debug_1692
    rx2319_cur."!cursor_debug"("FAIL", "postfix:sym<-->")
  debug_1692:
    .return (rx2319_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<-->"  :subid("318_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1299
    $P103 = self."!PREFIX__!subrule"("O", "--")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<**>"  :subid("319_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1301
    .local string rx2324_tgt
    .local int rx2324_pos
    .local int rx2324_off
    .local int rx2324_eos
    .local int rx2324_rep
    .local pmc rx2324_cur
    .local pmc rx2324_debug
    (rx2324_cur, rx2324_pos, rx2324_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2324_cur
    .local pmc match
    .lex "$/", match
    length rx2324_eos, rx2324_tgt
    gt rx2324_pos, rx2324_eos, rx2324_done
    set rx2324_off, 0
    lt rx2324_pos, 2, rx2324_start
    sub rx2324_off, rx2324_pos, 1
    substr rx2324_tgt, rx2324_tgt, rx2324_off
  rx2324_start:
    eq $I10, 1, rx2324_restart
    if_null rx2324_debug, debug_1693
    rx2324_cur."!cursor_debug"("START", "infix:sym<**>")
  debug_1693:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2325_done
    goto rxscan2325_scan
  rxscan2325_loop:
    (rx2324_pos) = rx2324_cur."from"()
    inc rx2324_pos
    rx2324_cur."!cursor_from"(rx2324_pos)
    ge rx2324_pos, rx2324_eos, rxscan2325_done
  rxscan2325_scan:
    set_addr $I10, rxscan2325_loop
    rx2324_cur."!mark_push"(0, rx2324_pos, $I10)
  rxscan2325_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2326_fail
    rx2324_cur."!mark_push"(0, rx2324_pos, $I10)
  # rx literal  "**"
    add $I11, rx2324_pos, 2
    gt $I11, rx2324_eos, rx2324_fail
    sub $I11, rx2324_pos, rx2324_off
    substr $S10, rx2324_tgt, $I11, 2
    ne $S10, "**", rx2324_fail
    add rx2324_pos, 2
    set_addr $I10, rxcap_2326_fail
    ($I12, $I11) = rx2324_cur."!mark_peek"($I10)
    rx2324_cur."!cursor_pos"($I11)
    ($P10) = rx2324_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2324_pos, "")
    rx2324_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2326_done
  rxcap_2326_fail:
    goto rx2324_fail
  rxcap_2326_done:
  # rx subrule "O" subtype=capture negate=
    rx2324_cur."!cursor_pos"(rx2324_pos)
    $P10 = rx2324_cur."O"("%exponentiation, :pirop<pow__NNN>")
    unless $P10, rx2324_fail
    rx2324_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2324_pos = $P10."pos"()
  # rx pass
    rx2324_cur."!cursor_pass"(rx2324_pos, "infix:sym<**>")
    if_null rx2324_debug, debug_1694
    rx2324_cur."!cursor_debug"("PASS", "infix:sym<**>", " at pos=", rx2324_pos)
  debug_1694:
    .return (rx2324_cur)
  rx2324_restart:
    if_null rx2324_debug, debug_1695
    rx2324_cur."!cursor_debug"("NEXT", "infix:sym<**>")
  debug_1695:
  rx2324_fail:
    (rx2324_rep, rx2324_pos, $I10, $P10) = rx2324_cur."!mark_fail"(0)
    lt rx2324_pos, -1, rx2324_done
    eq rx2324_pos, -1, rx2324_fail
    jump $I10
  rx2324_done:
    rx2324_cur."!cursor_fail"()
    if_null rx2324_debug, debug_1696
    rx2324_cur."!cursor_debug"("FAIL", "infix:sym<**>")
  debug_1696:
    .return (rx2324_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<**>"  :subid("320_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1301
    $P103 = self."!PREFIX__!subrule"("O", "**")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<+>"  :subid("321_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1303
    .local string rx2329_tgt
    .local int rx2329_pos
    .local int rx2329_off
    .local int rx2329_eos
    .local int rx2329_rep
    .local pmc rx2329_cur
    .local pmc rx2329_debug
    (rx2329_cur, rx2329_pos, rx2329_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2329_cur
    .local pmc match
    .lex "$/", match
    length rx2329_eos, rx2329_tgt
    gt rx2329_pos, rx2329_eos, rx2329_done
    set rx2329_off, 0
    lt rx2329_pos, 2, rx2329_start
    sub rx2329_off, rx2329_pos, 1
    substr rx2329_tgt, rx2329_tgt, rx2329_off
  rx2329_start:
    eq $I10, 1, rx2329_restart
    if_null rx2329_debug, debug_1697
    rx2329_cur."!cursor_debug"("START", "prefix:sym<+>")
  debug_1697:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2330_done
    goto rxscan2330_scan
  rxscan2330_loop:
    (rx2329_pos) = rx2329_cur."from"()
    inc rx2329_pos
    rx2329_cur."!cursor_from"(rx2329_pos)
    ge rx2329_pos, rx2329_eos, rxscan2330_done
  rxscan2330_scan:
    set_addr $I10, rxscan2330_loop
    rx2329_cur."!mark_push"(0, rx2329_pos, $I10)
  rxscan2330_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2331_fail
    rx2329_cur."!mark_push"(0, rx2329_pos, $I10)
  # rx literal  "+"
    add $I11, rx2329_pos, 1
    gt $I11, rx2329_eos, rx2329_fail
    sub $I11, rx2329_pos, rx2329_off
    ord $I11, rx2329_tgt, $I11
    ne $I11, 43, rx2329_fail
    add rx2329_pos, 1
    set_addr $I10, rxcap_2331_fail
    ($I12, $I11) = rx2329_cur."!mark_peek"($I10)
    rx2329_cur."!cursor_pos"($I11)
    ($P10) = rx2329_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2329_pos, "")
    rx2329_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2331_done
  rxcap_2331_fail:
    goto rx2329_fail
  rxcap_2331_done:
  # rx subrule "O" subtype=capture negate=
    rx2329_cur."!cursor_pos"(rx2329_pos)
    $P10 = rx2329_cur."O"("%symbolic_unary, :pirop<set N*>")
    unless $P10, rx2329_fail
    rx2329_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2329_pos = $P10."pos"()
  # rx pass
    rx2329_cur."!cursor_pass"(rx2329_pos, "prefix:sym<+>")
    if_null rx2329_debug, debug_1698
    rx2329_cur."!cursor_debug"("PASS", "prefix:sym<+>", " at pos=", rx2329_pos)
  debug_1698:
    .return (rx2329_cur)
  rx2329_restart:
    if_null rx2329_debug, debug_1699
    rx2329_cur."!cursor_debug"("NEXT", "prefix:sym<+>")
  debug_1699:
  rx2329_fail:
    (rx2329_rep, rx2329_pos, $I10, $P10) = rx2329_cur."!mark_fail"(0)
    lt rx2329_pos, -1, rx2329_done
    eq rx2329_pos, -1, rx2329_fail
    jump $I10
  rx2329_done:
    rx2329_cur."!cursor_fail"()
    if_null rx2329_debug, debug_1700
    rx2329_cur."!cursor_debug"("FAIL", "prefix:sym<+>")
  debug_1700:
    .return (rx2329_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<+>"  :subid("322_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1303
    $P103 = self."!PREFIX__!subrule"("O", "+")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<~>"  :subid("323_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1304
    .local string rx2334_tgt
    .local int rx2334_pos
    .local int rx2334_off
    .local int rx2334_eos
    .local int rx2334_rep
    .local pmc rx2334_cur
    .local pmc rx2334_debug
    (rx2334_cur, rx2334_pos, rx2334_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2334_cur
    .local pmc match
    .lex "$/", match
    length rx2334_eos, rx2334_tgt
    gt rx2334_pos, rx2334_eos, rx2334_done
    set rx2334_off, 0
    lt rx2334_pos, 2, rx2334_start
    sub rx2334_off, rx2334_pos, 1
    substr rx2334_tgt, rx2334_tgt, rx2334_off
  rx2334_start:
    eq $I10, 1, rx2334_restart
    if_null rx2334_debug, debug_1701
    rx2334_cur."!cursor_debug"("START", "prefix:sym<~>")
  debug_1701:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2335_done
    goto rxscan2335_scan
  rxscan2335_loop:
    (rx2334_pos) = rx2334_cur."from"()
    inc rx2334_pos
    rx2334_cur."!cursor_from"(rx2334_pos)
    ge rx2334_pos, rx2334_eos, rxscan2335_done
  rxscan2335_scan:
    set_addr $I10, rxscan2335_loop
    rx2334_cur."!mark_push"(0, rx2334_pos, $I10)
  rxscan2335_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2336_fail
    rx2334_cur."!mark_push"(0, rx2334_pos, $I10)
  # rx literal  "~"
    add $I11, rx2334_pos, 1
    gt $I11, rx2334_eos, rx2334_fail
    sub $I11, rx2334_pos, rx2334_off
    ord $I11, rx2334_tgt, $I11
    ne $I11, 126, rx2334_fail
    add rx2334_pos, 1
    set_addr $I10, rxcap_2336_fail
    ($I12, $I11) = rx2334_cur."!mark_peek"($I10)
    rx2334_cur."!cursor_pos"($I11)
    ($P10) = rx2334_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2334_pos, "")
    rx2334_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2336_done
  rxcap_2336_fail:
    goto rx2334_fail
  rxcap_2336_done:
  # rx subrule "O" subtype=capture negate=
    rx2334_cur."!cursor_pos"(rx2334_pos)
    $P10 = rx2334_cur."O"("%symbolic_unary, :pirop<set S*>")
    unless $P10, rx2334_fail
    rx2334_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2334_pos = $P10."pos"()
  # rx pass
    rx2334_cur."!cursor_pass"(rx2334_pos, "prefix:sym<~>")
    if_null rx2334_debug, debug_1702
    rx2334_cur."!cursor_debug"("PASS", "prefix:sym<~>", " at pos=", rx2334_pos)
  debug_1702:
    .return (rx2334_cur)
  rx2334_restart:
    if_null rx2334_debug, debug_1703
    rx2334_cur."!cursor_debug"("NEXT", "prefix:sym<~>")
  debug_1703:
  rx2334_fail:
    (rx2334_rep, rx2334_pos, $I10, $P10) = rx2334_cur."!mark_fail"(0)
    lt rx2334_pos, -1, rx2334_done
    eq rx2334_pos, -1, rx2334_fail
    jump $I10
  rx2334_done:
    rx2334_cur."!cursor_fail"()
    if_null rx2334_debug, debug_1704
    rx2334_cur."!cursor_debug"("FAIL", "prefix:sym<~>")
  debug_1704:
    .return (rx2334_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<~>"  :subid("324_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1304
    $P103 = self."!PREFIX__!subrule"("O", "~")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<->"  :subid("325_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1305
    .local string rx2339_tgt
    .local int rx2339_pos
    .local int rx2339_off
    .local int rx2339_eos
    .local int rx2339_rep
    .local pmc rx2339_cur
    .local pmc rx2339_debug
    (rx2339_cur, rx2339_pos, rx2339_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2339_cur
    .local pmc match
    .lex "$/", match
    length rx2339_eos, rx2339_tgt
    gt rx2339_pos, rx2339_eos, rx2339_done
    set rx2339_off, 0
    lt rx2339_pos, 2, rx2339_start
    sub rx2339_off, rx2339_pos, 1
    substr rx2339_tgt, rx2339_tgt, rx2339_off
  rx2339_start:
    eq $I10, 1, rx2339_restart
    if_null rx2339_debug, debug_1705
    rx2339_cur."!cursor_debug"("START", "prefix:sym<->")
  debug_1705:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2340_done
    goto rxscan2340_scan
  rxscan2340_loop:
    (rx2339_pos) = rx2339_cur."from"()
    inc rx2339_pos
    rx2339_cur."!cursor_from"(rx2339_pos)
    ge rx2339_pos, rx2339_eos, rxscan2340_done
  rxscan2340_scan:
    set_addr $I10, rxscan2340_loop
    rx2339_cur."!mark_push"(0, rx2339_pos, $I10)
  rxscan2340_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2341_fail
    rx2339_cur."!mark_push"(0, rx2339_pos, $I10)
  # rx literal  "-"
    add $I11, rx2339_pos, 1
    gt $I11, rx2339_eos, rx2339_fail
    sub $I11, rx2339_pos, rx2339_off
    ord $I11, rx2339_tgt, $I11
    ne $I11, 45, rx2339_fail
    add rx2339_pos, 1
    set_addr $I10, rxcap_2341_fail
    ($I12, $I11) = rx2339_cur."!mark_peek"($I10)
    rx2339_cur."!cursor_pos"($I11)
    ($P10) = rx2339_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2339_pos, "")
    rx2339_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2341_done
  rxcap_2341_fail:
    goto rx2339_fail
  rxcap_2341_done:
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2339_pos, rx2339_off
    substr $S10, rx2339_tgt, $I10, 1
    index $I11, ">", $S10
    ge $I11, 0, rx2339_fail
  # rx subrule "number" subtype=zerowidth negate=1
    rx2339_cur."!cursor_pos"(rx2339_pos)
    $P10 = rx2339_cur."number"()
    if $P10, rx2339_fail
  # rx subrule "O" subtype=capture negate=
    rx2339_cur."!cursor_pos"(rx2339_pos)
    $P10 = rx2339_cur."O"("%symbolic_unary, :pirop<neg>")
    unless $P10, rx2339_fail
    rx2339_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2339_pos = $P10."pos"()
  # rx pass
    rx2339_cur."!cursor_pass"(rx2339_pos, "prefix:sym<->")
    if_null rx2339_debug, debug_1706
    rx2339_cur."!cursor_debug"("PASS", "prefix:sym<->", " at pos=", rx2339_pos)
  debug_1706:
    .return (rx2339_cur)
  rx2339_restart:
    if_null rx2339_debug, debug_1707
    rx2339_cur."!cursor_debug"("NEXT", "prefix:sym<->")
  debug_1707:
  rx2339_fail:
    (rx2339_rep, rx2339_pos, $I10, $P10) = rx2339_cur."!mark_fail"(0)
    lt rx2339_pos, -1, rx2339_done
    eq rx2339_pos, -1, rx2339_fail
    jump $I10
  rx2339_done:
    rx2339_cur."!cursor_fail"()
    if_null rx2339_debug, debug_1708
    rx2339_cur."!cursor_debug"("FAIL", "prefix:sym<->")
  debug_1708:
    .return (rx2339_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<->"  :subid("326_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1305
    new $P103, "ResizablePMCArray"
    push $P103, "-"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<?>"  :subid("327_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1306
    .local string rx2344_tgt
    .local int rx2344_pos
    .local int rx2344_off
    .local int rx2344_eos
    .local int rx2344_rep
    .local pmc rx2344_cur
    .local pmc rx2344_debug
    (rx2344_cur, rx2344_pos, rx2344_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2344_cur
    .local pmc match
    .lex "$/", match
    length rx2344_eos, rx2344_tgt
    gt rx2344_pos, rx2344_eos, rx2344_done
    set rx2344_off, 0
    lt rx2344_pos, 2, rx2344_start
    sub rx2344_off, rx2344_pos, 1
    substr rx2344_tgt, rx2344_tgt, rx2344_off
  rx2344_start:
    eq $I10, 1, rx2344_restart
    if_null rx2344_debug, debug_1709
    rx2344_cur."!cursor_debug"("START", "prefix:sym<?>")
  debug_1709:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2345_done
    goto rxscan2345_scan
  rxscan2345_loop:
    (rx2344_pos) = rx2344_cur."from"()
    inc rx2344_pos
    rx2344_cur."!cursor_from"(rx2344_pos)
    ge rx2344_pos, rx2344_eos, rxscan2345_done
  rxscan2345_scan:
    set_addr $I10, rxscan2345_loop
    rx2344_cur."!mark_push"(0, rx2344_pos, $I10)
  rxscan2345_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2346_fail
    rx2344_cur."!mark_push"(0, rx2344_pos, $I10)
  # rx literal  "?"
    add $I11, rx2344_pos, 1
    gt $I11, rx2344_eos, rx2344_fail
    sub $I11, rx2344_pos, rx2344_off
    ord $I11, rx2344_tgt, $I11
    ne $I11, 63, rx2344_fail
    add rx2344_pos, 1
    set_addr $I10, rxcap_2346_fail
    ($I12, $I11) = rx2344_cur."!mark_peek"($I10)
    rx2344_cur."!cursor_pos"($I11)
    ($P10) = rx2344_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2344_pos, "")
    rx2344_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2346_done
  rxcap_2346_fail:
    goto rx2344_fail
  rxcap_2346_done:
  # rx subrule "O" subtype=capture negate=
    rx2344_cur."!cursor_pos"(rx2344_pos)
    $P10 = rx2344_cur."O"("%symbolic_unary, :pirop<istrue>")
    unless $P10, rx2344_fail
    rx2344_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2344_pos = $P10."pos"()
  # rx pass
    rx2344_cur."!cursor_pass"(rx2344_pos, "prefix:sym<?>")
    if_null rx2344_debug, debug_1710
    rx2344_cur."!cursor_debug"("PASS", "prefix:sym<?>", " at pos=", rx2344_pos)
  debug_1710:
    .return (rx2344_cur)
  rx2344_restart:
    if_null rx2344_debug, debug_1711
    rx2344_cur."!cursor_debug"("NEXT", "prefix:sym<?>")
  debug_1711:
  rx2344_fail:
    (rx2344_rep, rx2344_pos, $I10, $P10) = rx2344_cur."!mark_fail"(0)
    lt rx2344_pos, -1, rx2344_done
    eq rx2344_pos, -1, rx2344_fail
    jump $I10
  rx2344_done:
    rx2344_cur."!cursor_fail"()
    if_null rx2344_debug, debug_1712
    rx2344_cur."!cursor_debug"("FAIL", "prefix:sym<?>")
  debug_1712:
    .return (rx2344_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<?>"  :subid("328_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1306
    $P103 = self."!PREFIX__!subrule"("O", "?")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<!>"  :subid("329_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1307
    .local string rx2349_tgt
    .local int rx2349_pos
    .local int rx2349_off
    .local int rx2349_eos
    .local int rx2349_rep
    .local pmc rx2349_cur
    .local pmc rx2349_debug
    (rx2349_cur, rx2349_pos, rx2349_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2349_cur
    .local pmc match
    .lex "$/", match
    length rx2349_eos, rx2349_tgt
    gt rx2349_pos, rx2349_eos, rx2349_done
    set rx2349_off, 0
    lt rx2349_pos, 2, rx2349_start
    sub rx2349_off, rx2349_pos, 1
    substr rx2349_tgt, rx2349_tgt, rx2349_off
  rx2349_start:
    eq $I10, 1, rx2349_restart
    if_null rx2349_debug, debug_1713
    rx2349_cur."!cursor_debug"("START", "prefix:sym<!>")
  debug_1713:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2350_done
    goto rxscan2350_scan
  rxscan2350_loop:
    (rx2349_pos) = rx2349_cur."from"()
    inc rx2349_pos
    rx2349_cur."!cursor_from"(rx2349_pos)
    ge rx2349_pos, rx2349_eos, rxscan2350_done
  rxscan2350_scan:
    set_addr $I10, rxscan2350_loop
    rx2349_cur."!mark_push"(0, rx2349_pos, $I10)
  rxscan2350_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2351_fail
    rx2349_cur."!mark_push"(0, rx2349_pos, $I10)
  # rx literal  "!"
    add $I11, rx2349_pos, 1
    gt $I11, rx2349_eos, rx2349_fail
    sub $I11, rx2349_pos, rx2349_off
    ord $I11, rx2349_tgt, $I11
    ne $I11, 33, rx2349_fail
    add rx2349_pos, 1
    set_addr $I10, rxcap_2351_fail
    ($I12, $I11) = rx2349_cur."!mark_peek"($I10)
    rx2349_cur."!cursor_pos"($I11)
    ($P10) = rx2349_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2349_pos, "")
    rx2349_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2351_done
  rxcap_2351_fail:
    goto rx2349_fail
  rxcap_2351_done:
  # rx subrule "O" subtype=capture negate=
    rx2349_cur."!cursor_pos"(rx2349_pos)
    $P10 = rx2349_cur."O"("%symbolic_unary, :pirop<isfalse>")
    unless $P10, rx2349_fail
    rx2349_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2349_pos = $P10."pos"()
  # rx pass
    rx2349_cur."!cursor_pass"(rx2349_pos, "prefix:sym<!>")
    if_null rx2349_debug, debug_1714
    rx2349_cur."!cursor_debug"("PASS", "prefix:sym<!>", " at pos=", rx2349_pos)
  debug_1714:
    .return (rx2349_cur)
  rx2349_restart:
    if_null rx2349_debug, debug_1715
    rx2349_cur."!cursor_debug"("NEXT", "prefix:sym<!>")
  debug_1715:
  rx2349_fail:
    (rx2349_rep, rx2349_pos, $I10, $P10) = rx2349_cur."!mark_fail"(0)
    lt rx2349_pos, -1, rx2349_done
    eq rx2349_pos, -1, rx2349_fail
    jump $I10
  rx2349_done:
    rx2349_cur."!cursor_fail"()
    if_null rx2349_debug, debug_1716
    rx2349_cur."!cursor_debug"("FAIL", "prefix:sym<!>")
  debug_1716:
    .return (rx2349_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<!>"  :subid("330_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1307
    $P103 = self."!PREFIX__!subrule"("O", "!")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<|>"  :subid("331_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1308
    .local string rx2354_tgt
    .local int rx2354_pos
    .local int rx2354_off
    .local int rx2354_eos
    .local int rx2354_rep
    .local pmc rx2354_cur
    .local pmc rx2354_debug
    (rx2354_cur, rx2354_pos, rx2354_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2354_cur
    .local pmc match
    .lex "$/", match
    length rx2354_eos, rx2354_tgt
    gt rx2354_pos, rx2354_eos, rx2354_done
    set rx2354_off, 0
    lt rx2354_pos, 2, rx2354_start
    sub rx2354_off, rx2354_pos, 1
    substr rx2354_tgt, rx2354_tgt, rx2354_off
  rx2354_start:
    eq $I10, 1, rx2354_restart
    if_null rx2354_debug, debug_1717
    rx2354_cur."!cursor_debug"("START", "prefix:sym<|>")
  debug_1717:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2355_done
    goto rxscan2355_scan
  rxscan2355_loop:
    (rx2354_pos) = rx2354_cur."from"()
    inc rx2354_pos
    rx2354_cur."!cursor_from"(rx2354_pos)
    ge rx2354_pos, rx2354_eos, rxscan2355_done
  rxscan2355_scan:
    set_addr $I10, rxscan2355_loop
    rx2354_cur."!mark_push"(0, rx2354_pos, $I10)
  rxscan2355_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2356_fail
    rx2354_cur."!mark_push"(0, rx2354_pos, $I10)
  # rx literal  "|"
    add $I11, rx2354_pos, 1
    gt $I11, rx2354_eos, rx2354_fail
    sub $I11, rx2354_pos, rx2354_off
    ord $I11, rx2354_tgt, $I11
    ne $I11, 124, rx2354_fail
    add rx2354_pos, 1
    set_addr $I10, rxcap_2356_fail
    ($I12, $I11) = rx2354_cur."!mark_peek"($I10)
    rx2354_cur."!cursor_pos"($I11)
    ($P10) = rx2354_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2354_pos, "")
    rx2354_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2356_done
  rxcap_2356_fail:
    goto rx2354_fail
  rxcap_2356_done:
  # rx subrule "O" subtype=capture negate=
    rx2354_cur."!cursor_pos"(rx2354_pos)
    $P10 = rx2354_cur."O"("%symbolic_unary")
    unless $P10, rx2354_fail
    rx2354_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2354_pos = $P10."pos"()
  # rx pass
    rx2354_cur."!cursor_pass"(rx2354_pos, "prefix:sym<|>")
    if_null rx2354_debug, debug_1718
    rx2354_cur."!cursor_debug"("PASS", "prefix:sym<|>", " at pos=", rx2354_pos)
  debug_1718:
    .return (rx2354_cur)
  rx2354_restart:
    if_null rx2354_debug, debug_1719
    rx2354_cur."!cursor_debug"("NEXT", "prefix:sym<|>")
  debug_1719:
  rx2354_fail:
    (rx2354_rep, rx2354_pos, $I10, $P10) = rx2354_cur."!mark_fail"(0)
    lt rx2354_pos, -1, rx2354_done
    eq rx2354_pos, -1, rx2354_fail
    jump $I10
  rx2354_done:
    rx2354_cur."!cursor_fail"()
    if_null rx2354_debug, debug_1720
    rx2354_cur."!cursor_debug"("FAIL", "prefix:sym<|>")
  debug_1720:
    .return (rx2354_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<|>"  :subid("332_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1308
    $P103 = self."!PREFIX__!subrule"("O", "|")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<*>"  :subid("333_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1310
    .local string rx2359_tgt
    .local int rx2359_pos
    .local int rx2359_off
    .local int rx2359_eos
    .local int rx2359_rep
    .local pmc rx2359_cur
    .local pmc rx2359_debug
    (rx2359_cur, rx2359_pos, rx2359_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2359_cur
    .local pmc match
    .lex "$/", match
    length rx2359_eos, rx2359_tgt
    gt rx2359_pos, rx2359_eos, rx2359_done
    set rx2359_off, 0
    lt rx2359_pos, 2, rx2359_start
    sub rx2359_off, rx2359_pos, 1
    substr rx2359_tgt, rx2359_tgt, rx2359_off
  rx2359_start:
    eq $I10, 1, rx2359_restart
    if_null rx2359_debug, debug_1721
    rx2359_cur."!cursor_debug"("START", "infix:sym<*>")
  debug_1721:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2360_done
    goto rxscan2360_scan
  rxscan2360_loop:
    (rx2359_pos) = rx2359_cur."from"()
    inc rx2359_pos
    rx2359_cur."!cursor_from"(rx2359_pos)
    ge rx2359_pos, rx2359_eos, rxscan2360_done
  rxscan2360_scan:
    set_addr $I10, rxscan2360_loop
    rx2359_cur."!mark_push"(0, rx2359_pos, $I10)
  rxscan2360_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2361_fail
    rx2359_cur."!mark_push"(0, rx2359_pos, $I10)
  # rx literal  "*"
    add $I11, rx2359_pos, 1
    gt $I11, rx2359_eos, rx2359_fail
    sub $I11, rx2359_pos, rx2359_off
    ord $I11, rx2359_tgt, $I11
    ne $I11, 42, rx2359_fail
    add rx2359_pos, 1
    set_addr $I10, rxcap_2361_fail
    ($I12, $I11) = rx2359_cur."!mark_peek"($I10)
    rx2359_cur."!cursor_pos"($I11)
    ($P10) = rx2359_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2359_pos, "")
    rx2359_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2361_done
  rxcap_2361_fail:
    goto rx2359_fail
  rxcap_2361_done:
  # rx subrule "O" subtype=capture negate=
    rx2359_cur."!cursor_pos"(rx2359_pos)
    $P10 = rx2359_cur."O"("%multiplicative, :pirop<mul>")
    unless $P10, rx2359_fail
    rx2359_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2359_pos = $P10."pos"()
  # rx pass
    rx2359_cur."!cursor_pass"(rx2359_pos, "infix:sym<*>")
    if_null rx2359_debug, debug_1722
    rx2359_cur."!cursor_debug"("PASS", "infix:sym<*>", " at pos=", rx2359_pos)
  debug_1722:
    .return (rx2359_cur)
  rx2359_restart:
    if_null rx2359_debug, debug_1723
    rx2359_cur."!cursor_debug"("NEXT", "infix:sym<*>")
  debug_1723:
  rx2359_fail:
    (rx2359_rep, rx2359_pos, $I10, $P10) = rx2359_cur."!mark_fail"(0)
    lt rx2359_pos, -1, rx2359_done
    eq rx2359_pos, -1, rx2359_fail
    jump $I10
  rx2359_done:
    rx2359_cur."!cursor_fail"()
    if_null rx2359_debug, debug_1724
    rx2359_cur."!cursor_debug"("FAIL", "infix:sym<*>")
  debug_1724:
    .return (rx2359_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<*>"  :subid("334_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1310
    $P103 = self."!PREFIX__!subrule"("O", "*")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym</>"  :subid("335_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1311
    .local string rx2364_tgt
    .local int rx2364_pos
    .local int rx2364_off
    .local int rx2364_eos
    .local int rx2364_rep
    .local pmc rx2364_cur
    .local pmc rx2364_debug
    (rx2364_cur, rx2364_pos, rx2364_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2364_cur
    .local pmc match
    .lex "$/", match
    length rx2364_eos, rx2364_tgt
    gt rx2364_pos, rx2364_eos, rx2364_done
    set rx2364_off, 0
    lt rx2364_pos, 2, rx2364_start
    sub rx2364_off, rx2364_pos, 1
    substr rx2364_tgt, rx2364_tgt, rx2364_off
  rx2364_start:
    eq $I10, 1, rx2364_restart
    if_null rx2364_debug, debug_1725
    rx2364_cur."!cursor_debug"("START", "infix:sym</>")
  debug_1725:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2365_done
    goto rxscan2365_scan
  rxscan2365_loop:
    (rx2364_pos) = rx2364_cur."from"()
    inc rx2364_pos
    rx2364_cur."!cursor_from"(rx2364_pos)
    ge rx2364_pos, rx2364_eos, rxscan2365_done
  rxscan2365_scan:
    set_addr $I10, rxscan2365_loop
    rx2364_cur."!mark_push"(0, rx2364_pos, $I10)
  rxscan2365_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2366_fail
    rx2364_cur."!mark_push"(0, rx2364_pos, $I10)
  # rx literal  "/"
    add $I11, rx2364_pos, 1
    gt $I11, rx2364_eos, rx2364_fail
    sub $I11, rx2364_pos, rx2364_off
    ord $I11, rx2364_tgt, $I11
    ne $I11, 47, rx2364_fail
    add rx2364_pos, 1
    set_addr $I10, rxcap_2366_fail
    ($I12, $I11) = rx2364_cur."!mark_peek"($I10)
    rx2364_cur."!cursor_pos"($I11)
    ($P10) = rx2364_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2364_pos, "")
    rx2364_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2366_done
  rxcap_2366_fail:
    goto rx2364_fail
  rxcap_2366_done:
  # rx subrule "O" subtype=capture negate=
    rx2364_cur."!cursor_pos"(rx2364_pos)
    $P10 = rx2364_cur."O"("%multiplicative, :pirop<div>")
    unless $P10, rx2364_fail
    rx2364_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2364_pos = $P10."pos"()
  # rx pass
    rx2364_cur."!cursor_pass"(rx2364_pos, "infix:sym</>")
    if_null rx2364_debug, debug_1726
    rx2364_cur."!cursor_debug"("PASS", "infix:sym</>", " at pos=", rx2364_pos)
  debug_1726:
    .return (rx2364_cur)
  rx2364_restart:
    if_null rx2364_debug, debug_1727
    rx2364_cur."!cursor_debug"("NEXT", "infix:sym</>")
  debug_1727:
  rx2364_fail:
    (rx2364_rep, rx2364_pos, $I10, $P10) = rx2364_cur."!mark_fail"(0)
    lt rx2364_pos, -1, rx2364_done
    eq rx2364_pos, -1, rx2364_fail
    jump $I10
  rx2364_done:
    rx2364_cur."!cursor_fail"()
    if_null rx2364_debug, debug_1728
    rx2364_cur."!cursor_debug"("FAIL", "infix:sym</>")
  debug_1728:
    .return (rx2364_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym</>"  :subid("336_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1311
    $P103 = self."!PREFIX__!subrule"("O", "/")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<%>"  :subid("337_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1312
    .local string rx2369_tgt
    .local int rx2369_pos
    .local int rx2369_off
    .local int rx2369_eos
    .local int rx2369_rep
    .local pmc rx2369_cur
    .local pmc rx2369_debug
    (rx2369_cur, rx2369_pos, rx2369_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2369_cur
    .local pmc match
    .lex "$/", match
    length rx2369_eos, rx2369_tgt
    gt rx2369_pos, rx2369_eos, rx2369_done
    set rx2369_off, 0
    lt rx2369_pos, 2, rx2369_start
    sub rx2369_off, rx2369_pos, 1
    substr rx2369_tgt, rx2369_tgt, rx2369_off
  rx2369_start:
    eq $I10, 1, rx2369_restart
    if_null rx2369_debug, debug_1729
    rx2369_cur."!cursor_debug"("START", "infix:sym<%>")
  debug_1729:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2370_done
    goto rxscan2370_scan
  rxscan2370_loop:
    (rx2369_pos) = rx2369_cur."from"()
    inc rx2369_pos
    rx2369_cur."!cursor_from"(rx2369_pos)
    ge rx2369_pos, rx2369_eos, rxscan2370_done
  rxscan2370_scan:
    set_addr $I10, rxscan2370_loop
    rx2369_cur."!mark_push"(0, rx2369_pos, $I10)
  rxscan2370_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2371_fail
    rx2369_cur."!mark_push"(0, rx2369_pos, $I10)
  # rx literal  "%"
    add $I11, rx2369_pos, 1
    gt $I11, rx2369_eos, rx2369_fail
    sub $I11, rx2369_pos, rx2369_off
    ord $I11, rx2369_tgt, $I11
    ne $I11, 37, rx2369_fail
    add rx2369_pos, 1
    set_addr $I10, rxcap_2371_fail
    ($I12, $I11) = rx2369_cur."!mark_peek"($I10)
    rx2369_cur."!cursor_pos"($I11)
    ($P10) = rx2369_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2369_pos, "")
    rx2369_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2371_done
  rxcap_2371_fail:
    goto rx2369_fail
  rxcap_2371_done:
  # rx subrule "O" subtype=capture negate=
    rx2369_cur."!cursor_pos"(rx2369_pos)
    $P10 = rx2369_cur."O"("%multiplicative, :pirop<mod>")
    unless $P10, rx2369_fail
    rx2369_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2369_pos = $P10."pos"()
  # rx pass
    rx2369_cur."!cursor_pass"(rx2369_pos, "infix:sym<%>")
    if_null rx2369_debug, debug_1730
    rx2369_cur."!cursor_debug"("PASS", "infix:sym<%>", " at pos=", rx2369_pos)
  debug_1730:
    .return (rx2369_cur)
  rx2369_restart:
    if_null rx2369_debug, debug_1731
    rx2369_cur."!cursor_debug"("NEXT", "infix:sym<%>")
  debug_1731:
  rx2369_fail:
    (rx2369_rep, rx2369_pos, $I10, $P10) = rx2369_cur."!mark_fail"(0)
    lt rx2369_pos, -1, rx2369_done
    eq rx2369_pos, -1, rx2369_fail
    jump $I10
  rx2369_done:
    rx2369_cur."!cursor_fail"()
    if_null rx2369_debug, debug_1732
    rx2369_cur."!cursor_debug"("FAIL", "infix:sym<%>")
  debug_1732:
    .return (rx2369_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<%>"  :subid("338_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1312
    $P103 = self."!PREFIX__!subrule"("O", "%")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+&>"  :subid("339_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1313
    .local string rx2374_tgt
    .local int rx2374_pos
    .local int rx2374_off
    .local int rx2374_eos
    .local int rx2374_rep
    .local pmc rx2374_cur
    .local pmc rx2374_debug
    (rx2374_cur, rx2374_pos, rx2374_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2374_cur
    .local pmc match
    .lex "$/", match
    length rx2374_eos, rx2374_tgt
    gt rx2374_pos, rx2374_eos, rx2374_done
    set rx2374_off, 0
    lt rx2374_pos, 2, rx2374_start
    sub rx2374_off, rx2374_pos, 1
    substr rx2374_tgt, rx2374_tgt, rx2374_off
  rx2374_start:
    eq $I10, 1, rx2374_restart
    if_null rx2374_debug, debug_1733
    rx2374_cur."!cursor_debug"("START", "infix:sym<+&>")
  debug_1733:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2375_done
    goto rxscan2375_scan
  rxscan2375_loop:
    (rx2374_pos) = rx2374_cur."from"()
    inc rx2374_pos
    rx2374_cur."!cursor_from"(rx2374_pos)
    ge rx2374_pos, rx2374_eos, rxscan2375_done
  rxscan2375_scan:
    set_addr $I10, rxscan2375_loop
    rx2374_cur."!mark_push"(0, rx2374_pos, $I10)
  rxscan2375_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2376_fail
    rx2374_cur."!mark_push"(0, rx2374_pos, $I10)
  # rx literal  "+&"
    add $I11, rx2374_pos, 2
    gt $I11, rx2374_eos, rx2374_fail
    sub $I11, rx2374_pos, rx2374_off
    substr $S10, rx2374_tgt, $I11, 2
    ne $S10, "+&", rx2374_fail
    add rx2374_pos, 2
    set_addr $I10, rxcap_2376_fail
    ($I12, $I11) = rx2374_cur."!mark_peek"($I10)
    rx2374_cur."!cursor_pos"($I11)
    ($P10) = rx2374_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2374_pos, "")
    rx2374_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2376_done
  rxcap_2376_fail:
    goto rx2374_fail
  rxcap_2376_done:
  # rx subrule "O" subtype=capture negate=
    rx2374_cur."!cursor_pos"(rx2374_pos)
    $P10 = rx2374_cur."O"("%multiplicative, :pirop<band III>")
    unless $P10, rx2374_fail
    rx2374_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2374_pos = $P10."pos"()
  # rx pass
    rx2374_cur."!cursor_pass"(rx2374_pos, "infix:sym<+&>")
    if_null rx2374_debug, debug_1734
    rx2374_cur."!cursor_debug"("PASS", "infix:sym<+&>", " at pos=", rx2374_pos)
  debug_1734:
    .return (rx2374_cur)
  rx2374_restart:
    if_null rx2374_debug, debug_1735
    rx2374_cur."!cursor_debug"("NEXT", "infix:sym<+&>")
  debug_1735:
  rx2374_fail:
    (rx2374_rep, rx2374_pos, $I10, $P10) = rx2374_cur."!mark_fail"(0)
    lt rx2374_pos, -1, rx2374_done
    eq rx2374_pos, -1, rx2374_fail
    jump $I10
  rx2374_done:
    rx2374_cur."!cursor_fail"()
    if_null rx2374_debug, debug_1736
    rx2374_cur."!cursor_debug"("FAIL", "infix:sym<+&>")
  debug_1736:
    .return (rx2374_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+&>"  :subid("340_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1313
    $P103 = self."!PREFIX__!subrule"("O", "+&")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+>"  :subid("341_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1315
    .local string rx2379_tgt
    .local int rx2379_pos
    .local int rx2379_off
    .local int rx2379_eos
    .local int rx2379_rep
    .local pmc rx2379_cur
    .local pmc rx2379_debug
    (rx2379_cur, rx2379_pos, rx2379_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2379_cur
    .local pmc match
    .lex "$/", match
    length rx2379_eos, rx2379_tgt
    gt rx2379_pos, rx2379_eos, rx2379_done
    set rx2379_off, 0
    lt rx2379_pos, 2, rx2379_start
    sub rx2379_off, rx2379_pos, 1
    substr rx2379_tgt, rx2379_tgt, rx2379_off
  rx2379_start:
    eq $I10, 1, rx2379_restart
    if_null rx2379_debug, debug_1737
    rx2379_cur."!cursor_debug"("START", "infix:sym<+>")
  debug_1737:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2380_done
    goto rxscan2380_scan
  rxscan2380_loop:
    (rx2379_pos) = rx2379_cur."from"()
    inc rx2379_pos
    rx2379_cur."!cursor_from"(rx2379_pos)
    ge rx2379_pos, rx2379_eos, rxscan2380_done
  rxscan2380_scan:
    set_addr $I10, rxscan2380_loop
    rx2379_cur."!mark_push"(0, rx2379_pos, $I10)
  rxscan2380_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2381_fail
    rx2379_cur."!mark_push"(0, rx2379_pos, $I10)
  # rx literal  "+"
    add $I11, rx2379_pos, 1
    gt $I11, rx2379_eos, rx2379_fail
    sub $I11, rx2379_pos, rx2379_off
    ord $I11, rx2379_tgt, $I11
    ne $I11, 43, rx2379_fail
    add rx2379_pos, 1
    set_addr $I10, rxcap_2381_fail
    ($I12, $I11) = rx2379_cur."!mark_peek"($I10)
    rx2379_cur."!cursor_pos"($I11)
    ($P10) = rx2379_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2379_pos, "")
    rx2379_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2381_done
  rxcap_2381_fail:
    goto rx2379_fail
  rxcap_2381_done:
  # rx subrule "O" subtype=capture negate=
    rx2379_cur."!cursor_pos"(rx2379_pos)
    $P10 = rx2379_cur."O"("%additive, :pirop<add>")
    unless $P10, rx2379_fail
    rx2379_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2379_pos = $P10."pos"()
  # rx pass
    rx2379_cur."!cursor_pass"(rx2379_pos, "infix:sym<+>")
    if_null rx2379_debug, debug_1738
    rx2379_cur."!cursor_debug"("PASS", "infix:sym<+>", " at pos=", rx2379_pos)
  debug_1738:
    .return (rx2379_cur)
  rx2379_restart:
    if_null rx2379_debug, debug_1739
    rx2379_cur."!cursor_debug"("NEXT", "infix:sym<+>")
  debug_1739:
  rx2379_fail:
    (rx2379_rep, rx2379_pos, $I10, $P10) = rx2379_cur."!mark_fail"(0)
    lt rx2379_pos, -1, rx2379_done
    eq rx2379_pos, -1, rx2379_fail
    jump $I10
  rx2379_done:
    rx2379_cur."!cursor_fail"()
    if_null rx2379_debug, debug_1740
    rx2379_cur."!cursor_debug"("FAIL", "infix:sym<+>")
  debug_1740:
    .return (rx2379_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+>"  :subid("342_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1315
    $P103 = self."!PREFIX__!subrule"("O", "+")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<->"  :subid("343_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1316
    .local string rx2384_tgt
    .local int rx2384_pos
    .local int rx2384_off
    .local int rx2384_eos
    .local int rx2384_rep
    .local pmc rx2384_cur
    .local pmc rx2384_debug
    (rx2384_cur, rx2384_pos, rx2384_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2384_cur
    .local pmc match
    .lex "$/", match
    length rx2384_eos, rx2384_tgt
    gt rx2384_pos, rx2384_eos, rx2384_done
    set rx2384_off, 0
    lt rx2384_pos, 2, rx2384_start
    sub rx2384_off, rx2384_pos, 1
    substr rx2384_tgt, rx2384_tgt, rx2384_off
  rx2384_start:
    eq $I10, 1, rx2384_restart
    if_null rx2384_debug, debug_1741
    rx2384_cur."!cursor_debug"("START", "infix:sym<->")
  debug_1741:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2385_done
    goto rxscan2385_scan
  rxscan2385_loop:
    (rx2384_pos) = rx2384_cur."from"()
    inc rx2384_pos
    rx2384_cur."!cursor_from"(rx2384_pos)
    ge rx2384_pos, rx2384_eos, rxscan2385_done
  rxscan2385_scan:
    set_addr $I10, rxscan2385_loop
    rx2384_cur."!mark_push"(0, rx2384_pos, $I10)
  rxscan2385_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2386_fail
    rx2384_cur."!mark_push"(0, rx2384_pos, $I10)
  # rx literal  "-"
    add $I11, rx2384_pos, 1
    gt $I11, rx2384_eos, rx2384_fail
    sub $I11, rx2384_pos, rx2384_off
    ord $I11, rx2384_tgt, $I11
    ne $I11, 45, rx2384_fail
    add rx2384_pos, 1
    set_addr $I10, rxcap_2386_fail
    ($I12, $I11) = rx2384_cur."!mark_peek"($I10)
    rx2384_cur."!cursor_pos"($I11)
    ($P10) = rx2384_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2384_pos, "")
    rx2384_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2386_done
  rxcap_2386_fail:
    goto rx2384_fail
  rxcap_2386_done:
  # rx subrule "O" subtype=capture negate=
    rx2384_cur."!cursor_pos"(rx2384_pos)
    $P10 = rx2384_cur."O"("%additive, :pirop<sub>")
    unless $P10, rx2384_fail
    rx2384_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2384_pos = $P10."pos"()
  # rx pass
    rx2384_cur."!cursor_pass"(rx2384_pos, "infix:sym<->")
    if_null rx2384_debug, debug_1742
    rx2384_cur."!cursor_debug"("PASS", "infix:sym<->", " at pos=", rx2384_pos)
  debug_1742:
    .return (rx2384_cur)
  rx2384_restart:
    if_null rx2384_debug, debug_1743
    rx2384_cur."!cursor_debug"("NEXT", "infix:sym<->")
  debug_1743:
  rx2384_fail:
    (rx2384_rep, rx2384_pos, $I10, $P10) = rx2384_cur."!mark_fail"(0)
    lt rx2384_pos, -1, rx2384_done
    eq rx2384_pos, -1, rx2384_fail
    jump $I10
  rx2384_done:
    rx2384_cur."!cursor_fail"()
    if_null rx2384_debug, debug_1744
    rx2384_cur."!cursor_debug"("FAIL", "infix:sym<->")
  debug_1744:
    .return (rx2384_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<->"  :subid("344_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1316
    $P103 = self."!PREFIX__!subrule"("O", "-")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+|>"  :subid("345_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1317
    .local string rx2389_tgt
    .local int rx2389_pos
    .local int rx2389_off
    .local int rx2389_eos
    .local int rx2389_rep
    .local pmc rx2389_cur
    .local pmc rx2389_debug
    (rx2389_cur, rx2389_pos, rx2389_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2389_cur
    .local pmc match
    .lex "$/", match
    length rx2389_eos, rx2389_tgt
    gt rx2389_pos, rx2389_eos, rx2389_done
    set rx2389_off, 0
    lt rx2389_pos, 2, rx2389_start
    sub rx2389_off, rx2389_pos, 1
    substr rx2389_tgt, rx2389_tgt, rx2389_off
  rx2389_start:
    eq $I10, 1, rx2389_restart
    if_null rx2389_debug, debug_1745
    rx2389_cur."!cursor_debug"("START", "infix:sym<+|>")
  debug_1745:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2390_done
    goto rxscan2390_scan
  rxscan2390_loop:
    (rx2389_pos) = rx2389_cur."from"()
    inc rx2389_pos
    rx2389_cur."!cursor_from"(rx2389_pos)
    ge rx2389_pos, rx2389_eos, rxscan2390_done
  rxscan2390_scan:
    set_addr $I10, rxscan2390_loop
    rx2389_cur."!mark_push"(0, rx2389_pos, $I10)
  rxscan2390_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2391_fail
    rx2389_cur."!mark_push"(0, rx2389_pos, $I10)
  # rx literal  "+|"
    add $I11, rx2389_pos, 2
    gt $I11, rx2389_eos, rx2389_fail
    sub $I11, rx2389_pos, rx2389_off
    substr $S10, rx2389_tgt, $I11, 2
    ne $S10, "+|", rx2389_fail
    add rx2389_pos, 2
    set_addr $I10, rxcap_2391_fail
    ($I12, $I11) = rx2389_cur."!mark_peek"($I10)
    rx2389_cur."!cursor_pos"($I11)
    ($P10) = rx2389_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2389_pos, "")
    rx2389_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2391_done
  rxcap_2391_fail:
    goto rx2389_fail
  rxcap_2391_done:
  # rx subrule "O" subtype=capture negate=
    rx2389_cur."!cursor_pos"(rx2389_pos)
    $P10 = rx2389_cur."O"("%additive, :pirop<bor III>")
    unless $P10, rx2389_fail
    rx2389_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2389_pos = $P10."pos"()
  # rx pass
    rx2389_cur."!cursor_pass"(rx2389_pos, "infix:sym<+|>")
    if_null rx2389_debug, debug_1746
    rx2389_cur."!cursor_debug"("PASS", "infix:sym<+|>", " at pos=", rx2389_pos)
  debug_1746:
    .return (rx2389_cur)
  rx2389_restart:
    if_null rx2389_debug, debug_1747
    rx2389_cur."!cursor_debug"("NEXT", "infix:sym<+|>")
  debug_1747:
  rx2389_fail:
    (rx2389_rep, rx2389_pos, $I10, $P10) = rx2389_cur."!mark_fail"(0)
    lt rx2389_pos, -1, rx2389_done
    eq rx2389_pos, -1, rx2389_fail
    jump $I10
  rx2389_done:
    rx2389_cur."!cursor_fail"()
    if_null rx2389_debug, debug_1748
    rx2389_cur."!cursor_debug"("FAIL", "infix:sym<+|>")
  debug_1748:
    .return (rx2389_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+|>"  :subid("346_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1317
    $P103 = self."!PREFIX__!subrule"("O", "+|")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+^>"  :subid("347_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1318
    .local string rx2394_tgt
    .local int rx2394_pos
    .local int rx2394_off
    .local int rx2394_eos
    .local int rx2394_rep
    .local pmc rx2394_cur
    .local pmc rx2394_debug
    (rx2394_cur, rx2394_pos, rx2394_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2394_cur
    .local pmc match
    .lex "$/", match
    length rx2394_eos, rx2394_tgt
    gt rx2394_pos, rx2394_eos, rx2394_done
    set rx2394_off, 0
    lt rx2394_pos, 2, rx2394_start
    sub rx2394_off, rx2394_pos, 1
    substr rx2394_tgt, rx2394_tgt, rx2394_off
  rx2394_start:
    eq $I10, 1, rx2394_restart
    if_null rx2394_debug, debug_1749
    rx2394_cur."!cursor_debug"("START", "infix:sym<+^>")
  debug_1749:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2395_done
    goto rxscan2395_scan
  rxscan2395_loop:
    (rx2394_pos) = rx2394_cur."from"()
    inc rx2394_pos
    rx2394_cur."!cursor_from"(rx2394_pos)
    ge rx2394_pos, rx2394_eos, rxscan2395_done
  rxscan2395_scan:
    set_addr $I10, rxscan2395_loop
    rx2394_cur."!mark_push"(0, rx2394_pos, $I10)
  rxscan2395_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2396_fail
    rx2394_cur."!mark_push"(0, rx2394_pos, $I10)
  # rx literal  "+^"
    add $I11, rx2394_pos, 2
    gt $I11, rx2394_eos, rx2394_fail
    sub $I11, rx2394_pos, rx2394_off
    substr $S10, rx2394_tgt, $I11, 2
    ne $S10, "+^", rx2394_fail
    add rx2394_pos, 2
    set_addr $I10, rxcap_2396_fail
    ($I12, $I11) = rx2394_cur."!mark_peek"($I10)
    rx2394_cur."!cursor_pos"($I11)
    ($P10) = rx2394_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2394_pos, "")
    rx2394_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2396_done
  rxcap_2396_fail:
    goto rx2394_fail
  rxcap_2396_done:
  # rx subrule "O" subtype=capture negate=
    rx2394_cur."!cursor_pos"(rx2394_pos)
    $P10 = rx2394_cur."O"("%additive, :pirop<bxor III>")
    unless $P10, rx2394_fail
    rx2394_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2394_pos = $P10."pos"()
  # rx pass
    rx2394_cur."!cursor_pass"(rx2394_pos, "infix:sym<+^>")
    if_null rx2394_debug, debug_1750
    rx2394_cur."!cursor_debug"("PASS", "infix:sym<+^>", " at pos=", rx2394_pos)
  debug_1750:
    .return (rx2394_cur)
  rx2394_restart:
    if_null rx2394_debug, debug_1751
    rx2394_cur."!cursor_debug"("NEXT", "infix:sym<+^>")
  debug_1751:
  rx2394_fail:
    (rx2394_rep, rx2394_pos, $I10, $P10) = rx2394_cur."!mark_fail"(0)
    lt rx2394_pos, -1, rx2394_done
    eq rx2394_pos, -1, rx2394_fail
    jump $I10
  rx2394_done:
    rx2394_cur."!cursor_fail"()
    if_null rx2394_debug, debug_1752
    rx2394_cur."!cursor_debug"("FAIL", "infix:sym<+^>")
  debug_1752:
    .return (rx2394_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+^>"  :subid("348_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1318
    $P103 = self."!PREFIX__!subrule"("O", "+^")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~>"  :subid("349_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1320
    .local string rx2399_tgt
    .local int rx2399_pos
    .local int rx2399_off
    .local int rx2399_eos
    .local int rx2399_rep
    .local pmc rx2399_cur
    .local pmc rx2399_debug
    (rx2399_cur, rx2399_pos, rx2399_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2399_cur
    .local pmc match
    .lex "$/", match
    length rx2399_eos, rx2399_tgt
    gt rx2399_pos, rx2399_eos, rx2399_done
    set rx2399_off, 0
    lt rx2399_pos, 2, rx2399_start
    sub rx2399_off, rx2399_pos, 1
    substr rx2399_tgt, rx2399_tgt, rx2399_off
  rx2399_start:
    eq $I10, 1, rx2399_restart
    if_null rx2399_debug, debug_1753
    rx2399_cur."!cursor_debug"("START", "infix:sym<~>")
  debug_1753:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2400_done
    goto rxscan2400_scan
  rxscan2400_loop:
    (rx2399_pos) = rx2399_cur."from"()
    inc rx2399_pos
    rx2399_cur."!cursor_from"(rx2399_pos)
    ge rx2399_pos, rx2399_eos, rxscan2400_done
  rxscan2400_scan:
    set_addr $I10, rxscan2400_loop
    rx2399_cur."!mark_push"(0, rx2399_pos, $I10)
  rxscan2400_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2401_fail
    rx2399_cur."!mark_push"(0, rx2399_pos, $I10)
  # rx literal  "~"
    add $I11, rx2399_pos, 1
    gt $I11, rx2399_eos, rx2399_fail
    sub $I11, rx2399_pos, rx2399_off
    ord $I11, rx2399_tgt, $I11
    ne $I11, 126, rx2399_fail
    add rx2399_pos, 1
    set_addr $I10, rxcap_2401_fail
    ($I12, $I11) = rx2399_cur."!mark_peek"($I10)
    rx2399_cur."!cursor_pos"($I11)
    ($P10) = rx2399_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2399_pos, "")
    rx2399_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2401_done
  rxcap_2401_fail:
    goto rx2399_fail
  rxcap_2401_done:
  # rx subrule "O" subtype=capture negate=
    rx2399_cur."!cursor_pos"(rx2399_pos)
    $P10 = rx2399_cur."O"("%concatenation , :pirop<concat>")
    unless $P10, rx2399_fail
    rx2399_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2399_pos = $P10."pos"()
  # rx pass
    rx2399_cur."!cursor_pass"(rx2399_pos, "infix:sym<~>")
    if_null rx2399_debug, debug_1754
    rx2399_cur."!cursor_debug"("PASS", "infix:sym<~>", " at pos=", rx2399_pos)
  debug_1754:
    .return (rx2399_cur)
  rx2399_restart:
    if_null rx2399_debug, debug_1755
    rx2399_cur."!cursor_debug"("NEXT", "infix:sym<~>")
  debug_1755:
  rx2399_fail:
    (rx2399_rep, rx2399_pos, $I10, $P10) = rx2399_cur."!mark_fail"(0)
    lt rx2399_pos, -1, rx2399_done
    eq rx2399_pos, -1, rx2399_fail
    jump $I10
  rx2399_done:
    rx2399_cur."!cursor_fail"()
    if_null rx2399_debug, debug_1756
    rx2399_cur."!cursor_debug"("FAIL", "infix:sym<~>")
  debug_1756:
    .return (rx2399_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~>"  :subid("350_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1320
    $P103 = self."!PREFIX__!subrule"("O", "~")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<==>"  :subid("351_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1322
    .local string rx2404_tgt
    .local int rx2404_pos
    .local int rx2404_off
    .local int rx2404_eos
    .local int rx2404_rep
    .local pmc rx2404_cur
    .local pmc rx2404_debug
    (rx2404_cur, rx2404_pos, rx2404_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2404_cur
    .local pmc match
    .lex "$/", match
    length rx2404_eos, rx2404_tgt
    gt rx2404_pos, rx2404_eos, rx2404_done
    set rx2404_off, 0
    lt rx2404_pos, 2, rx2404_start
    sub rx2404_off, rx2404_pos, 1
    substr rx2404_tgt, rx2404_tgt, rx2404_off
  rx2404_start:
    eq $I10, 1, rx2404_restart
    if_null rx2404_debug, debug_1757
    rx2404_cur."!cursor_debug"("START", "infix:sym<==>")
  debug_1757:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2405_done
    goto rxscan2405_scan
  rxscan2405_loop:
    (rx2404_pos) = rx2404_cur."from"()
    inc rx2404_pos
    rx2404_cur."!cursor_from"(rx2404_pos)
    ge rx2404_pos, rx2404_eos, rxscan2405_done
  rxscan2405_scan:
    set_addr $I10, rxscan2405_loop
    rx2404_cur."!mark_push"(0, rx2404_pos, $I10)
  rxscan2405_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2406_fail
    rx2404_cur."!mark_push"(0, rx2404_pos, $I10)
  # rx literal  "=="
    add $I11, rx2404_pos, 2
    gt $I11, rx2404_eos, rx2404_fail
    sub $I11, rx2404_pos, rx2404_off
    substr $S10, rx2404_tgt, $I11, 2
    ne $S10, "==", rx2404_fail
    add rx2404_pos, 2
    set_addr $I10, rxcap_2406_fail
    ($I12, $I11) = rx2404_cur."!mark_peek"($I10)
    rx2404_cur."!cursor_pos"($I11)
    ($P10) = rx2404_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2404_pos, "")
    rx2404_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2406_done
  rxcap_2406_fail:
    goto rx2404_fail
  rxcap_2406_done:
  # rx subrule "O" subtype=capture negate=
    rx2404_cur."!cursor_pos"(rx2404_pos)
    $P10 = rx2404_cur."O"("%relational, :pirop<iseq INn>")
    unless $P10, rx2404_fail
    rx2404_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2404_pos = $P10."pos"()
  # rx pass
    rx2404_cur."!cursor_pass"(rx2404_pos, "infix:sym<==>")
    if_null rx2404_debug, debug_1758
    rx2404_cur."!cursor_debug"("PASS", "infix:sym<==>", " at pos=", rx2404_pos)
  debug_1758:
    .return (rx2404_cur)
  rx2404_restart:
    if_null rx2404_debug, debug_1759
    rx2404_cur."!cursor_debug"("NEXT", "infix:sym<==>")
  debug_1759:
  rx2404_fail:
    (rx2404_rep, rx2404_pos, $I10, $P10) = rx2404_cur."!mark_fail"(0)
    lt rx2404_pos, -1, rx2404_done
    eq rx2404_pos, -1, rx2404_fail
    jump $I10
  rx2404_done:
    rx2404_cur."!cursor_fail"()
    if_null rx2404_debug, debug_1760
    rx2404_cur."!cursor_debug"("FAIL", "infix:sym<==>")
  debug_1760:
    .return (rx2404_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<==>"  :subid("352_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1322
    $P103 = self."!PREFIX__!subrule"("O", "==")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<!=>"  :subid("353_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1323
    .local string rx2409_tgt
    .local int rx2409_pos
    .local int rx2409_off
    .local int rx2409_eos
    .local int rx2409_rep
    .local pmc rx2409_cur
    .local pmc rx2409_debug
    (rx2409_cur, rx2409_pos, rx2409_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2409_cur
    .local pmc match
    .lex "$/", match
    length rx2409_eos, rx2409_tgt
    gt rx2409_pos, rx2409_eos, rx2409_done
    set rx2409_off, 0
    lt rx2409_pos, 2, rx2409_start
    sub rx2409_off, rx2409_pos, 1
    substr rx2409_tgt, rx2409_tgt, rx2409_off
  rx2409_start:
    eq $I10, 1, rx2409_restart
    if_null rx2409_debug, debug_1761
    rx2409_cur."!cursor_debug"("START", "infix:sym<!=>")
  debug_1761:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2410_done
    goto rxscan2410_scan
  rxscan2410_loop:
    (rx2409_pos) = rx2409_cur."from"()
    inc rx2409_pos
    rx2409_cur."!cursor_from"(rx2409_pos)
    ge rx2409_pos, rx2409_eos, rxscan2410_done
  rxscan2410_scan:
    set_addr $I10, rxscan2410_loop
    rx2409_cur."!mark_push"(0, rx2409_pos, $I10)
  rxscan2410_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2411_fail
    rx2409_cur."!mark_push"(0, rx2409_pos, $I10)
  # rx literal  "!="
    add $I11, rx2409_pos, 2
    gt $I11, rx2409_eos, rx2409_fail
    sub $I11, rx2409_pos, rx2409_off
    substr $S10, rx2409_tgt, $I11, 2
    ne $S10, "!=", rx2409_fail
    add rx2409_pos, 2
    set_addr $I10, rxcap_2411_fail
    ($I12, $I11) = rx2409_cur."!mark_peek"($I10)
    rx2409_cur."!cursor_pos"($I11)
    ($P10) = rx2409_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2409_pos, "")
    rx2409_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2411_done
  rxcap_2411_fail:
    goto rx2409_fail
  rxcap_2411_done:
  # rx subrule "O" subtype=capture negate=
    rx2409_cur."!cursor_pos"(rx2409_pos)
    $P10 = rx2409_cur."O"("%relational, :pirop<isne INn>")
    unless $P10, rx2409_fail
    rx2409_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2409_pos = $P10."pos"()
  # rx pass
    rx2409_cur."!cursor_pass"(rx2409_pos, "infix:sym<!=>")
    if_null rx2409_debug, debug_1762
    rx2409_cur."!cursor_debug"("PASS", "infix:sym<!=>", " at pos=", rx2409_pos)
  debug_1762:
    .return (rx2409_cur)
  rx2409_restart:
    if_null rx2409_debug, debug_1763
    rx2409_cur."!cursor_debug"("NEXT", "infix:sym<!=>")
  debug_1763:
  rx2409_fail:
    (rx2409_rep, rx2409_pos, $I10, $P10) = rx2409_cur."!mark_fail"(0)
    lt rx2409_pos, -1, rx2409_done
    eq rx2409_pos, -1, rx2409_fail
    jump $I10
  rx2409_done:
    rx2409_cur."!cursor_fail"()
    if_null rx2409_debug, debug_1764
    rx2409_cur."!cursor_debug"("FAIL", "infix:sym<!=>")
  debug_1764:
    .return (rx2409_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<!=>"  :subid("354_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1323
    $P103 = self."!PREFIX__!subrule"("O", "!=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<=>"  :subid("355_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1324
    .local string rx2414_tgt
    .local int rx2414_pos
    .local int rx2414_off
    .local int rx2414_eos
    .local int rx2414_rep
    .local pmc rx2414_cur
    .local pmc rx2414_debug
    (rx2414_cur, rx2414_pos, rx2414_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2414_cur
    .local pmc match
    .lex "$/", match
    length rx2414_eos, rx2414_tgt
    gt rx2414_pos, rx2414_eos, rx2414_done
    set rx2414_off, 0
    lt rx2414_pos, 2, rx2414_start
    sub rx2414_off, rx2414_pos, 1
    substr rx2414_tgt, rx2414_tgt, rx2414_off
  rx2414_start:
    eq $I10, 1, rx2414_restart
    if_null rx2414_debug, debug_1765
    rx2414_cur."!cursor_debug"("START", "infix:sym<<=>")
  debug_1765:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2415_done
    goto rxscan2415_scan
  rxscan2415_loop:
    (rx2414_pos) = rx2414_cur."from"()
    inc rx2414_pos
    rx2414_cur."!cursor_from"(rx2414_pos)
    ge rx2414_pos, rx2414_eos, rxscan2415_done
  rxscan2415_scan:
    set_addr $I10, rxscan2415_loop
    rx2414_cur."!mark_push"(0, rx2414_pos, $I10)
  rxscan2415_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2416_fail
    rx2414_cur."!mark_push"(0, rx2414_pos, $I10)
  # rx literal  "<="
    add $I11, rx2414_pos, 2
    gt $I11, rx2414_eos, rx2414_fail
    sub $I11, rx2414_pos, rx2414_off
    substr $S10, rx2414_tgt, $I11, 2
    ne $S10, "<=", rx2414_fail
    add rx2414_pos, 2
    set_addr $I10, rxcap_2416_fail
    ($I12, $I11) = rx2414_cur."!mark_peek"($I10)
    rx2414_cur."!cursor_pos"($I11)
    ($P10) = rx2414_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2414_pos, "")
    rx2414_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2416_done
  rxcap_2416_fail:
    goto rx2414_fail
  rxcap_2416_done:
  # rx subrule "O" subtype=capture negate=
    rx2414_cur."!cursor_pos"(rx2414_pos)
    $P10 = rx2414_cur."O"("%relational, :pirop<isle INn>")
    unless $P10, rx2414_fail
    rx2414_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2414_pos = $P10."pos"()
  # rx pass
    rx2414_cur."!cursor_pass"(rx2414_pos, "infix:sym<<=>")
    if_null rx2414_debug, debug_1766
    rx2414_cur."!cursor_debug"("PASS", "infix:sym<<=>", " at pos=", rx2414_pos)
  debug_1766:
    .return (rx2414_cur)
  rx2414_restart:
    if_null rx2414_debug, debug_1767
    rx2414_cur."!cursor_debug"("NEXT", "infix:sym<<=>")
  debug_1767:
  rx2414_fail:
    (rx2414_rep, rx2414_pos, $I10, $P10) = rx2414_cur."!mark_fail"(0)
    lt rx2414_pos, -1, rx2414_done
    eq rx2414_pos, -1, rx2414_fail
    jump $I10
  rx2414_done:
    rx2414_cur."!cursor_fail"()
    if_null rx2414_debug, debug_1768
    rx2414_cur."!cursor_debug"("FAIL", "infix:sym<<=>")
  debug_1768:
    .return (rx2414_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<=>"  :subid("356_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1324
    $P103 = self."!PREFIX__!subrule"("O", "<=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>=>"  :subid("357_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1325
    .local string rx2419_tgt
    .local int rx2419_pos
    .local int rx2419_off
    .local int rx2419_eos
    .local int rx2419_rep
    .local pmc rx2419_cur
    .local pmc rx2419_debug
    (rx2419_cur, rx2419_pos, rx2419_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2419_cur
    .local pmc match
    .lex "$/", match
    length rx2419_eos, rx2419_tgt
    gt rx2419_pos, rx2419_eos, rx2419_done
    set rx2419_off, 0
    lt rx2419_pos, 2, rx2419_start
    sub rx2419_off, rx2419_pos, 1
    substr rx2419_tgt, rx2419_tgt, rx2419_off
  rx2419_start:
    eq $I10, 1, rx2419_restart
    if_null rx2419_debug, debug_1769
    rx2419_cur."!cursor_debug"("START", "infix:sym<>=>")
  debug_1769:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2420_done
    goto rxscan2420_scan
  rxscan2420_loop:
    (rx2419_pos) = rx2419_cur."from"()
    inc rx2419_pos
    rx2419_cur."!cursor_from"(rx2419_pos)
    ge rx2419_pos, rx2419_eos, rxscan2420_done
  rxscan2420_scan:
    set_addr $I10, rxscan2420_loop
    rx2419_cur."!mark_push"(0, rx2419_pos, $I10)
  rxscan2420_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2421_fail
    rx2419_cur."!mark_push"(0, rx2419_pos, $I10)
  # rx literal  ">="
    add $I11, rx2419_pos, 2
    gt $I11, rx2419_eos, rx2419_fail
    sub $I11, rx2419_pos, rx2419_off
    substr $S10, rx2419_tgt, $I11, 2
    ne $S10, ">=", rx2419_fail
    add rx2419_pos, 2
    set_addr $I10, rxcap_2421_fail
    ($I12, $I11) = rx2419_cur."!mark_peek"($I10)
    rx2419_cur."!cursor_pos"($I11)
    ($P10) = rx2419_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2419_pos, "")
    rx2419_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2421_done
  rxcap_2421_fail:
    goto rx2419_fail
  rxcap_2421_done:
  # rx subrule "O" subtype=capture negate=
    rx2419_cur."!cursor_pos"(rx2419_pos)
    $P10 = rx2419_cur."O"("%relational, :pirop<isge INn>")
    unless $P10, rx2419_fail
    rx2419_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2419_pos = $P10."pos"()
  # rx pass
    rx2419_cur."!cursor_pass"(rx2419_pos, "infix:sym<>=>")
    if_null rx2419_debug, debug_1770
    rx2419_cur."!cursor_debug"("PASS", "infix:sym<>=>", " at pos=", rx2419_pos)
  debug_1770:
    .return (rx2419_cur)
  rx2419_restart:
    if_null rx2419_debug, debug_1771
    rx2419_cur."!cursor_debug"("NEXT", "infix:sym<>=>")
  debug_1771:
  rx2419_fail:
    (rx2419_rep, rx2419_pos, $I10, $P10) = rx2419_cur."!mark_fail"(0)
    lt rx2419_pos, -1, rx2419_done
    eq rx2419_pos, -1, rx2419_fail
    jump $I10
  rx2419_done:
    rx2419_cur."!cursor_fail"()
    if_null rx2419_debug, debug_1772
    rx2419_cur."!cursor_debug"("FAIL", "infix:sym<>=>")
  debug_1772:
    .return (rx2419_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>=>"  :subid("358_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1325
    $P103 = self."!PREFIX__!subrule"("O", ">=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<>"  :subid("359_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1326
    .local string rx2424_tgt
    .local int rx2424_pos
    .local int rx2424_off
    .local int rx2424_eos
    .local int rx2424_rep
    .local pmc rx2424_cur
    .local pmc rx2424_debug
    (rx2424_cur, rx2424_pos, rx2424_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2424_cur
    .local pmc match
    .lex "$/", match
    length rx2424_eos, rx2424_tgt
    gt rx2424_pos, rx2424_eos, rx2424_done
    set rx2424_off, 0
    lt rx2424_pos, 2, rx2424_start
    sub rx2424_off, rx2424_pos, 1
    substr rx2424_tgt, rx2424_tgt, rx2424_off
  rx2424_start:
    eq $I10, 1, rx2424_restart
    if_null rx2424_debug, debug_1773
    rx2424_cur."!cursor_debug"("START", "infix:sym<<>")
  debug_1773:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2425_done
    goto rxscan2425_scan
  rxscan2425_loop:
    (rx2424_pos) = rx2424_cur."from"()
    inc rx2424_pos
    rx2424_cur."!cursor_from"(rx2424_pos)
    ge rx2424_pos, rx2424_eos, rxscan2425_done
  rxscan2425_scan:
    set_addr $I10, rxscan2425_loop
    rx2424_cur."!mark_push"(0, rx2424_pos, $I10)
  rxscan2425_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2426_fail
    rx2424_cur."!mark_push"(0, rx2424_pos, $I10)
  # rx literal  "<"
    add $I11, rx2424_pos, 1
    gt $I11, rx2424_eos, rx2424_fail
    sub $I11, rx2424_pos, rx2424_off
    ord $I11, rx2424_tgt, $I11
    ne $I11, 60, rx2424_fail
    add rx2424_pos, 1
    set_addr $I10, rxcap_2426_fail
    ($I12, $I11) = rx2424_cur."!mark_peek"($I10)
    rx2424_cur."!cursor_pos"($I11)
    ($P10) = rx2424_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2424_pos, "")
    rx2424_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2426_done
  rxcap_2426_fail:
    goto rx2424_fail
  rxcap_2426_done:
  # rx subrule "O" subtype=capture negate=
    rx2424_cur."!cursor_pos"(rx2424_pos)
    $P10 = rx2424_cur."O"("%relational, :pirop<islt INn>")
    unless $P10, rx2424_fail
    rx2424_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2424_pos = $P10."pos"()
  # rx pass
    rx2424_cur."!cursor_pass"(rx2424_pos, "infix:sym<<>")
    if_null rx2424_debug, debug_1774
    rx2424_cur."!cursor_debug"("PASS", "infix:sym<<>", " at pos=", rx2424_pos)
  debug_1774:
    .return (rx2424_cur)
  rx2424_restart:
    if_null rx2424_debug, debug_1775
    rx2424_cur."!cursor_debug"("NEXT", "infix:sym<<>")
  debug_1775:
  rx2424_fail:
    (rx2424_rep, rx2424_pos, $I10, $P10) = rx2424_cur."!mark_fail"(0)
    lt rx2424_pos, -1, rx2424_done
    eq rx2424_pos, -1, rx2424_fail
    jump $I10
  rx2424_done:
    rx2424_cur."!cursor_fail"()
    if_null rx2424_debug, debug_1776
    rx2424_cur."!cursor_debug"("FAIL", "infix:sym<<>")
  debug_1776:
    .return (rx2424_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<>"  :subid("360_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1326
    $P103 = self."!PREFIX__!subrule"("O", "<")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>>"  :subid("361_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1327
    .local string rx2429_tgt
    .local int rx2429_pos
    .local int rx2429_off
    .local int rx2429_eos
    .local int rx2429_rep
    .local pmc rx2429_cur
    .local pmc rx2429_debug
    (rx2429_cur, rx2429_pos, rx2429_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2429_cur
    .local pmc match
    .lex "$/", match
    length rx2429_eos, rx2429_tgt
    gt rx2429_pos, rx2429_eos, rx2429_done
    set rx2429_off, 0
    lt rx2429_pos, 2, rx2429_start
    sub rx2429_off, rx2429_pos, 1
    substr rx2429_tgt, rx2429_tgt, rx2429_off
  rx2429_start:
    eq $I10, 1, rx2429_restart
    if_null rx2429_debug, debug_1777
    rx2429_cur."!cursor_debug"("START", "infix:sym<>>")
  debug_1777:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2430_done
    goto rxscan2430_scan
  rxscan2430_loop:
    (rx2429_pos) = rx2429_cur."from"()
    inc rx2429_pos
    rx2429_cur."!cursor_from"(rx2429_pos)
    ge rx2429_pos, rx2429_eos, rxscan2430_done
  rxscan2430_scan:
    set_addr $I10, rxscan2430_loop
    rx2429_cur."!mark_push"(0, rx2429_pos, $I10)
  rxscan2430_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2431_fail
    rx2429_cur."!mark_push"(0, rx2429_pos, $I10)
  # rx literal  ">"
    add $I11, rx2429_pos, 1
    gt $I11, rx2429_eos, rx2429_fail
    sub $I11, rx2429_pos, rx2429_off
    ord $I11, rx2429_tgt, $I11
    ne $I11, 62, rx2429_fail
    add rx2429_pos, 1
    set_addr $I10, rxcap_2431_fail
    ($I12, $I11) = rx2429_cur."!mark_peek"($I10)
    rx2429_cur."!cursor_pos"($I11)
    ($P10) = rx2429_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2429_pos, "")
    rx2429_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2431_done
  rxcap_2431_fail:
    goto rx2429_fail
  rxcap_2431_done:
  # rx subrule "O" subtype=capture negate=
    rx2429_cur."!cursor_pos"(rx2429_pos)
    $P10 = rx2429_cur."O"("%relational, :pirop<isgt INn>")
    unless $P10, rx2429_fail
    rx2429_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2429_pos = $P10."pos"()
  # rx pass
    rx2429_cur."!cursor_pass"(rx2429_pos, "infix:sym<>>")
    if_null rx2429_debug, debug_1778
    rx2429_cur."!cursor_debug"("PASS", "infix:sym<>>", " at pos=", rx2429_pos)
  debug_1778:
    .return (rx2429_cur)
  rx2429_restart:
    if_null rx2429_debug, debug_1779
    rx2429_cur."!cursor_debug"("NEXT", "infix:sym<>>")
  debug_1779:
  rx2429_fail:
    (rx2429_rep, rx2429_pos, $I10, $P10) = rx2429_cur."!mark_fail"(0)
    lt rx2429_pos, -1, rx2429_done
    eq rx2429_pos, -1, rx2429_fail
    jump $I10
  rx2429_done:
    rx2429_cur."!cursor_fail"()
    if_null rx2429_debug, debug_1780
    rx2429_cur."!cursor_debug"("FAIL", "infix:sym<>>")
  debug_1780:
    .return (rx2429_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>>"  :subid("362_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1327
    $P103 = self."!PREFIX__!subrule"("O", ">")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<eq>"  :subid("363_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1328
    .local string rx2434_tgt
    .local int rx2434_pos
    .local int rx2434_off
    .local int rx2434_eos
    .local int rx2434_rep
    .local pmc rx2434_cur
    .local pmc rx2434_debug
    (rx2434_cur, rx2434_pos, rx2434_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2434_cur
    .local pmc match
    .lex "$/", match
    length rx2434_eos, rx2434_tgt
    gt rx2434_pos, rx2434_eos, rx2434_done
    set rx2434_off, 0
    lt rx2434_pos, 2, rx2434_start
    sub rx2434_off, rx2434_pos, 1
    substr rx2434_tgt, rx2434_tgt, rx2434_off
  rx2434_start:
    eq $I10, 1, rx2434_restart
    if_null rx2434_debug, debug_1781
    rx2434_cur."!cursor_debug"("START", "infix:sym<eq>")
  debug_1781:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2435_done
    goto rxscan2435_scan
  rxscan2435_loop:
    (rx2434_pos) = rx2434_cur."from"()
    inc rx2434_pos
    rx2434_cur."!cursor_from"(rx2434_pos)
    ge rx2434_pos, rx2434_eos, rxscan2435_done
  rxscan2435_scan:
    set_addr $I10, rxscan2435_loop
    rx2434_cur."!mark_push"(0, rx2434_pos, $I10)
  rxscan2435_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2436_fail
    rx2434_cur."!mark_push"(0, rx2434_pos, $I10)
  # rx literal  "eq"
    add $I11, rx2434_pos, 2
    gt $I11, rx2434_eos, rx2434_fail
    sub $I11, rx2434_pos, rx2434_off
    substr $S10, rx2434_tgt, $I11, 2
    ne $S10, "eq", rx2434_fail
    add rx2434_pos, 2
    set_addr $I10, rxcap_2436_fail
    ($I12, $I11) = rx2434_cur."!mark_peek"($I10)
    rx2434_cur."!cursor_pos"($I11)
    ($P10) = rx2434_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2434_pos, "")
    rx2434_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2436_done
  rxcap_2436_fail:
    goto rx2434_fail
  rxcap_2436_done:
  # rx subrule "O" subtype=capture negate=
    rx2434_cur."!cursor_pos"(rx2434_pos)
    $P10 = rx2434_cur."O"("%relational, :pirop<iseq ISs>")
    unless $P10, rx2434_fail
    rx2434_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2434_pos = $P10."pos"()
  # rx pass
    rx2434_cur."!cursor_pass"(rx2434_pos, "infix:sym<eq>")
    if_null rx2434_debug, debug_1782
    rx2434_cur."!cursor_debug"("PASS", "infix:sym<eq>", " at pos=", rx2434_pos)
  debug_1782:
    .return (rx2434_cur)
  rx2434_restart:
    if_null rx2434_debug, debug_1783
    rx2434_cur."!cursor_debug"("NEXT", "infix:sym<eq>")
  debug_1783:
  rx2434_fail:
    (rx2434_rep, rx2434_pos, $I10, $P10) = rx2434_cur."!mark_fail"(0)
    lt rx2434_pos, -1, rx2434_done
    eq rx2434_pos, -1, rx2434_fail
    jump $I10
  rx2434_done:
    rx2434_cur."!cursor_fail"()
    if_null rx2434_debug, debug_1784
    rx2434_cur."!cursor_debug"("FAIL", "infix:sym<eq>")
  debug_1784:
    .return (rx2434_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<eq>"  :subid("364_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1328
    $P103 = self."!PREFIX__!subrule"("O", "eq")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ne>"  :subid("365_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1329
    .local string rx2439_tgt
    .local int rx2439_pos
    .local int rx2439_off
    .local int rx2439_eos
    .local int rx2439_rep
    .local pmc rx2439_cur
    .local pmc rx2439_debug
    (rx2439_cur, rx2439_pos, rx2439_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2439_cur
    .local pmc match
    .lex "$/", match
    length rx2439_eos, rx2439_tgt
    gt rx2439_pos, rx2439_eos, rx2439_done
    set rx2439_off, 0
    lt rx2439_pos, 2, rx2439_start
    sub rx2439_off, rx2439_pos, 1
    substr rx2439_tgt, rx2439_tgt, rx2439_off
  rx2439_start:
    eq $I10, 1, rx2439_restart
    if_null rx2439_debug, debug_1785
    rx2439_cur."!cursor_debug"("START", "infix:sym<ne>")
  debug_1785:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2440_done
    goto rxscan2440_scan
  rxscan2440_loop:
    (rx2439_pos) = rx2439_cur."from"()
    inc rx2439_pos
    rx2439_cur."!cursor_from"(rx2439_pos)
    ge rx2439_pos, rx2439_eos, rxscan2440_done
  rxscan2440_scan:
    set_addr $I10, rxscan2440_loop
    rx2439_cur."!mark_push"(0, rx2439_pos, $I10)
  rxscan2440_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2441_fail
    rx2439_cur."!mark_push"(0, rx2439_pos, $I10)
  # rx literal  "ne"
    add $I11, rx2439_pos, 2
    gt $I11, rx2439_eos, rx2439_fail
    sub $I11, rx2439_pos, rx2439_off
    substr $S10, rx2439_tgt, $I11, 2
    ne $S10, "ne", rx2439_fail
    add rx2439_pos, 2
    set_addr $I10, rxcap_2441_fail
    ($I12, $I11) = rx2439_cur."!mark_peek"($I10)
    rx2439_cur."!cursor_pos"($I11)
    ($P10) = rx2439_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2439_pos, "")
    rx2439_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2441_done
  rxcap_2441_fail:
    goto rx2439_fail
  rxcap_2441_done:
  # rx subrule "O" subtype=capture negate=
    rx2439_cur."!cursor_pos"(rx2439_pos)
    $P10 = rx2439_cur."O"("%relational, :pirop<isne ISs>")
    unless $P10, rx2439_fail
    rx2439_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2439_pos = $P10."pos"()
  # rx pass
    rx2439_cur."!cursor_pass"(rx2439_pos, "infix:sym<ne>")
    if_null rx2439_debug, debug_1786
    rx2439_cur."!cursor_debug"("PASS", "infix:sym<ne>", " at pos=", rx2439_pos)
  debug_1786:
    .return (rx2439_cur)
  rx2439_restart:
    if_null rx2439_debug, debug_1787
    rx2439_cur."!cursor_debug"("NEXT", "infix:sym<ne>")
  debug_1787:
  rx2439_fail:
    (rx2439_rep, rx2439_pos, $I10, $P10) = rx2439_cur."!mark_fail"(0)
    lt rx2439_pos, -1, rx2439_done
    eq rx2439_pos, -1, rx2439_fail
    jump $I10
  rx2439_done:
    rx2439_cur."!cursor_fail"()
    if_null rx2439_debug, debug_1788
    rx2439_cur."!cursor_debug"("FAIL", "infix:sym<ne>")
  debug_1788:
    .return (rx2439_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ne>"  :subid("366_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1329
    $P103 = self."!PREFIX__!subrule"("O", "ne")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<le>"  :subid("367_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1330
    .local string rx2444_tgt
    .local int rx2444_pos
    .local int rx2444_off
    .local int rx2444_eos
    .local int rx2444_rep
    .local pmc rx2444_cur
    .local pmc rx2444_debug
    (rx2444_cur, rx2444_pos, rx2444_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2444_cur
    .local pmc match
    .lex "$/", match
    length rx2444_eos, rx2444_tgt
    gt rx2444_pos, rx2444_eos, rx2444_done
    set rx2444_off, 0
    lt rx2444_pos, 2, rx2444_start
    sub rx2444_off, rx2444_pos, 1
    substr rx2444_tgt, rx2444_tgt, rx2444_off
  rx2444_start:
    eq $I10, 1, rx2444_restart
    if_null rx2444_debug, debug_1789
    rx2444_cur."!cursor_debug"("START", "infix:sym<le>")
  debug_1789:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2445_done
    goto rxscan2445_scan
  rxscan2445_loop:
    (rx2444_pos) = rx2444_cur."from"()
    inc rx2444_pos
    rx2444_cur."!cursor_from"(rx2444_pos)
    ge rx2444_pos, rx2444_eos, rxscan2445_done
  rxscan2445_scan:
    set_addr $I10, rxscan2445_loop
    rx2444_cur."!mark_push"(0, rx2444_pos, $I10)
  rxscan2445_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2446_fail
    rx2444_cur."!mark_push"(0, rx2444_pos, $I10)
  # rx literal  "le"
    add $I11, rx2444_pos, 2
    gt $I11, rx2444_eos, rx2444_fail
    sub $I11, rx2444_pos, rx2444_off
    substr $S10, rx2444_tgt, $I11, 2
    ne $S10, "le", rx2444_fail
    add rx2444_pos, 2
    set_addr $I10, rxcap_2446_fail
    ($I12, $I11) = rx2444_cur."!mark_peek"($I10)
    rx2444_cur."!cursor_pos"($I11)
    ($P10) = rx2444_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2444_pos, "")
    rx2444_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2446_done
  rxcap_2446_fail:
    goto rx2444_fail
  rxcap_2446_done:
  # rx subrule "O" subtype=capture negate=
    rx2444_cur."!cursor_pos"(rx2444_pos)
    $P10 = rx2444_cur."O"("%relational, :pirop<isle ISs>")
    unless $P10, rx2444_fail
    rx2444_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2444_pos = $P10."pos"()
  # rx pass
    rx2444_cur."!cursor_pass"(rx2444_pos, "infix:sym<le>")
    if_null rx2444_debug, debug_1790
    rx2444_cur."!cursor_debug"("PASS", "infix:sym<le>", " at pos=", rx2444_pos)
  debug_1790:
    .return (rx2444_cur)
  rx2444_restart:
    if_null rx2444_debug, debug_1791
    rx2444_cur."!cursor_debug"("NEXT", "infix:sym<le>")
  debug_1791:
  rx2444_fail:
    (rx2444_rep, rx2444_pos, $I10, $P10) = rx2444_cur."!mark_fail"(0)
    lt rx2444_pos, -1, rx2444_done
    eq rx2444_pos, -1, rx2444_fail
    jump $I10
  rx2444_done:
    rx2444_cur."!cursor_fail"()
    if_null rx2444_debug, debug_1792
    rx2444_cur."!cursor_debug"("FAIL", "infix:sym<le>")
  debug_1792:
    .return (rx2444_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<le>"  :subid("368_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1330
    $P103 = self."!PREFIX__!subrule"("O", "le")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ge>"  :subid("369_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1331
    .local string rx2449_tgt
    .local int rx2449_pos
    .local int rx2449_off
    .local int rx2449_eos
    .local int rx2449_rep
    .local pmc rx2449_cur
    .local pmc rx2449_debug
    (rx2449_cur, rx2449_pos, rx2449_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2449_cur
    .local pmc match
    .lex "$/", match
    length rx2449_eos, rx2449_tgt
    gt rx2449_pos, rx2449_eos, rx2449_done
    set rx2449_off, 0
    lt rx2449_pos, 2, rx2449_start
    sub rx2449_off, rx2449_pos, 1
    substr rx2449_tgt, rx2449_tgt, rx2449_off
  rx2449_start:
    eq $I10, 1, rx2449_restart
    if_null rx2449_debug, debug_1793
    rx2449_cur."!cursor_debug"("START", "infix:sym<ge>")
  debug_1793:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2450_done
    goto rxscan2450_scan
  rxscan2450_loop:
    (rx2449_pos) = rx2449_cur."from"()
    inc rx2449_pos
    rx2449_cur."!cursor_from"(rx2449_pos)
    ge rx2449_pos, rx2449_eos, rxscan2450_done
  rxscan2450_scan:
    set_addr $I10, rxscan2450_loop
    rx2449_cur."!mark_push"(0, rx2449_pos, $I10)
  rxscan2450_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2451_fail
    rx2449_cur."!mark_push"(0, rx2449_pos, $I10)
  # rx literal  "ge"
    add $I11, rx2449_pos, 2
    gt $I11, rx2449_eos, rx2449_fail
    sub $I11, rx2449_pos, rx2449_off
    substr $S10, rx2449_tgt, $I11, 2
    ne $S10, "ge", rx2449_fail
    add rx2449_pos, 2
    set_addr $I10, rxcap_2451_fail
    ($I12, $I11) = rx2449_cur."!mark_peek"($I10)
    rx2449_cur."!cursor_pos"($I11)
    ($P10) = rx2449_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2449_pos, "")
    rx2449_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2451_done
  rxcap_2451_fail:
    goto rx2449_fail
  rxcap_2451_done:
  # rx subrule "O" subtype=capture negate=
    rx2449_cur."!cursor_pos"(rx2449_pos)
    $P10 = rx2449_cur."O"("%relational, :pirop<isge ISs>")
    unless $P10, rx2449_fail
    rx2449_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2449_pos = $P10."pos"()
  # rx pass
    rx2449_cur."!cursor_pass"(rx2449_pos, "infix:sym<ge>")
    if_null rx2449_debug, debug_1794
    rx2449_cur."!cursor_debug"("PASS", "infix:sym<ge>", " at pos=", rx2449_pos)
  debug_1794:
    .return (rx2449_cur)
  rx2449_restart:
    if_null rx2449_debug, debug_1795
    rx2449_cur."!cursor_debug"("NEXT", "infix:sym<ge>")
  debug_1795:
  rx2449_fail:
    (rx2449_rep, rx2449_pos, $I10, $P10) = rx2449_cur."!mark_fail"(0)
    lt rx2449_pos, -1, rx2449_done
    eq rx2449_pos, -1, rx2449_fail
    jump $I10
  rx2449_done:
    rx2449_cur."!cursor_fail"()
    if_null rx2449_debug, debug_1796
    rx2449_cur."!cursor_debug"("FAIL", "infix:sym<ge>")
  debug_1796:
    .return (rx2449_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ge>"  :subid("370_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1331
    $P103 = self."!PREFIX__!subrule"("O", "ge")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<lt>"  :subid("371_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1332
    .local string rx2454_tgt
    .local int rx2454_pos
    .local int rx2454_off
    .local int rx2454_eos
    .local int rx2454_rep
    .local pmc rx2454_cur
    .local pmc rx2454_debug
    (rx2454_cur, rx2454_pos, rx2454_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2454_cur
    .local pmc match
    .lex "$/", match
    length rx2454_eos, rx2454_tgt
    gt rx2454_pos, rx2454_eos, rx2454_done
    set rx2454_off, 0
    lt rx2454_pos, 2, rx2454_start
    sub rx2454_off, rx2454_pos, 1
    substr rx2454_tgt, rx2454_tgt, rx2454_off
  rx2454_start:
    eq $I10, 1, rx2454_restart
    if_null rx2454_debug, debug_1797
    rx2454_cur."!cursor_debug"("START", "infix:sym<lt>")
  debug_1797:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2455_done
    goto rxscan2455_scan
  rxscan2455_loop:
    (rx2454_pos) = rx2454_cur."from"()
    inc rx2454_pos
    rx2454_cur."!cursor_from"(rx2454_pos)
    ge rx2454_pos, rx2454_eos, rxscan2455_done
  rxscan2455_scan:
    set_addr $I10, rxscan2455_loop
    rx2454_cur."!mark_push"(0, rx2454_pos, $I10)
  rxscan2455_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2456_fail
    rx2454_cur."!mark_push"(0, rx2454_pos, $I10)
  # rx literal  "lt"
    add $I11, rx2454_pos, 2
    gt $I11, rx2454_eos, rx2454_fail
    sub $I11, rx2454_pos, rx2454_off
    substr $S10, rx2454_tgt, $I11, 2
    ne $S10, "lt", rx2454_fail
    add rx2454_pos, 2
    set_addr $I10, rxcap_2456_fail
    ($I12, $I11) = rx2454_cur."!mark_peek"($I10)
    rx2454_cur."!cursor_pos"($I11)
    ($P10) = rx2454_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2454_pos, "")
    rx2454_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2456_done
  rxcap_2456_fail:
    goto rx2454_fail
  rxcap_2456_done:
  # rx subrule "O" subtype=capture negate=
    rx2454_cur."!cursor_pos"(rx2454_pos)
    $P10 = rx2454_cur."O"("%relational, :pirop<islt ISs>")
    unless $P10, rx2454_fail
    rx2454_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2454_pos = $P10."pos"()
  # rx pass
    rx2454_cur."!cursor_pass"(rx2454_pos, "infix:sym<lt>")
    if_null rx2454_debug, debug_1798
    rx2454_cur."!cursor_debug"("PASS", "infix:sym<lt>", " at pos=", rx2454_pos)
  debug_1798:
    .return (rx2454_cur)
  rx2454_restart:
    if_null rx2454_debug, debug_1799
    rx2454_cur."!cursor_debug"("NEXT", "infix:sym<lt>")
  debug_1799:
  rx2454_fail:
    (rx2454_rep, rx2454_pos, $I10, $P10) = rx2454_cur."!mark_fail"(0)
    lt rx2454_pos, -1, rx2454_done
    eq rx2454_pos, -1, rx2454_fail
    jump $I10
  rx2454_done:
    rx2454_cur."!cursor_fail"()
    if_null rx2454_debug, debug_1800
    rx2454_cur."!cursor_debug"("FAIL", "infix:sym<lt>")
  debug_1800:
    .return (rx2454_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<lt>"  :subid("372_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1332
    $P103 = self."!PREFIX__!subrule"("O", "lt")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<gt>"  :subid("373_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1333
    .local string rx2459_tgt
    .local int rx2459_pos
    .local int rx2459_off
    .local int rx2459_eos
    .local int rx2459_rep
    .local pmc rx2459_cur
    .local pmc rx2459_debug
    (rx2459_cur, rx2459_pos, rx2459_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2459_cur
    .local pmc match
    .lex "$/", match
    length rx2459_eos, rx2459_tgt
    gt rx2459_pos, rx2459_eos, rx2459_done
    set rx2459_off, 0
    lt rx2459_pos, 2, rx2459_start
    sub rx2459_off, rx2459_pos, 1
    substr rx2459_tgt, rx2459_tgt, rx2459_off
  rx2459_start:
    eq $I10, 1, rx2459_restart
    if_null rx2459_debug, debug_1801
    rx2459_cur."!cursor_debug"("START", "infix:sym<gt>")
  debug_1801:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2460_done
    goto rxscan2460_scan
  rxscan2460_loop:
    (rx2459_pos) = rx2459_cur."from"()
    inc rx2459_pos
    rx2459_cur."!cursor_from"(rx2459_pos)
    ge rx2459_pos, rx2459_eos, rxscan2460_done
  rxscan2460_scan:
    set_addr $I10, rxscan2460_loop
    rx2459_cur."!mark_push"(0, rx2459_pos, $I10)
  rxscan2460_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2461_fail
    rx2459_cur."!mark_push"(0, rx2459_pos, $I10)
  # rx literal  "gt"
    add $I11, rx2459_pos, 2
    gt $I11, rx2459_eos, rx2459_fail
    sub $I11, rx2459_pos, rx2459_off
    substr $S10, rx2459_tgt, $I11, 2
    ne $S10, "gt", rx2459_fail
    add rx2459_pos, 2
    set_addr $I10, rxcap_2461_fail
    ($I12, $I11) = rx2459_cur."!mark_peek"($I10)
    rx2459_cur."!cursor_pos"($I11)
    ($P10) = rx2459_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2459_pos, "")
    rx2459_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2461_done
  rxcap_2461_fail:
    goto rx2459_fail
  rxcap_2461_done:
  # rx subrule "O" subtype=capture negate=
    rx2459_cur."!cursor_pos"(rx2459_pos)
    $P10 = rx2459_cur."O"("%relational, :pirop<isgt ISs>")
    unless $P10, rx2459_fail
    rx2459_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2459_pos = $P10."pos"()
  # rx pass
    rx2459_cur."!cursor_pass"(rx2459_pos, "infix:sym<gt>")
    if_null rx2459_debug, debug_1802
    rx2459_cur."!cursor_debug"("PASS", "infix:sym<gt>", " at pos=", rx2459_pos)
  debug_1802:
    .return (rx2459_cur)
  rx2459_restart:
    if_null rx2459_debug, debug_1803
    rx2459_cur."!cursor_debug"("NEXT", "infix:sym<gt>")
  debug_1803:
  rx2459_fail:
    (rx2459_rep, rx2459_pos, $I10, $P10) = rx2459_cur."!mark_fail"(0)
    lt rx2459_pos, -1, rx2459_done
    eq rx2459_pos, -1, rx2459_fail
    jump $I10
  rx2459_done:
    rx2459_cur."!cursor_fail"()
    if_null rx2459_debug, debug_1804
    rx2459_cur."!cursor_debug"("FAIL", "infix:sym<gt>")
  debug_1804:
    .return (rx2459_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<gt>"  :subid("374_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1333
    $P103 = self."!PREFIX__!subrule"("O", "gt")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=:=>"  :subid("375_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1334
    .local string rx2464_tgt
    .local int rx2464_pos
    .local int rx2464_off
    .local int rx2464_eos
    .local int rx2464_rep
    .local pmc rx2464_cur
    .local pmc rx2464_debug
    (rx2464_cur, rx2464_pos, rx2464_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2464_cur
    .local pmc match
    .lex "$/", match
    length rx2464_eos, rx2464_tgt
    gt rx2464_pos, rx2464_eos, rx2464_done
    set rx2464_off, 0
    lt rx2464_pos, 2, rx2464_start
    sub rx2464_off, rx2464_pos, 1
    substr rx2464_tgt, rx2464_tgt, rx2464_off
  rx2464_start:
    eq $I10, 1, rx2464_restart
    if_null rx2464_debug, debug_1805
    rx2464_cur."!cursor_debug"("START", "infix:sym<=:=>")
  debug_1805:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2465_done
    goto rxscan2465_scan
  rxscan2465_loop:
    (rx2464_pos) = rx2464_cur."from"()
    inc rx2464_pos
    rx2464_cur."!cursor_from"(rx2464_pos)
    ge rx2464_pos, rx2464_eos, rxscan2465_done
  rxscan2465_scan:
    set_addr $I10, rxscan2465_loop
    rx2464_cur."!mark_push"(0, rx2464_pos, $I10)
  rxscan2465_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2466_fail
    rx2464_cur."!mark_push"(0, rx2464_pos, $I10)
  # rx literal  "=:="
    add $I11, rx2464_pos, 3
    gt $I11, rx2464_eos, rx2464_fail
    sub $I11, rx2464_pos, rx2464_off
    substr $S10, rx2464_tgt, $I11, 3
    ne $S10, "=:=", rx2464_fail
    add rx2464_pos, 3
    set_addr $I10, rxcap_2466_fail
    ($I12, $I11) = rx2464_cur."!mark_peek"($I10)
    rx2464_cur."!cursor_pos"($I11)
    ($P10) = rx2464_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2464_pos, "")
    rx2464_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2466_done
  rxcap_2466_fail:
    goto rx2464_fail
  rxcap_2466_done:
  # rx subrule "O" subtype=capture negate=
    rx2464_cur."!cursor_pos"(rx2464_pos)
    $P10 = rx2464_cur."O"("%relational, :pirop<issame>")
    unless $P10, rx2464_fail
    rx2464_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2464_pos = $P10."pos"()
  # rx pass
    rx2464_cur."!cursor_pass"(rx2464_pos, "infix:sym<=:=>")
    if_null rx2464_debug, debug_1806
    rx2464_cur."!cursor_debug"("PASS", "infix:sym<=:=>", " at pos=", rx2464_pos)
  debug_1806:
    .return (rx2464_cur)
  rx2464_restart:
    if_null rx2464_debug, debug_1807
    rx2464_cur."!cursor_debug"("NEXT", "infix:sym<=:=>")
  debug_1807:
  rx2464_fail:
    (rx2464_rep, rx2464_pos, $I10, $P10) = rx2464_cur."!mark_fail"(0)
    lt rx2464_pos, -1, rx2464_done
    eq rx2464_pos, -1, rx2464_fail
    jump $I10
  rx2464_done:
    rx2464_cur."!cursor_fail"()
    if_null rx2464_debug, debug_1808
    rx2464_cur."!cursor_debug"("FAIL", "infix:sym<=:=>")
  debug_1808:
    .return (rx2464_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=:=>"  :subid("376_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1334
    $P103 = self."!PREFIX__!subrule"("O", "=:=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~~>"  :subid("377_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1335
    .local string rx2469_tgt
    .local int rx2469_pos
    .local int rx2469_off
    .local int rx2469_eos
    .local int rx2469_rep
    .local pmc rx2469_cur
    .local pmc rx2469_debug
    (rx2469_cur, rx2469_pos, rx2469_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2469_cur
    .local pmc match
    .lex "$/", match
    length rx2469_eos, rx2469_tgt
    gt rx2469_pos, rx2469_eos, rx2469_done
    set rx2469_off, 0
    lt rx2469_pos, 2, rx2469_start
    sub rx2469_off, rx2469_pos, 1
    substr rx2469_tgt, rx2469_tgt, rx2469_off
  rx2469_start:
    eq $I10, 1, rx2469_restart
    if_null rx2469_debug, debug_1809
    rx2469_cur."!cursor_debug"("START", "infix:sym<~~>")
  debug_1809:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2470_done
    goto rxscan2470_scan
  rxscan2470_loop:
    (rx2469_pos) = rx2469_cur."from"()
    inc rx2469_pos
    rx2469_cur."!cursor_from"(rx2469_pos)
    ge rx2469_pos, rx2469_eos, rxscan2470_done
  rxscan2470_scan:
    set_addr $I10, rxscan2470_loop
    rx2469_cur."!mark_push"(0, rx2469_pos, $I10)
  rxscan2470_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2471_fail
    rx2469_cur."!mark_push"(0, rx2469_pos, $I10)
  # rx literal  "~~"
    add $I11, rx2469_pos, 2
    gt $I11, rx2469_eos, rx2469_fail
    sub $I11, rx2469_pos, rx2469_off
    substr $S10, rx2469_tgt, $I11, 2
    ne $S10, "~~", rx2469_fail
    add rx2469_pos, 2
    set_addr $I10, rxcap_2471_fail
    ($I12, $I11) = rx2469_cur."!mark_peek"($I10)
    rx2469_cur."!cursor_pos"($I11)
    ($P10) = rx2469_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2469_pos, "")
    rx2469_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2471_done
  rxcap_2471_fail:
    goto rx2469_fail
  rxcap_2471_done:
  # rx subrule "O" subtype=capture negate=
    rx2469_cur."!cursor_pos"(rx2469_pos)
    $P10 = rx2469_cur."O"("%relational, :reducecheck<smartmatch>")
    unless $P10, rx2469_fail
    rx2469_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2469_pos = $P10."pos"()
  # rx pass
    rx2469_cur."!cursor_pass"(rx2469_pos, "infix:sym<~~>")
    if_null rx2469_debug, debug_1810
    rx2469_cur."!cursor_debug"("PASS", "infix:sym<~~>", " at pos=", rx2469_pos)
  debug_1810:
    .return (rx2469_cur)
  rx2469_restart:
    if_null rx2469_debug, debug_1811
    rx2469_cur."!cursor_debug"("NEXT", "infix:sym<~~>")
  debug_1811:
  rx2469_fail:
    (rx2469_rep, rx2469_pos, $I10, $P10) = rx2469_cur."!mark_fail"(0)
    lt rx2469_pos, -1, rx2469_done
    eq rx2469_pos, -1, rx2469_fail
    jump $I10
  rx2469_done:
    rx2469_cur."!cursor_fail"()
    if_null rx2469_debug, debug_1812
    rx2469_cur."!cursor_debug"("FAIL", "infix:sym<~~>")
  debug_1812:
    .return (rx2469_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~~>"  :subid("378_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1335
    $P103 = self."!PREFIX__!subrule"("O", "~~")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<&&>"  :subid("379_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1337
    .local string rx2474_tgt
    .local int rx2474_pos
    .local int rx2474_off
    .local int rx2474_eos
    .local int rx2474_rep
    .local pmc rx2474_cur
    .local pmc rx2474_debug
    (rx2474_cur, rx2474_pos, rx2474_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2474_cur
    .local pmc match
    .lex "$/", match
    length rx2474_eos, rx2474_tgt
    gt rx2474_pos, rx2474_eos, rx2474_done
    set rx2474_off, 0
    lt rx2474_pos, 2, rx2474_start
    sub rx2474_off, rx2474_pos, 1
    substr rx2474_tgt, rx2474_tgt, rx2474_off
  rx2474_start:
    eq $I10, 1, rx2474_restart
    if_null rx2474_debug, debug_1813
    rx2474_cur."!cursor_debug"("START", "infix:sym<&&>")
  debug_1813:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2475_done
    goto rxscan2475_scan
  rxscan2475_loop:
    (rx2474_pos) = rx2474_cur."from"()
    inc rx2474_pos
    rx2474_cur."!cursor_from"(rx2474_pos)
    ge rx2474_pos, rx2474_eos, rxscan2475_done
  rxscan2475_scan:
    set_addr $I10, rxscan2475_loop
    rx2474_cur."!mark_push"(0, rx2474_pos, $I10)
  rxscan2475_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2476_fail
    rx2474_cur."!mark_push"(0, rx2474_pos, $I10)
  # rx literal  "&&"
    add $I11, rx2474_pos, 2
    gt $I11, rx2474_eos, rx2474_fail
    sub $I11, rx2474_pos, rx2474_off
    substr $S10, rx2474_tgt, $I11, 2
    ne $S10, "&&", rx2474_fail
    add rx2474_pos, 2
    set_addr $I10, rxcap_2476_fail
    ($I12, $I11) = rx2474_cur."!mark_peek"($I10)
    rx2474_cur."!cursor_pos"($I11)
    ($P10) = rx2474_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2474_pos, "")
    rx2474_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2476_done
  rxcap_2476_fail:
    goto rx2474_fail
  rxcap_2476_done:
  # rx subrule "O" subtype=capture negate=
    rx2474_cur."!cursor_pos"(rx2474_pos)
    $P10 = rx2474_cur."O"("%tight_and, :pasttype<if>")
    unless $P10, rx2474_fail
    rx2474_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2474_pos = $P10."pos"()
  # rx pass
    rx2474_cur."!cursor_pass"(rx2474_pos, "infix:sym<&&>")
    if_null rx2474_debug, debug_1814
    rx2474_cur."!cursor_debug"("PASS", "infix:sym<&&>", " at pos=", rx2474_pos)
  debug_1814:
    .return (rx2474_cur)
  rx2474_restart:
    if_null rx2474_debug, debug_1815
    rx2474_cur."!cursor_debug"("NEXT", "infix:sym<&&>")
  debug_1815:
  rx2474_fail:
    (rx2474_rep, rx2474_pos, $I10, $P10) = rx2474_cur."!mark_fail"(0)
    lt rx2474_pos, -1, rx2474_done
    eq rx2474_pos, -1, rx2474_fail
    jump $I10
  rx2474_done:
    rx2474_cur."!cursor_fail"()
    if_null rx2474_debug, debug_1816
    rx2474_cur."!cursor_debug"("FAIL", "infix:sym<&&>")
  debug_1816:
    .return (rx2474_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<&&>"  :subid("380_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1337
    $P103 = self."!PREFIX__!subrule"("O", "&&")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<||>"  :subid("381_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1339
    .local string rx2479_tgt
    .local int rx2479_pos
    .local int rx2479_off
    .local int rx2479_eos
    .local int rx2479_rep
    .local pmc rx2479_cur
    .local pmc rx2479_debug
    (rx2479_cur, rx2479_pos, rx2479_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2479_cur
    .local pmc match
    .lex "$/", match
    length rx2479_eos, rx2479_tgt
    gt rx2479_pos, rx2479_eos, rx2479_done
    set rx2479_off, 0
    lt rx2479_pos, 2, rx2479_start
    sub rx2479_off, rx2479_pos, 1
    substr rx2479_tgt, rx2479_tgt, rx2479_off
  rx2479_start:
    eq $I10, 1, rx2479_restart
    if_null rx2479_debug, debug_1817
    rx2479_cur."!cursor_debug"("START", "infix:sym<||>")
  debug_1817:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2480_done
    goto rxscan2480_scan
  rxscan2480_loop:
    (rx2479_pos) = rx2479_cur."from"()
    inc rx2479_pos
    rx2479_cur."!cursor_from"(rx2479_pos)
    ge rx2479_pos, rx2479_eos, rxscan2480_done
  rxscan2480_scan:
    set_addr $I10, rxscan2480_loop
    rx2479_cur."!mark_push"(0, rx2479_pos, $I10)
  rxscan2480_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2481_fail
    rx2479_cur."!mark_push"(0, rx2479_pos, $I10)
  # rx literal  "||"
    add $I11, rx2479_pos, 2
    gt $I11, rx2479_eos, rx2479_fail
    sub $I11, rx2479_pos, rx2479_off
    substr $S10, rx2479_tgt, $I11, 2
    ne $S10, "||", rx2479_fail
    add rx2479_pos, 2
    set_addr $I10, rxcap_2481_fail
    ($I12, $I11) = rx2479_cur."!mark_peek"($I10)
    rx2479_cur."!cursor_pos"($I11)
    ($P10) = rx2479_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2479_pos, "")
    rx2479_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2481_done
  rxcap_2481_fail:
    goto rx2479_fail
  rxcap_2481_done:
  # rx subrule "O" subtype=capture negate=
    rx2479_cur."!cursor_pos"(rx2479_pos)
    $P10 = rx2479_cur."O"("%tight_or, :pasttype<unless>")
    unless $P10, rx2479_fail
    rx2479_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2479_pos = $P10."pos"()
  # rx pass
    rx2479_cur."!cursor_pass"(rx2479_pos, "infix:sym<||>")
    if_null rx2479_debug, debug_1818
    rx2479_cur."!cursor_debug"("PASS", "infix:sym<||>", " at pos=", rx2479_pos)
  debug_1818:
    .return (rx2479_cur)
  rx2479_restart:
    if_null rx2479_debug, debug_1819
    rx2479_cur."!cursor_debug"("NEXT", "infix:sym<||>")
  debug_1819:
  rx2479_fail:
    (rx2479_rep, rx2479_pos, $I10, $P10) = rx2479_cur."!mark_fail"(0)
    lt rx2479_pos, -1, rx2479_done
    eq rx2479_pos, -1, rx2479_fail
    jump $I10
  rx2479_done:
    rx2479_cur."!cursor_fail"()
    if_null rx2479_debug, debug_1820
    rx2479_cur."!cursor_debug"("FAIL", "infix:sym<||>")
  debug_1820:
    .return (rx2479_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<||>"  :subid("382_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1339
    $P103 = self."!PREFIX__!subrule"("O", "||")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<//>"  :subid("383_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1340
    .local string rx2484_tgt
    .local int rx2484_pos
    .local int rx2484_off
    .local int rx2484_eos
    .local int rx2484_rep
    .local pmc rx2484_cur
    .local pmc rx2484_debug
    (rx2484_cur, rx2484_pos, rx2484_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2484_cur
    .local pmc match
    .lex "$/", match
    length rx2484_eos, rx2484_tgt
    gt rx2484_pos, rx2484_eos, rx2484_done
    set rx2484_off, 0
    lt rx2484_pos, 2, rx2484_start
    sub rx2484_off, rx2484_pos, 1
    substr rx2484_tgt, rx2484_tgt, rx2484_off
  rx2484_start:
    eq $I10, 1, rx2484_restart
    if_null rx2484_debug, debug_1821
    rx2484_cur."!cursor_debug"("START", "infix:sym<//>")
  debug_1821:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2485_done
    goto rxscan2485_scan
  rxscan2485_loop:
    (rx2484_pos) = rx2484_cur."from"()
    inc rx2484_pos
    rx2484_cur."!cursor_from"(rx2484_pos)
    ge rx2484_pos, rx2484_eos, rxscan2485_done
  rxscan2485_scan:
    set_addr $I10, rxscan2485_loop
    rx2484_cur."!mark_push"(0, rx2484_pos, $I10)
  rxscan2485_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2486_fail
    rx2484_cur."!mark_push"(0, rx2484_pos, $I10)
  # rx literal  "//"
    add $I11, rx2484_pos, 2
    gt $I11, rx2484_eos, rx2484_fail
    sub $I11, rx2484_pos, rx2484_off
    substr $S10, rx2484_tgt, $I11, 2
    ne $S10, "//", rx2484_fail
    add rx2484_pos, 2
    set_addr $I10, rxcap_2486_fail
    ($I12, $I11) = rx2484_cur."!mark_peek"($I10)
    rx2484_cur."!cursor_pos"($I11)
    ($P10) = rx2484_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2484_pos, "")
    rx2484_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2486_done
  rxcap_2486_fail:
    goto rx2484_fail
  rxcap_2486_done:
  # rx subrule "O" subtype=capture negate=
    rx2484_cur."!cursor_pos"(rx2484_pos)
    $P10 = rx2484_cur."O"("%tight_or, :pasttype<def_or>")
    unless $P10, rx2484_fail
    rx2484_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2484_pos = $P10."pos"()
  # rx pass
    rx2484_cur."!cursor_pass"(rx2484_pos, "infix:sym<//>")
    if_null rx2484_debug, debug_1822
    rx2484_cur."!cursor_debug"("PASS", "infix:sym<//>", " at pos=", rx2484_pos)
  debug_1822:
    .return (rx2484_cur)
  rx2484_restart:
    if_null rx2484_debug, debug_1823
    rx2484_cur."!cursor_debug"("NEXT", "infix:sym<//>")
  debug_1823:
  rx2484_fail:
    (rx2484_rep, rx2484_pos, $I10, $P10) = rx2484_cur."!mark_fail"(0)
    lt rx2484_pos, -1, rx2484_done
    eq rx2484_pos, -1, rx2484_fail
    jump $I10
  rx2484_done:
    rx2484_cur."!cursor_fail"()
    if_null rx2484_debug, debug_1824
    rx2484_cur."!cursor_debug"("FAIL", "infix:sym<//>")
  debug_1824:
    .return (rx2484_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<//>"  :subid("384_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1340
    $P103 = self."!PREFIX__!subrule"("O", "//")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<?? !!>"  :subid("385_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1342
    .local string rx2489_tgt
    .local int rx2489_pos
    .local int rx2489_off
    .local int rx2489_eos
    .local int rx2489_rep
    .local pmc rx2489_cur
    .local pmc rx2489_debug
    (rx2489_cur, rx2489_pos, rx2489_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2489_cur
    .local pmc match
    .lex "$/", match
    length rx2489_eos, rx2489_tgt
    gt rx2489_pos, rx2489_eos, rx2489_done
    set rx2489_off, 0
    lt rx2489_pos, 2, rx2489_start
    sub rx2489_off, rx2489_pos, 1
    substr rx2489_tgt, rx2489_tgt, rx2489_off
  rx2489_start:
    eq $I10, 1, rx2489_restart
    if_null rx2489_debug, debug_1825
    rx2489_cur."!cursor_debug"("START", "infix:sym<?? !!>")
  debug_1825:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2490_done
    goto rxscan2490_scan
  rxscan2490_loop:
    (rx2489_pos) = rx2489_cur."from"()
    inc rx2489_pos
    rx2489_cur."!cursor_from"(rx2489_pos)
    ge rx2489_pos, rx2489_eos, rxscan2490_done
  rxscan2490_scan:
    set_addr $I10, rxscan2490_loop
    rx2489_cur."!mark_push"(0, rx2489_pos, $I10)
  rxscan2490_done:
.annotate 'line', 1343
  # rx literal  "??"
    add $I11, rx2489_pos, 2
    gt $I11, rx2489_eos, rx2489_fail
    sub $I11, rx2489_pos, rx2489_off
    substr $S10, rx2489_tgt, $I11, 2
    ne $S10, "??", rx2489_fail
    add rx2489_pos, 2
.annotate 'line', 1344
  # rx subrule "ws" subtype=method negate=
    rx2489_cur."!cursor_pos"(rx2489_pos)
    $P10 = rx2489_cur."ws"()
    unless $P10, rx2489_fail
    rx2489_pos = $P10."pos"()
.annotate 'line', 1345
  # rx subrule "EXPR" subtype=capture negate=
    rx2489_cur."!cursor_pos"(rx2489_pos)
    $P10 = rx2489_cur."EXPR"("i=")
    unless $P10, rx2489_fail
    rx2489_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2489_pos = $P10."pos"()
.annotate 'line', 1346
  # rx literal  "!!"
    add $I11, rx2489_pos, 2
    gt $I11, rx2489_eos, rx2489_fail
    sub $I11, rx2489_pos, rx2489_off
    substr $S10, rx2489_tgt, $I11, 2
    ne $S10, "!!", rx2489_fail
    add rx2489_pos, 2
.annotate 'line', 1347
  # rx subrule "O" subtype=capture negate=
    rx2489_cur."!cursor_pos"(rx2489_pos)
    $P10 = rx2489_cur."O"("%conditional, :reducecheck<ternary>, :pasttype<if>")
    unless $P10, rx2489_fail
    rx2489_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2489_pos = $P10."pos"()
.annotate 'line', 1342
  # rx pass
    rx2489_cur."!cursor_pass"(rx2489_pos, "infix:sym<?? !!>")
    if_null rx2489_debug, debug_1826
    rx2489_cur."!cursor_debug"("PASS", "infix:sym<?? !!>", " at pos=", rx2489_pos)
  debug_1826:
    .return (rx2489_cur)
  rx2489_restart:
    if_null rx2489_debug, debug_1827
    rx2489_cur."!cursor_debug"("NEXT", "infix:sym<?? !!>")
  debug_1827:
  rx2489_fail:
    (rx2489_rep, rx2489_pos, $I10, $P10) = rx2489_cur."!mark_fail"(0)
    lt rx2489_pos, -1, rx2489_done
    eq rx2489_pos, -1, rx2489_fail
    jump $I10
  rx2489_done:
    rx2489_cur."!cursor_fail"()
    if_null rx2489_debug, debug_1828
    rx2489_cur."!cursor_debug"("FAIL", "infix:sym<?? !!>")
  debug_1828:
    .return (rx2489_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<?? !!>"  :subid("386_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1342
    $P103 = self."!PREFIX__!subrule"("ws", "??")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=>"  :subid("387_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1350
    .local string rx2493_tgt
    .local int rx2493_pos
    .local int rx2493_off
    .local int rx2493_eos
    .local int rx2493_rep
    .local pmc rx2493_cur
    .local pmc rx2493_debug
    (rx2493_cur, rx2493_pos, rx2493_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2493_cur
    .local pmc match
    .lex "$/", match
    length rx2493_eos, rx2493_tgt
    gt rx2493_pos, rx2493_eos, rx2493_done
    set rx2493_off, 0
    lt rx2493_pos, 2, rx2493_start
    sub rx2493_off, rx2493_pos, 1
    substr rx2493_tgt, rx2493_tgt, rx2493_off
  rx2493_start:
    eq $I10, 1, rx2493_restart
    if_null rx2493_debug, debug_1829
    rx2493_cur."!cursor_debug"("START", "infix:sym<=>")
  debug_1829:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2494_done
    goto rxscan2494_scan
  rxscan2494_loop:
    (rx2493_pos) = rx2493_cur."from"()
    inc rx2493_pos
    rx2493_cur."!cursor_from"(rx2493_pos)
    ge rx2493_pos, rx2493_eos, rxscan2494_done
  rxscan2494_scan:
    set_addr $I10, rxscan2494_loop
    rx2493_cur."!mark_push"(0, rx2493_pos, $I10)
  rxscan2494_done:
.annotate 'line', 1351
  # rx subcapture "sym"
    set_addr $I10, rxcap_2495_fail
    rx2493_cur."!mark_push"(0, rx2493_pos, $I10)
  # rx literal  "="
    add $I11, rx2493_pos, 1
    gt $I11, rx2493_eos, rx2493_fail
    sub $I11, rx2493_pos, rx2493_off
    ord $I11, rx2493_tgt, $I11
    ne $I11, 61, rx2493_fail
    add rx2493_pos, 1
    set_addr $I10, rxcap_2495_fail
    ($I12, $I11) = rx2493_cur."!mark_peek"($I10)
    rx2493_cur."!cursor_pos"($I11)
    ($P10) = rx2493_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2493_pos, "")
    rx2493_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2495_done
  rxcap_2495_fail:
    goto rx2493_fail
  rxcap_2495_done:
  # rx subrule "panic" subtype=method negate=
    rx2493_cur."!cursor_pos"(rx2493_pos)
    $P10 = rx2493_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    unless $P10, rx2493_fail
    rx2493_pos = $P10."pos"()
.annotate 'line', 1350
  # rx pass
    rx2493_cur."!cursor_pass"(rx2493_pos, "infix:sym<=>")
    if_null rx2493_debug, debug_1830
    rx2493_cur."!cursor_debug"("PASS", "infix:sym<=>", " at pos=", rx2493_pos)
  debug_1830:
    .return (rx2493_cur)
  rx2493_restart:
    if_null rx2493_debug, debug_1831
    rx2493_cur."!cursor_debug"("NEXT", "infix:sym<=>")
  debug_1831:
  rx2493_fail:
    (rx2493_rep, rx2493_pos, $I10, $P10) = rx2493_cur."!mark_fail"(0)
    lt rx2493_pos, -1, rx2493_done
    eq rx2493_pos, -1, rx2493_fail
    jump $I10
  rx2493_done:
    rx2493_cur."!cursor_fail"()
    if_null rx2493_debug, debug_1832
    rx2493_cur."!cursor_debug"("FAIL", "infix:sym<=>")
  debug_1832:
    .return (rx2493_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=>"  :subid("388_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1350
    $P103 = self."!PREFIX__!subrule"("panic", "=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<:=>"  :subid("389_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1353
    .local string rx2498_tgt
    .local int rx2498_pos
    .local int rx2498_off
    .local int rx2498_eos
    .local int rx2498_rep
    .local pmc rx2498_cur
    .local pmc rx2498_debug
    (rx2498_cur, rx2498_pos, rx2498_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2498_cur
    .local pmc match
    .lex "$/", match
    length rx2498_eos, rx2498_tgt
    gt rx2498_pos, rx2498_eos, rx2498_done
    set rx2498_off, 0
    lt rx2498_pos, 2, rx2498_start
    sub rx2498_off, rx2498_pos, 1
    substr rx2498_tgt, rx2498_tgt, rx2498_off
  rx2498_start:
    eq $I10, 1, rx2498_restart
    if_null rx2498_debug, debug_1833
    rx2498_cur."!cursor_debug"("START", "infix:sym<:=>")
  debug_1833:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2499_done
    goto rxscan2499_scan
  rxscan2499_loop:
    (rx2498_pos) = rx2498_cur."from"()
    inc rx2498_pos
    rx2498_cur."!cursor_from"(rx2498_pos)
    ge rx2498_pos, rx2498_eos, rxscan2499_done
  rxscan2499_scan:
    set_addr $I10, rxscan2499_loop
    rx2498_cur."!mark_push"(0, rx2498_pos, $I10)
  rxscan2499_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2500_fail
    rx2498_cur."!mark_push"(0, rx2498_pos, $I10)
  # rx literal  ":="
    add $I11, rx2498_pos, 2
    gt $I11, rx2498_eos, rx2498_fail
    sub $I11, rx2498_pos, rx2498_off
    substr $S10, rx2498_tgt, $I11, 2
    ne $S10, ":=", rx2498_fail
    add rx2498_pos, 2
    set_addr $I10, rxcap_2500_fail
    ($I12, $I11) = rx2498_cur."!mark_peek"($I10)
    rx2498_cur."!cursor_pos"($I11)
    ($P10) = rx2498_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2498_pos, "")
    rx2498_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2500_done
  rxcap_2500_fail:
    goto rx2498_fail
  rxcap_2500_done:
  # rx subrule "O" subtype=capture negate=
    rx2498_cur."!cursor_pos"(rx2498_pos)
    $P10 = rx2498_cur."O"("%assignment, :pasttype<bind_6model>")
    unless $P10, rx2498_fail
    rx2498_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2498_pos = $P10."pos"()
  # rx pass
    rx2498_cur."!cursor_pass"(rx2498_pos, "infix:sym<:=>")
    if_null rx2498_debug, debug_1834
    rx2498_cur."!cursor_debug"("PASS", "infix:sym<:=>", " at pos=", rx2498_pos)
  debug_1834:
    .return (rx2498_cur)
  rx2498_restart:
    if_null rx2498_debug, debug_1835
    rx2498_cur."!cursor_debug"("NEXT", "infix:sym<:=>")
  debug_1835:
  rx2498_fail:
    (rx2498_rep, rx2498_pos, $I10, $P10) = rx2498_cur."!mark_fail"(0)
    lt rx2498_pos, -1, rx2498_done
    eq rx2498_pos, -1, rx2498_fail
    jump $I10
  rx2498_done:
    rx2498_cur."!cursor_fail"()
    if_null rx2498_debug, debug_1836
    rx2498_cur."!cursor_debug"("FAIL", "infix:sym<:=>")
  debug_1836:
    .return (rx2498_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<:=>"  :subid("390_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1353
    $P103 = self."!PREFIX__!subrule"("O", ":=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<::=>"  :subid("391_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1354
    .local string rx2503_tgt
    .local int rx2503_pos
    .local int rx2503_off
    .local int rx2503_eos
    .local int rx2503_rep
    .local pmc rx2503_cur
    .local pmc rx2503_debug
    (rx2503_cur, rx2503_pos, rx2503_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2503_cur
    .local pmc match
    .lex "$/", match
    length rx2503_eos, rx2503_tgt
    gt rx2503_pos, rx2503_eos, rx2503_done
    set rx2503_off, 0
    lt rx2503_pos, 2, rx2503_start
    sub rx2503_off, rx2503_pos, 1
    substr rx2503_tgt, rx2503_tgt, rx2503_off
  rx2503_start:
    eq $I10, 1, rx2503_restart
    if_null rx2503_debug, debug_1837
    rx2503_cur."!cursor_debug"("START", "infix:sym<::=>")
  debug_1837:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2504_done
    goto rxscan2504_scan
  rxscan2504_loop:
    (rx2503_pos) = rx2503_cur."from"()
    inc rx2503_pos
    rx2503_cur."!cursor_from"(rx2503_pos)
    ge rx2503_pos, rx2503_eos, rxscan2504_done
  rxscan2504_scan:
    set_addr $I10, rxscan2504_loop
    rx2503_cur."!mark_push"(0, rx2503_pos, $I10)
  rxscan2504_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2505_fail
    rx2503_cur."!mark_push"(0, rx2503_pos, $I10)
  # rx literal  "::="
    add $I11, rx2503_pos, 3
    gt $I11, rx2503_eos, rx2503_fail
    sub $I11, rx2503_pos, rx2503_off
    substr $S10, rx2503_tgt, $I11, 3
    ne $S10, "::=", rx2503_fail
    add rx2503_pos, 3
    set_addr $I10, rxcap_2505_fail
    ($I12, $I11) = rx2503_cur."!mark_peek"($I10)
    rx2503_cur."!cursor_pos"($I11)
    ($P10) = rx2503_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2503_pos, "")
    rx2503_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2505_done
  rxcap_2505_fail:
    goto rx2503_fail
  rxcap_2505_done:
  # rx subrule "O" subtype=capture negate=
    rx2503_cur."!cursor_pos"(rx2503_pos)
    $P10 = rx2503_cur."O"("%assignment, :pasttype<bind_6model>")
    unless $P10, rx2503_fail
    rx2503_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2503_pos = $P10."pos"()
  # rx pass
    rx2503_cur."!cursor_pass"(rx2503_pos, "infix:sym<::=>")
    if_null rx2503_debug, debug_1838
    rx2503_cur."!cursor_debug"("PASS", "infix:sym<::=>", " at pos=", rx2503_pos)
  debug_1838:
    .return (rx2503_cur)
  rx2503_restart:
    if_null rx2503_debug, debug_1839
    rx2503_cur."!cursor_debug"("NEXT", "infix:sym<::=>")
  debug_1839:
  rx2503_fail:
    (rx2503_rep, rx2503_pos, $I10, $P10) = rx2503_cur."!mark_fail"(0)
    lt rx2503_pos, -1, rx2503_done
    eq rx2503_pos, -1, rx2503_fail
    jump $I10
  rx2503_done:
    rx2503_cur."!cursor_fail"()
    if_null rx2503_debug, debug_1840
    rx2503_cur."!cursor_debug"("FAIL", "infix:sym<::=>")
  debug_1840:
    .return (rx2503_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<::=>"  :subid("392_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1354
    $P103 = self."!PREFIX__!subrule"("O", "::=")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<,>"  :subid("393_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1356
    .local string rx2508_tgt
    .local int rx2508_pos
    .local int rx2508_off
    .local int rx2508_eos
    .local int rx2508_rep
    .local pmc rx2508_cur
    .local pmc rx2508_debug
    (rx2508_cur, rx2508_pos, rx2508_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2508_cur
    .local pmc match
    .lex "$/", match
    length rx2508_eos, rx2508_tgt
    gt rx2508_pos, rx2508_eos, rx2508_done
    set rx2508_off, 0
    lt rx2508_pos, 2, rx2508_start
    sub rx2508_off, rx2508_pos, 1
    substr rx2508_tgt, rx2508_tgt, rx2508_off
  rx2508_start:
    eq $I10, 1, rx2508_restart
    if_null rx2508_debug, debug_1841
    rx2508_cur."!cursor_debug"("START", "infix:sym<,>")
  debug_1841:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2509_done
    goto rxscan2509_scan
  rxscan2509_loop:
    (rx2508_pos) = rx2508_cur."from"()
    inc rx2508_pos
    rx2508_cur."!cursor_from"(rx2508_pos)
    ge rx2508_pos, rx2508_eos, rxscan2509_done
  rxscan2509_scan:
    set_addr $I10, rxscan2509_loop
    rx2508_cur."!mark_push"(0, rx2508_pos, $I10)
  rxscan2509_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2510_fail
    rx2508_cur."!mark_push"(0, rx2508_pos, $I10)
  # rx literal  ","
    add $I11, rx2508_pos, 1
    gt $I11, rx2508_eos, rx2508_fail
    sub $I11, rx2508_pos, rx2508_off
    ord $I11, rx2508_tgt, $I11
    ne $I11, 44, rx2508_fail
    add rx2508_pos, 1
    set_addr $I10, rxcap_2510_fail
    ($I12, $I11) = rx2508_cur."!mark_peek"($I10)
    rx2508_cur."!cursor_pos"($I11)
    ($P10) = rx2508_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2508_pos, "")
    rx2508_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2510_done
  rxcap_2510_fail:
    goto rx2508_fail
  rxcap_2510_done:
  # rx subrule "O" subtype=capture negate=
    rx2508_cur."!cursor_pos"(rx2508_pos)
    $P10 = rx2508_cur."O"("%comma, :pasttype<list>")
    unless $P10, rx2508_fail
    rx2508_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2508_pos = $P10."pos"()
  # rx pass
    rx2508_cur."!cursor_pass"(rx2508_pos, "infix:sym<,>")
    if_null rx2508_debug, debug_1842
    rx2508_cur."!cursor_debug"("PASS", "infix:sym<,>", " at pos=", rx2508_pos)
  debug_1842:
    .return (rx2508_cur)
  rx2508_restart:
    if_null rx2508_debug, debug_1843
    rx2508_cur."!cursor_debug"("NEXT", "infix:sym<,>")
  debug_1843:
  rx2508_fail:
    (rx2508_rep, rx2508_pos, $I10, $P10) = rx2508_cur."!mark_fail"(0)
    lt rx2508_pos, -1, rx2508_done
    eq rx2508_pos, -1, rx2508_fail
    jump $I10
  rx2508_done:
    rx2508_cur."!cursor_fail"()
    if_null rx2508_debug, debug_1844
    rx2508_cur."!cursor_debug"("FAIL", "infix:sym<,>")
  debug_1844:
    .return (rx2508_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<,>"  :subid("394_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1356
    $P103 = self."!PREFIX__!subrule"("O", ",")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<return>"  :subid("395_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1358
    .const 'Sub' $P2517 = "585_1335114138.94729" 
    capture_lex $P2517
    .local string rx2513_tgt
    .local int rx2513_pos
    .local int rx2513_off
    .local int rx2513_eos
    .local int rx2513_rep
    .local pmc rx2513_cur
    .local pmc rx2513_debug
    (rx2513_cur, rx2513_pos, rx2513_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2513_cur
    .local pmc match
    .lex "$/", match
    length rx2513_eos, rx2513_tgt
    gt rx2513_pos, rx2513_eos, rx2513_done
    set rx2513_off, 0
    lt rx2513_pos, 2, rx2513_start
    sub rx2513_off, rx2513_pos, 1
    substr rx2513_tgt, rx2513_tgt, rx2513_off
  rx2513_start:
    eq $I10, 1, rx2513_restart
    if_null rx2513_debug, debug_1845
    rx2513_cur."!cursor_debug"("START", "prefix:sym<return>")
  debug_1845:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2514_done
    goto rxscan2514_scan
  rxscan2514_loop:
    (rx2513_pos) = rx2513_cur."from"()
    inc rx2513_pos
    rx2513_cur."!cursor_from"(rx2513_pos)
    ge rx2513_pos, rx2513_eos, rxscan2514_done
  rxscan2514_scan:
    set_addr $I10, rxscan2514_loop
    rx2513_cur."!mark_push"(0, rx2513_pos, $I10)
  rxscan2514_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2515_fail
    rx2513_cur."!mark_push"(0, rx2513_pos, $I10)
  # rx literal  "return"
    add $I11, rx2513_pos, 6
    gt $I11, rx2513_eos, rx2513_fail
    sub $I11, rx2513_pos, rx2513_off
    substr $S10, rx2513_tgt, $I11, 6
    ne $S10, "return", rx2513_fail
    add rx2513_pos, 6
    set_addr $I10, rxcap_2515_fail
    ($I12, $I11) = rx2513_cur."!mark_peek"($I10)
    rx2513_cur."!cursor_pos"($I11)
    ($P10) = rx2513_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2513_pos, "")
    rx2513_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2515_done
  rxcap_2515_fail:
    goto rx2513_fail
  rxcap_2515_done:
  # rx charclass s
    ge rx2513_pos, rx2513_eos, rx2513_fail
    sub $I10, rx2513_pos, rx2513_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx2513_tgt, $I10
    unless $I11, rx2513_fail
    inc rx2513_pos
  # rx subrule "O" subtype=capture negate=
    rx2513_cur."!cursor_pos"(rx2513_pos)
    $P10 = rx2513_cur."O"("%list_prefix, :pasttype<return>")
    unless $P10, rx2513_fail
    rx2513_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2513_pos = $P10."pos"()
    rx2513_cur."!cursor_pos"(rx2513_pos)
    find_lex $P103, unicode:"$\x{a2}"
    $P104 = $P103."MATCH"()
    store_lex "$/", $P104
    .const 'Sub' $P2517 = "585_1335114138.94729" 
    capture_lex $P2517
    $P106 = $P2517()
  # rx pass
    rx2513_cur."!cursor_pass"(rx2513_pos, "prefix:sym<return>")
    if_null rx2513_debug, debug_1846
    rx2513_cur."!cursor_debug"("PASS", "prefix:sym<return>", " at pos=", rx2513_pos)
  debug_1846:
    .return (rx2513_cur)
  rx2513_restart:
    if_null rx2513_debug, debug_1847
    rx2513_cur."!cursor_debug"("NEXT", "prefix:sym<return>")
  debug_1847:
  rx2513_fail:
    (rx2513_rep, rx2513_pos, $I10, $P10) = rx2513_cur."!mark_fail"(0)
    lt rx2513_pos, -1, rx2513_done
    eq rx2513_pos, -1, rx2513_fail
    jump $I10
  rx2513_done:
    rx2513_cur."!cursor_fail"()
    if_null rx2513_debug, debug_1848
    rx2513_cur."!cursor_debug"("FAIL", "prefix:sym<return>")
  debug_1848:
    .return (rx2513_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2516"  :anon :subid("585_1335114138.94729") :outer("395_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1358
    new $P105, "Float"
    assign $P105, 1
    store_dynamic_lex "$*RETURN_USED", $P105
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<return>"  :subid("396_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1358
    new $P107, "ResizablePMCArray"
    push $P107, "return"
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<make>"  :subid("397_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1359
    .local string rx2520_tgt
    .local int rx2520_pos
    .local int rx2520_off
    .local int rx2520_eos
    .local int rx2520_rep
    .local pmc rx2520_cur
    .local pmc rx2520_debug
    (rx2520_cur, rx2520_pos, rx2520_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2520_cur
    .local pmc match
    .lex "$/", match
    length rx2520_eos, rx2520_tgt
    gt rx2520_pos, rx2520_eos, rx2520_done
    set rx2520_off, 0
    lt rx2520_pos, 2, rx2520_start
    sub rx2520_off, rx2520_pos, 1
    substr rx2520_tgt, rx2520_tgt, rx2520_off
  rx2520_start:
    eq $I10, 1, rx2520_restart
    if_null rx2520_debug, debug_1849
    rx2520_cur."!cursor_debug"("START", "prefix:sym<make>")
  debug_1849:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2521_done
    goto rxscan2521_scan
  rxscan2521_loop:
    (rx2520_pos) = rx2520_cur."from"()
    inc rx2520_pos
    rx2520_cur."!cursor_from"(rx2520_pos)
    ge rx2520_pos, rx2520_eos, rxscan2521_done
  rxscan2521_scan:
    set_addr $I10, rxscan2521_loop
    rx2520_cur."!mark_push"(0, rx2520_pos, $I10)
  rxscan2521_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2522_fail
    rx2520_cur."!mark_push"(0, rx2520_pos, $I10)
  # rx literal  "make"
    add $I11, rx2520_pos, 4
    gt $I11, rx2520_eos, rx2520_fail
    sub $I11, rx2520_pos, rx2520_off
    substr $S10, rx2520_tgt, $I11, 4
    ne $S10, "make", rx2520_fail
    add rx2520_pos, 4
    set_addr $I10, rxcap_2522_fail
    ($I12, $I11) = rx2520_cur."!mark_peek"($I10)
    rx2520_cur."!cursor_pos"($I11)
    ($P10) = rx2520_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2520_pos, "")
    rx2520_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2522_done
  rxcap_2522_fail:
    goto rx2520_fail
  rxcap_2522_done:
  # rx charclass s
    ge rx2520_pos, rx2520_eos, rx2520_fail
    sub $I10, rx2520_pos, rx2520_off
    is_cclass $I11, .CCLASS_WHITESPACE, rx2520_tgt, $I10
    unless $I11, rx2520_fail
    inc rx2520_pos
  # rx subrule "O" subtype=capture negate=
    rx2520_cur."!cursor_pos"(rx2520_pos)
    $P10 = rx2520_cur."O"("%list_prefix")
    unless $P10, rx2520_fail
    rx2520_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2520_pos = $P10."pos"()
  # rx pass
    rx2520_cur."!cursor_pass"(rx2520_pos, "prefix:sym<make>")
    if_null rx2520_debug, debug_1850
    rx2520_cur."!cursor_debug"("PASS", "prefix:sym<make>", " at pos=", rx2520_pos)
  debug_1850:
    .return (rx2520_cur)
  rx2520_restart:
    if_null rx2520_debug, debug_1851
    rx2520_cur."!cursor_debug"("NEXT", "prefix:sym<make>")
  debug_1851:
  rx2520_fail:
    (rx2520_rep, rx2520_pos, $I10, $P10) = rx2520_cur."!mark_fail"(0)
    lt rx2520_pos, -1, rx2520_done
    eq rx2520_pos, -1, rx2520_fail
    jump $I10
  rx2520_done:
    rx2520_cur."!cursor_fail"()
    if_null rx2520_debug, debug_1852
    rx2520_cur."!cursor_debug"("FAIL", "prefix:sym<make>")
  debug_1852:
    .return (rx2520_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<make>"  :subid("398_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1359
    new $P103, "ResizablePMCArray"
    push $P103, "make"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<last>"  :subid("399_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1360
    .local string rx2525_tgt
    .local int rx2525_pos
    .local int rx2525_off
    .local int rx2525_eos
    .local int rx2525_rep
    .local pmc rx2525_cur
    .local pmc rx2525_debug
    (rx2525_cur, rx2525_pos, rx2525_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2525_cur
    .local pmc match
    .lex "$/", match
    length rx2525_eos, rx2525_tgt
    gt rx2525_pos, rx2525_eos, rx2525_done
    set rx2525_off, 0
    lt rx2525_pos, 2, rx2525_start
    sub rx2525_off, rx2525_pos, 1
    substr rx2525_tgt, rx2525_tgt, rx2525_off
  rx2525_start:
    eq $I10, 1, rx2525_restart
    if_null rx2525_debug, debug_1853
    rx2525_cur."!cursor_debug"("START", "term:sym<last>")
  debug_1853:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2526_done
    goto rxscan2526_scan
  rxscan2526_loop:
    (rx2525_pos) = rx2525_cur."from"()
    inc rx2525_pos
    rx2525_cur."!cursor_from"(rx2525_pos)
    ge rx2525_pos, rx2525_eos, rxscan2526_done
  rxscan2526_scan:
    set_addr $I10, rxscan2526_loop
    rx2525_cur."!mark_push"(0, rx2525_pos, $I10)
  rxscan2526_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2527_fail
    rx2525_cur."!mark_push"(0, rx2525_pos, $I10)
  # rx literal  "last"
    add $I11, rx2525_pos, 4
    gt $I11, rx2525_eos, rx2525_fail
    sub $I11, rx2525_pos, rx2525_off
    substr $S10, rx2525_tgt, $I11, 4
    ne $S10, "last", rx2525_fail
    add rx2525_pos, 4
    set_addr $I10, rxcap_2527_fail
    ($I12, $I11) = rx2525_cur."!mark_peek"($I10)
    rx2525_cur."!cursor_pos"($I11)
    ($P10) = rx2525_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2525_pos, "")
    rx2525_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2527_done
  rxcap_2527_fail:
    goto rx2525_fail
  rxcap_2527_done:
  # rx pass
    rx2525_cur."!cursor_pass"(rx2525_pos, "term:sym<last>")
    if_null rx2525_debug, debug_1854
    rx2525_cur."!cursor_debug"("PASS", "term:sym<last>", " at pos=", rx2525_pos)
  debug_1854:
    .return (rx2525_cur)
  rx2525_restart:
    if_null rx2525_debug, debug_1855
    rx2525_cur."!cursor_debug"("NEXT", "term:sym<last>")
  debug_1855:
  rx2525_fail:
    (rx2525_rep, rx2525_pos, $I10, $P10) = rx2525_cur."!mark_fail"(0)
    lt rx2525_pos, -1, rx2525_done
    eq rx2525_pos, -1, rx2525_fail
    jump $I10
  rx2525_done:
    rx2525_cur."!cursor_fail"()
    if_null rx2525_debug, debug_1856
    rx2525_cur."!cursor_debug"("FAIL", "term:sym<last>")
  debug_1856:
    .return (rx2525_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<last>"  :subid("400_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1360
    new $P103, "ResizablePMCArray"
    push $P103, "last"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<next>"  :subid("401_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1361
    .local string rx2530_tgt
    .local int rx2530_pos
    .local int rx2530_off
    .local int rx2530_eos
    .local int rx2530_rep
    .local pmc rx2530_cur
    .local pmc rx2530_debug
    (rx2530_cur, rx2530_pos, rx2530_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2530_cur
    .local pmc match
    .lex "$/", match
    length rx2530_eos, rx2530_tgt
    gt rx2530_pos, rx2530_eos, rx2530_done
    set rx2530_off, 0
    lt rx2530_pos, 2, rx2530_start
    sub rx2530_off, rx2530_pos, 1
    substr rx2530_tgt, rx2530_tgt, rx2530_off
  rx2530_start:
    eq $I10, 1, rx2530_restart
    if_null rx2530_debug, debug_1857
    rx2530_cur."!cursor_debug"("START", "term:sym<next>")
  debug_1857:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2531_done
    goto rxscan2531_scan
  rxscan2531_loop:
    (rx2530_pos) = rx2530_cur."from"()
    inc rx2530_pos
    rx2530_cur."!cursor_from"(rx2530_pos)
    ge rx2530_pos, rx2530_eos, rxscan2531_done
  rxscan2531_scan:
    set_addr $I10, rxscan2531_loop
    rx2530_cur."!mark_push"(0, rx2530_pos, $I10)
  rxscan2531_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2532_fail
    rx2530_cur."!mark_push"(0, rx2530_pos, $I10)
  # rx literal  "next"
    add $I11, rx2530_pos, 4
    gt $I11, rx2530_eos, rx2530_fail
    sub $I11, rx2530_pos, rx2530_off
    substr $S10, rx2530_tgt, $I11, 4
    ne $S10, "next", rx2530_fail
    add rx2530_pos, 4
    set_addr $I10, rxcap_2532_fail
    ($I12, $I11) = rx2530_cur."!mark_peek"($I10)
    rx2530_cur."!cursor_pos"($I11)
    ($P10) = rx2530_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2530_pos, "")
    rx2530_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2532_done
  rxcap_2532_fail:
    goto rx2530_fail
  rxcap_2532_done:
  # rx pass
    rx2530_cur."!cursor_pass"(rx2530_pos, "term:sym<next>")
    if_null rx2530_debug, debug_1858
    rx2530_cur."!cursor_debug"("PASS", "term:sym<next>", " at pos=", rx2530_pos)
  debug_1858:
    .return (rx2530_cur)
  rx2530_restart:
    if_null rx2530_debug, debug_1859
    rx2530_cur."!cursor_debug"("NEXT", "term:sym<next>")
  debug_1859:
  rx2530_fail:
    (rx2530_rep, rx2530_pos, $I10, $P10) = rx2530_cur."!mark_fail"(0)
    lt rx2530_pos, -1, rx2530_done
    eq rx2530_pos, -1, rx2530_fail
    jump $I10
  rx2530_done:
    rx2530_cur."!cursor_fail"()
    if_null rx2530_debug, debug_1860
    rx2530_cur."!cursor_debug"("FAIL", "term:sym<next>")
  debug_1860:
    .return (rx2530_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<next>"  :subid("402_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1361
    new $P103, "ResizablePMCArray"
    push $P103, "next"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<redo>"  :subid("403_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1362
    .local string rx2535_tgt
    .local int rx2535_pos
    .local int rx2535_off
    .local int rx2535_eos
    .local int rx2535_rep
    .local pmc rx2535_cur
    .local pmc rx2535_debug
    (rx2535_cur, rx2535_pos, rx2535_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2535_cur
    .local pmc match
    .lex "$/", match
    length rx2535_eos, rx2535_tgt
    gt rx2535_pos, rx2535_eos, rx2535_done
    set rx2535_off, 0
    lt rx2535_pos, 2, rx2535_start
    sub rx2535_off, rx2535_pos, 1
    substr rx2535_tgt, rx2535_tgt, rx2535_off
  rx2535_start:
    eq $I10, 1, rx2535_restart
    if_null rx2535_debug, debug_1861
    rx2535_cur."!cursor_debug"("START", "term:sym<redo>")
  debug_1861:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2536_done
    goto rxscan2536_scan
  rxscan2536_loop:
    (rx2535_pos) = rx2535_cur."from"()
    inc rx2535_pos
    rx2535_cur."!cursor_from"(rx2535_pos)
    ge rx2535_pos, rx2535_eos, rxscan2536_done
  rxscan2536_scan:
    set_addr $I10, rxscan2536_loop
    rx2535_cur."!mark_push"(0, rx2535_pos, $I10)
  rxscan2536_done:
  # rx subcapture "sym"
    set_addr $I10, rxcap_2537_fail
    rx2535_cur."!mark_push"(0, rx2535_pos, $I10)
  # rx literal  "redo"
    add $I11, rx2535_pos, 4
    gt $I11, rx2535_eos, rx2535_fail
    sub $I11, rx2535_pos, rx2535_off
    substr $S10, rx2535_tgt, $I11, 4
    ne $S10, "redo", rx2535_fail
    add rx2535_pos, 4
    set_addr $I10, rxcap_2537_fail
    ($I12, $I11) = rx2535_cur."!mark_peek"($I10)
    rx2535_cur."!cursor_pos"($I11)
    ($P10) = rx2535_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2535_pos, "")
    rx2535_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2537_done
  rxcap_2537_fail:
    goto rx2535_fail
  rxcap_2537_done:
  # rx pass
    rx2535_cur."!cursor_pass"(rx2535_pos, "term:sym<redo>")
    if_null rx2535_debug, debug_1862
    rx2535_cur."!cursor_debug"("PASS", "term:sym<redo>", " at pos=", rx2535_pos)
  debug_1862:
    .return (rx2535_cur)
  rx2535_restart:
    if_null rx2535_debug, debug_1863
    rx2535_cur."!cursor_debug"("NEXT", "term:sym<redo>")
  debug_1863:
  rx2535_fail:
    (rx2535_rep, rx2535_pos, $I10, $P10) = rx2535_cur."!mark_fail"(0)
    lt rx2535_pos, -1, rx2535_done
    eq rx2535_pos, -1, rx2535_fail
    jump $I10
  rx2535_done:
    rx2535_cur."!cursor_fail"()
    if_null rx2535_debug, debug_1864
    rx2535_cur."!cursor_debug"("FAIL", "term:sym<redo>")
  debug_1864:
    .return (rx2535_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<redo>"  :subid("404_1335114138.94729") :method :outer("571_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1362
    new $P103, "ResizablePMCArray"
    push $P103, "redo"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "smartmatch" :anon :subid("405_1335114138.94729") :outer("571_1335114138.94729")
    .param pmc param_2540
    .param pmc param_2541
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1364
    .lex "self", param_2540
    .lex "$/", param_2541
.annotate 'line', 1366
    new $P103, "Undef"
    set $P2542, $P103
    .lex "$t", $P2542
    new $P104, "Float"
    assign $P104, 0
    set $I100, $P104
    set $P2543, param_2541
    unless_null $P2543, vivify_1865
    $P2543 = root_new ['parrot';'ResizablePMCArray']
  vivify_1865:
    set $P105, $P2543[$I100]
    unless_null $P105, vivify_1866
    new $P105, "Undef"
  vivify_1866:
    set $P2542, $P105
    new $P104, "Float"
    assign $P104, 1
    set $I100, $P104
    set $P2544, param_2541
    unless_null $P2544, vivify_1867
    $P2544 = root_new ['parrot';'ResizablePMCArray']
  vivify_1867:
    set $P105, $P2544[$I100]
    unless_null $P105, vivify_1868
    new $P105, "Undef"
  vivify_1868:
    new $P106, "Float"
    assign $P106, 0
    set $I101, $P106
    set $P2545, param_2541
    unless_null $P2545, vivify_1869
    $P2545 = root_new ['parrot';'ResizablePMCArray']
    set param_2541, $P2545
  vivify_1869:
    set $P2545[$I101], $P105
    set $P104, $P2542
    unless_null $P104, vivify_1870
    new $P104, "Undef"
  vivify_1870:
    new $P105, "Float"
    assign $P105, 1
    set $I100, $P105
    set $P2546, param_2541
    unless_null $P2546, vivify_1871
    $P2546 = root_new ['parrot';'ResizablePMCArray']
    set param_2541, $P2546
  vivify_1871:
    set $P2546[$I100], $P104
.annotate 'line', 1364
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2548"  :subid("586_1335114138.94729") :outer("542_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1370
    .const 'Sub' $P2602 = "421_1335114138.94729" 
    capture_lex $P2602
    .const 'Sub' $P2599 = "420_1335114138.94729" 
    capture_lex $P2599
    .const 'Sub' $P2598 = "419_1335114138.94729" 
    capture_lex $P2598
    .const 'Sub' $P2595 = "418_1335114138.94729" 
    capture_lex $P2595
    .const 'Sub' $P2594 = "417_1335114138.94729" 
    capture_lex $P2594
    .const 'Sub' $P2585 = "416_1335114138.94729" 
    capture_lex $P2585
    .const 'Sub' $P2584 = "415_1335114138.94729" 
    capture_lex $P2584
    .const 'Sub' $P2576 = "414_1335114138.94729" 
    capture_lex $P2576
    .const 'Sub' $P2575 = "413_1335114138.94729" 
    capture_lex $P2575
    .const 'Sub' $P2572 = "412_1335114138.94729" 
    capture_lex $P2572
    .const 'Sub' $P2571 = "411_1335114138.94729" 
    capture_lex $P2571
    .const 'Sub' $P2564 = "410_1335114138.94729" 
    capture_lex $P2564
    .const 'Sub' $P2563 = "409_1335114138.94729" 
    capture_lex $P2563
    .const 'Sub' $P2560 = "408_1335114138.94729" 
    capture_lex $P2560
    .const 'Sub' $P2559 = "407_1335114138.94729" 
    capture_lex $P2559
    .const 'Sub' $P2552 = "406_1335114138.94729" 
    capture_lex $P2552
    .lex "$?PACKAGE", $P2550
    .lex "$?CLASS", $P2551
.annotate 'line', 1406
    .const 'Sub' $P2602 = "421_1335114138.94729" 
    capture_lex $P2602
.annotate 'line', 1370
    .return ($P2602)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<:my>"  :subid("406_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1371
    .const 'Sub' $P2556 = "587_1335114138.94729" 
    capture_lex $P2556
    .local string rx2553_tgt
    .local int rx2553_pos
    .local int rx2553_off
    .local int rx2553_eos
    .local int rx2553_rep
    .local pmc rx2553_cur
    .local pmc rx2553_debug
    (rx2553_cur, rx2553_pos, rx2553_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2553_cur
    .local pmc match
    .lex "$/", match
    length rx2553_eos, rx2553_tgt
    gt rx2553_pos, rx2553_eos, rx2553_done
    set rx2553_off, 0
    lt rx2553_pos, 2, rx2553_start
    sub rx2553_off, rx2553_pos, 1
    substr rx2553_tgt, rx2553_tgt, rx2553_off
  rx2553_start:
    eq $I10, 1, rx2553_restart
    if_null rx2553_debug, debug_1872
    rx2553_cur."!cursor_debug"("START", "metachar:sym<:my>")
  debug_1872:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2554_done
    goto rxscan2554_scan
  rxscan2554_loop:
    (rx2553_pos) = rx2553_cur."from"()
    inc rx2553_pos
    rx2553_cur."!cursor_from"(rx2553_pos)
    ge rx2553_pos, rx2553_eos, rxscan2554_done
  rxscan2554_scan:
    set_addr $I10, rxscan2554_loop
    rx2553_cur."!mark_push"(0, rx2553_pos, $I10)
  rxscan2554_done:
.annotate 'line', 1372
  # rx literal  ":"
    add $I11, rx2553_pos, 1
    gt $I11, rx2553_eos, rx2553_fail
    sub $I11, rx2553_pos, rx2553_off
    ord $I11, rx2553_tgt, $I11
    ne $I11, 58, rx2553_fail
    add rx2553_pos, 1
  # rx subrule "before" subtype=zerowidth negate=
    rx2553_cur."!cursor_pos"(rx2553_pos)
    .const 'Sub' $P2556 = "587_1335114138.94729" 
    capture_lex $P2556
    $P10 = rx2553_cur."before"($P2556)
    unless $P10, rx2553_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2553_cur."!cursor_pos"(rx2553_pos)
    $P10 = rx2553_cur."LANG"("MAIN", "statement")
    unless $P10, rx2553_fail
    rx2553_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx2553_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2553_cur."!cursor_pos"(rx2553_pos)
    $P10 = rx2553_cur."ws"()
    unless $P10, rx2553_fail
    rx2553_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx2553_pos, 1
    gt $I11, rx2553_eos, rx2553_fail
    sub $I11, rx2553_pos, rx2553_off
    ord $I11, rx2553_tgt, $I11
    ne $I11, 59, rx2553_fail
    add rx2553_pos, 1
.annotate 'line', 1371
  # rx pass
    rx2553_cur."!cursor_pass"(rx2553_pos, "metachar:sym<:my>")
    if_null rx2553_debug, debug_1877
    rx2553_cur."!cursor_debug"("PASS", "metachar:sym<:my>", " at pos=", rx2553_pos)
  debug_1877:
    .return (rx2553_cur)
  rx2553_restart:
    if_null rx2553_debug, debug_1878
    rx2553_cur."!cursor_debug"("NEXT", "metachar:sym<:my>")
  debug_1878:
  rx2553_fail:
    (rx2553_rep, rx2553_pos, $I10, $P10) = rx2553_cur."!mark_fail"(0)
    lt rx2553_pos, -1, rx2553_done
    eq rx2553_pos, -1, rx2553_fail
    jump $I10
  rx2553_done:
    rx2553_cur."!cursor_fail"()
    if_null rx2553_debug, debug_1879
    rx2553_cur."!cursor_debug"("FAIL", "metachar:sym<:my>")
  debug_1879:
    .return (rx2553_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2555"  :anon :subid("587_1335114138.94729") :method :outer("406_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1372
    .local string rx2557_tgt
    .local int rx2557_pos
    .local int rx2557_off
    .local int rx2557_eos
    .local int rx2557_rep
    .local pmc rx2557_cur
    .local pmc rx2557_debug
    (rx2557_cur, rx2557_pos, rx2557_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2557_cur
    .local pmc match
    .lex "$/", match
    length rx2557_eos, rx2557_tgt
    gt rx2557_pos, rx2557_eos, rx2557_done
    set rx2557_off, 0
    lt rx2557_pos, 2, rx2557_start
    sub rx2557_off, rx2557_pos, 1
    substr rx2557_tgt, rx2557_tgt, rx2557_off
  rx2557_start:
    eq $I10, 1, rx2557_restart
    if_null rx2557_debug, debug_1873
    rx2557_cur."!cursor_debug"("START", "")
  debug_1873:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2558_done
    goto rxscan2558_scan
  rxscan2558_loop:
    (rx2557_pos) = rx2557_cur."from"()
    inc rx2557_pos
    rx2557_cur."!cursor_from"(rx2557_pos)
    ge rx2557_pos, rx2557_eos, rxscan2558_done
  rxscan2558_scan:
    set_addr $I10, rxscan2558_loop
    rx2557_cur."!mark_push"(0, rx2557_pos, $I10)
  rxscan2558_done:
  # rx literal  "my"
    add $I11, rx2557_pos, 2
    gt $I11, rx2557_eos, rx2557_fail
    sub $I11, rx2557_pos, rx2557_off
    substr $S10, rx2557_tgt, $I11, 2
    ne $S10, "my", rx2557_fail
    add rx2557_pos, 2
  # rx pass
    rx2557_cur."!cursor_pass"(rx2557_pos, "")
    if_null rx2557_debug, debug_1874
    rx2557_cur."!cursor_debug"("PASS", "", " at pos=", rx2557_pos)
  debug_1874:
    .return (rx2557_cur)
  rx2557_restart:
    if_null rx2557_debug, debug_1875
    rx2557_cur."!cursor_debug"("NEXT", "")
  debug_1875:
  rx2557_fail:
    (rx2557_rep, rx2557_pos, $I10, $P10) = rx2557_cur."!mark_fail"(0)
    lt rx2557_pos, -1, rx2557_done
    eq rx2557_pos, -1, rx2557_fail
    jump $I10
  rx2557_done:
    rx2557_cur."!cursor_fail"()
    if_null rx2557_debug, debug_1876
    rx2557_cur."!cursor_debug"("FAIL", "")
  debug_1876:
    .return (rx2557_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<:my>"  :subid("407_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1371
    new $P103, "ResizablePMCArray"
    push $P103, ":"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<{ }>"  :subid("408_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1375
    .local string rx2561_tgt
    .local int rx2561_pos
    .local int rx2561_off
    .local int rx2561_eos
    .local int rx2561_rep
    .local pmc rx2561_cur
    .local pmc rx2561_debug
    (rx2561_cur, rx2561_pos, rx2561_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2561_cur
    .local pmc match
    .lex "$/", match
    length rx2561_eos, rx2561_tgt
    gt rx2561_pos, rx2561_eos, rx2561_done
    set rx2561_off, 0
    lt rx2561_pos, 2, rx2561_start
    sub rx2561_off, rx2561_pos, 1
    substr rx2561_tgt, rx2561_tgt, rx2561_off
  rx2561_start:
    eq $I10, 1, rx2561_restart
    if_null rx2561_debug, debug_1880
    rx2561_cur."!cursor_debug"("START", "metachar:sym<{ }>")
  debug_1880:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2562_done
    goto rxscan2562_scan
  rxscan2562_loop:
    (rx2561_pos) = rx2561_cur."from"()
    inc rx2561_pos
    rx2561_cur."!cursor_from"(rx2561_pos)
    ge rx2561_pos, rx2561_eos, rxscan2562_done
  rxscan2562_scan:
    set_addr $I10, rxscan2562_loop
    rx2561_cur."!mark_push"(0, rx2561_pos, $I10)
  rxscan2562_done:
.annotate 'line', 1376
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2561_pos, rx2561_off
    substr $S10, rx2561_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2561_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2561_cur."!cursor_pos"(rx2561_pos)
    $P10 = rx2561_cur."codeblock"()
    unless $P10, rx2561_fail
    rx2561_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2561_pos = $P10."pos"()
.annotate 'line', 1375
  # rx pass
    rx2561_cur."!cursor_pass"(rx2561_pos, "metachar:sym<{ }>")
    if_null rx2561_debug, debug_1881
    rx2561_cur."!cursor_debug"("PASS", "metachar:sym<{ }>", " at pos=", rx2561_pos)
  debug_1881:
    .return (rx2561_cur)
  rx2561_restart:
    if_null rx2561_debug, debug_1882
    rx2561_cur."!cursor_debug"("NEXT", "metachar:sym<{ }>")
  debug_1882:
  rx2561_fail:
    (rx2561_rep, rx2561_pos, $I10, $P10) = rx2561_cur."!mark_fail"(0)
    lt rx2561_pos, -1, rx2561_done
    eq rx2561_pos, -1, rx2561_fail
    jump $I10
  rx2561_done:
    rx2561_cur."!cursor_fail"()
    if_null rx2561_debug, debug_1883
    rx2561_cur."!cursor_debug"("FAIL", "metachar:sym<{ }>")
  debug_1883:
    .return (rx2561_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<{ }>"  :subid("409_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1375
    new $P103, "ResizablePMCArray"
    push $P103, "{"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<nqpvar>"  :subid("410_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1379
    .const 'Sub' $P2568 = "588_1335114138.94729" 
    capture_lex $P2568
    .local string rx2565_tgt
    .local int rx2565_pos
    .local int rx2565_off
    .local int rx2565_eos
    .local int rx2565_rep
    .local pmc rx2565_cur
    .local pmc rx2565_debug
    (rx2565_cur, rx2565_pos, rx2565_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2565_cur
    .local pmc match
    .lex "$/", match
    length rx2565_eos, rx2565_tgt
    gt rx2565_pos, rx2565_eos, rx2565_done
    set rx2565_off, 0
    lt rx2565_pos, 2, rx2565_start
    sub rx2565_off, rx2565_pos, 1
    substr rx2565_tgt, rx2565_tgt, rx2565_off
  rx2565_start:
    eq $I10, 1, rx2565_restart
    if_null rx2565_debug, debug_1884
    rx2565_cur."!cursor_debug"("START", "metachar:sym<nqpvar>")
  debug_1884:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2566_done
    goto rxscan2566_scan
  rxscan2566_loop:
    (rx2565_pos) = rx2565_cur."from"()
    inc rx2565_pos
    rx2565_cur."!cursor_from"(rx2565_pos)
    ge rx2565_pos, rx2565_eos, rxscan2566_done
  rxscan2566_scan:
    set_addr $I10, rxscan2566_loop
    rx2565_cur."!mark_push"(0, rx2565_pos, $I10)
  rxscan2566_done:
.annotate 'line', 1380
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2565_pos, rx2565_off
    substr $S10, rx2565_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2565_fail
  # rx subrule "before" subtype=zerowidth negate=
    rx2565_cur."!cursor_pos"(rx2565_pos)
    .const 'Sub' $P2568 = "588_1335114138.94729" 
    capture_lex $P2568
    $P10 = rx2565_cur."before"($P2568)
    unless $P10, rx2565_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2565_cur."!cursor_pos"(rx2565_pos)
    $P10 = rx2565_cur."LANG"("MAIN", "variable")
    unless $P10, rx2565_fail
    rx2565_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2565_pos = $P10."pos"()
.annotate 'line', 1379
  # rx pass
    rx2565_cur."!cursor_pass"(rx2565_pos, "metachar:sym<nqpvar>")
    if_null rx2565_debug, debug_1889
    rx2565_cur."!cursor_debug"("PASS", "metachar:sym<nqpvar>", " at pos=", rx2565_pos)
  debug_1889:
    .return (rx2565_cur)
  rx2565_restart:
    if_null rx2565_debug, debug_1890
    rx2565_cur."!cursor_debug"("NEXT", "metachar:sym<nqpvar>")
  debug_1890:
  rx2565_fail:
    (rx2565_rep, rx2565_pos, $I10, $P10) = rx2565_cur."!mark_fail"(0)
    lt rx2565_pos, -1, rx2565_done
    eq rx2565_pos, -1, rx2565_fail
    jump $I10
  rx2565_done:
    rx2565_cur."!cursor_fail"()
    if_null rx2565_debug, debug_1891
    rx2565_cur."!cursor_debug"("FAIL", "metachar:sym<nqpvar>")
  debug_1891:
    .return (rx2565_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2567"  :anon :subid("588_1335114138.94729") :method :outer("410_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1380
    .local string rx2569_tgt
    .local int rx2569_pos
    .local int rx2569_off
    .local int rx2569_eos
    .local int rx2569_rep
    .local pmc rx2569_cur
    .local pmc rx2569_debug
    (rx2569_cur, rx2569_pos, rx2569_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2569_cur
    .local pmc match
    .lex "$/", match
    length rx2569_eos, rx2569_tgt
    gt rx2569_pos, rx2569_eos, rx2569_done
    set rx2569_off, 0
    lt rx2569_pos, 2, rx2569_start
    sub rx2569_off, rx2569_pos, 1
    substr rx2569_tgt, rx2569_tgt, rx2569_off
  rx2569_start:
    eq $I10, 1, rx2569_restart
    if_null rx2569_debug, debug_1885
    rx2569_cur."!cursor_debug"("START", "")
  debug_1885:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2570_done
    goto rxscan2570_scan
  rxscan2570_loop:
    (rx2569_pos) = rx2569_cur."from"()
    inc rx2569_pos
    rx2569_cur."!cursor_from"(rx2569_pos)
    ge rx2569_pos, rx2569_eos, rxscan2570_done
  rxscan2570_scan:
    set_addr $I10, rxscan2570_loop
    rx2569_cur."!mark_push"(0, rx2569_pos, $I10)
  rxscan2570_done:
  # rx charclass .
    ge rx2569_pos, rx2569_eos, rx2569_fail
    inc rx2569_pos
  # rx charclass w
    ge rx2569_pos, rx2569_eos, rx2569_fail
    sub $I10, rx2569_pos, rx2569_off
    is_cclass $I11, .CCLASS_WORD, rx2569_tgt, $I10
    unless $I11, rx2569_fail
    inc rx2569_pos
  # rx pass
    rx2569_cur."!cursor_pass"(rx2569_pos, "")
    if_null rx2569_debug, debug_1886
    rx2569_cur."!cursor_debug"("PASS", "", " at pos=", rx2569_pos)
  debug_1886:
    .return (rx2569_cur)
  rx2569_restart:
    if_null rx2569_debug, debug_1887
    rx2569_cur."!cursor_debug"("NEXT", "")
  debug_1887:
  rx2569_fail:
    (rx2569_rep, rx2569_pos, $I10, $P10) = rx2569_cur."!mark_fail"(0)
    lt rx2569_pos, -1, rx2569_done
    eq rx2569_pos, -1, rx2569_fail
    jump $I10
  rx2569_done:
    rx2569_cur."!cursor_fail"()
    if_null rx2569_debug, debug_1888
    rx2569_cur."!cursor_debug"("FAIL", "")
  debug_1888:
    .return (rx2569_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<nqpvar>"  :subid("411_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1379
    new $P103, "ResizablePMCArray"
    push $P103, "$"
    push $P103, "@"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<{ }>"  :subid("412_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1383
    .local string rx2573_tgt
    .local int rx2573_pos
    .local int rx2573_off
    .local int rx2573_eos
    .local int rx2573_rep
    .local pmc rx2573_cur
    .local pmc rx2573_debug
    (rx2573_cur, rx2573_pos, rx2573_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2573_cur
    .local pmc match
    .lex "$/", match
    length rx2573_eos, rx2573_tgt
    gt rx2573_pos, rx2573_eos, rx2573_done
    set rx2573_off, 0
    lt rx2573_pos, 2, rx2573_start
    sub rx2573_off, rx2573_pos, 1
    substr rx2573_tgt, rx2573_tgt, rx2573_off
  rx2573_start:
    eq $I10, 1, rx2573_restart
    if_null rx2573_debug, debug_1892
    rx2573_cur."!cursor_debug"("START", "assertion:sym<{ }>")
  debug_1892:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2574_done
    goto rxscan2574_scan
  rxscan2574_loop:
    (rx2573_pos) = rx2573_cur."from"()
    inc rx2573_pos
    rx2573_cur."!cursor_from"(rx2573_pos)
    ge rx2573_pos, rx2573_eos, rxscan2574_done
  rxscan2574_scan:
    set_addr $I10, rxscan2574_loop
    rx2573_cur."!mark_push"(0, rx2573_pos, $I10)
  rxscan2574_done:
.annotate 'line', 1384
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2573_pos, rx2573_off
    substr $S10, rx2573_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2573_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2573_cur."!cursor_pos"(rx2573_pos)
    $P10 = rx2573_cur."codeblock"()
    unless $P10, rx2573_fail
    rx2573_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2573_pos = $P10."pos"()
.annotate 'line', 1383
  # rx pass
    rx2573_cur."!cursor_pass"(rx2573_pos, "assertion:sym<{ }>")
    if_null rx2573_debug, debug_1893
    rx2573_cur."!cursor_debug"("PASS", "assertion:sym<{ }>", " at pos=", rx2573_pos)
  debug_1893:
    .return (rx2573_cur)
  rx2573_restart:
    if_null rx2573_debug, debug_1894
    rx2573_cur."!cursor_debug"("NEXT", "assertion:sym<{ }>")
  debug_1894:
  rx2573_fail:
    (rx2573_rep, rx2573_pos, $I10, $P10) = rx2573_cur."!mark_fail"(0)
    lt rx2573_pos, -1, rx2573_done
    eq rx2573_pos, -1, rx2573_fail
    jump $I10
  rx2573_done:
    rx2573_cur."!cursor_fail"()
    if_null rx2573_debug, debug_1895
    rx2573_cur."!cursor_debug"("FAIL", "assertion:sym<{ }>")
  debug_1895:
    .return (rx2573_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<{ }>"  :subid("413_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1383
    new $P103, "ResizablePMCArray"
    push $P103, "{"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?{ }>"  :subid("414_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1387
    .const 'Sub' $P2580 = "589_1335114138.94729" 
    capture_lex $P2580
    .local string rx2577_tgt
    .local int rx2577_pos
    .local int rx2577_off
    .local int rx2577_eos
    .local int rx2577_rep
    .local pmc rx2577_cur
    .local pmc rx2577_debug
    (rx2577_cur, rx2577_pos, rx2577_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2577_cur
    .local pmc match
    .lex "$/", match
    length rx2577_eos, rx2577_tgt
    gt rx2577_pos, rx2577_eos, rx2577_done
    set rx2577_off, 0
    lt rx2577_pos, 2, rx2577_start
    sub rx2577_off, rx2577_pos, 1
    substr rx2577_tgt, rx2577_tgt, rx2577_off
  rx2577_start:
    eq $I10, 1, rx2577_restart
    if_null rx2577_debug, debug_1896
    rx2577_cur."!cursor_debug"("START", "assertion:sym<?{ }>")
  debug_1896:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2578_done
    goto rxscan2578_scan
  rxscan2578_loop:
    (rx2577_pos) = rx2577_cur."from"()
    inc rx2577_pos
    rx2577_cur."!cursor_from"(rx2577_pos)
    ge rx2577_pos, rx2577_eos, rxscan2578_done
  rxscan2578_scan:
    set_addr $I10, rxscan2578_loop
    rx2577_cur."!mark_push"(0, rx2577_pos, $I10)
  rxscan2578_done:
.annotate 'line', 1388
  # rx subcapture "zw"
    set_addr $I10, rxcap_2583_fail
    rx2577_cur."!mark_push"(0, rx2577_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2577_pos, rx2577_eos, rx2577_fail
    sub $I10, rx2577_pos, rx2577_off
    substr $S10, rx2577_tgt, $I10, 1
    index $I11, "?!", $S10
    lt $I11, 0, rx2577_fail
    inc rx2577_pos
  # rx subrule "before" subtype=zerowidth negate=
    rx2577_cur."!cursor_pos"(rx2577_pos)
    .const 'Sub' $P2580 = "589_1335114138.94729" 
    capture_lex $P2580
    $P10 = rx2577_cur."before"($P2580)
    unless $P10, rx2577_fail
    set_addr $I10, rxcap_2583_fail
    ($I12, $I11) = rx2577_cur."!mark_peek"($I10)
    rx2577_cur."!cursor_pos"($I11)
    ($P10) = rx2577_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2577_pos, "")
    rx2577_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("zw")
    goto rxcap_2583_done
  rxcap_2583_fail:
    goto rx2577_fail
  rxcap_2583_done:
  # rx subrule "codeblock" subtype=capture negate=
    rx2577_cur."!cursor_pos"(rx2577_pos)
    $P10 = rx2577_cur."codeblock"()
    unless $P10, rx2577_fail
    rx2577_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2577_pos = $P10."pos"()
.annotate 'line', 1387
  # rx pass
    rx2577_cur."!cursor_pass"(rx2577_pos, "assertion:sym<?{ }>")
    if_null rx2577_debug, debug_1901
    rx2577_cur."!cursor_debug"("PASS", "assertion:sym<?{ }>", " at pos=", rx2577_pos)
  debug_1901:
    .return (rx2577_cur)
  rx2577_restart:
    if_null rx2577_debug, debug_1902
    rx2577_cur."!cursor_debug"("NEXT", "assertion:sym<?{ }>")
  debug_1902:
  rx2577_fail:
    (rx2577_rep, rx2577_pos, $I10, $P10) = rx2577_cur."!mark_fail"(0)
    lt rx2577_pos, -1, rx2577_done
    eq rx2577_pos, -1, rx2577_fail
    jump $I10
  rx2577_done:
    rx2577_cur."!cursor_fail"()
    if_null rx2577_debug, debug_1903
    rx2577_cur."!cursor_debug"("FAIL", "assertion:sym<?{ }>")
  debug_1903:
    .return (rx2577_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2579"  :anon :subid("589_1335114138.94729") :method :outer("414_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1388
    .local string rx2581_tgt
    .local int rx2581_pos
    .local int rx2581_off
    .local int rx2581_eos
    .local int rx2581_rep
    .local pmc rx2581_cur
    .local pmc rx2581_debug
    (rx2581_cur, rx2581_pos, rx2581_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2581_cur
    .local pmc match
    .lex "$/", match
    length rx2581_eos, rx2581_tgt
    gt rx2581_pos, rx2581_eos, rx2581_done
    set rx2581_off, 0
    lt rx2581_pos, 2, rx2581_start
    sub rx2581_off, rx2581_pos, 1
    substr rx2581_tgt, rx2581_tgt, rx2581_off
  rx2581_start:
    eq $I10, 1, rx2581_restart
    if_null rx2581_debug, debug_1897
    rx2581_cur."!cursor_debug"("START", "")
  debug_1897:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2582_done
    goto rxscan2582_scan
  rxscan2582_loop:
    (rx2581_pos) = rx2581_cur."from"()
    inc rx2581_pos
    rx2581_cur."!cursor_from"(rx2581_pos)
    ge rx2581_pos, rx2581_eos, rxscan2582_done
  rxscan2582_scan:
    set_addr $I10, rxscan2582_loop
    rx2581_cur."!mark_push"(0, rx2581_pos, $I10)
  rxscan2582_done:
  # rx literal  "{"
    add $I11, rx2581_pos, 1
    gt $I11, rx2581_eos, rx2581_fail
    sub $I11, rx2581_pos, rx2581_off
    ord $I11, rx2581_tgt, $I11
    ne $I11, 123, rx2581_fail
    add rx2581_pos, 1
  # rx pass
    rx2581_cur."!cursor_pass"(rx2581_pos, "")
    if_null rx2581_debug, debug_1898
    rx2581_cur."!cursor_debug"("PASS", "", " at pos=", rx2581_pos)
  debug_1898:
    .return (rx2581_cur)
  rx2581_restart:
    if_null rx2581_debug, debug_1899
    rx2581_cur."!cursor_debug"("NEXT", "")
  debug_1899:
  rx2581_fail:
    (rx2581_rep, rx2581_pos, $I10, $P10) = rx2581_cur."!mark_fail"(0)
    lt rx2581_pos, -1, rx2581_done
    eq rx2581_pos, -1, rx2581_fail
    jump $I10
  rx2581_done:
    rx2581_cur."!cursor_fail"()
    if_null rx2581_debug, debug_1900
    rx2581_cur."!cursor_debug"("FAIL", "")
  debug_1900:
    .return (rx2581_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<?{ }>"  :subid("415_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1387
    new $P103, "ResizablePMCArray"
    push $P103, "!"
    push $P103, "?"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<name>"  :subid("416_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1391
    .const 'Sub' $P2591 = "590_1335114138.94729" 
    capture_lex $P2591
    .local string rx2586_tgt
    .local int rx2586_pos
    .local int rx2586_off
    .local int rx2586_eos
    .local int rx2586_rep
    .local pmc rx2586_cur
    .local pmc rx2586_debug
    (rx2586_cur, rx2586_pos, rx2586_tgt, $I10) = self."!cursor_start"()
    rx2586_cur."!cursor_caparray"("assertion", "arglist", "nibbler")
    .lex unicode:"$\x{a2}", rx2586_cur
    .local pmc match
    .lex "$/", match
    length rx2586_eos, rx2586_tgt
    gt rx2586_pos, rx2586_eos, rx2586_done
    set rx2586_off, 0
    lt rx2586_pos, 2, rx2586_start
    sub rx2586_off, rx2586_pos, 1
    substr rx2586_tgt, rx2586_tgt, rx2586_off
  rx2586_start:
    eq $I10, 1, rx2586_restart
    if_null rx2586_debug, debug_1904
    rx2586_cur."!cursor_debug"("START", "assertion:sym<name>")
  debug_1904:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2587_done
    goto rxscan2587_scan
  rxscan2587_loop:
    (rx2586_pos) = rx2586_cur."from"()
    inc rx2586_pos
    rx2586_cur."!cursor_from"(rx2586_pos)
    ge rx2586_pos, rx2586_eos, rxscan2587_done
  rxscan2587_scan:
    set_addr $I10, rxscan2587_loop
    rx2586_cur."!mark_push"(0, rx2586_pos, $I10)
  rxscan2587_done:
.annotate 'line', 1392
  # rx subrule "identifier" subtype=capture negate=
    rx2586_cur."!cursor_pos"(rx2586_pos)
    $P10 = rx2586_cur."identifier"()
    unless $P10, rx2586_fail
    rx2586_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx2586_pos = $P10."pos"()
.annotate 'line', 1399
  # rx rxquantr2588 ** 0..1
    set_addr $I10, rxquantr2588_done
    rx2586_cur."!mark_push"(0, rx2586_pos, $I10)
  rxquantr2588_loop:
  alt2589_0:
.annotate 'line', 1393
    set_addr $I10, alt2589_1
    rx2586_cur."!mark_push"(0, rx2586_pos, $I10)
.annotate 'line', 1394
  # rx subrule "before" subtype=zerowidth negate=
    rx2586_cur."!cursor_pos"(rx2586_pos)
    .const 'Sub' $P2591 = "590_1335114138.94729" 
    capture_lex $P2591
    $P10 = rx2586_cur."before"($P2591)
    unless $P10, rx2586_fail
    goto alt2589_end
  alt2589_1:
    set_addr $I10, alt2589_2
    rx2586_cur."!mark_push"(0, rx2586_pos, $I10)
.annotate 'line', 1395
  # rx literal  "="
    add $I11, rx2586_pos, 1
    gt $I11, rx2586_eos, rx2586_fail
    sub $I11, rx2586_pos, rx2586_off
    ord $I11, rx2586_tgt, $I11
    ne $I11, 61, rx2586_fail
    add rx2586_pos, 1
  # rx subrule "assertion" subtype=capture negate=
    rx2586_cur."!cursor_pos"(rx2586_pos)
    $P10 = rx2586_cur."assertion"()
    unless $P10, rx2586_fail
    rx2586_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("assertion")
    rx2586_pos = $P10."pos"()
    goto alt2589_end
  alt2589_2:
    set_addr $I10, alt2589_3
    rx2586_cur."!mark_push"(0, rx2586_pos, $I10)
.annotate 'line', 1396
  # rx literal  ":"
    add $I11, rx2586_pos, 1
    gt $I11, rx2586_eos, rx2586_fail
    sub $I11, rx2586_pos, rx2586_off
    ord $I11, rx2586_tgt, $I11
    ne $I11, 58, rx2586_fail
    add rx2586_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx2586_cur."!cursor_pos"(rx2586_pos)
    $P10 = rx2586_cur."arglist"()
    unless $P10, rx2586_fail
    rx2586_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2586_pos = $P10."pos"()
    goto alt2589_end
  alt2589_3:
    set_addr $I10, alt2589_4
    rx2586_cur."!mark_push"(0, rx2586_pos, $I10)
.annotate 'line', 1397
  # rx literal  "("
    add $I11, rx2586_pos, 1
    gt $I11, rx2586_eos, rx2586_fail
    sub $I11, rx2586_pos, rx2586_off
    ord $I11, rx2586_tgt, $I11
    ne $I11, 40, rx2586_fail
    add rx2586_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx2586_cur."!cursor_pos"(rx2586_pos)
    $P10 = rx2586_cur."LANG"("MAIN", "arglist")
    unless $P10, rx2586_fail
    rx2586_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2586_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2586_pos, 1
    gt $I11, rx2586_eos, rx2586_fail
    sub $I11, rx2586_pos, rx2586_off
    ord $I11, rx2586_tgt, $I11
    ne $I11, 41, rx2586_fail
    add rx2586_pos, 1
    goto alt2589_end
  alt2589_4:
.annotate 'line', 1398
  # rx subrule "normspace" subtype=method negate=
    rx2586_cur."!cursor_pos"(rx2586_pos)
    $P10 = rx2586_cur."normspace"()
    unless $P10, rx2586_fail
    rx2586_pos = $P10."pos"()
  # rx subrule "nibbler" subtype=capture negate=
    rx2586_cur."!cursor_pos"(rx2586_pos)
    $P10 = rx2586_cur."nibbler"()
    unless $P10, rx2586_fail
    rx2586_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("nibbler")
    rx2586_pos = $P10."pos"()
  alt2589_end:
.annotate 'line', 1399
    set_addr $I10, rxquantr2588_done
    (rx2586_rep) = rx2586_cur."!mark_commit"($I10)
  rxquantr2588_done:
.annotate 'line', 1391
  # rx pass
    rx2586_cur."!cursor_pass"(rx2586_pos, "assertion:sym<name>")
    if_null rx2586_debug, debug_1909
    rx2586_cur."!cursor_debug"("PASS", "assertion:sym<name>", " at pos=", rx2586_pos)
  debug_1909:
    .return (rx2586_cur)
  rx2586_restart:
    if_null rx2586_debug, debug_1910
    rx2586_cur."!cursor_debug"("NEXT", "assertion:sym<name>")
  debug_1910:
  rx2586_fail:
    (rx2586_rep, rx2586_pos, $I10, $P10) = rx2586_cur."!mark_fail"(0)
    lt rx2586_pos, -1, rx2586_done
    eq rx2586_pos, -1, rx2586_fail
    jump $I10
  rx2586_done:
    rx2586_cur."!cursor_fail"()
    if_null rx2586_debug, debug_1911
    rx2586_cur."!cursor_debug"("FAIL", "assertion:sym<name>")
  debug_1911:
    .return (rx2586_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2590"  :anon :subid("590_1335114138.94729") :method :outer("416_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1394
    .local string rx2592_tgt
    .local int rx2592_pos
    .local int rx2592_off
    .local int rx2592_eos
    .local int rx2592_rep
    .local pmc rx2592_cur
    .local pmc rx2592_debug
    (rx2592_cur, rx2592_pos, rx2592_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2592_cur
    .local pmc match
    .lex "$/", match
    length rx2592_eos, rx2592_tgt
    gt rx2592_pos, rx2592_eos, rx2592_done
    set rx2592_off, 0
    lt rx2592_pos, 2, rx2592_start
    sub rx2592_off, rx2592_pos, 1
    substr rx2592_tgt, rx2592_tgt, rx2592_off
  rx2592_start:
    eq $I10, 1, rx2592_restart
    if_null rx2592_debug, debug_1905
    rx2592_cur."!cursor_debug"("START", "")
  debug_1905:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2593_done
    goto rxscan2593_scan
  rxscan2593_loop:
    (rx2592_pos) = rx2592_cur."from"()
    inc rx2592_pos
    rx2592_cur."!cursor_from"(rx2592_pos)
    ge rx2592_pos, rx2592_eos, rxscan2593_done
  rxscan2593_scan:
    set_addr $I10, rxscan2593_loop
    rx2592_cur."!mark_push"(0, rx2592_pos, $I10)
  rxscan2593_done:
  # rx literal  ">"
    add $I11, rx2592_pos, 1
    gt $I11, rx2592_eos, rx2592_fail
    sub $I11, rx2592_pos, rx2592_off
    ord $I11, rx2592_tgt, $I11
    ne $I11, 62, rx2592_fail
    add rx2592_pos, 1
  # rx pass
    rx2592_cur."!cursor_pass"(rx2592_pos, "")
    if_null rx2592_debug, debug_1906
    rx2592_cur."!cursor_debug"("PASS", "", " at pos=", rx2592_pos)
  debug_1906:
    .return (rx2592_cur)
  rx2592_restart:
    if_null rx2592_debug, debug_1907
    rx2592_cur."!cursor_debug"("NEXT", "")
  debug_1907:
  rx2592_fail:
    (rx2592_rep, rx2592_pos, $I10, $P10) = rx2592_cur."!mark_fail"(0)
    lt rx2592_pos, -1, rx2592_done
    eq rx2592_pos, -1, rx2592_fail
    jump $I10
  rx2592_done:
    rx2592_cur."!cursor_fail"()
    if_null rx2592_debug, debug_1908
    rx2592_cur."!cursor_debug"("FAIL", "")
  debug_1908:
    .return (rx2592_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<name>"  :subid("417_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1391
    $P103 = self."!PREFIX__!subrule"("identifier", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<var>"  :subid("418_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1402
    .local string rx2596_tgt
    .local int rx2596_pos
    .local int rx2596_off
    .local int rx2596_eos
    .local int rx2596_rep
    .local pmc rx2596_cur
    .local pmc rx2596_debug
    (rx2596_cur, rx2596_pos, rx2596_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2596_cur
    .local pmc match
    .lex "$/", match
    length rx2596_eos, rx2596_tgt
    gt rx2596_pos, rx2596_eos, rx2596_done
    set rx2596_off, 0
    lt rx2596_pos, 2, rx2596_start
    sub rx2596_off, rx2596_pos, 1
    substr rx2596_tgt, rx2596_tgt, rx2596_off
  rx2596_start:
    eq $I10, 1, rx2596_restart
    if_null rx2596_debug, debug_1912
    rx2596_cur."!cursor_debug"("START", "assertion:sym<var>")
  debug_1912:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2597_done
    goto rxscan2597_scan
  rxscan2597_loop:
    (rx2596_pos) = rx2596_cur."from"()
    inc rx2596_pos
    rx2596_cur."!cursor_from"(rx2596_pos)
    ge rx2596_pos, rx2596_eos, rxscan2597_done
  rxscan2597_scan:
    set_addr $I10, rxscan2597_loop
    rx2596_cur."!mark_push"(0, rx2596_pos, $I10)
  rxscan2597_done:
.annotate 'line', 1403
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2596_pos, rx2596_off
    substr $S10, rx2596_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2596_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2596_cur."!cursor_pos"(rx2596_pos)
    $P10 = rx2596_cur."LANG"("MAIN", "variable")
    unless $P10, rx2596_fail
    rx2596_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2596_pos = $P10."pos"()
.annotate 'line', 1402
  # rx pass
    rx2596_cur."!cursor_pass"(rx2596_pos, "assertion:sym<var>")
    if_null rx2596_debug, debug_1913
    rx2596_cur."!cursor_debug"("PASS", "assertion:sym<var>", " at pos=", rx2596_pos)
  debug_1913:
    .return (rx2596_cur)
  rx2596_restart:
    if_null rx2596_debug, debug_1914
    rx2596_cur."!cursor_debug"("NEXT", "assertion:sym<var>")
  debug_1914:
  rx2596_fail:
    (rx2596_rep, rx2596_pos, $I10, $P10) = rx2596_cur."!mark_fail"(0)
    lt rx2596_pos, -1, rx2596_done
    eq rx2596_pos, -1, rx2596_fail
    jump $I10
  rx2596_done:
    rx2596_cur."!cursor_fail"()
    if_null rx2596_debug, debug_1915
    rx2596_cur."!cursor_debug"("FAIL", "assertion:sym<var>")
  debug_1915:
    .return (rx2596_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<var>"  :subid("419_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1402
    new $P103, "ResizablePMCArray"
    push $P103, "$"
    push $P103, "@"
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "codeblock"  :subid("420_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1406
    .local string rx2600_tgt
    .local int rx2600_pos
    .local int rx2600_off
    .local int rx2600_eos
    .local int rx2600_rep
    .local pmc rx2600_cur
    .local pmc rx2600_debug
    (rx2600_cur, rx2600_pos, rx2600_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2600_cur
    .local pmc match
    .lex "$/", match
    length rx2600_eos, rx2600_tgt
    gt rx2600_pos, rx2600_eos, rx2600_done
    set rx2600_off, 0
    lt rx2600_pos, 2, rx2600_start
    sub rx2600_off, rx2600_pos, 1
    substr rx2600_tgt, rx2600_tgt, rx2600_off
  rx2600_start:
    eq $I10, 1, rx2600_restart
    if_null rx2600_debug, debug_1916
    rx2600_cur."!cursor_debug"("START", "codeblock")
  debug_1916:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2601_done
    goto rxscan2601_scan
  rxscan2601_loop:
    (rx2600_pos) = rx2600_cur."from"()
    inc rx2600_pos
    rx2600_cur."!cursor_from"(rx2600_pos)
    ge rx2600_pos, rx2600_eos, rxscan2601_done
  rxscan2601_scan:
    set_addr $I10, rxscan2601_loop
    rx2600_cur."!mark_push"(0, rx2600_pos, $I10)
  rxscan2601_done:
.annotate 'line', 1407
  # rx subrule "LANG" subtype=capture negate=
    rx2600_cur."!cursor_pos"(rx2600_pos)
    $P10 = rx2600_cur."LANG"("MAIN", "pblock")
    unless $P10, rx2600_fail
    rx2600_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx2600_pos = $P10."pos"()
.annotate 'line', 1406
  # rx pass
    rx2600_cur."!cursor_pass"(rx2600_pos, "codeblock")
    if_null rx2600_debug, debug_1917
    rx2600_cur."!cursor_debug"("PASS", "codeblock", " at pos=", rx2600_pos)
  debug_1917:
    .return (rx2600_cur)
  rx2600_restart:
    if_null rx2600_debug, debug_1918
    rx2600_cur."!cursor_debug"("NEXT", "codeblock")
  debug_1918:
  rx2600_fail:
    (rx2600_rep, rx2600_pos, $I10, $P10) = rx2600_cur."!mark_fail"(0)
    lt rx2600_pos, -1, rx2600_done
    eq rx2600_pos, -1, rx2600_fail
    jump $I10
  rx2600_done:
    rx2600_cur."!cursor_fail"()
    if_null rx2600_debug, debug_1919
    rx2600_cur."!cursor_debug"("FAIL", "codeblock")
  debug_1919:
    .return (rx2600_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__codeblock"  :subid("421_1335114138.94729") :method :outer("586_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1406
    $P103 = self."!PREFIX__!subrule"("LANG", "")
    new $P104, "ResizablePMCArray"
    push $P104, $P103
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2603"  :subid("591_1335114138.94729") :outer("542_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1413
    .const 'Sub' $P3840 = "534_1335114138.94729" 
    capture_lex $P3840
    .const 'Sub' $P3837 = "533_1335114138.94729" 
    capture_lex $P3837
    .const 'Sub' $P3834 = "532_1335114138.94729" 
    capture_lex $P3834
    .const 'Sub' $P3831 = "531_1335114138.94729" 
    capture_lex $P3831
    .const 'Sub' $P3828 = "530_1335114138.94729" 
    capture_lex $P3828
    .const 'Sub' $P3825 = "529_1335114138.94729" 
    capture_lex $P3825
    .const 'Sub' $P3822 = "528_1335114138.94729" 
    capture_lex $P3822
    .const 'Sub' $P3818 = "527_1335114138.94729" 
    capture_lex $P3818
    .const 'Sub' $P3815 = "526_1335114138.94729" 
    capture_lex $P3815
    .const 'Sub' $P3811 = "525_1335114138.94729" 
    capture_lex $P3811
    .const 'Sub' $P3807 = "524_1335114138.94729" 
    capture_lex $P3807
    .const 'Sub' $P3796 = "523_1335114138.94729" 
    capture_lex $P3796
    .const 'Sub' $P3792 = "522_1335114138.94729" 
    capture_lex $P3792
    .const 'Sub' $P3788 = "521_1335114138.94729" 
    capture_lex $P3788
    .const 'Sub' $P3784 = "520_1335114138.94729" 
    capture_lex $P3784
    .const 'Sub' $P3780 = "519_1335114138.94729" 
    capture_lex $P3780
    .const 'Sub' $P3776 = "518_1335114138.94729" 
    capture_lex $P3776
    .const 'Sub' $P3772 = "517_1335114138.94729" 
    capture_lex $P3772
    .const 'Sub' $P3762 = "516_1335114138.94729" 
    capture_lex $P3762
    .const 'Sub' $P3755 = "515_1335114138.94729" 
    capture_lex $P3755
    .const 'Sub' $P3751 = "514_1335114138.94729" 
    capture_lex $P3751
    .const 'Sub' $P3747 = "513_1335114138.94729" 
    capture_lex $P3747
    .const 'Sub' $P3743 = "512_1335114138.94729" 
    capture_lex $P3743
    .const 'Sub' $P3739 = "511_1335114138.94729" 
    capture_lex $P3739
    .const 'Sub' $P3735 = "510_1335114138.94729" 
    capture_lex $P3735
    .const 'Sub' $P3726 = "509_1335114138.94729" 
    capture_lex $P3726
    .const 'Sub' $P3708 = "508_1335114138.94729" 
    capture_lex $P3708
    .const 'Sub' $P3704 = "507_1335114138.94729" 
    capture_lex $P3704
    .const 'Sub' $P3700 = "506_1335114138.94729" 
    capture_lex $P3700
    .const 'Sub' $P3691 = "505_1335114138.94729" 
    capture_lex $P3691
    .const 'Sub' $P3684 = "504_1335114138.94729" 
    capture_lex $P3684
    .const 'Sub' $P3680 = "503_1335114138.94729" 
    capture_lex $P3680
    .const 'Sub' $P3676 = "502_1335114138.94729" 
    capture_lex $P3676
    .const 'Sub' $P3645 = "501_1335114138.94729" 
    capture_lex $P3645
    .const 'Sub' $P3641 = "500_1335114138.94729" 
    capture_lex $P3641
    .const 'Sub' $P3638 = "499_1335114138.94729" 
    capture_lex $P3638
    .const 'Sub' $P3626 = "498_1335114138.94729" 
    capture_lex $P3626
    .const 'Sub' $P3622 = "497_1335114138.94729" 
    capture_lex $P3622
    .const 'Sub' $P3612 = "496_1335114138.94729" 
    capture_lex $P3612
    .const 'Sub' $P3593 = "495_1335114138.94729" 
    capture_lex $P3593
    .const 'Sub' $P3587 = "494_1335114138.94729" 
    capture_lex $P3587
    .const 'Sub' $P3584 = "493_1335114138.94729" 
    capture_lex $P3584
    .const 'Sub' $P3564 = "492_1335114138.94729" 
    capture_lex $P3564
    .const 'Sub' $P3515 = "491_1335114138.94729" 
    capture_lex $P3515
    .const 'Sub' $P3479 = "490_1335114138.94729" 
    capture_lex $P3479
    .const 'Sub' $P3475 = "489_1335114138.94729" 
    capture_lex $P3475
    .const 'Sub' $P3457 = "488_1335114138.94729" 
    capture_lex $P3457
    .const 'Sub' $P3450 = "487_1335114138.94729" 
    capture_lex $P3450
    .const 'Sub' $P3445 = "486_1335114138.94729" 
    capture_lex $P3445
    .const 'Sub' $P3408 = "485_1335114138.94729" 
    capture_lex $P3408
    .const 'Sub' $P3389 = "484_1335114138.94729" 
    capture_lex $P3389
    .const 'Sub' $P3355 = "483_1335114138.94729" 
    capture_lex $P3355
    .const 'Sub' $P3278 = "482_1335114138.94729" 
    capture_lex $P3278
    .const 'Sub' $P3274 = "481_1335114138.94729" 
    capture_lex $P3274
    .const 'Sub' $P3270 = "480_1335114138.94729" 
    capture_lex $P3270
    .const 'Sub' $P3230 = "479_1335114138.94729" 
    capture_lex $P3230
    .const 'Sub' $P3226 = "478_1335114138.94729" 
    capture_lex $P3226
    .const 'Sub' $P3219 = "477_1335114138.94729" 
    capture_lex $P3219
    .const 'Sub' $P3212 = "476_1335114138.94729" 
    capture_lex $P3212
    .const 'Sub' $P3205 = "475_1335114138.94729" 
    capture_lex $P3205
    .const 'Sub' $P3195 = "474_1335114138.94729" 
    capture_lex $P3195
    .const 'Sub' $P3191 = "473_1335114138.94729" 
    capture_lex $P3191
    .const 'Sub' $P3187 = "472_1335114138.94729" 
    capture_lex $P3187
    .const 'Sub' $P3183 = "471_1335114138.94729" 
    capture_lex $P3183
    .const 'Sub' $P3116 = "470_1335114138.94729" 
    capture_lex $P3116
    .const 'Sub' $P3090 = "469_1335114138.94729" 
    capture_lex $P3090
    .const 'Sub' $P3086 = "468_1335114138.94729" 
    capture_lex $P3086
    .const 'Sub' $P3082 = "467_1335114138.94729" 
    capture_lex $P3082
    .const 'Sub' $P3078 = "466_1335114138.94729" 
    capture_lex $P3078
    .const 'Sub' $P3074 = "465_1335114138.94729" 
    capture_lex $P3074
    .const 'Sub' $P3070 = "464_1335114138.94729" 
    capture_lex $P3070
    .const 'Sub' $P3066 = "463_1335114138.94729" 
    capture_lex $P3066
    .const 'Sub' $P3011 = "462_1335114138.94729" 
    capture_lex $P3011
    .const 'Sub' $P2993 = "461_1335114138.94729" 
    capture_lex $P2993
    .const 'Sub' $P2987 = "460_1335114138.94729" 
    capture_lex $P2987
    .const 'Sub' $P2983 = "459_1335114138.94729" 
    capture_lex $P2983
    .const 'Sub' $P2979 = "458_1335114138.94729" 
    capture_lex $P2979
    .const 'Sub' $P2975 = "457_1335114138.94729" 
    capture_lex $P2975
    .const 'Sub' $P2971 = "456_1335114138.94729" 
    capture_lex $P2971
    .const 'Sub' $P2967 = "455_1335114138.94729" 
    capture_lex $P2967
    .const 'Sub' $P2963 = "454_1335114138.94729" 
    capture_lex $P2963
    .const 'Sub' $P2959 = "453_1335114138.94729" 
    capture_lex $P2959
    .const 'Sub' $P2955 = "452_1335114138.94729" 
    capture_lex $P2955
    .const 'Sub' $P2951 = "451_1335114138.94729" 
    capture_lex $P2951
    .const 'Sub' $P2947 = "450_1335114138.94729" 
    capture_lex $P2947
    .const 'Sub' $P2943 = "449_1335114138.94729" 
    capture_lex $P2943
    .const 'Sub' $P2939 = "448_1335114138.94729" 
    capture_lex $P2939
    .const 'Sub' $P2935 = "447_1335114138.94729" 
    capture_lex $P2935
    .const 'Sub' $P2928 = "446_1335114138.94729" 
    capture_lex $P2928
    .const 'Sub' $P2921 = "445_1335114138.94729" 
    capture_lex $P2921
    .const 'Sub' $P2917 = "444_1335114138.94729" 
    capture_lex $P2917
    .const 'Sub' $P2913 = "443_1335114138.94729" 
    capture_lex $P2913
    .const 'Sub' $P2908 = "442_1335114138.94729" 
    capture_lex $P2908
    .const 'Sub' $P2903 = "441_1335114138.94729" 
    capture_lex $P2903
    .const 'Sub' $P2894 = "440_1335114138.94729" 
    capture_lex $P2894
    .const 'Sub' $P2883 = "439_1335114138.94729" 
    capture_lex $P2883
    .const 'Sub' $P2877 = "438_1335114138.94729" 
    capture_lex $P2877
    .const 'Sub' $P2872 = "437_1335114138.94729" 
    capture_lex $P2872
    .const 'Sub' $P2853 = "436_1335114138.94729" 
    capture_lex $P2853
    .const 'Sub' $P2847 = "435_1335114138.94729" 
    capture_lex $P2847
    .const 'Sub' $P2844 = "434_1335114138.94729" 
    capture_lex $P2844
    .const 'Sub' $P2841 = "433_1335114138.94729" 
    capture_lex $P2841
    .const 'Sub' $P2827 = "432_1335114138.94729" 
    capture_lex $P2827
    .const 'Sub' $P2824 = "431_1335114138.94729" 
    capture_lex $P2824
    .const 'Sub' $P2812 = "430_1335114138.94729" 
    capture_lex $P2812
    .const 'Sub' $P2808 = "429_1335114138.94729" 
    capture_lex $P2808
    .const 'Sub' $P2804 = "428_1335114138.94729" 
    capture_lex $P2804
    .const 'Sub' $P2799 = "427_1335114138.94729" 
    capture_lex $P2799
    .const 'Sub' $P2770 = "426_1335114138.94729" 
    capture_lex $P2770
    .const 'Sub' $P2752 = "425_1335114138.94729" 
    capture_lex $P2752
    .const 'Sub' $P2743 = "424_1335114138.94729" 
    capture_lex $P2743
    .const 'Sub' $P2733 = "423_1335114138.94729" 
    capture_lex $P2733
    .const 'Sub' $P2729 = "422_1335114138.94729" 
    capture_lex $P2729
    .const 'Sub' $P2700 = "607_1335114138.94729" 
    capture_lex $P2700
    .const 'Sub' $P2695 = "606_1335114138.94729" 
    capture_lex $P2695
    .const 'Sub' $P2677 = "604_1335114138.94729" 
    capture_lex $P2677
    .const 'Sub' $P2658 = "602_1335114138.94729" 
    capture_lex $P2658
    .const 'Sub' $P2654 = "601_1335114138.94729" 
    capture_lex $P2654
    .const 'Sub' $P2646 = "600_1335114138.94729" 
    capture_lex $P2646
    .const 'Sub' $P2636 = "598_1335114138.94729" 
    capture_lex $P2636
    .const 'Sub' $P2631 = "597_1335114138.94729" 
    capture_lex $P2631
    .const 'Sub' $P2625 = "596_1335114138.94729" 
    capture_lex $P2625
    .const 'Sub' $P2612 = "593_1335114138.94729" 
    capture_lex $P2612
    .const 'Sub' $P2606 = "592_1335114138.94729" 
    capture_lex $P2606
.annotate 'line', 1414
    .const 'Sub' $P2606 = "592_1335114138.94729" 
    newclosure $P2610, $P2606
    set $P2605, $P2610
    .lex "xblock_immediate", $P2605
.annotate 'line', 1419
    .const 'Sub' $P2612 = "593_1335114138.94729" 
    newclosure $P2623, $P2612
    set $P2611, $P2623
    .lex "block_immediate", $P2611
.annotate 'line', 1429
    .const 'Sub' $P2625 = "596_1335114138.94729" 
    newclosure $P2629, $P2625
    set $P2624, $P2629
    .lex "vivitype", $P2624
.annotate 'line', 1448
    .const 'Sub' $P2631 = "597_1335114138.94729" 
    newclosure $P2634, $P2631
    set $P2630, $P2634
    .lex "colonpair_str", $P2630
.annotate 'line', 1620
    .const 'Sub' $P2636 = "598_1335114138.94729" 
    newclosure $P2644, $P2636
    set $P2635, $P2644
    .lex "import_HOW_exports", $P2635
.annotate 'line', 1725
    .const 'Sub' $P2646 = "600_1335114138.94729" 
    newclosure $P2652, $P2646
    set $P2645, $P2652
    .lex "push_block_handler", $P2645
.annotate 'line', 2290
    .const 'Sub' $P2654 = "601_1335114138.94729" 
    newclosure $P2656, $P2654
    set $P2653, $P2656
    .lex "only_star_block", $P2653
.annotate 'line', 2299
    .const 'Sub' $P2658 = "602_1335114138.94729" 
    newclosure $P2675, $P2658
    set $P2657, $P2675
    .lex "attach_multi_signature", $P2657
.annotate 'line', 2312
    .const 'Sub' $P2677 = "604_1335114138.94729" 
    newclosure $P2693, $P2677
    set $P2676, $P2693
    .lex "attach_multi_signature_to_parrot_sub", $P2676
.annotate 'line', 2795
    .const 'Sub' $P2695 = "606_1335114138.94729" 
    newclosure $P2698, $P2695
    set $P2694, $P2698
    .lex "control", $P2694
.annotate 'line', 2814
    .const 'Sub' $P2700 = "607_1335114138.94729" 
    newclosure $P2726, $P2700
    set $P2699, $P2726
    .lex "lexical_package_lookup", $P2699
.annotate 'line', 1413
    .lex "$?PACKAGE", $P2727
    .lex "$?CLASS", $P2728
    set $P118, $P2605
    set $P118, $P2611
    set $P118, $P2624
    set $P118, $P2630
    set $P118, $P2635
    set $P118, $P2645
    set $P118, $P2653
    set $P118, $P2657
    set $P118, $P2676
    set $P118, $P2694
    set $P118, $P2699
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock_immediate"  :subid("592_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2607
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1414
    .lex "$xblock", param_2607
.annotate 'line', 1415
    new $P103, "Float"
    assign $P103, 1
    set $I100, $P103
    set $P2608, param_2607
    unless_null $P2608, vivify_1920
    $P2608 = root_new ['parrot';'ResizablePMCArray']
  vivify_1920:
    set $P104, $P2608[$I100]
    unless_null $P104, vivify_1921
    new $P104, "Undef"
  vivify_1921:
    $P105 = "block_immediate"($P104)
    new $P106, "Float"
    assign $P106, 1
    set $I101, $P106
    set $P2609, param_2607
    unless_null $P2609, vivify_1922
    $P2609 = root_new ['parrot';'ResizablePMCArray']
    set param_2607, $P2609
  vivify_1922:
    set $P2609[$I101], $P105
.annotate 'line', 1414
    set $P103, param_2607
    unless_null $P103, vivify_1923
    new $P103, "Undef"
  vivify_1923:
    .return ($P103)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block_immediate"  :subid("593_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2613
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1419
    .const 'Sub' $P2617 = "594_1335114138.94729" 
    capture_lex $P2617
    .lex "$block", param_2613
.annotate 'line', 1420
    set $P104, param_2613
    unless_null $P104, vivify_1924
    new $P104, "Undef"
  vivify_1924:
    $P104."blocktype"("immediate")
.annotate 'line', 1421
    set $P105, param_2613
    unless_null $P105, vivify_1925
    new $P105, "Undef"
  vivify_1925:
    $P106 = $P105."symtable"()
    unless $P106, unless_2615
    set $P104, $P106
    goto unless_2615_end
  unless_2615:
    set $P107, param_2613
    unless_null $P107, vivify_1926
    new $P107, "Undef"
  vivify_1926:
    $P108 = $P107."handlers"()
    set $P104, $P108
  unless_2615_end:
    if $P104, unless_2614_end
    .const 'Sub' $P2617 = "594_1335114138.94729" 
    capture_lex $P2617
    $P2617()
  unless_2614_end:
.annotate 'line', 1419
    set $P104, param_2613
    unless_null $P104, vivify_1933
    new $P104, "Undef"
  vivify_1933:
    .return ($P104)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2616"  :anon :subid("594_1335114138.94729") :outer("593_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1421
    .const 'Sub' $P2620 = "595_1335114138.94729" 
    capture_lex $P2620
.annotate 'line', 1422
    new $P109, "Undef"
    set $P2618, $P109
    .lex "$stmts", $P2618
    get_hll_global $P110, "GLOBAL"
    nqp_get_package_through_who $P111, $P110, "PAST"
    get_who $P112, $P111
    set $P113, $P112["Stmts"]
    find_lex $P114, "$block"
    unless_null $P114, vivify_1927
    new $P114, "Undef"
  vivify_1927:
    $P115 = $P113."new"($P114 :named("node"))
    set $P2618, $P115
.annotate 'line', 1423
    find_lex $P111, "$block"
    unless_null $P111, vivify_1928
    new $P111, "Undef"
  vivify_1928:
    $P112 = $P111."list"()
    defined $I100, $P112
    unless $I100, for_undef_1929
    iter $P110, $P112
    new $P114, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P114, loop2622_handler
    push_eh $P114
  loop2622_test:
    unless $P110, loop2622_done
    shift $P113, $P110
  loop2622_redo:
    .const 'Sub' $P2620 = "595_1335114138.94729" 
    capture_lex $P2620
    $P2620($P113)
  loop2622_next:
    goto loop2622_test
  loop2622_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop2622_next
    eq $P115, .CONTROL_LOOP_REDO, loop2622_redo
  loop2622_done:
    pop_eh 
  for_undef_1929:
.annotate 'line', 1424
    set $P110, $P2618
    unless_null $P110, vivify_1932
    new $P110, "Undef"
  vivify_1932:
    store_lex "$block", $P110
.annotate 'line', 1421
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2619"  :anon :subid("595_1335114138.94729") :outer("594_1335114138.94729")
    .param pmc param_2621
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1423
    .lex "$_", param_2621
    find_lex $P114, "$stmts"
    unless_null $P114, vivify_1930
    new $P114, "Undef"
  vivify_1930:
    find_lex $P115, "$_"
    unless_null $P115, vivify_1931
    new $P115, "Undef"
  vivify_1931:
    $P116 = $P114."push"($P115)
    .return ($P116)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "vivitype"  :subid("596_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2626
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1429
    .lex "$sigil", param_2626
.annotate 'line', 1430
    set $P106, param_2626
    unless_null $P106, vivify_1934
    new $P106, "Undef"
  vivify_1934:
    set $S100, $P106
    iseq $I100, $S100, "%"
    if $I100, if_2627
.annotate 'line', 1432
    set $P113, param_2626
    unless_null $P113, vivify_1935
    new $P113, "Undef"
  vivify_1935:
    set $S101, $P113
    iseq $I101, $S101, "@"
    if $I101, if_2628
    new $P119, "String"
    assign $P119, "Undef"
    set $P112, $P119
    goto if_2628_end
  if_2628:
.annotate 'line', 1433
    get_hll_global $P114, "GLOBAL"
    nqp_get_package_through_who $P115, $P114, "PAST"
    get_who $P116, $P115
    set $P117, $P116["Op"]
    $P118 = $P117."new"("    %r = root_new ['parrot';'ResizablePMCArray']" :named("inline"))
    set $P112, $P118
  if_2628_end:
    set $P105, $P112
.annotate 'line', 1430
    goto if_2627_end
  if_2627:
.annotate 'line', 1431
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    $P111 = $P110."new"("    %r = root_new ['parrot';'Hash']" :named("inline"))
    set $P105, $P111
  if_2627_end:
.annotate 'line', 1429
    .return ($P105)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair_str"  :subid("597_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2632
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1448
    .lex "$ast", param_2632
.annotate 'line', 1449
    get_hll_global $P107, "GLOBAL"
    nqp_get_package_through_who $P108, $P107, "PAST"
    get_who $P109, $P108
    set $P110, $P109["Op"]
    set $P111, param_2632
    unless_null $P111, vivify_1936
    new $P111, "Undef"
  vivify_1936:
    $P112 = $P110."ACCEPTS"($P111)
    if $P112, if_2633
.annotate 'line', 1451
    set $P115, param_2632
    unless_null $P115, vivify_1937
    new $P115, "Undef"
  vivify_1937:
    $P116 = $P115."value"()
    set $P106, $P116
.annotate 'line', 1449
    goto if_2633_end
  if_2633:
.annotate 'line', 1450
    set $P113, param_2632
    unless_null $P113, vivify_1938
    new $P113, "Undef"
  vivify_1938:
    $P114 = $P113."list"()
    join $S100, " ", $P114
    new $P106, 'String'
    set $P106, $S100
  if_2633_end:
.annotate 'line', 1448
    .return ($P106)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "import_HOW_exports"  :subid("598_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2637
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1620
    .const 'Sub' $P2641 = "599_1335114138.94729" 
    capture_lex $P2641
    .lex "$UNIT", param_2637
.annotate 'line', 1622
    set $P108, param_2637
    unless_null $P108, vivify_1939
    new $P108, "Undef"
  vivify_1939:
    exists $I100, $P108["EXPORTHOW"]
    if $I100, if_2638
    new $P107, 'Integer'
    set $P107, $I100
    goto if_2638_end
  if_2638:
.annotate 'line', 1623
    set $P2639, param_2637
    unless_null $P2639, vivify_1940
    $P2639 = root_new ['parrot';'Hash']
  vivify_1940:
    set $P110, $P2639["EXPORTHOW"]
    unless_null $P110, vivify_1941
    new $P110, "Undef"
  vivify_1941:
    get_who $P111, $P110
    defined $I101, $P111
    unless $I101, for_undef_1942
    iter $P109, $P111
    new $P113, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P113, loop2643_handler
    push_eh $P113
  loop2643_test:
    unless $P109, loop2643_done
    shift $P112, $P109
  loop2643_redo:
    .const 'Sub' $P2641 = "599_1335114138.94729" 
    capture_lex $P2641
    $P2641($P112)
  loop2643_next:
    goto loop2643_test
  loop2643_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P115, exception, 'type'
    eq $P115, .CONTROL_LOOP_NEXT, loop2643_next
    eq $P115, .CONTROL_LOOP_REDO, loop2643_redo
  loop2643_done:
    pop_eh 
  for_undef_1942:
.annotate 'line', 1622
    set $P107, $P109
  if_2638_end:
.annotate 'line', 1620
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2640"  :anon :subid("599_1335114138.94729") :outer("598_1335114138.94729")
    .param pmc param_2642
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1623
    .lex "$_", param_2642
.annotate 'line', 1624
    find_lex $P113, "$_"
    unless_null $P113, vivify_1943
    new $P113, "Undef"
  vivify_1943:
    $P114 = $P113."value"()
    find_lex $P115, "$_"
    unless_null $P115, vivify_1944
    new $P115, "Undef"
  vivify_1944:
    $P116 = $P115."key"()
    find_dynamic_lex $P119, "%*HOW"
    unless_null $P119, vivify_1945
    get_hll_global $P117, "GLOBAL"
    get_who $P118, $P117
    set $P119, $P118["%HOW"]
    unless_null $P119, vivify_1946
    die "Contextual %*HOW not found"
  vivify_1946:
    store_dynamic_lex "%*HOW", $P119
  vivify_1945:
    set $P119[$P116], $P114
.annotate 'line', 1623
    .return ($P114)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "push_block_handler"  :subid("600_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2647
    .param pmc param_2648
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1725
    .lex "$/", param_2647
    .lex "$block", param_2648
.annotate 'line', 1726
    new $P108, "Undef"
    set $P2649, $P108
    .lex "$BLOCK", $P2649
    find_dynamic_lex $P111, "$*W"
    unless_null $P111, vivify_1947
    get_hll_global $P109, "GLOBAL"
    get_who $P110, $P109
    set $P111, $P110["$W"]
    unless_null $P111, vivify_1948
    die "Contextual $*W not found"
  vivify_1948:
  vivify_1947:
    $P112 = $P111."cur_lexpad"()
    set $P2649, $P112
.annotate 'line', 1727
    set $P109, $P2649
    unless_null $P109, vivify_1949
    new $P109, "Undef"
  vivify_1949:
    $P110 = $P109."handlers"()
    if $P110, unless_2650_end
.annotate 'line', 1728
    set $P111, $P2649
    unless_null $P111, vivify_1950
    new $P111, "Undef"
  vivify_1950:
    new $P112, "ResizablePMCArray"
    $P111."handlers"($P112)
  unless_2650_end:
.annotate 'line', 1730
    set $P109, param_2648
    unless_null $P109, vivify_1951
    new $P109, "Undef"
  vivify_1951:
    $P110 = $P109."arity"()
    if $P110, unless_2651_end
.annotate 'line', 1731
    set $P111, param_2648
    unless_null $P111, vivify_1952
    new $P111, "Undef"
  vivify_1952:
.annotate 'line', 1732
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Op"]
.annotate 'line', 1733
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Var"]
    $P120 = $P119."new"("lexical" :named("scope"), "$!" :named("name"), 1 :named("isdecl"))
.annotate 'line', 1734
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P122, $P121, "PAST"
    get_who $P123, $P122
    set $P124, $P123["Var"]
    $P125 = $P124."new"("lexical" :named("scope"), "$_" :named("name"))
    $P126 = $P115."new"($P120, $P125, "bind_6model" :named("pasttype"))
.annotate 'line', 1732
    $P111."unshift"($P126)
.annotate 'line', 1737
    set $P111, param_2648
    unless_null $P111, vivify_1953
    new $P111, "Undef"
  vivify_1953:
    get_hll_global $P112, "GLOBAL"
    nqp_get_package_through_who $P113, $P112, "PAST"
    get_who $P114, $P113
    set $P115, $P114["Var"]
    $P116 = $P115."new"("$_" :named("name"), "parameter" :named("scope"))
    $P111."unshift"($P116)
.annotate 'line', 1738
    set $P111, param_2648
    unless_null $P111, vivify_1954
    new $P111, "Undef"
  vivify_1954:
    $P111."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1739
    set $P111, param_2648
    unless_null $P111, vivify_1955
    new $P111, "Undef"
  vivify_1955:
    $P111."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1740
    set $P111, param_2648
    unless_null $P111, vivify_1956
    new $P111, "Undef"
  vivify_1956:
    $P111."arity"(1)
  unless_2651_end:
.annotate 'line', 1742
    set $P109, param_2648
    unless_null $P109, vivify_1957
    new $P109, "Undef"
  vivify_1957:
    $P109."blocktype"("declaration")
.annotate 'line', 1743
    set $P109, $P2649
    unless_null $P109, vivify_1958
    new $P109, "Undef"
  vivify_1958:
    $P110 = $P109."handlers"()
.annotate 'line', 1744
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Control"]
    set $P115, param_2647
    unless_null $P115, vivify_1959
    new $P115, "Undef"
  vivify_1959:
.annotate 'line', 1746
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P119, $P118["Stmts"]
.annotate 'line', 1747
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Op"]
    set $P124, param_2648
    unless_null $P124, vivify_1960
    new $P124, "Undef"
  vivify_1960:
.annotate 'line', 1749
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("register" :named("scope"), "exception" :named("name"))
    $P130 = $P123."new"($P124, $P129, "call" :named("pasttype"))
.annotate 'line', 1751
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Op"]
.annotate 'line', 1752
    get_hll_global $P135, "GLOBAL"
    nqp_get_package_through_who $P136, $P135, "PAST"
    get_who $P137, $P136
    set $P138, $P137["Var"]
.annotate 'line', 1753
    get_hll_global $P139, "GLOBAL"
    nqp_get_package_through_who $P140, $P139, "PAST"
    get_who $P141, $P140
    set $P142, $P141["Var"]
    $P143 = $P142."new"("register" :named("scope"), "exception" :named("name"))
    $P144 = $P138."new"($P143, "handled", "keyed" :named("scope"))
.annotate 'line', 1752
    $P145 = $P134."new"($P144, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1751
    $P146 = $P119."new"($P130, $P145)
.annotate 'line', 1746
    $P147 = $P114."new"($P146, $P115 :named("node"))
.annotate 'line', 1744
    $P148 = $P110."unshift"($P147)
.annotate 'line', 1725
    .return ($P148)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "only_star_block"  :subid("601_1335114138.94729") :outer("591_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2291
    new $P109, "Undef"
    set $P2655, $P109
    .lex "$past", $P2655
    find_dynamic_lex $P112, "$*W"
    unless_null $P112, vivify_1961
    get_hll_global $P110, "GLOBAL"
    get_who $P111, $P110
    set $P112, $P111["$W"]
    unless_null $P112, vivify_1962
    die "Contextual $*W not found"
  vivify_1962:
  vivify_1961:
    $P113 = $P112."pop_lexpad"()
    set $P2655, $P113
.annotate 'line', 2292
    set $P110, $P2655
    unless_null $P110, vivify_1963
    new $P110, "Undef"
  vivify_1963:
    $P110."closure"(1)
.annotate 'line', 2293
    set $P110, $P2655
    unless_null $P110, vivify_1964
    new $P110, "Undef"
  vivify_1964:
    get_hll_global $P111, "GLOBAL"
    nqp_get_package_through_who $P112, $P111, "PAST"
    get_who $P113, $P112
    set $P114, $P113["Op"]
    $P115 = $P114."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P110."push"($P115)
.annotate 'line', 2290
    set $P110, $P2655
    unless_null $P110, vivify_1965
    new $P110, "Undef"
  vivify_1965:
    .return ($P110)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature"  :subid("602_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2659
    .param pmc param_2660
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2299
    .const 'Sub' $P2665 = "603_1335114138.94729" 
    capture_lex $P2665
    .lex "$code_obj", param_2659
    .lex "$routine", param_2660
.annotate 'line', 2300
    new $P111, "Undef"
    set $P2661, $P111
    .lex "$types", $P2661
.annotate 'line', 2301
    new $P112, "Undef"
    set $P2662, $P112
    .lex "$definednesses", $P2662
.annotate 'line', 2300
    new $P113, "ResizablePMCArray"
    set $P2661, $P113
.annotate 'line', 2301
    new $P113, "ResizablePMCArray"
    set $P2662, $P113
.annotate 'line', 2302
    new $P114, "Float"
    assign $P114, 0
    set $I100, $P114
    set $P2663, param_2660
    unless_null $P2663, vivify_1966
    $P2663 = root_new ['parrot';'ResizablePMCArray']
  vivify_1966:
    set $P115, $P2663[$I100]
    unless_null $P115, vivify_1967
    new $P115, "Undef"
  vivify_1967:
    $P116 = $P115."list"()
    defined $I101, $P116
    unless $I101, for_undef_1968
    iter $P113, $P116
    new $P119, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P119, loop2674_handler
    push_eh $P119
  loop2674_test:
    unless $P113, loop2674_done
    shift $P117, $P113
  loop2674_redo:
    .const 'Sub' $P2665 = "603_1335114138.94729" 
    capture_lex $P2665
    $P2665($P117)
  loop2674_next:
    goto loop2674_test
  loop2674_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P120, exception, 'type'
    eq $P120, .CONTROL_LOOP_NEXT, loop2674_next
    eq $P120, .CONTROL_LOOP_REDO, loop2674_redo
  loop2674_done:
    pop_eh 
  for_undef_1968:
.annotate 'line', 2309
    find_dynamic_lex $P115, "$*W"
    unless_null $P115, vivify_1980
    get_hll_global $P113, "GLOBAL"
    get_who $P114, $P113
    set $P115, $P114["$W"]
    unless_null $P115, vivify_1981
    die "Contextual $*W not found"
  vivify_1981:
  vivify_1980:
    set $P116, param_2659
    unless_null $P116, vivify_1982
    new $P116, "Undef"
  vivify_1982:
    set $P117, $P2661
    unless_null $P117, vivify_1983
    new $P117, "Undef"
  vivify_1983:
    set $P118, $P2662
    unless_null $P118, vivify_1984
    new $P118, "Undef"
  vivify_1984:
    $P119 = $P115."set_routine_signature"($P116, $P117, $P118)
.annotate 'line', 2299
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2664"  :anon :subid("603_1335114138.94729") :outer("602_1335114138.94729")
    .param pmc param_2666
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2302
    .lex "$_", param_2666
.annotate 'line', 2303
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P122, $P121
    set $P123, $P122["Var"]
    find_lex $P124, "$_"
    unless_null $P124, vivify_1969
    new $P124, "Undef"
  vivify_1969:
    $P125 = $P123."ACCEPTS"($P124)
    if $P125, if_2668
    set $P119, $P125
    goto if_2668_end
  if_2668:
    find_lex $P126, "$_"
    unless_null $P126, vivify_1970
    new $P126, "Undef"
  vivify_1970:
    $S100 = $P126."scope"()
    iseq $I102, $S100, "parameter"
    new $P119, 'Integer'
    set $P119, $I102
  if_2668_end:
    if $P119, if_2667
    set $P118, $P119
    goto if_2667_end
  if_2667:
.annotate 'line', 2304
    find_lex $P127, "$types"
    unless_null $P127, vivify_1971
    new $P127, "Undef"
  vivify_1971:
    find_lex $P129, "$_"
    unless_null $P129, vivify_1972
    new $P129, "Undef"
  vivify_1972:
    $P130 = $P129."multitype"()
    if $P130, if_2669
    null $P134
    set $P128, $P134
    goto if_2669_end
  if_2669:
    find_lex $P131, "$_"
    unless_null $P131, vivify_1973
    new $P131, "Undef"
  vivify_1973:
    $P132 = $P131."multitype"()
    set $P133, $P132["compile_time_value"]
    unless_null $P133, vivify_1974
    new $P133, "Undef"
  vivify_1974:
    set $P128, $P133
  if_2669_end:
    $P127."push"($P128)
.annotate 'line', 2305
    find_lex $P127, "$definednesses"
    unless_null $P127, vivify_1975
    new $P127, "Undef"
  vivify_1975:
    find_lex $P2671, "$_"
    unless_null $P2671, vivify_1976
    $P2671 = root_new ['parrot';'Hash']
  vivify_1976:
    set $P129, $P2671["definedness"]
    unless_null $P129, vivify_1977
    new $P129, "Undef"
  vivify_1977:
    set $S101, $P129
    iseq $I103, $S101, "D"
    if $I103, if_2670
.annotate 'line', 2306
    find_lex $P2673, "$_"
    unless_null $P2673, vivify_1978
    $P2673 = root_new ['parrot';'Hash']
  vivify_1978:
    set $P132, $P2673["definedness"]
    unless_null $P132, vivify_1979
    new $P132, "Undef"
  vivify_1979:
    set $S102, $P132
    iseq $I104, $S102, "U"
    if $I104, if_2672
    new $P134, "Float"
    assign $P134, 0
    set $P131, $P134
    goto if_2672_end
  if_2672:
    new $P133, "Float"
    assign $P133, 2
    set $P131, $P133
  if_2672_end:
    set $P128, $P131
.annotate 'line', 2305
    goto if_2670_end
  if_2670:
    new $P130, "Float"
    assign $P130, 1
    set $P128, $P130
  if_2670_end:
    $P135 = $P127."push"($P128)
.annotate 'line', 2303
    set $P118, $P135
  if_2667_end:
.annotate 'line', 2302
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature_to_parrot_sub"  :subid("604_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2678
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2312
    .const 'Sub' $P2683 = "605_1335114138.94729" 
    capture_lex $P2683
    .lex "$routine", param_2678
.annotate 'line', 2316
    new $P113, "Undef"
    set $P2679, $P113
    .lex "$types", $P2679
.annotate 'line', 2317
    new $P114, "Undef"
    set $P2680, $P114
    .lex "$definednesses", $P2680
.annotate 'line', 2316
    new $P115, "ResizablePMCArray"
    set $P2679, $P115
.annotate 'line', 2317
    new $P115, "ResizablePMCArray"
    set $P2680, $P115
.annotate 'line', 2318
    new $P116, "Float"
    assign $P116, 0
    set $I100, $P116
    set $P2681, param_2678
    unless_null $P2681, vivify_1985
    $P2681 = root_new ['parrot';'ResizablePMCArray']
  vivify_1985:
    set $P117, $P2681[$I100]
    unless_null $P117, vivify_1986
    new $P117, "Undef"
  vivify_1986:
    $P118 = $P117."list"()
    defined $I101, $P118
    unless $I101, for_undef_1987
    iter $P115, $P118
    new $P122, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P122, loop2692_handler
    push_eh $P122
  loop2692_test:
    unless $P115, loop2692_done
    shift $P120, $P115
  loop2692_redo:
    .const 'Sub' $P2683 = "605_1335114138.94729" 
    capture_lex $P2683
    $P2683($P120)
  loop2692_next:
    goto loop2692_test
  loop2692_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P123, exception, 'type'
    eq $P123, .CONTROL_LOOP_NEXT, loop2692_next
    eq $P123, .CONTROL_LOOP_REDO, loop2692_redo
  loop2692_done:
    pop_eh 
  for_undef_1987:
.annotate 'line', 2325
    find_dynamic_lex $P117, "$*W"
    unless_null $P117, vivify_1999
    get_hll_global $P115, "GLOBAL"
    get_who $P116, $P115
    set $P117, $P116["$W"]
    unless_null $P117, vivify_2000
    die "Contextual $*W not found"
  vivify_2000:
  vivify_1999:
    set $P118, param_2678
    unless_null $P118, vivify_2001
    new $P118, "Undef"
  vivify_2001:
    set $P120, $P2679
    unless_null $P120, vivify_2002
    new $P120, "Undef"
  vivify_2002:
    set $P121, $P2680
    unless_null $P121, vivify_2003
    new $P121, "Undef"
  vivify_2003:
    $P122 = $P117."set_routine_signature_on_parrot_sub"($P118, $P120, $P121)
.annotate 'line', 2312
    .return ($P122)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2682"  :anon :subid("605_1335114138.94729") :outer("604_1335114138.94729")
    .param pmc param_2684
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2318
    .lex "$_", param_2684
.annotate 'line', 2319
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    find_lex $P127, "$_"
    unless_null $P127, vivify_1988
    new $P127, "Undef"
  vivify_1988:
    $P128 = $P126."ACCEPTS"($P127)
    if $P128, if_2686
    set $P122, $P128
    goto if_2686_end
  if_2686:
    find_lex $P129, "$_"
    unless_null $P129, vivify_1989
    new $P129, "Undef"
  vivify_1989:
    $S100 = $P129."scope"()
    iseq $I102, $S100, "parameter"
    new $P122, 'Integer'
    set $P122, $I102
  if_2686_end:
    if $P122, if_2685
    set $P121, $P122
    goto if_2685_end
  if_2685:
.annotate 'line', 2320
    find_lex $P130, "$types"
    unless_null $P130, vivify_1990
    new $P130, "Undef"
  vivify_1990:
    find_lex $P132, "$_"
    unless_null $P132, vivify_1991
    new $P132, "Undef"
  vivify_1991:
    $P133 = $P132."multitype"()
    if $P133, if_2687
    null $P137
    set $P131, $P137
    goto if_2687_end
  if_2687:
    find_lex $P134, "$_"
    unless_null $P134, vivify_1992
    new $P134, "Undef"
  vivify_1992:
    $P135 = $P134."multitype"()
    set $P136, $P135["compile_time_value"]
    unless_null $P136, vivify_1993
    new $P136, "Undef"
  vivify_1993:
    set $P131, $P136
  if_2687_end:
    $P130."push"($P131)
.annotate 'line', 2321
    find_lex $P130, "$definednesses"
    unless_null $P130, vivify_1994
    new $P130, "Undef"
  vivify_1994:
    find_lex $P2689, "$_"
    unless_null $P2689, vivify_1995
    $P2689 = root_new ['parrot';'Hash']
  vivify_1995:
    set $P132, $P2689["definedness"]
    unless_null $P132, vivify_1996
    new $P132, "Undef"
  vivify_1996:
    set $S101, $P132
    iseq $I103, $S101, "D"
    if $I103, if_2688
.annotate 'line', 2322
    find_lex $P2691, "$_"
    unless_null $P2691, vivify_1997
    $P2691 = root_new ['parrot';'Hash']
  vivify_1997:
    set $P135, $P2691["definedness"]
    unless_null $P135, vivify_1998
    new $P135, "Undef"
  vivify_1998:
    set $S102, $P135
    iseq $I104, $S102, "U"
    if $I104, if_2690
    new $P137, "Float"
    assign $P137, 0
    set $P134, $P137
    goto if_2690_end
  if_2690:
    new $P136, "Float"
    assign $P136, 2
    set $P134, $P136
  if_2690_end:
    set $P131, $P134
.annotate 'line', 2321
    goto if_2688_end
  if_2688:
    new $P133, "Float"
    assign $P133, 1
    set $P131, $P133
  if_2688_end:
    $P138 = $P130."push"($P131)
.annotate 'line', 2319
    set $P121, $P138
  if_2685_end:
.annotate 'line', 2318
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "control"  :subid("606_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2696
    .param pmc param_2697
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2795
    .lex "$/", param_2696
    .lex "$type", param_2697
.annotate 'line', 2796
    set $P115, param_2696
    get_hll_global $P116, "GLOBAL"
    nqp_get_package_through_who $P117, $P116, "PAST"
    get_who $P118, $P117
    set $P120, $P118["Op"]
    set $P121, param_2696
    unless_null $P121, vivify_2004
    new $P121, "Undef"
  vivify_2004:
.annotate 'line', 2800
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Val"]
    set $P127, param_2697
    unless_null $P127, vivify_2005
    new $P127, "Undef"
  vivify_2005:
    $P128 = $P126."new"($P127 :named("value"), "!macro_const" :named("returns"))
    $P129 = $P120."new"(0, $P128, $P121 :named("node"), "die__vii" :named("pirop"))
.annotate 'line', 2796
    $P130 = $P115."!make"($P129)
.annotate 'line', 2795
    .return ($P130)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "lexical_package_lookup"  :subid("607_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2703
    .param pmc param_2704
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2814
    .const 'Sub' $P2713 = "608_1335114138.94729" 
    capture_lex $P2713
    new $P2702, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P2702, control_2701
    push_eh $P2702
    .lex "@name", param_2703
    .lex "$/", param_2704
.annotate 'line', 2820
    new $P115, "Undef"
    set $P2705, $P115
    .lex "$final_name", $P2705
.annotate 'line', 2821
    new $P116, "Undef"
    set $P2706, $P116
    .lex "$lookup", $P2706
.annotate 'line', 2816
    set $P2708, param_2703
    unless_null $P2708, vivify_2006
    $P2708 = root_new ['parrot';'ResizablePMCArray']
  vivify_2006:
    set $N100, $P2708
    set $N101, 0
    iseq $I100, $N100, $N101
    unless $I100, if_2707_end
    set $P117, param_2704
    unless_null $P117, vivify_2007
    new $P117, "Undef"
  vivify_2007:
    $P118 = $P117."CURSOR"()
    $P118."panic"("Cannot compile empty name")
  if_2707_end:
.annotate 'line', 2820
    set $P2709, param_2703
    unless_null $P2709, vivify_2008
    $P2709 = root_new ['parrot';'ResizablePMCArray']
  vivify_2008:
    $P117 = $P2709."pop"()
    set $P2705, $P117
.annotate 'line', 2821
    get_hll_global $P117, "GLOBAL"
    nqp_get_package_through_who $P118, $P117, "PAST"
    get_who $P120, $P118
    set $P121, $P120["Var"]
    set $P123, $P2705
    unless_null $P123, vivify_2009
    new $P123, "Undef"
  vivify_2009:
    set $S100, $P123
    $P124 = $P121."new"($S100, "keyed" :named("scope"))
    set $P2706, $P124
.annotate 'line', 2825
    set $P2711, param_2703
    unless_null $P2711, vivify_2010
    $P2711 = root_new ['parrot';'ResizablePMCArray']
  vivify_2010:
    set $N100, $P2711
    set $N101, 0
    iseq $I100, $N100, $N101
    if $I100, if_2710
.annotate 'line', 2843
    .const 'Sub' $P2713 = "608_1335114138.94729" 
    capture_lex $P2713
    $P2713()
    goto if_2710_end
  if_2710:
.annotate 'line', 2826
    set $P117, $P2706
    unless_null $P117, vivify_2025
    new $P117, "Undef"
  vivify_2025:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P120, $P118, "PAST"
    get_who $P121, $P120
    set $P123, $P121["Op"]
.annotate 'line', 2828
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P129 = $P123."new"($P128, "get_who PP" :named("pirop"))
.annotate 'line', 2826
    $P117."unshift"($P129)
.annotate 'line', 2830
    set $P117, $P2706
    unless_null $P117, vivify_2026
    new $P117, "Undef"
  vivify_2026:
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P120, $P118, "PAST"
    get_who $P121, $P120
    set $P123, $P121["Var"]
.annotate 'line', 2832
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
.annotate 'line', 2834
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    new $P133, "ResizablePMCArray"
    $P134 = $P132."new"("GLOBAL" :named("name"), $P133 :named("namespace"), "package" :named("scope"))
    $P135 = $P127."new"($P134, "get_who PP" :named("pirop"))
.annotate 'line', 2836
    set $P136, $P2705
    unless_null $P136, vivify_2027
    new $P136, "Undef"
  vivify_2027:
    set $S100, $P136
    $P137 = $P123."new"($P135, $S100, "keyed" :named("scope"))
.annotate 'line', 2830
    $P117."viviself"($P137)
  if_2710_end:
.annotate 'line', 2858
    new $P117, "Exception"
    set $P117['type'], .CONTROL_RETURN
    set $P118, $P2706
    unless_null $P118, vivify_2028
    new $P118, "Undef"
  vivify_2028:
    setattribute $P117, 'payload', $P118
    throw $P117
.annotate 'line', 2814
    .return ()
  control_2701:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P117, exception, "payload"
    .return ($P117)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2712"  :anon :subid("608_1335114138.94729") :outer("607_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2843
    .const 'Sub' $P2723 = "609_1335114138.94729" 
    capture_lex $P2723
.annotate 'line', 2844
    new $P117, "Undef"
    set $P2714, $P117
    .lex "$path", $P2714
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2011
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_2012
    die "Contextual $*W not found"
  vivify_2012:
  vivify_2011:
    new $P124, "Float"
    assign $P124, 0
    set $I101, $P124
    find_lex $P2716, "@name"
    unless_null $P2716, vivify_2013
    $P2716 = root_new ['parrot';'ResizablePMCArray']
  vivify_2013:
    set $P125, $P2716[$I101]
    unless_null $P125, vivify_2014
    new $P125, "Undef"
  vivify_2014:
    $P126 = $P123."is_lexical"($P125)
    if $P126, if_2715
.annotate 'line', 2846
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    new $P138, "ResizablePMCArray"
    $P139 = $P137."new"("GLOBAL" :named("name"), $P138 :named("namespace"), "package" :named("scope"))
    set $P118, $P139
.annotate 'line', 2844
    goto if_2715_end
  if_2715:
.annotate 'line', 2845
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    find_lex $P2717, "@name"
    unless_null $P2717, vivify_2015
    $P2717 = root_new ['parrot';'ResizablePMCArray']
  vivify_2015:
    $P132 = $P2717."shift"()
    $P133 = $P131."new"($P132 :named("name"), "lexical" :named("scope"))
    set $P118, $P133
  if_2715_end:
.annotate 'line', 2844
    set $P2714, $P118
.annotate 'line', 2847
    new $P118, "Float"
    assign $P118, 0
    set $I101, $P118
    find_lex $P2719, "@name"
    unless_null $P2719, vivify_2016
    $P2719 = root_new ['parrot';'ResizablePMCArray']
  vivify_2016:
    set $P120, $P2719[$I101]
    unless_null $P120, vivify_2017
    new $P120, "Undef"
  vivify_2017:
    set $S100, $P120
    iseq $I102, $S100, "GLOBAL"
    unless $I102, if_2718_end
.annotate 'line', 2848
    find_lex $P2720, "@name"
    unless_null $P2720, vivify_2018
    $P2720 = root_new ['parrot';'ResizablePMCArray']
  vivify_2018:
    $P2720."shift"()
  if_2718_end:
.annotate 'line', 2850
    find_lex $P2721, "@name"
    unless_null $P2721, vivify_2019
    $P2721 = root_new ['parrot';'ResizablePMCArray']
  vivify_2019:
    defined $I101, $P2721
    unless $I101, for_undef_2020
    iter $P118, $P2721
    new $P121, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P121, loop2725_handler
    push_eh $P121
  loop2725_test:
    unless $P118, loop2725_done
    shift $P120, $P118
  loop2725_redo:
    .const 'Sub' $P2723 = "609_1335114138.94729" 
    capture_lex $P2723
    $P2723($P120)
  loop2725_next:
    goto loop2725_test
  loop2725_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P123, exception, 'type'
    eq $P123, .CONTROL_LOOP_NEXT, loop2725_next
    eq $P123, .CONTROL_LOOP_REDO, loop2725_redo
  loop2725_done:
    pop_eh 
  for_undef_2020:
.annotate 'line', 2855
    find_lex $P118, "$lookup"
    unless_null $P118, vivify_2023
    new $P118, "Undef"
  vivify_2023:
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P125, $P2714
    unless_null $P125, vivify_2024
    new $P125, "Undef"
  vivify_2024:
    $P126 = $P124."new"($P125, "get_who PP" :named("pirop"))
    $P127 = $P118."unshift"($P126)
.annotate 'line', 2843
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2722"  :anon :subid("609_1335114138.94729") :outer("608_1335114138.94729")
    .param pmc param_2724
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2850
    .lex "$_", param_2724
.annotate 'line', 2851
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    find_lex $P126, "$path"
    unless_null $P126, vivify_2021
    new $P126, "Undef"
  vivify_2021:
.annotate 'line', 2853
    find_lex $P127, "$_"
    unless_null $P127, vivify_2022
    new $P127, "Undef"
  vivify_2022:
    set $S100, $P127
    $P128 = $P125."new"($P126, $S100, "nqp_get_package_through_who PPs" :named("pirop"))
.annotate 'line', 2851
    store_lex "$path", $P128
.annotate 'line', 2850
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "TOP" :anon :subid("422_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2730
    .param pmc param_2731
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1438
    .lex "self", param_2730
    .lex "$/", param_2731
    set $P118, param_2731
    set $P2732, param_2731
    unless_null $P2732, vivify_2029
    $P2732 = root_new ['parrot';'Hash']
  vivify_2029:
    set $P120, $P2732["comp_unit"]
    unless_null $P120, vivify_2030
    new $P120, "Undef"
  vivify_2030:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "deflongname" :anon :subid("423_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2734
    .param pmc param_2735
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1440
    .lex "self", param_2734
    .lex "$/", param_2735
.annotate 'line', 1441
    set $P118, param_2735
.annotate 'line', 1442
    set $P2737, param_2735
    unless_null $P2737, vivify_2031
    $P2737 = root_new ['parrot';'Hash']
  vivify_2031:
    set $P121, $P2737["colonpair"]
    unless_null $P121, vivify_2032
    new $P121, "Undef"
  vivify_2032:
    if $P121, if_2736
.annotate 'line', 1444
    set $P137, param_2735
    unless_null $P137, vivify_2033
    new $P137, "Undef"
  vivify_2033:
    set $S103, $P137
    new $P120, 'String'
    set $P120, $S103
.annotate 'line', 1442
    goto if_2736_end
  if_2736:
    set $P2738, param_2735
    unless_null $P2738, vivify_2034
    $P2738 = root_new ['parrot';'Hash']
  vivify_2034:
    set $P123, $P2738["identifier"]
    unless_null $P123, vivify_2035
    new $P123, "Undef"
  vivify_2035:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    concat $P125, $P124, ":"
    new $P126, "Float"
    assign $P126, 0
    set $I100, $P126
    set $P2739, param_2735
    unless_null $P2739, vivify_2036
    $P2739 = root_new ['parrot';'Hash']
  vivify_2036:
    set $P2740, $P2739["colonpair"]
    unless_null $P2740, vivify_2037
    $P2740 = root_new ['parrot';'ResizablePMCArray']
  vivify_2037:
    set $P127, $P2740[$I100]
    unless_null $P127, vivify_2038
    new $P127, "Undef"
  vivify_2038:
    $P128 = $P127."ast"()
    $S101 = $P128."named"()
    concat $P129, $P125, $S101
    concat $P131, $P129, "<"
.annotate 'line', 1443
    new $P132, "Float"
    assign $P132, 0
    set $I101, $P132
    set $P2741, param_2735
    unless_null $P2741, vivify_2039
    $P2741 = root_new ['parrot';'Hash']
  vivify_2039:
    set $P2742, $P2741["colonpair"]
    unless_null $P2742, vivify_2040
    $P2742 = root_new ['parrot';'ResizablePMCArray']
  vivify_2040:
    set $P133, $P2742[$I101]
    unless_null $P133, vivify_2041
    new $P133, "Undef"
  vivify_2041:
    $P134 = $P133."ast"()
    $S102 = "colonpair_str"($P134)
    concat $P135, $P131, $S102
    concat $P136, $P135, ">"
    set $P120, $P136
  if_2736_end:
.annotate 'line', 1442
    $P138 = $P118."!make"($P120)
.annotate 'line', 1440
    .return ($P138)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "comp_unit" :anon :subid("424_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2744
    .param pmc param_2745
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1454
    .lex "self", param_2744
    .lex "$/", param_2745
.annotate 'line', 1455
    new $P118, "Undef"
    set $P2746, $P118
    .lex "$mainline", $P2746
.annotate 'line', 1456
    new $P120, "Undef"
    set $P2747, $P120
    .lex "$unit", $P2747
.annotate 'line', 1484
    new $P121, "Undef"
    set $P2748, $P121
    .lex "$main_tasks", $P2748
.annotate 'line', 1455
    set $P2749, param_2745
    unless_null $P2749, vivify_2042
    $P2749 = root_new ['parrot';'Hash']
  vivify_2042:
    set $P123, $P2749["statementlist"]
    unless_null $P123, vivify_2043
    new $P123, "Undef"
  vivify_2043:
    $P124 = $P123."ast"()
    set $P2746, $P124
.annotate 'line', 1456
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2044
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2045
    die "Contextual $*W not found"
  vivify_2045:
  vivify_2044:
    $P126 = $P125."pop_lexpad"()
    set $P2747, $P126
.annotate 'line', 1460
    set $P123, $P2747
    unless_null $P123, vivify_2046
    new $P123, "Undef"
  vivify_2046:
    $P124 = $P123."loadinit"()
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2047
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2048
    die "Contextual $*W not found"
  vivify_2048:
  vivify_2047:
    $P128 = $P127."to_past"()
    $P124."push"($P128)
.annotate 'line', 1465
    set $P123, $P2747
    unless_null $P123, vivify_2049
    new $P123, "Undef"
  vivify_2049:
    $P124 = $P123."loadinit"()
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Op"]
.annotate 'line', 1467
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    new $P134, "ResizablePMCArray"
    $P135 = $P133."new"("GLOBAL" :named("name"), $P134 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1468
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_2050
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_2051
    die "Contextual $*W not found"
  vivify_2051:
  vivify_2050:
    find_dynamic_lex $P141, "$*PACKAGE"
    unless_null $P141, vivify_2052
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$PACKAGE"]
    unless_null $P141, vivify_2053
    die "Contextual $*PACKAGE not found"
  vivify_2053:
  vivify_2052:
    $P142 = $P138."get_slot_past_for_object"($P141)
    $P143 = $P128."new"($P135, $P142, "bind_6model" :named("pasttype"))
.annotate 'line', 1465
    $P124."push"($P143)
.annotate 'line', 1474
    find_dynamic_lex $P125, "$*HAS_YOU_ARE_HERE"
    unless_null $P125, vivify_2054
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$HAS_YOU_ARE_HERE"]
    unless_null $P125, vivify_2055
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_2055:
  vivify_2054:
    if $P125, unless_2750_end
.annotate 'line', 1475
    set $P126, $P2747
    unless_null $P126, vivify_2056
    new $P126, "Undef"
  vivify_2056:
    set $P127, param_2744
    nqp_decontainerize $P128, $P127
    $P129 = $P128."CTXSAVE"()
    $P126."push"($P129)
  unless_2750_end:
.annotate 'line', 1482
    set $P123, $P2747
    unless_null $P123, vivify_2057
    new $P123, "Undef"
  vivify_2057:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
    $P128 = $P127."new"("parameter" :named("scope"), "@ARGS" :named("name"), 1 :named("slurpy"), 1 :named("directaccess"))
    $P123."unshift"($P128)
.annotate 'line', 1484
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Stmts"]
.annotate 'line', 1485
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
    $P132 = $P131."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 1486
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
.annotate 'line', 1488
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Var"]
    new $P141, "ResizablePMCArray"
    $P142 = $P140."new"("ModuleLoader" :named("name"), $P141 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1489
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "PAST"
    get_who $P145, $P144
    set $P146, $P145["Var"]
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Op"]
    $P152 = $P151."new"("getinterp P" :named("pirop"))
    $P153 = $P146."new"($P152, "context", "keyed" :named("scope"))
    $P154 = $P136."new"($P142, $P153, "callmethod" :named("pasttype"), "set_mainline_module" :named("name"))
.annotate 'line', 1486
    $P155 = $P126."new"($P132, $P154)
.annotate 'line', 1484
    set $P2748, $P155
.annotate 'line', 1492
    find_dynamic_lex $P125, "$*MAIN_SUB"
    unless_null $P125, vivify_2058
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$MAIN_SUB"]
    unless_null $P125, vivify_2059
    die "Contextual $*MAIN_SUB not found"
  vivify_2059:
  vivify_2058:
    unless $P125, if_2751_end
.annotate 'line', 1493
    set $P126, $P2748
    unless_null $P126, vivify_2060
    new $P126, "Undef"
  vivify_2060:
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
.annotate 'line', 1494
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Val"]
    find_dynamic_lex $P138, "$*MAIN_SUB"
    unless_null $P138, vivify_2061
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$MAIN_SUB"]
    unless_null $P138, vivify_2062
    die "Contextual $*MAIN_SUB not found"
  vivify_2062:
  vivify_2061:
    $P139 = $P135."new"($P138 :named("value"))
.annotate 'line', 1495
    get_hll_global $P140, "GLOBAL"
    nqp_get_package_through_who $P141, $P140, "PAST"
    get_who $P142, $P141
    set $P143, $P142["Var"]
    $P144 = $P143."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P145 = $P131."new"($P139, $P144, "call" :named("pasttype"))
.annotate 'line', 1493
    $P126."push"($P145)
  if_2751_end:
.annotate 'line', 1498
    set $P123, $P2746
    unless_null $P123, vivify_2063
    new $P123, "Undef"
  vivify_2063:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
.annotate 'line', 1500
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
    $P133 = $P132."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    set $P134, $P2748
    unless_null $P134, vivify_2064
    new $P134, "Undef"
  vivify_2064:
    $P135 = $P127."new"($P133, $P134, "if" :named("pasttype"))
.annotate 'line', 1498
    $P123."push"($P135)
.annotate 'line', 1507
    set $P123, $P2747
    unless_null $P123, vivify_2065
    new $P123, "Undef"
  vivify_2065:
.annotate 'line', 1508
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Op"]
    set $P128, $P2746
    unless_null $P128, vivify_2066
    new $P128, "Undef"
  vivify_2066:
    $P129 = $P127."new"($P128, "return" :named("pirop"))
    $P123."push"($P129)
.annotate 'line', 1513
    set $P123, $P2747
    unless_null $P123, vivify_2067
    new $P123, "Undef"
  vivify_2067:
.annotate 'line', 1514
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Block"]
.annotate 'line', 1516
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Op"]
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Val"]
    set $P137, $P2747
    unless_null $P137, vivify_2068
    new $P137, "Undef"
  vivify_2068:
    $P138 = $P136."new"($P137 :named("value"))
    $P139 = $P132."new"($P138, "call" :named("pasttype"))
    $P140 = $P127."new"($P139, ":load" :named("pirflags"), 0 :named("lexical"), "" :named("namespace"))
.annotate 'line', 1514
    $P123."push"($P140)
.annotate 'line', 1519
    set $P123, $P2747
    unless_null $P123, vivify_2069
    new $P123, "Undef"
  vivify_2069:
    set $P124, param_2745
    unless_null $P124, vivify_2070
    new $P124, "Undef"
  vivify_2070:
    $P123."node"($P124)
.annotate 'line', 1522
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2071
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2072
    die "Contextual $*W not found"
  vivify_2072:
  vivify_2071:
    set $P126, $P2747
    unless_null $P126, vivify_2073
    new $P126, "Undef"
  vivify_2073:
    $P125."set_nqp_language_defaults"($P126)
.annotate 'line', 1524
    set $P123, param_2745
    set $P124, $P2747
    unless_null $P124, vivify_2074
    new $P124, "Undef"
  vivify_2074:
    $P125 = $P123."!make"($P124)
.annotate 'line', 1454
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statementlist" :anon :subid("425_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2753
    .param pmc param_2754
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1527
    .const 'Sub' $P2760 = "610_1335114138.94729" 
    capture_lex $P2760
    .lex "self", param_2753
    .lex "$/", param_2754
.annotate 'line', 1528
    new $P118, "Undef"
    set $P2755, $P118
    .lex "$past", $P2755
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Stmts"]
    set $P125, param_2754
    unless_null $P125, vivify_2075
    new $P125, "Undef"
  vivify_2075:
    $P126 = $P124."new"($P125 :named("node"))
    set $P2755, $P126
.annotate 'line', 1529
    set $P2757, param_2754
    unless_null $P2757, vivify_2076
    $P2757 = root_new ['parrot';'Hash']
  vivify_2076:
    set $P120, $P2757["statement"]
    unless_null $P120, vivify_2077
    new $P120, "Undef"
  vivify_2077:
    unless $P120, if_2756_end
.annotate 'line', 1530
    set $P2758, param_2754
    unless_null $P2758, vivify_2078
    $P2758 = root_new ['parrot';'Hash']
  vivify_2078:
    set $P123, $P2758["statement"]
    unless_null $P123, vivify_2079
    new $P123, "Undef"
  vivify_2079:
    defined $I100, $P123
    unless $I100, for_undef_2080
    iter $P121, $P123
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop2769_handler
    push_eh $P126
  loop2769_test:
    unless $P121, loop2769_done
    shift $P124, $P121
  loop2769_redo:
    .const 'Sub' $P2760 = "610_1335114138.94729" 
    capture_lex $P2760
    $P2760($P124)
  loop2769_next:
    goto loop2769_test
  loop2769_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop2769_next
    eq $P127, .CONTROL_LOOP_REDO, loop2769_redo
  loop2769_done:
    pop_eh 
  for_undef_2080:
  if_2756_end:
.annotate 'line', 1538
    set $P120, param_2754
    set $P121, $P2755
    unless_null $P121, vivify_2093
    new $P121, "Undef"
  vivify_2093:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1527
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2759"  :anon :subid("610_1335114138.94729") :outer("425_1335114138.94729")
    .param pmc param_2762
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1531
    new $P125, "Undef"
    set $P2761, $P125
    .lex "$ast", $P2761
    .lex "$_", param_2762
    find_lex $P126, "$_"
    unless_null $P126, vivify_2081
    new $P126, "Undef"
  vivify_2081:
    $P127 = $P126."ast"()
    set $P2761, $P127
.annotate 'line', 1532
    set $P2764, $P2761
    unless_null $P2764, vivify_2082
    $P2764 = root_new ['parrot';'Hash']
  vivify_2082:
    set $P126, $P2764["sink"]
    unless_null $P126, vivify_2083
    new $P126, "Undef"
  vivify_2083:
    defined $I101, $P126
    unless $I101, if_2763_end
    set $P2765, $P2761
    unless_null $P2765, vivify_2084
    $P2765 = root_new ['parrot';'Hash']
  vivify_2084:
    set $P127, $P2765["sink"]
    unless_null $P127, vivify_2085
    new $P127, "Undef"
  vivify_2085:
    set $P2761, $P127
  if_2763_end:
.annotate 'line', 1533
    set $P2767, $P2761
    unless_null $P2767, vivify_2086
    $P2767 = root_new ['parrot';'Hash']
  vivify_2086:
    set $P126, $P2767["bareblock"]
    unless_null $P126, vivify_2087
    new $P126, "Undef"
  vivify_2087:
    unless $P126, if_2766_end
    set $P127, $P2761
    unless_null $P127, vivify_2088
    new $P127, "Undef"
  vivify_2088:
    $P128 = "block_immediate"($P127)
    set $P2761, $P128
  if_2766_end:
.annotate 'line', 1534
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Node"]
    set $P131, $P2761
    unless_null $P131, vivify_2089
    new $P131, "Undef"
  vivify_2089:
    $P132 = $P129."ACCEPTS"($P131)
    unless $P132, if_2768_end
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Stmt"]
    set $P137, $P2761
    unless_null $P137, vivify_2090
    new $P137, "Undef"
  vivify_2090:
    $P138 = $P136."new"($P137)
    set $P2761, $P138
  if_2768_end:
.annotate 'line', 1535
    find_lex $P126, "$past"
    unless_null $P126, vivify_2091
    new $P126, "Undef"
  vivify_2091:
    set $P127, $P2761
    unless_null $P127, vivify_2092
    new $P127, "Undef"
  vivify_2092:
    $P128 = $P126."push"($P127)
.annotate 'line', 1530
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement" :anon :subid("426_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2771
    .param pmc param_2772
    .param pmc param_2773 :optional
    .param int has_param_2773 :opt_flag
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1541
    .const 'Sub' $P2778 = "611_1335114138.94729" 
    capture_lex $P2778
    .lex "self", param_2771
    .lex "$/", param_2772
    if has_param_2773, optparam_2094
    new $P118, "Undef"
    set param_2773, $P118
  optparam_2094:
    .lex "$key", param_2773
.annotate 'line', 1542
    new $P120, "Undef"
    set $P2774, $P120
    .lex "$past", $P2774
.annotate 'line', 1541
    set $P121, $P2774
    unless_null $P121, vivify_2095
    new $P121, "Undef"
  vivify_2095:
.annotate 'line', 1543
    set $P2776, param_2772
    unless_null $P2776, vivify_2096
    $P2776 = root_new ['parrot';'Hash']
  vivify_2096:
    set $P121, $P2776["EXPR"]
    unless_null $P121, vivify_2097
    new $P121, "Undef"
  vivify_2097:
    if $P121, if_2775
.annotate 'line', 1564
    set $P2797, param_2772
    unless_null $P2797, vivify_2098
    $P2797 = root_new ['parrot';'Hash']
  vivify_2098:
    set $P126, $P2797["statement_control"]
    unless_null $P126, vivify_2099
    new $P126, "Undef"
  vivify_2099:
    if $P126, if_2796
.annotate 'line', 1565
    new $P127, "Float"
    assign $P127, 0
    set $P2774, $P127
    goto if_2796_end
  if_2796:
.annotate 'line', 1564
    set $P2798, param_2772
    unless_null $P2798, vivify_2100
    $P2798 = root_new ['parrot';'Hash']
  vivify_2100:
    set $P127, $P2798["statement_control"]
    unless_null $P127, vivify_2101
    new $P127, "Undef"
  vivify_2101:
    $P128 = $P127."ast"()
    set $P2774, $P128
  if_2796_end:
    goto if_2775_end
  if_2775:
.annotate 'line', 1543
    .const 'Sub' $P2778 = "611_1335114138.94729" 
    capture_lex $P2778
    $P2778()
  if_2775_end:
.annotate 'line', 1566
    set $P121, param_2772
    set $P123, $P2774
    unless_null $P123, vivify_2135
    new $P123, "Undef"
  vivify_2135:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1541
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2777"  :anon :subid("611_1335114138.94729") :outer("426_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1544
    new $P123, "Undef"
    set $P2779, $P123
    .lex "$mc", $P2779
.annotate 'line', 1545
    new $P124, "Undef"
    set $P2780, $P124
    .lex "$ml", $P2780
.annotate 'line', 1544
    new $P125, "Float"
    assign $P125, 0
    set $I100, $P125
    find_lex $P2781, "$/"
    unless_null $P2781, vivify_2102
    $P2781 = root_new ['parrot';'Hash']
  vivify_2102:
    set $P2782, $P2781["statement_mod_cond"]
    unless_null $P2782, vivify_2103
    $P2782 = root_new ['parrot';'ResizablePMCArray']
  vivify_2103:
    set $P126, $P2782[$I100]
    unless_null $P126, vivify_2104
    new $P126, "Undef"
  vivify_2104:
    set $P2779, $P126
.annotate 'line', 1545
    new $P125, "Float"
    assign $P125, 0
    set $I100, $P125
    find_lex $P2783, "$/"
    unless_null $P2783, vivify_2105
    $P2783 = root_new ['parrot';'Hash']
  vivify_2105:
    set $P2784, $P2783["statement_mod_loop"]
    unless_null $P2784, vivify_2106
    $P2784 = root_new ['parrot';'ResizablePMCArray']
  vivify_2106:
    set $P126, $P2784[$I100]
    unless_null $P126, vivify_2107
    new $P126, "Undef"
  vivify_2107:
    set $P2780, $P126
.annotate 'line', 1546
    find_lex $P2785, "$/"
    unless_null $P2785, vivify_2108
    $P2785 = root_new ['parrot';'Hash']
  vivify_2108:
    set $P125, $P2785["EXPR"]
    unless_null $P125, vivify_2109
    new $P125, "Undef"
  vivify_2109:
    $P126 = $P125."ast"()
    store_lex "$past", $P126
.annotate 'line', 1547
    set $P125, $P2779
    unless_null $P125, vivify_2110
    new $P125, "Undef"
  vivify_2110:
    unless $P125, if_2786_end
.annotate 'line', 1548
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P2787, $P2779
    unless_null $P2787, vivify_2111
    $P2787 = root_new ['parrot';'Hash']
  vivify_2111:
    set $P131, $P2787["cond"]
    unless_null $P131, vivify_2112
    new $P131, "Undef"
  vivify_2112:
    $P132 = $P131."ast"()
    find_lex $P133, "$past"
    unless_null $P133, vivify_2113
    new $P133, "Undef"
  vivify_2113:
    set $P2788, $P2779
    unless_null $P2788, vivify_2114
    $P2788 = root_new ['parrot';'Hash']
  vivify_2114:
    set $P134, $P2788["sym"]
    unless_null $P134, vivify_2115
    new $P134, "Undef"
  vivify_2115:
    set $S100, $P134
    find_lex $P135, "$/"
    unless_null $P135, vivify_2116
    new $P135, "Undef"
  vivify_2116:
    $P136 = $P129."new"($P132, $P133, $S100 :named("pasttype"), $P135 :named("node"))
    store_lex "$past", $P136
  if_2786_end:
.annotate 'line', 1550
    set $P126, $P2780
    unless_null $P126, vivify_2117
    new $P126, "Undef"
  vivify_2117:
    if $P126, if_2789
    set $P125, $P126
    goto if_2789_end
  if_2789:
.annotate 'line', 1551
    set $P2791, $P2780
    unless_null $P2791, vivify_2118
    $P2791 = root_new ['parrot';'Hash']
  vivify_2118:
    set $P128, $P2791["sym"]
    unless_null $P128, vivify_2119
    new $P128, "Undef"
  vivify_2119:
    set $S100, $P128
    iseq $I100, $S100, "for"
    if $I100, if_2790
.annotate 'line', 1560
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
    set $P2794, $P2780
    unless_null $P2794, vivify_2120
    $P2794 = root_new ['parrot';'Hash']
  vivify_2120:
    set $P134, $P2794["cond"]
    unless_null $P134, vivify_2121
    new $P134, "Undef"
  vivify_2121:
    $P135 = $P134."ast"()
    find_lex $P136, "$past"
    unless_null $P136, vivify_2122
    new $P136, "Undef"
  vivify_2122:
    set $P2795, $P2780
    unless_null $P2795, vivify_2123
    $P2795 = root_new ['parrot';'Hash']
  vivify_2123:
    set $P137, $P2795["sym"]
    unless_null $P137, vivify_2124
    new $P137, "Undef"
  vivify_2124:
    set $S101, $P137
    find_lex $P138, "$/"
    unless_null $P138, vivify_2125
    new $P138, "Undef"
  vivify_2125:
    $P140 = $P133."new"($P135, $P136, $S101 :named("pasttype"), $P138 :named("node"))
    store_lex "$past", $P140
.annotate 'line', 1559
    set $P127, $P140
.annotate 'line', 1551
    goto if_2790_end
  if_2790:
.annotate 'line', 1552
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Block"]
.annotate 'line', 1553
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    $P138 = $P137."new"("$_" :named("name"), "parameter" :named("scope"), 1 :named("isdecl"))
    find_lex $P139, "$past"
    unless_null $P139, vivify_2126
    new $P139, "Undef"
  vivify_2126:
    $P140 = $P133."new"($P138, $P139, "immediate" :named("blocktype"))
.annotate 'line', 1552
    store_lex "$past", $P140
.annotate 'line', 1555
    find_lex $P129, "$past"
    unless_null $P129, vivify_2127
    new $P129, "Undef"
  vivify_2127:
    $P129."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1556
    find_lex $P129, "$past"
    unless_null $P129, vivify_2128
    new $P129, "Undef"
  vivify_2128:
    $P129."arity"(1)
.annotate 'line', 1557
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
    set $P2792, $P2780
    unless_null $P2792, vivify_2129
    $P2792 = root_new ['parrot';'Hash']
  vivify_2129:
    set $P134, $P2792["cond"]
    unless_null $P134, vivify_2130
    new $P134, "Undef"
  vivify_2130:
    $P135 = $P134."ast"()
    find_lex $P136, "$past"
    unless_null $P136, vivify_2131
    new $P136, "Undef"
  vivify_2131:
    set $P2793, $P2780
    unless_null $P2793, vivify_2132
    $P2793 = root_new ['parrot';'Hash']
  vivify_2132:
    set $P137, $P2793["sym"]
    unless_null $P137, vivify_2133
    new $P137, "Undef"
  vivify_2133:
    set $S101, $P137
    find_lex $P138, "$/"
    unless_null $P138, vivify_2134
    new $P138, "Undef"
  vivify_2134:
    $P139 = $P133."new"($P135, $P136, $S101 :named("pasttype"), $P138 :named("node"))
    store_lex "$past", $P139
.annotate 'line', 1551
    set $P127, $P139
  if_2790_end:
.annotate 'line', 1550
    set $P125, $P127
  if_2789_end:
.annotate 'line', 1543
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock" :anon :subid("427_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2800
    .param pmc param_2801
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1569
    .lex "self", param_2800
    .lex "$/", param_2801
.annotate 'line', 1570
    set $P118, param_2801
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P2802, param_2801
    unless_null $P2802, vivify_2136
    $P2802 = root_new ['parrot';'Hash']
  vivify_2136:
    set $P125, $P2802["EXPR"]
    unless_null $P125, vivify_2137
    new $P125, "Undef"
  vivify_2137:
    $P126 = $P125."ast"()
    set $P2803, param_2801
    unless_null $P2803, vivify_2138
    $P2803 = root_new ['parrot';'Hash']
  vivify_2138:
    set $P127, $P2803["pblock"]
    unless_null $P127, vivify_2139
    new $P127, "Undef"
  vivify_2139:
    $P128 = $P127."ast"()
    set $P129, param_2801
    unless_null $P129, vivify_2140
    new $P129, "Undef"
  vivify_2140:
    $P131 = $P124."new"($P126, $P128, "if" :named("pasttype"), $P129 :named("node"))
    $P132 = $P118."!make"($P131)
.annotate 'line', 1569
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "pblock" :anon :subid("428_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2805
    .param pmc param_2806
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1573
    .lex "self", param_2805
    .lex "$/", param_2806
.annotate 'line', 1574
    set $P118, param_2806
    set $P2807, param_2806
    unless_null $P2807, vivify_2141
    $P2807 = root_new ['parrot';'Hash']
  vivify_2141:
    set $P120, $P2807["blockoid"]
    unless_null $P120, vivify_2142
    new $P120, "Undef"
  vivify_2142:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 1573
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block" :anon :subid("429_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2809
    .param pmc param_2810
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1577
    .lex "self", param_2809
    .lex "$/", param_2810
.annotate 'line', 1578
    set $P118, param_2810
    set $P2811, param_2810
    unless_null $P2811, vivify_2143
    $P2811 = root_new ['parrot';'Hash']
  vivify_2143:
    set $P120, $P2811["blockoid"]
    unless_null $P120, vivify_2144
    new $P120, "Undef"
  vivify_2144:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 1577
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blockoid" :anon :subid("430_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2813
    .param pmc param_2814
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1581
    .const 'Sub' $P2819 = "612_1335114138.94729" 
    capture_lex $P2819
    .lex "self", param_2813
    .lex "$/", param_2814
.annotate 'line', 1582
    new $P118, "Undef"
    set $P2815, $P118
    .lex "$BLOCK", $P2815
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2145
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_2146
    die "Contextual $*W not found"
  vivify_2146:
  vivify_2145:
    $P124 = $P123."pop_lexpad"()
    set $P2815, $P124
.annotate 'line', 1583
    set $P2817, param_2814
    unless_null $P2817, vivify_2147
    $P2817 = root_new ['parrot';'Hash']
  vivify_2147:
    set $P121, $P2817["statementlist"]
    unless_null $P121, vivify_2148
    new $P121, "Undef"
  vivify_2148:
    if $P121, if_2816
.annotate 'line', 1591
    find_dynamic_lex $P128, "$*HAS_YOU_ARE_HERE"
    unless_null $P128, vivify_2149
    get_hll_global $P125, "GLOBAL"
    get_who $P127, $P125
    set $P128, $P127["$HAS_YOU_ARE_HERE"]
    unless_null $P128, vivify_2150
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_2150:
  vivify_2149:
    unless $P128, if_2822_end
.annotate 'line', 1592
    set $P129, param_2814
    unless_null $P129, vivify_2151
    new $P129, "Undef"
  vivify_2151:
    $P131 = $P129."CURSOR"()
    $P131."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if_2822_end:
.annotate 'line', 1594
    new $P125, "Float"
    assign $P125, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P125
.annotate 'line', 1595
    set $P125, param_2814
    set $P2823, param_2814
    unless_null $P2823, vivify_2152
    $P2823 = root_new ['parrot';'Hash']
  vivify_2152:
    set $P127, $P2823["you_are_here"]
    unless_null $P127, vivify_2153
    new $P127, "Undef"
  vivify_2153:
    $P128 = $P127."ast"()
    $P129 = $P125."!make"($P128)
.annotate 'line', 1590
    set $P120, $P129
.annotate 'line', 1583
    goto if_2816_end
  if_2816:
    .const 'Sub' $P2819 = "612_1335114138.94729" 
    capture_lex $P2819
    $P124 = $P2819()
    set $P120, $P124
  if_2816_end:
.annotate 'line', 1581
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2818"  :anon :subid("612_1335114138.94729") :outer("430_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1584
    new $P123, "Undef"
    set $P2820, $P123
    .lex "$past", $P2820
    find_lex $P2821, "$/"
    unless_null $P2821, vivify_2154
    $P2821 = root_new ['parrot';'Hash']
  vivify_2154:
    set $P124, $P2821["statementlist"]
    unless_null $P124, vivify_2155
    new $P124, "Undef"
  vivify_2155:
    $P125 = $P124."ast"()
    set $P2820, $P125
.annotate 'line', 1585
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_2156
    new $P124, "Undef"
  vivify_2156:
    set $P125, $P2820
    unless_null $P125, vivify_2157
    new $P125, "Undef"
  vivify_2157:
    $P124."push"($P125)
.annotate 'line', 1586
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_2158
    new $P124, "Undef"
  vivify_2158:
    find_lex $P125, "$/"
    unless_null $P125, vivify_2159
    new $P125, "Undef"
  vivify_2159:
    $P124."node"($P125)
.annotate 'line', 1587
    find_lex $P124, "$BLOCK"
    unless_null $P124, vivify_2160
    new $P124, "Undef"
  vivify_2160:
    $P124."closure"(1)
.annotate 'line', 1588
    find_dynamic_lex $P124, "$/"
    find_lex $P125, "$BLOCK"
    unless_null $P125, vivify_2161
    new $P125, "Undef"
  vivify_2161:
    $P126 = $P124."!make"($P125)
.annotate 'line', 1583
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "newpad" :anon :subid("431_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2825
    .param pmc param_2826
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1599
    .lex "self", param_2825
    .lex "$/", param_2826
.annotate 'line', 1600
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2162
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2163
    die "Contextual $*W not found"
  vivify_2163:
  vivify_2162:
    set $P123, param_2826
    unless_null $P123, vivify_2164
    new $P123, "Undef"
  vivify_2164:
    $P124 = $P121."push_lexpad"($P123)
.annotate 'line', 1599
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "outerctx" :anon :subid("432_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2828
    .param pmc param_2829
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1603
    .const 'Sub' $P2833 = "613_1335114138.94729" 
    capture_lex $P2833
    .lex "self", param_2828
    .lex "$/", param_2829
.annotate 'line', 1604
    find_dynamic_lex $P121, "%*COMPILING"
    unless_null $P121, vivify_2165
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["%COMPILING"]
    unless_null $P121, vivify_2166
    die "Contextual %*COMPILING not found"
  vivify_2166:
  vivify_2165:
    set $P2831, $P121["%?OPTIONS"]
    unless_null $P2831, vivify_2167
    $P2831 = root_new ['parrot';'Hash']
  vivify_2167:
    set $P123, $P2831["outer_ctx"]
    unless_null $P123, vivify_2168
    new $P123, "Undef"
  vivify_2168:
    defined $I100, $P123
    if $I100, unless_2830_end
    .const 'Sub' $P2833 = "613_1335114138.94729" 
    capture_lex $P2833
    $P2833()
  unless_2830_end:
.annotate 'line', 1617
    set $P118, param_2828
    nqp_decontainerize $P120, $P118
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2184
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2185
    die "Contextual $*W not found"
  vivify_2185:
  vivify_2184:
    $P125 = $P124."cur_lexpad"()
    $P126 = $P120."SET_BLOCK_OUTER_CTX"($P125)
.annotate 'line', 1603
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2832"  :anon :subid("613_1335114138.94729") :outer("432_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1607
    new $P124, "Undef"
    set $P2834, $P124
    .lex "$SETTING", $P2834
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2169
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2170
    die "Contextual $*W not found"
  vivify_2170:
  vivify_2169:
    find_dynamic_lex $P131, "%*COMPILING"
    unless_null $P131, vivify_2171
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["%COMPILING"]
    unless_null $P131, vivify_2172
    die "Contextual %*COMPILING not found"
  vivify_2172:
  vivify_2171:
    set $P2836, $P131["%?OPTIONS"]
    unless_null $P2836, vivify_2173
    $P2836 = root_new ['parrot';'Hash']
  vivify_2173:
    set $P132, $P2836["setting"]
    unless_null $P132, vivify_2174
    new $P132, "Undef"
  vivify_2174:
    set $P2835, $P132
    defined $I2838, $P2835
    if $I2838, default_2837
    new $P133, "String"
    assign $P133, "NQPCORE"
    set $P2835, $P133
  default_2837:
    $P134 = $P127."load_setting"($P2835)
    set $P2834, $P134
.annotate 'line', 1612
    find_dynamic_lex $P128, "%*COMPILING"
    unless_null $P128, vivify_2175
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%COMPILING"]
    unless_null $P128, vivify_2176
    die "Contextual %*COMPILING not found"
  vivify_2176:
  vivify_2175:
    set $P2840, $P128["%?OPTIONS"]
    unless_null $P2840, vivify_2177
    $P2840 = root_new ['parrot';'Hash']
  vivify_2177:
    set $P129, $P2840["setting"]
    unless_null $P129, vivify_2178
    new $P129, "Undef"
  vivify_2178:
    set $S100, $P129
    iseq $I101, $S100, "NULL"
    unless $I101, unless_2839
    new $P125, 'Integer'
    set $P125, $I101
    goto unless_2839_end
  unless_2839:
.annotate 'line', 1613
    set $P131, $P2834
    unless_null $P131, vivify_2179
    new $P131, "Undef"
  vivify_2179:
    "import_HOW_exports"($P131)
.annotate 'line', 1614
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_2180
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_2181
    die "Contextual $*W not found"
  vivify_2181:
  vivify_2180:
    find_dynamic_lex $P136, "$*GLOBALish"
    unless_null $P136, vivify_2182
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$GLOBALish"]
    unless_null $P136, vivify_2183
    die "Contextual $*GLOBALish not found"
  vivify_2183:
  vivify_2182:
    $P137 = $P133."load_module"("NQPRegex", $P136)
.annotate 'line', 1612
    set $P125, $P137
  unless_2839_end:
.annotate 'line', 1604
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "GLOBALish" :anon :subid("433_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2842
    .param pmc param_2843
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1629
    .lex "self", param_2842
    .lex "$/", param_2843
.annotate 'line', 1633
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2186
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2187
    die "Contextual $*W not found"
  vivify_2187:
  vivify_2186:
    find_dynamic_lex $P125, "%*HOW"
    unless_null $P125, vivify_2188
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["%HOW"]
    unless_null $P125, vivify_2189
    die "Contextual %*HOW not found"
  vivify_2189:
  vivify_2188:
    set $P126, $P125["knowhow"]
    unless_null $P126, vivify_2190
    new $P126, "Undef"
  vivify_2190:
    $P127 = $P121."pkg_create_mo"($P126, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P127
.annotate 'line', 1634
    find_dynamic_lex $P121, "$*GLOBALish"
    unless_null $P121, vivify_2191
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$GLOBALish"]
    unless_null $P121, vivify_2192
    die "Contextual $*GLOBALish not found"
  vivify_2192:
  vivify_2191:
    get_how $P123, $P121
    find_dynamic_lex $P126, "$*GLOBALish"
    unless_null $P126, vivify_2193
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$GLOBALish"]
    unless_null $P126, vivify_2194
    die "Contextual $*GLOBALish not found"
  vivify_2194:
  vivify_2193:
    $P123."compose"($P126)
.annotate 'line', 1635
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2195
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2196
    die "Contextual $*W not found"
  vivify_2196:
  vivify_2195:
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2197
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2198
    die "Contextual $*W not found"
  vivify_2198:
  vivify_2197:
    $P126 = $P125."cur_lexpad"()
    find_dynamic_lex $P129, "$*GLOBALish"
    unless_null $P129, vivify_2199
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$GLOBALish"]
    unless_null $P129, vivify_2200
    die "Contextual $*GLOBALish not found"
  vivify_2200:
  vivify_2199:
    $P121."install_lexical_symbol"($P126, "GLOBALish", $P129)
.annotate 'line', 1638
    find_dynamic_lex $P121, "$*GLOBALish"
    unless_null $P121, vivify_2201
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$GLOBALish"]
    unless_null $P121, vivify_2202
    die "Contextual $*GLOBALish not found"
  vivify_2202:
  vivify_2201:
    store_dynamic_lex "$*PACKAGE", $P121
.annotate 'line', 1639
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2203
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2204
    die "Contextual $*W not found"
  vivify_2204:
  vivify_2203:
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2205
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2206
    die "Contextual $*W not found"
  vivify_2206:
  vivify_2205:
    $P126 = $P125."cur_lexpad"()
    find_dynamic_lex $P129, "$*PACKAGE"
    unless_null $P129, vivify_2207
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$PACKAGE"]
    unless_null $P129, vivify_2208
    die "Contextual $*PACKAGE not found"
  vivify_2208:
  vivify_2207:
    $P131 = $P121."install_lexical_symbol"($P126, "$?PACKAGE", $P129)
.annotate 'line', 1629
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "you_are_here" :anon :subid("434_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2845
    .param pmc param_2846
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1642
    .lex "self", param_2845
    .lex "$/", param_2846
.annotate 'line', 1643
    set $P118, param_2846
    set $P120, param_2845
    nqp_decontainerize $P121, $P120
    $P123 = $P121."CTXSAVE"()
    $P124 = $P118."!make"($P123)
.annotate 'line', 1642
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<use>" :anon :subid("435_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2848
    .param pmc param_2849
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1648
    .lex "self", param_2848
    .lex "$/", param_2849
.annotate 'line', 1649
    new $P118, "Undef"
    set $P2850, $P118
    .lex "$module", $P2850
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2209
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_2210
    die "Contextual $*W not found"
  vivify_2210:
  vivify_2209:
    set $P2851, param_2849
    unless_null $P2851, vivify_2211
    $P2851 = root_new ['parrot';'Hash']
  vivify_2211:
    set $P124, $P2851["name"]
    unless_null $P124, vivify_2212
    new $P124, "Undef"
  vivify_2212:
    set $S100, $P124
    find_dynamic_lex $P127, "$*GLOBALish"
    unless_null $P127, vivify_2213
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$GLOBALish"]
    unless_null $P127, vivify_2214
    die "Contextual $*GLOBALish not found"
  vivify_2214:
  vivify_2213:
    $P128 = $P123."load_module"($S100, $P127)
    set $P2850, $P128
.annotate 'line', 1650
    set $P120, $P2850
    unless_null $P120, vivify_2215
    new $P120, "Undef"
  vivify_2215:
    defined $I100, $P120
    unless $I100, if_2852_end
.annotate 'line', 1651
    set $P121, $P2850
    unless_null $P121, vivify_2216
    new $P121, "Undef"
  vivify_2216:
    "import_HOW_exports"($P121)
  if_2852_end:
.annotate 'line', 1653
    set $P120, param_2849
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    $P126 = $P125."new"()
    $P127 = $P120."!make"($P126)
.annotate 'line', 1648
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statement_control:sym<if>" :anon :subid("436_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2854
    .param pmc param_2855
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1656
    .const 'Sub' $P2866 = "614_1335114138.94729" 
    capture_lex $P2866
    .lex "self", param_2854
    .lex "$/", param_2855
.annotate 'line', 1657
    new $P118, "Undef"
    set $P2856, $P118
    .lex "$count", $P2856
.annotate 'line', 1658
    new $P120, "Undef"
    set $P2857, $P120
    .lex "$past", $P2857
.annotate 'line', 1657
    set $P2858, param_2855
    unless_null $P2858, vivify_2217
    $P2858 = root_new ['parrot';'Hash']
  vivify_2217:
    set $P121, $P2858["xblock"]
    unless_null $P121, vivify_2218
    new $P121, "Undef"
  vivify_2218:
    set $N100, $P121
    new $P123, 'Float'
    set $P123, $N100
    sub $P124, $P123, 1
    set $P2856, $P124
.annotate 'line', 1658
    set $P121, $P2856
    unless_null $P121, vivify_2219
    new $P121, "Undef"
  vivify_2219:
    set $I100, $P121
    set $P2859, param_2855
    unless_null $P2859, vivify_2220
    $P2859 = root_new ['parrot';'Hash']
  vivify_2220:
    set $P2860, $P2859["xblock"]
    unless_null $P2860, vivify_2221
    $P2860 = root_new ['parrot';'ResizablePMCArray']
  vivify_2221:
    set $P123, $P2860[$I100]
    unless_null $P123, vivify_2222
    new $P123, "Undef"
  vivify_2222:
    $P124 = $P123."ast"()
    $P125 = "xblock_immediate"($P124)
    set $P2857, $P125
.annotate 'line', 1659
    set $P2862, param_2855
    unless_null $P2862, vivify_2223
    $P2862 = root_new ['parrot';'Hash']
  vivify_2223:
    set $P121, $P2862["else"]
    unless_null $P121, vivify_2224
    new $P121, "Undef"
  vivify_2224:
    unless $P121, if_2861_end
.annotate 'line', 1660
    set $P123, $P2857
    unless_null $P123, vivify_2225
    new $P123, "Undef"
  vivify_2225:
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P2863, param_2855
    unless_null $P2863, vivify_2226
    $P2863 = root_new ['parrot';'Hash']
  vivify_2226:
    set $P2864, $P2863["else"]
    unless_null $P2864, vivify_2227
    $P2864 = root_new ['parrot';'ResizablePMCArray']
  vivify_2227:
    set $P125, $P2864[$I100]
    unless_null $P125, vivify_2228
    new $P125, "Undef"
  vivify_2228:
    $P126 = $P125."ast"()
    $P127 = "block_immediate"($P126)
    $P123."push"($P127)
  if_2861_end:
.annotate 'line', 1663
    new $P124, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P124, loop2871_handler
    push_eh $P124
  loop2871_test:
    set $P121, $P2856
    unless_null $P121, vivify_2229
    new $P121, "Undef"
  vivify_2229:
    set $N100, $P121
    set $N101, 0
    isgt $I100, $N100, $N101
    unless $I100, loop2871_done
  loop2871_redo:
    .const 'Sub' $P2866 = "614_1335114138.94729" 
    capture_lex $P2866
    $P2866()
  loop2871_next:
    goto loop2871_test
  loop2871_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P125, exception, 'type'
    eq $P125, .CONTROL_LOOP_NEXT, loop2871_next
    eq $P125, .CONTROL_LOOP_REDO, loop2871_redo
  loop2871_done:
    pop_eh 
.annotate 'line', 1669
    set $P121, param_2855
    set $P123, $P2857
    unless_null $P123, vivify_2238
    new $P123, "Undef"
  vivify_2238:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1656
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2865"  :anon :subid("614_1335114138.94729") :outer("436_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1665
    new $P123, "Undef"
    set $P2867, $P123
    .lex "$else", $P2867
.annotate 'line', 1663
    find_lex $P124, "$count"
    unless_null $P124, vivify_2230
    new $P124, "Undef"
  vivify_2230:
    clone $P2868, $P124
    dec $P124
.annotate 'line', 1665
    find_lex $P124, "$past"
    unless_null $P124, vivify_2231
    new $P124, "Undef"
  vivify_2231:
    set $P2867, $P124
.annotate 'line', 1666
    find_lex $P124, "$count"
    unless_null $P124, vivify_2232
    new $P124, "Undef"
  vivify_2232:
    set $I101, $P124
    find_lex $P2869, "$/"
    unless_null $P2869, vivify_2233
    $P2869 = root_new ['parrot';'Hash']
  vivify_2233:
    set $P2870, $P2869["xblock"]
    unless_null $P2870, vivify_2234
    $P2870 = root_new ['parrot';'ResizablePMCArray']
  vivify_2234:
    set $P125, $P2870[$I101]
    unless_null $P125, vivify_2235
    new $P125, "Undef"
  vivify_2235:
    $P126 = $P125."ast"()
    $P127 = "xblock_immediate"($P126)
    store_lex "$past", $P127
.annotate 'line', 1667
    find_lex $P124, "$past"
    unless_null $P124, vivify_2236
    new $P124, "Undef"
  vivify_2236:
    set $P125, $P2867
    unless_null $P125, vivify_2237
    new $P125, "Undef"
  vivify_2237:
    $P126 = $P124."push"($P125)
.annotate 'line', 1663
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<unless>" :anon :subid("437_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2873
    .param pmc param_2874
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1672
    .lex "self", param_2873
    .lex "$/", param_2874
.annotate 'line', 1673
    new $P118, "Undef"
    set $P2875, $P118
    .lex "$past", $P2875
    set $P2876, param_2874
    unless_null $P2876, vivify_2239
    $P2876 = root_new ['parrot';'Hash']
  vivify_2239:
    set $P120, $P2876["xblock"]
    unless_null $P120, vivify_2240
    new $P120, "Undef"
  vivify_2240:
    $P121 = $P120."ast"()
    $P123 = "xblock_immediate"($P121)
    set $P2875, $P123
.annotate 'line', 1674
    set $P120, $P2875
    unless_null $P120, vivify_2241
    new $P120, "Undef"
  vivify_2241:
    $P120."pasttype"("unless")
.annotate 'line', 1675
    set $P120, param_2874
    set $P121, $P2875
    unless_null $P121, vivify_2242
    new $P121, "Undef"
  vivify_2242:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1672
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<while>" :anon :subid("438_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2878
    .param pmc param_2879
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1678
    .lex "self", param_2878
    .lex "$/", param_2879
.annotate 'line', 1679
    new $P118, "Undef"
    set $P2880, $P118
    .lex "$past", $P2880
    set $P2881, param_2879
    unless_null $P2881, vivify_2243
    $P2881 = root_new ['parrot';'Hash']
  vivify_2243:
    set $P120, $P2881["xblock"]
    unless_null $P120, vivify_2244
    new $P120, "Undef"
  vivify_2244:
    $P121 = $P120."ast"()
    $P123 = "xblock_immediate"($P121)
    set $P2880, $P123
.annotate 'line', 1680
    set $P120, $P2880
    unless_null $P120, vivify_2245
    new $P120, "Undef"
  vivify_2245:
    set $P2882, param_2879
    unless_null $P2882, vivify_2246
    $P2882 = root_new ['parrot';'Hash']
  vivify_2246:
    set $P121, $P2882["sym"]
    unless_null $P121, vivify_2247
    new $P121, "Undef"
  vivify_2247:
    set $S100, $P121
    $P120."pasttype"($S100)
.annotate 'line', 1681
    set $P120, param_2879
    set $P121, $P2880
    unless_null $P121, vivify_2248
    new $P121, "Undef"
  vivify_2248:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1678
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<repeat>" :anon :subid("439_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2884
    .param pmc param_2885
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1684
    .lex "self", param_2884
    .lex "$/", param_2885
.annotate 'line', 1685
    new $P118, "Undef"
    set $P2886, $P118
    .lex "$pasttype", $P2886
.annotate 'line', 1686
    new $P120, "Undef"
    set $P2887, $P120
    .lex "$past", $P2887
.annotate 'line', 1685
    new $P121, "String"
    assign $P121, "repeat_"
    set $P2888, param_2885
    unless_null $P2888, vivify_2249
    $P2888 = root_new ['parrot';'Hash']
  vivify_2249:
    set $P123, $P2888["wu"]
    unless_null $P123, vivify_2250
    new $P123, "Undef"
  vivify_2250:
    set $S100, $P123
    concat $P124, $P121, $S100
    set $P2886, $P124
.annotate 'line', 1684
    set $P121, $P2887
    unless_null $P121, vivify_2251
    new $P121, "Undef"
  vivify_2251:
.annotate 'line', 1687
    set $P2890, param_2885
    unless_null $P2890, vivify_2252
    $P2890 = root_new ['parrot';'Hash']
  vivify_2252:
    set $P121, $P2890["xblock"]
    unless_null $P121, vivify_2253
    new $P121, "Undef"
  vivify_2253:
    if $P121, if_2889
.annotate 'line', 1692
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P2892, param_2885
    unless_null $P2892, vivify_2254
    $P2892 = root_new ['parrot';'Hash']
  vivify_2254:
    set $P127, $P2892["EXPR"]
    unless_null $P127, vivify_2255
    new $P127, "Undef"
  vivify_2255:
    $P128 = $P127."ast"()
    set $P2893, param_2885
    unless_null $P2893, vivify_2256
    $P2893 = root_new ['parrot';'Hash']
  vivify_2256:
    set $P129, $P2893["pblock"]
    unless_null $P129, vivify_2257
    new $P129, "Undef"
  vivify_2257:
    $P131 = $P129."ast"()
    $P132 = "block_immediate"($P131)
    set $P133, $P2886
    unless_null $P133, vivify_2258
    new $P133, "Undef"
  vivify_2258:
    set $P134, param_2885
    unless_null $P134, vivify_2259
    new $P134, "Undef"
  vivify_2259:
    $P135 = $P126."new"($P128, $P132, $P133 :named("pasttype"), $P134 :named("node"))
    set $P2887, $P135
.annotate 'line', 1691
    goto if_2889_end
  if_2889:
.annotate 'line', 1688
    set $P2891, param_2885
    unless_null $P2891, vivify_2260
    $P2891 = root_new ['parrot';'Hash']
  vivify_2260:
    set $P123, $P2891["xblock"]
    unless_null $P123, vivify_2261
    new $P123, "Undef"
  vivify_2261:
    $P124 = $P123."ast"()
    $P125 = "xblock_immediate"($P124)
    set $P2887, $P125
.annotate 'line', 1689
    set $P123, $P2887
    unless_null $P123, vivify_2262
    new $P123, "Undef"
  vivify_2262:
    set $P124, $P2886
    unless_null $P124, vivify_2263
    new $P124, "Undef"
  vivify_2263:
    $P123."pasttype"($P124)
  if_2889_end:
.annotate 'line', 1695
    set $P121, param_2885
    set $P123, $P2887
    unless_null $P123, vivify_2264
    new $P123, "Undef"
  vivify_2264:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1684
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<for>" :anon :subid("440_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2895
    .param pmc param_2896
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1698
    .lex "self", param_2895
    .lex "$/", param_2896
.annotate 'line', 1699
    new $P118, "Undef"
    set $P2897, $P118
    .lex "$past", $P2897
.annotate 'line', 1701
    new $P120, "Undef"
    set $P2898, $P120
    .lex "$block", $P2898
.annotate 'line', 1699
    set $P2899, param_2896
    unless_null $P2899, vivify_2265
    $P2899 = root_new ['parrot';'Hash']
  vivify_2265:
    set $P121, $P2899["xblock"]
    unless_null $P121, vivify_2266
    new $P121, "Undef"
  vivify_2266:
    $P123 = $P121."ast"()
    set $P2897, $P123
.annotate 'line', 1700
    set $P121, $P2897
    unless_null $P121, vivify_2267
    new $P121, "Undef"
  vivify_2267:
    $P121."pasttype"("for")
.annotate 'line', 1701
    new $P121, "Float"
    assign $P121, 1
    set $I100, $P121
    set $P2900, $P2897
    unless_null $P2900, vivify_2268
    $P2900 = root_new ['parrot';'ResizablePMCArray']
  vivify_2268:
    set $P123, $P2900[$I100]
    unless_null $P123, vivify_2269
    new $P123, "Undef"
  vivify_2269:
    set $P2898, $P123
.annotate 'line', 1702
    set $P121, $P2898
    unless_null $P121, vivify_2270
    new $P121, "Undef"
  vivify_2270:
    $P123 = $P121."arity"()
    if $P123, unless_2901_end
.annotate 'line', 1703
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P2902, $P2898
    unless_null $P2902, vivify_2271
    $P2902 = root_new ['parrot';'ResizablePMCArray']
  vivify_2271:
    set $P125, $P2902[$I100]
    unless_null $P125, vivify_2272
    new $P125, "Undef"
  vivify_2272:
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Var"]
    $P131 = $P129."new"("$_" :named("name"), "parameter" :named("scope"))
    $P125."push"($P131)
.annotate 'line', 1704
    set $P124, $P2898
    unless_null $P124, vivify_2273
    new $P124, "Undef"
  vivify_2273:
    $P124."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1705
    set $P124, $P2898
    unless_null $P124, vivify_2274
    new $P124, "Undef"
  vivify_2274:
    $P124."arity"(1)
  unless_2901_end:
.annotate 'line', 1707
    set $P121, $P2898
    unless_null $P121, vivify_2275
    new $P121, "Undef"
  vivify_2275:
    $P121."blocktype"("immediate")
.annotate 'line', 1708
    set $P121, param_2896
    set $P123, $P2897
    unless_null $P123, vivify_2276
    new $P123, "Undef"
  vivify_2276:
    $P124 = $P121."!make"($P123)
.annotate 'line', 1698
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CATCH>" :anon :subid("441_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2904
    .param pmc param_2905
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1711
    .lex "self", param_2904
    .lex "$/", param_2905
.annotate 'line', 1712
    new $P118, "Undef"
    set $P2906, $P118
    .lex "$block", $P2906
    set $P2907, param_2905
    unless_null $P2907, vivify_2277
    $P2907 = root_new ['parrot';'Hash']
  vivify_2277:
    set $P120, $P2907["block"]
    unless_null $P120, vivify_2278
    new $P120, "Undef"
  vivify_2278:
    $P121 = $P120."ast"()
    set $P2906, $P121
.annotate 'line', 1713
    set $P120, param_2905
    unless_null $P120, vivify_2279
    new $P120, "Undef"
  vivify_2279:
    set $P121, $P2906
    unless_null $P121, vivify_2280
    new $P121, "Undef"
  vivify_2280:
    "push_block_handler"($P120, $P121)
.annotate 'line', 1714
    new $P120, "Float"
    assign $P120, 0
    set $I100, $P120
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2281
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2282
    die "Contextual $*W not found"
  vivify_2282:
  vivify_2281:
    $P125 = $P124."cur_lexpad"()
    $P126 = $P125."handlers"()
    set $P127, $P126[$I100]
    unless_null $P127, vivify_2283
    new $P127, "Undef"
  vivify_2283:
    $P127."handle_types_except"("CONTROL")
.annotate 'line', 1715
    set $P120, param_2905
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    set $P126, param_2905
    unless_null $P126, vivify_2284
    new $P126, "Undef"
  vivify_2284:
    $P127 = $P125."new"($P126 :named("node"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 1711
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CONTROL>" :anon :subid("442_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2909
    .param pmc param_2910
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1718
    .lex "self", param_2909
    .lex "$/", param_2910
.annotate 'line', 1719
    new $P118, "Undef"
    set $P2911, $P118
    .lex "$block", $P2911
    set $P2912, param_2910
    unless_null $P2912, vivify_2285
    $P2912 = root_new ['parrot';'Hash']
  vivify_2285:
    set $P120, $P2912["block"]
    unless_null $P120, vivify_2286
    new $P120, "Undef"
  vivify_2286:
    $P121 = $P120."ast"()
    set $P2911, $P121
.annotate 'line', 1720
    set $P120, param_2910
    unless_null $P120, vivify_2287
    new $P120, "Undef"
  vivify_2287:
    set $P121, $P2911
    unless_null $P121, vivify_2288
    new $P121, "Undef"
  vivify_2288:
    "push_block_handler"($P120, $P121)
.annotate 'line', 1721
    new $P120, "Float"
    assign $P120, 0
    set $I100, $P120
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2289
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2290
    die "Contextual $*W not found"
  vivify_2290:
  vivify_2289:
    $P125 = $P124."cur_lexpad"()
    $P126 = $P125."handlers"()
    set $P127, $P126[$I100]
    unless_null $P127, vivify_2291
    new $P127, "Undef"
  vivify_2291:
    $P127."handle_types"("CONTROL")
.annotate 'line', 1722
    set $P120, param_2910
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Stmts"]
    set $P126, param_2910
    unless_null $P126, vivify_2292
    new $P126, "Undef"
  vivify_2292:
    $P127 = $P125."new"($P126 :named("node"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 1718
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<BEGIN>" :anon :subid("443_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2914
    .param pmc param_2915
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1763
    .lex "self", param_2914
    .lex "$/", param_2915
.annotate 'line', 1764
    set $P118, param_2915
    find_dynamic_lex $P123, "$*W"
    unless_null $P123, vivify_2293
    get_hll_global $P120, "GLOBAL"
    get_who $P121, $P120
    set $P123, $P121["$W"]
    unless_null $P123, vivify_2294
    die "Contextual $*W not found"
  vivify_2294:
  vivify_2293:
    set $P2916, param_2915
    unless_null $P2916, vivify_2295
    $P2916 = root_new ['parrot';'Hash']
  vivify_2295:
    set $P124, $P2916["blorst"]
    unless_null $P124, vivify_2296
    new $P124, "Undef"
  vivify_2296:
    $P125 = $P124."ast"()
    $P126 = $P123."run_begin_block"($P125)
    $P127 = $P118."!make"($P126)
.annotate 'line', 1763
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<INIT>" :anon :subid("444_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2918
    .param pmc param_2919
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1767
    .lex "self", param_2918
    .lex "$/", param_2919
.annotate 'line', 1768
    find_dynamic_lex $P121, "$*W"
    unless_null $P121, vivify_2297
    get_hll_global $P118, "GLOBAL"
    get_who $P120, $P118
    set $P121, $P120["$W"]
    unless_null $P121, vivify_2298
    die "Contextual $*W not found"
  vivify_2298:
  vivify_2297:
    $P123 = $P121."cur_lexpad"()
    set $P2920, param_2919
    unless_null $P2920, vivify_2299
    $P2920 = root_new ['parrot';'Hash']
  vivify_2299:
    set $P124, $P2920["blorst"]
    unless_null $P124, vivify_2300
    new $P124, "Undef"
  vivify_2300:
    $P125 = $P124."ast"()
    $P123."push"($P125)
.annotate 'line', 1769
    set $P118, param_2919
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Stmts"]
    $P125 = $P124."new"()
    $P126 = $P118."!make"($P125)
.annotate 'line', 1767
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<try>" :anon :subid("445_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2922
    .param pmc param_2923
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1772
    .lex "self", param_2922
    .lex "$/", param_2923
.annotate 'line', 1773
    new $P118, "Undef"
    set $P2924, $P118
    .lex "$past", $P2924
    set $P2925, param_2923
    unless_null $P2925, vivify_2301
    $P2925 = root_new ['parrot';'Hash']
  vivify_2301:
    set $P120, $P2925["blorst"]
    unless_null $P120, vivify_2302
    new $P120, "Undef"
  vivify_2302:
    $P121 = $P120."ast"()
    set $P2924, $P121
.annotate 'line', 1774
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Block"]
    set $P125, $P2924
    unless_null $P125, vivify_2303
    new $P125, "Undef"
  vivify_2303:
    $P126 = $P124."ACCEPTS"($P125)
    if $P126, unless_2926_end
.annotate 'line', 1775
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Block"]
    set $P132, $P2924
    unless_null $P132, vivify_2304
    new $P132, "Undef"
  vivify_2304:
    set $P133, param_2923
    unless_null $P133, vivify_2305
    new $P133, "Undef"
  vivify_2305:
    $P134 = $P131."new"($P132, "immediate" :named("blocktype"), $P133 :named("node"))
    set $P2924, $P134
  unless_2926_end:
.annotate 'line', 1777
    set $P120, $P2924
    unless_null $P120, vivify_2306
    new $P120, "Undef"
  vivify_2306:
    $P121 = $P120."handlers"()
    if $P121, unless_2927_end
.annotate 'line', 1778
    set $P123, $P2924
    unless_null $P123, vivify_2307
    new $P123, "Undef"
  vivify_2307:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Control"]
.annotate 'line', 1780
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Stmts"]
.annotate 'line', 1781
    get_hll_global $P133, "GLOBAL"
    nqp_get_package_through_who $P134, $P133, "PAST"
    get_who $P135, $P134
    set $P136, $P135["Op"]
.annotate 'line', 1782
    get_hll_global $P137, "GLOBAL"
    nqp_get_package_through_who $P138, $P137, "PAST"
    get_who $P139, $P138
    set $P140, $P139["Var"]
.annotate 'line', 1783
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Var"]
    $P145 = $P144."new"("register" :named("scope"), "exception" :named("name"))
    $P146 = $P140."new"($P145, "handled", "keyed" :named("scope"))
.annotate 'line', 1782
    $P147 = $P136."new"($P146, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1781
    $P149 = $P132."new"($P147)
.annotate 'line', 1780
    $P150 = $P127."new"($P149, "CONTROL" :named("handle_types_except"))
.annotate 'line', 1778
    new $P151, "ResizablePMCArray"
    push $P151, $P150
    $P123."handlers"($P151)
  unless_2927_end:
.annotate 'line', 1792
    set $P120, param_2923
    set $P121, $P2924
    unless_null $P121, vivify_2308
    new $P121, "Undef"
  vivify_2308:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1772
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blorst" :anon :subid("446_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2929
    .param pmc param_2930
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1795
    .lex "self", param_2929
    .lex "$/", param_2930
.annotate 'line', 1796
    set $P118, param_2930
.annotate 'line', 1797
    set $P2932, param_2930
    unless_null $P2932, vivify_2309
    $P2932 = root_new ['parrot';'Hash']
  vivify_2309:
    set $P121, $P2932["block"]
    unless_null $P121, vivify_2310
    new $P121, "Undef"
  vivify_2310:
    if $P121, if_2931
.annotate 'line', 1798
    set $P2934, param_2930
    unless_null $P2934, vivify_2311
    $P2934 = root_new ['parrot';'Hash']
  vivify_2311:
    set $P126, $P2934["statement"]
    unless_null $P126, vivify_2312
    new $P126, "Undef"
  vivify_2312:
    $P127 = $P126."ast"()
    set $P120, $P127
.annotate 'line', 1797
    goto if_2931_end
  if_2931:
    set $P2933, param_2930
    unless_null $P2933, vivify_2313
    $P2933 = root_new ['parrot';'Hash']
  vivify_2313:
    set $P123, $P2933["block"]
    unless_null $P123, vivify_2314
    new $P123, "Undef"
  vivify_2314:
    $P124 = $P123."ast"()
    $P125 = "block_immediate"($P124)
    set $P120, $P125
  if_2931_end:
    $P128 = $P118."!make"($P120)
.annotate 'line', 1795
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<if>" :anon :subid("447_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2936
    .param pmc param_2937
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1803
    .lex "self", param_2936
    .lex "$/", param_2937
    set $P118, param_2937
    set $P2938, param_2937
    unless_null $P2938, vivify_2315
    $P2938 = root_new ['parrot';'Hash']
  vivify_2315:
    set $P120, $P2938["cond"]
    unless_null $P120, vivify_2316
    new $P120, "Undef"
  vivify_2316:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<unless>" :anon :subid("448_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2940
    .param pmc param_2941
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1804
    .lex "self", param_2940
    .lex "$/", param_2941
    set $P118, param_2941
    set $P2942, param_2941
    unless_null $P2942, vivify_2317
    $P2942 = root_new ['parrot';'Hash']
  vivify_2317:
    set $P120, $P2942["cond"]
    unless_null $P120, vivify_2318
    new $P120, "Undef"
  vivify_2318:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<while>" :anon :subid("449_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2944
    .param pmc param_2945
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1806
    .lex "self", param_2944
    .lex "$/", param_2945
    set $P118, param_2945
    set $P2946, param_2945
    unless_null $P2946, vivify_2319
    $P2946 = root_new ['parrot';'Hash']
  vivify_2319:
    set $P120, $P2946["cond"]
    unless_null $P120, vivify_2320
    new $P120, "Undef"
  vivify_2320:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<until>" :anon :subid("450_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2948
    .param pmc param_2949
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1807
    .lex "self", param_2948
    .lex "$/", param_2949
    set $P118, param_2949
    set $P2950, param_2949
    unless_null $P2950, vivify_2321
    $P2950 = root_new ['parrot';'Hash']
  vivify_2321:
    set $P120, $P2950["cond"]
    unless_null $P120, vivify_2322
    new $P120, "Undef"
  vivify_2322:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<fatarrow>" :anon :subid("451_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2952
    .param pmc param_2953
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1811
    .lex "self", param_2952
    .lex "$/", param_2953
    set $P118, param_2953
    set $P2954, param_2953
    unless_null $P2954, vivify_2323
    $P2954 = root_new ['parrot';'Hash']
  vivify_2323:
    set $P120, $P2954["fatarrow"]
    unless_null $P120, vivify_2324
    new $P120, "Undef"
  vivify_2324:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<colonpair>" :anon :subid("452_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2956
    .param pmc param_2957
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1812
    .lex "self", param_2956
    .lex "$/", param_2957
    set $P118, param_2957
    set $P2958, param_2957
    unless_null $P2958, vivify_2325
    $P2958 = root_new ['parrot';'Hash']
  vivify_2325:
    set $P120, $P2958["colonpair"]
    unless_null $P120, vivify_2326
    new $P120, "Undef"
  vivify_2326:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<variable>" :anon :subid("453_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2960
    .param pmc param_2961
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1813
    .lex "self", param_2960
    .lex "$/", param_2961
    set $P118, param_2961
    set $P2962, param_2961
    unless_null $P2962, vivify_2327
    $P2962 = root_new ['parrot';'Hash']
  vivify_2327:
    set $P120, $P2962["variable"]
    unless_null $P120, vivify_2328
    new $P120, "Undef"
  vivify_2328:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<package_declarator>" :anon :subid("454_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2964
    .param pmc param_2965
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1814
    .lex "self", param_2964
    .lex "$/", param_2965
    set $P118, param_2965
    set $P2966, param_2965
    unless_null $P2966, vivify_2329
    $P2966 = root_new ['parrot';'Hash']
  vivify_2329:
    set $P120, $P2966["package_declarator"]
    unless_null $P120, vivify_2330
    new $P120, "Undef"
  vivify_2330:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<scope_declarator>" :anon :subid("455_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2968
    .param pmc param_2969
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1815
    .lex "self", param_2968
    .lex "$/", param_2969
    set $P118, param_2969
    set $P2970, param_2969
    unless_null $P2970, vivify_2331
    $P2970 = root_new ['parrot';'Hash']
  vivify_2331:
    set $P120, $P2970["scope_declarator"]
    unless_null $P120, vivify_2332
    new $P120, "Undef"
  vivify_2332:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<routine_declarator>" :anon :subid("456_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2972
    .param pmc param_2973
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1816
    .lex "self", param_2972
    .lex "$/", param_2973
    set $P118, param_2973
    set $P2974, param_2973
    unless_null $P2974, vivify_2333
    $P2974 = root_new ['parrot';'Hash']
  vivify_2333:
    set $P120, $P2974["routine_declarator"]
    unless_null $P120, vivify_2334
    new $P120, "Undef"
  vivify_2334:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<regex_declarator>" :anon :subid("457_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2976
    .param pmc param_2977
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1817
    .lex "self", param_2976
    .lex "$/", param_2977
    set $P118, param_2977
    set $P2978, param_2977
    unless_null $P2978, vivify_2335
    $P2978 = root_new ['parrot';'Hash']
  vivify_2335:
    set $P120, $P2978["regex_declarator"]
    unless_null $P120, vivify_2336
    new $P120, "Undef"
  vivify_2336:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<statement_prefix>" :anon :subid("458_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2980
    .param pmc param_2981
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1818
    .lex "self", param_2980
    .lex "$/", param_2981
    set $P118, param_2981
    set $P2982, param_2981
    unless_null $P2982, vivify_2337
    $P2982 = root_new ['parrot';'Hash']
  vivify_2337:
    set $P120, $P2982["statement_prefix"]
    unless_null $P120, vivify_2338
    new $P120, "Undef"
  vivify_2338:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<lambda>" :anon :subid("459_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2984
    .param pmc param_2985
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1819
    .lex "self", param_2984
    .lex "$/", param_2985
    set $P118, param_2985
    set $P2986, param_2985
    unless_null $P2986, vivify_2339
    $P2986 = root_new ['parrot';'Hash']
  vivify_2339:
    set $P120, $P2986["pblock"]
    unless_null $P120, vivify_2340
    new $P120, "Undef"
  vivify_2340:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "fatarrow" :anon :subid("460_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2988
    .param pmc param_2989
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1821
    .lex "self", param_2988
    .lex "$/", param_2989
.annotate 'line', 1822
    new $P118, "Undef"
    set $P2990, $P118
    .lex "$past", $P2990
    set $P2991, param_2989
    unless_null $P2991, vivify_2341
    $P2991 = root_new ['parrot';'Hash']
  vivify_2341:
    set $P120, $P2991["val"]
    unless_null $P120, vivify_2342
    new $P120, "Undef"
  vivify_2342:
    $P121 = $P120."ast"()
    set $P2990, $P121
.annotate 'line', 1823
    set $P120, $P2990
    unless_null $P120, vivify_2343
    new $P120, "Undef"
  vivify_2343:
    set $P2992, param_2989
    unless_null $P2992, vivify_2344
    $P2992 = root_new ['parrot';'Hash']
  vivify_2344:
    set $P121, $P2992["key"]
    unless_null $P121, vivify_2345
    new $P121, "Undef"
  vivify_2345:
    $P123 = $P121."Str"()
    $P120."named"($P123)
.annotate 'line', 1824
    set $P120, param_2989
    set $P121, $P2990
    unless_null $P121, vivify_2346
    new $P121, "Undef"
  vivify_2346:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1821
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair" :anon :subid("461_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_2994
    .param pmc param_2995
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1827
    .const 'Sub' $P3003 = "615_1335114138.94729" 
    capture_lex $P3003
    .lex "self", param_2994
    .lex "$/", param_2995
.annotate 'line', 1828
    set $P2997, param_2995
    unless_null $P2997, vivify_2347
    $P2997 = root_new ['parrot';'Hash']
  vivify_2347:
    set $P120, $P2997["variable"]
    unless_null $P120, vivify_2348
    new $P120, "Undef"
  vivify_2348:
    if $P120, if_2996
.annotate 'line', 1831
    .const 'Sub' $P3003 = "615_1335114138.94729" 
    capture_lex $P3003
    $P123 = $P3003()
    set $P118, $P123
.annotate 'line', 1828
    goto if_2996_end
  if_2996:
.annotate 'line', 1829
    set $P2998, param_2995
    unless_null $P2998, vivify_2360
    $P2998 = root_new ['parrot';'Hash']
  vivify_2360:
    set $P121, $P2998["variable"]
    unless_null $P121, vivify_2361
    new $P121, "Undef"
  vivify_2361:
    $P123 = $P121."ast"()
    set $P2999, param_2995
    unless_null $P2999, vivify_2362
    $P2999 = root_new ['parrot';'Hash']
  vivify_2362:
    set $P3000, $P2999["variable"]
    unless_null $P3000, vivify_2363
    $P3000 = root_new ['parrot';'Hash']
  vivify_2363:
    set $P124, $P3000["desigilname"]
    unless_null $P124, vivify_2364
    new $P124, "Undef"
  vivify_2364:
    set $S100, $P124
    $P123."named"($S100)
.annotate 'line', 1830
    set $P121, param_2995
    set $P3001, param_2995
    unless_null $P3001, vivify_2365
    $P3001 = root_new ['parrot';'Hash']
  vivify_2365:
    set $P123, $P3001["variable"]
    unless_null $P123, vivify_2366
    new $P123, "Undef"
  vivify_2366:
    $P124 = $P123."ast"()
    $P125 = $P121."!make"($P124)
.annotate 'line', 1828
    set $P118, $P125
  if_2996_end:
.annotate 'line', 1827
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3002"  :anon :subid("615_1335114138.94729") :outer("461_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1832
    new $P121, "Undef"
    set $P3004, $P121
    .lex "$past", $P3004
.annotate 'line', 1833
    find_lex $P3006, "$/"
    unless_null $P3006, vivify_2349
    $P3006 = root_new ['parrot';'Hash']
  vivify_2349:
    set $P124, $P3006["circumfix"]
    unless_null $P124, vivify_2350
    new $P124, "Undef"
  vivify_2350:
    if $P124, if_3005
.annotate 'line', 1834
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Val"]
    find_lex $P3009, "$/"
    unless_null $P3009, vivify_2351
    $P3009 = root_new ['parrot';'Hash']
  vivify_2351:
    set $P134, $P3009["not"]
    unless_null $P134, vivify_2352
    new $P134, "Undef"
  vivify_2352:
    isfalse $I101, $P134
    $P135 = $P133."new"($I101 :named("value"))
    set $P123, $P135
.annotate 'line', 1833
    goto if_3005_end
  if_3005:
    new $P126, "Float"
    assign $P126, 0
    set $I100, $P126
    find_lex $P3007, "$/"
    unless_null $P3007, vivify_2353
    $P3007 = root_new ['parrot';'Hash']
  vivify_2353:
    set $P3008, $P3007["circumfix"]
    unless_null $P3008, vivify_2354
    $P3008 = root_new ['parrot';'ResizablePMCArray']
  vivify_2354:
    set $P127, $P3008[$I100]
    unless_null $P127, vivify_2355
    new $P127, "Undef"
  vivify_2355:
    $P128 = $P127."ast"()
    set $P123, $P128
  if_3005_end:
    set $P3004, $P123
.annotate 'line', 1835
    set $P123, $P3004
    unless_null $P123, vivify_2356
    new $P123, "Undef"
  vivify_2356:
    find_lex $P3010, "$/"
    unless_null $P3010, vivify_2357
    $P3010 = root_new ['parrot';'Hash']
  vivify_2357:
    set $P124, $P3010["identifier"]
    unless_null $P124, vivify_2358
    new $P124, "Undef"
  vivify_2358:
    set $S100, $P124
    $P123."named"($S100)
.annotate 'line', 1836
    find_dynamic_lex $P123, "$/"
    set $P124, $P3004
    unless_null $P124, vivify_2359
    new $P124, "Undef"
  vivify_2359:
    $P126 = $P123."!make"($P124)
.annotate 'line', 1831
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable" :anon :subid("462_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3012
    .param pmc param_3013
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1840
    .const 'Sub' $P3019 = "616_1335114138.94729" 
    capture_lex $P3019
    .lex "self", param_3012
    .lex "$/", param_3013
.annotate 'line', 1841
    new $P118, "Undef"
    set $P3014, $P118
    .lex "$past", $P3014
.annotate 'line', 1840
    set $P120, $P3014
    unless_null $P120, vivify_2367
    new $P120, "Undef"
  vivify_2367:
.annotate 'line', 1842
    set $P3016, param_3013
    unless_null $P3016, vivify_2368
    $P3016 = root_new ['parrot';'Hash']
  vivify_2368:
    set $P120, $P3016["postcircumfix"]
    unless_null $P120, vivify_2369
    new $P120, "Undef"
  vivify_2369:
    if $P120, if_3015
.annotate 'line', 1846
    .const 'Sub' $P3019 = "616_1335114138.94729" 
    capture_lex $P3019
    $P3019()
    goto if_3015_end
  if_3015:
.annotate 'line', 1843
    set $P3017, param_3013
    unless_null $P3017, vivify_2439
    $P3017 = root_new ['parrot';'Hash']
  vivify_2439:
    set $P121, $P3017["postcircumfix"]
    unless_null $P121, vivify_2440
    new $P121, "Undef"
  vivify_2440:
    $P123 = $P121."ast"()
    set $P3014, $P123
.annotate 'line', 1844
    set $P121, $P3014
    unless_null $P121, vivify_2441
    new $P121, "Undef"
  vivify_2441:
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Var"]
    $P127 = $P126."new"("$/" :named("name"))
    $P121."unshift"($P127)
  if_3015_end:
.annotate 'line', 1908
    set $P120, param_3013
    set $P121, $P3014
    unless_null $P121, vivify_2442
    new $P121, "Undef"
  vivify_2442:
    $P123 = $P120."!make"($P121)
.annotate 'line', 1840
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3018"  :anon :subid("616_1335114138.94729") :outer("462_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1846
    .const 'Sub' $P3041 = "618_1335114138.94729" 
    capture_lex $P3041
    .const 'Sub' $P3032 = "617_1335114138.94729" 
    capture_lex $P3032
.annotate 'line', 1847
    $P3021 = root_new ['parrot';'ResizablePMCArray']
    set $P3020, $P3021
    .lex "@name", $P3020
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "NQP"
    get_who $P124, $P123
    set $P125, $P124["Compiler"]
    find_lex $P126, "$/"
    unless_null $P126, vivify_2370
    new $P126, "Undef"
  vivify_2370:
    set $S100, $P126
    $P127 = $P125."parse_name"($S100)
    set $P3020, $P127
.annotate 'line', 1848
    set $P3023, $P3020
    unless_null $P3023, vivify_2371
    $P3023 = root_new ['parrot';'ResizablePMCArray']
  vivify_2371:
    set $N100, $P3023
    set $N101, 1
    isgt $I100, $N100, $N101
    if $I100, if_3022
.annotate 'line', 1855
    new $P124, "Float"
    assign $P124, 0
    set $I101, $P124
    find_lex $P3029, "$/"
    unless_null $P3029, vivify_2372
    $P3029 = root_new ['parrot';'Hash']
  vivify_2372:
    set $P3030, $P3029["twigil"]
    unless_null $P3030, vivify_2373
    $P3030 = root_new ['parrot';'ResizablePMCArray']
  vivify_2373:
    set $P125, $P3030[$I101]
    unless_null $P125, vivify_2374
    new $P125, "Undef"
  vivify_2374:
    set $S100, $P125
    iseq $I102, $S100, "*"
    if $I102, if_3028
.annotate 'line', 1866
    new $P131, "Float"
    assign $P131, 0
    set $I103, $P131
    find_lex $P3038, "$/"
    unless_null $P3038, vivify_2375
    $P3038 = root_new ['parrot';'Hash']
  vivify_2375:
    set $P3039, $P3038["twigil"]
    unless_null $P3039, vivify_2376
    $P3039 = root_new ['parrot';'ResizablePMCArray']
  vivify_2376:
    set $P132, $P3039[$I103]
    unless_null $P132, vivify_2377
    new $P132, "Undef"
  vivify_2377:
    set $S101, $P132
    iseq $I104, $S101, "!"
    if $I104, if_3037
.annotate 'line', 1898
    find_dynamic_lex $P141, "$*W"
    unless_null $P141, vivify_2378
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$W"]
    unless_null $P141, vivify_2379
    die "Contextual $*W not found"
  vivify_2379:
  vivify_2378:
    new $P142, "Float"
    assign $P142, 0
    set $I105, $P142
    set $P3061, $P3020
    unless_null $P3061, vivify_2380
    $P3061 = root_new ['parrot';'ResizablePMCArray']
  vivify_2380:
    set $P143, $P3061[$I105]
    unless_null $P143, vivify_2381
    new $P143, "Undef"
  vivify_2381:
    set $S102, $P143
    $P144 = $P141."is_package"($S102)
    if $P144, if_3060
.annotate 'line', 1903
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P150, $P147["Var"]
.annotate 'line', 1904
    set $P3064, $P3020
    unless_null $P3064, vivify_2382
    $P3064 = root_new ['parrot';'ResizablePMCArray']
  vivify_2382:
    $P151 = $P3064."pop"()
    set $S103, $P151
    find_lex $P3065, "$/"
    unless_null $P3065, vivify_2383
    $P3065 = root_new ['parrot';'Hash']
  vivify_2383:
    set $P152, $P3065["sigil"]
    unless_null $P152, vivify_2384
    new $P152, "Undef"
  vivify_2384:
    $P153 = "vivitype"($P152)
.annotate 'line', 1903
    $P154 = $P150."new"($S103 :named("name"), $P153 :named("viviself"))
    store_lex "$past", $P154
.annotate 'line', 1902
    set $P138, $P154
.annotate 'line', 1898
    goto if_3060_end
  if_3060:
.annotate 'line', 1899
    set $P3062, $P3020
    unless_null $P3062, vivify_2385
    $P3062 = root_new ['parrot';'ResizablePMCArray']
  vivify_2385:
    find_lex $P145, "$/"
    unless_null $P145, vivify_2386
    new $P145, "Undef"
  vivify_2386:
    $P146 = "lexical_package_lookup"($P3062, $P145)
    store_lex "$past", $P146
.annotate 'line', 1900
    find_lex $P145, "$past"
    unless_null $P145, vivify_2387
    new $P145, "Undef"
  vivify_2387:
    find_lex $P3063, "$/"
    unless_null $P3063, vivify_2388
    $P3063 = root_new ['parrot';'Hash']
  vivify_2388:
    set $P146, $P3063["sigil"]
    unless_null $P146, vivify_2389
    new $P146, "Undef"
  vivify_2389:
    $P147 = "vivitype"($P146)
    $P149 = $P145."viviself"($P147)
.annotate 'line', 1898
    set $P138, $P149
  if_3060_end:
    set $P129, $P138
.annotate 'line', 1866
    goto if_3037_end
  if_3037:
    .const 'Sub' $P3041 = "618_1335114138.94729" 
    capture_lex $P3041
    $P137 = $P3041()
    set $P129, $P137
  if_3037_end:
    set $P123, $P129
.annotate 'line', 1855
    goto if_3028_end
  if_3028:
    .const 'Sub' $P3032 = "617_1335114138.94729" 
    capture_lex $P3032
    $P128 = $P3032()
    set $P123, $P128
  if_3028_end:
    set $P121, $P123
.annotate 'line', 1848
    goto if_3022_end
  if_3022:
.annotate 'line', 1849
    find_lex $P3025, "$/"
    unless_null $P3025, vivify_2431
    $P3025 = root_new ['parrot';'Hash']
  vivify_2431:
    set $P123, $P3025["twigil"]
    unless_null $P123, vivify_2432
    new $P123, "Undef"
  vivify_2432:
    unless $P123, if_3024_end
.annotate 'line', 1850
    find_lex $P124, "$/"
    unless_null $P124, vivify_2433
    new $P124, "Undef"
  vivify_2433:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Twigil not allowed on multi-part name")
  if_3024_end:
.annotate 'line', 1852
    set $P3026, $P3020
    unless_null $P3026, vivify_2434
    $P3026 = root_new ['parrot';'ResizablePMCArray']
  vivify_2434:
    find_lex $P123, "$/"
    unless_null $P123, vivify_2435
    new $P123, "Undef"
  vivify_2435:
    $P124 = "lexical_package_lookup"($P3026, $P123)
    store_lex "$past", $P124
.annotate 'line', 1853
    find_lex $P123, "$past"
    unless_null $P123, vivify_2436
    new $P123, "Undef"
  vivify_2436:
    find_lex $P3027, "$/"
    unless_null $P3027, vivify_2437
    $P3027 = root_new ['parrot';'Hash']
  vivify_2437:
    set $P124, $P3027["sigil"]
    unless_null $P124, vivify_2438
    new $P124, "Undef"
  vivify_2438:
    $P125 = "vivitype"($P124)
    $P126 = $P123."viviself"($P125)
.annotate 'line', 1848
    set $P121, $P126
  if_3022_end:
.annotate 'line', 1846
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3040"  :anon :subid("618_1335114138.94729") :outer("616_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1866
    .const 'Sub' $P3051 = "619_1335114138.94729" 
    capture_lex $P3051
.annotate 'line', 1868
    new $P133, "Undef"
    set $P3042, $P133
    .lex "$name", $P3042
.annotate 'line', 1869
    new $P134, "Undef"
    set $P3043, $P134
    .lex "$ch", $P3043
.annotate 'line', 1868
    find_lex $P3044, "@name"
    unless_null $P3044, vivify_2390
    $P3044 = root_new ['parrot';'ResizablePMCArray']
  vivify_2390:
    $P136 = $P3044."pop"()
    set $S102, $P136
    new $P137, 'String'
    set $P137, $S102
    set $P3042, $P137
.annotate 'line', 1869
    find_dynamic_lex $P139, "$*PKGDECL"
    unless_null $P139, vivify_2391
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PKGDECL"]
    unless_null $P139, vivify_2392
    die "Contextual $*PKGDECL not found"
  vivify_2392:
  vivify_2391:
    set $S102, $P139
    iseq $I105, $S102, "role"
    if $I105, if_3045
    find_dynamic_lex $P147, "$*W"
    unless_null $P147, vivify_2393
    get_hll_global $P145, "GLOBAL"
    get_who $P146, $P145
    set $P147, $P146["$W"]
    unless_null $P147, vivify_2394
    die "Contextual $*W not found"
  vivify_2394:
  vivify_2393:
    find_dynamic_lex $P151, "$*PACKAGE"
    unless_null $P151, vivify_2395
    get_hll_global $P149, "GLOBAL"
    get_who $P150, $P149
    set $P151, $P150["$PACKAGE"]
    unless_null $P151, vivify_2396
    die "Contextual $*PACKAGE not found"
  vivify_2396:
  vivify_2395:
    $P152 = $P147."get_ref"($P151)
    set $P136, $P152
    goto if_3045_end
  if_3045:
    get_hll_global $P140, "GLOBAL"
    nqp_get_package_through_who $P141, $P140, "PAST"
    get_who $P142, $P141
    set $P143, $P142["Var"]
    $P144 = $P143."new"("$?CLASS" :named("name"))
    set $P136, $P144
  if_3045_end:
    set $P3043, $P136
.annotate 'line', 1870
    new $P136, "Float"
    assign $P136, 1
    set $P3046, $P3043
    unless_null $P3046, vivify_2397
    $P3046 = root_new ['parrot';'Hash']
    set $P3043, $P3046
  vivify_2397:
    set $P3046["has_compile_time_value"], $P136
.annotate 'line', 1871
    find_dynamic_lex $P138, "$*PACKAGE"
    unless_null $P138, vivify_2398
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$PACKAGE"]
    unless_null $P138, vivify_2399
    die "Contextual $*PACKAGE not found"
  vivify_2399:
  vivify_2398:
    set $P3047, $P3043
    unless_null $P3047, vivify_2400
    $P3047 = root_new ['parrot';'Hash']
    set $P3043, $P3047
  vivify_2400:
    set $P3047["compile_time_value"], $P138
.annotate 'line', 1872
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
    set $P140, $P3042
    unless_null $P140, vivify_2401
    new $P140, "Undef"
  vivify_2401:
.annotate 'line', 1874
    find_lex $P3048, "$/"
    unless_null $P3048, vivify_2402
    $P3048 = root_new ['parrot';'Hash']
  vivify_2402:
    set $P141, $P3048["sigil"]
    unless_null $P141, vivify_2403
    new $P141, "Undef"
  vivify_2403:
    $P142 = "vivitype"($P141)
.annotate 'line', 1875
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "PAST"
    get_who $P145, $P144
    set $P146, $P145["Op"]
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Var"]
    $P152 = $P151."new"("self" :named("name"))
    $P153 = $P146."new"($P152, "nqp_decontainerize PP" :named("pirop"))
    set $P154, $P3043
    unless_null $P154, vivify_2404
    new $P154, "Undef"
  vivify_2404:
    $P155 = $P139."new"($P153, $P154, $P140 :named("name"), "attribute_6model" :named("scope"), $P142 :named("viviself"))
.annotate 'line', 1872
    store_lex "$past", $P155
.annotate 'line', 1880
    find_dynamic_lex $P139, "$*IN_DECL"
    unless_null $P139, vivify_2405
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$IN_DECL"]
    unless_null $P139, vivify_2406
    die "Contextual $*IN_DECL not found"
  vivify_2406:
  vivify_2405:
    unless $P139, unless_3049
    set $P136, $P139
    goto unless_3049_end
  unless_3049:
    .const 'Sub' $P3051 = "619_1335114138.94729" 
    capture_lex $P3051
    $P142 = $P3051()
    set $P136, $P142
  unless_3049_end:
.annotate 'line', 1866
    .return ($P136)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3050"  :anon :subid("619_1335114138.94729") :outer("618_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1880
    .const 'Sub' $P3054 = "620_1335114138.94729" 
    capture_lex $P3054
.annotate 'line', 1881
    new $P140, "Undef"
    set $P3052, $P140
    .lex "$attr", $P3052
.annotate 'line', 1880
    set $P141, $P3052
    unless_null $P141, vivify_2407
    new $P141, "Undef"
  vivify_2407:
.annotate 'line', 1882
    find_dynamic_lex $P144, "$*PACKAGE"
    unless_null $P144, vivify_2408
    get_hll_global $P142, "GLOBAL"
    get_who $P143, $P142
    set $P144, $P143["$PACKAGE"]
    unless_null $P144, vivify_2409
    die "Contextual $*PACKAGE not found"
  vivify_2409:
  vivify_2408:
    get_how $P145, $P144
    find_dynamic_lex $P149, "$*PACKAGE"
    unless_null $P149, vivify_2410
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$PACKAGE"]
    unless_null $P149, vivify_2411
    die "Contextual $*PACKAGE not found"
  vivify_2411:
  vivify_2410:
    $P150 = $P145."attributes"($P149, 1 :named("local"))
    defined $I105, $P150
    unless $I105, for_undef_2412
    iter $P141, $P150
    new $P153, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P153, loop3057_handler
    push_eh $P153
  loop3057_test:
    unless $P141, loop3057_done
    shift $P151, $P141
  loop3057_redo:
    .const 'Sub' $P3054 = "620_1335114138.94729" 
    capture_lex $P3054
    $P3054($P151)
  loop3057_next:
    goto loop3057_test
  loop3057_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P154, exception, 'type'
    eq $P154, .CONTROL_LOOP_NEXT, loop3057_next
    eq $P154, .CONTROL_LOOP_REDO, loop3057_redo
  loop3057_done:
    pop_eh 
  for_undef_2412:
.annotate 'line', 1888
    set $P142, $P3052
    unless_null $P142, vivify_2416
    new $P142, "Undef"
  vivify_2416:
    defined $I105, $P142
    if $I105, if_3058
.annotate 'line', 1894
    find_lex $P144, "$/"
    unless_null $P144, vivify_2417
    new $P144, "Undef"
  vivify_2417:
    $P145 = $P144."CURSOR"()
    new $P146, 'String'
    set $P146, "Attribute '"
    find_lex $P147, "$name"
    unless_null $P147, vivify_2418
    new $P147, "Undef"
  vivify_2418:
    concat $P149, $P146, $P147
    concat $P150, $P149, "' not declared"
    $P151 = $P145."panic"($P150)
.annotate 'line', 1893
    set $P141, $P151
.annotate 'line', 1888
    goto if_3058_end
  if_3058:
.annotate 'line', 1889
    set $P144, $P3052
    unless_null $P144, vivify_2419
    new $P144, "Undef"
  vivify_2419:
    can $I106, $P144, "type"
    if $I106, if_3059
    new $P143, 'Integer'
    set $P143, $I106
    goto if_3059_end
  if_3059:
.annotate 'line', 1890
    find_lex $P145, "$past"
    unless_null $P145, vivify_2420
    new $P145, "Undef"
  vivify_2420:
    set $P146, $P3052
    unless_null $P146, vivify_2421
    new $P146, "Undef"
  vivify_2421:
    $P147 = $P146."type"()
    $P149 = $P145."type"($P147)
.annotate 'line', 1889
    set $P143, $P149
  if_3059_end:
.annotate 'line', 1888
    set $P141, $P143
  if_3058_end:
.annotate 'line', 1880
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3053"  :anon :subid("620_1335114138.94729") :outer("619_1335114138.94729")
    .param pmc param_3055
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1882
    .lex "$_", param_3055
.annotate 'line', 1883
    find_lex $P153, "$_"
    unless_null $P153, vivify_2413
    new $P153, "Undef"
  vivify_2413:
    $S102 = $P153."name"()
    find_lex $P154, "$name"
    unless_null $P154, vivify_2414
    new $P154, "Undef"
  vivify_2414:
    set $S103, $P154
    iseq $I106, $S102, $S103
    if $I106, if_3056
    new $P152, 'Integer'
    set $P152, $I106
    goto if_3056_end
  if_3056:
.annotate 'line', 1884
    find_lex $P155, "$_"
    unless_null $P155, vivify_2415
    new $P155, "Undef"
  vivify_2415:
    store_lex "$attr", $P155
.annotate 'line', 1885
    die 0, .CONTROL_LOOP_LAST
  if_3056_end:
.annotate 'line', 1882
    .return ($P152)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3031"  :anon :subid("617_1335114138.94729") :outer("616_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1856
    new $P127, "Undef"
    set $P3033, $P127
    .lex "$global_fallback", $P3033
    find_lex $P3034, "$/"
    unless_null $P3034, vivify_2422
    $P3034 = root_new ['parrot';'Hash']
  vivify_2422:
    set $P128, $P3034["sigil"]
    unless_null $P128, vivify_2423
    new $P128, "Undef"
  vivify_2423:
    set $S101, $P128
    new $P129, 'String'
    set $P129, $S101
    find_lex $P3035, "$/"
    unless_null $P3035, vivify_2424
    $P3035 = root_new ['parrot';'Hash']
  vivify_2424:
    set $P131, $P3035["desigilname"]
    unless_null $P131, vivify_2425
    new $P131, "Undef"
  vivify_2425:
    concat $P132, $P129, $P131
    new $P133, "ResizablePMCArray"
    push $P133, "GLOBAL"
    push $P133, $P132
    find_lex $P134, "$/"
    unless_null $P134, vivify_2426
    new $P134, "Undef"
  vivify_2426:
    $P135 = "lexical_package_lookup"($P133, $P134)
    set $P3033, $P135
.annotate 'line', 1857
    set $P128, $P3033
    unless_null $P128, vivify_2427
    new $P128, "Undef"
  vivify_2427:
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Op"]
.annotate 'line', 1858
    new $P134, "String"
    assign $P134, "Contextual "
    find_lex $P135, "$/"
    unless_null $P135, vivify_2428
    new $P135, "Undef"
  vivify_2428:
    set $S101, $P135
    concat $P136, $P134, $S101
    concat $P137, $P136, " not found"
    $P138 = $P133."new"($P137, "die" :named("pirop"))
.annotate 'line', 1857
    $P128."viviself"($P138)
.annotate 'line', 1861
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Var"]
.annotate 'line', 1862
    find_lex $P3036, "@name"
    unless_null $P3036, vivify_2429
    $P3036 = root_new ['parrot';'ResizablePMCArray']
  vivify_2429:
    $P133 = $P3036."pop"()
    set $S101, $P133
.annotate 'line', 1861
    set $P134, $P3033
    unless_null $P134, vivify_2430
    new $P134, "Undef"
  vivify_2430:
    $P135 = $P132."new"($S101 :named("name"), "contextual" :named("scope"), $P134 :named("viviself"))
    store_lex "$past", $P135
.annotate 'line', 1855
    .return ($P135)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<module>" :anon :subid("463_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3067
    .param pmc param_3068
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1911
    .lex "self", param_3067
    .lex "$/", param_3068
    set $P118, param_3068
    set $P3069, param_3068
    unless_null $P3069, vivify_2443
    $P3069 = root_new ['parrot';'Hash']
  vivify_2443:
    set $P120, $P3069["package_def"]
    unless_null $P120, vivify_2444
    new $P120, "Undef"
  vivify_2444:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<knowhow>" :anon :subid("464_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3071
    .param pmc param_3072
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1912
    .lex "self", param_3071
    .lex "$/", param_3072
    set $P118, param_3072
    set $P3073, param_3072
    unless_null $P3073, vivify_2445
    $P3073 = root_new ['parrot';'Hash']
  vivify_2445:
    set $P120, $P3073["package_def"]
    unless_null $P120, vivify_2446
    new $P120, "Undef"
  vivify_2446:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<class>" :anon :subid("465_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3075
    .param pmc param_3076
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1913
    .lex "self", param_3075
    .lex "$/", param_3076
    set $P118, param_3076
    set $P3077, param_3076
    unless_null $P3077, vivify_2447
    $P3077 = root_new ['parrot';'Hash']
  vivify_2447:
    set $P120, $P3077["package_def"]
    unless_null $P120, vivify_2448
    new $P120, "Undef"
  vivify_2448:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<grammar>" :anon :subid("466_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3079
    .param pmc param_3080
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1914
    .lex "self", param_3079
    .lex "$/", param_3080
    set $P118, param_3080
    set $P3081, param_3080
    unless_null $P3081, vivify_2449
    $P3081 = root_new ['parrot';'Hash']
  vivify_2449:
    set $P120, $P3081["package_def"]
    unless_null $P120, vivify_2450
    new $P120, "Undef"
  vivify_2450:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<role>" :anon :subid("467_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3083
    .param pmc param_3084
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1915
    .lex "self", param_3083
    .lex "$/", param_3084
    set $P118, param_3084
    set $P3085, param_3084
    unless_null $P3085, vivify_2451
    $P3085 = root_new ['parrot';'Hash']
  vivify_2451:
    set $P120, $P3085["package_def"]
    unless_null $P120, vivify_2452
    new $P120, "Undef"
  vivify_2452:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<native>" :anon :subid("468_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3087
    .param pmc param_3088
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1916
    .lex "self", param_3087
    .lex "$/", param_3088
    set $P118, param_3088
    set $P3089, param_3088
    unless_null $P3089, vivify_2453
    $P3089 = root_new ['parrot';'Hash']
  vivify_2453:
    set $P120, $P3089["package_def"]
    unless_null $P120, vivify_2454
    new $P120, "Undef"
  vivify_2454:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<stub>" :anon :subid("469_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3091
    .param pmc param_3092
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1918
    .lex "self", param_3091
    .lex "$/", param_3092
.annotate 'line', 1921
    new $P118, "Undef"
    set $P3093, $P118
    .lex "$HOW", $P3093
.annotate 'line', 1922
    new $P120, "Undef"
    set $P3094, $P120
    .lex "$PACKAGE", $P3094
.annotate 'line', 1921
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2455
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2456
    die "Contextual $*W not found"
  vivify_2456:
  vivify_2455:
    set $P3095, param_3092
    unless_null $P3095, vivify_2457
    $P3095 = root_new ['parrot';'Hash']
  vivify_2457:
    set $P3096, $P3095["metaclass"]
    unless_null $P3096, vivify_2458
    $P3096 = root_new ['parrot';'Hash']
  vivify_2458:
    set $P125, $P3096["identifier"]
    unless_null $P125, vivify_2459
    new $P125, "Undef"
  vivify_2459:
    $P126 = $P124."find_sym"($P125)
    set $P3093, $P126
.annotate 'line', 1922
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2460
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2461
    die "Contextual $*W not found"
  vivify_2461:
  vivify_2460:
    set $P125, $P3093
    unless_null $P125, vivify_2462
    new $P125, "Undef"
  vivify_2462:
    set $P3097, param_3092
    unless_null $P3097, vivify_2463
    $P3097 = root_new ['parrot';'Hash']
  vivify_2463:
    set $P126, $P3097["name"]
    unless_null $P126, vivify_2464
    new $P126, "Undef"
  vivify_2464:
    set $S100, $P126
    $P127 = $P124."pkg_create_mo"($P125, $S100 :named("name"))
    set $P3094, $P127
.annotate 'line', 1925
    find_dynamic_lex $P125, "$*SCOPE"
    unless_null $P125, vivify_2465
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$SCOPE"]
    unless_null $P125, vivify_2466
    die "Contextual $*SCOPE not found"
  vivify_2466:
  vivify_2465:
    set $S100, $P125
    iseq $I100, $S100, "our"
    unless $I100, unless_3099
    new $P121, 'Integer'
    set $P121, $I100
    goto unless_3099_end
  unless_3099:
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_2467
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_2468
    die "Contextual $*SCOPE not found"
  vivify_2468:
  vivify_2467:
    set $S101, $P128
    iseq $I101, $S101, ""
    new $P121, 'Integer'
    set $P121, $I101
  unless_3099_end:
    if $P121, if_3098
.annotate 'line', 1931
    find_dynamic_lex $P132, "$*SCOPE"
    unless_null $P132, vivify_2469
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$SCOPE"]
    unless_null $P132, vivify_2470
    die "Contextual $*SCOPE not found"
  vivify_2470:
  vivify_2469:
    set $S102, $P132
    iseq $I102, $S102, "my"
    if $I102, if_3108
.annotate 'line', 1938
    set $P133, param_3092
    unless_null $P133, vivify_2471
    new $P133, "Undef"
  vivify_2471:
    $P134 = $P133."CURSOR"()
    find_dynamic_lex $P137, "$*SCOPE"
    unless_null $P137, vivify_2472
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$SCOPE"]
    unless_null $P137, vivify_2473
    die "Contextual $*SCOPE not found"
  vivify_2473:
  vivify_2472:
    concat $P138, $P137, " scoped packages are not supported"
    $P134."panic"($P138)
.annotate 'line', 1937
    goto if_3108_end
  if_3108:
.annotate 'line', 1932
    set $P3110, param_3092
    unless_null $P3110, vivify_2474
    $P3110 = root_new ['parrot';'Hash']
  vivify_2474:
    set $P3111, $P3110["name"]
    unless_null $P3111, vivify_2475
    $P3111 = root_new ['parrot';'Hash']
  vivify_2475:
    set $P133, $P3111["identifier"]
    unless_null $P133, vivify_2476
    new $P133, "Undef"
  vivify_2476:
    set $N100, $P133
    set $N101, 1
    isne $I103, $N100, $N101
    unless $I103, if_3109_end
.annotate 'line', 1933
    set $P3112, param_3092
    unless_null $P3112, vivify_2477
    $P3112 = root_new ['parrot';'Hash']
  vivify_2477:
    set $P134, $P3112["name"]
    unless_null $P134, vivify_2478
    new $P134, "Undef"
  vivify_2478:
    $P135 = $P134."CURSOR"()
    $P135."panic"("A my scoped package cannot have a multi-part name yet")
  if_3109_end:
.annotate 'line', 1935
    find_dynamic_lex $P135, "$*W"
    unless_null $P135, vivify_2479
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$W"]
    unless_null $P135, vivify_2480
    die "Contextual $*W not found"
  vivify_2480:
  vivify_2479:
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_2481
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_2482
    die "Contextual $*W not found"
  vivify_2482:
  vivify_2481:
    $P139 = $P138."cur_lexpad"()
    new $P140, "Float"
    assign $P140, 0
    set $I103, $P140
    set $P3113, param_3092
    unless_null $P3113, vivify_2483
    $P3113 = root_new ['parrot';'Hash']
  vivify_2483:
    set $P3114, $P3113["name"]
    unless_null $P3114, vivify_2484
    $P3114 = root_new ['parrot';'Hash']
  vivify_2484:
    set $P3115, $P3114["identifier"]
    unless_null $P3115, vivify_2485
    $P3115 = root_new ['parrot';'ResizablePMCArray']
  vivify_2485:
    set $P141, $P3115[$I103]
    unless_null $P141, vivify_2486
    new $P141, "Undef"
  vivify_2486:
    set $P142, $P3094
    unless_null $P142, vivify_2487
    new $P142, "Undef"
  vivify_2487:
    $P135."install_lexical_symbol"($P139, $P141, $P142)
  if_3108_end:
.annotate 'line', 1931
    goto if_3098_end
  if_3098:
.annotate 'line', 1926
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2488
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2489
    die "Contextual $*W not found"
  vivify_2489:
  vivify_2488:
    find_dynamic_lex $P135, "$*OUTERPACKAGE"
    unless_null $P135, vivify_2490
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$OUTERPACKAGE"]
    unless_null $P135, vivify_2491
    die "Contextual $*OUTERPACKAGE not found"
  vivify_2491:
  vivify_2490:
    set $P3100, param_3092
    unless_null $P3100, vivify_2492
    $P3100 = root_new ['parrot';'Hash']
  vivify_2492:
    set $P3101, $P3100["name"]
    unless_null $P3101, vivify_2493
    $P3101 = root_new ['parrot';'Hash']
  vivify_2493:
    set $P136, $P3101["identifier"]
    unless_null $P136, vivify_2494
    new $P136, "Undef"
  vivify_2494:
    set $P137, $P3094
    unless_null $P137, vivify_2495
    new $P137, "Undef"
  vivify_2495:
    $P132."install_package_symbol"($P135, $P136, $P137)
.annotate 'line', 1927
    set $P3103, param_3092
    unless_null $P3103, vivify_2496
    $P3103 = root_new ['parrot';'Hash']
  vivify_2496:
    set $P3104, $P3103["name"]
    unless_null $P3104, vivify_2497
    $P3104 = root_new ['parrot';'Hash']
  vivify_2497:
    set $P129, $P3104["identifier"]
    unless_null $P129, vivify_2498
    new $P129, "Undef"
  vivify_2498:
    set $N100, $P129
    set $N101, 1
    iseq $I102, $N100, $N101
    unless $I102, if_3102_end
.annotate 'line', 1928
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_2499
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_2500
    die "Contextual $*W not found"
  vivify_2500:
  vivify_2499:
    find_dynamic_lex $P136, "$*W"
    unless_null $P136, vivify_2501
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$W"]
    unless_null $P136, vivify_2502
    die "Contextual $*W not found"
  vivify_2502:
  vivify_2501:
    $P137 = $P136."cur_lexpad"()
    new $P138, "Float"
    assign $P138, 0
    set $I103, $P138
    set $P3105, param_3092
    unless_null $P3105, vivify_2503
    $P3105 = root_new ['parrot';'Hash']
  vivify_2503:
    set $P3106, $P3105["name"]
    unless_null $P3106, vivify_2504
    $P3106 = root_new ['parrot';'Hash']
  vivify_2504:
    set $P3107, $P3106["identifier"]
    unless_null $P3107, vivify_2505
    $P3107 = root_new ['parrot';'ResizablePMCArray']
  vivify_2505:
    set $P139, $P3107[$I103]
    unless_null $P139, vivify_2506
    new $P139, "Undef"
  vivify_2506:
    set $P140, $P3094
    unless_null $P140, vivify_2507
    new $P140, "Undef"
  vivify_2507:
    $P133."install_lexical_symbol"($P137, $P139, $P140)
  if_3102_end:
  if_3098_end:
.annotate 'line', 1941
    set $P121, param_3092
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Stmts"]
    $P127 = $P126."new"()
    $P128 = $P121."!make"($P127)
.annotate 'line', 1918
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "package_def" :anon :subid("470_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3117
    .param pmc param_3118
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1944
    .const 'Sub' $P3167 = "624_1335114138.94729" 
    capture_lex $P3167
    .const 'Sub' $P3160 = "623_1335114138.94729" 
    capture_lex $P3160
    .const 'Sub' $P3140 = "621_1335114138.94729" 
    capture_lex $P3140
    .lex "self", param_3117
    .lex "$/", param_3118
.annotate 'line', 1946
    $P3120 = root_new ['parrot';'ResizablePMCArray']
    set $P3119, $P3120
    .lex "@ns", $P3119
.annotate 'line', 1947
    new $P118, "Undef"
    set $P3121, $P118
    .lex "$name", $P3121
.annotate 'line', 1948
    new $P120, "Undef"
    set $P3122, $P120
    .lex "$how", $P3122
.annotate 'line', 1951
    new $P121, "Undef"
    set $P3123, $P121
    .lex "$past", $P3123
.annotate 'line', 1946
    set $P3124, param_3118
    unless_null $P3124, vivify_2508
    $P3124 = root_new ['parrot';'Hash']
  vivify_2508:
    set $P3125, $P3124["name"]
    unless_null $P3125, vivify_2509
    $P3125 = root_new ['parrot';'Hash']
  vivify_2509:
    set $P123, $P3125["identifier"]
    unless_null $P123, vivify_2510
    new $P123, "Undef"
  vivify_2510:
    clone $P124, $P123
    set $P3119, $P124
.annotate 'line', 1947
    set $P3126, $P3119
    unless_null $P3126, vivify_2511
    $P3126 = root_new ['parrot';'ResizablePMCArray']
  vivify_2511:
    $P123 = $P3126."pop"()
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3121, $P124
.annotate 'line', 1948
    find_dynamic_lex $P125, "$*PKGDECL"
    unless_null $P125, vivify_2512
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$PKGDECL"]
    unless_null $P125, vivify_2513
    die "Contextual $*PKGDECL not found"
  vivify_2513:
  vivify_2512:
    find_dynamic_lex $P128, "%*HOW"
    unless_null $P128, vivify_2514
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["%HOW"]
    unless_null $P128, vivify_2515
    die "Contextual %*HOW not found"
  vivify_2515:
  vivify_2514:
    set $P129, $P128[$P125]
    unless_null $P129, vivify_2516
    new $P129, "Undef"
  vivify_2516:
    set $P3122, $P129
.annotate 'line', 1951
    set $P3128, param_3118
    unless_null $P3128, vivify_2517
    $P3128 = root_new ['parrot';'Hash']
  vivify_2517:
    set $P124, $P3128["block"]
    unless_null $P124, vivify_2518
    new $P124, "Undef"
  vivify_2518:
    if $P124, if_3127
    set $P3130, param_3118
    unless_null $P3130, vivify_2519
    $P3130 = root_new ['parrot';'Hash']
  vivify_2519:
    set $P127, $P3130["comp_unit"]
    unless_null $P127, vivify_2520
    new $P127, "Undef"
  vivify_2520:
    $P128 = $P127."ast"()
    set $P123, $P128
    goto if_3127_end
  if_3127:
    set $P3129, param_3118
    unless_null $P3129, vivify_2521
    $P3129 = root_new ['parrot';'Hash']
  vivify_2521:
    set $P125, $P3129["block"]
    unless_null $P125, vivify_2522
    new $P125, "Undef"
  vivify_2522:
    $P126 = $P125."ast"()
    set $P123, $P126
  if_3127_end:
    set $P3123, $P123
.annotate 'line', 1952
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2523
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2524
    die "Contextual $*SCOPE not found"
  vivify_2524:
  vivify_2523:
    set $S100, $P126
    iseq $I100, $S100, "our"
    unless $I100, unless_3132
    new $P123, 'Integer'
    set $P123, $I100
    goto unless_3132_end
  unless_3132:
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2525
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2526
    die "Contextual $*SCOPE not found"
  vivify_2526:
  vivify_2525:
    set $S101, $P129
    iseq $I101, $S101, ""
    new $P123, 'Integer'
    set $P123, $I101
  unless_3132_end:
    unless $P123, if_3131_end
.annotate 'line', 1953
    set $P131, $P3123
    unless_null $P131, vivify_2527
    new $P131, "Undef"
  vivify_2527:
    set $P3133, param_3118
    unless_null $P3133, vivify_2528
    $P3133 = root_new ['parrot';'Hash']
  vivify_2528:
    set $P3134, $P3133["name"]
    unless_null $P3134, vivify_2529
    $P3134 = root_new ['parrot';'Hash']
  vivify_2529:
    set $P132, $P3134["identifier"]
    unless_null $P132, vivify_2530
    new $P132, "Undef"
  vivify_2530:
    $P131."namespace"($P132)
  if_3131_end:
.annotate 'line', 1960
    set $P124, $P3122
    unless_null $P124, vivify_2531
    new $P124, "Undef"
  vivify_2531:
    can $I100, $P124, "parametric"
    if $I100, if_3136
    new $P123, 'Integer'
    set $P123, $I100
    goto if_3136_end
  if_3136:
    set $P125, $P3122
    unless_null $P125, vivify_2532
    new $P125, "Undef"
  vivify_2532:
    set $P126, $P3122
    unless_null $P126, vivify_2533
    new $P126, "Undef"
  vivify_2533:
    $P127 = $P125."parametric"($P126)
    set $P123, $P127
  if_3136_end:
    if $P123, if_3135
.annotate 'line', 1970
    set $P128, $P3123
    unless_null $P128, vivify_2534
    new $P128, "Undef"
  vivify_2534:
    $P128."blocktype"("immediate")
.annotate 'line', 1971
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2535
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2536
    die "Contextual $*W not found"
  vivify_2536:
  vivify_2535:
    set $P132, $P3123
    unless_null $P132, vivify_2537
    new $P132, "Undef"
  vivify_2537:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2538
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2539
    die "Contextual $*PACKAGE not found"
  vivify_2539:
  vivify_2538:
    $P131."install_lexical_symbol"($P132, "$?PACKAGE", $P135)
.annotate 'line', 1972
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2540
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2541
    die "Contextual $*W not found"
  vivify_2541:
  vivify_2540:
    set $P132, $P3123
    unless_null $P132, vivify_2542
    new $P132, "Undef"
  vivify_2542:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2543
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2544
    die "Contextual $*PACKAGE not found"
  vivify_2544:
  vivify_2543:
    $P131."install_lexical_symbol"($P132, "$?CLASS", $P135)
.annotate 'line', 1969
    goto if_3135_end
  if_3135:
.annotate 'line', 1961
    set $P128, $P3123
    unless_null $P128, vivify_2545
    new $P128, "Undef"
  vivify_2545:
    $P128."blocktype"("declaration")
.annotate 'line', 1962
    set $P128, $P3123
    unless_null $P128, vivify_2546
    new $P128, "Undef"
  vivify_2546:
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    $P134 = $P133."new"("$?CLASS" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"))
    $P128."unshift"($P134)
.annotate 'line', 1964
    set $P128, $P3123
    unless_null $P128, vivify_2547
    new $P128, "Undef"
  vivify_2547:
    $P128."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 1965
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2548
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2549
    die "Contextual $*W not found"
  vivify_2549:
  vivify_2548:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2550
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2551
    die "Contextual $*PACKAGE not found"
  vivify_2551:
  vivify_2550:
    set $P135, $P3123
    unless_null $P135, vivify_2552
    new $P135, "Undef"
  vivify_2552:
    $P131."pkg_set_body_block"($P134, $P135)
.annotate 'line', 1966
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2553
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2554
    die "Contextual $*W not found"
  vivify_2554:
  vivify_2553:
    set $P132, $P3123
    unless_null $P132, vivify_2555
    new $P132, "Undef"
  vivify_2555:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2556
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2557
    die "Contextual $*PACKAGE not found"
  vivify_2557:
  vivify_2556:
    $P131."install_lexical_symbol"($P132, "$?PACKAGE", $P135)
.annotate 'line', 1967
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2558
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2559
    die "Contextual $*W not found"
  vivify_2559:
  vivify_2558:
    set $P132, $P3123
    unless_null $P132, vivify_2560
    new $P132, "Undef"
  vivify_2560:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2561
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2562
    die "Contextual $*PACKAGE not found"
  vivify_2562:
  vivify_2561:
    $P131."install_lexical_symbol"($P132, "$?ROLE", $P135)
  if_3135_end:
.annotate 'line', 1976
    set $P3138, param_3118
    unless_null $P3138, vivify_2563
    $P3138 = root_new ['parrot';'Hash']
  vivify_2563:
    set $P123, $P3138["parent"]
    unless_null $P123, vivify_2564
    new $P123, "Undef"
  vivify_2564:
    if $P123, if_3137
.annotate 'line', 1990
    set $P127, $P3122
    unless_null $P127, vivify_2565
    new $P127, "Undef"
  vivify_2565:
    can $I100, $P127, "set_default_parent"
    unless $I100, if_3158_end
    .const 'Sub' $P3160 = "623_1335114138.94729" 
    capture_lex $P3160
    $P3160()
  if_3158_end:
    goto if_3137_end
  if_3137:
.annotate 'line', 1976
    .const 'Sub' $P3140 = "621_1335114138.94729" 
    capture_lex $P3140
    $P3140()
  if_3137_end:
.annotate 'line', 1997
    set $P3164, param_3118
    unless_null $P3164, vivify_2593
    $P3164 = root_new ['parrot';'Hash']
  vivify_2593:
    set $P123, $P3164["role"]
    unless_null $P123, vivify_2594
    new $P123, "Undef"
  vivify_2594:
    unless $P123, if_3163_end
.annotate 'line', 1998
    set $P3165, param_3118
    unless_null $P3165, vivify_2595
    $P3165 = root_new ['parrot';'Hash']
  vivify_2595:
    set $P125, $P3165["role"]
    unless_null $P125, vivify_2596
    new $P125, "Undef"
  vivify_2596:
    defined $I100, $P125
    unless $I100, for_undef_2597
    iter $P124, $P125
    new $P131, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P131, loop3182_handler
    push_eh $P131
  loop3182_test:
    unless $P124, loop3182_done
    shift $P126, $P124
  loop3182_redo:
    .const 'Sub' $P3167 = "624_1335114138.94729" 
    capture_lex $P3167
    $P3167($P126)
  loop3182_next:
    goto loop3182_test
  loop3182_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P132, exception, 'type'
    eq $P132, .CONTROL_LOOP_NEXT, loop3182_next
    eq $P132, .CONTROL_LOOP_REDO, loop3182_redo
  loop3182_done:
    pop_eh 
  for_undef_2597:
  if_3163_end:
.annotate 'line', 2015
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_2612
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_2613
    die "Contextual $*W not found"
  vivify_2613:
  vivify_2612:
    find_dynamic_lex $P128, "$*PACKAGE"
    unless_null $P128, vivify_2614
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$PACKAGE"]
    unless_null $P128, vivify_2615
    die "Contextual $*PACKAGE not found"
  vivify_2615:
  vivify_2614:
    $P125."pkg_compose"($P128)
.annotate 'line', 2017
    set $P123, param_3118
    set $P124, $P3123
    unless_null $P124, vivify_2616
    new $P124, "Undef"
  vivify_2616:
    $P125 = $P123."!make"($P124)
.annotate 'line', 1944
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3159"  :anon :subid("623_1335114138.94729") :outer("470_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1991
    new $P128, "Undef"
    set $P3161, $P128
    .lex "$default", $P3161
    find_dynamic_lex $P133, "$*PKGDECL"
    unless_null $P133, vivify_2566
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PKGDECL"]
    unless_null $P133, vivify_2567
    die "Contextual $*PKGDECL not found"
  vivify_2567:
  vivify_2566:
    set $S100, $P133
    iseq $I101, $S100, "grammar"
    if $I101, if_3162
    new $P135, "ResizablePMCArray"
    push $P135, "NQPMu"
    set $P129, $P135
    goto if_3162_end
  if_3162:
    new $P134, "ResizablePMCArray"
    push $P134, "Regex"
    push $P134, "Cursor"
    set $P129, $P134
  if_3162_end:
    set $P3161, $P129
.annotate 'line', 1992
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2568
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2569
    die "Contextual $*W not found"
  vivify_2569:
  vivify_2568:
    find_dynamic_lex $P135, "$*PACKAGE"
    unless_null $P135, vivify_2570
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$PACKAGE"]
    unless_null $P135, vivify_2571
    die "Contextual $*PACKAGE not found"
  vivify_2571:
  vivify_2570:
.annotate 'line', 1993
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_2572
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_2573
    die "Contextual $*W not found"
  vivify_2573:
  vivify_2572:
    set $P139, $P3161
    unless_null $P139, vivify_2574
    new $P139, "Undef"
  vivify_2574:
    $P140 = $P138."find_sym"($P139)
    $P141 = $P132."pkg_add_parent_or_role"($P135, "set_default_parent", $P140)
.annotate 'line', 1990
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3139"  :anon :subid("621_1335114138.94729") :outer("470_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1976
    .const 'Sub' $P3144 = "622_1335114138.94729" 
    capture_lex $P3144
.annotate 'line', 1977
    new $P124, "Undef"
    set $P3141, $P124
    .lex "$parent", $P3141
.annotate 'line', 1978
    new $P125, "Undef"
    set $P3142, $P125
    .lex "$parent_found", $P3142
.annotate 'line', 1976
    set $P126, $P3141
    unless_null $P126, vivify_2575
    new $P126, "Undef"
  vivify_2575:
    set $P126, $P3142
    unless_null $P126, vivify_2576
    new $P126, "Undef"
  vivify_2576:
.annotate 'line', 1979
    .const 'Sub' $P3144 = "622_1335114138.94729" 
    capture_lex $P3144
    $P3144()
.annotate 'line', 1983
    set $P127, $P3142
    unless_null $P127, vivify_2583
    new $P127, "Undef"
  vivify_2583:
    if $P127, if_3155
.annotate 'line', 1987
    find_lex $P128, "$/"
    unless_null $P128, vivify_2584
    new $P128, "Undef"
  vivify_2584:
    $P129 = $P128."CURSOR"()
    new $P131, "String"
    assign $P131, "Could not find parent class '"
    new $P132, "Float"
    assign $P132, 0
    set $I100, $P132
    find_lex $P3156, "$/"
    unless_null $P3156, vivify_2585
    $P3156 = root_new ['parrot';'Hash']
  vivify_2585:
    set $P3157, $P3156["parent"]
    unless_null $P3157, vivify_2586
    $P3157 = root_new ['parrot';'ResizablePMCArray']
  vivify_2586:
    set $P133, $P3157[$I100]
    unless_null $P133, vivify_2587
    new $P133, "Undef"
  vivify_2587:
    set $S100, $P133
    concat $P134, $P131, $S100
    concat $P135, $P134, "'"
    $P137 = $P129."panic"($P135)
.annotate 'line', 1986
    set $P126, $P137
.annotate 'line', 1983
    goto if_3155_end
  if_3155:
.annotate 'line', 1984
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2588
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2589
    die "Contextual $*W not found"
  vivify_2589:
  vivify_2588:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2590
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2591
    die "Contextual $*PACKAGE not found"
  vivify_2591:
  vivify_2590:
    set $P135, $P3141
    unless_null $P135, vivify_2592
    new $P135, "Undef"
  vivify_2592:
    $P136 = $P131."pkg_add_parent_or_role"($P134, "add_parent", $P135)
.annotate 'line', 1983
    set $P126, $P136
  if_3155_end:
.annotate 'line', 1976
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3143"  :anon :subid("622_1335114138.94729") :outer("621_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1979
    new $P3150, 'ExceptionHandler'
    set_label $P3150, control_3149
    $P3150."handle_types_except"(.CONTROL_ALL)
    push_eh $P3150
.annotate 'line', 1980
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2577
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2578
    die "Contextual $*W not found"
  vivify_2578:
  vivify_2577:
    new $P129, "Float"
    assign $P129, 0
    set $I100, $P129
    find_lex $P3145, "$/"
    unless_null $P3145, vivify_2579
    $P3145 = root_new ['parrot';'Hash']
  vivify_2579:
    set $P3146, $P3145["parent"]
    unless_null $P3146, vivify_2580
    $P3146 = root_new ['parrot';'ResizablePMCArray']
  vivify_2580:
    set $P3147, $P3146[$I100]
    unless_null $P3147, vivify_2581
    $P3147 = root_new ['parrot';'Hash']
  vivify_2581:
    set $P131, $P3147["identifier"]
    unless_null $P131, vivify_2582
    new $P131, "Undef"
  vivify_2582:
    clone $P132, $P131
    $P133 = $P128."find_sym"($P132)
    store_lex "$parent", $P133
.annotate 'line', 1981
    new $P126, "Float"
    assign $P126, 1
    store_lex "$parent_found", $P126
.annotate 'line', 1979
    pop_eh 
    goto skip_handler_3148
  control_3149:
    peek_exception $P3151
    .local pmc exception 
    .get_results (exception) 
    new $P3153, 'Integer'
    set $P3153, 1
    set exception["handled"], $P3153
    set $I3154, exception["handled"]
    eq $I3154, 1, handled_3152
    rethrow exception
  handled_3152:
    finalize $P3151
    .return (exception)
  skip_handler_3148:
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3166"  :anon :subid("624_1335114138.94729") :outer("470_1335114138.94729")
    .param pmc param_3170
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1998
    .const 'Sub' $P3172 = "625_1335114138.94729" 
    capture_lex $P3172
.annotate 'line', 1999
    new $P127, "Undef"
    set $P3168, $P127
    .lex "$role", $P3168
.annotate 'line', 2000
    new $P128, "Undef"
    set $P3169, $P128
    .lex "$role_found", $P3169
    .lex "$_", param_3170
.annotate 'line', 1998
    set $P129, $P3168
    unless_null $P129, vivify_2598
    new $P129, "Undef"
  vivify_2598:
    set $P129, $P3169
    unless_null $P129, vivify_2599
    new $P129, "Undef"
  vivify_2599:
.annotate 'line', 2001
    .const 'Sub' $P3172 = "625_1335114138.94729" 
    capture_lex $P3172
    $P3172()
.annotate 'line', 2005
    set $P131, $P3169
    unless_null $P131, vivify_2604
    new $P131, "Undef"
  vivify_2604:
    if $P131, if_3181
.annotate 'line', 2009
    find_lex $P132, "$/"
    unless_null $P132, vivify_2605
    new $P132, "Undef"
  vivify_2605:
    $P133 = $P132."CURSOR"()
    new $P134, "String"
    assign $P134, "Could not find role '"
    find_lex $P135, "$_"
    unless_null $P135, vivify_2606
    new $P135, "Undef"
  vivify_2606:
    set $S100, $P135
    concat $P136, $P134, $S100
    concat $P137, $P136, "'"
    $P138 = $P133."panic"($P137)
.annotate 'line', 2008
    set $P129, $P138
.annotate 'line', 2005
    goto if_3181_end
  if_3181:
.annotate 'line', 2006
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_2607
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_2608
    die "Contextual $*W not found"
  vivify_2608:
  vivify_2607:
    find_dynamic_lex $P137, "$*PACKAGE"
    unless_null $P137, vivify_2609
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$PACKAGE"]
    unless_null $P137, vivify_2610
    die "Contextual $*PACKAGE not found"
  vivify_2610:
  vivify_2609:
    set $P138, $P3168
    unless_null $P138, vivify_2611
    new $P138, "Undef"
  vivify_2611:
    $P139 = $P134."pkg_add_parent_or_role"($P137, "add_role", $P138)
.annotate 'line', 2005
    set $P129, $P139
  if_3181_end:
.annotate 'line', 1998
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3171"  :anon :subid("625_1335114138.94729") :outer("624_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2001
    new $P3176, 'ExceptionHandler'
    set_label $P3176, control_3175
    $P3176."handle_types_except"(.CONTROL_ALL)
    push_eh $P3176
.annotate 'line', 2002
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2600
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2601
    die "Contextual $*W not found"
  vivify_2601:
  vivify_2600:
    find_lex $P3173, "$_"
    unless_null $P3173, vivify_2602
    $P3173 = root_new ['parrot';'Hash']
  vivify_2602:
    set $P133, $P3173["identifier"]
    unless_null $P133, vivify_2603
    new $P133, "Undef"
  vivify_2603:
    clone $P134, $P133
    $P135 = $P132."find_sym"($P134)
    store_lex "$role", $P135
.annotate 'line', 2003
    new $P129, "Float"
    assign $P129, 1
    store_lex "$role_found", $P129
.annotate 'line', 2001
    pop_eh 
    goto skip_handler_3174
  control_3175:
    peek_exception $P3177
    .local pmc exception 
    .get_results (exception) 
    new $P3179, 'Integer'
    set $P3179, 1
    set exception["handled"], $P3179
    set $I3180, exception["handled"]
    eq $I3180, 1, handled_3178
    rethrow exception
  handled_3178:
    finalize $P3177
    .return (exception)
  skip_handler_3174:
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<my>" :anon :subid("471_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3184
    .param pmc param_3185
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2020
    .lex "self", param_3184
    .lex "$/", param_3185
    set $P118, param_3185
    set $P3186, param_3185
    unless_null $P3186, vivify_2617
    $P3186 = root_new ['parrot';'Hash']
  vivify_2617:
    set $P120, $P3186["scoped"]
    unless_null $P120, vivify_2618
    new $P120, "Undef"
  vivify_2618:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<our>" :anon :subid("472_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3188
    .param pmc param_3189
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2021
    .lex "self", param_3188
    .lex "$/", param_3189
    set $P118, param_3189
    set $P3190, param_3189
    unless_null $P3190, vivify_2619
    $P3190 = root_new ['parrot';'Hash']
  vivify_2619:
    set $P120, $P3190["scoped"]
    unless_null $P120, vivify_2620
    new $P120, "Undef"
  vivify_2620:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<has>" :anon :subid("473_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3192
    .param pmc param_3193
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2022
    .lex "self", param_3192
    .lex "$/", param_3193
    set $P118, param_3193
    set $P3194, param_3193
    unless_null $P3194, vivify_2621
    $P3194 = root_new ['parrot';'Hash']
  vivify_2621:
    set $P120, $P3194["scoped"]
    unless_null $P120, vivify_2622
    new $P120, "Undef"
  vivify_2622:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scoped" :anon :subid("474_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3196
    .param pmc param_3197
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2024
    .lex "self", param_3196
    .lex "$/", param_3197
.annotate 'line', 2025
    set $P118, param_3197
    set $P3199, param_3197
    unless_null $P3199, vivify_2623
    $P3199 = root_new ['parrot';'Hash']
  vivify_2623:
    set $P121, $P3199["declarator"]
    unless_null $P121, vivify_2624
    new $P121, "Undef"
  vivify_2624:
    if $P121, if_3198
.annotate 'line', 2026
    set $P3202, param_3197
    unless_null $P3202, vivify_2625
    $P3202 = root_new ['parrot';'Hash']
  vivify_2625:
    set $P126, $P3202["multi_declarator"]
    unless_null $P126, vivify_2626
    new $P126, "Undef"
  vivify_2626:
    if $P126, if_3201
.annotate 'line', 2027
    set $P3204, param_3197
    unless_null $P3204, vivify_2627
    $P3204 = root_new ['parrot';'Hash']
  vivify_2627:
    set $P129, $P3204["package_declarator"]
    unless_null $P129, vivify_2628
    new $P129, "Undef"
  vivify_2628:
    $P131 = $P129."ast"()
    set $P125, $P131
.annotate 'line', 2026
    goto if_3201_end
  if_3201:
    set $P3203, param_3197
    unless_null $P3203, vivify_2629
    $P3203 = root_new ['parrot';'Hash']
  vivify_2629:
    set $P127, $P3203["multi_declarator"]
    unless_null $P127, vivify_2630
    new $P127, "Undef"
  vivify_2630:
    $P128 = $P127."ast"()
    set $P125, $P128
  if_3201_end:
    set $P120, $P125
.annotate 'line', 2025
    goto if_3198_end
  if_3198:
    set $P3200, param_3197
    unless_null $P3200, vivify_2631
    $P3200 = root_new ['parrot';'Hash']
  vivify_2631:
    set $P123, $P3200["declarator"]
    unless_null $P123, vivify_2632
    new $P123, "Undef"
  vivify_2632:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3198_end:
    $P132 = $P118."!make"($P120)
.annotate 'line', 2024
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "declarator" :anon :subid("475_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3206
    .param pmc param_3207
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2030
    .lex "self", param_3206
    .lex "$/", param_3207
.annotate 'line', 2031
    set $P118, param_3207
.annotate 'line', 2032
    set $P3209, param_3207
    unless_null $P3209, vivify_2633
    $P3209 = root_new ['parrot';'Hash']
  vivify_2633:
    set $P121, $P3209["routine_declarator"]
    unless_null $P121, vivify_2634
    new $P121, "Undef"
  vivify_2634:
    if $P121, if_3208
.annotate 'line', 2033
    set $P3211, param_3207
    unless_null $P3211, vivify_2635
    $P3211 = root_new ['parrot';'Hash']
  vivify_2635:
    set $P125, $P3211["variable_declarator"]
    unless_null $P125, vivify_2636
    new $P125, "Undef"
  vivify_2636:
    $P126 = $P125."ast"()
    set $P120, $P126
.annotate 'line', 2032
    goto if_3208_end
  if_3208:
    set $P3210, param_3207
    unless_null $P3210, vivify_2637
    $P3210 = root_new ['parrot';'Hash']
  vivify_2637:
    set $P123, $P3210["routine_declarator"]
    unless_null $P123, vivify_2638
    new $P123, "Undef"
  vivify_2638:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3208_end:
    $P127 = $P118."!make"($P120)
.annotate 'line', 2030
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<multi>" :anon :subid("476_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3213
    .param pmc param_3214
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2036
    .lex "self", param_3213
    .lex "$/", param_3214
    set $P118, param_3214
    set $P3216, param_3214
    unless_null $P3216, vivify_2639
    $P3216 = root_new ['parrot';'Hash']
  vivify_2639:
    set $P121, $P3216["declarator"]
    unless_null $P121, vivify_2640
    new $P121, "Undef"
  vivify_2640:
    if $P121, if_3215
    set $P3218, param_3214
    unless_null $P3218, vivify_2641
    $P3218 = root_new ['parrot';'Hash']
  vivify_2641:
    set $P125, $P3218["routine_def"]
    unless_null $P125, vivify_2642
    new $P125, "Undef"
  vivify_2642:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3215_end
  if_3215:
    set $P3217, param_3214
    unless_null $P3217, vivify_2643
    $P3217 = root_new ['parrot';'Hash']
  vivify_2643:
    set $P123, $P3217["declarator"]
    unless_null $P123, vivify_2644
    new $P123, "Undef"
  vivify_2644:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3215_end:
    $P127 = $P118."!make"($P120)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<proto>" :anon :subid("477_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3220
    .param pmc param_3221
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2037
    .lex "self", param_3220
    .lex "$/", param_3221
    set $P118, param_3221
    set $P3223, param_3221
    unless_null $P3223, vivify_2645
    $P3223 = root_new ['parrot';'Hash']
  vivify_2645:
    set $P121, $P3223["declarator"]
    unless_null $P121, vivify_2646
    new $P121, "Undef"
  vivify_2646:
    if $P121, if_3222
    set $P3225, param_3221
    unless_null $P3225, vivify_2647
    $P3225 = root_new ['parrot';'Hash']
  vivify_2647:
    set $P125, $P3225["routine_def"]
    unless_null $P125, vivify_2648
    new $P125, "Undef"
  vivify_2648:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3222_end
  if_3222:
    set $P3224, param_3221
    unless_null $P3224, vivify_2649
    $P3224 = root_new ['parrot';'Hash']
  vivify_2649:
    set $P123, $P3224["declarator"]
    unless_null $P123, vivify_2650
    new $P123, "Undef"
  vivify_2650:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3222_end:
    $P127 = $P118."!make"($P120)
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<null>" :anon :subid("478_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3227
    .param pmc param_3228
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2038
    .lex "self", param_3227
    .lex "$/", param_3228
    set $P118, param_3228
    set $P3229, param_3228
    unless_null $P3229, vivify_2651
    $P3229 = root_new ['parrot';'Hash']
  vivify_2651:
    set $P120, $P3229["declarator"]
    unless_null $P120, vivify_2652
    new $P120, "Undef"
  vivify_2652:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "variable_declarator" :anon :subid("479_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3231
    .param pmc param_3232
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2041
    .const 'Sub' $P3267 = "627_1335114138.94729" 
    capture_lex $P3267
    .const 'Sub' $P3244 = "626_1335114138.94729" 
    capture_lex $P3244
    .lex "self", param_3231
    .lex "$/", param_3232
.annotate 'line', 2042
    new $P118, "Undef"
    set $P3233, $P118
    .lex "$past", $P3233
.annotate 'line', 2043
    new $P120, "Undef"
    set $P3234, $P120
    .lex "$sigil", $P3234
.annotate 'line', 2044
    new $P121, "Undef"
    set $P3235, $P121
    .lex "$name", $P3235
.annotate 'line', 2045
    new $P123, "Undef"
    set $P3236, $P123
    .lex "$BLOCK", $P3236
.annotate 'line', 2042
    set $P3237, param_3232
    unless_null $P3237, vivify_2653
    $P3237 = root_new ['parrot';'Hash']
  vivify_2653:
    set $P124, $P3237["variable"]
    unless_null $P124, vivify_2654
    new $P124, "Undef"
  vivify_2654:
    $P125 = $P124."ast"()
    set $P3233, $P125
.annotate 'line', 2043
    set $P3238, param_3232
    unless_null $P3238, vivify_2655
    $P3238 = root_new ['parrot';'Hash']
  vivify_2655:
    set $P3239, $P3238["variable"]
    unless_null $P3239, vivify_2656
    $P3239 = root_new ['parrot';'Hash']
  vivify_2656:
    set $P124, $P3239["sigil"]
    unless_null $P124, vivify_2657
    new $P124, "Undef"
  vivify_2657:
    set $P3234, $P124
.annotate 'line', 2044
    set $P124, $P3233
    unless_null $P124, vivify_2658
    new $P124, "Undef"
  vivify_2658:
    $P125 = $P124."name"()
    set $P3235, $P125
.annotate 'line', 2045
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_2659
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_2660
    die "Contextual $*W not found"
  vivify_2660:
  vivify_2659:
    $P127 = $P126."cur_lexpad"()
    set $P3236, $P127
.annotate 'line', 2046
    set $P125, $P3235
    unless_null $P125, vivify_2661
    new $P125, "Undef"
  vivify_2661:
    if $P125, if_3241
    set $P124, $P125
    goto if_3241_end
  if_3241:
    set $P126, $P3236
    unless_null $P126, vivify_2662
    new $P126, "Undef"
  vivify_2662:
    set $P127, $P3235
    unless_null $P127, vivify_2663
    new $P127, "Undef"
  vivify_2663:
    $P128 = $P126."symbol"($P127)
    set $P124, $P128
  if_3241_end:
    unless $P124, if_3240_end
.annotate 'line', 2047
    set $P129, param_3232
    unless_null $P129, vivify_2664
    new $P129, "Undef"
  vivify_2664:
    $P131 = $P129."CURSOR"()
    set $P132, $P3235
    unless_null $P132, vivify_2665
    new $P132, "Undef"
  vivify_2665:
    $P131."panic"("Redeclaration of symbol ", $P132)
  if_3240_end:
.annotate 'line', 2049
    find_dynamic_lex $P126, "$*SCOPE"
    unless_null $P126, vivify_2666
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$SCOPE"]
    unless_null $P126, vivify_2667
    die "Contextual $*SCOPE not found"
  vivify_2667:
  vivify_2666:
    set $S100, $P126
    iseq $I100, $S100, "has"
    if $I100, if_3242
.annotate 'line', 2069
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2668
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2669
    die "Contextual $*SCOPE not found"
  vivify_2669:
  vivify_2668:
    set $S101, $P129
    iseq $I101, $S101, "our"
    if $I101, if_3260
.annotate 'line', 2079
    new $P131, "Float"
    assign $P131, 0
    set $I102, $P131
    set $P3262, $P3236
    unless_null $P3262, vivify_2670
    $P3262 = root_new ['parrot';'ResizablePMCArray']
  vivify_2670:
    set $P133, $P3262[$I102]
    unless_null $P133, vivify_2671
    new $P133, "Undef"
  vivify_2671:
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Var"]
    set $P138, $P3235
    unless_null $P138, vivify_2672
    new $P138, "Undef"
  vivify_2672:
.annotate 'line', 2081
    set $P139, $P3234
    unless_null $P139, vivify_2673
    new $P139, "Undef"
  vivify_2673:
    $P140 = "vivitype"($P139)
.annotate 'line', 2079
    set $P141, param_3232
    unless_null $P141, vivify_2674
    new $P141, "Undef"
  vivify_2674:
    $P142 = $P137."new"($P138 :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), 1 :named("lvalue"), $P140 :named("viviself"), $P141 :named("node"))
    $P133."push"($P142)
.annotate 'line', 2084
    set $P131, $P3236
    unless_null $P131, vivify_2675
    new $P131, "Undef"
  vivify_2675:
    set $P133, $P3235
    unless_null $P133, vivify_2676
    new $P133, "Undef"
  vivify_2676:
    $P131."symbol"($P133, "lexical" :named("scope"))
.annotate 'line', 2078
    goto if_3260_end
  if_3260:
.annotate 'line', 2073
    set $P3261, param_3232
    unless_null $P3261, vivify_2677
    $P3261 = root_new ['parrot';'Hash']
  vivify_2677:
    set $P131, $P3261["variable"]
    unless_null $P131, vivify_2678
    new $P131, "Undef"
  vivify_2678:
    set $S102, $P131
    new $P133, 'String'
    set $P133, $S102
    set $P3235, $P133
.annotate 'line', 2074
    set $P131, $P3235
    unless_null $P131, vivify_2679
    new $P131, "Undef"
  vivify_2679:
    new $P133, "ResizablePMCArray"
    push $P133, $P131
    set $P134, param_3232
    unless_null $P134, vivify_2680
    new $P134, "Undef"
  vivify_2680:
    $P135 = "lexical_package_lookup"($P133, $P134)
    set $P3233, $P135
.annotate 'line', 2075
    set $P131, $P3233
    unless_null $P131, vivify_2681
    new $P131, "Undef"
  vivify_2681:
    set $P133, $P3234
    unless_null $P133, vivify_2682
    new $P133, "Undef"
  vivify_2682:
    $P134 = "vivitype"($P133)
    $P131."viviself"($P134)
.annotate 'line', 2076
    set $P131, $P3236
    unless_null $P131, vivify_2683
    new $P131, "Undef"
  vivify_2683:
    set $P133, $P3235
    unless_null $P133, vivify_2684
    new $P133, "Undef"
  vivify_2684:
    $P131."symbol"($P133, "package" :named("scope"))
  if_3260_end:
.annotate 'line', 2069
    goto if_3242_end
  if_3242:
.annotate 'line', 2049
    .const 'Sub' $P3244 = "626_1335114138.94729" 
    capture_lex $P3244
    $P3244()
  if_3242_end:
.annotate 'line', 2088
    set $P124, param_3232
    set $P125, $P3233
    unless_null $P125, vivify_2715
    new $P125, "Undef"
  vivify_2715:
    $P124."!make"($P125)
.annotate 'line', 2090
    set $P3264, param_3232
    unless_null $P3264, vivify_2716
    $P3264 = root_new ['parrot';'Hash']
  vivify_2716:
    set $P125, $P3264["trait"]
    unless_null $P125, vivify_2717
    new $P125, "Undef"
  vivify_2717:
    if $P125, if_3263
    set $P124, $P125
    goto if_3263_end
  if_3263:
.annotate 'line', 2091
    set $P3265, param_3232
    unless_null $P3265, vivify_2718
    $P3265 = root_new ['parrot';'Hash']
  vivify_2718:
    set $P127, $P3265["trait"]
    unless_null $P127, vivify_2719
    new $P127, "Undef"
  vivify_2719:
    defined $I100, $P127
    unless $I100, for_undef_2720
    iter $P126, $P127
    new $P129, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P129, loop3269_handler
    push_eh $P129
  loop3269_test:
    unless $P126, loop3269_done
    shift $P128, $P126
  loop3269_redo:
    .const 'Sub' $P3267 = "627_1335114138.94729" 
    capture_lex $P3267
    $P3267($P128)
  loop3269_next:
    goto loop3269_test
  loop3269_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P131, exception, 'type'
    eq $P131, .CONTROL_LOOP_NEXT, loop3269_next
    eq $P131, .CONTROL_LOOP_REDO, loop3269_redo
  loop3269_done:
    pop_eh 
  for_undef_2720:
.annotate 'line', 2090
    set $P124, $P126
  if_3263_end:
.annotate 'line', 2041
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3243"  :anon :subid("626_1335114138.94729") :outer("479_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2056
    $P3246 = root_new ['parrot';'Hash']
    set $P3245, $P3246
    .lex "%lit_args", $P3245
.annotate 'line', 2057
    $P3248 = root_new ['parrot';'Hash']
    set $P3247, $P3248
    .lex "%obj_args", $P3247
.annotate 'line', 2051
    find_dynamic_lex $P133, "$*PKGDECL"
    unless_null $P133, vivify_2685
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PKGDECL"]
    unless_null $P133, vivify_2686
    die "Contextual $*PKGDECL not found"
  vivify_2686:
  vivify_2685:
    concat $P134, $P133, "-attr"
    find_dynamic_lex $P129, "%*HOW"
    unless_null $P129, vivify_2687
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["%HOW"]
    unless_null $P129, vivify_2688
    die "Contextual %*HOW not found"
  vivify_2688:
  vivify_2687:
    exists $I101, $P129[$P134]
    if $I101, unless_3249_end
.annotate 'line', 2052
    find_lex $P135, "$/"
    unless_null $P135, vivify_2689
    new $P135, "Undef"
  vivify_2689:
    $P136 = $P135."CURSOR"()
    find_dynamic_lex $P139, "$*PKGDECL"
    unless_null $P139, vivify_2690
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$PKGDECL"]
    unless_null $P139, vivify_2691
    die "Contextual $*PKGDECL not found"
  vivify_2691:
  vivify_2690:
    concat $P140, $P139, " packages do not support attributes"
    $P136."panic"($P140)
  unless_3249_end:
.annotate 'line', 2049
    set $P3250, $P3245
    unless_null $P3250, vivify_2692
    $P3250 = root_new ['parrot';'Hash']
  vivify_2692:
    set $P3251, $P3247
    unless_null $P3251, vivify_2693
    $P3251 = root_new ['parrot';'Hash']
  vivify_2693:
.annotate 'line', 2058
    find_lex $P127, "$name"
    unless_null $P127, vivify_2694
    new $P127, "Undef"
  vivify_2694:
    set $P3252, $P3245
    unless_null $P3252, vivify_2695
    $P3252 = root_new ['parrot';'Hash']
    set $P3245, $P3252
  vivify_2695:
    set $P3252["name"], $P127
.annotate 'line', 2059
    find_lex $P3254, "$/"
    unless_null $P3254, vivify_2696
    $P3254 = root_new ['parrot';'Hash']
  vivify_2696:
    set $P127, $P3254["typename"]
    unless_null $P127, vivify_2697
    new $P127, "Undef"
  vivify_2697:
    unless $P127, if_3253_end
.annotate 'line', 2060
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2698
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2699
    die "Contextual $*W not found"
  vivify_2699:
  vivify_2698:
    new $P132, "Float"
    assign $P132, 0
    set $I101, $P132
    find_lex $P3255, "$/"
    unless_null $P3255, vivify_2700
    $P3255 = root_new ['parrot';'Hash']
  vivify_2700:
    set $P3256, $P3255["typename"]
    unless_null $P3256, vivify_2701
    $P3256 = root_new ['parrot';'ResizablePMCArray']
  vivify_2701:
    set $P133, $P3256[$I101]
    unless_null $P133, vivify_2702
    new $P133, "Undef"
  vivify_2702:
    set $S101, $P133
    new $P134, "ResizablePMCArray"
    push $P134, $S101
    $P135 = $P131."find_sym"($P134)
    set $P3257, $P3247
    unless_null $P3257, vivify_2703
    $P3257 = root_new ['parrot';'Hash']
    set $P3247, $P3257
  vivify_2703:
    set $P3257["type"], $P135
  if_3253_end:
.annotate 'line', 2064
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_2704
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_2705
    die "Contextual $*W not found"
  vivify_2705:
  vivify_2704:
    find_dynamic_lex $P133, "$*PACKAGE"
    unless_null $P133, vivify_2706
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$PACKAGE"]
    unless_null $P133, vivify_2707
    die "Contextual $*PACKAGE not found"
  vivify_2707:
  vivify_2706:
    find_dynamic_lex $P136, "$*PKGDECL"
    unless_null $P136, vivify_2708
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PKGDECL"]
    unless_null $P136, vivify_2709
    die "Contextual $*PKGDECL not found"
  vivify_2709:
  vivify_2708:
    concat $P137, $P136, "-attr"
    find_dynamic_lex $P140, "%*HOW"
    unless_null $P140, vivify_2710
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["%HOW"]
    unless_null $P140, vivify_2711
    die "Contextual %*HOW not found"
  vivify_2711:
  vivify_2710:
    set $P141, $P140[$P137]
    unless_null $P141, vivify_2712
    new $P141, "Undef"
  vivify_2712:
    set $P3258, $P3245
    unless_null $P3258, vivify_2713
    $P3258 = root_new ['parrot';'Hash']
  vivify_2713:
    set $P3259, $P3247
    unless_null $P3259, vivify_2714
    $P3259 = root_new ['parrot';'Hash']
  vivify_2714:
    $P129."pkg_add_attribute"($P133, $P141, $P3258, $P3259)
.annotate 'line', 2067
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Stmts"]
    $P132 = $P131."new"()
    store_lex "$past", $P132
.annotate 'line', 2049
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3266"  :anon :subid("627_1335114138.94729") :outer("479_1335114138.94729")
    .param pmc param_3268
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2091
    .lex "$_", param_3268
    find_lex $P129, "$_"
    unless_null $P129, vivify_2721
    new $P129, "Undef"
  vivify_2721:
    $P131 = $P129."ast"()
    find_lex $P132, "$/"
    unless_null $P132, vivify_2722
    new $P132, "Undef"
  vivify_2722:
    $P133 = $P131($P132)
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<sub>" :anon :subid("480_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3271
    .param pmc param_3272
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2096
    .lex "self", param_3271
    .lex "$/", param_3272
    set $P118, param_3272
    set $P3273, param_3272
    unless_null $P3273, vivify_2723
    $P3273 = root_new ['parrot';'Hash']
  vivify_2723:
    set $P120, $P3273["routine_def"]
    unless_null $P120, vivify_2724
    new $P120, "Undef"
  vivify_2724:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<method>" :anon :subid("481_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3275
    .param pmc param_3276
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2097
    .lex "self", param_3275
    .lex "$/", param_3276
    set $P118, param_3276
    set $P3277, param_3276
    unless_null $P3277, vivify_2725
    $P3277 = root_new ['parrot';'Hash']
  vivify_2725:
    set $P120, $P3277["method_def"]
    unless_null $P120, vivify_2726
    new $P120, "Undef"
  vivify_2726:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "routine_def" :anon :subid("482_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3279
    .param pmc param_3280
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2099
    .const 'Sub' $P3352 = "634_1335114138.94729" 
    capture_lex $P3352
    .const 'Sub' $P3290 = "628_1335114138.94729" 
    capture_lex $P3290
    .lex "self", param_3279
    .lex "$/", param_3280
.annotate 'line', 2102
    new $P118, "Undef"
    set $P3281, $P118
    .lex "$past", $P3281
.annotate 'line', 2113
    new $P120, "Undef"
    set $P3282, $P120
    .lex "$block", $P3282
.annotate 'line', 2099
    set $P121, $P3281
    unless_null $P121, vivify_2727
    new $P121, "Undef"
  vivify_2727:
.annotate 'line', 2103
    set $P3284, param_3280
    unless_null $P3284, vivify_2728
    $P3284 = root_new ['parrot';'Hash']
  vivify_2728:
    set $P121, $P3284["onlystar"]
    unless_null $P121, vivify_2729
    new $P121, "Undef"
  vivify_2729:
    if $P121, if_3283
.annotate 'line', 2107
    set $P3285, param_3280
    unless_null $P3285, vivify_2730
    $P3285 = root_new ['parrot';'Hash']
  vivify_2730:
    set $P123, $P3285["blockoid"]
    unless_null $P123, vivify_2731
    new $P123, "Undef"
  vivify_2731:
    $P124 = $P123."ast"()
    set $P3281, $P124
.annotate 'line', 2108
    set $P123, $P3281
    unless_null $P123, vivify_2732
    new $P123, "Undef"
  vivify_2732:
    $P123."blocktype"("declaration")
.annotate 'line', 2109
    find_dynamic_lex $P125, "$*RETURN_USED"
    unless_null $P125, vivify_2733
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$RETURN_USED"]
    unless_null $P125, vivify_2734
    die "Contextual $*RETURN_USED not found"
  vivify_2734:
  vivify_2733:
    unless $P125, if_3286_end
.annotate 'line', 2110
    set $P126, $P3281
    unless_null $P126, vivify_2735
    new $P126, "Undef"
  vivify_2735:
    $P126."control"("return_pir")
  if_3286_end:
.annotate 'line', 2106
    goto if_3283_end
  if_3283:
.annotate 'line', 2104
    $P123 = "only_star_block"()
    set $P3281, $P123
  if_3283_end:
.annotate 'line', 2113
    set $P121, $P3281
    unless_null $P121, vivify_2736
    new $P121, "Undef"
  vivify_2736:
    set $P3282, $P121
.annotate 'line', 2115
    set $P3288, param_3280
    unless_null $P3288, vivify_2737
    $P3288 = root_new ['parrot';'Hash']
  vivify_2737:
    set $P121, $P3288["deflongname"]
    unless_null $P121, vivify_2738
    new $P121, "Undef"
  vivify_2738:
    if $P121, if_3287
.annotate 'line', 2218
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_2739
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_2740
    die "Contextual $*W not found"
  vivify_2740:
  vivify_2739:
    $P128 = $P127."is_precompilation_mode"()
    unless $P128, if_3346_end
.annotate 'line', 2219
    find_dynamic_lex $P132, "$*W"
    unless_null $P132, vivify_2741
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$W"]
    unless_null $P132, vivify_2742
    die "Contextual $*W not found"
  vivify_2742:
  vivify_2741:
    set $P133, $P3281
    unless_null $P133, vivify_2743
    new $P133, "Undef"
  vivify_2743:
    $P132."create_code"($P133, "<anon>", 0)
  if_3346_end:
.annotate 'line', 2217
    goto if_3287_end
  if_3287:
.annotate 'line', 2115
    .const 'Sub' $P3290 = "628_1335114138.94729" 
    capture_lex $P3290
    $P3290()
  if_3287_end:
.annotate 'line', 2224
    set $P121, $P3282
    unless_null $P121, vivify_2848
    new $P121, "Undef"
  vivify_2848:
    set $P3347, $P3281
    unless_null $P3347, vivify_2849
    $P3347 = root_new ['parrot';'Hash']
    set $P3281, $P3347
  vivify_2849:
    set $P3347["block_past"], $P121
.annotate 'line', 2225
    set $P3349, param_3280
    unless_null $P3349, vivify_2850
    $P3349 = root_new ['parrot';'Hash']
  vivify_2850:
    set $P121, $P3349["trait"]
    unless_null $P121, vivify_2851
    new $P121, "Undef"
  vivify_2851:
    unless $P121, if_3348_end
.annotate 'line', 2226
    set $P3350, param_3280
    unless_null $P3350, vivify_2852
    $P3350 = root_new ['parrot';'Hash']
  vivify_2852:
    set $P124, $P3350["trait"]
    unless_null $P124, vivify_2853
    new $P124, "Undef"
  vivify_2853:
    defined $I100, $P124
    unless $I100, for_undef_2854
    iter $P123, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop3354_handler
    push_eh $P126
  loop3354_test:
    unless $P123, loop3354_done
    shift $P125, $P123
  loop3354_redo:
    .const 'Sub' $P3352 = "634_1335114138.94729" 
    capture_lex $P3352
    $P3352($P125)
  loop3354_next:
    goto loop3354_test
  loop3354_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop3354_next
    eq $P127, .CONTROL_LOOP_REDO, loop3354_redo
  loop3354_done:
    pop_eh 
  for_undef_2854:
  if_3348_end:
.annotate 'line', 2229
    set $P121, param_3280
    set $P123, $P3281
    unless_null $P123, vivify_2857
    new $P123, "Undef"
  vivify_2857:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2099
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3289"  :anon :subid("628_1335114138.94729") :outer("482_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2115
    .const 'Sub' $P3339 = "633_1335114138.94729" 
    capture_lex $P3339
    .const 'Sub' $P3332 = "632_1335114138.94729" 
    capture_lex $P3332
    .const 'Sub' $P3301 = "629_1335114138.94729" 
    capture_lex $P3301
.annotate 'line', 2116
    new $P123, "Undef"
    set $P3291, $P123
    .lex "$name", $P3291
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    find_lex $P3292, "$/"
    unless_null $P3292, vivify_2744
    $P3292 = root_new ['parrot';'Hash']
  vivify_2744:
    set $P3293, $P3292["sigil"]
    unless_null $P3293, vivify_2745
    $P3293 = root_new ['parrot';'ResizablePMCArray']
  vivify_2745:
    set $P125, $P3293[$I100]
    unless_null $P125, vivify_2746
    new $P125, "Undef"
  vivify_2746:
    set $S100, $P125
    new $P126, 'String'
    set $P126, $S100
    new $P127, "Float"
    assign $P127, 0
    set $I101, $P127
    find_lex $P3294, "$/"
    unless_null $P3294, vivify_2747
    $P3294 = root_new ['parrot';'Hash']
  vivify_2747:
    set $P3295, $P3294["deflongname"]
    unless_null $P3295, vivify_2748
    $P3295 = root_new ['parrot';'ResizablePMCArray']
  vivify_2748:
    set $P128, $P3295[$I101]
    unless_null $P128, vivify_2749
    new $P128, "Undef"
  vivify_2749:
    $S101 = $P128."ast"()
    concat $P129, $P126, $S101
    set $P3291, $P129
.annotate 'line', 2117
    find_lex $P124, "$past"
    unless_null $P124, vivify_2750
    new $P124, "Undef"
  vivify_2750:
    set $P125, $P3291
    unless_null $P125, vivify_2751
    new $P125, "Undef"
  vivify_2751:
    $P124."name"($P125)
.annotate 'line', 2118
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_2752
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_2753
    die "Contextual $*SCOPE not found"
  vivify_2753:
  vivify_2752:
    set $S100, $P128
    iseq $I100, $S100, ""
    unless $I100, unless_3298
    new $P125, 'Integer'
    set $P125, $I100
    goto unless_3298_end
  unless_3298:
    find_dynamic_lex $P132, "$*SCOPE"
    unless_null $P132, vivify_2754
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$SCOPE"]
    unless_null $P132, vivify_2755
    die "Contextual $*SCOPE not found"
  vivify_2755:
  vivify_2754:
    set $S101, $P132
    iseq $I101, $S101, "my"
    new $P125, 'Integer'
    set $P125, $I101
  unless_3298_end:
    unless $P125, unless_3297
    set $P124, $P125
    goto unless_3297_end
  unless_3297:
    find_dynamic_lex $P135, "$*SCOPE"
    unless_null $P135, vivify_2756
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$SCOPE"]
    unless_null $P135, vivify_2757
    die "Contextual $*SCOPE not found"
  vivify_2757:
  vivify_2756:
    set $S102, $P135
    iseq $I102, $S102, "our"
    new $P124, 'Integer'
    set $P124, $I102
  unless_3297_end:
    if $P124, if_3296
.annotate 'line', 2209
    find_lex $P136, "$/"
    unless_null $P136, vivify_2758
    new $P136, "Undef"
  vivify_2758:
    $P137 = $P136."CURSOR"()
    find_dynamic_lex $P140, "$*SCOPE"
    unless_null $P140, vivify_2759
    get_hll_global $P138, "GLOBAL"
    get_who $P139, $P138
    set $P140, $P139["$SCOPE"]
    unless_null $P140, vivify_2760
    die "Contextual $*SCOPE not found"
  vivify_2760:
  vivify_2759:
    concat $P141, $P140, " scoped routines are not supported yet"
    $P137."panic"($P141)
.annotate 'line', 2208
    goto if_3296_end
  if_3296:
.annotate 'line', 2119
    find_dynamic_lex $P138, "$*MULTINESS"
    unless_null $P138, vivify_2761
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$MULTINESS"]
    unless_null $P138, vivify_2762
    die "Contextual $*MULTINESS not found"
  vivify_2762:
  vivify_2761:
    set $S103, $P138
    iseq $I103, $S103, "multi"
    if $I103, if_3299
.annotate 'line', 2171
    find_dynamic_lex $P143, "$*MULTINESS"
    unless_null $P143, vivify_2763
    get_hll_global $P140, "GLOBAL"
    get_who $P142, $P140
    set $P143, $P142["$MULTINESS"]
    unless_null $P143, vivify_2764
    die "Contextual $*MULTINESS not found"
  vivify_2764:
  vivify_2763:
    set $S104, $P143
    iseq $I104, $S104, "proto"
    if $I104, if_3330
.annotate 'line', 2190
    .const 'Sub' $P3339 = "633_1335114138.94729" 
    capture_lex $P3339
    $P3339()
    goto if_3330_end
  if_3330:
.annotate 'line', 2171
    .const 'Sub' $P3332 = "632_1335114138.94729" 
    capture_lex $P3332
    $P3332()
  if_3330_end:
    goto if_3299_end
  if_3299:
.annotate 'line', 2119
    .const 'Sub' $P3301 = "629_1335114138.94729" 
    capture_lex $P3301
    $P3301()
  if_3299_end:
.annotate 'line', 2206
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Var"]
    set $P140, $P3291
    unless_null $P140, vivify_2843
    new $P140, "Undef"
  vivify_2843:
    $P141 = $P139."new"($P140 :named("name"))
    store_lex "$past", $P141
  if_3296_end:
.annotate 'line', 2213
    set $P126, $P3291
    unless_null $P126, vivify_2844
    new $P126, "Undef"
  vivify_2844:
    set $S100, $P126
    iseq $I100, $S100, "MAIN"
    if $I100, if_3345
    new $P125, 'Integer'
    set $P125, $I100
    goto if_3345_end
  if_3345:
    find_dynamic_lex $P129, "$*MULTINESS"
    unless_null $P129, vivify_2845
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$MULTINESS"]
    unless_null $P129, vivify_2846
    die "Contextual $*MULTINESS not found"
  vivify_2846:
  vivify_2845:
    set $S101, $P129
    isne $I101, $S101, "multi"
    new $P125, 'Integer'
    set $P125, $I101
  if_3345_end:
    if $P125, if_3344
    set $P124, $P125
    goto if_3344_end
  if_3344:
.annotate 'line', 2214
    find_lex $P131, "$block"
    unless_null $P131, vivify_2847
    new $P131, "Undef"
  vivify_2847:
    store_dynamic_lex "$*MAIN_SUB", $P131
.annotate 'line', 2213
    set $P124, $P131
  if_3344_end:
.annotate 'line', 2115
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3338"  :anon :subid("633_1335114138.94729") :outer("628_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2191
    new $P146, "Undef"
    set $P3340, $P146
    .lex "$BLOCK", $P3340
    find_dynamic_lex $P151, "$*W"
    unless_null $P151, vivify_2765
    get_hll_global $P149, "GLOBAL"
    get_who $P150, $P149
    set $P151, $P150["$W"]
    unless_null $P151, vivify_2766
    die "Contextual $*W not found"
  vivify_2766:
  vivify_2765:
    $P152 = $P151."cur_lexpad"()
    set $P3340, $P152
.annotate 'line', 2192
    new $P149, "Float"
    assign $P149, 0
    set $I105, $P149
    set $P3341, $P3340
    unless_null $P3341, vivify_2767
    $P3341 = root_new ['parrot';'ResizablePMCArray']
  vivify_2767:
    set $P150, $P3341[$I105]
    unless_null $P150, vivify_2768
    new $P150, "Undef"
  vivify_2768:
    get_hll_global $P151, "GLOBAL"
    nqp_get_package_through_who $P152, $P151, "PAST"
    get_who $P153, $P152
    set $P154, $P153["Var"]
    find_lex $P155, "$name"
    unless_null $P155, vivify_2769
    new $P155, "Undef"
  vivify_2769:
    find_lex $P156, "$past"
    unless_null $P156, vivify_2770
    new $P156, "Undef"
  vivify_2770:
    $P157 = $P154."new"($P155 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P156 :named("viviself"), "lexical" :named("scope"))
    $P150."push"($P157)
.annotate 'line', 2194
    set $P149, $P3340
    unless_null $P149, vivify_2771
    new $P149, "Undef"
  vivify_2771:
    find_lex $P150, "$name"
    unless_null $P150, vivify_2772
    new $P150, "Undef"
  vivify_2772:
    $P149."symbol"($P150, "lexical" :named("scope"))
.annotate 'line', 2195
    find_dynamic_lex $P152, "$*SCOPE"
    unless_null $P152, vivify_2773
    get_hll_global $P150, "GLOBAL"
    get_who $P151, $P150
    set $P152, $P151["$SCOPE"]
    unless_null $P152, vivify_2774
    die "Contextual $*SCOPE not found"
  vivify_2774:
  vivify_2773:
    set $S105, $P152
    iseq $I105, $S105, "our"
    if $I105, if_3342
    new $P149, 'Integer'
    set $P149, $I105
    goto if_3342_end
  if_3342:
.annotate 'line', 2198
    find_dynamic_lex $P155, "$*W"
    unless_null $P155, vivify_2775
    get_hll_global $P153, "GLOBAL"
    get_who $P154, $P153
    set $P155, $P154["$W"]
    unless_null $P155, vivify_2776
    die "Contextual $*W not found"
  vivify_2776:
  vivify_2775:
    find_dynamic_lex $P158, "$*PACKAGE"
    unless_null $P158, vivify_2777
    get_hll_global $P156, "GLOBAL"
    get_who $P157, $P156
    set $P158, $P157["$PACKAGE"]
    unless_null $P158, vivify_2778
    die "Contextual $*PACKAGE not found"
  vivify_2778:
  vivify_2777:
    find_lex $P159, "$name"
    unless_null $P159, vivify_2779
    new $P159, "Undef"
  vivify_2779:
    find_lex $P160, "$past"
    unless_null $P160, vivify_2780
    new $P160, "Undef"
  vivify_2780:
    $P155."install_package_routine"($P158, $P159, $P160)
.annotate 'line', 2199
    new $P153, "Float"
    assign $P153, 0
    set $I106, $P153
    set $P3343, $P3340
    unless_null $P3343, vivify_2781
    $P3343 = root_new ['parrot';'ResizablePMCArray']
  vivify_2781:
    set $P154, $P3343[$I106]
    unless_null $P154, vivify_2782
    new $P154, "Undef"
  vivify_2782:
    get_hll_global $P155, "GLOBAL"
    nqp_get_package_through_who $P156, $P155, "PAST"
    get_who $P157, $P156
    set $P158, $P157["Op"]
.annotate 'line', 2201
    find_lex $P159, "$name"
    unless_null $P159, vivify_2783
    new $P159, "Undef"
  vivify_2783:
    new $P160, "ResizablePMCArray"
    push $P160, $P159
    find_lex $P161, "$/"
    unless_null $P161, vivify_2784
    new $P161, "Undef"
  vivify_2784:
    $P162 = "lexical_package_lookup"($P160, $P161)
.annotate 'line', 2202
    get_hll_global $P163, "GLOBAL"
    nqp_get_package_through_who $P164, $P163, "PAST"
    get_who $P165, $P164
    set $P166, $P165["Var"]
    find_lex $P167, "$name"
    unless_null $P167, vivify_2785
    new $P167, "Undef"
  vivify_2785:
    $P168 = $P166."new"($P167 :named("name"), "lexical" :named("scope"))
    $P169 = $P158."new"($P162, $P168, "bind_6model" :named("pasttype"))
.annotate 'line', 2199
    $P170 = $P154."push"($P169)
.annotate 'line', 2195
    set $P149, $P170
  if_3342_end:
.annotate 'line', 2190
    .return ($P149)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3331"  :anon :subid("632_1335114138.94729") :outer("628_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2176
    new $P144, "Undef"
    set $P3333, $P144
    .lex "$cholder", $P3333
.annotate 'line', 2177
    new $P145, "Undef"
    set $P3334, $P145
    .lex "$BLOCK", $P3334
.annotate 'line', 2175
    find_dynamic_lex $P149, "$*SCOPE"
    unless_null $P149, vivify_2786
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$SCOPE"]
    unless_null $P149, vivify_2787
    die "Contextual $*SCOPE not found"
  vivify_2787:
  vivify_2786:
    set $S105, $P149
    iseq $I105, $S105, "our"
    unless $I105, if_3335_end
    die "our-scoped protos not yet implemented"
  if_3335_end:
.annotate 'line', 2176
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P149, $P147
    set $P150, $P149["Op"]
    $P151 = $P150."new"("list" :named("pasttype"))
    set $P3333, $P151
.annotate 'line', 2177
    find_dynamic_lex $P149, "$*W"
    unless_null $P149, vivify_2788
    get_hll_global $P146, "GLOBAL"
    get_who $P147, $P146
    set $P149, $P147["$W"]
    unless_null $P149, vivify_2789
    die "Contextual $*W not found"
  vivify_2789:
  vivify_2788:
    $P150 = $P149."cur_lexpad"()
    set $P3334, $P150
.annotate 'line', 2178
    new $P146, "Float"
    assign $P146, 0
    set $I105, $P146
    set $P3336, $P3334
    unless_null $P3336, vivify_2790
    $P3336 = root_new ['parrot';'ResizablePMCArray']
  vivify_2790:
    set $P147, $P3336[$I105]
    unless_null $P147, vivify_2791
    new $P147, "Undef"
  vivify_2791:
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    find_lex $P153, "$name"
    unless_null $P153, vivify_2792
    new $P153, "Undef"
  vivify_2792:
    find_lex $P154, "$past"
    unless_null $P154, vivify_2793
    new $P154, "Undef"
  vivify_2793:
    $P155 = $P152."new"($P153 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P154 :named("viviself"), "lexical" :named("scope"))
    $P147."push"($P155)
.annotate 'line', 2180
    new $P146, "Float"
    assign $P146, 0
    set $I105, $P146
    set $P3337, $P3334
    unless_null $P3337, vivify_2794
    $P3337 = root_new ['parrot';'ResizablePMCArray']
  vivify_2794:
    set $P147, $P3337[$I105]
    unless_null $P147, vivify_2795
    new $P147, "Undef"
  vivify_2795:
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Op"]
.annotate 'line', 2182
    get_hll_global $P153, "GLOBAL"
    nqp_get_package_through_who $P154, $P153, "PAST"
    get_who $P155, $P154
    set $P156, $P155["Var"]
    find_lex $P157, "$name"
    unless_null $P157, vivify_2796
    new $P157, "Undef"
  vivify_2796:
    $P158 = $P156."new"($P157 :named("name"))
    set $P159, $P3333
    unless_null $P159, vivify_2797
    new $P159, "Undef"
  vivify_2797:
    $P160 = $P152."new"($P158, $P159, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 2180
    $P147."push"($P160)
.annotate 'line', 2185
    set $P146, $P3334
    unless_null $P146, vivify_2798
    new $P146, "Undef"
  vivify_2798:
    find_lex $P147, "$name"
    unless_null $P147, vivify_2799
    new $P147, "Undef"
  vivify_2799:
    set $P149, $P3333
    unless_null $P149, vivify_2800
    new $P149, "Undef"
  vivify_2800:
    $P146."symbol"($P147, "lexical" :named("scope"), 1 :named("proto"), $P149 :named("cholder"))
.annotate 'line', 2188
    find_lex $P146, "$past"
    unless_null $P146, vivify_2801
    new $P146, "Undef"
  vivify_2801:
    $P147 = $P146."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 2171
    .return ($P147)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3300"  :anon :subid("629_1335114138.94729") :outer("628_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2119
    .const 'Sub' $P3310 = "630_1335114138.94729" 
    capture_lex $P3310
.annotate 'line', 2122
    new $P139, "Undef"
    set $P3302, $P139
    .lex "$cholder", $P3302
.annotate 'line', 2123
    $P3304 = root_new ['parrot';'Hash']
    set $P3303, $P3304
    .lex "%sym", $P3303
.annotate 'line', 2121
    find_dynamic_lex $P142, "$*SCOPE"
    unless_null $P142, vivify_2802
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$SCOPE"]
    unless_null $P142, vivify_2803
    die "Contextual $*SCOPE not found"
  vivify_2803:
  vivify_2802:
    set $S104, $P142
    iseq $I104, $S104, "our"
    unless $I104, if_3305_end
    die "our-scoped multis not yet implemented"
  if_3305_end:
.annotate 'line', 2119
    set $P140, $P3302
    unless_null $P140, vivify_2804
    new $P140, "Undef"
  vivify_2804:
.annotate 'line', 2123
    find_dynamic_lex $P142, "$*W"
    unless_null $P142, vivify_2805
    get_hll_global $P140, "GLOBAL"
    get_who $P141, $P140
    set $P142, $P141["$W"]
    unless_null $P142, vivify_2806
    die "Contextual $*W not found"
  vivify_2806:
  vivify_2805:
    $P143 = $P142."cur_lexpad"()
    find_lex $P144, "$name"
    unless_null $P144, vivify_2807
    new $P144, "Undef"
  vivify_2807:
    $P145 = $P143."symbol"($P144)
    set $P3303, $P145
.annotate 'line', 2124
    set $P3307, $P3303
    unless_null $P3307, vivify_2808
    $P3307 = root_new ['parrot';'Hash']
  vivify_2808:
    set $P140, $P3307["cholder"]
    unless_null $P140, vivify_2809
    new $P140, "Undef"
  vivify_2809:
    if $P140, if_3306
.annotate 'line', 2129
    .const 'Sub' $P3310 = "630_1335114138.94729" 
    capture_lex $P3310
    $P3310()
    goto if_3306_end
  if_3306:
.annotate 'line', 2125
    set $P3308, $P3303
    unless_null $P3308, vivify_2838
    $P3308 = root_new ['parrot';'Hash']
  vivify_2838:
    set $P141, $P3308["cholder"]
    unless_null $P141, vivify_2839
    new $P141, "Undef"
  vivify_2839:
    set $P3302, $P141
  if_3306_end:
.annotate 'line', 2166
    set $P140, $P3302
    unless_null $P140, vivify_2840
    new $P140, "Undef"
  vivify_2840:
    find_lex $P141, "$past"
    unless_null $P141, vivify_2841
    new $P141, "Undef"
  vivify_2841:
    $P140."push"($P141)
.annotate 'line', 2169
    find_lex $P140, "$past"
    unless_null $P140, vivify_2842
    new $P140, "Undef"
  vivify_2842:
    $P141 = "attach_multi_signature_to_parrot_sub"($P140)
.annotate 'line', 2119
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3309"  :anon :subid("630_1335114138.94729") :outer("629_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2129
    .const 'Sub' $P3317 = "631_1335114138.94729" 
    capture_lex $P3317
.annotate 'line', 2136
    new $P141, "Undef"
    set $P3311, $P141
    .lex "$found_proto", $P3311
.annotate 'line', 2153
    new $P142, "Undef"
    set $P3312, $P142
    .lex "$BLOCK", $P3312
.annotate 'line', 2155
    new $P143, "Undef"
    set $P3313, $P143
    .lex "$dispatch_setup", $P3313
.annotate 'line', 2131
    find_lex $P3315, "%sym"
    unless_null $P3315, vivify_2810
    $P3315 = root_new ['parrot';'Hash']
  vivify_2810:
    set $P144, $P3315["proto"]
    unless_null $P144, vivify_2811
    new $P144, "Undef"
  vivify_2811:
    unless $P144, if_3314_end
.annotate 'line', 2134
    find_lex $P145, "$/"
    unless_null $P145, vivify_2812
    new $P145, "Undef"
  vivify_2812:
    $P146 = $P145."CURSOR"()
    $P146."panic"("Internal Error: Current scope has a proto, but no candidate list holder was set up. (This should never happen.)")
  if_3314_end:
.annotate 'line', 2129
    set $P144, $P3311
    unless_null $P144, vivify_2813
    new $P144, "Undef"
  vivify_2813:
.annotate 'line', 2137
    find_dynamic_lex $P147, "$*W"
    unless_null $P147, vivify_2814
    get_hll_global $P145, "GLOBAL"
    get_who $P146, $P145
    set $P147, $P146["$W"]
    unless_null $P147, vivify_2815
    die "Contextual $*W not found"
  vivify_2815:
  vivify_2814:
    $P149 = $P147."get_legacy_block_list"()
    defined $I104, $P149
    unless $I104, for_undef_2816
    iter $P144, $P149
    new $P152, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P152, loop3327_handler
    push_eh $P152
  loop3327_test:
    unless $P144, loop3327_done
    shift $P150, $P144
  loop3327_redo:
    .const 'Sub' $P3317 = "631_1335114138.94729" 
    capture_lex $P3317
    $P3317($P150)
  loop3327_next:
    goto loop3327_test
  loop3327_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P153, exception, 'type'
    eq $P153, .CONTROL_LOOP_NEXT, loop3327_next
    eq $P153, .CONTROL_LOOP_REDO, loop3327_redo
  loop3327_done:
    pop_eh 
  for_undef_2816:
.annotate 'line', 2148
    set $P144, $P3311
    unless_null $P144, vivify_2825
    new $P144, "Undef"
  vivify_2825:
    if $P144, unless_3328_end
.annotate 'line', 2149
    find_lex $P145, "$/"
    unless_null $P145, vivify_2826
    new $P145, "Undef"
  vivify_2826:
    $P146 = $P145."CURSOR"()
    $P146."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless_3328_end:
.annotate 'line', 2153
    find_dynamic_lex $P146, "$*W"
    unless_null $P146, vivify_2827
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$W"]
    unless_null $P146, vivify_2828
    die "Contextual $*W not found"
  vivify_2828:
  vivify_2827:
    $P147 = $P146."cur_lexpad"()
    set $P3312, $P147
.annotate 'line', 2154
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Op"]
    $P149 = $P147."new"("list" :named("pasttype"))
    store_lex "$cholder", $P149
.annotate 'line', 2155
    get_hll_global $P144, "GLOBAL"
    nqp_get_package_through_who $P145, $P144, "PAST"
    get_who $P146, $P145
    set $P147, $P146["Op"]
.annotate 'line', 2157
    get_hll_global $P149, "GLOBAL"
    nqp_get_package_through_who $P150, $P149, "PAST"
    get_who $P151, $P150
    set $P152, $P151["Var"]
    find_lex $P153, "$name"
    unless_null $P153, vivify_2829
    new $P153, "Undef"
  vivify_2829:
    $P154 = $P152."new"($P153 :named("name"), "outer" :named("scope"))
    find_lex $P155, "$cholder"
    unless_null $P155, vivify_2830
    new $P155, "Undef"
  vivify_2830:
    $P156 = $P147."new"($P154, $P155, "create_dispatch_and_add_candidates PPP" :named("pirop"))
.annotate 'line', 2155
    set $P3313, $P156
.annotate 'line', 2160
    new $P144, "Float"
    assign $P144, 0
    set $I104, $P144
    set $P3329, $P3312
    unless_null $P3329, vivify_2831
    $P3329 = root_new ['parrot';'ResizablePMCArray']
  vivify_2831:
    set $P145, $P3329[$I104]
    unless_null $P145, vivify_2832
    new $P145, "Undef"
  vivify_2832:
    get_hll_global $P146, "GLOBAL"
    nqp_get_package_through_who $P147, $P146, "PAST"
    get_who $P149, $P147
    set $P150, $P149["Var"]
    find_lex $P151, "$name"
    unless_null $P151, vivify_2833
    new $P151, "Undef"
  vivify_2833:
    set $P152, $P3313
    unless_null $P152, vivify_2834
    new $P152, "Undef"
  vivify_2834:
    $P153 = $P150."new"($P151 :named("name"), 1 :named("isdecl"), 1 :named("directaccess"), $P152 :named("viviself"), "lexical" :named("scope"))
    $P145."push"($P153)
.annotate 'line', 2162
    set $P144, $P3312
    unless_null $P144, vivify_2835
    new $P144, "Undef"
  vivify_2835:
    find_lex $P145, "$name"
    unless_null $P145, vivify_2836
    new $P145, "Undef"
  vivify_2836:
    find_lex $P146, "$cholder"
    unless_null $P146, vivify_2837
    new $P146, "Undef"
  vivify_2837:
    $P147 = $P144."symbol"($P145, "lexical" :named("scope"), $P146 :named("cholder"))
.annotate 'line', 2129
    .return ($P147)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3316"  :anon :subid("631_1335114138.94729") :outer("630_1335114138.94729")
    .param pmc param_3320
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2138
    $P3319 = root_new ['parrot';'Hash']
    set $P3318, $P3319
    .lex "%sym", $P3318
    .lex "$_", param_3320
    find_lex $P151, "$_"
    unless_null $P151, vivify_2817
    new $P151, "Undef"
  vivify_2817:
    find_lex $P152, "$name"
    unless_null $P152, vivify_2818
    new $P152, "Undef"
  vivify_2818:
    $P153 = $P151."symbol"($P152)
    set $P3318, $P153
.annotate 'line', 2139
    set $P3323, $P3318
    unless_null $P3323, vivify_2819
    $P3323 = root_new ['parrot';'Hash']
  vivify_2819:
    set $P153, $P3323["proto"]
    unless_null $P153, vivify_2820
    new $P153, "Undef"
  vivify_2820:
    unless $P153, unless_3322
    set $P152, $P153
    goto unless_3322_end
  unless_3322:
    set $P3324, $P3318
    unless_null $P3324, vivify_2821
    $P3324 = root_new ['parrot';'Hash']
  vivify_2821:
    set $P154, $P3324["cholder"]
    unless_null $P154, vivify_2822
    new $P154, "Undef"
  vivify_2822:
    set $P152, $P154
  unless_3322_end:
    if $P152, if_3321
.annotate 'line', 2142
    set $P3326, $P3318
    unless_null $P3326, vivify_2823
    $P3326 = root_new ['parrot';'Hash']
  vivify_2823:
    if $P3326, if_3325
    set $P156, $P3326
    goto if_3325_end
  if_3325:
.annotate 'line', 2143
    find_lex $P157, "$/"
    unless_null $P157, vivify_2824
    new $P157, "Undef"
  vivify_2824:
    $P158 = $P157."CURSOR"()
    $P159 = $P158."panic"("Cannot declare a multi when an only is already in scope.")
.annotate 'line', 2142
    set $P156, $P159
  if_3325_end:
    set $P151, $P156
.annotate 'line', 2139
    goto if_3321_end
  if_3321:
.annotate 'line', 2140
    new $P155, "Float"
    assign $P155, 1
    store_lex "$found_proto", $P155
.annotate 'line', 2139
    set $P151, $P155
  if_3321_end:
.annotate 'line', 2137
    .return ($P151)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3351"  :anon :subid("634_1335114138.94729") :outer("482_1335114138.94729")
    .param pmc param_3353
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2226
    .lex "$_", param_3353
    find_lex $P126, "$_"
    unless_null $P126, vivify_2855
    new $P126, "Undef"
  vivify_2855:
    $P127 = $P126."ast"()
    find_lex $P128, "$/"
    unless_null $P128, vivify_2856
    new $P128, "Undef"
  vivify_2856:
    $P129 = $P127($P128)
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "method_def" :anon :subid("483_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3356
    .param pmc param_3357
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2233
    .const 'Sub' $P3386 = "636_1335114138.94729" 
    capture_lex $P3386
    .const 'Sub' $P3369 = "635_1335114138.94729" 
    capture_lex $P3369
    .lex "self", param_3356
    .lex "$/", param_3357
.annotate 'line', 2236
    new $P118, "Undef"
    set $P3358, $P118
    .lex "$past", $P3358
.annotate 'line', 2233
    set $P120, $P3358
    unless_null $P120, vivify_2858
    new $P120, "Undef"
  vivify_2858:
.annotate 'line', 2237
    set $P3360, param_3357
    unless_null $P3360, vivify_2859
    $P3360 = root_new ['parrot';'Hash']
  vivify_2859:
    set $P120, $P3360["onlystar"]
    unless_null $P120, vivify_2860
    new $P120, "Undef"
  vivify_2860:
    if $P120, if_3359
.annotate 'line', 2241
    set $P3361, param_3357
    unless_null $P3361, vivify_2861
    $P3361 = root_new ['parrot';'Hash']
  vivify_2861:
    set $P121, $P3361["blockoid"]
    unless_null $P121, vivify_2862
    new $P121, "Undef"
  vivify_2862:
    $P123 = $P121."ast"()
    set $P3358, $P123
.annotate 'line', 2242
    set $P121, $P3358
    unless_null $P121, vivify_2863
    new $P121, "Undef"
  vivify_2863:
    $P121."blocktype"("declaration")
.annotate 'line', 2243
    find_dynamic_lex $P124, "$*RETURN_USED"
    unless_null $P124, vivify_2864
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$RETURN_USED"]
    unless_null $P124, vivify_2865
    die "Contextual $*RETURN_USED not found"
  vivify_2865:
  vivify_2864:
    unless $P124, if_3362_end
.annotate 'line', 2244
    set $P125, $P3358
    unless_null $P125, vivify_2866
    new $P125, "Undef"
  vivify_2866:
    $P125."control"("return_pir")
  if_3362_end:
.annotate 'line', 2240
    goto if_3359_end
  if_3359:
.annotate 'line', 2238
    $P121 = "only_star_block"()
    set $P3358, $P121
  if_3359_end:
.annotate 'line', 2249
    set $P3364, $P3358
    unless_null $P3364, vivify_2867
    $P3364 = root_new ['parrot';'Hash']
  vivify_2867:
    set $P120, $P3364["signature_has_invocant"]
    unless_null $P120, vivify_2868
    new $P120, "Undef"
  vivify_2868:
    if $P120, unless_3363_end
.annotate 'line', 2250
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3365, $P3358
    unless_null $P3365, vivify_2869
    $P3365 = root_new ['parrot';'ResizablePMCArray']
  vivify_2869:
    set $P123, $P3365[$I100]
    unless_null $P123, vivify_2870
    new $P123, "Undef"
  vivify_2870:
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Var"]
.annotate 'line', 2252
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2871
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2872
    die "Contextual $*W not found"
  vivify_2872:
  vivify_2871:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_2873
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_2874
    die "Contextual $*PACKAGE not found"
  vivify_2874:
  vivify_2873:
    $P135 = $P131."get_ref"($P134)
.annotate 'line', 2250
    $P136 = $P127."new"("self" :named("name"), "parameter" :named("scope"), 1 :named("directaccess"), $P135 :named("multitype"))
    $P123."unshift"($P136)
  unless_3363_end:
.annotate 'line', 2255
    set $P120, $P3358
    unless_null $P120, vivify_2875
    new $P120, "Undef"
  vivify_2875:
    $P120."symbol"("self", "lexical" :named("scope"))
.annotate 'line', 2258
    set $P3367, param_3357
    unless_null $P3367, vivify_2876
    $P3367 = root_new ['parrot';'Hash']
  vivify_2876:
    set $P120, $P3367["deflongname"]
    unless_null $P120, vivify_2877
    new $P120, "Undef"
  vivify_2877:
    unless $P120, if_3366_end
    .const 'Sub' $P3369 = "635_1335114138.94729" 
    capture_lex $P3369
    $P3369()
  if_3366_end:
.annotate 'line', 2283
    set $P120, param_3357
    set $P121, $P3358
    unless_null $P121, vivify_2917
    new $P121, "Undef"
  vivify_2917:
    $P120."!make"($P121)
.annotate 'line', 2284
    set $P120, $P3358
    unless_null $P120, vivify_2918
    new $P120, "Undef"
  vivify_2918:
    set $P3381, $P3358
    unless_null $P3381, vivify_2919
    $P3381 = root_new ['parrot';'Hash']
    set $P3358, $P3381
  vivify_2919:
    set $P3381["block_past"], $P120
.annotate 'line', 2285
    set $P3383, param_3357
    unless_null $P3383, vivify_2920
    $P3383 = root_new ['parrot';'Hash']
  vivify_2920:
    set $P121, $P3383["trait"]
    unless_null $P121, vivify_2921
    new $P121, "Undef"
  vivify_2921:
    if $P121, if_3382
    set $P120, $P121
    goto if_3382_end
  if_3382:
.annotate 'line', 2286
    set $P3384, param_3357
    unless_null $P3384, vivify_2922
    $P3384 = root_new ['parrot';'Hash']
  vivify_2922:
    set $P124, $P3384["trait"]
    unless_null $P124, vivify_2923
    new $P124, "Undef"
  vivify_2923:
    defined $I100, $P124
    unless $I100, for_undef_2924
    iter $P123, $P124
    new $P126, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P126, loop3388_handler
    push_eh $P126
  loop3388_test:
    unless $P123, loop3388_done
    shift $P125, $P123
  loop3388_redo:
    .const 'Sub' $P3386 = "636_1335114138.94729" 
    capture_lex $P3386
    $P3386($P125)
  loop3388_next:
    goto loop3388_test
  loop3388_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P127, exception, 'type'
    eq $P127, .CONTROL_LOOP_NEXT, loop3388_next
    eq $P127, .CONTROL_LOOP_REDO, loop3388_redo
  loop3388_done:
    pop_eh 
  for_undef_2924:
.annotate 'line', 2285
    set $P120, $P123
  if_3382_end:
.annotate 'line', 2233
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3368"  :anon :subid("635_1335114138.94729") :outer("483_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2260
    new $P121, "Undef"
    set $P3370, $P121
    .lex "$name", $P3370
.annotate 'line', 2264
    new $P123, "Undef"
    set $P3371, $P123
    .lex "$meta_meth", $P3371
.annotate 'line', 2265
    new $P124, "Undef"
    set $P3372, $P124
    .lex "$is_dispatcher", $P3372
.annotate 'line', 2266
    new $P125, "Undef"
    set $P3373, $P125
    .lex "$code", $P3373
.annotate 'line', 2260
    find_lex $P3374, "$/"
    unless_null $P3374, vivify_2878
    $P3374 = root_new ['parrot';'Hash']
  vivify_2878:
    set $P126, $P3374["private"]
    unless_null $P126, vivify_2879
    new $P126, "Undef"
  vivify_2879:
    set $S100, $P126
    new $P127, 'String'
    set $P127, $S100
    new $P128, "Float"
    assign $P128, 0
    set $I100, $P128
    find_lex $P3375, "$/"
    unless_null $P3375, vivify_2880
    $P3375 = root_new ['parrot';'Hash']
  vivify_2880:
    set $P3376, $P3375["deflongname"]
    unless_null $P3376, vivify_2881
    $P3376 = root_new ['parrot';'ResizablePMCArray']
  vivify_2881:
    set $P129, $P3376[$I100]
    unless_null $P129, vivify_2882
    new $P129, "Undef"
  vivify_2882:
    $P131 = $P129."ast"()
    set $S101, $P131
    concat $P132, $P127, $S101
    set $P3370, $P132
.annotate 'line', 2261
    find_lex $P126, "$past"
    unless_null $P126, vivify_2883
    new $P126, "Undef"
  vivify_2883:
    set $P127, $P3370
    unless_null $P127, vivify_2884
    new $P127, "Undef"
  vivify_2884:
    $P126."name"($P127)
.annotate 'line', 2264
    find_dynamic_lex $P129, "$*MULTINESS"
    unless_null $P129, vivify_2885
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$MULTINESS"]
    unless_null $P129, vivify_2886
    die "Contextual $*MULTINESS not found"
  vivify_2886:
  vivify_2885:
    set $S100, $P129
    iseq $I100, $S100, "multi"
    if $I100, if_3377
    new $P132, "String"
    assign $P132, "add_method"
    set $P126, $P132
    goto if_3377_end
  if_3377:
    new $P131, "String"
    assign $P131, "add_multi_method"
    set $P126, $P131
  if_3377_end:
    set $P3371, $P126
.annotate 'line', 2265
    find_dynamic_lex $P128, "$*MULTINESS"
    unless_null $P128, vivify_2887
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$MULTINESS"]
    unless_null $P128, vivify_2888
    die "Contextual $*MULTINESS not found"
  vivify_2888:
  vivify_2887:
    set $S100, $P128
    iseq $I100, $S100, "proto"
    new $P129, 'Integer'
    set $P129, $I100
    set $P3372, $P129
.annotate 'line', 2266
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2889
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2890
    die "Contextual $*W not found"
  vivify_2890:
  vivify_2889:
    find_lex $P129, "$past"
    unless_null $P129, vivify_2891
    new $P129, "Undef"
  vivify_2891:
    set $P131, $P3370
    unless_null $P131, vivify_2892
    new $P131, "Undef"
  vivify_2892:
    set $P132, $P3372
    unless_null $P132, vivify_2893
    new $P132, "Undef"
  vivify_2893:
    $P133 = $P128."create_code"($P129, $P131, $P132)
    set $P3373, $P133
.annotate 'line', 2267
    find_dynamic_lex $P128, "$*MULTINESS"
    unless_null $P128, vivify_2894
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$MULTINESS"]
    unless_null $P128, vivify_2895
    die "Contextual $*MULTINESS not found"
  vivify_2895:
  vivify_2894:
    set $S100, $P128
    iseq $I100, $S100, "multi"
    unless $I100, if_3378_end
    set $P129, $P3373
    unless_null $P129, vivify_2896
    new $P129, "Undef"
  vivify_2896:
    find_lex $P131, "$past"
    unless_null $P131, vivify_2897
    new $P131, "Undef"
  vivify_2897:
    "attach_multi_signature"($P129, $P131)
  if_3378_end:
.annotate 'line', 2268
    find_dynamic_lex $P128, "$*W"
    unless_null $P128, vivify_2898
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$W"]
    unless_null $P128, vivify_2899
    die "Contextual $*W not found"
  vivify_2899:
  vivify_2898:
    find_dynamic_lex $P132, "$*PACKAGE"
    unless_null $P132, vivify_2900
    get_hll_global $P129, "GLOBAL"
    get_who $P131, $P129
    set $P132, $P131["$PACKAGE"]
    unless_null $P132, vivify_2901
    die "Contextual $*PACKAGE not found"
  vivify_2901:
  vivify_2900:
    set $P133, $P3371
    unless_null $P133, vivify_2902
    new $P133, "Undef"
  vivify_2902:
    set $P134, $P3370
    unless_null $P134, vivify_2903
    new $P134, "Undef"
  vivify_2903:
    set $P135, $P3373
    unless_null $P135, vivify_2904
    new $P135, "Undef"
  vivify_2904:
    $P128."pkg_add_method"($P132, $P133, $P134, $P135)
.annotate 'line', 2271
    find_dynamic_lex $P129, "$*SCOPE"
    unless_null $P129, vivify_2905
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$SCOPE"]
    unless_null $P129, vivify_2906
    die "Contextual $*SCOPE not found"
  vivify_2906:
  vivify_2905:
    set $S100, $P129
    iseq $I100, $S100, "our"
    if $I100, if_3379
.annotate 'line', 2274
    find_lex $P132, "$past"
    unless_null $P132, vivify_2907
    new $P132, "Undef"
  vivify_2907:
    $P133 = $P132."pirflags"()
    if $P133, if_3380
.annotate 'line', 2277
    find_lex $P134, "$past"
    unless_null $P134, vivify_2908
    new $P134, "Undef"
  vivify_2908:
    $P135 = $P134."pirflags"(":anon")
.annotate 'line', 2276
    set $P131, $P135
.annotate 'line', 2274
    goto if_3380_end
  if_3380:
.annotate 'line', 2275
    find_lex $P134, "$past"
    unless_null $P134, vivify_2909
    new $P134, "Undef"
  vivify_2909:
    find_lex $P135, "$past"
    unless_null $P135, vivify_2910
    new $P135, "Undef"
  vivify_2910:
    $P136 = $P135."pirflags"()
    set $S101, $P136
    new $P137, 'String'
    set $P137, $S101
    concat $P138, $P137, ":anon"
    $P140 = $P134."pirflags"($P138)
.annotate 'line', 2274
    set $P131, $P140
  if_3380_end:
.annotate 'line', 2273
    set $P126, $P131
.annotate 'line', 2271
    goto if_3379_end
  if_3379:
.annotate 'line', 2272
    find_dynamic_lex $P133, "$*W"
    unless_null $P133, vivify_2911
    get_hll_global $P131, "GLOBAL"
    get_who $P132, $P131
    set $P133, $P132["$W"]
    unless_null $P133, vivify_2912
    die "Contextual $*W not found"
  vivify_2912:
  vivify_2911:
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_2913
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_2914
    die "Contextual $*PACKAGE not found"
  vivify_2914:
  vivify_2913:
    set $P137, $P3370
    unless_null $P137, vivify_2915
    new $P137, "Undef"
  vivify_2915:
    find_lex $P138, "$past"
    unless_null $P138, vivify_2916
    new $P138, "Undef"
  vivify_2916:
    $P139 = $P133."install_package_routine"($P136, $P137, $P138)
.annotate 'line', 2271
    set $P126, $P139
  if_3379_end:
.annotate 'line', 2258
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3385"  :anon :subid("636_1335114138.94729") :outer("483_1335114138.94729")
    .param pmc param_3387
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2286
    .lex "$_", param_3387
    find_lex $P126, "$_"
    unless_null $P126, vivify_2925
    new $P126, "Undef"
  vivify_2925:
    $P127 = $P126."ast"()
    find_lex $P128, "$/"
    unless_null $P128, vivify_2926
    new $P128, "Undef"
  vivify_2926:
    $P129 = $P127($P128)
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "signature" :anon :subid("484_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3390
    .param pmc param_3391
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2328
    .const 'Sub' $P3405 = "638_1335114138.94729" 
    capture_lex $P3405
    .const 'Sub' $P3398 = "637_1335114138.94729" 
    capture_lex $P3398
    .lex "self", param_3390
    .lex "$/", param_3391
.annotate 'line', 2329
    new $P118, "Undef"
    set $P3392, $P118
    .lex "$BLOCK", $P3392
.annotate 'line', 2330
    new $P120, "Undef"
    set $P3393, $P120
    .lex "$BLOCKINIT", $P3393
.annotate 'line', 2329
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_2927
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_2928
    die "Contextual $*W not found"
  vivify_2928:
  vivify_2927:
    $P125 = $P124."cur_lexpad"()
    set $P3392, $P125
.annotate 'line', 2330
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3394, $P3392
    unless_null $P3394, vivify_2929
    $P3394 = root_new ['parrot';'ResizablePMCArray']
  vivify_2929:
    set $P123, $P3394[$I100]
    unless_null $P123, vivify_2930
    new $P123, "Undef"
  vivify_2930:
    set $P3393, $P123
.annotate 'line', 2331
    set $P3396, param_3391
    unless_null $P3396, vivify_2931
    $P3396 = root_new ['parrot';'Hash']
  vivify_2931:
    set $P121, $P3396["invocant"]
    unless_null $P121, vivify_2932
    new $P121, "Undef"
  vivify_2932:
    unless $P121, if_3395_end
    .const 'Sub' $P3398 = "637_1335114138.94729" 
    capture_lex $P3398
    $P3398()
  if_3395_end:
.annotate 'line', 2340
    set $P3403, param_3391
    unless_null $P3403, vivify_2941
    $P3403 = root_new ['parrot';'Hash']
  vivify_2941:
    set $P123, $P3403["parameter"]
    unless_null $P123, vivify_2942
    new $P123, "Undef"
  vivify_2942:
    defined $I100, $P123
    unless $I100, for_undef_2943
    iter $P121, $P123
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop3407_handler
    push_eh $P125
  loop3407_test:
    unless $P121, loop3407_done
    shift $P124, $P121
  loop3407_redo:
    .const 'Sub' $P3405 = "638_1335114138.94729" 
    capture_lex $P3405
    $P3405($P124)
  loop3407_next:
    goto loop3407_test
  loop3407_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop3407_next
    eq $P126, .CONTROL_LOOP_REDO, loop3407_redo
  loop3407_done:
    pop_eh 
  for_undef_2943:
.annotate 'line', 2328
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3397"  :anon :subid("637_1335114138.94729") :outer("484_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2332
    new $P123, "Undef"
    set $P3399, $P123
    .lex "$inv", $P3399
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    find_lex $P3400, "$/"
    unless_null $P3400, vivify_2933
    $P3400 = root_new ['parrot';'Hash']
  vivify_2933:
    set $P3401, $P3400["invocant"]
    unless_null $P3401, vivify_2934
    $P3401 = root_new ['parrot';'ResizablePMCArray']
  vivify_2934:
    set $P125, $P3401[$I100]
    unless_null $P125, vivify_2935
    new $P125, "Undef"
  vivify_2935:
    $P126 = $P125."ast"()
    set $P3399, $P126
.annotate 'line', 2333
    find_lex $P124, "$BLOCKINIT"
    unless_null $P124, vivify_2936
    new $P124, "Undef"
  vivify_2936:
    set $P125, $P3399
    unless_null $P125, vivify_2937
    new $P125, "Undef"
  vivify_2937:
    $P124."push"($P125)
.annotate 'line', 2334
    find_lex $P124, "$BLOCKINIT"
    unless_null $P124, vivify_2938
    new $P124, "Undef"
  vivify_2938:
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
.annotate 'line', 2336
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Var"]
    set $P134, $P3399
    unless_null $P134, vivify_2939
    new $P134, "Undef"
  vivify_2939:
    $P135 = $P134."name"()
    $P136 = $P133."new"("lexical" :named("scope"), $P135 :named("name"))
.annotate 'line', 2334
    $P137 = $P128."new"("self" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P136 :named("viviself"))
    $P124."push"($P137)
.annotate 'line', 2338
    new $P124, "Float"
    assign $P124, 1
    find_lex $P3402, "$BLOCK"
    unless_null $P3402, vivify_2940
    $P3402 = root_new ['parrot';'Hash']
    store_lex "$BLOCK", $P3402
  vivify_2940:
    set $P3402["signature_has_invocant"], $P124
.annotate 'line', 2331
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3404"  :anon :subid("638_1335114138.94729") :outer("484_1335114138.94729")
    .param pmc param_3406
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2340
    .lex "$_", param_3406
    find_lex $P125, "$BLOCKINIT"
    unless_null $P125, vivify_2944
    new $P125, "Undef"
  vivify_2944:
    find_lex $P126, "$_"
    unless_null $P126, vivify_2945
    new $P126, "Undef"
  vivify_2945:
    $P127 = $P126."ast"()
    $P128 = $P125."push"($P127)
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "parameter" :anon :subid("485_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3409
    .param pmc param_3410
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2343
    .lex "self", param_3409
    .lex "$/", param_3410
.annotate 'line', 2344
    new $P118, "Undef"
    set $P3411, $P118
    .lex "$quant", $P3411
.annotate 'line', 2345
    new $P120, "Undef"
    set $P3412, $P120
    .lex "$past", $P3412
.annotate 'line', 2344
    set $P3413, param_3410
    unless_null $P3413, vivify_2946
    $P3413 = root_new ['parrot';'Hash']
  vivify_2946:
    set $P121, $P3413["quant"]
    unless_null $P121, vivify_2947
    new $P121, "Undef"
  vivify_2947:
    set $P3411, $P121
.annotate 'line', 2343
    set $P121, $P3412
    unless_null $P121, vivify_2948
    new $P121, "Undef"
  vivify_2948:
.annotate 'line', 2346
    set $P3415, param_3410
    unless_null $P3415, vivify_2949
    $P3415 = root_new ['parrot';'Hash']
  vivify_2949:
    set $P121, $P3415["named_param"]
    unless_null $P121, vivify_2950
    new $P121, "Undef"
  vivify_2950:
    if $P121, if_3414
.annotate 'line', 2353
    set $P3421, param_3410
    unless_null $P3421, vivify_2951
    $P3421 = root_new ['parrot';'Hash']
  vivify_2951:
    set $P123, $P3421["param_var"]
    unless_null $P123, vivify_2952
    new $P123, "Undef"
  vivify_2952:
    $P124 = $P123."ast"()
    set $P3412, $P124
.annotate 'line', 2354
    set $P123, $P3411
    unless_null $P123, vivify_2953
    new $P123, "Undef"
  vivify_2953:
    set $S100, $P123
    iseq $I100, $S100, "*"
    if $I100, if_3422
.annotate 'line', 2358
    set $P124, $P3411
    unless_null $P124, vivify_2954
    new $P124, "Undef"
  vivify_2954:
    set $S101, $P124
    iseq $I101, $S101, "?"
    unless $I101, if_3425_end
.annotate 'line', 2359
    set $P125, $P3412
    unless_null $P125, vivify_2955
    new $P125, "Undef"
  vivify_2955:
    set $P3426, param_3410
    unless_null $P3426, vivify_2956
    $P3426 = root_new ['parrot';'Hash']
  vivify_2956:
    set $P3427, $P3426["param_var"]
    unless_null $P3427, vivify_2957
    $P3427 = root_new ['parrot';'Hash']
  vivify_2957:
    set $P126, $P3427["sigil"]
    unless_null $P126, vivify_2958
    new $P126, "Undef"
  vivify_2958:
    $P127 = "vivitype"($P126)
    $P125."viviself"($P127)
  if_3425_end:
.annotate 'line', 2358
    goto if_3422_end
  if_3422:
.annotate 'line', 2355
    set $P124, $P3412
    unless_null $P124, vivify_2959
    new $P124, "Undef"
  vivify_2959:
    $P124."slurpy"(1)
.annotate 'line', 2356
    set $P124, $P3412
    unless_null $P124, vivify_2960
    new $P124, "Undef"
  vivify_2960:
    set $P3423, param_3410
    unless_null $P3423, vivify_2961
    $P3423 = root_new ['parrot';'Hash']
  vivify_2961:
    set $P3424, $P3423["param_var"]
    unless_null $P3424, vivify_2962
    $P3424 = root_new ['parrot';'Hash']
  vivify_2962:
    set $P125, $P3424["sigil"]
    unless_null $P125, vivify_2963
    new $P125, "Undef"
  vivify_2963:
    set $S101, $P125
    iseq $I101, $S101, "%"
    $P124."named"($I101)
  if_3422_end:
.annotate 'line', 2352
    goto if_3414_end
  if_3414:
.annotate 'line', 2347
    set $P3416, param_3410
    unless_null $P3416, vivify_2964
    $P3416 = root_new ['parrot';'Hash']
  vivify_2964:
    set $P123, $P3416["named_param"]
    unless_null $P123, vivify_2965
    new $P123, "Undef"
  vivify_2965:
    $P124 = $P123."ast"()
    set $P3412, $P124
.annotate 'line', 2348
    set $P123, $P3411
    unless_null $P123, vivify_2966
    new $P123, "Undef"
  vivify_2966:
    set $S100, $P123
    isne $I100, $S100, "!"
    unless $I100, if_3417_end
.annotate 'line', 2349
    set $P124, $P3412
    unless_null $P124, vivify_2967
    new $P124, "Undef"
  vivify_2967:
    set $P3418, param_3410
    unless_null $P3418, vivify_2968
    $P3418 = root_new ['parrot';'Hash']
  vivify_2968:
    set $P3419, $P3418["named_param"]
    unless_null $P3419, vivify_2969
    $P3419 = root_new ['parrot';'Hash']
  vivify_2969:
    set $P3420, $P3419["param_var"]
    unless_null $P3420, vivify_2970
    $P3420 = root_new ['parrot';'Hash']
  vivify_2970:
    set $P125, $P3420["sigil"]
    unless_null $P125, vivify_2971
    new $P125, "Undef"
  vivify_2971:
    $P126 = "vivitype"($P125)
    $P124."viviself"($P126)
  if_3417_end:
  if_3414_end:
.annotate 'line', 2362
    set $P3429, param_3410
    unless_null $P3429, vivify_2972
    $P3429 = root_new ['parrot';'Hash']
  vivify_2972:
    set $P121, $P3429["default_value"]
    unless_null $P121, vivify_2973
    new $P121, "Undef"
  vivify_2973:
    unless $P121, if_3428_end
.annotate 'line', 2363
    set $P123, $P3411
    unless_null $P123, vivify_2974
    new $P123, "Undef"
  vivify_2974:
    set $S100, $P123
    iseq $I100, $S100, "*"
    unless $I100, if_3430_end
.annotate 'line', 2364
    set $P124, param_3410
    unless_null $P124, vivify_2975
    new $P124, "Undef"
  vivify_2975:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Can't put default on slurpy parameter")
  if_3430_end:
.annotate 'line', 2366
    set $P123, $P3411
    unless_null $P123, vivify_2976
    new $P123, "Undef"
  vivify_2976:
    set $S100, $P123
    iseq $I100, $S100, "!"
    unless $I100, if_3431_end
.annotate 'line', 2367
    set $P124, param_3410
    unless_null $P124, vivify_2977
    new $P124, "Undef"
  vivify_2977:
    $P125 = $P124."CURSOR"()
    $P125."panic"("Can't put default on required parameter")
  if_3431_end:
.annotate 'line', 2369
    set $P123, $P3412
    unless_null $P123, vivify_2978
    new $P123, "Undef"
  vivify_2978:
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P3432, param_3410
    unless_null $P3432, vivify_2979
    $P3432 = root_new ['parrot';'Hash']
  vivify_2979:
    set $P3433, $P3432["default_value"]
    unless_null $P3433, vivify_2980
    $P3433 = root_new ['parrot';'ResizablePMCArray']
  vivify_2980:
    set $P3434, $P3433[$I100]
    unless_null $P3434, vivify_2981
    $P3434 = root_new ['parrot';'Hash']
  vivify_2981:
    set $P125, $P3434["EXPR"]
    unless_null $P125, vivify_2982
    new $P125, "Undef"
  vivify_2982:
    $P126 = $P125."ast"()
    $P123."viviself"($P126)
  if_3428_end:
.annotate 'line', 2371
    set $P121, $P3412
    unless_null $P121, vivify_2983
    new $P121, "Undef"
  vivify_2983:
    $P123 = $P121."viviself"()
    if $P123, unless_3435_end
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_2984
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_2985
    die "Contextual $*W not found"
  vivify_2985:
  vivify_2984:
    $P127 = $P126."cur_lexpad"()
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_2986
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_2987
    die "Contextual $*W not found"
  vivify_2987:
  vivify_2986:
    $P132 = $P131."cur_lexpad"()
    $P133 = $P132."arity"()
    set $N100, $P133
    new $P134, 'Float'
    set $P134, $N100
    add $P135, $P134, 1
    $P127."arity"($P135)
  unless_3435_end:
.annotate 'line', 2375
    set $P3437, param_3410
    unless_null $P3437, vivify_2988
    $P3437 = root_new ['parrot';'Hash']
  vivify_2988:
    set $P121, $P3437["typename"]
    unless_null $P121, vivify_2989
    new $P121, "Undef"
  vivify_2989:
    unless $P121, if_3436_end
.annotate 'line', 2376
    set $P123, $P3412
    unless_null $P123, vivify_2990
    new $P123, "Undef"
  vivify_2990:
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P3438, param_3410
    unless_null $P3438, vivify_2991
    $P3438 = root_new ['parrot';'Hash']
  vivify_2991:
    set $P3439, $P3438["typename"]
    unless_null $P3439, vivify_2992
    $P3439 = root_new ['parrot';'ResizablePMCArray']
  vivify_2992:
    set $P125, $P3439[$I100]
    unless_null $P125, vivify_2993
    new $P125, "Undef"
  vivify_2993:
    $P126 = $P125."ast"()
    $P123."multitype"($P126)
  if_3436_end:
.annotate 'line', 2380
    set $P3441, param_3410
    unless_null $P3441, vivify_2994
    $P3441 = root_new ['parrot';'Hash']
  vivify_2994:
    set $P121, $P3441["definedness"]
    unless_null $P121, vivify_2995
    new $P121, "Undef"
  vivify_2995:
    unless $P121, if_3440_end
.annotate 'line', 2381
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    set $P3442, param_3410
    unless_null $P3442, vivify_2996
    $P3442 = root_new ['parrot';'Hash']
  vivify_2996:
    set $P3443, $P3442["definedness"]
    unless_null $P3443, vivify_2997
    $P3443 = root_new ['parrot';'ResizablePMCArray']
  vivify_2997:
    set $P124, $P3443[$I100]
    unless_null $P124, vivify_2998
    new $P124, "Undef"
  vivify_2998:
    set $S100, $P124
    new $P125, 'String'
    set $P125, $S100
    set $P3444, $P3412
    unless_null $P3444, vivify_2999
    $P3444 = root_new ['parrot';'Hash']
    set $P3412, $P3444
  vivify_2999:
    set $P3444["definedness"], $P125
  if_3440_end:
.annotate 'line', 2384
    set $P121, param_3410
    set $P123, $P3412
    unless_null $P123, vivify_3000
    new $P123, "Undef"
  vivify_3000:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2343
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "param_var" :anon :subid("486_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3446
    .param pmc param_3447
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2387
    .lex "self", param_3446
    .lex "$/", param_3447
.annotate 'line', 2388
    new $P118, "Undef"
    set $P3448, $P118
    .lex "$name", $P3448
.annotate 'line', 2389
    new $P120, "Undef"
    set $P3449, $P120
    .lex "$past", $P3449
.annotate 'line', 2388
    set $P121, param_3447
    unless_null $P121, vivify_3001
    new $P121, "Undef"
  vivify_3001:
    set $S100, $P121
    new $P123, 'String'
    set $P123, $S100
    set $P3448, $P123
.annotate 'line', 2389
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    set $P126, $P3448
    unless_null $P126, vivify_3002
    new $P126, "Undef"
  vivify_3002:
    set $P127, param_3447
    unless_null $P127, vivify_3003
    new $P127, "Undef"
  vivify_3003:
    $P128 = $P125."new"($P126 :named("name"), "parameter" :named("scope"), 1 :named("isdecl"), 1 :named("directaccess"), $P127 :named("node"))
    set $P3449, $P128
.annotate 'line', 2391
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_3004
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_3005
    die "Contextual $*W not found"
  vivify_3005:
  vivify_3004:
    $P125 = $P124."cur_lexpad"()
    set $P126, $P3448
    unless_null $P126, vivify_3006
    new $P126, "Undef"
  vivify_3006:
    $P125."symbol"($P126, "lexical" :named("scope"))
.annotate 'line', 2392
    set $P121, param_3447
    set $P123, $P3449
    unless_null $P123, vivify_3007
    new $P123, "Undef"
  vivify_3007:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2387
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "named_param" :anon :subid("487_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3451
    .param pmc param_3452
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2395
    .lex "self", param_3451
    .lex "$/", param_3452
.annotate 'line', 2396
    new $P118, "Undef"
    set $P3453, $P118
    .lex "$past", $P3453
    set $P3454, param_3452
    unless_null $P3454, vivify_3008
    $P3454 = root_new ['parrot';'Hash']
  vivify_3008:
    set $P120, $P3454["param_var"]
    unless_null $P120, vivify_3009
    new $P120, "Undef"
  vivify_3009:
    $P121 = $P120."ast"()
    set $P3453, $P121
.annotate 'line', 2397
    set $P120, $P3453
    unless_null $P120, vivify_3010
    new $P120, "Undef"
  vivify_3010:
    set $P3455, param_3452
    unless_null $P3455, vivify_3011
    $P3455 = root_new ['parrot';'Hash']
  vivify_3011:
    set $P3456, $P3455["param_var"]
    unless_null $P3456, vivify_3012
    $P3456 = root_new ['parrot';'Hash']
  vivify_3012:
    set $P121, $P3456["name"]
    unless_null $P121, vivify_3013
    new $P121, "Undef"
  vivify_3013:
    set $S100, $P121
    $P120."named"($S100)
.annotate 'line', 2398
    set $P120, param_3452
    set $P121, $P3453
    unless_null $P121, vivify_3014
    new $P121, "Undef"
  vivify_3014:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2395
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "typename" :anon :subid("488_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3458
    .param pmc param_3459
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2401
    .const 'Sub' $P3464 = "639_1335114138.94729" 
    capture_lex $P3464
    .lex "self", param_3458
    .lex "$/", param_3459
.annotate 'line', 2405
    $P3461 = root_new ['parrot';'ResizablePMCArray']
    set $P3460, $P3461
    .lex "@name", $P3460
.annotate 'line', 2406
    new $P118, "Undef"
    set $P3462, $P118
    .lex "$found", $P3462
.annotate 'line', 2405
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "HLL"
    get_who $P123, $P121
    set $P124, $P123["Compiler"]
    set $P125, param_3459
    unless_null $P125, vivify_3015
    new $P125, "Undef"
  vivify_3015:
    set $S100, $P125
    $P126 = $P124."parse_name"($S100)
    set $P3460, $P126
.annotate 'line', 2406
    new $P120, "Float"
    assign $P120, 0
    set $P3462, $P120
.annotate 'line', 2407
    .const 'Sub' $P3464 = "639_1335114138.94729" 
    capture_lex $P3464
    $P3464()
.annotate 'line', 2412
    set $P121, $P3462
    unless_null $P121, vivify_3022
    new $P121, "Undef"
  vivify_3022:
    unless $P121, unless_3474
    set $P120, $P121
    goto unless_3474_end
  unless_3474:
.annotate 'line', 2413
    set $P123, param_3459
    unless_null $P123, vivify_3023
    new $P123, "Undef"
  vivify_3023:
    $P124 = $P123."CURSOR"()
    new $P125, "String"
    assign $P125, "Use of undeclared type '"
    set $P126, param_3459
    unless_null $P126, vivify_3024
    new $P126, "Undef"
  vivify_3024:
    set $S100, $P126
    concat $P127, $P125, $S100
    concat $P128, $P127, "'"
    $P129 = $P124."panic"($P128)
.annotate 'line', 2412
    set $P120, $P129
  unless_3474_end:
.annotate 'line', 2401
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3463"  :anon :subid("639_1335114138.94729") :outer("488_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2407
    new $P3469, 'ExceptionHandler'
    set_label $P3469, control_3468
    $P3469."handle_types_except"(.CONTROL_ALL)
    push_eh $P3469
.annotate 'line', 2408
    new $P120, "Undef"
    set $P3465, $P120
    .lex "$sym", $P3465
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_3016
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_3017
    die "Contextual $*W not found"
  vivify_3017:
  vivify_3016:
    find_lex $P3466, "@name"
    unless_null $P3466, vivify_3018
    $P3466 = root_new ['parrot';'ResizablePMCArray']
  vivify_3018:
    $P125 = $P124."find_sym"($P3466)
    set $P3465, $P125
.annotate 'line', 2409
    find_dynamic_lex $P121, "$/"
    find_dynamic_lex $P125, "$*W"
    unless_null $P125, vivify_3019
    get_hll_global $P123, "GLOBAL"
    get_who $P124, $P123
    set $P125, $P124["$W"]
    unless_null $P125, vivify_3020
    die "Contextual $*W not found"
  vivify_3020:
  vivify_3019:
    set $P126, $P3465
    unless_null $P126, vivify_3021
    new $P126, "Undef"
  vivify_3021:
    $P127 = $P125."get_ref"($P126)
    $P121."!make"($P127)
.annotate 'line', 2410
    new $P121, "Float"
    assign $P121, 1
    store_lex "$found", $P121
.annotate 'line', 2407
    pop_eh 
    goto skip_handler_3467
  control_3468:
    peek_exception $P3470
    .local pmc exception 
    .get_results (exception) 
    new $P3472, 'Integer'
    set $P3472, 1
    set exception["handled"], $P3472
    set $I3473, exception["handled"]
    eq $I3473, 1, handled_3471
    rethrow exception
  handled_3471:
    finalize $P3470
    .return (exception)
  skip_handler_3467:
    .return ($P121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait" :anon :subid("489_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3476
    .param pmc param_3477
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2417
    .lex "self", param_3476
    .lex "$/", param_3477
.annotate 'line', 2418
    set $P118, param_3477
    set $P3478, param_3477
    unless_null $P3478, vivify_3025
    $P3478 = root_new ['parrot';'Hash']
  vivify_3025:
    set $P120, $P3478["trait_mod"]
    unless_null $P120, vivify_3026
    new $P120, "Undef"
  vivify_3026:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 2417
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait_mod:sym<is>" :anon :subid("490_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3480
    .param pmc param_3481
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2421
    .const 'Sub' $P3500 = "642_1335114138.94729" 
    capture_lex $P3500
    .const 'Sub' $P3485 = "640_1335114138.94729" 
    capture_lex $P3485
    .lex "self", param_3480
    .lex "$/", param_3481
.annotate 'line', 2422
    set $P3483, param_3481
    unless_null $P3483, vivify_3027
    $P3483 = root_new ['parrot';'Hash']
  vivify_3027:
    set $P120, $P3483["longname"]
    unless_null $P120, vivify_3028
    new $P120, "Undef"
  vivify_3028:
    set $S100, $P120
    iseq $I100, $S100, "parrot_vtable"
    if $I100, if_3482
.annotate 'line', 2435
    set $P3498, param_3481
    unless_null $P3498, vivify_3029
    $P3498 = root_new ['parrot';'Hash']
  vivify_3029:
    set $P129, $P3498["longname"]
    unless_null $P129, vivify_3030
    new $P129, "Undef"
  vivify_3030:
    set $S101, $P129
    iseq $I101, $S101, "parrot_vtable_handler"
    if $I101, if_3497
.annotate 'line', 2446
    set $P3513, param_3481
    unless_null $P3513, vivify_3031
    $P3513 = root_new ['parrot';'Hash']
  vivify_3031:
    set $P137, $P3513["longname"]
    unless_null $P137, vivify_3032
    new $P137, "Undef"
  vivify_3032:
    set $S102, $P137
    iseq $I102, $S102, "pirflags"
    if $I102, if_3512
.annotate 'line', 2450
    set $P138, param_3481
    unless_null $P138, vivify_3033
    new $P138, "Undef"
  vivify_3033:
    $P139 = $P138."CURSOR"()
    new $P141, 'String'
    set $P141, "Trait '"
    set $P3514, param_3481
    unless_null $P3514, vivify_3034
    $P3514 = root_new ['parrot';'Hash']
  vivify_3034:
    set $P142, $P3514["longname"]
    unless_null $P142, vivify_3035
    new $P142, "Undef"
  vivify_3035:
    concat $P143, $P141, $P142
    concat $P144, $P143, "' not implemented"
    $P145 = $P139."panic"($P144)
.annotate 'line', 2449
    set $P136, $P145
.annotate 'line', 2446
    goto if_3512_end
  if_3512:
.annotate 'line', 2447
    set $P138, param_3481
    unless_null $P138, vivify_3036
    new $P138, "Undef"
  vivify_3036:
    $P139 = $P138."CURSOR"()
    $P140 = $P139."panic"("Trait 'pirflags' no longer supported; use 'is vtable'")
.annotate 'line', 2446
    set $P136, $P140
  if_3512_end:
    set $P128, $P136
.annotate 'line', 2435
    goto if_3497_end
  if_3497:
    .const 'Sub' $P3500 = "642_1335114138.94729" 
    capture_lex $P3500
    $P134 = $P3500()
    set $P128, $P134
  if_3497_end:
    set $P118, $P128
.annotate 'line', 2422
    goto if_3482_end
  if_3482:
    .const 'Sub' $P3485 = "640_1335114138.94729" 
    capture_lex $P3485
    $P126 = $P3485()
    set $P118, $P126
  if_3482_end:
.annotate 'line', 2421
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3499"  :anon :subid("642_1335114138.94729") :outer("490_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2435
    .const 'Sub' $P3508 = "643_1335114138.94729" 
    capture_lex $P3508
.annotate 'line', 2437
    new $P131, "Undef"
    set $P3501, $P131
    .lex "$cpast", $P3501
.annotate 'line', 2440
    new $P132, "Undef"
    set $P3502, $P132
    .lex "$name", $P3502
.annotate 'line', 2441
    new $P133, "Undef"
    set $P3503, $P133
    .lex "$package", $P3503
.annotate 'line', 2437
    new $P134, "Float"
    assign $P134, 0
    set $I102, $P134
    find_lex $P3504, "$/"
    unless_null $P3504, vivify_3037
    $P3504 = root_new ['parrot';'Hash']
  vivify_3037:
    set $P3505, $P3504["circumfix"]
    unless_null $P3505, vivify_3038
    $P3505 = root_new ['parrot';'ResizablePMCArray']
  vivify_3038:
    set $P135, $P3505[$I102]
    unless_null $P135, vivify_3039
    new $P135, "Undef"
  vivify_3039:
    $P136 = $P135."ast"()
    set $P3501, $P136
.annotate 'line', 2439
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Val"]
    set $P138, $P3501
    unless_null $P138, vivify_3040
    new $P138, "Undef"
  vivify_3040:
    $P139 = $P137."ACCEPTS"($P138)
    if $P139, unless_3506_end
.annotate 'line', 2438
    find_lex $P140, "$/"
    unless_null $P140, vivify_3041
    new $P140, "Undef"
  vivify_3041:
    $P141 = $P140."CURSOR"()
    $P141."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless_3506_end:
.annotate 'line', 2440
    set $P134, $P3501
    unless_null $P134, vivify_3042
    new $P134, "Undef"
  vivify_3042:
    $P135 = $P134."value"()
    set $P3502, $P135
.annotate 'line', 2441
    find_dynamic_lex $P136, "$*PACKAGE"
    unless_null $P136, vivify_3043
    get_hll_global $P134, "GLOBAL"
    get_who $P135, $P134
    set $P136, $P135["$PACKAGE"]
    unless_null $P136, vivify_3044
    die "Contextual $*PACKAGE not found"
  vivify_3044:
  vivify_3043:
    set $P3503, $P136
.annotate 'line', 2442
    find_dynamic_lex $P134, "$/"
    .const 'Sub' $P3508 = "643_1335114138.94729" 
    newclosure $P3511, $P3508
    $P135 = $P134."!make"($P3511)
.annotate 'line', 2435
    .return ($P135)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3507"  :anon :subid("643_1335114138.94729") :outer("642_1335114138.94729")
    .param pmc param_3509
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2442
    .lex "$match", param_3509
.annotate 'line', 2443
    find_dynamic_lex $P137, "$*W"
    unless_null $P137, vivify_3045
    get_hll_global $P135, "GLOBAL"
    get_who $P136, $P135
    set $P137, $P136["$W"]
    unless_null $P137, vivify_3046
    die "Contextual $*W not found"
  vivify_3046:
  vivify_3045:
    find_lex $P138, "$package"
    unless_null $P138, vivify_3047
    new $P138, "Undef"
  vivify_3047:
    find_lex $P139, "$name"
    unless_null $P139, vivify_3048
    new $P139, "Undef"
  vivify_3048:
    set $P3510, param_3509
    unless_null $P3510, vivify_3049
    $P3510 = root_new ['parrot';'Hash']
  vivify_3049:
    set $P140, $P3510["variable"]
    unless_null $P140, vivify_3050
    new $P140, "Undef"
  vivify_3050:
    set $S102, $P140
    $P141 = $P137."pkg_add_parrot_vtable_handler_mapping"($P138, $P139, $S102)
.annotate 'line', 2442
    .return ($P141)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3484"  :anon :subid("640_1335114138.94729") :outer("490_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2422
    .const 'Sub' $P3494 = "641_1335114138.94729" 
    capture_lex $P3494
.annotate 'line', 2424
    new $P121, "Undef"
    set $P3486, $P121
    .lex "$cpast", $P3486
.annotate 'line', 2427
    new $P123, "Undef"
    set $P3487, $P123
    .lex "$name", $P3487
.annotate 'line', 2428
    new $P124, "Undef"
    set $P3488, $P124
    .lex "$package", $P3488
.annotate 'line', 2429
    new $P125, "Undef"
    set $P3489, $P125
    .lex "$is_dispatcher", $P3489
.annotate 'line', 2424
    new $P126, "Float"
    assign $P126, 0
    set $I101, $P126
    find_lex $P3490, "$/"
    unless_null $P3490, vivify_3051
    $P3490 = root_new ['parrot';'Hash']
  vivify_3051:
    set $P3491, $P3490["circumfix"]
    unless_null $P3491, vivify_3052
    $P3491 = root_new ['parrot';'ResizablePMCArray']
  vivify_3052:
    set $P127, $P3491[$I101]
    unless_null $P127, vivify_3053
    new $P127, "Undef"
  vivify_3053:
    $P128 = $P127."ast"()
    set $P3486, $P128
.annotate 'line', 2426
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Val"]
    set $P131, $P3486
    unless_null $P131, vivify_3054
    new $P131, "Undef"
  vivify_3054:
    $P132 = $P129."ACCEPTS"($P131)
    if $P132, unless_3492_end
.annotate 'line', 2425
    find_lex $P133, "$/"
    unless_null $P133, vivify_3055
    new $P133, "Undef"
  vivify_3055:
    $P134 = $P133."CURSOR"()
    $P134."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless_3492_end:
.annotate 'line', 2427
    set $P126, $P3486
    unless_null $P126, vivify_3056
    new $P126, "Undef"
  vivify_3056:
    $P127 = $P126."value"()
    set $P3487, $P127
.annotate 'line', 2428
    find_dynamic_lex $P128, "$*PACKAGE"
    unless_null $P128, vivify_3057
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$PACKAGE"]
    unless_null $P128, vivify_3058
    die "Contextual $*PACKAGE not found"
  vivify_3058:
  vivify_3057:
    set $P3488, $P128
.annotate 'line', 2429
    find_dynamic_lex $P128, "$*SCOPE"
    unless_null $P128, vivify_3059
    get_hll_global $P126, "GLOBAL"
    get_who $P127, $P126
    set $P128, $P127["$SCOPE"]
    unless_null $P128, vivify_3060
    die "Contextual $*SCOPE not found"
  vivify_3060:
  vivify_3059:
    set $S101, $P128
    iseq $I101, $S101, "proto"
    new $P129, 'Integer'
    set $P129, $I101
    set $P3489, $P129
.annotate 'line', 2430
    find_dynamic_lex $P126, "$/"
    .const 'Sub' $P3494 = "641_1335114138.94729" 
    newclosure $P3496, $P3494
    $P127 = $P126."!make"($P3496)
.annotate 'line', 2422
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3493"  :anon :subid("641_1335114138.94729") :outer("640_1335114138.94729")
    .param pmc param_3495
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2430
    .lex "$match", param_3495
.annotate 'line', 2431
    find_dynamic_lex $P129, "$*W"
    unless_null $P129, vivify_3061
    get_hll_global $P127, "GLOBAL"
    get_who $P128, $P127
    set $P129, $P128["$W"]
    unless_null $P129, vivify_3062
    die "Contextual $*W not found"
  vivify_3062:
  vivify_3061:
    find_lex $P131, "$package"
    unless_null $P131, vivify_3063
    new $P131, "Undef"
  vivify_3063:
    find_lex $P132, "$name"
    unless_null $P132, vivify_3064
    new $P132, "Undef"
  vivify_3064:
.annotate 'line', 2432
    find_dynamic_lex $P135, "$*W"
    unless_null $P135, vivify_3065
    get_hll_global $P133, "GLOBAL"
    get_who $P134, $P133
    set $P135, $P134["$W"]
    unless_null $P135, vivify_3066
    die "Contextual $*W not found"
  vivify_3066:
  vivify_3065:
    set $P136, param_3495
    unless_null $P136, vivify_3067
    new $P136, "Undef"
  vivify_3067:
    $P137 = $P136."ast"()
    set $P138, $P137["block_past"]
    unless_null $P138, vivify_3068
    new $P138, "Undef"
  vivify_3068:
    find_lex $P139, "$name"
    unless_null $P139, vivify_3069
    new $P139, "Undef"
  vivify_3069:
    find_lex $P140, "$is_dispatcher"
    unless_null $P140, vivify_3070
    new $P140, "Undef"
  vivify_3070:
    $P141 = $P135."create_code"($P138, $P139, $P140)
    $P142 = $P129."pkg_add_method"($P131, "add_parrot_vtable_mapping", $P132, $P141)
.annotate 'line', 2430
    .return ($P142)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "regex_declarator" :anon :subid("491_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3518
    .param pmc param_3519
    .param pmc param_3520 :optional
    .param int has_param_3520 :opt_flag
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2454
    .const 'Sub' $P3549 = "646_1335114138.94729" 
    capture_lex $P3549
    .const 'Sub' $P3535 = "645_1335114138.94729" 
    capture_lex $P3535
    .const 'Sub' $P3530 = "644_1335114138.94729" 
    capture_lex $P3530
    new $P3517, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P3517, control_3516
    push_eh $P3517
    .lex "self", param_3518
    .lex "$/", param_3519
    if has_param_3520, optparam_3071
    new $P118, "Undef"
    set param_3520, $P118
  optparam_3071:
    .lex "$key", param_3520
.annotate 'line', 2455
    $P3522 = root_new ['parrot';'ResizablePMCArray']
    set $P3521, $P3522
    .lex "@MODIFIERS", $P3521
.annotate 'line', 2456
    new $P120, "Undef"
    set $P3523, $P120
    .lex "$name", $P3523
.annotate 'line', 2457
    new $P121, "Undef"
    set $P3524, $P121
    .lex "$past", $P3524
.annotate 'line', 2455
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "Regex"
    nqp_get_package_through_who $P125, $P124, "P6Regex"
    nqp_get_package_through_who $P126, $P125, "Actions"
    get_who $P127, $P126
    set $P3525, $P127["@MODIFIERS"]
    unless_null $P3525, vivify_3072
    $P3525 = root_new ['parrot';'ResizablePMCArray']
  vivify_3072:
    set $P3521, $P3525
.annotate 'line', 2456
    set $P3526, param_3519
    unless_null $P3526, vivify_3073
    $P3526 = root_new ['parrot';'Hash']
  vivify_3073:
    set $P123, $P3526["deflongname"]
    unless_null $P123, vivify_3074
    new $P123, "Undef"
  vivify_3074:
    $P124 = $P123."ast"()
    set $S100, $P124
    new $P125, 'String'
    set $P125, $S100
    set $P3523, $P125
.annotate 'line', 2454
    set $P123, $P3524
    unless_null $P123, vivify_3075
    new $P123, "Undef"
  vivify_3075:
.annotate 'line', 2458
    set $P3528, param_3519
    unless_null $P3528, vivify_3076
    $P3528 = root_new ['parrot';'Hash']
  vivify_3076:
    set $P123, $P3528["proto"]
    unless_null $P123, vivify_3077
    new $P123, "Undef"
  vivify_3077:
    if $P123, if_3527
.annotate 'line', 2488
    set $P124, param_3520
    unless_null $P124, vivify_3078
    new $P124, "Undef"
  vivify_3078:
    set $S100, $P124
    iseq $I100, $S100, "open"
    if $I100, if_3533
.annotate 'line', 2498
    .const 'Sub' $P3549 = "646_1335114138.94729" 
    capture_lex $P3549
    $P3549()
    goto if_3533_end
  if_3533:
.annotate 'line', 2488
    .const 'Sub' $P3535 = "645_1335114138.94729" 
    capture_lex $P3535
    $P3535()
  if_3533_end:
    goto if_3527_end
  if_3527:
.annotate 'line', 2460
    get_hll_global $P124, "GLOBAL"
    nqp_get_package_through_who $P125, $P124, "PAST"
    get_who $P126, $P125
    set $P127, $P126["Stmts"]
.annotate 'line', 2461
    get_hll_global $P128, "GLOBAL"
    nqp_get_package_through_who $P129, $P128, "PAST"
    get_who $P131, $P129
    set $P132, $P131["Block"]
    set $P133, $P3523
    unless_null $P133, vivify_3135
    new $P133, "Undef"
  vivify_3135:
.annotate 'line', 2462
    get_hll_global $P134, "GLOBAL"
    nqp_get_package_through_who $P135, $P134, "PAST"
    get_who $P136, $P135
    set $P137, $P136["Op"]
.annotate 'line', 2463
    get_hll_global $P138, "GLOBAL"
    nqp_get_package_through_who $P139, $P138, "PAST"
    get_who $P140, $P139
    set $P141, $P140["Var"]
    $P142 = $P141."new"("self" :named("name"), "parameter" :named("scope"))
    set $P143, $P3523
    unless_null $P143, vivify_3136
    new $P143, "Undef"
  vivify_3136:
    $P144 = $P137."new"($P142, $P143, "!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2462
    set $P145, param_3519
    unless_null $P145, vivify_3137
    new $P145, "Undef"
  vivify_3137:
    $P146 = $P132."new"($P144, $P133 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P145 :named("node"))
.annotate 'line', 2472
    get_hll_global $P147, "GLOBAL"
    nqp_get_package_through_who $P149, $P147, "PAST"
    get_who $P150, $P149
    set $P151, $P150["Block"]
    new $P152, "String"
    assign $P152, "!PREFIX__"
    set $P153, $P3523
    unless_null $P153, vivify_3138
    new $P153, "Undef"
  vivify_3138:
    concat $P154, $P152, $P153
.annotate 'line', 2473
    get_hll_global $P155, "GLOBAL"
    nqp_get_package_through_who $P156, $P155, "PAST"
    get_who $P157, $P156
    set $P158, $P157["Op"]
.annotate 'line', 2474
    get_hll_global $P159, "GLOBAL"
    nqp_get_package_through_who $P160, $P159, "PAST"
    get_who $P161, $P160
    set $P162, $P161["Var"]
    $P163 = $P162."new"("self" :named("name"), "parameter" :named("scope"))
    set $P164, $P3523
    unless_null $P164, vivify_3139
    new $P164, "Undef"
  vivify_3139:
    $P165 = $P158."new"($P163, $P164, "!PREFIX__!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2473
    set $P166, param_3519
    unless_null $P166, vivify_3140
    new $P166, "Undef"
  vivify_3140:
    $P167 = $P151."new"($P165, $P154 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P166 :named("node"))
.annotate 'line', 2472
    $P168 = $P127."new"($P146, $P167)
.annotate 'line', 2460
    set $P3524, $P168
.annotate 'line', 2484
    set $P125, $P3524
    unless_null $P125, vivify_3141
    new $P125, "Undef"
  vivify_3141:
    $P126 = $P125."list"()
    defined $I100, $P126
    unless $I100, for_undef_3142
    iter $P124, $P126
    new $P128, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P128, loop3532_handler
    push_eh $P128
  loop3532_test:
    unless $P124, loop3532_done
    shift $P127, $P124
  loop3532_redo:
    .const 'Sub' $P3530 = "644_1335114138.94729" 
    capture_lex $P3530
    $P3530($P127)
  loop3532_next:
    goto loop3532_test
  loop3532_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P129, exception, 'type'
    eq $P129, .CONTROL_LOOP_NEXT, loop3532_next
    eq $P129, .CONTROL_LOOP_REDO, loop3532_redo
  loop3532_done:
    pop_eh 
  for_undef_3142:
  if_3527_end:
.annotate 'line', 2529
    set $P123, param_3519
    set $P124, $P3524
    unless_null $P124, vivify_3152
    new $P124, "Undef"
  vivify_3152:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2454
    .return ($P125)
  control_3516:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P123, exception, "payload"
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3548"  :anon :subid("646_1335114138.94729") :outer("491_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2498
    .const 'Sub' $P3556 = "647_1335114138.94729" 
    capture_lex $P3556
.annotate 'line', 2499
    new $P125, "Undef"
    set $P3550, $P125
    .lex "$regex", $P3550
.annotate 'line', 2502
    new $P126, "Undef"
    set $P3551, $P126
    .lex "$prefix_meth", $P3551
.annotate 'line', 2500
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "Regex"
    nqp_get_package_through_who $P129, $P128, "P6Regex"
    nqp_get_package_through_who $P131, $P129, "Actions"
    get_who $P132, $P131
    set $P133, $P132["buildsub"]
    find_lex $P3552, "$/"
    unless_null $P3552, vivify_3079
    $P3552 = root_new ['parrot';'Hash']
  vivify_3079:
    set $P134, $P3552["p6regex"]
    unless_null $P134, vivify_3080
    new $P134, "Undef"
  vivify_3080:
    $P135 = $P134."ast"()
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_3081
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_3082
    die "Contextual $*W not found"
  vivify_3082:
  vivify_3081:
    $P139 = $P138."pop_lexpad"()
    $P140 = $P133($P135, $P139)
    set $P3550, $P140
.annotate 'line', 2501
    set $P127, $P3550
    unless_null $P127, vivify_3083
    new $P127, "Undef"
  vivify_3083:
    find_lex $P128, "$name"
    unless_null $P128, vivify_3084
    new $P128, "Undef"
  vivify_3084:
    $P127."name"($P128)
.annotate 'line', 2498
    set $P127, $P3551
    unless_null $P127, vivify_3085
    new $P127, "Undef"
  vivify_3085:
.annotate 'line', 2504
    find_dynamic_lex $P131, "$*PKGDECL"
    unless_null $P131, vivify_3086
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$PKGDECL"]
    unless_null $P131, vivify_3087
    die "Contextual $*PKGDECL not found"
  vivify_3087:
  vivify_3086:
    if $P131, if_3554
    set $P127, $P131
    goto if_3554_end
  if_3554:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_3088
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_3089
    die "Contextual $*PACKAGE not found"
  vivify_3089:
  vivify_3088:
    get_how $P135, $P134
    can $I101, $P135, "add_method"
    new $P127, 'Integer'
    set $P127, $I101
  if_3554_end:
    unless $P127, if_3553_end
    .const 'Sub' $P3556 = "647_1335114138.94729" 
    capture_lex $P3556
    $P3556()
  if_3553_end:
.annotate 'line', 2519
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
.annotate 'line', 2521
    new $P132, "ResizablePMCArray"
    push $P132, "Regex"
    push $P132, "Method"
    find_lex $P133, "$/"
    unless_null $P133, vivify_3112
    new $P133, "Undef"
  vivify_3112:
    $P134 = "lexical_package_lookup"($P132, $P133)
    set $P135, $P3550
    unless_null $P135, vivify_3113
    new $P135, "Undef"
  vivify_3113:
    $P136 = $P131."new"($P134, $P135, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2519
    store_lex "$past", $P136
.annotate 'line', 2524
    set $P128, $P3551
    unless_null $P128, vivify_3114
    new $P128, "Undef"
  vivify_3114:
    if $P128, if_3561
    set $P137, $P3550
    unless_null $P137, vivify_3115
    new $P137, "Undef"
  vivify_3115:
    set $P127, $P137
    goto if_3561_end
  if_3561:
.annotate 'line', 2525
    get_hll_global $P129, "GLOBAL"
    nqp_get_package_through_who $P131, $P129, "PAST"
    get_who $P132, $P131
    set $P133, $P132["Stmts"]
    set $P134, $P3550
    unless_null $P134, vivify_3116
    new $P134, "Undef"
  vivify_3116:
    set $P135, $P3551
    unless_null $P135, vivify_3117
    new $P135, "Undef"
  vivify_3117:
    $P136 = $P133."new"($P134, $P135)
    set $P127, $P136
  if_3561_end:
.annotate 'line', 2524
    find_lex $P3562, "$past"
    unless_null $P3562, vivify_3118
    $P3562 = root_new ['parrot';'Hash']
    store_lex "$past", $P3562
  vivify_3118:
    set $P3562["sink"], $P127
.annotate 'line', 2527
    find_lex $P3563, "@MODIFIERS"
    unless_null $P3563, vivify_3119
    $P3563 = root_new ['parrot';'ResizablePMCArray']
  vivify_3119:
    $P127 = $P3563."shift"()
.annotate 'line', 2498
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3555"  :anon :subid("647_1335114138.94729") :outer("646_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2509
    $P3558 = root_new ['parrot';'ResizablePMCArray']
    set $P3557, $P3558
    .lex "@prefixes", $P3557
.annotate 'line', 2506
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_3090
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_3091
    die "Contextual $*W not found"
  vivify_3091:
  vivify_3090:
    find_dynamic_lex $P141, "$*PACKAGE"
    unless_null $P141, vivify_3092
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$PACKAGE"]
    unless_null $P141, vivify_3093
    die "Contextual $*PACKAGE not found"
  vivify_3093:
  vivify_3092:
    find_lex $P142, "$name"
    unless_null $P142, vivify_3094
    new $P142, "Undef"
  vivify_3094:
    find_dynamic_lex $P145, "$*W"
    unless_null $P145, vivify_3095
    get_hll_global $P143, "GLOBAL"
    get_who $P144, $P143
    set $P145, $P144["$W"]
    unless_null $P145, vivify_3096
    die "Contextual $*W not found"
  vivify_3096:
  vivify_3095:
    find_lex $P146, "$regex"
    unless_null $P146, vivify_3097
    new $P146, "Undef"
  vivify_3097:
    find_lex $P147, "$name"
    unless_null $P147, vivify_3098
    new $P147, "Undef"
  vivify_3098:
    $P149 = $P145."create_code"($P146, $P147, 0)
    $P138."pkg_add_method"($P141, "add_method", $P142, $P149)
.annotate 'line', 2509
    find_lex $P3559, "$/"
    unless_null $P3559, vivify_3099
    $P3559 = root_new ['parrot';'Hash']
  vivify_3099:
    set $P136, $P3559["p6regex"]
    unless_null $P136, vivify_3100
    new $P136, "Undef"
  vivify_3100:
    $P137 = $P136."ast"()
    $P138 = $P137."prefix_list"()
    set $P3557, $P138
.annotate 'line', 2510
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Block"]
.annotate 'line', 2511
    new $P140, "String"
    assign $P140, "!PREFIX__"
    find_lex $P141, "$name"
    unless_null $P141, vivify_3101
    new $P141, "Undef"
  vivify_3101:
    concat $P142, $P140, $P141
.annotate 'line', 2512
    get_hll_global $P143, "GLOBAL"
    nqp_get_package_through_who $P144, $P143, "PAST"
    get_who $P145, $P144
    set $P146, $P145["Op"]
    set $P3560, $P3557
    unless_null $P3560, vivify_3102
    $P3560 = root_new ['parrot';'ResizablePMCArray']
  vivify_3102:
    $P147 = $P146."new"($P3560 :flat, "list" :named("pasttype"))
    $P149 = $P139."new"($P147, $P142 :named("name"), "method" :named("blocktype"))
.annotate 'line', 2510
    store_lex "$prefix_meth", $P149
.annotate 'line', 2514
    find_dynamic_lex $P138, "$*W"
    unless_null $P138, vivify_3103
    get_hll_global $P136, "GLOBAL"
    get_who $P137, $P136
    set $P138, $P137["$W"]
    unless_null $P138, vivify_3104
    die "Contextual $*W not found"
  vivify_3104:
  vivify_3103:
    find_dynamic_lex $P141, "$*PACKAGE"
    unless_null $P141, vivify_3105
    get_hll_global $P139, "GLOBAL"
    get_who $P140, $P139
    set $P141, $P140["$PACKAGE"]
    unless_null $P141, vivify_3106
    die "Contextual $*PACKAGE not found"
  vivify_3106:
  vivify_3105:
    find_lex $P142, "$prefix_meth"
    unless_null $P142, vivify_3107
    new $P142, "Undef"
  vivify_3107:
    $P143 = $P142."name"()
.annotate 'line', 2515
    find_dynamic_lex $P146, "$*W"
    unless_null $P146, vivify_3108
    get_hll_global $P144, "GLOBAL"
    get_who $P145, $P144
    set $P146, $P145["$W"]
    unless_null $P146, vivify_3109
    die "Contextual $*W not found"
  vivify_3109:
  vivify_3108:
    find_lex $P147, "$prefix_meth"
    unless_null $P147, vivify_3110
    new $P147, "Undef"
  vivify_3110:
    find_lex $P149, "$prefix_meth"
    unless_null $P149, vivify_3111
    new $P149, "Undef"
  vivify_3111:
    $P150 = $P149."name"()
    $P151 = $P146."create_code"($P147, $P150, 0)
    $P152 = $P138."pkg_add_method"($P141, "add_method", $P143, $P151)
.annotate 'line', 2504
    .return ($P152)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3534"  :anon :subid("645_1335114138.94729") :outer("491_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2489
    $P3537 = root_new ['parrot';'Hash']
    set $P3536, $P3537
    .lex "%h", $P3536
.annotate 'line', 2488
    set $P3538, $P3536
    unless_null $P3538, vivify_3120
    $P3538 = root_new ['parrot';'Hash']
  vivify_3120:
.annotate 'line', 2490
    find_lex $P3540, "$/"
    unless_null $P3540, vivify_3121
    $P3540 = root_new ['parrot';'Hash']
  vivify_3121:
    set $P125, $P3540["sym"]
    unless_null $P125, vivify_3122
    new $P125, "Undef"
  vivify_3122:
    set $S101, $P125
    iseq $I101, $S101, "token"
    unless $I101, if_3539_end
    new $P126, "Float"
    assign $P126, 1
    set $P3541, $P3536
    unless_null $P3541, vivify_3123
    $P3541 = root_new ['parrot';'Hash']
    set $P3536, $P3541
  vivify_3123:
    set $P3541["r"], $P126
  if_3539_end:
.annotate 'line', 2491
    find_lex $P3543, "$/"
    unless_null $P3543, vivify_3124
    $P3543 = root_new ['parrot';'Hash']
  vivify_3124:
    set $P125, $P3543["sym"]
    unless_null $P125, vivify_3125
    new $P125, "Undef"
  vivify_3125:
    set $S101, $P125
    iseq $I101, $S101, "rule"
    unless $I101, if_3542_end
    new $P126, "Float"
    assign $P126, 1
    set $P3544, $P3536
    unless_null $P3544, vivify_3126
    $P3544 = root_new ['parrot';'Hash']
    set $P3536, $P3544
  vivify_3126:
    set $P3544["r"], $P126
    new $P126, "Float"
    assign $P126, 1
    set $P3545, $P3536
    unless_null $P3545, vivify_3127
    $P3545 = root_new ['parrot';'Hash']
    set $P3536, $P3545
  vivify_3127:
    set $P3545["s"], $P126
  if_3542_end:
.annotate 'line', 2492
    find_lex $P3546, "@MODIFIERS"
    unless_null $P3546, vivify_3128
    $P3546 = root_new ['parrot';'ResizablePMCArray']
  vivify_3128:
    set $P3547, $P3536
    unless_null $P3547, vivify_3129
    $P3547 = root_new ['parrot';'Hash']
  vivify_3129:
    $P3546."unshift"($P3547)
.annotate 'line', 2493
    find_lex $P125, "$name"
    unless_null $P125, vivify_3130
    new $P125, "Undef"
  vivify_3130:
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "Regex"
    nqp_get_package_through_who $P128, $P127, "P6Regex"
    nqp_get_package_through_who $P129, $P128, "Actions"
    get_who $P131, $P129
    set $P131["$REGEXNAME"], $P125
.annotate 'line', 2494
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_3131
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_3132
    die "Contextual $*W not found"
  vivify_3132:
  vivify_3131:
    $P128 = $P127."cur_lexpad"()
    $P128."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2495
    find_dynamic_lex $P127, "$*W"
    unless_null $P127, vivify_3133
    get_hll_global $P125, "GLOBAL"
    get_who $P126, $P125
    set $P127, $P126["$W"]
    unless_null $P127, vivify_3134
    die "Contextual $*W not found"
  vivify_3134:
  vivify_3133:
    $P128 = $P127."cur_lexpad"()
    $P128."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2496
    new $P125, "Exception"
    set $P125['type'], .CONTROL_RETURN
    new $P126, "Float"
    assign $P126, 0
    setattribute $P125, 'payload', $P126
    throw $P125
.annotate 'line', 2488
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3529"  :anon :subid("644_1335114138.94729") :outer("491_1335114138.94729")
    .param pmc param_3531
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2484
    .lex "$_", param_3531
.annotate 'line', 2485
    find_dynamic_lex $P131, "$*W"
    unless_null $P131, vivify_3143
    get_hll_global $P128, "GLOBAL"
    get_who $P129, $P128
    set $P131, $P129["$W"]
    unless_null $P131, vivify_3144
    die "Contextual $*W not found"
  vivify_3144:
  vivify_3143:
    find_dynamic_lex $P134, "$*PACKAGE"
    unless_null $P134, vivify_3145
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$PACKAGE"]
    unless_null $P134, vivify_3146
    die "Contextual $*PACKAGE not found"
  vivify_3146:
  vivify_3145:
    find_lex $P135, "$_"
    unless_null $P135, vivify_3147
    new $P135, "Undef"
  vivify_3147:
    $P136 = $P135."name"()
    find_dynamic_lex $P139, "$*W"
    unless_null $P139, vivify_3148
    get_hll_global $P137, "GLOBAL"
    get_who $P138, $P137
    set $P139, $P138["$W"]
    unless_null $P139, vivify_3149
    die "Contextual $*W not found"
  vivify_3149:
  vivify_3148:
    find_lex $P140, "$_"
    unless_null $P140, vivify_3150
    new $P140, "Undef"
  vivify_3150:
    find_lex $P141, "$_"
    unless_null $P141, vivify_3151
    new $P141, "Undef"
  vivify_3151:
    $P142 = $P141."name"()
    $P143 = $P139."create_code"($P140, $P142, 0)
    $P144 = $P131."pkg_add_method"($P134, "add_method", $P136, $P143)
.annotate 'line', 2484
    .return ($P144)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "dotty" :anon :subid("492_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3565
    .param pmc param_3566
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2533
    .lex "self", param_3565
    .lex "$/", param_3566
.annotate 'line', 2534
    new $P118, "Undef"
    set $P3567, $P118
    .lex "$past", $P3567
    set $P3569, param_3566
    unless_null $P3569, vivify_3153
    $P3569 = root_new ['parrot';'Hash']
  vivify_3153:
    set $P121, $P3569["args"]
    unless_null $P121, vivify_3154
    new $P121, "Undef"
  vivify_3154:
    if $P121, if_3568
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P131, param_3566
    unless_null $P131, vivify_3155
    new $P131, "Undef"
  vivify_3155:
    $P132 = $P129."new"($P131 :named("node"))
    set $P120, $P132
    goto if_3568_end
  if_3568:
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    set $P3570, param_3566
    unless_null $P3570, vivify_3156
    $P3570 = root_new ['parrot';'Hash']
  vivify_3156:
    set $P3571, $P3570["args"]
    unless_null $P3571, vivify_3157
    $P3571 = root_new ['parrot';'ResizablePMCArray']
  vivify_3157:
    set $P124, $P3571[$I100]
    unless_null $P124, vivify_3158
    new $P124, "Undef"
  vivify_3158:
    $P125 = $P124."ast"()
    set $P120, $P125
  if_3568_end:
    set $P3567, $P120
.annotate 'line', 2535
    set $P3573, param_3566
    unless_null $P3573, vivify_3159
    $P3573 = root_new ['parrot';'Hash']
  vivify_3159:
    set $P120, $P3573["quote"]
    unless_null $P120, vivify_3160
    new $P120, "Undef"
  vivify_3160:
    if $P120, if_3572
.annotate 'line', 2539
    set $P3576, param_3566
    unless_null $P3576, vivify_3161
    $P3576 = root_new ['parrot';'Hash']
  vivify_3161:
    set $P121, $P3576["longname"]
    unless_null $P121, vivify_3162
    new $P121, "Undef"
  vivify_3162:
    set $S100, $P121
    iseq $I100, $S100, "HOW"
    if $I100, if_3575
.annotate 'line', 2542
    set $P3578, param_3566
    unless_null $P3578, vivify_3163
    $P3578 = root_new ['parrot';'Hash']
  vivify_3163:
    set $P123, $P3578["longname"]
    unless_null $P123, vivify_3164
    new $P123, "Undef"
  vivify_3164:
    set $S101, $P123
    iseq $I101, $S101, "WHAT"
    if $I101, if_3577
.annotate 'line', 2545
    set $P3580, param_3566
    unless_null $P3580, vivify_3165
    $P3580 = root_new ['parrot';'Hash']
  vivify_3165:
    set $P124, $P3580["longname"]
    unless_null $P124, vivify_3166
    new $P124, "Undef"
  vivify_3166:
    set $S102, $P124
    iseq $I102, $S102, "WHO"
    if $I102, if_3579
.annotate 'line', 2548
    set $P3582, param_3566
    unless_null $P3582, vivify_3167
    $P3582 = root_new ['parrot';'Hash']
  vivify_3167:
    set $P125, $P3582["longname"]
    unless_null $P125, vivify_3168
    new $P125, "Undef"
  vivify_3168:
    set $S103, $P125
    iseq $I103, $S103, "REPR"
    if $I103, if_3581
.annotate 'line', 2552
    set $P126, $P3567
    unless_null $P126, vivify_3169
    new $P126, "Undef"
  vivify_3169:
    set $P3583, param_3566
    unless_null $P3583, vivify_3170
    $P3583 = root_new ['parrot';'Hash']
  vivify_3170:
    set $P127, $P3583["longname"]
    unless_null $P127, vivify_3171
    new $P127, "Undef"
  vivify_3171:
    set $S104, $P127
    $P126."name"($S104)
.annotate 'line', 2553
    set $P126, $P3567
    unless_null $P126, vivify_3172
    new $P126, "Undef"
  vivify_3172:
    $P126."pasttype"("callmethod")
.annotate 'line', 2551
    goto if_3581_end
  if_3581:
.annotate 'line', 2549
    set $P126, $P3567
    unless_null $P126, vivify_3173
    new $P126, "Undef"
  vivify_3173:
    $P126."pirop"("repr_name SP")
  if_3581_end:
.annotate 'line', 2548
    goto if_3579_end
  if_3579:
.annotate 'line', 2546
    set $P125, $P3567
    unless_null $P125, vivify_3174
    new $P125, "Undef"
  vivify_3174:
    $P125."pirop"("get_who PP")
  if_3579_end:
.annotate 'line', 2545
    goto if_3577_end
  if_3577:
.annotate 'line', 2543
    set $P124, $P3567
    unless_null $P124, vivify_3175
    new $P124, "Undef"
  vivify_3175:
    $P124."pirop"("get_what PP")
  if_3577_end:
.annotate 'line', 2542
    goto if_3575_end
  if_3575:
.annotate 'line', 2540
    set $P123, $P3567
    unless_null $P123, vivify_3176
    new $P123, "Undef"
  vivify_3176:
    $P123."pirop"("get_how PP")
  if_3575_end:
.annotate 'line', 2539
    goto if_3572_end
  if_3572:
.annotate 'line', 2536
    set $P121, $P3567
    unless_null $P121, vivify_3177
    new $P121, "Undef"
  vivify_3177:
    set $P3574, param_3566
    unless_null $P3574, vivify_3178
    $P3574 = root_new ['parrot';'Hash']
  vivify_3178:
    set $P123, $P3574["quote"]
    unless_null $P123, vivify_3179
    new $P123, "Undef"
  vivify_3179:
    $P124 = $P123."ast"()
    $P121."name"($P124)
.annotate 'line', 2537
    set $P121, $P3567
    unless_null $P121, vivify_3180
    new $P121, "Undef"
  vivify_3180:
    $P121."pasttype"("callmethod")
  if_3572_end:
.annotate 'line', 2555
    set $P120, param_3566
    set $P121, $P3567
    unless_null $P121, vivify_3181
    new $P121, "Undef"
  vivify_3181:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2533
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<self>" :anon :subid("493_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3585
    .param pmc param_3586
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2560
    .lex "self", param_3585
    .lex "$/", param_3586
.annotate 'line', 2561
    set $P118, param_3586
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2562
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("self" :named("name"))
    $P131 = $P124."new"($P129, "nqp_decontainerize PP" :named("pirop"))
.annotate 'line', 2561
    $P132 = $P118."!make"($P131)
.annotate 'line', 2560
    .return ($P132)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<identifier>" :anon :subid("494_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3588
    .param pmc param_3589
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2565
    .lex "self", param_3588
    .lex "$/", param_3589
.annotate 'line', 2566
    new $P118, "Undef"
    set $P3590, $P118
    .lex "$past", $P3590
    set $P3591, param_3589
    unless_null $P3591, vivify_3182
    $P3591 = root_new ['parrot';'Hash']
  vivify_3182:
    set $P120, $P3591["args"]
    unless_null $P120, vivify_3183
    new $P120, "Undef"
  vivify_3183:
    $P121 = $P120."ast"()
    set $P3590, $P121
.annotate 'line', 2567
    set $P120, $P3590
    unless_null $P120, vivify_3184
    new $P120, "Undef"
  vivify_3184:
    set $P3592, param_3589
    unless_null $P3592, vivify_3185
    $P3592 = root_new ['parrot';'Hash']
  vivify_3185:
    set $P121, $P3592["deflongname"]
    unless_null $P121, vivify_3186
    new $P121, "Undef"
  vivify_3186:
    set $S100, $P121
    $P120."name"($S100)
.annotate 'line', 2568
    set $P120, param_3589
    set $P121, $P3590
    unless_null $P121, vivify_3187
    new $P121, "Undef"
  vivify_3187:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2565
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<name>" :anon :subid("495_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3594
    .param pmc param_3595
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2571
    .const 'Sub' $P3602 = "648_1335114138.94729" 
    capture_lex $P3602
    .lex "self", param_3594
    .lex "$/", param_3595
.annotate 'line', 2573
    new $P118, "Undef"
    set $P3596, $P118
    .lex "$var", $P3596
.annotate 'line', 2583
    new $P120, "Undef"
    set $P3597, $P120
    .lex "$past", $P3597
.annotate 'line', 2571
    set $P121, $P3596
    unless_null $P121, vivify_3188
    new $P121, "Undef"
  vivify_3188:
.annotate 'line', 2574
    find_dynamic_lex $P124, "$*W"
    unless_null $P124, vivify_3189
    get_hll_global $P121, "GLOBAL"
    get_who $P123, $P121
    set $P124, $P123["$W"]
    unless_null $P124, vivify_3190
    die "Contextual $*W not found"
  vivify_3190:
  vivify_3189:
    set $P3599, param_3595
    unless_null $P3599, vivify_3191
    $P3599 = root_new ['parrot';'Hash']
  vivify_3191:
    set $P125, $P3599["name"]
    unless_null $P125, vivify_3192
    new $P125, "Undef"
  vivify_3192:
    set $S100, $P125
    $P126 = $P124."is_lexical"($S100)
    if $P126, if_3598
.annotate 'line', 2577
    .const 'Sub' $P3602 = "648_1335114138.94729" 
    capture_lex $P3602
    $P3602()
    goto if_3598_end
  if_3598:
.annotate 'line', 2575
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Var"]
    set $P3600, param_3595
    unless_null $P3600, vivify_3198
    $P3600 = root_new ['parrot';'Hash']
  vivify_3198:
    set $P132, $P3600["name"]
    unless_null $P132, vivify_3199
    new $P132, "Undef"
  vivify_3199:
    set $S101, $P132
    $P133 = $P131."new"($S101 :named("name"), "lexical" :named("scope"))
    set $P3596, $P133
  if_3598_end:
.annotate 'line', 2583
    set $P121, $P3596
    unless_null $P121, vivify_3200
    new $P121, "Undef"
  vivify_3200:
    set $P3597, $P121
.annotate 'line', 2584
    set $P3609, param_3595
    unless_null $P3609, vivify_3201
    $P3609 = root_new ['parrot';'Hash']
  vivify_3201:
    set $P121, $P3609["args"]
    unless_null $P121, vivify_3202
    new $P121, "Undef"
  vivify_3202:
    unless $P121, if_3608_end
.annotate 'line', 2585
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    set $P3610, param_3595
    unless_null $P3610, vivify_3203
    $P3610 = root_new ['parrot';'Hash']
  vivify_3203:
    set $P3611, $P3610["args"]
    unless_null $P3611, vivify_3204
    $P3611 = root_new ['parrot';'ResizablePMCArray']
  vivify_3204:
    set $P124, $P3611[$I100]
    unless_null $P124, vivify_3205
    new $P124, "Undef"
  vivify_3205:
    $P125 = $P124."ast"()
    set $P3597, $P125
.annotate 'line', 2586
    set $P123, $P3597
    unless_null $P123, vivify_3206
    new $P123, "Undef"
  vivify_3206:
    set $P124, $P3596
    unless_null $P124, vivify_3207
    new $P124, "Undef"
  vivify_3207:
    $P123."unshift"($P124)
  if_3608_end:
.annotate 'line', 2588
    set $P121, param_3595
    set $P123, $P3597
    unless_null $P123, vivify_3208
    new $P123, "Undef"
  vivify_3208:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2571
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3601"  :anon :subid("648_1335114138.94729") :outer("495_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2578
    $P3604 = root_new ['parrot';'ResizablePMCArray']
    set $P3603, $P3604
    .lex "@ns", $P3603
    find_lex $P3605, "$/"
    unless_null $P3605, vivify_3193
    $P3605 = root_new ['parrot';'Hash']
  vivify_3193:
    set $P3606, $P3605["name"]
    unless_null $P3606, vivify_3194
    $P3606 = root_new ['parrot';'Hash']
  vivify_3194:
    set $P127, $P3606["identifier"]
    unless_null $P127, vivify_3195
    new $P127, "Undef"
  vivify_3195:
    clone $P128, $P127
    set $P3603, $P128
.annotate 'line', 2579
    set $P3607, $P3603
    unless_null $P3607, vivify_3196
    $P3607 = root_new ['parrot';'ResizablePMCArray']
  vivify_3196:
    find_lex $P127, "$/"
    unless_null $P127, vivify_3197
    new $P127, "Undef"
  vivify_3197:
    $P128 = "lexical_package_lookup"($P3607, $P127)
    store_lex "$var", $P128
.annotate 'line', 2577
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::op>" :anon :subid("496_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3613
    .param pmc param_3614
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2591
    .lex "self", param_3613
    .lex "$/", param_3614
.annotate 'line', 2592
    new $P118, "Undef"
    set $P3615, $P118
    .lex "$past", $P3615
.annotate 'line', 2593
    new $P120, "Undef"
    set $P3616, $P120
    .lex "$pirop", $P3616
.annotate 'line', 2592
    set $P3618, param_3614
    unless_null $P3618, vivify_3209
    $P3618 = root_new ['parrot';'Hash']
  vivify_3209:
    set $P123, $P3618["args"]
    unless_null $P123, vivify_3210
    new $P123, "Undef"
  vivify_3210:
    if $P123, if_3617
    get_hll_global $P127, "GLOBAL"
    nqp_get_package_through_who $P128, $P127, "PAST"
    get_who $P129, $P128
    set $P131, $P129["Op"]
    set $P132, param_3614
    unless_null $P132, vivify_3211
    new $P132, "Undef"
  vivify_3211:
    $P133 = $P131."new"($P132 :named("node"))
    set $P121, $P133
    goto if_3617_end
  if_3617:
    new $P124, "Float"
    assign $P124, 0
    set $I100, $P124
    set $P3619, param_3614
    unless_null $P3619, vivify_3212
    $P3619 = root_new ['parrot';'Hash']
  vivify_3212:
    set $P3620, $P3619["args"]
    unless_null $P3620, vivify_3213
    $P3620 = root_new ['parrot';'ResizablePMCArray']
  vivify_3213:
    set $P125, $P3620[$I100]
    unless_null $P125, vivify_3214
    new $P125, "Undef"
  vivify_3214:
    $P126 = $P125."ast"()
    set $P121, $P126
  if_3617_end:
    set $P3615, $P121
.annotate 'line', 2593
    set $P3621, param_3614
    unless_null $P3621, vivify_3215
    $P3621 = root_new ['parrot';'Hash']
  vivify_3215:
    set $P121, $P3621["op"]
    unless_null $P121, vivify_3216
    new $P121, "Undef"
  vivify_3216:
    set $S100, $P121
    new $P123, 'String'
    set $P123, $S100
    set $P3616, $P123
.annotate 'line', 2594
    set $P121, $P3616
    unless_null $P121, vivify_3217
    new $P121, "Undef"
  vivify_3217:
    set $S100, $P121
    split $P123, "__", $S100
    join $S101, " ", $P123
    new $P124, 'String'
    set $P124, $S101
    set $P3616, $P124
.annotate 'line', 2595
    set $P121, $P3615
    unless_null $P121, vivify_3218
    new $P121, "Undef"
  vivify_3218:
    set $P123, $P3616
    unless_null $P123, vivify_3219
    new $P123, "Undef"
  vivify_3219:
    $P121."pirop"($P123)
.annotate 'line', 2596
    set $P121, $P3615
    unless_null $P121, vivify_3220
    new $P121, "Undef"
  vivify_3220:
    $P121."pasttype"("pirop")
.annotate 'line', 2597
    set $P121, param_3614
    set $P123, $P3615
    unless_null $P123, vivify_3221
    new $P123, "Undef"
  vivify_3221:
    $P124 = $P121."!make"($P123)
.annotate 'line', 2591
    .return ($P124)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::const>" :anon :subid("497_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3623
    .param pmc param_3624
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2600
    .lex "self", param_3623
    .lex "$/", param_3624
.annotate 'line', 2601
    set $P118, param_3624
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Val"]
    set $P3625, param_3624
    unless_null $P3625, vivify_3222
    $P3625 = root_new ['parrot';'Hash']
  vivify_3222:
    set $P125, $P3625["const"]
    unless_null $P125, vivify_3223
    new $P125, "Undef"
  vivify_3223:
    set $S100, $P125
    set $P126, param_3624
    unless_null $P126, vivify_3224
    new $P126, "Undef"
  vivify_3224:
    $P127 = $P124."new"($S100 :named("value"), "!macro_const" :named("returns"), $P126 :named("node"))
    $P128 = $P118."!make"($P127)
.annotate 'line', 2600
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<nqp::op>" :anon :subid("498_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3627
    .param pmc param_3628
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2604
    .lex "self", param_3627
    .lex "$/", param_3628
.annotate 'line', 2605
    new $P118, "Undef"
    set $P3629, $P118
    .lex "$op", $P3629
.annotate 'line', 2606
    new $P120, "Undef"
    set $P3630, $P120
    .lex "$args", $P3630
.annotate 'line', 2607
    new $P121, "Undef"
    set $P3631, $P121
    .lex "$past", $P3631
.annotate 'line', 2605
    set $P3632, param_3628
    unless_null $P3632, vivify_3225
    $P3632 = root_new ['parrot';'Hash']
  vivify_3225:
    set $P123, $P3632["op"]
    unless_null $P123, vivify_3226
    new $P123, "Undef"
  vivify_3226:
    set $S100, $P123
    new $P124, 'String'
    set $P124, $S100
    set $P3629, $P124
.annotate 'line', 2606
    set $P3634, param_3628
    unless_null $P3634, vivify_3227
    $P3634 = root_new ['parrot';'Hash']
  vivify_3227:
    set $P124, $P3634["args"]
    unless_null $P124, vivify_3228
    new $P124, "Undef"
  vivify_3228:
    if $P124, if_3633
    new $P129, "ResizablePMCArray"
    set $P123, $P129
    goto if_3633_end
  if_3633:
    new $P125, "Float"
    assign $P125, 0
    set $I100, $P125
    set $P3635, param_3628
    unless_null $P3635, vivify_3229
    $P3635 = root_new ['parrot';'Hash']
  vivify_3229:
    set $P3636, $P3635["args"]
    unless_null $P3636, vivify_3230
    $P3636 = root_new ['parrot';'ResizablePMCArray']
  vivify_3230:
    set $P126, $P3636[$I100]
    unless_null $P126, vivify_3231
    new $P126, "Undef"
  vivify_3231:
    $P127 = $P126."ast"()
    $P128 = $P127."list"()
    set $P123, $P128
  if_3633_end:
    set $P3630, $P123
.annotate 'line', 2607
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Node"]
    set $P127, $P3630
    unless_null $P127, vivify_3232
    new $P127, "Undef"
  vivify_3232:
    set $P128, $P3629
    unless_null $P128, vivify_3233
    new $P128, "Undef"
  vivify_3233:
    set $P129, param_3628
    unless_null $P129, vivify_3234
    new $P129, "Undef"
  vivify_3234:
    $P131 = $P126."map_node"($P127 :flat, "nqp" :named("map"), $P128 :named("op"), $P129 :named("node"))
    set $P3631, $P131
.annotate 'line', 2610
    set $P123, $P3631
    unless_null $P123, vivify_3235
    new $P123, "Undef"
  vivify_3235:
    defined $I100, $P123
    if $I100, unless_3637_end
.annotate 'line', 2611
    set $P124, param_3628
    unless_null $P124, vivify_3236
    new $P124, "Undef"
  vivify_3236:
    $P125 = $P124."CURSOR"()
    new $P126, 'String'
    set $P126, "Unrecognized nqp:: opcode 'nqp::"
    set $P127, $P3629
    unless_null $P127, vivify_3237
    new $P127, "Undef"
  vivify_3237:
    concat $P128, $P126, $P127
    concat $P129, $P128, "'"
    $P125."panic"($P129)
  unless_3637_end:
.annotate 'line', 2612
    set $P123, param_3628
    set $P124, $P3631
    unless_null $P124, vivify_3238
    new $P124, "Undef"
  vivify_3238:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2604
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<onlystar>" :anon :subid("499_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3639
    .param pmc param_3640
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2615
    .lex "self", param_3639
    .lex "$/", param_3640
.annotate 'line', 2616
    set $P118, param_3640
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    $P125 = $P124."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P126 = $P118."!make"($P125)
.annotate 'line', 2615
    .return ($P126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "args" :anon :subid("500_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3642
    .param pmc param_3643
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2621
    .lex "self", param_3642
    .lex "$/", param_3643
    set $P118, param_3643
    set $P3644, param_3643
    unless_null $P3644, vivify_3239
    $P3644 = root_new ['parrot';'Hash']
  vivify_3239:
    set $P120, $P3644["arglist"]
    unless_null $P120, vivify_3240
    new $P120, "Undef"
  vivify_3240:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "arglist" :anon :subid("501_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3646
    .param pmc param_3647
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2623
    .const 'Sub' $P3654 = "649_1335114138.94729" 
    capture_lex $P3654
    .lex "self", param_3646
    .lex "$/", param_3647
.annotate 'line', 2624
    new $P118, "Undef"
    set $P3648, $P118
    .lex "$past", $P3648
.annotate 'line', 2632
    new $P120, "Undef"
    set $P3649, $P120
    .lex "$i", $P3649
.annotate 'line', 2633
    new $P121, "Undef"
    set $P3650, $P121
    .lex "$n", $P3650
.annotate 'line', 2624
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P127, param_3647
    unless_null $P127, vivify_3241
    new $P127, "Undef"
  vivify_3241:
    $P128 = $P126."new"("call" :named("pasttype"), $P127 :named("node"))
    set $P3648, $P128
.annotate 'line', 2625
    set $P3652, param_3647
    unless_null $P3652, vivify_3242
    $P3652 = root_new ['parrot';'Hash']
  vivify_3242:
    set $P123, $P3652["EXPR"]
    unless_null $P123, vivify_3243
    new $P123, "Undef"
  vivify_3243:
    unless $P123, if_3651_end
    .const 'Sub' $P3654 = "649_1335114138.94729" 
    capture_lex $P3654
    $P3654()
  if_3651_end:
.annotate 'line', 2632
    new $P123, "Float"
    assign $P123, 0
    set $P3649, $P123
.annotate 'line', 2633
    set $P123, $P3648
    unless_null $P123, vivify_3254
    new $P123, "Undef"
  vivify_3254:
    $P124 = $P123."list"()
    set $N100, $P124
    new $P125, 'Float'
    set $P125, $N100
    set $P3650, $P125
.annotate 'line', 2634
    new $P125, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P125, loop3675_handler
    push_eh $P125
  loop3675_test:
    set $P123, $P3649
    unless_null $P123, vivify_3255
    new $P123, "Undef"
  vivify_3255:
    set $N100, $P123
    set $P124, $P3650
    unless_null $P124, vivify_3256
    new $P124, "Undef"
  vivify_3256:
    set $N101, $P124
    islt $I100, $N100, $N101
    unless $I100, loop3675_done
  loop3675_redo:
.annotate 'line', 2635
    set $P125, $P3649
    unless_null $P125, vivify_3257
    new $P125, "Undef"
  vivify_3257:
    set $I101, $P125
    set $P3664, $P3648
    unless_null $P3664, vivify_3258
    $P3664 = root_new ['parrot';'ResizablePMCArray']
  vivify_3258:
    set $P126, $P3664[$I101]
    unless_null $P126, vivify_3259
    new $P126, "Undef"
  vivify_3259:
    $S100 = $P126."name"()
    iseq $I102, $S100, "&prefix:<|>"
    unless $I102, if_3663_end
.annotate 'line', 2636
    new $P127, "Float"
    assign $P127, 0
    set $I103, $P127
    set $P128, $P3649
    unless_null $P128, vivify_3260
    new $P128, "Undef"
  vivify_3260:
    set $I104, $P128
    set $P3665, $P3648
    unless_null $P3665, vivify_3261
    $P3665 = root_new ['parrot';'ResizablePMCArray']
  vivify_3261:
    set $P3666, $P3665[$I104]
    unless_null $P3666, vivify_3262
    $P3666 = root_new ['parrot';'ResizablePMCArray']
  vivify_3262:
    set $P129, $P3666[$I103]
    unless_null $P129, vivify_3263
    new $P129, "Undef"
  vivify_3263:
    set $P131, $P3649
    unless_null $P131, vivify_3264
    new $P131, "Undef"
  vivify_3264:
    set $I105, $P131
    set $P3667, $P3648
    unless_null $P3667, vivify_3265
    $P3667 = root_new ['parrot';'ResizablePMCArray']
    set $P3648, $P3667
  vivify_3265:
    set $P3667[$I105], $P129
.annotate 'line', 2637
    set $P127, $P3649
    unless_null $P127, vivify_3266
    new $P127, "Undef"
  vivify_3266:
    set $I103, $P127
    set $P3668, $P3648
    unless_null $P3668, vivify_3267
    $P3668 = root_new ['parrot';'ResizablePMCArray']
  vivify_3267:
    set $P128, $P3668[$I103]
    unless_null $P128, vivify_3268
    new $P128, "Undef"
  vivify_3268:
    $P128."flat"(1)
.annotate 'line', 2638
    set $P128, $P3649
    unless_null $P128, vivify_3269
    new $P128, "Undef"
  vivify_3269:
    set $I103, $P128
    set $P3671, $P3648
    unless_null $P3671, vivify_3270
    $P3671 = root_new ['parrot';'ResizablePMCArray']
  vivify_3270:
    set $P129, $P3671[$I103]
    unless_null $P129, vivify_3271
    new $P129, "Undef"
  vivify_3271:
    get_hll_global $P131, "GLOBAL"
    nqp_get_package_through_who $P132, $P131, "PAST"
    get_who $P133, $P132
    set $P134, $P133["Val"]
    $P135 = $P129."isa"($P134)
    if $P135, if_3670
    set $P127, $P135
    goto if_3670_end
  if_3670:
.annotate 'line', 2639
    set $P136, $P3649
    unless_null $P136, vivify_3272
    new $P136, "Undef"
  vivify_3272:
    set $I104, $P136
    set $P3672, $P3648
    unless_null $P3672, vivify_3273
    $P3672 = root_new ['parrot';'ResizablePMCArray']
  vivify_3273:
    set $P137, $P3672[$I104]
    unless_null $P137, vivify_3274
    new $P137, "Undef"
  vivify_3274:
    $S101 = $P137."name"()
    new $P138, "Float"
    assign $P138, 0
    set $I105, $P138
    new $P139, "Float"
    assign $P139, 1
    set $I106, $P139
    substr $S102, $S101, $I105, $I106
    iseq $I107, $S102, "%"
    new $P127, 'Integer'
    set $P127, $I107
  if_3670_end:
    unless $P127, if_3669_end
.annotate 'line', 2640
    set $P140, $P3649
    unless_null $P140, vivify_3275
    new $P140, "Undef"
  vivify_3275:
    set $I108, $P140
    set $P3673, $P3648
    unless_null $P3673, vivify_3276
    $P3673 = root_new ['parrot';'ResizablePMCArray']
  vivify_3276:
    set $P141, $P3673[$I108]
    unless_null $P141, vivify_3277
    new $P141, "Undef"
  vivify_3277:
    $P141."named"(1)
  if_3669_end:
  if_3663_end:
.annotate 'line', 2634
    set $P125, $P3649
    unless_null $P125, vivify_3278
    new $P125, "Undef"
  vivify_3278:
    clone $P3674, $P125
    inc $P125
  loop3675_next:
    goto loop3675_test
  loop3675_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P126, exception, 'type'
    eq $P126, .CONTROL_LOOP_NEXT, loop3675_next
    eq $P126, .CONTROL_LOOP_REDO, loop3675_redo
  loop3675_done:
    pop_eh 
.annotate 'line', 2645
    set $P123, param_3647
    set $P124, $P3648
    unless_null $P124, vivify_3279
    new $P124, "Undef"
  vivify_3279:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2623
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3653"  :anon :subid("649_1335114138.94729") :outer("501_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2625
    .const 'Sub' $P3660 = "650_1335114138.94729" 
    capture_lex $P3660
.annotate 'line', 2626
    new $P124, "Undef"
    set $P3655, $P124
    .lex "$expr", $P3655
    find_lex $P3656, "$/"
    unless_null $P3656, vivify_3244
    $P3656 = root_new ['parrot';'Hash']
  vivify_3244:
    set $P125, $P3656["EXPR"]
    unless_null $P125, vivify_3245
    new $P125, "Undef"
  vivify_3245:
    $P126 = $P125."ast"()
    set $P3655, $P126
.annotate 'line', 2627
    set $P127, $P3655
    unless_null $P127, vivify_3246
    new $P127, "Undef"
  vivify_3246:
    $S100 = $P127."name"()
    iseq $I100, $S100, "&infix:<,>"
    if $I100, if_3658
    new $P126, 'Integer'
    set $P126, $I100
    goto if_3658_end
  if_3658:
    set $P128, $P3655
    unless_null $P128, vivify_3247
    new $P128, "Undef"
  vivify_3247:
    $P129 = $P128."named"()
    isfalse $I101, $P129
    new $P126, 'Integer'
    set $P126, $I101
  if_3658_end:
    if $P126, if_3657
.annotate 'line', 2630
    find_lex $P132, "$past"
    unless_null $P132, vivify_3248
    new $P132, "Undef"
  vivify_3248:
    set $P133, $P3655
    unless_null $P133, vivify_3249
    new $P133, "Undef"
  vivify_3249:
    $P134 = $P132."push"($P133)
    set $P125, $P134
.annotate 'line', 2627
    goto if_3657_end
  if_3657:
.annotate 'line', 2628
    set $P132, $P3655
    unless_null $P132, vivify_3250
    new $P132, "Undef"
  vivify_3250:
    $P133 = $P132."list"()
    defined $I102, $P133
    unless $I102, for_undef_3251
    iter $P131, $P133
    new $P135, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P135, loop3662_handler
    push_eh $P135
  loop3662_test:
    unless $P131, loop3662_done
    shift $P134, $P131
  loop3662_redo:
    .const 'Sub' $P3660 = "650_1335114138.94729" 
    capture_lex $P3660
    $P3660($P134)
  loop3662_next:
    goto loop3662_test
  loop3662_handler:
    .local pmc exception 
    .get_results (exception) 
    pop_upto_eh exception
    getattribute $P136, exception, 'type'
    eq $P136, .CONTROL_LOOP_NEXT, loop3662_next
    eq $P136, .CONTROL_LOOP_REDO, loop3662_redo
  loop3662_done:
    pop_eh 
  for_undef_3251:
.annotate 'line', 2627
    set $P125, $P131
  if_3657_end:
.annotate 'line', 2625
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3659"  :anon :subid("650_1335114138.94729") :outer("649_1335114138.94729")
    .param pmc param_3661
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2628
    .lex "$_", param_3661
    find_lex $P135, "$past"
    unless_null $P135, vivify_3252
    new $P135, "Undef"
  vivify_3252:
    find_lex $P136, "$_"
    unless_null $P136, vivify_3253
    new $P136, "Undef"
  vivify_3253:
    $P137 = $P135."push"($P136)
    .return ($P137)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<multi_declarator>" :anon :subid("502_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3677
    .param pmc param_3678
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2648
    .lex "self", param_3677
    .lex "$/", param_3678
    set $P118, param_3678
    set $P3679, param_3678
    unless_null $P3679, vivify_3280
    $P3679 = root_new ['parrot';'Hash']
  vivify_3280:
    set $P120, $P3679["multi_declarator"]
    unless_null $P120, vivify_3281
    new $P120, "Undef"
  vivify_3281:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<value>" :anon :subid("503_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3681
    .param pmc param_3682
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2650
    .lex "self", param_3681
    .lex "$/", param_3682
    set $P118, param_3682
    set $P3683, param_3682
    unless_null $P3683, vivify_3282
    $P3683 = root_new ['parrot';'Hash']
  vivify_3282:
    set $P120, $P3683["value"]
    unless_null $P120, vivify_3283
    new $P120, "Undef"
  vivify_3283:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<( )>" :anon :subid("504_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3685
    .param pmc param_3686
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2652
    .lex "self", param_3685
    .lex "$/", param_3686
.annotate 'line', 2653
    set $P118, param_3686
.annotate 'line', 2654
    set $P3688, param_3686
    unless_null $P3688, vivify_3284
    $P3688 = root_new ['parrot';'Hash']
  vivify_3284:
    set $P121, $P3688["EXPR"]
    unless_null $P121, vivify_3285
    new $P121, "Undef"
  vivify_3285:
    if $P121, if_3687
.annotate 'line', 2655
    get_hll_global $P126, "GLOBAL"
    nqp_get_package_through_who $P127, $P126, "PAST"
    get_who $P128, $P127
    set $P129, $P128["Op"]
    set $P131, param_3686
    unless_null $P131, vivify_3286
    new $P131, "Undef"
  vivify_3286:
    $P132 = $P129."new"("list" :named("pasttype"), $P131 :named("node"))
    set $P120, $P132
.annotate 'line', 2654
    goto if_3687_end
  if_3687:
    new $P123, "Float"
    assign $P123, 0
    set $I100, $P123
    set $P3689, param_3686
    unless_null $P3689, vivify_3287
    $P3689 = root_new ['parrot';'Hash']
  vivify_3287:
    set $P3690, $P3689["EXPR"]
    unless_null $P3690, vivify_3288
    $P3690 = root_new ['parrot';'ResizablePMCArray']
  vivify_3288:
    set $P124, $P3690[$I100]
    unless_null $P124, vivify_3289
    new $P124, "Undef"
  vivify_3289:
    $P125 = $P124."ast"()
    set $P120, $P125
  if_3687_end:
    $P133 = $P118."!make"($P120)
.annotate 'line', 2652
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<[ ]>" :anon :subid("505_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3692
    .param pmc param_3693
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2658
    .lex "self", param_3692
    .lex "$/", param_3693
.annotate 'line', 2659
    new $P118, "Undef"
    set $P3694, $P118
    .lex "$past", $P3694
.annotate 'line', 2658
    set $P120, $P3694
    unless_null $P120, vivify_3290
    new $P120, "Undef"
  vivify_3290:
.annotate 'line', 2660
    set $P3696, param_3693
    unless_null $P3696, vivify_3291
    $P3696 = root_new ['parrot';'Hash']
  vivify_3291:
    set $P120, $P3696["EXPR"]
    unless_null $P120, vivify_3292
    new $P120, "Undef"
  vivify_3292:
    if $P120, if_3695
.annotate 'line', 2667
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    $P126 = $P125."new"("list" :named("pasttype"))
    set $P3694, $P126
.annotate 'line', 2666
    goto if_3695_end
  if_3695:
.annotate 'line', 2661
    new $P121, "Float"
    assign $P121, 0
    set $I100, $P121
    set $P3697, param_3693
    unless_null $P3697, vivify_3293
    $P3697 = root_new ['parrot';'Hash']
  vivify_3293:
    set $P3698, $P3697["EXPR"]
    unless_null $P3698, vivify_3294
    $P3698 = root_new ['parrot';'ResizablePMCArray']
  vivify_3294:
    set $P123, $P3698[$I100]
    unless_null $P123, vivify_3295
    new $P123, "Undef"
  vivify_3295:
    $P124 = $P123."ast"()
    set $P3694, $P124
.annotate 'line', 2662
    set $P121, $P3694
    unless_null $P121, vivify_3296
    new $P121, "Undef"
  vivify_3296:
    $S100 = $P121."name"()
    isne $I100, $S100, "&infix:<,>"
    unless $I100, if_3699_end
.annotate 'line', 2663
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
    set $P127, $P3694
    unless_null $P127, vivify_3297
    new $P127, "Undef"
  vivify_3297:
    $P128 = $P126."new"($P127, "list" :named("pasttype"))
    set $P3694, $P128
  if_3699_end:
  if_3695_end:
.annotate 'line', 2669
    set $P120, $P3694
    unless_null $P120, vivify_3298
    new $P120, "Undef"
  vivify_3298:
    $P120."name"("&circumfix:<[ ]>")
.annotate 'line', 2670
    set $P120, param_3693
    set $P121, $P3694
    unless_null $P121, vivify_3299
    new $P121, "Undef"
  vivify_3299:
    $P123 = $P120."!make"($P121)
.annotate 'line', 2658
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<ang>" :anon :subid("506_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3701
    .param pmc param_3702
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2673
    .lex "self", param_3701
    .lex "$/", param_3702
    set $P118, param_3702
    set $P3703, param_3702
    unless_null $P3703, vivify_3300
    $P3703 = root_new ['parrot';'Hash']
  vivify_3300:
    set $P120, $P3703["quote_EXPR"]
    unless_null $P120, vivify_3301
    new $P120, "Undef"
  vivify_3301:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>" :anon :subid("507_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3705
    .param pmc param_3706
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2674
    .lex "self", param_3705
    .lex "$/", param_3706
    set $P118, param_3706
    set $P3707, param_3706
    unless_null $P3707, vivify_3302
    $P3707 = root_new ['parrot';'Hash']
  vivify_3302:
    set $P120, $P3707["quote_EXPR"]
    unless_null $P120, vivify_3303
    new $P120, "Undef"
  vivify_3303:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<{ }>" :anon :subid("508_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3709
    .param pmc param_3710
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2676
    .const 'Sub' $P3717 = "651_1335114138.94729" 
    capture_lex $P3717
    .lex "self", param_3709
    .lex "$/", param_3710
.annotate 'line', 2677
    set $P3712, param_3710
    unless_null $P3712, vivify_3304
    $P3712 = root_new ['parrot';'Hash']
  vivify_3304:
    set $P3713, $P3712["pblock"]
    unless_null $P3713, vivify_3305
    $P3713 = root_new ['parrot';'Hash']
  vivify_3305:
    set $P3714, $P3713["blockoid"]
    unless_null $P3714, vivify_3306
    $P3714 = root_new ['parrot';'Hash']
  vivify_3306:
    set $P3715, $P3714["statementlist"]
    unless_null $P3715, vivify_3307
    $P3715 = root_new ['parrot';'Hash']
  vivify_3307:
    set $P120, $P3715["statement"]
    unless_null $P120, vivify_3308
    new $P120, "Undef"
  vivify_3308:
    set $N100, $P120
    set $N101, 0
    isgt $I100, $N100, $N101
    if $I100, if_3711
.annotate 'line', 2682
    set $P3722, param_3710
    unless_null $P3722, vivify_3309
    $P3722 = root_new ['parrot';'Hash']
  vivify_3309:
    set $P3723, $P3722["pblock"]
    unless_null $P3723, vivify_3310
    $P3723 = root_new ['parrot';'Hash']
  vivify_3310:
    set $P3724, $P3723["blockoid"]
    unless_null $P3724, vivify_3311
    $P3724 = root_new ['parrot';'Hash']
  vivify_3311:
    set $P126, $P3724["you_are_here"]
    unless_null $P126, vivify_3312
    new $P126, "Undef"
  vivify_3312:
    if $P126, if_3721
.annotate 'line', 2686
    set $P127, param_3710
    $P128 = "vivitype"("%")
    $P129 = $P127."!make"($P128)
.annotate 'line', 2685
    set $P124, $P129
.annotate 'line', 2682
    goto if_3721_end
  if_3721:
.annotate 'line', 2683
    set $P127, param_3710
    set $P3725, param_3710
    unless_null $P3725, vivify_3313
    $P3725 = root_new ['parrot';'Hash']
  vivify_3313:
    set $P128, $P3725["pblock"]
    unless_null $P128, vivify_3314
    new $P128, "Undef"
  vivify_3314:
    $P129 = $P128."ast"()
    $P131 = $P127."!make"($P129)
.annotate 'line', 2682
    set $P124, $P131
  if_3721_end:
    set $P118, $P124
.annotate 'line', 2677
    goto if_3711_end
  if_3711:
    .const 'Sub' $P3717 = "651_1335114138.94729" 
    capture_lex $P3717
    $P123 = $P3717()
    set $P118, $P123
  if_3711_end:
.annotate 'line', 2676
    .return ($P118)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3716"  :anon :subid("651_1335114138.94729") :outer("508_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2678
    new $P121, "Undef"
    set $P3718, $P121
    .lex "$past", $P3718
    find_lex $P3719, "$/"
    unless_null $P3719, vivify_3315
    $P3719 = root_new ['parrot';'Hash']
  vivify_3315:
    set $P123, $P3719["pblock"]
    unless_null $P123, vivify_3316
    new $P123, "Undef"
  vivify_3316:
    $P124 = $P123."ast"()
    set $P3718, $P124
.annotate 'line', 2679
    new $P123, "Float"
    assign $P123, 1
    set $P3720, $P3718
    unless_null $P3720, vivify_3317
    $P3720 = root_new ['parrot';'Hash']
    set $P3718, $P3720
  vivify_3317:
    set $P3720["bareblock"], $P123
.annotate 'line', 2680
    find_dynamic_lex $P123, "$/"
    set $P124, $P3718
    unless_null $P124, vivify_3318
    new $P124, "Undef"
  vivify_3318:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2677
    .return ($P125)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<sigil>" :anon :subid("509_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3727
    .param pmc param_3728
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2690
    .lex "self", param_3727
    .lex "$/", param_3728
.annotate 'line', 2691
    new $P118, "Undef"
    set $P3729, $P118
    .lex "$name", $P3729
    set $P3731, param_3728
    unless_null $P3731, vivify_3319
    $P3731 = root_new ['parrot';'Hash']
  vivify_3319:
    set $P121, $P3731["sigil"]
    unless_null $P121, vivify_3320
    new $P121, "Undef"
  vivify_3320:
    set $S100, $P121
    iseq $I100, $S100, "@"
    if $I100, if_3730
.annotate 'line', 2692
    set $P3733, param_3728
    unless_null $P3733, vivify_3321
    $P3733 = root_new ['parrot';'Hash']
  vivify_3321:
    set $P125, $P3733["sigil"]
    unless_null $P125, vivify_3322
    new $P125, "Undef"
  vivify_3322:
    set $S101, $P125
    iseq $I101, $S101, "%"
    if $I101, if_3732
    new $P127, "String"
    assign $P127, "item"
    set $P124, $P127
    goto if_3732_end
  if_3732:
    new $P126, "String"
    assign $P126, "hash"
    set $P124, $P126
  if_3732_end:
    set $P120, $P124
.annotate 'line', 2691
    goto if_3730_end
  if_3730:
    new $P123, "String"
    assign $P123, "list"
    set $P120, $P123
  if_3730_end:
    set $P3729, $P120
.annotate 'line', 2694
    set $P120, param_3728
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Op"]
    set $P126, $P3729
    unless_null $P126, vivify_3323
    new $P126, "Undef"
  vivify_3323:
    set $P3734, param_3728
    unless_null $P3734, vivify_3324
    $P3734 = root_new ['parrot';'Hash']
  vivify_3324:
    set $P127, $P3734["semilist"]
    unless_null $P127, vivify_3325
    new $P127, "Undef"
  vivify_3325:
    $P128 = $P127."ast"()
    $P129 = $P125."new"($P128, "callmethod" :named("pasttype"), $P126 :named("name"))
    $P131 = $P120."!make"($P129)
.annotate 'line', 2690
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "semilist" :anon :subid("510_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3736
    .param pmc param_3737
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2697
    .lex "self", param_3736
    .lex "$/", param_3737
    set $P118, param_3737
    set $P3738, param_3737
    unless_null $P3738, vivify_3326
    $P3738 = root_new ['parrot';'Hash']
  vivify_3326:
    set $P120, $P3738["statement"]
    unless_null $P120, vivify_3327
    new $P120, "Undef"
  vivify_3327:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<[ ]>" :anon :subid("511_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3740
    .param pmc param_3741
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2699
    .lex "self", param_3740
    .lex "$/", param_3741
.annotate 'line', 2700
    set $P118, param_3741
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3742, param_3741
    unless_null $P3742, vivify_3328
    $P3742 = root_new ['parrot';'Hash']
  vivify_3328:
    set $P125, $P3742["EXPR"]
    unless_null $P125, vivify_3329
    new $P125, "Undef"
  vivify_3329:
    $P126 = $P125."ast"()
.annotate 'line', 2702
    $P127 = "vivitype"("@")
.annotate 'line', 2700
    $P128 = $P124."new"($P126, "keyed_int" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2699
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<{ }>" :anon :subid("512_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3744
    .param pmc param_3745
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2705
    .lex "self", param_3744
    .lex "$/", param_3745
.annotate 'line', 2706
    set $P118, param_3745
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3746, param_3745
    unless_null $P3746, vivify_3330
    $P3746 = root_new ['parrot';'Hash']
  vivify_3330:
    set $P125, $P3746["EXPR"]
    unless_null $P125, vivify_3331
    new $P125, "Undef"
  vivify_3331:
    $P126 = $P125."ast"()
.annotate 'line', 2708
    $P127 = "vivitype"("%")
.annotate 'line', 2706
    $P128 = $P124."new"($P126, "keyed" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2705
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<ang>" :anon :subid("513_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3748
    .param pmc param_3749
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2711
    .lex "self", param_3748
    .lex "$/", param_3749
.annotate 'line', 2712
    set $P118, param_3749
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Var"]
    set $P3750, param_3749
    unless_null $P3750, vivify_3332
    $P3750 = root_new ['parrot';'Hash']
  vivify_3332:
    set $P125, $P3750["quote_EXPR"]
    unless_null $P125, vivify_3333
    new $P125, "Undef"
  vivify_3333:
    $P126 = $P125."ast"()
.annotate 'line', 2714
    $P127 = "vivitype"("%")
.annotate 'line', 2712
    $P128 = $P124."new"($P126, "keyed" :named("scope"), "Undef" :named("viviself"), $P127 :named("vivibase"))
    $P129 = $P118."!make"($P128)
.annotate 'line', 2711
    .return ($P129)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<( )>" :anon :subid("514_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3752
    .param pmc param_3753
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2717
    .lex "self", param_3752
    .lex "$/", param_3753
.annotate 'line', 2718
    set $P118, param_3753
    set $P3754, param_3753
    unless_null $P3754, vivify_3334
    $P3754 = root_new ['parrot';'Hash']
  vivify_3334:
    set $P120, $P3754["arglist"]
    unless_null $P120, vivify_3335
    new $P120, "Undef"
  vivify_3335:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
.annotate 'line', 2717
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "value" :anon :subid("515_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3756
    .param pmc param_3757
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2721
    .lex "self", param_3756
    .lex "$/", param_3757
.annotate 'line', 2722
    set $P118, param_3757
    set $P3759, param_3757
    unless_null $P3759, vivify_3336
    $P3759 = root_new ['parrot';'Hash']
  vivify_3336:
    set $P121, $P3759["quote"]
    unless_null $P121, vivify_3337
    new $P121, "Undef"
  vivify_3337:
    if $P121, if_3758
    set $P3761, param_3757
    unless_null $P3761, vivify_3338
    $P3761 = root_new ['parrot';'Hash']
  vivify_3338:
    set $P125, $P3761["number"]
    unless_null $P125, vivify_3339
    new $P125, "Undef"
  vivify_3339:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3758_end
  if_3758:
    set $P3760, param_3757
    unless_null $P3760, vivify_3340
    $P3760 = root_new ['parrot';'Hash']
  vivify_3340:
    set $P123, $P3760["quote"]
    unless_null $P123, vivify_3341
    new $P123, "Undef"
  vivify_3341:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3758_end:
    $P127 = $P118."!make"($P120)
.annotate 'line', 2721
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "number" :anon :subid("516_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3763
    .param pmc param_3764
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2725
    .lex "self", param_3763
    .lex "$/", param_3764
.annotate 'line', 2726
    new $P118, "Undef"
    set $P3765, $P118
    .lex "$value", $P3765
    set $P3767, param_3764
    unless_null $P3767, vivify_3342
    $P3767 = root_new ['parrot';'Hash']
  vivify_3342:
    set $P121, $P3767["dec_number"]
    unless_null $P121, vivify_3343
    new $P121, "Undef"
  vivify_3343:
    if $P121, if_3766
    set $P3769, param_3764
    unless_null $P3769, vivify_3344
    $P3769 = root_new ['parrot';'Hash']
  vivify_3344:
    set $P125, $P3769["integer"]
    unless_null $P125, vivify_3345
    new $P125, "Undef"
  vivify_3345:
    $P126 = $P125."ast"()
    set $P120, $P126
    goto if_3766_end
  if_3766:
    set $P3768, param_3764
    unless_null $P3768, vivify_3346
    $P3768 = root_new ['parrot';'Hash']
  vivify_3346:
    set $P123, $P3768["dec_number"]
    unless_null $P123, vivify_3347
    new $P123, "Undef"
  vivify_3347:
    $P124 = $P123."ast"()
    set $P120, $P124
  if_3766_end:
    set $P3765, $P120
.annotate 'line', 2727
    set $P3771, param_3764
    unless_null $P3771, vivify_3348
    $P3771 = root_new ['parrot';'Hash']
  vivify_3348:
    set $P120, $P3771["sign"]
    unless_null $P120, vivify_3349
    new $P120, "Undef"
  vivify_3349:
    set $S100, $P120
    iseq $I100, $S100, "-"
    unless $I100, if_3770_end
    set $P121, $P3765
    unless_null $P121, vivify_3350
    new $P121, "Undef"
  vivify_3350:
    neg $P123, $P121
    set $P3765, $P123
  if_3770_end:
.annotate 'line', 2728
    set $P120, param_3764
    get_hll_global $P121, "GLOBAL"
    nqp_get_package_through_who $P123, $P121, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Val"]
    set $P126, $P3765
    unless_null $P126, vivify_3351
    new $P126, "Undef"
  vivify_3351:
    $P127 = $P125."new"($P126 :named("value"))
    $P128 = $P120."!make"($P127)
.annotate 'line', 2725
    .return ($P128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<apos>" :anon :subid("517_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3773
    .param pmc param_3774
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2731
    .lex "self", param_3773
    .lex "$/", param_3774
    set $P118, param_3774
    set $P3775, param_3774
    unless_null $P3775, vivify_3352
    $P3775 = root_new ['parrot';'Hash']
  vivify_3352:
    set $P120, $P3775["quote_EXPR"]
    unless_null $P120, vivify_3353
    new $P120, "Undef"
  vivify_3353:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<dblq>" :anon :subid("518_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3777
    .param pmc param_3778
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2732
    .lex "self", param_3777
    .lex "$/", param_3778
    set $P118, param_3778
    set $P3779, param_3778
    unless_null $P3779, vivify_3354
    $P3779 = root_new ['parrot';'Hash']
  vivify_3354:
    set $P120, $P3779["quote_EXPR"]
    unless_null $P120, vivify_3355
    new $P120, "Undef"
  vivify_3355:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<qq>" :anon :subid("519_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3781
    .param pmc param_3782
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2733
    .lex "self", param_3781
    .lex "$/", param_3782
    set $P118, param_3782
    set $P3783, param_3782
    unless_null $P3783, vivify_3356
    $P3783 = root_new ['parrot';'Hash']
  vivify_3356:
    set $P120, $P3783["quote_EXPR"]
    unless_null $P120, vivify_3357
    new $P120, "Undef"
  vivify_3357:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<q>" :anon :subid("520_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3785
    .param pmc param_3786
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2734
    .lex "self", param_3785
    .lex "$/", param_3786
    set $P118, param_3786
    set $P3787, param_3786
    unless_null $P3787, vivify_3358
    $P3787 = root_new ['parrot';'Hash']
  vivify_3358:
    set $P120, $P3787["quote_EXPR"]
    unless_null $P120, vivify_3359
    new $P120, "Undef"
  vivify_3359:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q>" :anon :subid("521_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3789
    .param pmc param_3790
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2735
    .lex "self", param_3789
    .lex "$/", param_3790
    set $P118, param_3790
    set $P3791, param_3790
    unless_null $P3791, vivify_3360
    $P3791 = root_new ['parrot';'Hash']
  vivify_3360:
    set $P120, $P3791["quote_EXPR"]
    unless_null $P120, vivify_3361
    new $P120, "Undef"
  vivify_3361:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q:PIR>" :anon :subid("522_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3793
    .param pmc param_3794
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2736
    .lex "self", param_3793
    .lex "$/", param_3794
.annotate 'line', 2737
    set $P118, param_3794
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P3795, param_3794
    unless_null $P3795, vivify_3362
    $P3795 = root_new ['parrot';'Hash']
  vivify_3362:
    set $P125, $P3795["quote_EXPR"]
    unless_null $P125, vivify_3363
    new $P125, "Undef"
  vivify_3363:
    $P126 = $P125."ast"()
    $P127 = $P126."value"()
    set $P128, param_3794
    unless_null $P128, vivify_3364
    new $P128, "Undef"
  vivify_3364:
    $P129 = $P124."new"($P127 :named("inline"), "inline" :named("pasttype"), $P128 :named("node"))
    $P131 = $P118."!make"($P129)
.annotate 'line', 2736
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "quote:sym</ />" :anon :subid("523_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3799
    .param pmc param_3800
    .param pmc param_3801 :optional
    .param int has_param_3801 :opt_flag
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2742
    new $P3798, 'ExceptionHandler', [.CONTROL_RETURN]
    set_label $P3798, control_3797
    push_eh $P3798
    .lex "self", param_3799
    .lex "$/", param_3800
    if has_param_3801, optparam_3365
    new $P118, "Undef"
    set param_3801, $P118
  optparam_3365:
    .lex "$key", param_3801
.annotate 'line', 2749
    new $P120, "Undef"
    set $P3802, $P120
    .lex "$regex", $P3802
.annotate 'line', 2751
    new $P121, "Undef"
    set $P3803, $P121
    .lex "$past", $P3803
.annotate 'line', 2743
    set $P123, param_3801
    unless_null $P123, vivify_3366
    new $P123, "Undef"
  vivify_3366:
    set $S100, $P123
    iseq $I100, $S100, "open"
    unless $I100, if_3804_end
.annotate 'line', 2744
    null $P124
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "Regex"
    nqp_get_package_through_who $P127, $P126, "P6Regex"
    nqp_get_package_through_who $P128, $P127, "Actions"
    get_who $P129, $P128
    set $P129["$REGEXNAME"], $P124
.annotate 'line', 2745
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_3367
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_3368
    die "Contextual $*W not found"
  vivify_3368:
  vivify_3367:
    $P127 = $P126."cur_lexpad"()
    $P127."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2746
    find_dynamic_lex $P126, "$*W"
    unless_null $P126, vivify_3369
    get_hll_global $P124, "GLOBAL"
    get_who $P125, $P124
    set $P126, $P125["$W"]
    unless_null $P126, vivify_3370
    die "Contextual $*W not found"
  vivify_3370:
  vivify_3369:
    $P127 = $P126."cur_lexpad"()
    $P127."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2747
    new $P124, "Exception"
    set $P124['type'], .CONTROL_RETURN
    new $P125, "Float"
    assign $P125, 0
    setattribute $P124, 'payload', $P125
    throw $P124
  if_3804_end:
.annotate 'line', 2750
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "Regex"
    nqp_get_package_through_who $P125, $P124, "P6Regex"
    nqp_get_package_through_who $P126, $P125, "Actions"
    get_who $P127, $P126
    set $P128, $P127["buildsub"]
    set $P3805, param_3800
    unless_null $P3805, vivify_3371
    $P3805 = root_new ['parrot';'Hash']
  vivify_3371:
    set $P129, $P3805["p6regex"]
    unless_null $P129, vivify_3372
    new $P129, "Undef"
  vivify_3372:
    $P131 = $P129."ast"()
    find_dynamic_lex $P134, "$*W"
    unless_null $P134, vivify_3373
    get_hll_global $P132, "GLOBAL"
    get_who $P133, $P132
    set $P134, $P133["$W"]
    unless_null $P134, vivify_3374
    die "Contextual $*W not found"
  vivify_3374:
  vivify_3373:
    $P135 = $P134."pop_lexpad"()
    $P136 = $P128($P131, $P135)
    set $P3802, $P136
.annotate 'line', 2752
    get_hll_global $P123, "GLOBAL"
    nqp_get_package_through_who $P124, $P123, "PAST"
    get_who $P125, $P124
    set $P126, $P125["Op"]
.annotate 'line', 2754
    new $P127, "ResizablePMCArray"
    push $P127, "Regex"
    push $P127, "Regex"
    set $P128, param_3800
    unless_null $P128, vivify_3375
    new $P128, "Undef"
  vivify_3375:
    $P129 = "lexical_package_lookup"($P127, $P128)
    set $P131, $P3802
    unless_null $P131, vivify_3376
    new $P131, "Undef"
  vivify_3376:
    $P132 = $P126."new"($P129, $P131, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2752
    set $P3803, $P132
.annotate 'line', 2758
    set $P123, $P3802
    unless_null $P123, vivify_3377
    new $P123, "Undef"
  vivify_3377:
    set $P3806, $P3803
    unless_null $P3806, vivify_3378
    $P3806 = root_new ['parrot';'Hash']
    set $P3803, $P3806
  vivify_3378:
    set $P3806["sink"], $P123
.annotate 'line', 2759
    set $P123, param_3800
    set $P124, $P3803
    unless_null $P124, vivify_3379
    new $P124, "Undef"
  vivify_3379:
    $P125 = $P123."!make"($P124)
.annotate 'line', 2742
    .return ($P125)
  control_3797:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P123, exception, "payload"
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<$>" :anon :subid("524_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3808
    .param pmc param_3809
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2762
    .lex "self", param_3808
    .lex "$/", param_3809
    set $P118, param_3809
    set $P3810, param_3809
    unless_null $P3810, vivify_3380
    $P3810 = root_new ['parrot';'Hash']
  vivify_3380:
    set $P120, $P3810["variable"]
    unless_null $P120, vivify_3381
    new $P120, "Undef"
  vivify_3381:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<{ }>" :anon :subid("525_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3812
    .param pmc param_3813
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2763
    .lex "self", param_3812
    .lex "$/", param_3813
.annotate 'line', 2764
    set $P118, param_3813
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2765
    set $P3814, param_3813
    unless_null $P3814, vivify_3382
    $P3814 = root_new ['parrot';'Hash']
  vivify_3382:
    set $P125, $P3814["block"]
    unless_null $P125, vivify_3383
    new $P125, "Undef"
  vivify_3383:
    $P126 = $P125."ast"()
    $P127 = "block_immediate"($P126)
    set $P128, param_3813
    unless_null $P128, vivify_3384
    new $P128, "Undef"
  vivify_3384:
    $P129 = $P124."new"($P127, "set S*" :named("pirop"), $P128 :named("node"))
.annotate 'line', 2764
    $P131 = $P118."!make"($P129)
.annotate 'line', 2763
    .return ($P131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<esc>" :anon :subid("526_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3816
    .param pmc param_3817
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2768
    .lex "self", param_3816
    .lex "$/", param_3817
    set $P118, param_3817
    $P120 = $P118."!make"("\e")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<.>" :anon :subid("527_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3819
    .param pmc param_3820
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2772
    .lex "self", param_3819
    .lex "$/", param_3820
    set $P118, param_3820
    set $P3821, param_3820
    unless_null $P3821, vivify_3385
    $P3821 = root_new ['parrot';'Hash']
  vivify_3385:
    set $P120, $P3821["dotty"]
    unless_null $P120, vivify_3386
    new $P120, "Undef"
  vivify_3386:
    $P121 = $P120."ast"()
    $P123 = $P118."!make"($P121)
    .return ($P123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<++>" :anon :subid("528_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3823
    .param pmc param_3824
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2774
    .lex "self", param_3823
    .lex "$/", param_3824
.annotate 'line', 2775
    set $P118, param_3824
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2776
    new $P125, "ResizablePMCArray"
    push $P125, "    clone %r, %0"
    push $P125, "    inc %0"
.annotate 'line', 2775
    $P126 = $P124."new"("postfix:<++>" :named("name"), $P125 :named("inline"), "inline" :named("pasttype"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2774
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<-->" :anon :subid("529_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3826
    .param pmc param_3827
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2780
    .lex "self", param_3826
    .lex "$/", param_3827
.annotate 'line', 2781
    set $P118, param_3827
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2782
    new $P125, "ResizablePMCArray"
    push $P125, "    clone %r, %0"
    push $P125, "    dec %0"
.annotate 'line', 2781
    $P126 = $P124."new"("postfix:<-->" :named("name"), $P125 :named("inline"), "inline" :named("pasttype"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2780
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "prefix:sym<make>" :anon :subid("530_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3829
    .param pmc param_3830
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2786
    .lex "self", param_3829
    .lex "$/", param_3830
.annotate 'line', 2787
    set $P118, param_3830
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
.annotate 'line', 2788
    get_hll_global $P125, "GLOBAL"
    nqp_get_package_through_who $P126, $P125, "PAST"
    get_who $P127, $P126
    set $P128, $P127["Var"]
    $P129 = $P128."new"("$/" :named("name"), "contextual" :named("scope"))
    set $P131, param_3830
    unless_null $P131, vivify_3387
    new $P131, "Undef"
  vivify_3387:
    $P132 = $P124."new"($P129, "callmethod" :named("pasttype"), "!make" :named("name"), $P131 :named("node"))
.annotate 'line', 2787
    $P133 = $P118."!make"($P132)
.annotate 'line', 2786
    .return ($P133)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<next>" :anon :subid("531_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3832
    .param pmc param_3833
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2804
    .lex "self", param_3832
    .lex "$/", param_3833
    set $P118, param_3833
    unless_null $P118, vivify_3388
    new $P118, "Undef"
  vivify_3388:
    $P120 = "control"($P118, "CONTROL_LOOP_NEXT")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<last>" :anon :subid("532_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3835
    .param pmc param_3836
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2805
    .lex "self", param_3835
    .lex "$/", param_3836
    set $P118, param_3836
    unless_null $P118, vivify_3389
    new $P118, "Undef"
  vivify_3389:
    $P120 = "control"($P118, "CONTROL_LOOP_LAST")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<redo>" :anon :subid("533_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3838
    .param pmc param_3839
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2806
    .lex "self", param_3838
    .lex "$/", param_3839
    set $P118, param_3839
    unless_null $P118, vivify_3390
    new $P118, "Undef"
  vivify_3390:
    $P120 = "control"($P118, "CONTROL_LOOP_REDO")
    .return ($P120)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "infix:sym<~~>" :anon :subid("534_1335114138.94729") :outer("591_1335114138.94729")
    .param pmc param_3841
    .param pmc param_3842
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2808
    .lex "self", param_3841
    .lex "$/", param_3842
.annotate 'line', 2809
    set $P118, param_3842
    get_hll_global $P120, "GLOBAL"
    nqp_get_package_through_who $P121, $P120, "PAST"
    get_who $P123, $P121
    set $P124, $P123["Op"]
    set $P125, param_3842
    unless_null $P125, vivify_3391
    new $P125, "Undef"
  vivify_3391:
    $P126 = $P124."new"("callmethod" :named("pasttype"), "ACCEPTS" :named("name"), $P125 :named("node"))
    $P127 = $P118."!make"($P126)
.annotate 'line', 2808
    .return ($P127)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block3843"  :subid("652_1335114138.94729") :outer("542_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2862
    .const 'Sub' $P3873 = "541_1335114138.94729" 
    capture_lex $P3873
    .const 'Sub' $P3869 = "540_1335114138.94729" 
    capture_lex $P3869
    .const 'Sub' $P3864 = "539_1335114138.94729" 
    capture_lex $P3864
    .const 'Sub' $P3860 = "538_1335114138.94729" 
    capture_lex $P3860
    .const 'Sub' $P3856 = "537_1335114138.94729" 
    capture_lex $P3856
    .const 'Sub' $P3852 = "536_1335114138.94729" 
    capture_lex $P3852
    .const 'Sub' $P3847 = "535_1335114138.94729" 
    capture_lex $P3847
    .lex "$?PACKAGE", $P3845
    .lex "$?CLASS", $P3846
.annotate 'line', 2896
    .const 'Sub' $P3873 = "541_1335114138.94729" 
    newclosure $P3879, $P3873
.annotate 'line', 2862
    .return ($P3879)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<:my>" :anon :subid("535_1335114138.94729") :outer("652_1335114138.94729")
    .param pmc param_3848
    .param pmc param_3849
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2864
    .lex "self", param_3848
    .lex "$/", param_3849
.annotate 'line', 2865
    new $P103, "Undef"
    set $P3850, $P103
    .lex "$past", $P3850
    set $P3851, param_3849
    unless_null $P3851, vivify_3392
    $P3851 = root_new ['parrot';'Hash']
  vivify_3392:
    set $P104, $P3851["statement"]
    unless_null $P104, vivify_3393
    new $P104, "Undef"
  vivify_3393:
    $P105 = $P104."ast"()
    set $P3850, $P105
.annotate 'line', 2866
    set $P104, param_3849
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Regex"]
    set $P109, $P3850
    unless_null $P109, vivify_3394
    new $P109, "Undef"
  vivify_3394:
    set $P110, param_3849
    unless_null $P110, vivify_3395
    new $P110, "Undef"
  vivify_3395:
    $P111 = $P108."new"($P109, "pastnode" :named("pasttype"), "declarative" :named("subtype"), $P110 :named("node"))
    $P112 = $P104."!make"($P111)
.annotate 'line', 2864
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<{ }>" :anon :subid("536_1335114138.94729") :outer("652_1335114138.94729")
    .param pmc param_3853
    .param pmc param_3854
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2870
    .lex "self", param_3853
    .lex "$/", param_3854
.annotate 'line', 2871
    set $P103, param_3854
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3855, param_3854
    unless_null $P3855, vivify_3396
    $P3855 = root_new ['parrot';'Hash']
  vivify_3396:
    set $P108, $P3855["codeblock"]
    unless_null $P108, vivify_3397
    new $P108, "Undef"
  vivify_3397:
    $P109 = $P108."ast"()
    set $P110, param_3854
    unless_null $P110, vivify_3398
    new $P110, "Undef"
  vivify_3398:
    $P111 = $P107."new"($P109, "pastnode" :named("pasttype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2870
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<nqpvar>" :anon :subid("537_1335114138.94729") :outer("652_1335114138.94729")
    .param pmc param_3857
    .param pmc param_3858
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2875
    .lex "self", param_3857
    .lex "$/", param_3858
.annotate 'line', 2876
    set $P103, param_3858
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3859, param_3858
    unless_null $P3859, vivify_3399
    $P3859 = root_new ['parrot';'Hash']
  vivify_3399:
    set $P108, $P3859["var"]
    unless_null $P108, vivify_3400
    new $P108, "Undef"
  vivify_3400:
    $P109 = $P108."ast"()
    set $P110, param_3858
    unless_null $P110, vivify_3401
    new $P110, "Undef"
  vivify_3401:
    $P111 = $P107."new"("!INTERPOLATE", $P109, "subrule" :named("pasttype"), "method" :named("subtype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2875
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<{ }>" :anon :subid("538_1335114138.94729") :outer("652_1335114138.94729")
    .param pmc param_3861
    .param pmc param_3862
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2880
    .lex "self", param_3861
    .lex "$/", param_3862
.annotate 'line', 2881
    set $P103, param_3862
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3863, param_3862
    unless_null $P3863, vivify_3402
    $P3863 = root_new ['parrot';'Hash']
  vivify_3402:
    set $P108, $P3863["codeblock"]
    unless_null $P108, vivify_3403
    new $P108, "Undef"
  vivify_3403:
    $P109 = $P108."ast"()
    set $P110, param_3862
    unless_null $P110, vivify_3404
    new $P110, "Undef"
  vivify_3404:
    $P111 = $P107."new"("!INTERPOLATE_REGEX", $P109, "subrule" :named("pasttype"), "method" :named("subtype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2880
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<?{ }>" :anon :subid("539_1335114138.94729") :outer("652_1335114138.94729")
    .param pmc param_3865
    .param pmc param_3866
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2885
    .lex "self", param_3865
    .lex "$/", param_3866
.annotate 'line', 2886
    set $P103, param_3866
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3867, param_3866
    unless_null $P3867, vivify_3405
    $P3867 = root_new ['parrot';'Hash']
  vivify_3405:
    set $P108, $P3867["codeblock"]
    unless_null $P108, vivify_3406
    new $P108, "Undef"
  vivify_3406:
    $P109 = $P108."ast"()
.annotate 'line', 2887
    set $P3868, param_3866
    unless_null $P3868, vivify_3407
    $P3868 = root_new ['parrot';'Hash']
  vivify_3407:
    set $P110, $P3868["zw"]
    unless_null $P110, vivify_3408
    new $P110, "Undef"
  vivify_3408:
    set $S100, $P110
    iseq $I100, $S100, "!"
.annotate 'line', 2886
    set $P111, param_3866
    unless_null $P111, vivify_3409
    new $P111, "Undef"
  vivify_3409:
    $P112 = $P107."new"($P109, "zerowidth" :named("subtype"), $I100 :named("negate"), "pastnode" :named("pasttype"), $P111 :named("node"))
    $P113 = $P103."!make"($P112)
.annotate 'line', 2885
    .return ($P113)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<var>" :anon :subid("540_1335114138.94729") :outer("652_1335114138.94729")
    .param pmc param_3870
    .param pmc param_3871
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2891
    .lex "self", param_3870
    .lex "$/", param_3871
.annotate 'line', 2892
    set $P103, param_3871
    get_hll_global $P104, "GLOBAL"
    nqp_get_package_through_who $P105, $P104, "PAST"
    get_who $P106, $P105
    set $P107, $P106["Regex"]
    set $P3872, param_3871
    unless_null $P3872, vivify_3410
    $P3872 = root_new ['parrot';'Hash']
  vivify_3410:
    set $P108, $P3872["var"]
    unless_null $P108, vivify_3411
    new $P108, "Undef"
  vivify_3411:
    $P109 = $P108."ast"()
    set $P110, param_3871
    unless_null $P110, vivify_3412
    new $P110, "Undef"
  vivify_3412:
    $P111 = $P107."new"("!INTERPOLATE_REGEX", $P109, "subrule" :named("pasttype"), "method" :named("subtype"), $P110 :named("node"))
    $P112 = $P103."!make"($P111)
.annotate 'line', 2891
    .return ($P112)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "codeblock" :anon :subid("541_1335114138.94729") :outer("652_1335114138.94729")
    .param pmc param_3874
    .param pmc param_3875
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2896
    .lex "self", param_3874
    .lex "$/", param_3875
.annotate 'line', 2897
    new $P103, "Undef"
    set $P3876, $P103
    .lex "$block", $P3876
.annotate 'line', 2899
    new $P104, "Undef"
    set $P3877, $P104
    .lex "$past", $P3877
.annotate 'line', 2897
    set $P3878, param_3875
    unless_null $P3878, vivify_3413
    $P3878 = root_new ['parrot';'Hash']
  vivify_3413:
    set $P105, $P3878["block"]
    unless_null $P105, vivify_3414
    new $P105, "Undef"
  vivify_3414:
    $P106 = $P105."ast"()
    set $P3876, $P106
.annotate 'line', 2898
    set $P105, $P3876
    unless_null $P105, vivify_3415
    new $P105, "Undef"
  vivify_3415:
    $P105."blocktype"("immediate")
.annotate 'line', 2900
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Stmts"]
.annotate 'line', 2901
    get_hll_global $P109, "GLOBAL"
    nqp_get_package_through_who $P110, $P109, "PAST"
    get_who $P111, $P110
    set $P112, $P111["Op"]
.annotate 'line', 2902
    get_hll_global $P113, "GLOBAL"
    nqp_get_package_through_who $P114, $P113, "PAST"
    get_who $P115, $P114
    set $P116, $P115["Var"]
    $P117 = $P116."new"("$/" :named("name"))
.annotate 'line', 2903
    get_hll_global $P118, "GLOBAL"
    nqp_get_package_through_who $P119, $P118, "PAST"
    get_who $P120, $P119
    set $P121, $P120["Op"]
.annotate 'line', 2904
    get_hll_global $P122, "GLOBAL"
    nqp_get_package_through_who $P123, $P122, "PAST"
    get_who $P124, $P123
    set $P125, $P124["Var"]
    $P126 = $P125."new"(unicode:"$\x{a2}" :named("name"))
    $P127 = $P121."new"($P126, "MATCH" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2903
    $P128 = $P112."new"($P117, $P127, "bind_6model" :named("pasttype"))
.annotate 'line', 2901
    set $P129, $P3876
    unless_null $P129, vivify_3416
    new $P129, "Undef"
  vivify_3416:
    $P130 = $P108."new"($P128, $P129)
.annotate 'line', 2900
    set $P3877, $P130
.annotate 'line', 2912
    set $P105, param_3875
    set $P106, $P3877
    unless_null $P106, vivify_3417
    new $P106, "Undef"
  vivify_3417:
    $P107 = $P105."!make"($P106)
.annotate 'line', 2896
    .return ($P107)
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block3880"  :subid("653_1335114138.94729") :outer("542_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 2917
    .lex "$?PACKAGE", $P3882
    .lex "$?CLASS", $P3883
    .return ()
.end


.HLL "nqp"

.namespace []
.sub "_block3886" :load :anon :subid("654_1335114138.94729")
.annotate 'file', "src/stage2/gen/NQP.pm"
.annotate 'line', 1
    .const '' $P3888 = "542_1335114138.94729" 
    $P110 = $P3888()
    .return ($P110)
.end

