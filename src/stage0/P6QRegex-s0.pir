.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_177_1361537946.1303") :anon :lex
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5066 = 'cuid_176_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_179_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_180_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_196_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_235_1361537946.1303' 
    capture_lex $P5066 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "ParseShared", $P104 
    .lex "NQPCursorRole", $P105 
    .lex "$p6regex", $P106 
    .lex "&MAIN", $P107 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    .local pmc fb_tmp_345 
    .local pmc pkg_lookup_tmp_120 
    .local pmc pkg_lookup_tmp_119 
    .local pmc fb_tmp_346 
    .local pmc pkg_lookup_tmp_122 
    .local pmc pkg_lookup_tmp_121 
    .local pmc fb_tmp_347 
    .local pmc pkg_lookup_tmp_124 
    .local pmc pkg_lookup_tmp_123 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P106, $P5001
    .const 'Sub' $P5002 = 'cuid_176_1361537946.1303' 
    capture_lex $P5002
    set $P107, $P5002
    find_dynamic_lex $P5003, "$*CTXSAVE"
    set ctxsave, $P5003
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if11_end13 
    $P5004 = ctxsave."ctxsave"()
    set $P5005, $P5004
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5007 = 'cuid_179_1361537946.1303' 
    capture_lex $P5007
    $P5008 = $P5007()
    .const 'Sub' $P5009 = 'cuid_180_1361537946.1303' 
    capture_lex $P5009
    $P5010 = $P5009()
    .const 'Sub' $P5011 = 'cuid_196_1361537946.1303' 
    capture_lex $P5011
    $P5012 = $P5011()
    .const 'Sub' $P5013 = 'cuid_235_1361537946.1303' 
    capture_lex $P5013
    $P5014 = $P5013()
.annotate 'line', 1034
    nqp_get_sc_object $P5016, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_119, $P5016
    get_who $P5017, pkg_lookup_tmp_119
    exists $I5004, $P5017["QRegex"]
    unless $I5004 goto if1432_else3260 
    get_who $P5019, pkg_lookup_tmp_119
    set $P5018, $P5019["QRegex"]
    set $P5021, $P5018
    goto if1432_end3261
  if1432_else3260:
    nqp_get_sc_object $P5020, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5021, $P5020
  if1432_end3261:
    set pkg_lookup_tmp_120, $P5021
    get_who $P5022, pkg_lookup_tmp_120
    exists $I5005, $P5022["P6Regex"]
    unless $I5005 goto if1433_else3262 
    get_who $P5024, pkg_lookup_tmp_120
    set $P5023, $P5024["P6Regex"]
    set $P5026, $P5023
    goto if1433_end3263
  if1433_else3262:
    nqp_get_sc_object $P5025, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5025
  if1433_end3263:
    get_who $P5015, $P5026
    set fb_tmp_345, $P5015
    repr_defined $I5003, fb_tmp_345
    unless $I5003 goto if1431_else3258 
    set $P5027, fb_tmp_345["Compiler"]
    set $P5029, $P5027
    goto if1431_end3259
  if1431_else3258:
    null $P5028
    set $P5029, $P5028
  if1431_end3259:
    unless_null $P5029, vivi_14343264
    nqp_get_sc_object $P5030, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5029, $P5030
  vivi_14343264:
    $P5031 = $P5029."new"()
    set $P106, $P5031
.annotate 'line', 1035
    $P106."language"("QRegex::P6Regex")
.annotate 'line', 1036
    nqp_get_sc_object $P5033, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_121, $P5033
    get_who $P5034, pkg_lookup_tmp_121
    exists $I5007, $P5034["QRegex"]
    unless $I5007 goto if1436_else3267 
    get_who $P5036, pkg_lookup_tmp_121
    set $P5035, $P5036["QRegex"]
    set $P5038, $P5035
    goto if1436_end3268
  if1436_else3267:
    nqp_get_sc_object $P5037, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5038, $P5037
  if1436_end3268:
    set pkg_lookup_tmp_122, $P5038
    get_who $P5039, pkg_lookup_tmp_122
    exists $I5008, $P5039["P6Regex"]
    unless $I5008 goto if1437_else3269 
    get_who $P5041, pkg_lookup_tmp_122
    set $P5040, $P5041["P6Regex"]
    set $P5043, $P5040
    goto if1437_end3270
  if1437_else3269:
    nqp_get_sc_object $P5042, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5043, $P5042
  if1437_end3270:
    get_who $P5032, $P5043
    set fb_tmp_346, $P5032
    repr_defined $I5006, fb_tmp_346
    unless $I5006 goto if1435_else3265 
    set $P5044, fb_tmp_346["Grammar"]
    set $P5046, $P5044
    goto if1435_end3266
  if1435_else3265:
    null $P5045
    set $P5046, $P5045
  if1435_end3266:
    unless_null $P5046, vivi_14383271
    nqp_get_sc_object $P5047, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5046, $P5047
  vivi_14383271:
    $P106."parsegrammar"($P5046)
.annotate 'line', 1037
    nqp_get_sc_object $P5049, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_123, $P5049
    get_who $P5050, pkg_lookup_tmp_123
    exists $I5010, $P5050["QRegex"]
    unless $I5010 goto if1440_else3274 
    get_who $P5052, pkg_lookup_tmp_123
    set $P5051, $P5052["QRegex"]
    set $P5054, $P5051
    goto if1440_end3275
  if1440_else3274:
    nqp_get_sc_object $P5053, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5054, $P5053
  if1440_end3275:
    set pkg_lookup_tmp_124, $P5054
    get_who $P5055, pkg_lookup_tmp_124
    exists $I5011, $P5055["P6Regex"]
    unless $I5011 goto if1441_else3276 
    get_who $P5057, pkg_lookup_tmp_124
    set $P5056, $P5057["P6Regex"]
    set $P5059, $P5056
    goto if1441_end3277
  if1441_else3276:
    nqp_get_sc_object $P5058, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5059, $P5058
  if1441_end3277:
    get_who $P5048, $P5059
    set fb_tmp_347, $P5048
    repr_defined $I5009, fb_tmp_347
    unless $I5009 goto if1439_else3272 
    set $P5060, fb_tmp_347["Actions"]
    set $P5062, $P5060
    goto if1439_end3273
  if1439_else3272:
    null $P5061
    set $P5062, $P5061
  if1439_end3273:
    unless_null $P5062, vivi_14423278
    nqp_get_sc_object $P5063, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5062, $P5063
  vivi_14423278:
    $P106."parseactions"($P5062)
    unless _lex_param_0 goto if1443_end3280 
    .const 'Sub' $P5064 = "cuid_176_1361537946.1303" 
    $P5065 = $P5064(_lex_param_0 :flat)
  if1443_end3280:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_176_1361537946.1303") :anon :lex :outer("cuid_177_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1039
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 1040
    find_lex $P5001, "$p6regex"
    $P5002 = $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ucs4" :named("transcode"))
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_179_1361537946.1303") :anon :lex :outer("cuid_177_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 9
    .const 'Sub' $P5002 = 'cuid_1_1361537946.1303' 
    capture_lex $P5002 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_1_1361537946.1303' 
    capture_lex $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_1_1361537946.1303") :anon :lex :outer("cuid_179_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 10
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5124 = 'cuid_178_1361537946.1303' 
    capture_lex $P5124 
    .lex "$dummy", $P101 
    .lex "$code_obj", $P102 
    .lex "$slot", $P103 
    .lex "$fixups", $P104 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .local pmc fb_tmp_1 
    .local pmc pkg_lookup_tmp_1 
    .local pmc fb_tmp_2 
    .local pmc pkg_lookup_tmp_2 
    .local pmc fb_tmp_3 
    .local pmc pkg_lookup_tmp_3 
    .local pmc fb_tmp_4 
    .local pmc pkg_lookup_tmp_4 
    .local pmc fb_tmp_5 
    .local pmc pkg_lookup_tmp_5 
    .local pmc fb_tmp_6 
    .local pmc pkg_lookup_tmp_6 
    .local pmc fb_tmp_7 
    .local pmc pkg_lookup_tmp_7 
    .local pmc fb_tmp_8 
    .local pmc pkg_lookup_tmp_8 
    .local pmc fb_tmp_9 
    .local pmc pkg_lookup_tmp_9 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P104, $P5004
    .const 'Sub' $P5007 = 'cuid_178_1361537946.1303' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    nqp_fresh_stub $P5005, $P5006
    set $P101, $P5005
    set $S5001, _lex_param_2
    assign $P101, $S5001
    setprop $P101, "STATIC_CODE_REF", $P101
.annotate 'line', 17
    nqp_decontainerize $P5008, _lex_param_0
    $P5008."add_root_code_ref"($P101, _lex_param_1)
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 9
    repr_instance_of $P5009, $P5010
    set $P102, $P5009
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 9
    setattribute $P102, $P5011, "$!do", $P101
.annotate 'line', 22
    nqp_decontainerize $P5012, _lex_param_0
    $P5013 = $P5012."add_object"($P102)
    set $P103, $P5013
.annotate 'line', 25
    nqp_get_sc_object $P5015, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_1, $P5015
    get_who $P5016, pkg_lookup_tmp_1
    exists $I5002, $P5016["QAST"]
    unless $I5002 goto if13_else16 
    get_who $P5018, pkg_lookup_tmp_1
    set $P5017, $P5018["QAST"]
    set $P5020, $P5017
    goto if13_end17
  if13_else16:
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5019
  if13_end17:
    get_who $P5014, $P5020
    set fb_tmp_1, $P5014
    repr_defined $I5001, fb_tmp_1
    unless $I5001 goto if12_else14 
    set $P5021, fb_tmp_1["Stmt"]
    set $P5023, $P5021
    goto if12_end15
  if12_else14:
    null $P5022
    set $P5023, $P5022
  if12_end15:
    unless_null $P5023, vivi_1418
    nqp_get_sc_object $P5024, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5023, $P5024
  vivi_1418:
    $P5025 = $P5023."new"()
    set $P104, $P5025
.annotate 'line', 26
    nqp_get_sc_object $P5027, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_2, $P5027
    get_who $P5028, pkg_lookup_tmp_2
    exists $I5004, $P5028["QAST"]
    unless $I5004 goto if16_else21 
    get_who $P5030, pkg_lookup_tmp_2
    set $P5029, $P5030["QAST"]
    set $P5032, $P5029
    goto if16_end22
  if16_else21:
    nqp_get_sc_object $P5031, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5031
  if16_end22:
    get_who $P5026, $P5032
    set fb_tmp_2, $P5026
    repr_defined $I5003, fb_tmp_2
    unless $I5003 goto if15_else19 
    set $P5033, fb_tmp_2["Op"]
    set $P5035, $P5033
    goto if15_end20
  if15_else19:
    null $P5034
    set $P5035, $P5034
  if15_end20:
    unless_null $P5035, vivi_1723
    nqp_get_sc_object $P5036, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5035, $P5036
  vivi_1723:
.annotate 'line', 28
    nqp_get_sc_object $P5038, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_3, $P5038
    get_who $P5039, pkg_lookup_tmp_3
    exists $I5006, $P5039["QAST"]
    unless $I5006 goto if19_else26 
    get_who $P5041, pkg_lookup_tmp_3
    set $P5040, $P5041["QAST"]
    set $P5043, $P5040
    goto if19_end27
  if19_else26:
    nqp_get_sc_object $P5042, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5043, $P5042
  if19_end27:
    get_who $P5037, $P5043
    set fb_tmp_3, $P5037
    repr_defined $I5005, fb_tmp_3
    unless $I5005 goto if18_else24 
    set $P5044, fb_tmp_3["WVal"]
    set $P5046, $P5044
    goto if18_end25
  if18_else24:
    null $P5045
    set $P5046, $P5045
  if18_end25:
    unless_null $P5046, vivi_2028
    nqp_get_sc_object $P5047, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5046, $P5047
  vivi_2028:
    $P5048 = $P5046."new"($P102 :named("value"))
.annotate 'line', 29
    nqp_get_sc_object $P5050, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_4, $P5050
    get_who $P5051, pkg_lookup_tmp_4
    exists $I5008, $P5051["QAST"]
    unless $I5008 goto if22_else31 
    get_who $P5053, pkg_lookup_tmp_4
    set $P5052, $P5053["QAST"]
    set $P5055, $P5052
    goto if22_end32
  if22_else31:
    nqp_get_sc_object $P5054, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5055, $P5054
  if22_end32:
    get_who $P5049, $P5055
    set fb_tmp_4, $P5049
    repr_defined $I5007, fb_tmp_4
    unless $I5007 goto if21_else29 
    set $P5056, fb_tmp_4["WVal"]
    set $P5058, $P5056
    goto if21_end30
  if21_else29:
    null $P5057
    set $P5058, $P5057
  if21_end30:
    unless_null $P5058, vivi_2333
    nqp_get_sc_object $P5059, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5058, $P5059
  vivi_2333:
    nqp_get_sc_object $P5060, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 9
    $P5061 = $P5058."new"($P5060 :named("value"))
.annotate 'line', 30
    nqp_get_sc_object $P5063, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_5, $P5063
    get_who $P5064, pkg_lookup_tmp_5
    exists $I5010, $P5064["QAST"]
    unless $I5010 goto if25_else36 
    get_who $P5066, pkg_lookup_tmp_5
    set $P5065, $P5066["QAST"]
    set $P5068, $P5065
    goto if25_end37
  if25_else36:
    nqp_get_sc_object $P5067, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5068, $P5067
  if25_end37:
    get_who $P5062, $P5068
    set fb_tmp_5, $P5062
    repr_defined $I5009, fb_tmp_5
    unless $I5009 goto if24_else34 
    set $P5069, fb_tmp_5["SVal"]
    set $P5071, $P5069
    goto if24_end35
  if24_else34:
    null $P5070
    set $P5071, $P5070
  if24_end35:
    unless_null $P5071, vivi_2638
    nqp_get_sc_object $P5072, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5071, $P5072
  vivi_2638:
    $P5073 = $P5071."new"("$!do" :named("value"))
.annotate 'line', 31
    nqp_get_sc_object $P5075, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_6, $P5075
    get_who $P5076, pkg_lookup_tmp_6
    exists $I5012, $P5076["QAST"]
    unless $I5012 goto if28_else41 
    get_who $P5078, pkg_lookup_tmp_6
    set $P5077, $P5078["QAST"]
    set $P5080, $P5077
    goto if28_end42
  if28_else41:
    nqp_get_sc_object $P5079, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5080, $P5079
  if28_end42:
    get_who $P5074, $P5080
    set fb_tmp_6, $P5074
    repr_defined $I5011, fb_tmp_6
    unless $I5011 goto if27_else39 
    set $P5081, fb_tmp_6["BVal"]
    set $P5083, $P5081
    goto if27_end40
  if27_else39:
    null $P5082
    set $P5083, $P5082
  if27_end40:
    unless_null $P5083, vivi_2943
    nqp_get_sc_object $P5084, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5083, $P5084
  vivi_2943:
    $P5085 = $P5083."new"(_lex_param_1 :named("value"))
    $P5086 = $P5035."new"($P5048, $P5061, $P5073, $P5085, "bindattr" :named("op"))
    $P104."push"($P5086)
.annotate 'line', 33
    nqp_get_sc_object $P5088, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_7, $P5088
    get_who $P5089, pkg_lookup_tmp_7
    exists $I5014, $P5089["QAST"]
    unless $I5014 goto if31_else46 
    get_who $P5091, pkg_lookup_tmp_7
    set $P5090, $P5091["QAST"]
    set $P5093, $P5090
    goto if31_end47
  if31_else46:
    nqp_get_sc_object $P5092, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5093, $P5092
  if31_end47:
    get_who $P5087, $P5093
    set fb_tmp_7, $P5087
    repr_defined $I5013, fb_tmp_7
    unless $I5013 goto if30_else44 
    set $P5094, fb_tmp_7["Op"]
    set $P5096, $P5094
    goto if30_end45
  if30_else44:
    null $P5095
    set $P5096, $P5095
  if30_end45:
    unless_null $P5096, vivi_3248
    nqp_get_sc_object $P5097, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5096, $P5097
  vivi_3248:
.annotate 'line', 35
    nqp_get_sc_object $P5099, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_8, $P5099
    get_who $P5100, pkg_lookup_tmp_8
    exists $I5016, $P5100["QAST"]
    unless $I5016 goto if34_else51 
    get_who $P5102, pkg_lookup_tmp_8
    set $P5101, $P5102["QAST"]
    set $P5104, $P5101
    goto if34_end52
  if34_else51:
    nqp_get_sc_object $P5103, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5104, $P5103
  if34_end52:
    get_who $P5098, $P5104
    set fb_tmp_8, $P5098
    repr_defined $I5015, fb_tmp_8
    unless $I5015 goto if33_else49 
    set $P5105, fb_tmp_8["BVal"]
    set $P5107, $P5105
    goto if33_end50
  if33_else49:
    null $P5106
    set $P5107, $P5106
  if33_end50:
    unless_null $P5107, vivi_3553
    nqp_get_sc_object $P5108, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5107, $P5108
  vivi_3553:
    $P5109 = $P5107."new"(_lex_param_1 :named("value"))
.annotate 'line', 36
    nqp_get_sc_object $P5111, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_9, $P5111
    get_who $P5112, pkg_lookup_tmp_9
    exists $I5018, $P5112["QAST"]
    unless $I5018 goto if37_else56 
    get_who $P5114, pkg_lookup_tmp_9
    set $P5113, $P5114["QAST"]
    set $P5116, $P5113
    goto if37_end57
  if37_else56:
    nqp_get_sc_object $P5115, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5116, $P5115
  if37_end57:
    get_who $P5110, $P5116
    set fb_tmp_9, $P5110
    repr_defined $I5017, fb_tmp_9
    unless $I5017 goto if36_else54 
    set $P5117, fb_tmp_9["WVal"]
    set $P5119, $P5117
    goto if36_end55
  if36_else54:
    null $P5118
    set $P5119, $P5118
  if36_end55:
    unless_null $P5119, vivi_3858
    nqp_get_sc_object $P5120, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5119, $P5120
  vivi_3858:
    $P5121 = $P5119."new"($P102 :named("value"))
    $P5122 = $P5096."new"($P5109, $P5121, "setcodeobj" :named("op"))
    $P104."push"($P5122)
.annotate 'line', 38
    nqp_decontainerize $P5123, _lex_param_0
    $P5123."add_fixup_task"($P104 :named("fixup_past"))
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_178_1361537946.1303") :anon :lex :outer("cuid_1_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 12

    box $P5001, "Uncompiled code executed"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_180_1361537946.1303") :anon :lex :outer("cuid_177_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 44
    .const 'Sub' $P5086 = 'cuid_2_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_3_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_4_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_5_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_6_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_8_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_9_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_10_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_11_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_12_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_14_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_18_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_19_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_20_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_21_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_22_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_23_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_26_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_28_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_29_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_31_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_32_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_33_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_34_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_35_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_39_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_40_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_42_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_43_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_44_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_45_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_46_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_47_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_48_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_49_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_50_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_51_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_52_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_53_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_54_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_55_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_56_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_57_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_58_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_59_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_60_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_61_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_62_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_63_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_64_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_65_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_66_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_67_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_68_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_69_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_70_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_71_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_72_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_73_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_74_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_75_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_76_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_77_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_78_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_79_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_80_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_81_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_82_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_83_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_85_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_86_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_87_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_89_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_91_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_92_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_93_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_95_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_97_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_104_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_106_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_107_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_108_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_109_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_110_1361537946.1303' 
    capture_lex $P5086 
    .const 'Sub' $P5086 = 'cuid_111_1361537946.1303' 
    capture_lex $P5086 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_2_1361537946.1303' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_3_1361537946.1303' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_4_1361537946.1303' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_5_1361537946.1303' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_6_1361537946.1303' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_8_1361537946.1303' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_9_1361537946.1303' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_10_1361537946.1303' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_11_1361537946.1303' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_12_1361537946.1303' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_14_1361537946.1303' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_18_1361537946.1303' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_19_1361537946.1303' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_20_1361537946.1303' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_21_1361537946.1303' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_22_1361537946.1303' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_23_1361537946.1303' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_26_1361537946.1303' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_28_1361537946.1303' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_29_1361537946.1303' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_31_1361537946.1303' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_32_1361537946.1303' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_33_1361537946.1303' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_34_1361537946.1303' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_35_1361537946.1303' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_39_1361537946.1303' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_40_1361537946.1303' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_42_1361537946.1303' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_43_1361537946.1303' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_44_1361537946.1303' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_45_1361537946.1303' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_46_1361537946.1303' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_47_1361537946.1303' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_48_1361537946.1303' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_49_1361537946.1303' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_50_1361537946.1303' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_51_1361537946.1303' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_52_1361537946.1303' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_53_1361537946.1303' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_54_1361537946.1303' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_55_1361537946.1303' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_56_1361537946.1303' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_57_1361537946.1303' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_58_1361537946.1303' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_59_1361537946.1303' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_60_1361537946.1303' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_61_1361537946.1303' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_62_1361537946.1303' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_63_1361537946.1303' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_64_1361537946.1303' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_65_1361537946.1303' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_66_1361537946.1303' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_67_1361537946.1303' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_68_1361537946.1303' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_69_1361537946.1303' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_70_1361537946.1303' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_71_1361537946.1303' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_72_1361537946.1303' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_73_1361537946.1303' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_74_1361537946.1303' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_75_1361537946.1303' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_76_1361537946.1303' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_77_1361537946.1303' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_78_1361537946.1303' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_79_1361537946.1303' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_80_1361537946.1303' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_81_1361537946.1303' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_82_1361537946.1303' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_83_1361537946.1303' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_85_1361537946.1303' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_86_1361537946.1303' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_87_1361537946.1303' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_89_1361537946.1303' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_91_1361537946.1303' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_92_1361537946.1303' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_93_1361537946.1303' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_95_1361537946.1303' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_97_1361537946.1303' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_104_1361537946.1303' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_106_1361537946.1303' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_107_1361537946.1303' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_108_1361537946.1303' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_109_1361537946.1303' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_110_1361537946.1303' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_111_1361537946.1303' 
    capture_lex $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "obs" :subid("cuid_2_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :optional 
    .param int haz_param_1 :opt_flag 
    .lex "self", _lex_param_0 
    .lex "$old", _lex_param_1 
    .lex "$new", _lex_param_2 
    .lex "$when", _lex_param_3 
    if haz_param_1, default59
    box $P5003, " in Perl 6"
    set _lex_param_3, $P5003
  default59:
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    set $S5006, _lex_param_1
    concat $S5005, "Unsupported use of ", $S5006
    concat $S5004, $S5005, ";"
    set $S5007, _lex_param_3
    concat $S5003, $S5004, $S5007
    concat $S5002, $S5003, " please use "
    set $S5008, _lex_param_2
    concat $S5001, $S5002, $S5008
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_unrecognized_metachar" :subid("cuid_3_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 54
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$char", _lex_param_1 
.annotate 'line', 55
    nqp_decontainerize $P5001, _lex_param_0
    set $S5003, _lex_param_1
    concat $S5002, "Unrecognized regex metacharacter ", $S5003
    concat $S5001, $S5002, " (must be quoted to match literally)"
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_null_pattern" :subid("cuid_4_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 58
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 59
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."panic"("Null regex not allowed")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_5_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx39_start
    .local string rx39_tgt
    .local int rx39_pos
    .local int rx39_off
    .local int rx39_eos
    .local int rx39_rep
    .local pmc rx39_cur
    .local pmc rx39_curclass
    .local pmc rx39_bstack
    .local pmc rx39_cstack
    rx39_start = self."!cursor_start_all"()
    set rx39_cur, rx39_start[0]
    set rx39_tgt, rx39_start[1]
    set rx39_pos, rx39_start[2]
    set rx39_curclass, rx39_start[3]
    set rx39_bstack, rx39_start[4]
    set $I19, rx39_start[5]
    store_lex unicode:"$\x{a2}", rx39_cur
    length rx39_eos, rx39_tgt
    eq $I19, 1, rx39_restart62
    gt rx39_pos, rx39_eos, rx39_fail63
    repr_get_attr_int $I11, self, rx39_curclass, "$!from"
    ne $I11, -1, rxscan40_done69
    goto rxscan40_scan68
  rxscan40_loop67:
    inc rx39_pos
    gt rx39_pos, rx39_eos, rx39_fail63
    repr_bind_attr_int rx39_cur, rx39_curclass, "$!from", rx39_pos
  rxscan40_scan68:
    nqp_rxmark rx39_bstack, rxscan40_loop67, rx39_pos, 0
  rxscan40_done69:
    nqp_rxmark rx39_bstack, rxquantr41_done71, rx39_pos, 0
  rxquantr41_loop70:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt42_073
    nqp_push_label $P11, alt42_176
    nqp_rxmark rx39_bstack, alt42_end72, -1, 0
    rx39_cur."!alt"(rx39_pos, "alt_nfa__1_1361537946.3331", $P11)
    goto rx39_fail63
  alt42_073:
    nqp_rxmark rx39_bstack, rxquantr43_done75, -1, 0
  rxquantr43_loop74:
    ge rx39_pos, rx39_eos, rx39_fail63
    is_cclass $I11, .CCLASS_WHITESPACE, rx39_tgt, rx39_pos
    unless $I11, rx39_fail63
    add rx39_pos, 1
    nqp_rxpeek $I19, rx39_bstack, rxquantr43_done75
    inc $I19
    inc $I19
    set rx39_rep, rx39_bstack[$I19]
    nqp_rxcommit rx39_bstack, rxquantr43_done75
    inc rx39_rep
    nqp_rxmark rx39_bstack, rxquantr43_done75, rx39_pos, rx39_rep
    goto rxquantr43_loop74
  rxquantr43_done75:
    goto alt42_end72
  alt42_176:
    add $I11, rx39_pos, 1
    gt $I11, rx39_eos, rx39_fail63
    substr $S10, rx39_tgt, rx39_pos, 1
    ne $S10, ucs4:"#", rx39_fail63
    add rx39_pos, 1
    nqp_rxmark rx39_bstack, rxquantr44_done78, rx39_pos, 0
  rxquantr44_loop77:
    ge rx39_pos, rx39_eos, rx39_fail63
    is_cclass $I11, .CCLASS_NEWLINE, rx39_tgt, rx39_pos
    if $I11, rx39_fail63
    add rx39_pos, 1
    nqp_rxpeek $I19, rx39_bstack, rxquantr44_done78
    inc $I19
    inc $I19
    set rx39_rep, rx39_bstack[$I19]
    nqp_rxcommit rx39_bstack, rxquantr44_done78
    inc rx39_rep
    nqp_rxmark rx39_bstack, rxquantr44_done78, rx39_pos, rx39_rep
    goto rxquantr44_loop77
  rxquantr44_done78:
    goto alt42_end72
  alt42_end72:
    nqp_rxpeek $I19, rx39_bstack, rxquantr41_done71
    inc $I19
    inc $I19
    set rx39_rep, rx39_bstack[$I19]
    nqp_rxcommit rx39_bstack, rxquantr41_done71
    inc rx39_rep
    nqp_rxmark rx39_bstack, rxquantr41_done71, rx39_pos, rx39_rep
    goto rxquantr41_loop70
  rxquantr41_done71:
    rx39_cur."!cursor_pass"(rx39_pos, "ws", 'backtrack'=>1)
    .return (rx39_cur)
  rx39_restart62:
    repr_get_attr_obj rx39_cstack, rx39_cur, rx39_curclass, "$!cstack"
  rx39_fail63:
    unless rx39_bstack, rx39_done61
    pop $I19, rx39_bstack
    if_null rx39_cstack, rx39_cstack_done66
    unless rx39_cstack, rx39_cstack_done66
    dec $I19
    set $P11, rx39_cstack[$I19]
  rx39_cstack_done66:
    pop rx39_rep, rx39_bstack
    pop rx39_pos, rx39_bstack
    pop $I19, rx39_bstack
    lt rx39_pos, -1, rx39_done61
    lt rx39_pos, 0, rx39_fail63
    eq $I19, 0, rx39_fail63
    nqp_islist $I20, rx39_cstack
    unless $I20, rx39_jump64
    elements $I18, rx39_bstack
    le $I18, 0, rx39_cut65
    dec $I18
    set $I18, rx39_bstack[$I18]
  rx39_cut65:
    assign rx39_cstack, $I18
  rx39_jump64:
    jump $I19
  rx39_done61:
    rx39_cur."!cursor_fail"()
    .return (rx39_cur) 
.end
.HLL "nqp"
.namespace []
.sub "normspace" :subid("cuid_6_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 64
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_7_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx45_start
    .local string rx45_tgt
    .local int rx45_pos
    .local int rx45_off
    .local int rx45_eos
    .local int rx45_rep
    .local pmc rx45_cur
    .local pmc rx45_curclass
    .local pmc rx45_bstack
    .local pmc rx45_cstack
    rx45_start = self."!cursor_start_all"()
    set rx45_cur, rx45_start[0]
    set rx45_tgt, rx45_start[1]
    set rx45_pos, rx45_start[2]
    set rx45_curclass, rx45_start[3]
    set rx45_bstack, rx45_start[4]
    set $I19, rx45_start[5]
    store_lex unicode:"$\x{a2}", rx45_cur
    length rx45_eos, rx45_tgt
    eq $I19, 1, rx45_restart81
    gt rx45_pos, rx45_eos, rx45_fail82
    repr_get_attr_int $I11, self, rx45_curclass, "$!from"
    ne $I11, -1, rxscan46_done88
    goto rxscan46_scan87
  rxscan46_loop86:
    inc rx45_pos
    gt rx45_pos, rx45_eos, rx45_fail82
    repr_bind_attr_int rx45_cur, rx45_curclass, "$!from", rx45_pos
  rxscan46_scan87:
    nqp_rxmark rx45_bstack, rxscan46_loop86, rx45_pos, 0
  rxscan46_done88:
    .const 'Sub' $P5001 = 'cuid_7_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx45_cur, rx45_curclass, "$!pos", rx45_pos
    $P11 = rx45_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx45_curclass, "$!pos"
    lt $I11, 0, rx45_fail82
    repr_bind_attr_int rx45_cur, rx45_curclass, "$!pos", rx45_pos
    $P11 = rx45_cur."ws"()
    repr_get_attr_int $I11, $P11, rx45_curclass, "$!pos"
    lt $I11, 0, rx45_fail82
    repr_get_attr_int rx45_pos, $P11, rx45_curclass, "$!pos"
    rx45_cur."!cursor_pass"(rx45_pos, "normspace", 'backtrack'=>1)
    .return (rx45_cur)
  rx45_restart81:
    repr_get_attr_obj rx45_cstack, rx45_cur, rx45_curclass, "$!cstack"
  rx45_fail82:
    unless rx45_bstack, rx45_done80
    pop $I19, rx45_bstack
    if_null rx45_cstack, rx45_cstack_done85
    unless rx45_cstack, rx45_cstack_done85
    dec $I19
    set $P11, rx45_cstack[$I19]
  rx45_cstack_done85:
    pop rx45_rep, rx45_bstack
    pop rx45_pos, rx45_bstack
    pop $I19, rx45_bstack
    lt rx45_pos, -1, rx45_done80
    lt rx45_pos, 0, rx45_fail82
    eq $I19, 0, rx45_fail82
    nqp_islist $I20, rx45_cstack
    unless $I20, rx45_jump83
    elements $I18, rx45_bstack
    le $I18, 0, rx45_cut84
    dec $I18
    set $I18, rx45_bstack[$I18]
  rx45_cut84:
    assign rx45_cstack, $I18
  rx45_jump83:
    jump $I19
  rx45_done80:
    rx45_cur."!cursor_fail"()
    .return (rx45_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_7_1361537946.1303") :anon :lex :outer("cuid_6_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx47_start
    .local string rx47_tgt
    .local int rx47_pos
    .local int rx47_off
    .local int rx47_eos
    .local int rx47_rep
    .local pmc rx47_cur
    .local pmc rx47_curclass
    .local pmc rx47_bstack
    .local pmc rx47_cstack
    rx47_start = self."!cursor_start_all"()
    set rx47_cur, rx47_start[0]
    set rx47_tgt, rx47_start[1]
    set rx47_pos, rx47_start[2]
    set rx47_curclass, rx47_start[3]
    set rx47_bstack, rx47_start[4]
    set $I19, rx47_start[5]
    store_lex unicode:"$\x{a2}", rx47_cur
    length rx47_eos, rx47_tgt
    eq $I19, 1, rx47_restart91
    gt rx47_pos, rx47_eos, rx47_fail92
    repr_get_attr_int $I11, self, rx47_curclass, "$!from"
    ne $I11, -1, rxscan48_done98
    goto rxscan48_scan97
  rxscan48_loop96:
    inc rx47_pos
    gt rx47_pos, rx47_eos, rx47_fail92
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!from", rx47_pos
  rxscan48_scan97:
    nqp_rxmark rx47_bstack, rxscan48_loop96, rx47_pos, 0
  rxscan48_done98:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt49_0100
    nqp_push_label $P11, alt49_1101
    nqp_rxmark rx47_bstack, alt49_end99, -1, 0
    rx47_cur."!alt"(rx47_pos, "alt_nfa__2_1361537946.3487", $P11)
    goto rx47_fail92
  alt49_0100:
    ge rx47_pos, rx47_eos, rx47_fail92
    is_cclass $I11, .CCLASS_WHITESPACE, rx47_tgt, rx47_pos
    unless $I11, rx47_fail92
    add rx47_pos, 1
    goto alt49_end99
  alt49_1101:
    add $I11, rx47_pos, 1
    gt $I11, rx47_eos, rx47_fail92
    substr $S10, rx47_tgt, rx47_pos, 1
    ne $S10, ucs4:"#", rx47_fail92
    add rx47_pos, 1
    goto alt49_end99
  alt49_end99:
    rx47_cur."!cursor_pass"(rx47_pos, 'backtrack'=>1)
    .return (rx47_cur)
  rx47_restart91:
    repr_get_attr_obj rx47_cstack, rx47_cur, rx47_curclass, "$!cstack"
  rx47_fail92:
    unless rx47_bstack, rx47_done90
    pop $I19, rx47_bstack
    if_null rx47_cstack, rx47_cstack_done95
    unless rx47_cstack, rx47_cstack_done95
    dec $I19
    set $P11, rx47_cstack[$I19]
  rx47_cstack_done95:
    pop rx47_rep, rx47_bstack
    pop rx47_pos, rx47_bstack
    pop $I19, rx47_bstack
    lt rx47_pos, -1, rx47_done90
    lt rx47_pos, 0, rx47_fail92
    eq $I19, 0, rx47_fail92
    nqp_islist $I20, rx47_cstack
    unless $I20, rx47_jump93
    elements $I18, rx47_bstack
    le $I18, 0, rx47_cut94
    dec $I18
    set $I18, rx47_bstack[$I18]
  rx47_cut94:
    assign rx47_cstack, $I18
  rx47_jump93:
    jump $I19
  rx47_done90:
    rx47_cur."!cursor_fail"()
    .return (rx47_cur) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_8_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx51_start
    .local string rx51_tgt
    .local int rx51_pos
    .local int rx51_off
    .local int rx51_eos
    .local int rx51_rep
    .local pmc rx51_cur
    .local pmc rx51_curclass
    .local pmc rx51_bstack
    .local pmc rx51_cstack
    rx51_start = self."!cursor_start_all"()
    set rx51_cur, rx51_start[0]
    set rx51_tgt, rx51_start[1]
    set rx51_pos, rx51_start[2]
    set rx51_curclass, rx51_start[3]
    set rx51_bstack, rx51_start[4]
    set $I19, rx51_start[5]
    store_lex unicode:"$\x{a2}", rx51_cur
    length rx51_eos, rx51_tgt
    eq $I19, 1, rx51_restart105
    gt rx51_pos, rx51_eos, rx51_fail106
    repr_get_attr_int $I11, self, rx51_curclass, "$!from"
    ne $I11, -1, rxscan52_done112
    goto rxscan52_scan111
  rxscan52_loop110:
    inc rx51_pos
    gt rx51_pos, rx51_eos, rx51_fail106
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!from", rx51_pos
  rxscan52_scan111:
    nqp_rxmark rx51_bstack, rxscan52_loop110, rx51_pos, 0
  rxscan52_done112:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."ident"()
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail106
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
    nqp_rxmark rx51_bstack, rxquantr54_done115, rx51_pos, 0
  rxquantr54_loop114:
  alt55_0117:
    nqp_rxmark rx51_bstack, alt55_1118, rx51_pos, 0
    add $I11, rx51_pos, 1
    gt $I11, rx51_eos, rx51_fail106
    substr $S10, rx51_tgt, rx51_pos, 1
    ne $S10, ucs4:"-", rx51_fail106
    add rx51_pos, 1
    goto alt55_end116
  alt55_1118:
    ge rx51_pos, rx51_eos, rx51_fail106
    substr $S11, rx51_tgt, rx51_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx51_fail106
    inc rx51_pos
  alt55_end116:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."ident"()
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail106
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
    nqp_rxpeek $I19, rx51_bstack, rxquantr54_done115
    inc $I19
    inc $I19
    set rx51_rep, rx51_bstack[$I19]
    nqp_rxcommit rx51_bstack, rxquantr54_done115
    inc rx51_rep
    nqp_rxmark rx51_bstack, rxquantr54_done115, rx51_pos, rx51_rep
    goto rxquantr54_loop114
  rxquantr54_done115:
    rx51_cur."!cursor_pass"(rx51_pos, "identifier", 'backtrack'=>1)
    .return (rx51_cur)
  rx51_restart105:
    repr_get_attr_obj rx51_cstack, rx51_cur, rx51_curclass, "$!cstack"
  rx51_fail106:
    unless rx51_bstack, rx51_done104
    pop $I19, rx51_bstack
    if_null rx51_cstack, rx51_cstack_done109
    unless rx51_cstack, rx51_cstack_done109
    dec $I19
    set $P11, rx51_cstack[$I19]
  rx51_cstack_done109:
    pop rx51_rep, rx51_bstack
    pop rx51_pos, rx51_bstack
    pop $I19, rx51_bstack
    lt rx51_pos, -1, rx51_done104
    lt rx51_pos, 0, rx51_fail106
    eq $I19, 0, rx51_fail106
    nqp_islist $I20, rx51_cstack
    unless $I20, rx51_jump107
    elements $I18, rx51_bstack
    le $I18, 0, rx51_cut108
    dec $I18
    set $I18, rx51_bstack[$I18]
  rx51_cut108:
    assign rx51_cstack, $I18
  rx51_jump107:
    jump $I19
  rx51_done104:
    rx51_cur."!cursor_fail"()
    .return (rx51_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_9_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 68
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx57_start
    .local string rx57_tgt
    .local int rx57_pos
    .local int rx57_off
    .local int rx57_eos
    .local int rx57_rep
    .local pmc rx57_cur
    .local pmc rx57_curclass
    .local pmc rx57_bstack
    .local pmc rx57_cstack
    rx57_start = self."!cursor_start_all"()
    set rx57_cur, rx57_start[0]
    set rx57_tgt, rx57_start[1]
    set rx57_pos, rx57_start[2]
    set rx57_curclass, rx57_start[3]
    set rx57_bstack, rx57_start[4]
    set $I19, rx57_start[5]
    store_lex unicode:"$\x{a2}", rx57_cur
    length rx57_eos, rx57_tgt
    eq $I19, 1, rx57_restart122
    gt rx57_pos, rx57_eos, rx57_fail123
    repr_get_attr_int $I11, self, rx57_curclass, "$!from"
    ne $I11, -1, rxscan58_done129
    goto rxscan58_scan128
  rxscan58_loop127:
    inc rx57_pos
    gt rx57_pos, rx57_eos, rx57_fail123
    repr_bind_attr_int rx57_cur, rx57_curclass, "$!from", rx57_pos
  rxscan58_scan128:
    nqp_rxmark rx57_bstack, rxscan58_loop127, rx57_pos, 0
  rxscan58_done129:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt59_0131
    nqp_push_label $P11, alt59_1133
    nqp_push_label $P11, alt59_2135
    nqp_rxmark rx57_bstack, alt59_end130, -1, 0
    rx57_cur."!alt"(rx57_pos, "alt_nfa__3_1361537946.4111", $P11)
    goto rx57_fail123
  alt59_0131:
    ge rx57_pos, rx57_eos, rx57_fail123
    substr $S11, rx57_tgt, rx57_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx57_fail123
    repr_bind_attr_int rx57_cur, rx57_curclass, "$!pos", rx57_pos
    $P11 = rx57_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx57_curclass, "$!pos"
    lt $I11, 0, rx57_fail123
    nqp_rxmark rx57_bstack, rxsubrule60_pass132, -1, 0
  rxsubrule60_pass132:
    rx57_cstack = rx57_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx57_pos, $P11, rx57_curclass, "$!pos"
    goto alt59_end130
  alt59_1133:
    ge rx57_pos, rx57_eos, rx57_fail123
    substr $S11, rx57_tgt, rx57_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx57_fail123
    repr_bind_attr_int rx57_cur, rx57_curclass, "$!pos", rx57_pos
    $P11 = rx57_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx57_curclass, "$!pos"
    lt $I11, 0, rx57_fail123
    nqp_rxmark rx57_bstack, rxsubrule61_pass134, -1, 0
  rxsubrule61_pass134:
    rx57_cstack = rx57_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx57_pos, $P11, rx57_curclass, "$!pos"
    goto alt59_end130
  alt59_2135:
    nqp_rxmark rx57_bstack, rxcap62_fail137, rx57_pos, 0
    nqp_rxmark rx57_bstack, rxquantr63_done139, -1, 0
  rxquantr63_loop138:
    ge rx57_pos, rx57_eos, rx57_fail123
    is_cclass $I11, .CCLASS_NUMERIC, rx57_tgt, rx57_pos
    unless $I11, rx57_fail123
    add rx57_pos, 1
    nqp_rxpeek $I19, rx57_bstack, rxquantr63_done139
    inc $I19
    inc $I19
    set rx57_rep, rx57_bstack[$I19]
    nqp_rxcommit rx57_bstack, rxquantr63_done139
    inc rx57_rep
    nqp_rxmark rx57_bstack, rxquantr63_done139, rx57_pos, rx57_rep
    goto rxquantr63_loop138
  rxquantr63_done139:
    nqp_rxpeek $I19, rx57_bstack, rxcap62_fail137
    inc $I19
    set $I11, rx57_bstack[$I19]
    repr_bind_attr_int rx57_cur, rx57_curclass, "$!pos", rx57_pos
    $P11 = rx57_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx57_pos)
    rx57_cstack = rx57_cur."!cursor_capture"($P11, "val")
    goto rxcap62_done136
  rxcap62_fail137:
    goto rx57_fail123
  rxcap62_done136:
    goto alt59_end130
  alt59_end130:
    nqp_rxcommit rx57_bstack, alt59_end130
    rx57_cur."!cursor_pass"(rx57_pos, "arg", 'backtrack'=>1)
    .return (rx57_cur)
  rx57_restart122:
    repr_get_attr_obj rx57_cstack, rx57_cur, rx57_curclass, "$!cstack"
  rx57_fail123:
    unless rx57_bstack, rx57_done121
    pop $I19, rx57_bstack
    if_null rx57_cstack, rx57_cstack_done126
    unless rx57_cstack, rx57_cstack_done126
    dec $I19
    set $P11, rx57_cstack[$I19]
  rx57_cstack_done126:
    pop rx57_rep, rx57_bstack
    pop rx57_pos, rx57_bstack
    pop $I19, rx57_bstack
    lt rx57_pos, -1, rx57_done121
    lt rx57_pos, 0, rx57_fail123
    eq $I19, 0, rx57_fail123
    nqp_islist $I20, rx57_cstack
    unless $I20, rx57_jump124
    elements $I18, rx57_bstack
    le $I18, 0, rx57_cut125
    dec $I18
    set $I18, rx57_bstack[$I18]
  rx57_cut125:
    assign rx57_cstack, $I18
  rx57_jump124:
    jump $I19
  rx57_done121:
    rx57_cur."!cursor_fail"()
    .return (rx57_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_10_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 76
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx64_start
    .local string rx64_tgt
    .local int rx64_pos
    .local int rx64_off
    .local int rx64_eos
    .local int rx64_rep
    .local pmc rx64_cur
    .local pmc rx64_curclass
    .local pmc rx64_bstack
    .local pmc rx64_cstack
    rx64_start = self."!cursor_start_all"()
    set rx64_cur, rx64_start[0]
    set rx64_tgt, rx64_start[1]
    set rx64_pos, rx64_start[2]
    set rx64_curclass, rx64_start[3]
    set rx64_bstack, rx64_start[4]
    set $I19, rx64_start[5]
    store_lex unicode:"$\x{a2}", rx64_cur
    length rx64_eos, rx64_tgt
    eq $I19, 1, rx64_restart142
    gt rx64_pos, rx64_eos, rx64_fail143
    repr_get_attr_int $I11, self, rx64_curclass, "$!from"
    ne $I11, -1, rxscan65_done149
    goto rxscan65_scan148
  rxscan65_loop147:
    inc rx64_pos
    gt rx64_pos, rx64_eos, rx64_fail143
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!from", rx64_pos
  rxscan65_scan148:
    nqp_rxmark rx64_bstack, rxscan65_loop147, rx64_pos, 0
  rxscan65_done149:
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."ws"()
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail143
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."arg"()
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail143
    nqp_rxmark rx64_bstack, rxsubrule67_pass151, -1, 0
  rxsubrule67_pass151:
    rx64_cstack = rx64_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."ws"()
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail143
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
    nqp_rxmark rx64_bstack, rxquantr69_done154, rx64_pos, 0
  rxquantr69_loop153:
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."ws"()
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail143
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
    add $I11, rx64_pos, 1
    gt $I11, rx64_eos, rx64_fail143
    substr $S10, rx64_tgt, rx64_pos, 1
    ne $S10, ucs4:",", rx64_fail143
    add rx64_pos, 1
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."ws"()
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail143
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."arg"()
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail143
    nqp_rxmark rx64_bstack, rxsubrule72_pass157, -1, 0
  rxsubrule72_pass157:
    rx64_cstack = rx64_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
    nqp_rxpeek $I19, rx64_bstack, rxquantr69_done154
    inc $I19
    inc $I19
    set rx64_rep, rx64_bstack[$I19]
    nqp_rxcommit rx64_bstack, rxquantr69_done154
    inc rx64_rep
    nqp_rxmark rx64_bstack, rxquantr69_done154, rx64_pos, rx64_rep
    goto rxquantr69_loop153
  rxquantr69_done154:
    repr_bind_attr_int rx64_cur, rx64_curclass, "$!pos", rx64_pos
    $P11 = rx64_cur."ws"()
    repr_get_attr_int $I11, $P11, rx64_curclass, "$!pos"
    lt $I11, 0, rx64_fail143
    repr_get_attr_int rx64_pos, $P11, rx64_curclass, "$!pos"
    rx64_cur."!cursor_pass"(rx64_pos, "arglist", 'backtrack'=>1)
    .return (rx64_cur)
  rx64_restart142:
    repr_get_attr_obj rx64_cstack, rx64_cur, rx64_curclass, "$!cstack"
  rx64_fail143:
    unless rx64_bstack, rx64_done141
    pop $I19, rx64_bstack
    if_null rx64_cstack, rx64_cstack_done146
    unless rx64_cstack, rx64_cstack_done146
    dec $I19
    set $P11, rx64_cstack[$I19]
  rx64_cstack_done146:
    pop rx64_rep, rx64_bstack
    pop rx64_pos, rx64_bstack
    pop $I19, rx64_bstack
    lt rx64_pos, -1, rx64_done141
    lt rx64_pos, 0, rx64_fail143
    eq $I19, 0, rx64_fail143
    nqp_islist $I20, rx64_cstack
    unless $I20, rx64_jump144
    elements $I18, rx64_bstack
    le $I18, 0, rx64_cut145
    dec $I18
    set $I18, rx64_bstack[$I18]
  rx64_cut145:
    assign rx64_cstack, $I18
  rx64_jump144:
    jump $I19
  rx64_done141:
    rx64_cur."!cursor_fail"()
    .return (rx64_cur) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_11_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 78
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex "$*W", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_10 
    .local pmc pkg_viv_tmp_1 
    .local pmc fb_tmp_11 
    .local pmc pkg_lookup_tmp_11 
    .local pmc pkg_lookup_tmp_10 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local pmc rx74_start
    .local string rx74_tgt
    .local int rx74_pos
    .local int rx74_off
    .local int rx74_eos
    .local int rx74_rep
    .local pmc rx74_cur
    .local pmc rx74_curclass
    .local pmc rx74_bstack
    .local pmc rx74_cstack
    rx74_start = self."!cursor_start_all"()
    set rx74_cur, rx74_start[0]
    set rx74_tgt, rx74_start[1]
    set rx74_pos, rx74_start[2]
    set rx74_curclass, rx74_start[3]
    set rx74_bstack, rx74_start[4]
    set $I19, rx74_start[5]
    store_lex unicode:"$\x{a2}", rx74_cur
    length rx74_eos, rx74_tgt
    eq $I19, 1, rx74_restart161
    gt rx74_pos, rx74_eos, rx74_fail162
    repr_get_attr_int $I11, self, rx74_curclass, "$!from"
    ne $I11, -1, rxscan75_done168
    goto rxscan75_scan167
  rxscan75_loop166:
    inc rx74_pos
    gt rx74_pos, rx74_eos, rx74_fail162
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!from", rx74_pos
  rxscan75_scan167:
    nqp_rxmark rx74_bstack, rxscan75_loop166, rx74_pos, 0
  rxscan75_done168:
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    store_lex unicode:"$\x{a2}", rx74_cur
    unless_null $P101, fallback169
    nqp_get_sc_object $P5004, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_1, $P5003
    set fb_tmp_10, pkg_viv_tmp_1
    repr_defined $I5001, fb_tmp_10
    unless $I5001 goto if76_else170 
    set $P5005, fb_tmp_10["%RX"]
    set $P5007, $P5005
    goto if76_end171
  if76_else170:
    null $P5006
    set $P5007, $P5006
  if76_end171:
    unless_null $P5007, vivi_77172
    new $P5008, 'Hash'
    set pkg_viv_tmp_1["%RX"], $P5008
    set $P5007, $P5008
  vivi_77172:
    unless_null $P5007, vivi_78173
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_78173:
    set $P101, $P5007
  fallback169:
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    store_lex unicode:"$\x{a2}", rx74_cur
.annotate 'line', 80
    nqp_get_sc_object $P5011, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_10, $P5011
    get_who $P5012, pkg_lookup_tmp_10
    exists $I5003, $P5012["QRegex"]
    unless $I5003 goto if80_else176 
    get_who $P5014, pkg_lookup_tmp_10
    set $P5013, $P5014["QRegex"]
    set $P5016, $P5013
    goto if80_end177
  if80_else176:
    nqp_get_sc_object $P5015, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5015
  if80_end177:
    set pkg_lookup_tmp_11, $P5016
    get_who $P5017, pkg_lookup_tmp_11
    exists $I5004, $P5017["P6Regex"]
    unless $I5004 goto if81_else178 
    get_who $P5019, pkg_lookup_tmp_11
    set $P5018, $P5019["P6Regex"]
    set $P5021, $P5018
    goto if81_end179
  if81_else178:
    nqp_get_sc_object $P5020, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5021, $P5020
  if81_end179:
    get_who $P5010, $P5021
    set fb_tmp_11, $P5010
    repr_defined $I5002, fb_tmp_11
    unless $I5002 goto if79_else174 
    set $P5022, fb_tmp_11["World"]
    set $P5024, $P5022
    goto if79_end175
  if79_else174:
    null $P5023
    set $P5024, $P5023
  if79_end175:
    unless_null $P5024, vivi_82180
    nqp_get_sc_object $P5025, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5024, $P5025
  vivi_82180:
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."target"()
    set $S5002, $P5027
    nqp_sha1 $S5001, $S5002
    $P5028 = $P5024."new"($S5001 :named("handle"))
    set $P102, $P5028
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail162
    nqp_rxmark rx74_bstack, rxsubrule83_pass181, -1, 0
  rxsubrule83_pass181:
    rx74_cstack = rx74_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
  alt84_0183:
    nqp_rxmark rx74_bstack, alt84_1185, rx74_pos, 0
    lt rx74_pos, rx74_eos, rx74_fail162
    goto alt84_end182
  alt84_1185:
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail162
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
  alt84_end182:
    rx74_cur."!cursor_pass"(rx74_pos, "TOP", 'backtrack'=>1)
    .return (rx74_cur)
  rx74_restart161:
    repr_get_attr_obj rx74_cstack, rx74_cur, rx74_curclass, "$!cstack"
  rx74_fail162:
    unless rx74_bstack, rx74_done160
    pop $I19, rx74_bstack
    if_null rx74_cstack, rx74_cstack_done165
    unless rx74_cstack, rx74_cstack_done165
    dec $I19
    set $P11, rx74_cstack[$I19]
  rx74_cstack_done165:
    pop rx74_rep, rx74_bstack
    pop rx74_pos, rx74_bstack
    pop $I19, rx74_bstack
    lt rx74_pos, -1, rx74_done160
    lt rx74_pos, 0, rx74_fail162
    eq $I19, 0, rx74_fail162
    nqp_islist $I20, rx74_cstack
    unless $I20, rx74_jump163
    elements $I18, rx74_bstack
    le $I18, 0, rx74_cut164
    dec $I18
    set $I18, rx74_bstack[$I18]
  rx74_cut164:
    assign rx74_cstack, $I18
  rx74_jump163:
    jump $I19
  rx74_done160:
    rx74_cur."!cursor_fail"()
    .return (rx74_cur) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_12_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 85
    .param pmc _lex_param_0 
    .const 'Sub' $P5023 = 'cuid_182_1361537946.1303' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_183_1361537946.1303' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_13_1361537946.1303' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_184_1361537946.1303' 
    capture_lex $P5023 
    .lex "$OLDRX", $P101 
    .lex "%*RX", $P102 
    .lex "$*SEQ", $P103 
    .lex utf8:"$\x{a2}", $P104 
    .lex "$/", $P105 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_12 
    .local pmc pkg_viv_tmp_2 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P103, $P5003
    set self, _lex_param_0
    .local pmc rx87_start
    .local string rx87_tgt
    .local int rx87_pos
    .local int rx87_off
    .local int rx87_eos
    .local int rx87_rep
    .local pmc rx87_cur
    .local pmc rx87_curclass
    .local pmc rx87_bstack
    .local pmc rx87_cstack
    rx87_start = self."!cursor_start_all"()
    set rx87_cur, rx87_start[0]
    set rx87_tgt, rx87_start[1]
    set rx87_pos, rx87_start[2]
    set rx87_curclass, rx87_start[3]
    set rx87_bstack, rx87_start[4]
    set $I19, rx87_start[5]
    store_lex unicode:"$\x{a2}", rx87_cur
    length rx87_eos, rx87_tgt
    eq $I19, 1, rx87_restart189
    gt rx87_pos, rx87_eos, rx87_fail190
    repr_get_attr_int $I11, self, rx87_curclass, "$!from"
    ne $I11, -1, rxscan88_done196
    goto rxscan88_scan195
  rxscan88_loop194:
    inc rx87_pos
    gt rx87_pos, rx87_eos, rx87_fail190
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!from", rx87_pos
  rxscan88_scan195:
    nqp_rxmark rx87_bstack, rxscan88_loop194, rx87_pos, 0
  rxscan88_done196:
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    store_lex unicode:"$\x{a2}", rx87_cur
    find_dynamic_lex $P5004, "%*RX"
    set $P101, $P5004
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    store_lex unicode:"$\x{a2}", rx87_cur
    unless_null $P102, fallback197
    nqp_get_sc_object $P5006, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5005, $P5006
    set pkg_viv_tmp_2, $P5005
    set fb_tmp_12, pkg_viv_tmp_2
    repr_defined $I5001, fb_tmp_12
    unless $I5001 goto if89_else198 
    set $P5007, fb_tmp_12["%RX"]
    set $P5009, $P5007
    goto if89_end199
  if89_else198:
    null $P5008
    set $P5009, $P5008
  if89_end199:
    unless_null $P5009, vivi_90200
    new $P5010, 'Hash'
    set pkg_viv_tmp_2["%RX"], $P5010
    set $P5009, $P5010
  vivi_90200:
    unless_null $P5009, vivi_91201
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5009, $P5011
  vivi_91201:
    set $P102, $P5009
  fallback197:
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    store_lex unicode:"$\x{a2}", rx87_cur
    box $P5012, 0
    set $P103, $P5012
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    store_lex unicode:"$\x{a2}", rx87_cur
    $P5013 = $P104."MATCH"()
    set $P105, $P5013
    .const 'Sub' $P5014 = 'cuid_182_1361537946.1303' 
    capture_lex $P5014
    $P5015 = $P5014()
    nqp_rxmark rx87_bstack, rxquantr95_done211, rx87_pos, 0
  rxquantr95_loop210:
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    $P11 = rx87_cur."ws"()
    repr_get_attr_int $I11, $P11, rx87_curclass, "$!pos"
    lt $I11, 0, rx87_fail190
    repr_get_attr_int rx87_pos, $P11, rx87_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt97_0214
    nqp_push_label $P11, alt97_1215
    nqp_push_label $P11, alt97_2216
    nqp_push_label $P11, alt97_3217
    nqp_rxmark rx87_bstack, alt97_end213, -1, 0
    rx87_cur."!alt"(rx87_pos, "alt_nfa__4_1361537946.5047", $P11)
    goto rx87_fail190
  alt97_0214:
    add $I11, rx87_pos, 2
    gt $I11, rx87_eos, rx87_fail190
    substr $S10, rx87_tgt, rx87_pos, 2
    ne $S10, ucs4:"||", rx87_fail190
    add rx87_pos, 2
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    store_lex unicode:"$\x{a2}", rx87_cur
    $P5016 = $P104."MATCH"()
    set $P105, $P5016
    .const 'Sub' $P5017 = 'cuid_183_1361537946.1303' 
    capture_lex $P5017
    $P5018 = $P5017()
    goto alt97_end213
  alt97_1215:
    add $I11, rx87_pos, 1
    gt $I11, rx87_eos, rx87_fail190
    substr $S10, rx87_tgt, rx87_pos, 1
    ne $S10, ucs4:"|", rx87_fail190
    add rx87_pos, 1
    goto alt97_end213
  alt97_2216:
    add $I11, rx87_pos, 2
    gt $I11, rx87_eos, rx87_fail190
    substr $S10, rx87_tgt, rx87_pos, 2
    ne $S10, ucs4:"&&", rx87_fail190
    add rx87_pos, 2
    goto alt97_end213
  alt97_3217:
    add $I11, rx87_pos, 1
    gt $I11, rx87_eos, rx87_fail190
    substr $S10, rx87_tgt, rx87_pos, 1
    ne $S10, ucs4:"&", rx87_fail190
    add rx87_pos, 1
    goto alt97_end213
  alt97_end213:
    nqp_rxcommit rx87_bstack, alt97_end213
    nqp_rxpeek $I19, rx87_bstack, rxquantr95_done211
    inc $I19
    inc $I19
    set rx87_rep, rx87_bstack[$I19]
    nqp_rxcommit rx87_bstack, rxquantr95_done211
    inc rx87_rep
  rxquantr95_done211:
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    $P11 = rx87_cur."termaltseq"()
    repr_get_attr_int $I11, $P11, rx87_curclass, "$!pos"
    lt $I11, 0, rx87_fail190
    nqp_rxmark rx87_bstack, rxsubrule98_pass218, -1, 0
  rxsubrule98_pass218:
    rx87_cstack = rx87_cur."!cursor_capture"($P11, "termaltseq")
    repr_get_attr_int rx87_pos, $P11, rx87_curclass, "$!pos"
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    $P11 = rx87_cur."ws"()
    repr_get_attr_int $I11, $P11, rx87_curclass, "$!pos"
    lt $I11, 0, rx87_fail190
    repr_get_attr_int rx87_pos, $P11, rx87_curclass, "$!pos"
  alt100_0221:
    nqp_rxmark rx87_bstack, alt100_1222, rx87_pos, 0
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    $P11 = rx87_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx87_curclass, "$!pos"
    lt $I11, 0, rx87_fail190
    goto alt100_end220
  alt100_1222:
    nqp_rxmark rx87_bstack, alt100_2225, rx87_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx87_tgt, rx87_pos
    if $I11, rxanchor101_done223
    ne rx87_pos, rx87_eos, rx87_fail190
    eq rx87_pos, 0, rxanchor101_done223
    sub $I11, rx87_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx87_tgt, $I11
    if $I11, rx87_fail190
  rxanchor101_done223:
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    $P11 = rx87_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx87_curclass, "$!pos"
    lt $I11, 0, rx87_fail190
    repr_get_attr_int rx87_pos, $P11, rx87_curclass, "$!pos"
    goto alt100_end220
  alt100_2225:
    nqp_rxmark rx87_bstack, alt100_3240, rx87_pos, 0
    .const 'Sub' $P5019 = 'cuid_13_1361537946.1303' 
    capture_lex $P5019
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    $P11 = rx87_cur.$P5019()
    repr_get_attr_int $I11, $P11, rx87_curclass, "$!pos"
    lt $I11, 0, rx87_fail190
    nqp_rxmark rx87_bstack, rxsubrule105_pass236, -1, 0
  rxsubrule105_pass236:
    rx87_cstack = rx87_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx87_pos, $P11, rx87_curclass, "$!pos"
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    store_lex unicode:"$\x{a2}", rx87_cur
    $P5020 = $P104."MATCH"()
    set $P105, $P5020
    .const 'Sub' $P5021 = 'cuid_184_1361537946.1303' 
    capture_lex $P5021
    $P5022 = $P5021()
    goto alt100_end220
  alt100_3240:
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    $P11 = rx87_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx87_curclass, "$!pos"
    lt $I11, 0, rx87_fail190
    repr_get_attr_int rx87_pos, $P11, rx87_curclass, "$!pos"
  alt100_end220:
    rx87_cur."!cursor_pass"(rx87_pos, "nibbler", 'backtrack'=>1)
    .return (rx87_cur)
  rx87_restart189:
    repr_get_attr_obj rx87_cstack, rx87_cur, rx87_curclass, "$!cstack"
  rx87_fail190:
    unless rx87_bstack, rx87_done188
    pop $I19, rx87_bstack
    if_null rx87_cstack, rx87_cstack_done193
    unless rx87_cstack, rx87_cstack_done193
    dec $I19
    set $P11, rx87_cstack[$I19]
  rx87_cstack_done193:
    pop rx87_rep, rx87_bstack
    pop rx87_pos, rx87_bstack
    pop $I19, rx87_bstack
    lt rx87_pos, -1, rx87_done188
    lt rx87_pos, 0, rx87_fail190
    eq $I19, 0, rx87_fail190
    nqp_islist $I20, rx87_cstack
    unless $I20, rx87_jump191
    elements $I18, rx87_bstack
    le $I18, 0, rx87_cut192
    dec $I18
    set $I18, rx87_bstack[$I18]
  rx87_cut192:
    assign rx87_cstack, $I18
  rx87_jump191:
    jump $I19
  rx87_done188:
    rx87_cur."!cursor_fail"()
    .return (rx87_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_182_1361537946.1303") :anon :lex :outer("cuid_12_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 89
    .const 'Sub' $P5007 = 'cuid_181_1361537946.1303' 
    capture_lex $P5007 
    find_lex $P5004, "$OLDRX"
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next207:
    unless $P5003, for_done209
    shift $P5006, $P5003
  for_redo208:
    .const 'Sub' $P5005 = 'cuid_181_1361537946.1303' 
    capture_lex $P5005
    $P5001 = $P5005($P5006)
    goto for_next207
  for_done209:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_181_1361537946.1303") :anon :lex :outer("cuid_182_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 90
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_13 
    .local pmc pkg_viv_tmp_3 
    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback202
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5002, $P5003
    set pkg_viv_tmp_3, $P5002
    set fb_tmp_13, pkg_viv_tmp_3
    repr_defined $I5001, fb_tmp_13
    unless $I5001 goto if92_else203 
    set $P5004, fb_tmp_13["%RX"]
    set $P5006, $P5004
    goto if92_end204
  if92_else203:
    null $P5005
    set $P5006, $P5005
  if92_end204:
    unless_null $P5006, vivi_93205
    new $P5007, 'Hash'
    set pkg_viv_tmp_3["%RX"], $P5007
    set $P5006, $P5007
  vivi_93205:
    unless_null $P5006, vivi_94206
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5006, $P5008
  vivi_94206:
    set $P5001, $P5006
  fallback202:
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_183_1361537946.1303") :anon :lex :outer("cuid_12_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 93

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1361537946.1303") :anon :lex :outer("cuid_12_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx103_start
    .local string rx103_tgt
    .local int rx103_pos
    .local int rx103_off
    .local int rx103_eos
    .local int rx103_rep
    .local pmc rx103_cur
    .local pmc rx103_curclass
    .local pmc rx103_bstack
    .local pmc rx103_cstack
    rx103_start = self."!cursor_start_all"()
    set rx103_cur, rx103_start[0]
    set rx103_tgt, rx103_start[1]
    set rx103_pos, rx103_start[2]
    set rx103_curclass, rx103_start[3]
    set rx103_bstack, rx103_start[4]
    set $I19, rx103_start[5]
    store_lex unicode:"$\x{a2}", rx103_cur
    length rx103_eos, rx103_tgt
    eq $I19, 1, rx103_restart228
    gt rx103_pos, rx103_eos, rx103_fail229
    repr_get_attr_int $I11, self, rx103_curclass, "$!from"
    ne $I11, -1, rxscan104_done235
    goto rxscan104_scan234
  rxscan104_loop233:
    inc rx103_pos
    gt rx103_pos, rx103_eos, rx103_fail229
    repr_bind_attr_int rx103_cur, rx103_curclass, "$!from", rx103_pos
  rxscan104_scan234:
    nqp_rxmark rx103_bstack, rxscan104_loop233, rx103_pos, 0
  rxscan104_done235:
    ge rx103_pos, rx103_eos, rx103_fail229
    is_cclass $I11, .CCLASS_WORD, rx103_tgt, rx103_pos
    if $I11, rx103_fail229
    add rx103_pos, 1
    rx103_cur."!cursor_pass"(rx103_pos, 'backtrack'=>1)
    .return (rx103_cur)
  rx103_restart228:
    repr_get_attr_obj rx103_cstack, rx103_cur, rx103_curclass, "$!cstack"
  rx103_fail229:
    unless rx103_bstack, rx103_done227
    pop $I19, rx103_bstack
    if_null rx103_cstack, rx103_cstack_done232
    unless rx103_cstack, rx103_cstack_done232
    dec $I19
    set $P11, rx103_cstack[$I19]
  rx103_cstack_done232:
    pop rx103_rep, rx103_bstack
    pop rx103_pos, rx103_bstack
    pop $I19, rx103_bstack
    lt rx103_pos, -1, rx103_done227
    lt rx103_pos, 0, rx103_fail229
    eq $I19, 0, rx103_fail229
    nqp_islist $I20, rx103_cstack
    unless $I20, rx103_jump230
    elements $I18, rx103_bstack
    le $I18, 0, rx103_cut231
    dec $I18
    set $I18, rx103_bstack[$I18]
  rx103_cut231:
    assign rx103_cstack, $I18
  rx103_jump230:
    jump $I19
  rx103_done227:
    rx103_cur."!cursor_fail"()
    .return (rx103_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_184_1361537946.1303") :anon :lex :outer("cuid_12_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 102
    .local pmc fb_tmp_14 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_14, $P5003
    repr_defined $I5001, fb_tmp_14
    unless $I5001 goto if106_else237 
    set $P5004, fb_tmp_14[0]
    set $P5006, $P5004
    goto if106_end238
  if106_else237:
    null $P5005
    set $P5006, $P5005
  if106_end238:
    unless_null $P5006, vivi_107239
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_107239:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_14_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 107
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_15_1361537946.1303' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_16_1361537946.1303' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_17_1361537946.1303' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx109_start
    .local string rx109_tgt
    .local int rx109_pos
    .local int rx109_off
    .local int rx109_eos
    .local int rx109_rep
    .local pmc rx109_cur
    .local pmc rx109_curclass
    .local pmc rx109_bstack
    .local pmc rx109_cstack
    rx109_start = self."!cursor_start_all"()
    set rx109_cur, rx109_start[0]
    set rx109_tgt, rx109_start[1]
    set rx109_pos, rx109_start[2]
    set rx109_curclass, rx109_start[3]
    set rx109_bstack, rx109_start[4]
    set $I19, rx109_start[5]
    store_lex unicode:"$\x{a2}", rx109_cur
    length rx109_eos, rx109_tgt
    eq $I19, 1, rx109_restart244
    gt rx109_pos, rx109_eos, rx109_fail245
    repr_get_attr_int $I11, self, rx109_curclass, "$!from"
    ne $I11, -1, rxscan110_done251
    goto rxscan110_scan250
  rxscan110_loop249:
    inc rx109_pos
    gt rx109_pos, rx109_eos, rx109_fail245
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!from", rx109_pos
  rxscan110_scan250:
    nqp_rxmark rx109_bstack, rxscan110_loop249, rx109_pos, 0
  rxscan110_done251:
    rx109_cur."!dba"(rx109_pos, "infix stopper")
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt111_0253
    nqp_push_label $P11, alt111_1268
    nqp_push_label $P11, alt111_2279
    nqp_rxmark rx109_bstack, alt111_end252, -1, 0
    rx109_cur."!alt"(rx109_pos, "alt_nfa__5_1361537946.5359", $P11)
    goto rx109_fail245
  alt111_0253:
    .const 'Sub' $P5001 = 'cuid_15_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!pos", rx109_pos
    $P11 = rx109_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx109_curclass, "$!pos"
    lt $I11, 0, rx109_fail245
    goto alt111_end252
  alt111_1268:
    .const 'Sub' $P5002 = 'cuid_16_1361537946.1303' 
    capture_lex $P5002
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!pos", rx109_pos
    $P11 = rx109_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx109_curclass, "$!pos"
    lt $I11, 0, rx109_fail245
    goto alt111_end252
  alt111_2279:
    .const 'Sub' $P5003 = 'cuid_17_1361537946.1303' 
    capture_lex $P5003
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!pos", rx109_pos
    $P11 = rx109_cur."before"($P5003)
    repr_get_attr_int $I11, $P11, rx109_curclass, "$!pos"
    lt $I11, 0, rx109_fail245
    goto alt111_end252
  alt111_end252:
    rx109_cur."!cursor_pass"(rx109_pos, "infixstopper", 'backtrack'=>1)
    .return (rx109_cur)
  rx109_restart244:
    repr_get_attr_obj rx109_cstack, rx109_cur, rx109_curclass, "$!cstack"
  rx109_fail245:
    unless rx109_bstack, rx109_done243
    pop $I19, rx109_bstack
    if_null rx109_cstack, rx109_cstack_done248
    unless rx109_cstack, rx109_cstack_done248
    dec $I19
    set $P11, rx109_cstack[$I19]
  rx109_cstack_done248:
    pop rx109_rep, rx109_bstack
    pop rx109_pos, rx109_bstack
    pop $I19, rx109_bstack
    lt rx109_pos, -1, rx109_done243
    lt rx109_pos, 0, rx109_fail245
    eq $I19, 0, rx109_fail245
    nqp_islist $I20, rx109_cstack
    unless $I20, rx109_jump246
    elements $I18, rx109_bstack
    le $I18, 0, rx109_cut247
    dec $I18
    set $I18, rx109_bstack[$I18]
  rx109_cut247:
    assign rx109_cstack, $I18
  rx109_jump246:
    jump $I19
  rx109_done243:
    rx109_cur."!cursor_fail"()
    .return (rx109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1361537946.1303") :anon :lex :outer("cuid_14_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx112_start
    .local string rx112_tgt
    .local int rx112_pos
    .local int rx112_off
    .local int rx112_eos
    .local int rx112_rep
    .local pmc rx112_cur
    .local pmc rx112_curclass
    .local pmc rx112_bstack
    .local pmc rx112_cstack
    rx112_start = self."!cursor_start_all"()
    set rx112_cur, rx112_start[0]
    set rx112_tgt, rx112_start[1]
    set rx112_pos, rx112_start[2]
    set rx112_curclass, rx112_start[3]
    set rx112_bstack, rx112_start[4]
    set $I19, rx112_start[5]
    store_lex unicode:"$\x{a2}", rx112_cur
    length rx112_eos, rx112_tgt
    eq $I19, 1, rx112_restart256
    gt rx112_pos, rx112_eos, rx112_fail257
    repr_get_attr_int $I11, self, rx112_curclass, "$!from"
    ne $I11, -1, rxscan113_done263
    goto rxscan113_scan262
  rxscan113_loop261:
    inc rx112_pos
    gt rx112_pos, rx112_eos, rx112_fail257
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!from", rx112_pos
  rxscan113_scan262:
    nqp_rxmark rx112_bstack, rxscan113_loop261, rx112_pos, 0
  rxscan113_done263:
  alt114_0265:
    nqp_rxmark rx112_bstack, alt114_1266, rx112_pos, 0
    add $I11, rx112_pos, 1
    gt $I11, rx112_eos, rx112_fail257
    substr $S10, rx112_tgt, rx112_pos, 1
    ne $S10, ucs4:")", rx112_fail257
    add rx112_pos, 1
    goto alt114_end264
  alt114_1266:
    nqp_rxmark rx112_bstack, alt114_2267, rx112_pos, 0
    add $I11, rx112_pos, 1
    gt $I11, rx112_eos, rx112_fail257
    substr $S10, rx112_tgt, rx112_pos, 1
    ne $S10, ucs4:"}", rx112_fail257
    add rx112_pos, 1
    goto alt114_end264
  alt114_2267:
    add $I11, rx112_pos, 1
    gt $I11, rx112_eos, rx112_fail257
    substr $S10, rx112_tgt, rx112_pos, 1
    ne $S10, ucs4:"]", rx112_fail257
    add rx112_pos, 1
  alt114_end264:
    rx112_cur."!cursor_pass"(rx112_pos, 'backtrack'=>1)
    .return (rx112_cur)
  rx112_restart256:
    repr_get_attr_obj rx112_cstack, rx112_cur, rx112_curclass, "$!cstack"
  rx112_fail257:
    unless rx112_bstack, rx112_done255
    pop $I19, rx112_bstack
    if_null rx112_cstack, rx112_cstack_done260
    unless rx112_cstack, rx112_cstack_done260
    dec $I19
    set $P11, rx112_cstack[$I19]
  rx112_cstack_done260:
    pop rx112_rep, rx112_bstack
    pop rx112_pos, rx112_bstack
    pop $I19, rx112_bstack
    lt rx112_pos, -1, rx112_done255
    lt rx112_pos, 0, rx112_fail257
    eq $I19, 0, rx112_fail257
    nqp_islist $I20, rx112_cstack
    unless $I20, rx112_jump258
    elements $I18, rx112_bstack
    le $I18, 0, rx112_cut259
    dec $I18
    set $I18, rx112_bstack[$I18]
  rx112_cut259:
    assign rx112_cstack, $I18
  rx112_jump258:
    jump $I19
  rx112_done255:
    rx112_cur."!cursor_fail"()
    .return (rx112_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_16_1361537946.1303") :anon :lex :outer("cuid_14_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx115_start
    .local string rx115_tgt
    .local int rx115_pos
    .local int rx115_off
    .local int rx115_eos
    .local int rx115_rep
    .local pmc rx115_cur
    .local pmc rx115_curclass
    .local pmc rx115_bstack
    .local pmc rx115_cstack
    rx115_start = self."!cursor_start_all"()
    set rx115_cur, rx115_start[0]
    set rx115_tgt, rx115_start[1]
    set rx115_pos, rx115_start[2]
    set rx115_curclass, rx115_start[3]
    set rx115_bstack, rx115_start[4]
    set $I19, rx115_start[5]
    store_lex unicode:"$\x{a2}", rx115_cur
    length rx115_eos, rx115_tgt
    eq $I19, 1, rx115_restart271
    gt rx115_pos, rx115_eos, rx115_fail272
    repr_get_attr_int $I11, self, rx115_curclass, "$!from"
    ne $I11, -1, rxscan116_done278
    goto rxscan116_scan277
  rxscan116_loop276:
    inc rx115_pos
    gt rx115_pos, rx115_eos, rx115_fail272
    repr_bind_attr_int rx115_cur, rx115_curclass, "$!from", rx115_pos
  rxscan116_scan277:
    nqp_rxmark rx115_bstack, rxscan116_loop276, rx115_pos, 0
  rxscan116_done278:
    add $I11, rx115_pos, 1
    gt $I11, rx115_eos, rx115_fail272
    substr $S10, rx115_tgt, rx115_pos, 1
    ne $S10, ucs4:">", rx115_fail272
    add rx115_pos, 1
    ge rx115_pos, rx115_eos, rx115_fail272
    substr $S11, rx115_tgt, rx115_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx115_fail272
    inc rx115_pos
    rx115_cur."!cursor_pass"(rx115_pos, 'backtrack'=>1)
    .return (rx115_cur)
  rx115_restart271:
    repr_get_attr_obj rx115_cstack, rx115_cur, rx115_curclass, "$!cstack"
  rx115_fail272:
    unless rx115_bstack, rx115_done270
    pop $I19, rx115_bstack
    if_null rx115_cstack, rx115_cstack_done275
    unless rx115_cstack, rx115_cstack_done275
    dec $I19
    set $P11, rx115_cstack[$I19]
  rx115_cstack_done275:
    pop rx115_rep, rx115_bstack
    pop rx115_pos, rx115_bstack
    pop $I19, rx115_bstack
    lt rx115_pos, -1, rx115_done270
    lt rx115_pos, 0, rx115_fail272
    eq $I19, 0, rx115_fail272
    nqp_islist $I20, rx115_cstack
    unless $I20, rx115_jump273
    elements $I18, rx115_bstack
    le $I18, 0, rx115_cut274
    dec $I18
    set $I18, rx115_bstack[$I18]
  rx115_cut274:
    assign rx115_cstack, $I18
  rx115_jump273:
    jump $I19
  rx115_done270:
    rx115_cur."!cursor_fail"()
    .return (rx115_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_17_1361537946.1303") :anon :lex :outer("cuid_14_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx117_start
    .local string rx117_tgt
    .local int rx117_pos
    .local int rx117_off
    .local int rx117_eos
    .local int rx117_rep
    .local pmc rx117_cur
    .local pmc rx117_curclass
    .local pmc rx117_bstack
    .local pmc rx117_cstack
    rx117_start = self."!cursor_start_all"()
    set rx117_cur, rx117_start[0]
    set rx117_tgt, rx117_start[1]
    set rx117_pos, rx117_start[2]
    set rx117_curclass, rx117_start[3]
    set rx117_bstack, rx117_start[4]
    set $I19, rx117_start[5]
    store_lex unicode:"$\x{a2}", rx117_cur
    length rx117_eos, rx117_tgt
    eq $I19, 1, rx117_restart282
    gt rx117_pos, rx117_eos, rx117_fail283
    repr_get_attr_int $I11, self, rx117_curclass, "$!from"
    ne $I11, -1, rxscan118_done289
    goto rxscan118_scan288
  rxscan118_loop287:
    inc rx117_pos
    gt rx117_pos, rx117_eos, rx117_fail283
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!from", rx117_pos
  rxscan118_scan288:
    nqp_rxmark rx117_bstack, rxscan118_loop287, rx117_pos, 0
  rxscan118_done289:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail283
    goto rxsubrule119_pass290
  rxsubrule119_back291:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail283
  rxsubrule119_pass290:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "rxstopper")
    set_addr $I11, rxsubrule119_back291
    push rx117_bstack, $I11
    push rx117_bstack, 0
    push rx117_bstack, rx117_pos
    elements $I11, rx117_cstack
    push rx117_bstack, $I11
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    rx117_cur."!cursor_pass"(rx117_pos, 'backtrack'=>1)
    .return (rx117_cur)
  rx117_restart282:
    repr_get_attr_obj rx117_cstack, rx117_cur, rx117_curclass, "$!cstack"
  rx117_fail283:
    unless rx117_bstack, rx117_done281
    pop $I19, rx117_bstack
    if_null rx117_cstack, rx117_cstack_done286
    unless rx117_cstack, rx117_cstack_done286
    dec $I19
    set $P11, rx117_cstack[$I19]
  rx117_cstack_done286:
    pop rx117_rep, rx117_bstack
    pop rx117_pos, rx117_bstack
    pop $I19, rx117_bstack
    lt rx117_pos, -1, rx117_done281
    lt rx117_pos, 0, rx117_fail283
    eq $I19, 0, rx117_fail283
    nqp_islist $I20, rx117_cstack
    unless $I20, rx117_jump284
    elements $I18, rx117_bstack
    le $I18, 0, rx117_cut285
    dec $I18
    set $I18, rx117_bstack[$I18]
  rx117_cut285:
    assign rx117_cstack, $I18
  rx117_jump284:
    jump $I19
  rx117_done281:
    rx117_cur."!cursor_fail"()
    .return (rx117_cur) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_18_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 116
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx120_start
    .local string rx120_tgt
    .local int rx120_pos
    .local int rx120_off
    .local int rx120_eos
    .local int rx120_rep
    .local pmc rx120_cur
    .local pmc rx120_curclass
    .local pmc rx120_bstack
    .local pmc rx120_cstack
    rx120_start = self."!cursor_start_all"()
    set rx120_cur, rx120_start[0]
    set rx120_tgt, rx120_start[1]
    set rx120_pos, rx120_start[2]
    set rx120_curclass, rx120_start[3]
    set rx120_bstack, rx120_start[4]
    set $I19, rx120_start[5]
    store_lex unicode:"$\x{a2}", rx120_cur
    length rx120_eos, rx120_tgt
    eq $I19, 1, rx120_restart294
    gt rx120_pos, rx120_eos, rx120_fail295
    repr_get_attr_int $I11, self, rx120_curclass, "$!from"
    ne $I11, -1, rxscan121_done301
    goto rxscan121_scan300
  rxscan121_loop299:
    inc rx120_pos
    gt rx120_pos, rx120_eos, rx120_fail295
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!from", rx120_pos
  rxscan121_scan300:
    nqp_rxmark rx120_bstack, rxscan121_loop299, rx120_pos, 0
  rxscan121_done301:
    lt rx120_pos, rx120_eos, rx120_fail295
    rx120_cur."!cursor_pass"(rx120_pos, "rxstopper", 'backtrack'=>1)
    .return (rx120_cur)
  rx120_restart294:
    repr_get_attr_obj rx120_cstack, rx120_cur, rx120_curclass, "$!cstack"
  rx120_fail295:
    unless rx120_bstack, rx120_done293
    pop $I19, rx120_bstack
    if_null rx120_cstack, rx120_cstack_done298
    unless rx120_cstack, rx120_cstack_done298
    dec $I19
    set $P11, rx120_cstack[$I19]
  rx120_cstack_done298:
    pop rx120_rep, rx120_bstack
    pop rx120_pos, rx120_bstack
    pop $I19, rx120_bstack
    lt rx120_pos, -1, rx120_done293
    lt rx120_pos, 0, rx120_fail295
    eq $I19, 0, rx120_fail295
    nqp_islist $I20, rx120_cstack
    unless $I20, rx120_jump296
    elements $I18, rx120_bstack
    le $I18, 0, rx120_cut297
    dec $I18
    set $I18, rx120_bstack[$I18]
  rx120_cut297:
    assign rx120_cstack, $I18
  rx120_jump296:
    jump $I19
  rx120_done293:
    rx120_cur."!cursor_fail"()
    .return (rx120_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_19_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 118
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_185_1361537946.1303' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx123_start
    .local string rx123_tgt
    .local int rx123_pos
    .local int rx123_off
    .local int rx123_eos
    .local int rx123_rep
    .local pmc rx123_cur
    .local pmc rx123_curclass
    .local pmc rx123_bstack
    .local pmc rx123_cstack
    rx123_start = self."!cursor_start_all"()
    set rx123_cur, rx123_start[0]
    set rx123_tgt, rx123_start[1]
    set rx123_pos, rx123_start[2]
    set rx123_curclass, rx123_start[3]
    set rx123_bstack, rx123_start[4]
    set $I19, rx123_start[5]
    store_lex unicode:"$\x{a2}", rx123_cur
    length rx123_eos, rx123_tgt
    eq $I19, 1, rx123_restart305
    gt rx123_pos, rx123_eos, rx123_fail306
    repr_get_attr_int $I11, self, rx123_curclass, "$!from"
    ne $I11, -1, rxscan124_done312
    goto rxscan124_scan311
  rxscan124_loop310:
    inc rx123_pos
    gt rx123_pos, rx123_eos, rx123_fail306
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!from", rx123_pos
  rxscan124_scan311:
    nqp_rxmark rx123_bstack, rxscan124_loop310, rx123_pos, 0
  rxscan124_done312:
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!pos", rx123_pos
    $P11 = rx123_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx123_curclass, "$!pos"
    lt $I11, 0, rx123_fail306
    nqp_rxmark rx123_bstack, rxsubrule125_pass313, -1, 0
  rxsubrule125_pass313:
    rx123_cstack = rx123_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx123_pos, $P11, rx123_curclass, "$!pos"
    nqp_rxmark rx123_bstack, rxquantr126_done315, rx123_pos, 0
  rxquantr126_loop314:
    add $I11, rx123_pos, 2
    gt $I11, rx123_eos, rx123_fail306
    substr $S10, rx123_tgt, rx123_pos, 2
    ne $S10, ucs4:"||", rx123_fail306
    add rx123_pos, 2
  alt127_0317:
    nqp_rxmark rx123_bstack, alt127_1319, rx123_pos, 0
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!pos", rx123_pos
    store_lex unicode:"$\x{a2}", rx123_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_185_1361537946.1303' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!pos", rx123_pos
    $P11 = rx123_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx123_curclass, "$!pos"
    lt $I11, 0, rx123_fail306
    nqp_rxmark rx123_bstack, rxsubrule128_pass318, -1, 0
  rxsubrule128_pass318:
    rx123_cstack = rx123_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx123_pos, $P11, rx123_curclass, "$!pos"
    goto alt127_end316
  alt127_1319:
    repr_bind_attr_int rx123_cur, rx123_curclass, "$!pos", rx123_pos
    $P11 = rx123_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx123_curclass, "$!pos"
    lt $I11, 0, rx123_fail306
    repr_get_attr_int rx123_pos, $P11, rx123_curclass, "$!pos"
  alt127_end316:
    nqp_rxpeek $I19, rx123_bstack, rxquantr126_done315
    inc $I19
    inc $I19
    set rx123_rep, rx123_bstack[$I19]
    nqp_rxcommit rx123_bstack, rxquantr126_done315
    inc rx123_rep
    nqp_rxmark rx123_bstack, rxquantr126_done315, rx123_pos, rx123_rep
    goto rxquantr126_loop314
  rxquantr126_done315:
    rx123_cur."!cursor_pass"(rx123_pos, "termaltseq", 'backtrack'=>1)
    .return (rx123_cur)
  rx123_restart305:
    repr_get_attr_obj rx123_cstack, rx123_cur, rx123_curclass, "$!cstack"
  rx123_fail306:
    unless rx123_bstack, rx123_done304
    pop $I19, rx123_bstack
    if_null rx123_cstack, rx123_cstack_done309
    unless rx123_cstack, rx123_cstack_done309
    dec $I19
    set $P11, rx123_cstack[$I19]
  rx123_cstack_done309:
    pop rx123_rep, rx123_bstack
    pop rx123_pos, rx123_bstack
    pop $I19, rx123_bstack
    lt rx123_pos, -1, rx123_done304
    lt rx123_pos, 0, rx123_fail306
    eq $I19, 0, rx123_fail306
    nqp_islist $I20, rx123_cstack
    unless $I20, rx123_jump307
    elements $I18, rx123_bstack
    le $I18, 0, rx123_cut308
    dec $I18
    set $I18, rx123_bstack[$I18]
  rx123_cut308:
    assign rx123_cstack, $I18
  rx123_jump307:
    jump $I19
  rx123_done304:
    rx123_cur."!cursor_fail"()
    .return (rx123_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_185_1361537946.1303") :anon :lex :outer("cuid_19_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 120

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_20_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 123
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_186_1361537946.1303' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx130_start
    .local string rx130_tgt
    .local int rx130_pos
    .local int rx130_off
    .local int rx130_eos
    .local int rx130_rep
    .local pmc rx130_cur
    .local pmc rx130_curclass
    .local pmc rx130_bstack
    .local pmc rx130_cstack
    rx130_start = self."!cursor_start_all"()
    set rx130_cur, rx130_start[0]
    set rx130_tgt, rx130_start[1]
    set rx130_pos, rx130_start[2]
    set rx130_curclass, rx130_start[3]
    set rx130_bstack, rx130_start[4]
    set $I19, rx130_start[5]
    store_lex unicode:"$\x{a2}", rx130_cur
    length rx130_eos, rx130_tgt
    eq $I19, 1, rx130_restart323
    gt rx130_pos, rx130_eos, rx130_fail324
    repr_get_attr_int $I11, self, rx130_curclass, "$!from"
    ne $I11, -1, rxscan131_done330
    goto rxscan131_scan329
  rxscan131_loop328:
    inc rx130_pos
    gt rx130_pos, rx130_eos, rx130_fail324
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!from", rx130_pos
  rxscan131_scan329:
    nqp_rxmark rx130_bstack, rxscan131_loop328, rx130_pos, 0
  rxscan131_done330:
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!pos", rx130_pos
    $P11 = rx130_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx130_curclass, "$!pos"
    lt $I11, 0, rx130_fail324
    nqp_rxmark rx130_bstack, rxsubrule132_pass331, -1, 0
  rxsubrule132_pass331:
    rx130_cstack = rx130_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx130_pos, $P11, rx130_curclass, "$!pos"
    nqp_rxmark rx130_bstack, rxquantr133_done333, rx130_pos, 0
  rxquantr133_loop332:
    add $I11, rx130_pos, 2
    gt $I11, rx130_eos, rx130_fail324
    substr $S10, rx130_tgt, rx130_pos, 2
    ne $S10, ucs4:"&&", rx130_fail324
    add rx130_pos, 2
  alt134_0335:
    nqp_rxmark rx130_bstack, alt134_1337, rx130_pos, 0
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!pos", rx130_pos
    store_lex unicode:"$\x{a2}", rx130_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_186_1361537946.1303' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!pos", rx130_pos
    $P11 = rx130_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx130_curclass, "$!pos"
    lt $I11, 0, rx130_fail324
    nqp_rxmark rx130_bstack, rxsubrule135_pass336, -1, 0
  rxsubrule135_pass336:
    rx130_cstack = rx130_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx130_pos, $P11, rx130_curclass, "$!pos"
    goto alt134_end334
  alt134_1337:
    repr_bind_attr_int rx130_cur, rx130_curclass, "$!pos", rx130_pos
    $P11 = rx130_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx130_curclass, "$!pos"
    lt $I11, 0, rx130_fail324
    repr_get_attr_int rx130_pos, $P11, rx130_curclass, "$!pos"
  alt134_end334:
    nqp_rxpeek $I19, rx130_bstack, rxquantr133_done333
    inc $I19
    inc $I19
    set rx130_rep, rx130_bstack[$I19]
    nqp_rxcommit rx130_bstack, rxquantr133_done333
    inc rx130_rep
    nqp_rxmark rx130_bstack, rxquantr133_done333, rx130_pos, rx130_rep
    goto rxquantr133_loop332
  rxquantr133_done333:
    rx130_cur."!cursor_pass"(rx130_pos, "termconjseq", 'backtrack'=>1)
    .return (rx130_cur)
  rx130_restart323:
    repr_get_attr_obj rx130_cstack, rx130_cur, rx130_curclass, "$!cstack"
  rx130_fail324:
    unless rx130_bstack, rx130_done322
    pop $I19, rx130_bstack
    if_null rx130_cstack, rx130_cstack_done327
    unless rx130_cstack, rx130_cstack_done327
    dec $I19
    set $P11, rx130_cstack[$I19]
  rx130_cstack_done327:
    pop rx130_rep, rx130_bstack
    pop rx130_pos, rx130_bstack
    pop $I19, rx130_bstack
    lt rx130_pos, -1, rx130_done322
    lt rx130_pos, 0, rx130_fail324
    eq $I19, 0, rx130_fail324
    nqp_islist $I20, rx130_cstack
    unless $I20, rx130_jump325
    elements $I18, rx130_bstack
    le $I18, 0, rx130_cut326
    dec $I18
    set $I18, rx130_bstack[$I18]
  rx130_cut326:
    assign rx130_cstack, $I18
  rx130_jump325:
    jump $I19
  rx130_done322:
    rx130_cur."!cursor_fail"()
    .return (rx130_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_186_1361537946.1303") :anon :lex :outer("cuid_20_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 125

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_21_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 128
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_187_1361537946.1303' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx137_start
    .local string rx137_tgt
    .local int rx137_pos
    .local int rx137_off
    .local int rx137_eos
    .local int rx137_rep
    .local pmc rx137_cur
    .local pmc rx137_curclass
    .local pmc rx137_bstack
    .local pmc rx137_cstack
    rx137_start = self."!cursor_start_all"()
    set rx137_cur, rx137_start[0]
    set rx137_tgt, rx137_start[1]
    set rx137_pos, rx137_start[2]
    set rx137_curclass, rx137_start[3]
    set rx137_bstack, rx137_start[4]
    set $I19, rx137_start[5]
    store_lex unicode:"$\x{a2}", rx137_cur
    length rx137_eos, rx137_tgt
    eq $I19, 1, rx137_restart341
    gt rx137_pos, rx137_eos, rx137_fail342
    repr_get_attr_int $I11, self, rx137_curclass, "$!from"
    ne $I11, -1, rxscan138_done348
    goto rxscan138_scan347
  rxscan138_loop346:
    inc rx137_pos
    gt rx137_pos, rx137_eos, rx137_fail342
    repr_bind_attr_int rx137_cur, rx137_curclass, "$!from", rx137_pos
  rxscan138_scan347:
    nqp_rxmark rx137_bstack, rxscan138_loop346, rx137_pos, 0
  rxscan138_done348:
    repr_bind_attr_int rx137_cur, rx137_curclass, "$!pos", rx137_pos
    $P11 = rx137_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx137_curclass, "$!pos"
    lt $I11, 0, rx137_fail342
    nqp_rxmark rx137_bstack, rxsubrule139_pass349, -1, 0
  rxsubrule139_pass349:
    rx137_cstack = rx137_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx137_pos, $P11, rx137_curclass, "$!pos"
    nqp_rxmark rx137_bstack, rxquantr140_done351, rx137_pos, 0
  rxquantr140_loop350:
    add $I11, rx137_pos, 1
    gt $I11, rx137_eos, rx137_fail342
    substr $S10, rx137_tgt, rx137_pos, 1
    ne $S10, ucs4:"|", rx137_fail342
    add rx137_pos, 1
    ge rx137_pos, rx137_eos, rx137_fail342
    substr $S11, rx137_tgt, rx137_pos, 1
    index $I11, ucs4:"|", $S11
    ge $I11, 0, rx137_fail342
  alt141_0353:
    nqp_rxmark rx137_bstack, alt141_1355, rx137_pos, 0
    repr_bind_attr_int rx137_cur, rx137_curclass, "$!pos", rx137_pos
    store_lex unicode:"$\x{a2}", rx137_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_187_1361537946.1303' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx137_cur, rx137_curclass, "$!pos", rx137_pos
    $P11 = rx137_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx137_curclass, "$!pos"
    lt $I11, 0, rx137_fail342
    nqp_rxmark rx137_bstack, rxsubrule142_pass354, -1, 0
  rxsubrule142_pass354:
    rx137_cstack = rx137_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx137_pos, $P11, rx137_curclass, "$!pos"
    goto alt141_end352
  alt141_1355:
    repr_bind_attr_int rx137_cur, rx137_curclass, "$!pos", rx137_pos
    $P11 = rx137_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx137_curclass, "$!pos"
    lt $I11, 0, rx137_fail342
    repr_get_attr_int rx137_pos, $P11, rx137_curclass, "$!pos"
  alt141_end352:
    nqp_rxpeek $I19, rx137_bstack, rxquantr140_done351
    inc $I19
    inc $I19
    set rx137_rep, rx137_bstack[$I19]
    nqp_rxcommit rx137_bstack, rxquantr140_done351
    inc rx137_rep
    nqp_rxmark rx137_bstack, rxquantr140_done351, rx137_pos, rx137_rep
    goto rxquantr140_loop350
  rxquantr140_done351:
    rx137_cur."!cursor_pass"(rx137_pos, "termalt", 'backtrack'=>1)
    .return (rx137_cur)
  rx137_restart341:
    repr_get_attr_obj rx137_cstack, rx137_cur, rx137_curclass, "$!cstack"
  rx137_fail342:
    unless rx137_bstack, rx137_done340
    pop $I19, rx137_bstack
    if_null rx137_cstack, rx137_cstack_done345
    unless rx137_cstack, rx137_cstack_done345
    dec $I19
    set $P11, rx137_cstack[$I19]
  rx137_cstack_done345:
    pop rx137_rep, rx137_bstack
    pop rx137_pos, rx137_bstack
    pop $I19, rx137_bstack
    lt rx137_pos, -1, rx137_done340
    lt rx137_pos, 0, rx137_fail342
    eq $I19, 0, rx137_fail342
    nqp_islist $I20, rx137_cstack
    unless $I20, rx137_jump343
    elements $I18, rx137_bstack
    le $I18, 0, rx137_cut344
    dec $I18
    set $I18, rx137_bstack[$I18]
  rx137_cut344:
    assign rx137_cstack, $I18
  rx137_jump343:
    jump $I19
  rx137_done340:
    rx137_cur."!cursor_fail"()
    .return (rx137_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_187_1361537946.1303") :anon :lex :outer("cuid_21_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 130

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_22_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 133
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_188_1361537946.1303' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx144_start
    .local string rx144_tgt
    .local int rx144_pos
    .local int rx144_off
    .local int rx144_eos
    .local int rx144_rep
    .local pmc rx144_cur
    .local pmc rx144_curclass
    .local pmc rx144_bstack
    .local pmc rx144_cstack
    rx144_start = self."!cursor_start_all"()
    set rx144_cur, rx144_start[0]
    set rx144_tgt, rx144_start[1]
    set rx144_pos, rx144_start[2]
    set rx144_curclass, rx144_start[3]
    set rx144_bstack, rx144_start[4]
    set $I19, rx144_start[5]
    store_lex unicode:"$\x{a2}", rx144_cur
    length rx144_eos, rx144_tgt
    eq $I19, 1, rx144_restart359
    gt rx144_pos, rx144_eos, rx144_fail360
    repr_get_attr_int $I11, self, rx144_curclass, "$!from"
    ne $I11, -1, rxscan145_done366
    goto rxscan145_scan365
  rxscan145_loop364:
    inc rx144_pos
    gt rx144_pos, rx144_eos, rx144_fail360
    repr_bind_attr_int rx144_cur, rx144_curclass, "$!from", rx144_pos
  rxscan145_scan365:
    nqp_rxmark rx144_bstack, rxscan145_loop364, rx144_pos, 0
  rxscan145_done366:
    repr_bind_attr_int rx144_cur, rx144_curclass, "$!pos", rx144_pos
    $P11 = rx144_cur."termish"()
    repr_get_attr_int $I11, $P11, rx144_curclass, "$!pos"
    lt $I11, 0, rx144_fail360
    nqp_rxmark rx144_bstack, rxsubrule146_pass367, -1, 0
  rxsubrule146_pass367:
    rx144_cstack = rx144_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx144_pos, $P11, rx144_curclass, "$!pos"
    nqp_rxmark rx144_bstack, rxquantr147_done369, rx144_pos, 0
  rxquantr147_loop368:
    add $I11, rx144_pos, 1
    gt $I11, rx144_eos, rx144_fail360
    substr $S10, rx144_tgt, rx144_pos, 1
    ne $S10, ucs4:"&", rx144_fail360
    add rx144_pos, 1
    ge rx144_pos, rx144_eos, rx144_fail360
    substr $S11, rx144_tgt, rx144_pos, 1
    index $I11, ucs4:"&", $S11
    ge $I11, 0, rx144_fail360
  alt148_0371:
    nqp_rxmark rx144_bstack, alt148_1373, rx144_pos, 0
    repr_bind_attr_int rx144_cur, rx144_curclass, "$!pos", rx144_pos
    store_lex unicode:"$\x{a2}", rx144_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_188_1361537946.1303' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx144_cur, rx144_curclass, "$!pos", rx144_pos
    $P11 = rx144_cur."termish"()
    repr_get_attr_int $I11, $P11, rx144_curclass, "$!pos"
    lt $I11, 0, rx144_fail360
    nqp_rxmark rx144_bstack, rxsubrule149_pass372, -1, 0
  rxsubrule149_pass372:
    rx144_cstack = rx144_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx144_pos, $P11, rx144_curclass, "$!pos"
    goto alt148_end370
  alt148_1373:
    repr_bind_attr_int rx144_cur, rx144_curclass, "$!pos", rx144_pos
    $P11 = rx144_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx144_curclass, "$!pos"
    lt $I11, 0, rx144_fail360
    repr_get_attr_int rx144_pos, $P11, rx144_curclass, "$!pos"
  alt148_end370:
    nqp_rxpeek $I19, rx144_bstack, rxquantr147_done369
    inc $I19
    inc $I19
    set rx144_rep, rx144_bstack[$I19]
    nqp_rxcommit rx144_bstack, rxquantr147_done369
    inc rx144_rep
    nqp_rxmark rx144_bstack, rxquantr147_done369, rx144_pos, rx144_rep
    goto rxquantr147_loop368
  rxquantr147_done369:
    rx144_cur."!cursor_pass"(rx144_pos, "termconj", 'backtrack'=>1)
    .return (rx144_cur)
  rx144_restart359:
    repr_get_attr_obj rx144_cstack, rx144_cur, rx144_curclass, "$!cstack"
  rx144_fail360:
    unless rx144_bstack, rx144_done358
    pop $I19, rx144_bstack
    if_null rx144_cstack, rx144_cstack_done363
    unless rx144_cstack, rx144_cstack_done363
    dec $I19
    set $P11, rx144_cstack[$I19]
  rx144_cstack_done363:
    pop rx144_rep, rx144_bstack
    pop rx144_pos, rx144_bstack
    pop $I19, rx144_bstack
    lt rx144_pos, -1, rx144_done358
    lt rx144_pos, 0, rx144_fail360
    eq $I19, 0, rx144_fail360
    nqp_islist $I20, rx144_cstack
    unless $I20, rx144_jump361
    elements $I18, rx144_bstack
    le $I18, 0, rx144_cut362
    dec $I18
    set $I18, rx144_bstack[$I18]
  rx144_cut362:
    assign rx144_cstack, $I18
  rx144_jump361:
    jump $I19
  rx144_done358:
    rx144_cur."!cursor_fail"()
    .return (rx144_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_188_1361537946.1303") :anon :lex :outer("cuid_22_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 135

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_23_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 138
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_24_1361537946.1303' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_25_1361537946.1303' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_189_1361537946.1303' 
    capture_lex $P5006 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx151_start
    .local string rx151_tgt
    .local int rx151_pos
    .local int rx151_off
    .local int rx151_eos
    .local int rx151_rep
    .local pmc rx151_cur
    .local pmc rx151_curclass
    .local pmc rx151_bstack
    .local pmc rx151_cstack
    rx151_start = self."!cursor_start_all"()
    set rx151_cur, rx151_start[0]
    set rx151_tgt, rx151_start[1]
    set rx151_pos, rx151_start[2]
    set rx151_curclass, rx151_start[3]
    set rx151_bstack, rx151_start[4]
    set $I19, rx151_start[5]
    store_lex unicode:"$\x{a2}", rx151_cur
    length rx151_eos, rx151_tgt
    eq $I19, 1, rx151_restart377
    gt rx151_pos, rx151_eos, rx151_fail378
    repr_get_attr_int $I11, self, rx151_curclass, "$!from"
    ne $I11, -1, rxscan152_done384
    goto rxscan152_scan383
  rxscan152_loop382:
    inc rx151_pos
    gt rx151_pos, rx151_eos, rx151_fail378
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!from", rx151_pos
  rxscan152_scan383:
    nqp_rxmark rx151_bstack, rxscan152_loop382, rx151_pos, 0
  rxscan152_done384:
  alt153_0386:
    nqp_rxmark rx151_bstack, alt153_1391, rx151_pos, 0
    nqp_rxmark rx151_bstack, rxquantr154_done388, -1, 0
  rxquantr154_loop387:
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    $P11 = rx151_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx151_curclass, "$!pos"
    lt $I11, 0, rx151_fail378
    goto rxsubrule155_pass389
  rxsubrule155_back390:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx151_curclass, "$!pos"
    lt $I11, 0, rx151_fail378
  rxsubrule155_pass389:
    rx151_cstack = rx151_cur."!cursor_capture"($P11, "noun")
    set_addr $I11, rxsubrule155_back390
    push rx151_bstack, $I11
    push rx151_bstack, 0
    push rx151_bstack, rx151_pos
    elements $I11, rx151_cstack
    push rx151_bstack, $I11
    repr_get_attr_int rx151_pos, $P11, rx151_curclass, "$!pos"
    nqp_rxpeek $I19, rx151_bstack, rxquantr154_done388
    inc $I19
    inc $I19
    set rx151_rep, rx151_bstack[$I19]
    nqp_rxcommit rx151_bstack, rxquantr154_done388
    inc rx151_rep
    nqp_rxmark rx151_bstack, rxquantr154_done388, rx151_pos, rx151_rep
    goto rxquantr154_loop387
  rxquantr154_done388:
    goto alt153_end385
  alt153_1391:
    nqp_rxmark rx151_bstack, alt153_2407, rx151_pos, 0
    .const 'Sub' $P5001 = 'cuid_24_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    $P11 = rx151_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx151_curclass, "$!pos"
    lt $I11, 0, rx151_fail378
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    $P11 = rx151_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx151_curclass, "$!pos"
    lt $I11, 0, rx151_fail378
    repr_get_attr_int rx151_pos, $P11, rx151_curclass, "$!pos"
    goto alt153_end385
  alt153_2407:
    .const 'Sub' $P5002 = 'cuid_25_1361537946.1303' 
    capture_lex $P5002
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    $P11 = rx151_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx151_curclass, "$!pos"
    lt $I11, 0, rx151_fail378
    nqp_rxmark rx151_bstack, rxsubrule163_pass418, -1, 0
  rxsubrule163_pass418:
    rx151_cstack = rx151_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx151_pos, $P11, rx151_curclass, "$!pos"
    repr_bind_attr_int rx151_cur, rx151_curclass, "$!pos", rx151_pos
    store_lex unicode:"$\x{a2}", rx151_cur
    $P5003 = $P101."MATCH"()
    set $P102, $P5003
    .const 'Sub' $P5004 = 'cuid_189_1361537946.1303' 
    capture_lex $P5004
    $P5005 = $P5004()
  alt153_end385:
    rx151_cur."!cursor_pass"(rx151_pos, "termish", 'backtrack'=>1)
    .return (rx151_cur)
  rx151_restart377:
    repr_get_attr_obj rx151_cstack, rx151_cur, rx151_curclass, "$!cstack"
  rx151_fail378:
    unless rx151_bstack, rx151_done376
    pop $I19, rx151_bstack
    if_null rx151_cstack, rx151_cstack_done381
    unless rx151_cstack, rx151_cstack_done381
    dec $I19
    set $P11, rx151_cstack[$I19]
  rx151_cstack_done381:
    pop rx151_rep, rx151_bstack
    pop rx151_pos, rx151_bstack
    pop $I19, rx151_bstack
    lt rx151_pos, -1, rx151_done376
    lt rx151_pos, 0, rx151_fail378
    eq $I19, 0, rx151_fail378
    nqp_islist $I20, rx151_cstack
    unless $I20, rx151_jump379
    elements $I18, rx151_bstack
    le $I18, 0, rx151_cut380
    dec $I18
    set $I18, rx151_bstack[$I18]
  rx151_cut380:
    assign rx151_cstack, $I18
  rx151_jump379:
    jump $I19
  rx151_done376:
    rx151_cur."!cursor_fail"()
    .return (rx151_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_24_1361537946.1303") :anon :lex :outer("cuid_23_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx156_start
    .local string rx156_tgt
    .local int rx156_pos
    .local int rx156_off
    .local int rx156_eos
    .local int rx156_rep
    .local pmc rx156_cur
    .local pmc rx156_curclass
    .local pmc rx156_bstack
    .local pmc rx156_cstack
    rx156_start = self."!cursor_start_all"()
    set rx156_cur, rx156_start[0]
    set rx156_tgt, rx156_start[1]
    set rx156_pos, rx156_start[2]
    set rx156_curclass, rx156_start[3]
    set rx156_bstack, rx156_start[4]
    set $I19, rx156_start[5]
    store_lex unicode:"$\x{a2}", rx156_cur
    length rx156_eos, rx156_tgt
    eq $I19, 1, rx156_restart394
    gt rx156_pos, rx156_eos, rx156_fail395
    repr_get_attr_int $I11, self, rx156_curclass, "$!from"
    ne $I11, -1, rxscan157_done401
    goto rxscan157_scan400
  rxscan157_loop399:
    inc rx156_pos
    gt rx156_pos, rx156_eos, rx156_fail395
    repr_bind_attr_int rx156_cur, rx156_curclass, "$!from", rx156_pos
  rxscan157_scan400:
    nqp_rxmark rx156_bstack, rxscan157_loop399, rx156_pos, 0
  rxscan157_done401:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt158_0403
    nqp_push_label $P11, alt158_1405
    nqp_rxmark rx156_bstack, alt158_end402, -1, 0
    rx156_cur."!alt"(rx156_pos, "alt_nfa__6_1361537946.6295", $P11)
    goto rx156_fail395
  alt158_0403:
    repr_bind_attr_int rx156_cur, rx156_curclass, "$!pos", rx156_pos
    $P11 = rx156_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx156_curclass, "$!pos"
    lt $I11, 0, rx156_fail395
    nqp_rxmark rx156_bstack, rxsubrule159_pass404, -1, 0
  rxsubrule159_pass404:
    rx156_cstack = rx156_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx156_pos, $P11, rx156_curclass, "$!pos"
    goto alt158_end402
  alt158_1405:
    ge rx156_pos, rx156_eos, rx156_fail395
    substr $S11, rx156_tgt, rx156_pos, 1
    index $I11, ucs4:"&|~", $S11
    lt $I11, 0, rx156_fail395
    inc rx156_pos
    goto alt158_end402
  alt158_end402:
    rx156_cur."!cursor_pass"(rx156_pos, 'backtrack'=>1)
    .return (rx156_cur)
  rx156_restart394:
    repr_get_attr_obj rx156_cstack, rx156_cur, rx156_curclass, "$!cstack"
  rx156_fail395:
    unless rx156_bstack, rx156_done393
    pop $I19, rx156_bstack
    if_null rx156_cstack, rx156_cstack_done398
    unless rx156_cstack, rx156_cstack_done398
    dec $I19
    set $P11, rx156_cstack[$I19]
  rx156_cstack_done398:
    pop rx156_rep, rx156_bstack
    pop rx156_pos, rx156_bstack
    pop $I19, rx156_bstack
    lt rx156_pos, -1, rx156_done393
    lt rx156_pos, 0, rx156_fail395
    eq $I19, 0, rx156_fail395
    nqp_islist $I20, rx156_cstack
    unless $I20, rx156_jump396
    elements $I18, rx156_bstack
    le $I18, 0, rx156_cut397
    dec $I18
    set $I18, rx156_bstack[$I18]
  rx156_cut397:
    assign rx156_cstack, $I18
  rx156_jump396:
    jump $I19
  rx156_done393:
    rx156_cur."!cursor_fail"()
    .return (rx156_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_25_1361537946.1303") :anon :lex :outer("cuid_23_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx161_start
    .local string rx161_tgt
    .local int rx161_pos
    .local int rx161_off
    .local int rx161_eos
    .local int rx161_rep
    .local pmc rx161_cur
    .local pmc rx161_curclass
    .local pmc rx161_bstack
    .local pmc rx161_cstack
    rx161_start = self."!cursor_start_all"()
    set rx161_cur, rx161_start[0]
    set rx161_tgt, rx161_start[1]
    set rx161_pos, rx161_start[2]
    set rx161_curclass, rx161_start[3]
    set rx161_bstack, rx161_start[4]
    set $I19, rx161_start[5]
    store_lex unicode:"$\x{a2}", rx161_cur
    length rx161_eos, rx161_tgt
    eq $I19, 1, rx161_restart410
    gt rx161_pos, rx161_eos, rx161_fail411
    repr_get_attr_int $I11, self, rx161_curclass, "$!from"
    ne $I11, -1, rxscan162_done417
    goto rxscan162_scan416
  rxscan162_loop415:
    inc rx161_pos
    gt rx161_pos, rx161_eos, rx161_fail411
    repr_bind_attr_int rx161_cur, rx161_curclass, "$!from", rx161_pos
  rxscan162_scan416:
    nqp_rxmark rx161_bstack, rxscan162_loop415, rx161_pos, 0
  rxscan162_done417:
    ge rx161_pos, rx161_eos, rx161_fail411
    is_cclass $I11, .CCLASS_WORD, rx161_tgt, rx161_pos
    if $I11, rx161_fail411
    add rx161_pos, 1
    rx161_cur."!cursor_pass"(rx161_pos, 'backtrack'=>1)
    .return (rx161_cur)
  rx161_restart410:
    repr_get_attr_obj rx161_cstack, rx161_cur, rx161_curclass, "$!cstack"
  rx161_fail411:
    unless rx161_bstack, rx161_done409
    pop $I19, rx161_bstack
    if_null rx161_cstack, rx161_cstack_done414
    unless rx161_cstack, rx161_cstack_done414
    dec $I19
    set $P11, rx161_cstack[$I19]
  rx161_cstack_done414:
    pop rx161_rep, rx161_bstack
    pop rx161_pos, rx161_bstack
    pop $I19, rx161_bstack
    lt rx161_pos, -1, rx161_done409
    lt rx161_pos, 0, rx161_fail411
    eq $I19, 0, rx161_fail411
    nqp_islist $I20, rx161_cstack
    unless $I20, rx161_jump412
    elements $I18, rx161_bstack
    le $I18, 0, rx161_cut413
    dec $I18
    set $I18, rx161_bstack[$I18]
  rx161_cut413:
    assign rx161_cstack, $I18
  rx161_jump412:
    jump $I19
  rx161_done409:
    rx161_cur."!cursor_fail"()
    .return (rx161_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_189_1361537946.1303") :anon :lex :outer("cuid_23_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 141
    .local pmc fb_tmp_15 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_15, $P5003
    repr_defined $I5001, fb_tmp_15
    unless $I5001 goto if164_else419 
    set $P5004, fb_tmp_15[0]
    set $P5006, $P5004
    goto if164_end420
  if164_else419:
    null $P5005
    set $P5006, $P5005
  if164_end420:
    unless_null $P5006, vivi_165421
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_165421:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_26_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 144
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_27_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx166_start
    .local string rx166_tgt
    .local int rx166_pos
    .local int rx166_off
    .local int rx166_eos
    .local int rx166_rep
    .local pmc rx166_cur
    .local pmc rx166_curclass
    .local pmc rx166_bstack
    .local pmc rx166_cstack
    rx166_start = self."!cursor_start_all"()
    set rx166_cur, rx166_start[0]
    set rx166_tgt, rx166_start[1]
    set rx166_pos, rx166_start[2]
    set rx166_curclass, rx166_start[3]
    set rx166_bstack, rx166_start[4]
    set $I19, rx166_start[5]
    store_lex unicode:"$\x{a2}", rx166_cur
    length rx166_eos, rx166_tgt
    eq $I19, 1, rx166_restart424
    gt rx166_pos, rx166_eos, rx166_fail425
    repr_get_attr_int $I11, self, rx166_curclass, "$!from"
    ne $I11, -1, rxscan167_done431
    goto rxscan167_scan430
  rxscan167_loop429:
    inc rx166_pos
    gt rx166_pos, rx166_eos, rx166_fail425
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!from", rx166_pos
  rxscan167_scan430:
    nqp_rxmark rx166_bstack, rxscan167_loop429, rx166_pos, 0
  rxscan167_done431:
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!pos", rx166_pos
    $P11 = rx166_cur."atom"()
    repr_get_attr_int $I11, $P11, rx166_curclass, "$!pos"
    lt $I11, 0, rx166_fail425
    nqp_rxmark rx166_bstack, rxsubrule168_pass432, -1, 0
  rxsubrule168_pass432:
    rx166_cstack = rx166_cur."!cursor_capture"($P11, "atom")
    repr_get_attr_int rx166_pos, $P11, rx166_curclass, "$!pos"
    nqp_rxmark rx166_bstack, rxquantr169_done434, rx166_pos, 0
  rxquantr169_loop433:
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!pos", rx166_pos
    $P11 = rx166_cur."ws"()
    repr_get_attr_int $I11, $P11, rx166_curclass, "$!pos"
    lt $I11, 0, rx166_fail425
    repr_get_attr_int rx166_pos, $P11, rx166_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt171_0437
    nqp_push_label $P11, alt171_1439
    nqp_rxmark rx166_bstack, alt171_end436, -1, 0
    rx166_cur."!alt"(rx166_pos, "alt_nfa__7_1361537946.6919", $P11)
    goto rx166_fail425
  alt171_0437:
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!pos", rx166_pos
    $P11 = rx166_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx166_curclass, "$!pos"
    lt $I11, 0, rx166_fail425
    nqp_rxmark rx166_bstack, rxsubrule172_pass438, -1, 0
  rxsubrule172_pass438:
    rx166_cstack = rx166_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx166_pos, $P11, rx166_curclass, "$!pos"
    goto alt171_end436
  alt171_1439:
    .const 'Sub' $P5001 = 'cuid_27_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!pos", rx166_pos
    $P11 = rx166_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx166_curclass, "$!pos"
    lt $I11, 0, rx166_fail425
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!pos", rx166_pos
    $P11 = rx166_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx166_curclass, "$!pos"
    lt $I11, 0, rx166_fail425
    nqp_rxmark rx166_bstack, rxsubrule175_pass450, -1, 0
  rxsubrule175_pass450:
    rx166_cstack = rx166_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx166_pos, $P11, rx166_curclass, "$!pos"
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!pos", rx166_pos
    $P11 = rx166_cur."alpha"()
    repr_get_attr_int $I11, $P11, rx166_curclass, "$!pos"
    ge $I11, 0, rx166_fail425
    goto alt171_end436
  alt171_end436:
    nqp_rxcommit rx166_bstack, alt171_end436
    nqp_rxmark rx166_bstack, rxquantr176_done452, rx166_pos, 0
  rxquantr176_loop451:
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!pos", rx166_pos
    $P11 = rx166_cur."ws"()
    repr_get_attr_int $I11, $P11, rx166_curclass, "$!pos"
    lt $I11, 0, rx166_fail425
    repr_get_attr_int rx166_pos, $P11, rx166_curclass, "$!pos"
    repr_bind_attr_int rx166_cur, rx166_curclass, "$!pos", rx166_pos
    $P11 = rx166_cur."separator"()
    repr_get_attr_int $I11, $P11, rx166_curclass, "$!pos"
    lt $I11, 0, rx166_fail425
    nqp_rxmark rx166_bstack, rxsubrule178_pass454, -1, 0
  rxsubrule178_pass454:
    rx166_cstack = rx166_cur."!cursor_capture"($P11, "separator")
    repr_get_attr_int rx166_pos, $P11, rx166_curclass, "$!pos"
    nqp_rxpeek $I19, rx166_bstack, rxquantr176_done452
    inc $I19
    inc $I19
    set rx166_rep, rx166_bstack[$I19]
    nqp_rxcommit rx166_bstack, rxquantr176_done452
    inc rx166_rep
  rxquantr176_done452:
    nqp_rxpeek $I19, rx166_bstack, rxquantr169_done434
    inc $I19
    inc $I19
    set rx166_rep, rx166_bstack[$I19]
    nqp_rxcommit rx166_bstack, rxquantr169_done434
    inc rx166_rep
  rxquantr169_done434:
    rx166_cur."!cursor_pass"(rx166_pos, "quantified_atom", 'backtrack'=>1)
    .return (rx166_cur)
  rx166_restart424:
    repr_get_attr_obj rx166_cstack, rx166_cur, rx166_curclass, "$!cstack"
  rx166_fail425:
    unless rx166_bstack, rx166_done423
    pop $I19, rx166_bstack
    if_null rx166_cstack, rx166_cstack_done428
    unless rx166_cstack, rx166_cstack_done428
    dec $I19
    set $P11, rx166_cstack[$I19]
  rx166_cstack_done428:
    pop rx166_rep, rx166_bstack
    pop rx166_pos, rx166_bstack
    pop $I19, rx166_bstack
    lt rx166_pos, -1, rx166_done423
    lt rx166_pos, 0, rx166_fail425
    eq $I19, 0, rx166_fail425
    nqp_islist $I20, rx166_cstack
    unless $I20, rx166_jump426
    elements $I18, rx166_bstack
    le $I18, 0, rx166_cut427
    dec $I18
    set $I18, rx166_bstack[$I18]
  rx166_cut427:
    assign rx166_cstack, $I18
  rx166_jump426:
    jump $I19
  rx166_done423:
    rx166_cur."!cursor_fail"()
    .return (rx166_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_27_1361537946.1303") :anon :lex :outer("cuid_26_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx173_start
    .local string rx173_tgt
    .local int rx173_pos
    .local int rx173_off
    .local int rx173_eos
    .local int rx173_rep
    .local pmc rx173_cur
    .local pmc rx173_curclass
    .local pmc rx173_bstack
    .local pmc rx173_cstack
    rx173_start = self."!cursor_start_all"()
    set rx173_cur, rx173_start[0]
    set rx173_tgt, rx173_start[1]
    set rx173_pos, rx173_start[2]
    set rx173_curclass, rx173_start[3]
    set rx173_bstack, rx173_start[4]
    set $I19, rx173_start[5]
    store_lex unicode:"$\x{a2}", rx173_cur
    length rx173_eos, rx173_tgt
    eq $I19, 1, rx173_restart442
    gt rx173_pos, rx173_eos, rx173_fail443
    repr_get_attr_int $I11, self, rx173_curclass, "$!from"
    ne $I11, -1, rxscan174_done449
    goto rxscan174_scan448
  rxscan174_loop447:
    inc rx173_pos
    gt rx173_pos, rx173_eos, rx173_fail443
    repr_bind_attr_int rx173_cur, rx173_curclass, "$!from", rx173_pos
  rxscan174_scan448:
    nqp_rxmark rx173_bstack, rxscan174_loop447, rx173_pos, 0
  rxscan174_done449:
    add $I11, rx173_pos, 1
    gt $I11, rx173_eos, rx173_fail443
    substr $S10, rx173_tgt, rx173_pos, 1
    ne $S10, ucs4:":", rx173_fail443
    add rx173_pos, 1
    rx173_cur."!cursor_pass"(rx173_pos, 'backtrack'=>1)
    .return (rx173_cur)
  rx173_restart442:
    repr_get_attr_obj rx173_cstack, rx173_cur, rx173_curclass, "$!cstack"
  rx173_fail443:
    unless rx173_bstack, rx173_done441
    pop $I19, rx173_bstack
    if_null rx173_cstack, rx173_cstack_done446
    unless rx173_cstack, rx173_cstack_done446
    dec $I19
    set $P11, rx173_cstack[$I19]
  rx173_cstack_done446:
    pop rx173_rep, rx173_bstack
    pop rx173_pos, rx173_bstack
    pop $I19, rx173_bstack
    lt rx173_pos, -1, rx173_done441
    lt rx173_pos, 0, rx173_fail443
    eq $I19, 0, rx173_fail443
    nqp_islist $I20, rx173_cstack
    unless $I20, rx173_jump444
    elements $I18, rx173_bstack
    le $I18, 0, rx173_cut445
    dec $I18
    set $I18, rx173_bstack[$I18]
  rx173_cut445:
    assign rx173_cstack, $I18
  rx173_jump444:
    jump $I19
  rx173_done441:
    rx173_cur."!cursor_fail"()
    .return (rx173_cur) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_28_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 152
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx179_start
    .local string rx179_tgt
    .local int rx179_pos
    .local int rx179_off
    .local int rx179_eos
    .local int rx179_rep
    .local pmc rx179_cur
    .local pmc rx179_curclass
    .local pmc rx179_bstack
    .local pmc rx179_cstack
    rx179_start = self."!cursor_start_all"()
    set rx179_cur, rx179_start[0]
    set rx179_tgt, rx179_start[1]
    set rx179_pos, rx179_start[2]
    set rx179_curclass, rx179_start[3]
    set rx179_bstack, rx179_start[4]
    set $I19, rx179_start[5]
    store_lex unicode:"$\x{a2}", rx179_cur
    length rx179_eos, rx179_tgt
    eq $I19, 1, rx179_restart457
    gt rx179_pos, rx179_eos, rx179_fail458
    repr_get_attr_int $I11, self, rx179_curclass, "$!from"
    ne $I11, -1, rxscan180_done464
    goto rxscan180_scan463
  rxscan180_loop462:
    inc rx179_pos
    gt rx179_pos, rx179_eos, rx179_fail458
    repr_bind_attr_int rx179_cur, rx179_curclass, "$!from", rx179_pos
  rxscan180_scan463:
    nqp_rxmark rx179_bstack, rxscan180_loop462, rx179_pos, 0
  rxscan180_done464:
    nqp_rxmark rx179_bstack, rxcap181_fail466, rx179_pos, 0
    add $I11, rx179_pos, 1
    gt $I11, rx179_eos, rx179_fail458
    substr $S10, rx179_tgt, rx179_pos, 1
    ne $S10, ucs4:"%", rx179_fail458
    add rx179_pos, 1
    nqp_rxmark rx179_bstack, rxquantr182_done468, rx179_pos, 0
  rxquantr182_loop467:
    add $I11, rx179_pos, 1
    gt $I11, rx179_eos, rx179_fail458
    substr $S10, rx179_tgt, rx179_pos, 1
    ne $S10, ucs4:"%", rx179_fail458
    add rx179_pos, 1
    nqp_rxpeek $I19, rx179_bstack, rxquantr182_done468
    inc $I19
    inc $I19
    set rx179_rep, rx179_bstack[$I19]
    nqp_rxcommit rx179_bstack, rxquantr182_done468
    inc rx179_rep
  rxquantr182_done468:
    nqp_rxpeek $I19, rx179_bstack, rxcap181_fail466
    inc $I19
    set $I11, rx179_bstack[$I19]
    repr_bind_attr_int rx179_cur, rx179_curclass, "$!pos", rx179_pos
    $P11 = rx179_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx179_pos)
    rx179_cstack = rx179_cur."!cursor_capture"($P11, "septype")
    goto rxcap181_done465
  rxcap181_fail466:
    goto rx179_fail458
  rxcap181_done465:
    nqp_rxmark rx179_bstack, rxquantr183_done470, rx179_pos, 0
  rxquantr183_loop469:
    repr_bind_attr_int rx179_cur, rx179_curclass, "$!pos", rx179_pos
    $P11 = rx179_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx179_curclass, "$!pos"
    lt $I11, 0, rx179_fail458
    goto rxsubrule184_pass471
  rxsubrule184_back472:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx179_curclass, "$!pos"
    lt $I11, 0, rx179_fail458
  rxsubrule184_pass471:
    rx179_cstack = rx179_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule184_back472
    push rx179_bstack, $I11
    push rx179_bstack, 0
    push rx179_bstack, rx179_pos
    elements $I11, rx179_cstack
    push rx179_bstack, $I11
    repr_get_attr_int rx179_pos, $P11, rx179_curclass, "$!pos"
    nqp_rxpeek $I19, rx179_bstack, rxquantr183_done470
    inc $I19
    inc $I19
    set rx179_rep, rx179_bstack[$I19]
    nqp_rxcommit rx179_bstack, rxquantr183_done470
    inc rx179_rep
  rxquantr183_done470:
    repr_bind_attr_int rx179_cur, rx179_curclass, "$!pos", rx179_pos
    $P11 = rx179_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx179_curclass, "$!pos"
    lt $I11, 0, rx179_fail458
    nqp_rxmark rx179_bstack, rxsubrule185_pass473, -1, 0
  rxsubrule185_pass473:
    rx179_cstack = rx179_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx179_pos, $P11, rx179_curclass, "$!pos"
    rx179_cur."!cursor_pass"(rx179_pos, "separator", 'backtrack'=>1)
    .return (rx179_cur)
  rx179_restart457:
    repr_get_attr_obj rx179_cstack, rx179_cur, rx179_curclass, "$!cstack"
  rx179_fail458:
    unless rx179_bstack, rx179_done456
    pop $I19, rx179_bstack
    if_null rx179_cstack, rx179_cstack_done461
    unless rx179_cstack, rx179_cstack_done461
    dec $I19
    set $P11, rx179_cstack[$I19]
  rx179_cstack_done461:
    pop rx179_rep, rx179_bstack
    pop rx179_pos, rx179_bstack
    pop $I19, rx179_bstack
    lt rx179_pos, -1, rx179_done456
    lt rx179_pos, 0, rx179_fail458
    eq $I19, 0, rx179_fail458
    nqp_islist $I20, rx179_cstack
    unless $I20, rx179_jump459
    elements $I18, rx179_bstack
    le $I18, 0, rx179_cut460
    dec $I18
    set $I18, rx179_bstack[$I18]
  rx179_cut460:
    assign rx179_cstack, $I18
  rx179_jump459:
    jump $I19
  rx179_done456:
    rx179_cur."!cursor_fail"()
    .return (rx179_cur) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_29_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 156
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_30_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx186_start
    .local string rx186_tgt
    .local int rx186_pos
    .local int rx186_off
    .local int rx186_eos
    .local int rx186_rep
    .local pmc rx186_cur
    .local pmc rx186_curclass
    .local pmc rx186_bstack
    .local pmc rx186_cstack
    rx186_start = self."!cursor_start_all"()
    set rx186_cur, rx186_start[0]
    set rx186_tgt, rx186_start[1]
    set rx186_pos, rx186_start[2]
    set rx186_curclass, rx186_start[3]
    set rx186_bstack, rx186_start[4]
    set $I19, rx186_start[5]
    store_lex unicode:"$\x{a2}", rx186_cur
    length rx186_eos, rx186_tgt
    eq $I19, 1, rx186_restart476
    gt rx186_pos, rx186_eos, rx186_fail477
    repr_get_attr_int $I11, self, rx186_curclass, "$!from"
    ne $I11, -1, rxscan187_done483
    goto rxscan187_scan482
  rxscan187_loop481:
    inc rx186_pos
    gt rx186_pos, rx186_eos, rx186_fail477
    repr_bind_attr_int rx186_cur, rx186_curclass, "$!from", rx186_pos
  rxscan187_scan482:
    nqp_rxmark rx186_bstack, rxscan187_loop481, rx186_pos, 0
  rxscan187_done483:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt188_0485
    nqp_push_label $P11, alt188_1500
    nqp_rxmark rx186_bstack, alt188_end484, -1, 0
    rx186_cur."!alt"(rx186_pos, "alt_nfa__8_1361537946.7075", $P11)
    goto rx186_fail477
  alt188_0485:
    ge rx186_pos, rx186_eos, rx186_fail477
    is_cclass $I11, .CCLASS_WORD, rx186_tgt, rx186_pos
    unless $I11, rx186_fail477
    add rx186_pos, 1
    nqp_rxmark rx186_bstack, rxquantr189_done487, rx186_pos, 0
  rxquantr189_loop486:
  rxquantg190_loop488:
    ge rx186_pos, rx186_eos, rx186_fail477
    is_cclass $I11, .CCLASS_WORD, rx186_tgt, rx186_pos
    unless $I11, rx186_fail477
    add rx186_pos, 1
    nqp_rxmark rx186_bstack, rxquantg190_done489, rx186_pos, rx186_rep
    goto rxquantg190_loop488
  rxquantg190_done489:
    .const 'Sub' $P5001 = 'cuid_30_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx186_cur, rx186_curclass, "$!pos", rx186_pos
    $P11 = rx186_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx186_curclass, "$!pos"
    lt $I11, 0, rx186_fail477
    nqp_rxpeek $I19, rx186_bstack, rxquantr189_done487
    inc $I19
    inc $I19
    set rx186_rep, rx186_bstack[$I19]
    nqp_rxcommit rx186_bstack, rxquantr189_done487
    inc rx186_rep
  rxquantr189_done487:
    goto alt188_end484
  alt188_1500:
    repr_bind_attr_int rx186_cur, rx186_curclass, "$!pos", rx186_pos
    $P11 = rx186_cur."metachar"()
    repr_get_attr_int $I11, $P11, rx186_curclass, "$!pos"
    lt $I11, 0, rx186_fail477
    nqp_rxmark rx186_bstack, rxsubrule193_pass501, -1, 0
  rxsubrule193_pass501:
    rx186_cstack = rx186_cur."!cursor_capture"($P11, "metachar")
    repr_get_attr_int rx186_pos, $P11, rx186_curclass, "$!pos"
    goto alt188_end484
  alt188_end484:
    nqp_rxcommit rx186_bstack, alt188_end484
    rx186_cur."!cursor_pass"(rx186_pos, "atom", 'backtrack'=>1)
    .return (rx186_cur)
  rx186_restart476:
    repr_get_attr_obj rx186_cstack, rx186_cur, rx186_curclass, "$!cstack"
  rx186_fail477:
    unless rx186_bstack, rx186_done475
    pop $I19, rx186_bstack
    if_null rx186_cstack, rx186_cstack_done480
    unless rx186_cstack, rx186_cstack_done480
    dec $I19
    set $P11, rx186_cstack[$I19]
  rx186_cstack_done480:
    pop rx186_rep, rx186_bstack
    pop rx186_pos, rx186_bstack
    pop $I19, rx186_bstack
    lt rx186_pos, -1, rx186_done475
    lt rx186_pos, 0, rx186_fail477
    eq $I19, 0, rx186_fail477
    nqp_islist $I20, rx186_cstack
    unless $I20, rx186_jump478
    elements $I18, rx186_bstack
    le $I18, 0, rx186_cut479
    dec $I18
    set $I18, rx186_bstack[$I18]
  rx186_cut479:
    assign rx186_cstack, $I18
  rx186_jump478:
    jump $I19
  rx186_done475:
    rx186_cur."!cursor_fail"()
    .return (rx186_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_30_1361537946.1303") :anon :lex :outer("cuid_29_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx191_start
    .local string rx191_tgt
    .local int rx191_pos
    .local int rx191_off
    .local int rx191_eos
    .local int rx191_rep
    .local pmc rx191_cur
    .local pmc rx191_curclass
    .local pmc rx191_bstack
    .local pmc rx191_cstack
    rx191_start = self."!cursor_start_all"()
    set rx191_cur, rx191_start[0]
    set rx191_tgt, rx191_start[1]
    set rx191_pos, rx191_start[2]
    set rx191_curclass, rx191_start[3]
    set rx191_bstack, rx191_start[4]
    set $I19, rx191_start[5]
    store_lex unicode:"$\x{a2}", rx191_cur
    length rx191_eos, rx191_tgt
    eq $I19, 1, rx191_restart492
    gt rx191_pos, rx191_eos, rx191_fail493
    repr_get_attr_int $I11, self, rx191_curclass, "$!from"
    ne $I11, -1, rxscan192_done499
    goto rxscan192_scan498
  rxscan192_loop497:
    inc rx191_pos
    gt rx191_pos, rx191_eos, rx191_fail493
    repr_bind_attr_int rx191_cur, rx191_curclass, "$!from", rx191_pos
  rxscan192_scan498:
    nqp_rxmark rx191_bstack, rxscan192_loop497, rx191_pos, 0
  rxscan192_done499:
    ge rx191_pos, rx191_eos, rx191_fail493
    is_cclass $I11, .CCLASS_WORD, rx191_tgt, rx191_pos
    unless $I11, rx191_fail493
    add rx191_pos, 1
    rx191_cur."!cursor_pass"(rx191_pos, 'backtrack'=>1)
    .return (rx191_cur)
  rx191_restart492:
    repr_get_attr_obj rx191_cstack, rx191_cur, rx191_curclass, "$!cstack"
  rx191_fail493:
    unless rx191_bstack, rx191_done491
    pop $I19, rx191_bstack
    if_null rx191_cstack, rx191_cstack_done496
    unless rx191_cstack, rx191_cstack_done496
    dec $I19
    set $P11, rx191_cstack[$I19]
  rx191_cstack_done496:
    pop rx191_rep, rx191_bstack
    pop rx191_pos, rx191_bstack
    pop $I19, rx191_bstack
    lt rx191_pos, -1, rx191_done491
    lt rx191_pos, 0, rx191_fail493
    eq $I19, 0, rx191_fail493
    nqp_islist $I20, rx191_cstack
    unless $I20, rx191_jump494
    elements $I18, rx191_bstack
    le $I18, 0, rx191_cut495
    dec $I18
    set $I18, rx191_bstack[$I18]
  rx191_cut495:
    assign rx191_cstack, $I18
  rx191_jump494:
    jump $I19
  rx191_done491:
    rx191_cur."!cursor_fail"()
    .return (rx191_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier" :subid("cuid_31_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 164
    .param pmc self 
    $P5001 = self."!protoregex"("quantifier")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_32_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 165
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx194_start
    .local string rx194_tgt
    .local int rx194_pos
    .local int rx194_off
    .local int rx194_eos
    .local int rx194_rep
    .local pmc rx194_cur
    .local pmc rx194_curclass
    .local pmc rx194_bstack
    .local pmc rx194_cstack
    rx194_start = self."!cursor_start_all"()
    set rx194_cur, rx194_start[0]
    set rx194_tgt, rx194_start[1]
    set rx194_pos, rx194_start[2]
    set rx194_curclass, rx194_start[3]
    set rx194_bstack, rx194_start[4]
    set $I19, rx194_start[5]
    store_lex unicode:"$\x{a2}", rx194_cur
    length rx194_eos, rx194_tgt
    eq $I19, 1, rx194_restart504
    gt rx194_pos, rx194_eos, rx194_fail505
    repr_get_attr_int $I11, self, rx194_curclass, "$!from"
    ne $I11, -1, rxscan195_done511
    goto rxscan195_scan510
  rxscan195_loop509:
    inc rx194_pos
    gt rx194_pos, rx194_eos, rx194_fail505
    repr_bind_attr_int rx194_cur, rx194_curclass, "$!from", rx194_pos
  rxscan195_scan510:
    nqp_rxmark rx194_bstack, rxscan195_loop509, rx194_pos, 0
  rxscan195_done511:
    nqp_rxmark rx194_bstack, rxcap196_fail513, rx194_pos, 0
    add $I11, rx194_pos, 1
    gt $I11, rx194_eos, rx194_fail505
    substr $S10, rx194_tgt, rx194_pos, 1
    ne $S10, ucs4:"*", rx194_fail505
    add rx194_pos, 1
    nqp_rxpeek $I19, rx194_bstack, rxcap196_fail513
    inc $I19
    set $I11, rx194_bstack[$I19]
    repr_bind_attr_int rx194_cur, rx194_curclass, "$!pos", rx194_pos
    $P11 = rx194_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx194_pos)
    rx194_cstack = rx194_cur."!cursor_capture"($P11, "sym")
    goto rxcap196_done512
  rxcap196_fail513:
    goto rx194_fail505
  rxcap196_done512:
    repr_bind_attr_int rx194_cur, rx194_curclass, "$!pos", rx194_pos
    $P11 = rx194_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx194_curclass, "$!pos"
    lt $I11, 0, rx194_fail505
    nqp_rxmark rx194_bstack, rxsubrule197_pass514, -1, 0
  rxsubrule197_pass514:
    rx194_cstack = rx194_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx194_pos, $P11, rx194_curclass, "$!pos"
    rx194_cur."!cursor_pass"(rx194_pos, "quantifier:sym<*>", 'backtrack'=>1)
    .return (rx194_cur)
  rx194_restart504:
    repr_get_attr_obj rx194_cstack, rx194_cur, rx194_curclass, "$!cstack"
  rx194_fail505:
    unless rx194_bstack, rx194_done503
    pop $I19, rx194_bstack
    if_null rx194_cstack, rx194_cstack_done508
    unless rx194_cstack, rx194_cstack_done508
    dec $I19
    set $P11, rx194_cstack[$I19]
  rx194_cstack_done508:
    pop rx194_rep, rx194_bstack
    pop rx194_pos, rx194_bstack
    pop $I19, rx194_bstack
    lt rx194_pos, -1, rx194_done503
    lt rx194_pos, 0, rx194_fail505
    eq $I19, 0, rx194_fail505
    nqp_islist $I20, rx194_cstack
    unless $I20, rx194_jump506
    elements $I18, rx194_bstack
    le $I18, 0, rx194_cut507
    dec $I18
    set $I18, rx194_bstack[$I18]
  rx194_cut507:
    assign rx194_cstack, $I18
  rx194_jump506:
    jump $I19
  rx194_done503:
    rx194_cur."!cursor_fail"()
    .return (rx194_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_33_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 166
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx198_start
    .local string rx198_tgt
    .local int rx198_pos
    .local int rx198_off
    .local int rx198_eos
    .local int rx198_rep
    .local pmc rx198_cur
    .local pmc rx198_curclass
    .local pmc rx198_bstack
    .local pmc rx198_cstack
    rx198_start = self."!cursor_start_all"()
    set rx198_cur, rx198_start[0]
    set rx198_tgt, rx198_start[1]
    set rx198_pos, rx198_start[2]
    set rx198_curclass, rx198_start[3]
    set rx198_bstack, rx198_start[4]
    set $I19, rx198_start[5]
    store_lex unicode:"$\x{a2}", rx198_cur
    length rx198_eos, rx198_tgt
    eq $I19, 1, rx198_restart517
    gt rx198_pos, rx198_eos, rx198_fail518
    repr_get_attr_int $I11, self, rx198_curclass, "$!from"
    ne $I11, -1, rxscan199_done524
    goto rxscan199_scan523
  rxscan199_loop522:
    inc rx198_pos
    gt rx198_pos, rx198_eos, rx198_fail518
    repr_bind_attr_int rx198_cur, rx198_curclass, "$!from", rx198_pos
  rxscan199_scan523:
    nqp_rxmark rx198_bstack, rxscan199_loop522, rx198_pos, 0
  rxscan199_done524:
    nqp_rxmark rx198_bstack, rxcap200_fail526, rx198_pos, 0
    add $I11, rx198_pos, 1
    gt $I11, rx198_eos, rx198_fail518
    substr $S10, rx198_tgt, rx198_pos, 1
    ne $S10, ucs4:"+", rx198_fail518
    add rx198_pos, 1
    nqp_rxpeek $I19, rx198_bstack, rxcap200_fail526
    inc $I19
    set $I11, rx198_bstack[$I19]
    repr_bind_attr_int rx198_cur, rx198_curclass, "$!pos", rx198_pos
    $P11 = rx198_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx198_pos)
    rx198_cstack = rx198_cur."!cursor_capture"($P11, "sym")
    goto rxcap200_done525
  rxcap200_fail526:
    goto rx198_fail518
  rxcap200_done525:
    repr_bind_attr_int rx198_cur, rx198_curclass, "$!pos", rx198_pos
    $P11 = rx198_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx198_curclass, "$!pos"
    lt $I11, 0, rx198_fail518
    nqp_rxmark rx198_bstack, rxsubrule201_pass527, -1, 0
  rxsubrule201_pass527:
    rx198_cstack = rx198_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx198_pos, $P11, rx198_curclass, "$!pos"
    rx198_cur."!cursor_pass"(rx198_pos, "quantifier:sym<+>", 'backtrack'=>1)
    .return (rx198_cur)
  rx198_restart517:
    repr_get_attr_obj rx198_cstack, rx198_cur, rx198_curclass, "$!cstack"
  rx198_fail518:
    unless rx198_bstack, rx198_done516
    pop $I19, rx198_bstack
    if_null rx198_cstack, rx198_cstack_done521
    unless rx198_cstack, rx198_cstack_done521
    dec $I19
    set $P11, rx198_cstack[$I19]
  rx198_cstack_done521:
    pop rx198_rep, rx198_bstack
    pop rx198_pos, rx198_bstack
    pop $I19, rx198_bstack
    lt rx198_pos, -1, rx198_done516
    lt rx198_pos, 0, rx198_fail518
    eq $I19, 0, rx198_fail518
    nqp_islist $I20, rx198_cstack
    unless $I20, rx198_jump519
    elements $I18, rx198_bstack
    le $I18, 0, rx198_cut520
    dec $I18
    set $I18, rx198_bstack[$I18]
  rx198_cut520:
    assign rx198_cstack, $I18
  rx198_jump519:
    jump $I19
  rx198_done516:
    rx198_cur."!cursor_fail"()
    .return (rx198_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_34_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 167
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx202_start
    .local string rx202_tgt
    .local int rx202_pos
    .local int rx202_off
    .local int rx202_eos
    .local int rx202_rep
    .local pmc rx202_cur
    .local pmc rx202_curclass
    .local pmc rx202_bstack
    .local pmc rx202_cstack
    rx202_start = self."!cursor_start_all"()
    set rx202_cur, rx202_start[0]
    set rx202_tgt, rx202_start[1]
    set rx202_pos, rx202_start[2]
    set rx202_curclass, rx202_start[3]
    set rx202_bstack, rx202_start[4]
    set $I19, rx202_start[5]
    store_lex unicode:"$\x{a2}", rx202_cur
    length rx202_eos, rx202_tgt
    eq $I19, 1, rx202_restart530
    gt rx202_pos, rx202_eos, rx202_fail531
    repr_get_attr_int $I11, self, rx202_curclass, "$!from"
    ne $I11, -1, rxscan203_done537
    goto rxscan203_scan536
  rxscan203_loop535:
    inc rx202_pos
    gt rx202_pos, rx202_eos, rx202_fail531
    repr_bind_attr_int rx202_cur, rx202_curclass, "$!from", rx202_pos
  rxscan203_scan536:
    nqp_rxmark rx202_bstack, rxscan203_loop535, rx202_pos, 0
  rxscan203_done537:
    nqp_rxmark rx202_bstack, rxcap204_fail539, rx202_pos, 0
    add $I11, rx202_pos, 1
    gt $I11, rx202_eos, rx202_fail531
    substr $S10, rx202_tgt, rx202_pos, 1
    ne $S10, ucs4:"?", rx202_fail531
    add rx202_pos, 1
    nqp_rxpeek $I19, rx202_bstack, rxcap204_fail539
    inc $I19
    set $I11, rx202_bstack[$I19]
    repr_bind_attr_int rx202_cur, rx202_curclass, "$!pos", rx202_pos
    $P11 = rx202_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx202_pos)
    rx202_cstack = rx202_cur."!cursor_capture"($P11, "sym")
    goto rxcap204_done538
  rxcap204_fail539:
    goto rx202_fail531
  rxcap204_done538:
    repr_bind_attr_int rx202_cur, rx202_curclass, "$!pos", rx202_pos
    $P11 = rx202_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx202_curclass, "$!pos"
    lt $I11, 0, rx202_fail531
    nqp_rxmark rx202_bstack, rxsubrule205_pass540, -1, 0
  rxsubrule205_pass540:
    rx202_cstack = rx202_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx202_pos, $P11, rx202_curclass, "$!pos"
    rx202_cur."!cursor_pass"(rx202_pos, "quantifier:sym<?>", 'backtrack'=>1)
    .return (rx202_cur)
  rx202_restart530:
    repr_get_attr_obj rx202_cstack, rx202_cur, rx202_curclass, "$!cstack"
  rx202_fail531:
    unless rx202_bstack, rx202_done529
    pop $I19, rx202_bstack
    if_null rx202_cstack, rx202_cstack_done534
    unless rx202_cstack, rx202_cstack_done534
    dec $I19
    set $P11, rx202_cstack[$I19]
  rx202_cstack_done534:
    pop rx202_rep, rx202_bstack
    pop rx202_pos, rx202_bstack
    pop $I19, rx202_bstack
    lt rx202_pos, -1, rx202_done529
    lt rx202_pos, 0, rx202_fail531
    eq $I19, 0, rx202_fail531
    nqp_islist $I20, rx202_cstack
    unless $I20, rx202_jump532
    elements $I18, rx202_bstack
    le $I18, 0, rx202_cut533
    dec $I18
    set $I18, rx202_bstack[$I18]
  rx202_cut533:
    assign rx202_cstack, $I18
  rx202_jump532:
    jump $I19
  rx202_done529:
    rx202_cur."!cursor_fail"()
    .return (rx202_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<{N,M}>" :subid("cuid_35_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 168
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_190_1361537946.1303' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_36_1361537946.1303' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_37_1361537946.1303' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_38_1361537946.1303' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx206_start
    .local string rx206_tgt
    .local int rx206_pos
    .local int rx206_off
    .local int rx206_eos
    .local int rx206_rep
    .local pmc rx206_cur
    .local pmc rx206_curclass
    .local pmc rx206_bstack
    .local pmc rx206_cstack
    rx206_start = self."!cursor_start_all"()
    set rx206_cur, rx206_start[0]
    set rx206_tgt, rx206_start[1]
    set rx206_pos, rx206_start[2]
    set rx206_curclass, rx206_start[3]
    set rx206_bstack, rx206_start[4]
    set $I19, rx206_start[5]
    store_lex unicode:"$\x{a2}", rx206_cur
    length rx206_eos, rx206_tgt
    eq $I19, 1, rx206_restart543
    gt rx206_pos, rx206_eos, rx206_fail544
    repr_get_attr_int $I11, self, rx206_curclass, "$!from"
    ne $I11, -1, rxscan207_done550
    goto rxscan207_scan549
  rxscan207_loop548:
    inc rx206_pos
    gt rx206_pos, rx206_eos, rx206_fail544
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!from", rx206_pos
  rxscan207_scan549:
    nqp_rxmark rx206_bstack, rxscan207_loop548, rx206_pos, 0
  rxscan207_done550:
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    store_lex unicode:"$\x{a2}", rx206_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_190_1361537946.1303' 
    capture_lex $P5002
    $P5003 = $P5002()
    add $I11, rx206_pos, 1
    gt $I11, rx206_eos, rx206_fail544
    substr $S10, rx206_tgt, rx206_pos, 1
    ne $S10, ucs4:"{", rx206_fail544
    add rx206_pos, 1
    .const 'Sub' $P5004 = 'cuid_36_1361537946.1303' 
    capture_lex $P5004
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail544
    nqp_rxmark rx206_bstack, rxsubrule211_pass563, -1, 0
  rxsubrule211_pass563:
    rx206_cstack = rx206_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    .const 'Sub' $P5005 = 'cuid_37_1361537946.1303' 
    capture_lex $P5005
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur.$P5005()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail544
    nqp_rxmark rx206_bstack, rxsubrule215_pass576, -1, 0
  rxsubrule215_pass576:
    rx206_cstack = rx206_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    .const 'Sub' $P5006 = 'cuid_38_1361537946.1303' 
    capture_lex $P5006
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur.$P5006()
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail544
    nqp_rxmark rx206_bstack, rxsubrule219_pass589, -1, 0
  rxsubrule219_pass589:
    rx206_cstack = rx206_cur."!cursor_capture"($P11, "2")
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    add $I11, rx206_pos, 1
    gt $I11, rx206_eos, rx206_fail544
    substr $S10, rx206_tgt, rx206_pos, 1
    ne $S10, ucs4:"}", rx206_fail544
    add rx206_pos, 1
    repr_bind_attr_int rx206_cur, rx206_curclass, "$!pos", rx206_pos
    $P11 = rx206_cur."obs"("{N,M} as general quantifier", "** N..M (or ** N..*)")
    repr_get_attr_int $I11, $P11, rx206_curclass, "$!pos"
    lt $I11, 0, rx206_fail544
    repr_get_attr_int rx206_pos, $P11, rx206_curclass, "$!pos"
    rx206_cur."!cursor_pass"(rx206_pos, "quantifier:sym<{N,M}>", 'backtrack'=>1)
    .return (rx206_cur)
  rx206_restart543:
    repr_get_attr_obj rx206_cstack, rx206_cur, rx206_curclass, "$!cstack"
  rx206_fail544:
    unless rx206_bstack, rx206_done542
    pop $I19, rx206_bstack
    if_null rx206_cstack, rx206_cstack_done547
    unless rx206_cstack, rx206_cstack_done547
    dec $I19
    set $P11, rx206_cstack[$I19]
  rx206_cstack_done547:
    pop rx206_rep, rx206_bstack
    pop rx206_pos, rx206_bstack
    pop $I19, rx206_bstack
    lt rx206_pos, -1, rx206_done542
    lt rx206_pos, 0, rx206_fail544
    eq $I19, 0, rx206_fail544
    nqp_islist $I20, rx206_cstack
    unless $I20, rx206_jump545
    elements $I18, rx206_bstack
    le $I18, 0, rx206_cut546
    dec $I18
    set $I18, rx206_bstack[$I18]
  rx206_cut546:
    assign rx206_cstack, $I18
  rx206_jump545:
    jump $I19
  rx206_done542:
    rx206_cur."!cursor_fail"()
    .return (rx206_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_190_1361537946.1303") :anon :lex :outer("cuid_35_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 168

    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_36_1361537946.1303") :anon :lex :outer("cuid_35_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx208_start
    .local string rx208_tgt
    .local int rx208_pos
    .local int rx208_off
    .local int rx208_eos
    .local int rx208_rep
    .local pmc rx208_cur
    .local pmc rx208_curclass
    .local pmc rx208_bstack
    .local pmc rx208_cstack
    rx208_start = self."!cursor_start_all"()
    set rx208_cur, rx208_start[0]
    set rx208_tgt, rx208_start[1]
    set rx208_pos, rx208_start[2]
    set rx208_curclass, rx208_start[3]
    set rx208_bstack, rx208_start[4]
    set $I19, rx208_start[5]
    store_lex unicode:"$\x{a2}", rx208_cur
    length rx208_eos, rx208_tgt
    eq $I19, 1, rx208_restart553
    gt rx208_pos, rx208_eos, rx208_fail554
    repr_get_attr_int $I11, self, rx208_curclass, "$!from"
    ne $I11, -1, rxscan209_done560
    goto rxscan209_scan559
  rxscan209_loop558:
    inc rx208_pos
    gt rx208_pos, rx208_eos, rx208_fail554
    repr_bind_attr_int rx208_cur, rx208_curclass, "$!from", rx208_pos
  rxscan209_scan559:
    nqp_rxmark rx208_bstack, rxscan209_loop558, rx208_pos, 0
  rxscan209_done560:
    nqp_rxmark rx208_bstack, rxquantr210_done562, -1, 0
  rxquantr210_loop561:
    ge rx208_pos, rx208_eos, rx208_fail554
    is_cclass $I11, .CCLASS_NUMERIC, rx208_tgt, rx208_pos
    unless $I11, rx208_fail554
    add rx208_pos, 1
    nqp_rxpeek $I19, rx208_bstack, rxquantr210_done562
    inc $I19
    inc $I19
    set rx208_rep, rx208_bstack[$I19]
    nqp_rxcommit rx208_bstack, rxquantr210_done562
    inc rx208_rep
    nqp_rxmark rx208_bstack, rxquantr210_done562, rx208_pos, rx208_rep
    goto rxquantr210_loop561
  rxquantr210_done562:
    rx208_cur."!cursor_pass"(rx208_pos, 'backtrack'=>1)
    .return (rx208_cur)
  rx208_restart553:
    repr_get_attr_obj rx208_cstack, rx208_cur, rx208_curclass, "$!cstack"
  rx208_fail554:
    unless rx208_bstack, rx208_done552
    pop $I19, rx208_bstack
    if_null rx208_cstack, rx208_cstack_done557
    unless rx208_cstack, rx208_cstack_done557
    dec $I19
    set $P11, rx208_cstack[$I19]
  rx208_cstack_done557:
    pop rx208_rep, rx208_bstack
    pop rx208_pos, rx208_bstack
    pop $I19, rx208_bstack
    lt rx208_pos, -1, rx208_done552
    lt rx208_pos, 0, rx208_fail554
    eq $I19, 0, rx208_fail554
    nqp_islist $I20, rx208_cstack
    unless $I20, rx208_jump555
    elements $I18, rx208_bstack
    le $I18, 0, rx208_cut556
    dec $I18
    set $I18, rx208_bstack[$I18]
  rx208_cut556:
    assign rx208_cstack, $I18
  rx208_jump555:
    jump $I19
  rx208_done552:
    rx208_cur."!cursor_fail"()
    .return (rx208_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_37_1361537946.1303") :anon :lex :outer("cuid_35_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx212_start
    .local string rx212_tgt
    .local int rx212_pos
    .local int rx212_off
    .local int rx212_eos
    .local int rx212_rep
    .local pmc rx212_cur
    .local pmc rx212_curclass
    .local pmc rx212_bstack
    .local pmc rx212_cstack
    rx212_start = self."!cursor_start_all"()
    set rx212_cur, rx212_start[0]
    set rx212_tgt, rx212_start[1]
    set rx212_pos, rx212_start[2]
    set rx212_curclass, rx212_start[3]
    set rx212_bstack, rx212_start[4]
    set $I19, rx212_start[5]
    store_lex unicode:"$\x{a2}", rx212_cur
    length rx212_eos, rx212_tgt
    eq $I19, 1, rx212_restart566
    gt rx212_pos, rx212_eos, rx212_fail567
    repr_get_attr_int $I11, self, rx212_curclass, "$!from"
    ne $I11, -1, rxscan213_done573
    goto rxscan213_scan572
  rxscan213_loop571:
    inc rx212_pos
    gt rx212_pos, rx212_eos, rx212_fail567
    repr_bind_attr_int rx212_cur, rx212_curclass, "$!from", rx212_pos
  rxscan213_scan572:
    nqp_rxmark rx212_bstack, rxscan213_loop571, rx212_pos, 0
  rxscan213_done573:
    nqp_rxmark rx212_bstack, rxquantr214_done575, rx212_pos, 0
  rxquantr214_loop574:
    add $I11, rx212_pos, 1
    gt $I11, rx212_eos, rx212_fail567
    substr $S10, rx212_tgt, rx212_pos, 1
    ne $S10, ucs4:",", rx212_fail567
    add rx212_pos, 1
    nqp_rxpeek $I19, rx212_bstack, rxquantr214_done575
    inc $I19
    inc $I19
    set rx212_rep, rx212_bstack[$I19]
    nqp_rxcommit rx212_bstack, rxquantr214_done575
    inc rx212_rep
  rxquantr214_done575:
    rx212_cur."!cursor_pass"(rx212_pos, 'backtrack'=>1)
    .return (rx212_cur)
  rx212_restart566:
    repr_get_attr_obj rx212_cstack, rx212_cur, rx212_curclass, "$!cstack"
  rx212_fail567:
    unless rx212_bstack, rx212_done565
    pop $I19, rx212_bstack
    if_null rx212_cstack, rx212_cstack_done570
    unless rx212_cstack, rx212_cstack_done570
    dec $I19
    set $P11, rx212_cstack[$I19]
  rx212_cstack_done570:
    pop rx212_rep, rx212_bstack
    pop rx212_pos, rx212_bstack
    pop $I19, rx212_bstack
    lt rx212_pos, -1, rx212_done565
    lt rx212_pos, 0, rx212_fail567
    eq $I19, 0, rx212_fail567
    nqp_islist $I20, rx212_cstack
    unless $I20, rx212_jump568
    elements $I18, rx212_bstack
    le $I18, 0, rx212_cut569
    dec $I18
    set $I18, rx212_bstack[$I18]
  rx212_cut569:
    assign rx212_cstack, $I18
  rx212_jump568:
    jump $I19
  rx212_done565:
    rx212_cur."!cursor_fail"()
    .return (rx212_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_38_1361537946.1303") :anon :lex :outer("cuid_35_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx216_start
    .local string rx216_tgt
    .local int rx216_pos
    .local int rx216_off
    .local int rx216_eos
    .local int rx216_rep
    .local pmc rx216_cur
    .local pmc rx216_curclass
    .local pmc rx216_bstack
    .local pmc rx216_cstack
    rx216_start = self."!cursor_start_all"()
    set rx216_cur, rx216_start[0]
    set rx216_tgt, rx216_start[1]
    set rx216_pos, rx216_start[2]
    set rx216_curclass, rx216_start[3]
    set rx216_bstack, rx216_start[4]
    set $I19, rx216_start[5]
    store_lex unicode:"$\x{a2}", rx216_cur
    length rx216_eos, rx216_tgt
    eq $I19, 1, rx216_restart579
    gt rx216_pos, rx216_eos, rx216_fail580
    repr_get_attr_int $I11, self, rx216_curclass, "$!from"
    ne $I11, -1, rxscan217_done586
    goto rxscan217_scan585
  rxscan217_loop584:
    inc rx216_pos
    gt rx216_pos, rx216_eos, rx216_fail580
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!from", rx216_pos
  rxscan217_scan585:
    nqp_rxmark rx216_bstack, rxscan217_loop584, rx216_pos, 0
  rxscan217_done586:
    nqp_rxmark rx216_bstack, rxquantr218_done588, rx216_pos, 0
  rxquantr218_loop587:
    ge rx216_pos, rx216_eos, rx216_fail580
    is_cclass $I11, .CCLASS_NUMERIC, rx216_tgt, rx216_pos
    unless $I11, rx216_fail580
    add rx216_pos, 1
    nqp_rxpeek $I19, rx216_bstack, rxquantr218_done588
    inc $I19
    inc $I19
    set rx216_rep, rx216_bstack[$I19]
    nqp_rxcommit rx216_bstack, rxquantr218_done588
    inc rx216_rep
    nqp_rxmark rx216_bstack, rxquantr218_done588, rx216_pos, rx216_rep
    goto rxquantr218_loop587
  rxquantr218_done588:
    rx216_cur."!cursor_pass"(rx216_pos, 'backtrack'=>1)
    .return (rx216_cur)
  rx216_restart579:
    repr_get_attr_obj rx216_cstack, rx216_cur, rx216_curclass, "$!cstack"
  rx216_fail580:
    unless rx216_bstack, rx216_done578
    pop $I19, rx216_bstack
    if_null rx216_cstack, rx216_cstack_done583
    unless rx216_cstack, rx216_cstack_done583
    dec $I19
    set $P11, rx216_cstack[$I19]
  rx216_cstack_done583:
    pop rx216_rep, rx216_bstack
    pop rx216_pos, rx216_bstack
    pop $I19, rx216_bstack
    lt rx216_pos, -1, rx216_done578
    lt rx216_pos, 0, rx216_fail580
    eq $I19, 0, rx216_fail580
    nqp_islist $I20, rx216_cstack
    unless $I20, rx216_jump581
    elements $I18, rx216_bstack
    le $I18, 0, rx216_cut582
    dec $I18
    set $I18, rx216_bstack[$I18]
  rx216_cut582:
    assign rx216_cstack, $I18
  rx216_jump581:
    jump $I19
  rx216_done578:
    rx216_cur."!cursor_fail"()
    .return (rx216_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_39_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 171
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx221_start
    .local string rx221_tgt
    .local int rx221_pos
    .local int rx221_off
    .local int rx221_eos
    .local int rx221_rep
    .local pmc rx221_cur
    .local pmc rx221_curclass
    .local pmc rx221_bstack
    .local pmc rx221_cstack
    rx221_start = self."!cursor_start_all"()
    set rx221_cur, rx221_start[0]
    set rx221_tgt, rx221_start[1]
    set rx221_pos, rx221_start[2]
    set rx221_curclass, rx221_start[3]
    set rx221_bstack, rx221_start[4]
    set $I19, rx221_start[5]
    store_lex unicode:"$\x{a2}", rx221_cur
    length rx221_eos, rx221_tgt
    eq $I19, 1, rx221_restart593
    gt rx221_pos, rx221_eos, rx221_fail594
    repr_get_attr_int $I11, self, rx221_curclass, "$!from"
    ne $I11, -1, rxscan222_done600
    goto rxscan222_scan599
  rxscan222_loop598:
    inc rx221_pos
    gt rx221_pos, rx221_eos, rx221_fail594
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!from", rx221_pos
  rxscan222_scan599:
    nqp_rxmark rx221_bstack, rxscan222_loop598, rx221_pos, 0
  rxscan222_done600:
    nqp_rxmark rx221_bstack, rxcap223_fail602, rx221_pos, 0
    add $I11, rx221_pos, 2
    gt $I11, rx221_eos, rx221_fail594
    substr $S10, rx221_tgt, rx221_pos, 2
    ne $S10, ucs4:"**", rx221_fail594
    add rx221_pos, 2
    nqp_rxpeek $I19, rx221_bstack, rxcap223_fail602
    inc $I19
    set $I11, rx221_bstack[$I19]
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!pos", rx221_pos
    $P11 = rx221_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx221_pos)
    rx221_cstack = rx221_cur."!cursor_capture"($P11, "sym")
    goto rxcap223_done601
  rxcap223_fail602:
    goto rx221_fail594
  rxcap223_done601:
    nqp_rxmark rx221_bstack, rxquantr224_done604, rx221_pos, 0
  rxquantr224_loop603:
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!pos", rx221_pos
    $P11 = rx221_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx221_curclass, "$!pos"
    lt $I11, 0, rx221_fail594
    goto rxsubrule225_pass605
  rxsubrule225_back606:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx221_curclass, "$!pos"
    lt $I11, 0, rx221_fail594
  rxsubrule225_pass605:
    rx221_cstack = rx221_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule225_back606
    push rx221_bstack, $I11
    push rx221_bstack, 0
    push rx221_bstack, rx221_pos
    elements $I11, rx221_cstack
    push rx221_bstack, $I11
    repr_get_attr_int rx221_pos, $P11, rx221_curclass, "$!pos"
    nqp_rxpeek $I19, rx221_bstack, rxquantr224_done604
    inc $I19
    inc $I19
    set rx221_rep, rx221_bstack[$I19]
    nqp_rxcommit rx221_bstack, rxquantr224_done604
    inc rx221_rep
  rxquantr224_done604:
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!pos", rx221_pos
    $P11 = rx221_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx221_curclass, "$!pos"
    lt $I11, 0, rx221_fail594
    nqp_rxmark rx221_bstack, rxsubrule226_pass607, -1, 0
  rxsubrule226_pass607:
    rx221_cstack = rx221_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx221_pos, $P11, rx221_curclass, "$!pos"
    nqp_rxmark rx221_bstack, rxquantr227_done609, rx221_pos, 0
  rxquantr227_loop608:
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!pos", rx221_pos
    $P11 = rx221_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx221_curclass, "$!pos"
    lt $I11, 0, rx221_fail594
    goto rxsubrule228_pass610
  rxsubrule228_back611:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx221_curclass, "$!pos"
    lt $I11, 0, rx221_fail594
  rxsubrule228_pass610:
    rx221_cstack = rx221_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule228_back611
    push rx221_bstack, $I11
    push rx221_bstack, 0
    push rx221_bstack, rx221_pos
    elements $I11, rx221_cstack
    push rx221_bstack, $I11
    repr_get_attr_int rx221_pos, $P11, rx221_curclass, "$!pos"
    nqp_rxpeek $I19, rx221_bstack, rxquantr227_done609
    inc $I19
    inc $I19
    set rx221_rep, rx221_bstack[$I19]
    nqp_rxcommit rx221_bstack, rxquantr227_done609
    inc rx221_rep
  rxquantr227_done609:
    nqp_rxmark rx221_bstack, rxcap229_fail613, rx221_pos, 0
    nqp_rxmark rx221_bstack, rxquantr230_done615, -1, 0
  rxquantr230_loop614:
    ge rx221_pos, rx221_eos, rx221_fail594
    is_cclass $I11, .CCLASS_NUMERIC, rx221_tgt, rx221_pos
    unless $I11, rx221_fail594
    add rx221_pos, 1
    nqp_rxpeek $I19, rx221_bstack, rxquantr230_done615
    inc $I19
    inc $I19
    set rx221_rep, rx221_bstack[$I19]
    nqp_rxcommit rx221_bstack, rxquantr230_done615
    inc rx221_rep
    nqp_rxmark rx221_bstack, rxquantr230_done615, rx221_pos, rx221_rep
    goto rxquantr230_loop614
  rxquantr230_done615:
    nqp_rxpeek $I19, rx221_bstack, rxcap229_fail613
    inc $I19
    set $I11, rx221_bstack[$I19]
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!pos", rx221_pos
    $P11 = rx221_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx221_pos)
    rx221_cstack = rx221_cur."!cursor_capture"($P11, "min")
    goto rxcap229_done612
  rxcap229_fail613:
    goto rx221_fail594
  rxcap229_done612:
    nqp_rxmark rx221_bstack, rxquantr231_done617, rx221_pos, 0
  rxquantr231_loop616:
    add $I11, rx221_pos, 2
    gt $I11, rx221_eos, rx221_fail594
    substr $S10, rx221_tgt, rx221_pos, 2
    ne $S10, ucs4:"..", rx221_fail594
    add rx221_pos, 2
    nqp_rxmark rx221_bstack, rxcap232_fail619, rx221_pos, 0
  alt233_0621:
    nqp_rxmark rx221_bstack, alt233_1624, rx221_pos, 0
    nqp_rxmark rx221_bstack, rxquantr234_done623, -1, 0
  rxquantr234_loop622:
    ge rx221_pos, rx221_eos, rx221_fail594
    is_cclass $I11, .CCLASS_NUMERIC, rx221_tgt, rx221_pos
    unless $I11, rx221_fail594
    add rx221_pos, 1
    nqp_rxpeek $I19, rx221_bstack, rxquantr234_done623
    inc $I19
    inc $I19
    set rx221_rep, rx221_bstack[$I19]
    nqp_rxcommit rx221_bstack, rxquantr234_done623
    inc rx221_rep
    nqp_rxmark rx221_bstack, rxquantr234_done623, rx221_pos, rx221_rep
    goto rxquantr234_loop622
  rxquantr234_done623:
    goto alt233_end620
  alt233_1624:
    nqp_rxmark rx221_bstack, alt233_2625, rx221_pos, 0
    add $I11, rx221_pos, 1
    gt $I11, rx221_eos, rx221_fail594
    substr $S10, rx221_tgt, rx221_pos, 1
    ne $S10, ucs4:"*", rx221_fail594
    add rx221_pos, 1
    goto alt233_end620
  alt233_2625:
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!pos", rx221_pos
    $P11 = rx221_cur."panic"("Only integers or '*' allowed as range quantifier endpoint")
    repr_get_attr_int $I11, $P11, rx221_curclass, "$!pos"
    lt $I11, 0, rx221_fail594
    repr_get_attr_int rx221_pos, $P11, rx221_curclass, "$!pos"
  alt233_end620:
    nqp_rxpeek $I19, rx221_bstack, rxcap232_fail619
    inc $I19
    set $I11, rx221_bstack[$I19]
    repr_bind_attr_int rx221_cur, rx221_curclass, "$!pos", rx221_pos
    $P11 = rx221_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx221_pos)
    rx221_cstack = rx221_cur."!cursor_capture"($P11, "max")
    goto rxcap232_done618
  rxcap232_fail619:
    goto rx221_fail594
  rxcap232_done618:
    nqp_rxpeek $I19, rx221_bstack, rxquantr231_done617
    inc $I19
    inc $I19
    set rx221_rep, rx221_bstack[$I19]
    nqp_rxcommit rx221_bstack, rxquantr231_done617
    inc rx221_rep
  rxquantr231_done617:
    rx221_cur."!cursor_pass"(rx221_pos, "quantifier:sym<**>", 'backtrack'=>1)
    .return (rx221_cur)
  rx221_restart593:
    repr_get_attr_obj rx221_cstack, rx221_cur, rx221_curclass, "$!cstack"
  rx221_fail594:
    unless rx221_bstack, rx221_done592
    pop $I19, rx221_bstack
    if_null rx221_cstack, rx221_cstack_done597
    unless rx221_cstack, rx221_cstack_done597
    dec $I19
    set $P11, rx221_cstack[$I19]
  rx221_cstack_done597:
    pop rx221_rep, rx221_bstack
    pop rx221_pos, rx221_bstack
    pop $I19, rx221_bstack
    lt rx221_pos, -1, rx221_done592
    lt rx221_pos, 0, rx221_fail594
    eq $I19, 0, rx221_fail594
    nqp_islist $I20, rx221_cstack
    unless $I20, rx221_jump595
    elements $I18, rx221_bstack
    le $I18, 0, rx221_cut596
    dec $I18
    set $I18, rx221_bstack[$I18]
  rx221_cut596:
    assign rx221_cstack, $I18
  rx221_jump595:
    jump $I19
  rx221_done592:
    rx221_cur."!cursor_fail"()
    .return (rx221_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_40_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 185
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx236_start
    .local string rx236_tgt
    .local int rx236_pos
    .local int rx236_off
    .local int rx236_eos
    .local int rx236_rep
    .local pmc rx236_cur
    .local pmc rx236_curclass
    .local pmc rx236_bstack
    .local pmc rx236_cstack
    rx236_start = self."!cursor_start_all"()
    set rx236_cur, rx236_start[0]
    set rx236_tgt, rx236_start[1]
    set rx236_pos, rx236_start[2]
    set rx236_curclass, rx236_start[3]
    set rx236_bstack, rx236_start[4]
    set $I19, rx236_start[5]
    store_lex unicode:"$\x{a2}", rx236_cur
    length rx236_eos, rx236_tgt
    eq $I19, 1, rx236_restart629
    gt rx236_pos, rx236_eos, rx236_fail630
    repr_get_attr_int $I11, self, rx236_curclass, "$!from"
    ne $I11, -1, rxscan237_done636
    goto rxscan237_scan635
  rxscan237_loop634:
    inc rx236_pos
    gt rx236_pos, rx236_eos, rx236_fail630
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!from", rx236_pos
  rxscan237_scan635:
    nqp_rxmark rx236_bstack, rxscan237_loop634, rx236_pos, 0
  rxscan237_done636:
    nqp_rxmark rx236_bstack, rxquantr238_done638, rx236_pos, 0
  rxquantr238_loop637:
    add $I11, rx236_pos, 1
    gt $I11, rx236_eos, rx236_fail630
    substr $S10, rx236_tgt, rx236_pos, 1
    ne $S10, ucs4:":", rx236_fail630
    add rx236_pos, 1
    nqp_rxpeek $I19, rx236_bstack, rxquantr238_done638
    inc $I19
    inc $I19
    set rx236_rep, rx236_bstack[$I19]
    nqp_rxcommit rx236_bstack, rxquantr238_done638
    inc rx236_rep
  rxquantr238_done638:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt239_0640
    nqp_push_label $P11, alt239_1641
    nqp_push_label $P11, alt239_2642
    nqp_rxmark rx236_bstack, alt239_end639, -1, 0
    rx236_cur."!alt"(rx236_pos, "alt_nfa__9_1361537946.8011", $P11)
    goto rx236_fail630
  alt239_0640:
    add $I11, rx236_pos, 1
    gt $I11, rx236_eos, rx236_fail630
    substr $S10, rx236_tgt, rx236_pos, 1
    ne $S10, ucs4:"?", rx236_fail630
    add rx236_pos, 1
    goto alt239_end639
  alt239_1641:
    add $I11, rx236_pos, 1
    gt $I11, rx236_eos, rx236_fail630
    substr $S10, rx236_tgt, rx236_pos, 1
    ne $S10, ucs4:"!", rx236_fail630
    add rx236_pos, 1
    goto alt239_end639
  alt239_2642:
    .const 'Sub' $P5001 = 'cuid_41_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    ge $I11, 0, rx236_fail630
    goto alt239_end639
  alt239_end639:
    nqp_rxcommit rx236_bstack, alt239_end639
    rx236_cur."!cursor_pass"(rx236_pos, "backmod", 'backtrack'=>1)
    .return (rx236_cur)
  rx236_restart629:
    repr_get_attr_obj rx236_cstack, rx236_cur, rx236_curclass, "$!cstack"
  rx236_fail630:
    unless rx236_bstack, rx236_done628
    pop $I19, rx236_bstack
    if_null rx236_cstack, rx236_cstack_done633
    unless rx236_cstack, rx236_cstack_done633
    dec $I19
    set $P11, rx236_cstack[$I19]
  rx236_cstack_done633:
    pop rx236_rep, rx236_bstack
    pop rx236_pos, rx236_bstack
    pop $I19, rx236_bstack
    lt rx236_pos, -1, rx236_done628
    lt rx236_pos, 0, rx236_fail630
    eq $I19, 0, rx236_fail630
    nqp_islist $I20, rx236_cstack
    unless $I20, rx236_jump631
    elements $I18, rx236_bstack
    le $I18, 0, rx236_cut632
    dec $I18
    set $I18, rx236_bstack[$I18]
  rx236_cut632:
    assign rx236_cstack, $I18
  rx236_jump631:
    jump $I19
  rx236_done628:
    rx236_cur."!cursor_fail"()
    .return (rx236_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1361537946.1303") :anon :lex :outer("cuid_40_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx240_start
    .local string rx240_tgt
    .local int rx240_pos
    .local int rx240_off
    .local int rx240_eos
    .local int rx240_rep
    .local pmc rx240_cur
    .local pmc rx240_curclass
    .local pmc rx240_bstack
    .local pmc rx240_cstack
    rx240_start = self."!cursor_start_all"()
    set rx240_cur, rx240_start[0]
    set rx240_tgt, rx240_start[1]
    set rx240_pos, rx240_start[2]
    set rx240_curclass, rx240_start[3]
    set rx240_bstack, rx240_start[4]
    set $I19, rx240_start[5]
    store_lex unicode:"$\x{a2}", rx240_cur
    length rx240_eos, rx240_tgt
    eq $I19, 1, rx240_restart645
    gt rx240_pos, rx240_eos, rx240_fail646
    repr_get_attr_int $I11, self, rx240_curclass, "$!from"
    ne $I11, -1, rxscan241_done652
    goto rxscan241_scan651
  rxscan241_loop650:
    inc rx240_pos
    gt rx240_pos, rx240_eos, rx240_fail646
    repr_bind_attr_int rx240_cur, rx240_curclass, "$!from", rx240_pos
  rxscan241_scan651:
    nqp_rxmark rx240_bstack, rxscan241_loop650, rx240_pos, 0
  rxscan241_done652:
    add $I11, rx240_pos, 1
    gt $I11, rx240_eos, rx240_fail646
    substr $S10, rx240_tgt, rx240_pos, 1
    ne $S10, ucs4:":", rx240_fail646
    add rx240_pos, 1
    rx240_cur."!cursor_pass"(rx240_pos, 'backtrack'=>1)
    .return (rx240_cur)
  rx240_restart645:
    repr_get_attr_obj rx240_cstack, rx240_cur, rx240_curclass, "$!cstack"
  rx240_fail646:
    unless rx240_bstack, rx240_done644
    pop $I19, rx240_bstack
    if_null rx240_cstack, rx240_cstack_done649
    unless rx240_cstack, rx240_cstack_done649
    dec $I19
    set $P11, rx240_cstack[$I19]
  rx240_cstack_done649:
    pop rx240_rep, rx240_bstack
    pop rx240_pos, rx240_bstack
    pop $I19, rx240_bstack
    lt rx240_pos, -1, rx240_done644
    lt rx240_pos, 0, rx240_fail646
    eq $I19, 0, rx240_fail646
    nqp_islist $I20, rx240_cstack
    unless $I20, rx240_jump647
    elements $I18, rx240_bstack
    le $I18, 0, rx240_cut648
    dec $I18
    set $I18, rx240_bstack[$I18]
  rx240_cut648:
    assign rx240_cstack, $I18
  rx240_jump647:
    jump $I19
  rx240_done644:
    rx240_cur."!cursor_fail"()
    .return (rx240_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar" :subid("cuid_42_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 187
    .param pmc self 
    $P5001 = self."!protoregex"("metachar")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_43_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx242_start
    .local string rx242_tgt
    .local int rx242_pos
    .local int rx242_off
    .local int rx242_eos
    .local int rx242_rep
    .local pmc rx242_cur
    .local pmc rx242_curclass
    .local pmc rx242_bstack
    .local pmc rx242_cstack
    rx242_start = self."!cursor_start_all"()
    set rx242_cur, rx242_start[0]
    set rx242_tgt, rx242_start[1]
    set rx242_pos, rx242_start[2]
    set rx242_curclass, rx242_start[3]
    set rx242_bstack, rx242_start[4]
    set $I19, rx242_start[5]
    store_lex unicode:"$\x{a2}", rx242_cur
    length rx242_eos, rx242_tgt
    eq $I19, 1, rx242_restart655
    gt rx242_pos, rx242_eos, rx242_fail656
    repr_get_attr_int $I11, self, rx242_curclass, "$!from"
    ne $I11, -1, rxscan243_done662
    goto rxscan243_scan661
  rxscan243_loop660:
    inc rx242_pos
    gt rx242_pos, rx242_eos, rx242_fail656
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!from", rx242_pos
  rxscan243_scan661:
    nqp_rxmark rx242_bstack, rxscan243_loop660, rx242_pos, 0
  rxscan243_done662:
    repr_bind_attr_int rx242_cur, rx242_curclass, "$!pos", rx242_pos
    $P11 = rx242_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx242_curclass, "$!pos"
    lt $I11, 0, rx242_fail656
    repr_get_attr_int rx242_pos, $P11, rx242_curclass, "$!pos"
    rx242_cur."!cursor_pass"(rx242_pos, "metachar:sym<ws>", 'backtrack'=>1)
    .return (rx242_cur)
  rx242_restart655:
    repr_get_attr_obj rx242_cstack, rx242_cur, rx242_curclass, "$!cstack"
  rx242_fail656:
    unless rx242_bstack, rx242_done654
    pop $I19, rx242_bstack
    if_null rx242_cstack, rx242_cstack_done659
    unless rx242_cstack, rx242_cstack_done659
    dec $I19
    set $P11, rx242_cstack[$I19]
  rx242_cstack_done659:
    pop rx242_rep, rx242_bstack
    pop rx242_pos, rx242_bstack
    pop $I19, rx242_bstack
    lt rx242_pos, -1, rx242_done654
    lt rx242_pos, 0, rx242_fail656
    eq $I19, 0, rx242_fail656
    nqp_islist $I20, rx242_cstack
    unless $I20, rx242_jump657
    elements $I18, rx242_bstack
    le $I18, 0, rx242_cut658
    dec $I18
    set $I18, rx242_bstack[$I18]
  rx242_cut658:
    assign rx242_cstack, $I18
  rx242_jump657:
    jump $I19
  rx242_done654:
    rx242_cur."!cursor_fail"()
    .return (rx242_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_44_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 189
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx245_start
    .local string rx245_tgt
    .local int rx245_pos
    .local int rx245_off
    .local int rx245_eos
    .local int rx245_rep
    .local pmc rx245_cur
    .local pmc rx245_curclass
    .local pmc rx245_bstack
    .local pmc rx245_cstack
    rx245_start = self."!cursor_start_all"()
    set rx245_cur, rx245_start[0]
    set rx245_tgt, rx245_start[1]
    set rx245_pos, rx245_start[2]
    set rx245_curclass, rx245_start[3]
    set rx245_bstack, rx245_start[4]
    set $I19, rx245_start[5]
    store_lex unicode:"$\x{a2}", rx245_cur
    length rx245_eos, rx245_tgt
    eq $I19, 1, rx245_restart666
    gt rx245_pos, rx245_eos, rx245_fail667
    repr_get_attr_int $I11, self, rx245_curclass, "$!from"
    ne $I11, -1, rxscan246_done673
    goto rxscan246_scan672
  rxscan246_loop671:
    inc rx245_pos
    gt rx245_pos, rx245_eos, rx245_fail667
    repr_bind_attr_int rx245_cur, rx245_curclass, "$!from", rx245_pos
  rxscan246_scan672:
    nqp_rxmark rx245_bstack, rxscan246_loop671, rx245_pos, 0
  rxscan246_done673:
    add $I11, rx245_pos, 1
    gt $I11, rx245_eos, rx245_fail667
    substr $S10, rx245_tgt, rx245_pos, 1
    ne $S10, ucs4:"[", rx245_fail667
    add rx245_pos, 1
    repr_bind_attr_int rx245_cur, rx245_curclass, "$!pos", rx245_pos
    $P11 = rx245_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx245_curclass, "$!pos"
    lt $I11, 0, rx245_fail667
    nqp_rxmark rx245_bstack, rxsubrule247_pass674, -1, 0
  rxsubrule247_pass674:
    rx245_cstack = rx245_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx245_pos, $P11, rx245_curclass, "$!pos"
    add $I11, rx245_pos, 1
    gt $I11, rx245_eos, rx245_fail667
    substr $S10, rx245_tgt, rx245_pos, 1
    ne $S10, ucs4:"]", rx245_fail667
    add rx245_pos, 1
    rx245_cur."!cursor_pass"(rx245_pos, "metachar:sym<[ ]>", 'backtrack'=>1)
    .return (rx245_cur)
  rx245_restart666:
    repr_get_attr_obj rx245_cstack, rx245_cur, rx245_curclass, "$!cstack"
  rx245_fail667:
    unless rx245_bstack, rx245_done665
    pop $I19, rx245_bstack
    if_null rx245_cstack, rx245_cstack_done670
    unless rx245_cstack, rx245_cstack_done670
    dec $I19
    set $P11, rx245_cstack[$I19]
  rx245_cstack_done670:
    pop rx245_rep, rx245_bstack
    pop rx245_pos, rx245_bstack
    pop $I19, rx245_bstack
    lt rx245_pos, -1, rx245_done665
    lt rx245_pos, 0, rx245_fail667
    eq $I19, 0, rx245_fail667
    nqp_islist $I20, rx245_cstack
    unless $I20, rx245_jump668
    elements $I18, rx245_bstack
    le $I18, 0, rx245_cut669
    dec $I18
    set $I18, rx245_bstack[$I18]
  rx245_cut669:
    assign rx245_cstack, $I18
  rx245_jump668:
    jump $I19
  rx245_done665:
    rx245_cur."!cursor_fail"()
    .return (rx245_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_45_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 190
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx248_start
    .local string rx248_tgt
    .local int rx248_pos
    .local int rx248_off
    .local int rx248_eos
    .local int rx248_rep
    .local pmc rx248_cur
    .local pmc rx248_curclass
    .local pmc rx248_bstack
    .local pmc rx248_cstack
    rx248_start = self."!cursor_start_all"()
    set rx248_cur, rx248_start[0]
    set rx248_tgt, rx248_start[1]
    set rx248_pos, rx248_start[2]
    set rx248_curclass, rx248_start[3]
    set rx248_bstack, rx248_start[4]
    set $I19, rx248_start[5]
    store_lex unicode:"$\x{a2}", rx248_cur
    length rx248_eos, rx248_tgt
    eq $I19, 1, rx248_restart677
    gt rx248_pos, rx248_eos, rx248_fail678
    repr_get_attr_int $I11, self, rx248_curclass, "$!from"
    ne $I11, -1, rxscan249_done684
    goto rxscan249_scan683
  rxscan249_loop682:
    inc rx248_pos
    gt rx248_pos, rx248_eos, rx248_fail678
    repr_bind_attr_int rx248_cur, rx248_curclass, "$!from", rx248_pos
  rxscan249_scan683:
    nqp_rxmark rx248_bstack, rxscan249_loop682, rx248_pos, 0
  rxscan249_done684:
    add $I11, rx248_pos, 1
    gt $I11, rx248_eos, rx248_fail678
    substr $S10, rx248_tgt, rx248_pos, 1
    ne $S10, ucs4:"(", rx248_fail678
    add rx248_pos, 1
    repr_bind_attr_int rx248_cur, rx248_curclass, "$!pos", rx248_pos
    $P11 = rx248_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx248_curclass, "$!pos"
    lt $I11, 0, rx248_fail678
    nqp_rxmark rx248_bstack, rxsubrule250_pass685, -1, 0
  rxsubrule250_pass685:
    rx248_cstack = rx248_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx248_pos, $P11, rx248_curclass, "$!pos"
    add $I11, rx248_pos, 1
    gt $I11, rx248_eos, rx248_fail678
    substr $S10, rx248_tgt, rx248_pos, 1
    ne $S10, ucs4:")", rx248_fail678
    add rx248_pos, 1
    rx248_cur."!cursor_pass"(rx248_pos, "metachar:sym<( )>", 'backtrack'=>1)
    .return (rx248_cur)
  rx248_restart677:
    repr_get_attr_obj rx248_cstack, rx248_cur, rx248_curclass, "$!cstack"
  rx248_fail678:
    unless rx248_bstack, rx248_done676
    pop $I19, rx248_bstack
    if_null rx248_cstack, rx248_cstack_done681
    unless rx248_cstack, rx248_cstack_done681
    dec $I19
    set $P11, rx248_cstack[$I19]
  rx248_cstack_done681:
    pop rx248_rep, rx248_bstack
    pop rx248_pos, rx248_bstack
    pop $I19, rx248_bstack
    lt rx248_pos, -1, rx248_done676
    lt rx248_pos, 0, rx248_fail678
    eq $I19, 0, rx248_fail678
    nqp_islist $I20, rx248_cstack
    unless $I20, rx248_jump679
    elements $I18, rx248_bstack
    le $I18, 0, rx248_cut680
    dec $I18
    set $I18, rx248_bstack[$I18]
  rx248_cut680:
    assign rx248_cstack, $I18
  rx248_jump679:
    jump $I19
  rx248_done676:
    rx248_cur."!cursor_fail"()
    .return (rx248_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_46_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 191
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx251_start
    .local string rx251_tgt
    .local int rx251_pos
    .local int rx251_off
    .local int rx251_eos
    .local int rx251_rep
    .local pmc rx251_cur
    .local pmc rx251_curclass
    .local pmc rx251_bstack
    .local pmc rx251_cstack
    rx251_start = self."!cursor_start_all"()
    set rx251_cur, rx251_start[0]
    set rx251_tgt, rx251_start[1]
    set rx251_pos, rx251_start[2]
    set rx251_curclass, rx251_start[3]
    set rx251_bstack, rx251_start[4]
    set $I19, rx251_start[5]
    store_lex unicode:"$\x{a2}", rx251_cur
    length rx251_eos, rx251_tgt
    eq $I19, 1, rx251_restart688
    gt rx251_pos, rx251_eos, rx251_fail689
    repr_get_attr_int $I11, self, rx251_curclass, "$!from"
    ne $I11, -1, rxscan252_done695
    goto rxscan252_scan694
  rxscan252_loop693:
    inc rx251_pos
    gt rx251_pos, rx251_eos, rx251_fail689
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!from", rx251_pos
  rxscan252_scan694:
    nqp_rxmark rx251_bstack, rxscan252_loop693, rx251_pos, 0
  rxscan252_done695:
    ge rx251_pos, rx251_eos, rx251_fail689
    substr $S11, rx251_tgt, rx251_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx251_fail689
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail689
    nqp_rxmark rx251_bstack, rxsubrule253_pass696, -1, 0
  rxsubrule253_pass696:
    rx251_cstack = rx251_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
    rx251_cur."!cursor_pass"(rx251_pos, "metachar:sym<'>", 'backtrack'=>1)
    .return (rx251_cur)
  rx251_restart688:
    repr_get_attr_obj rx251_cstack, rx251_cur, rx251_curclass, "$!cstack"
  rx251_fail689:
    unless rx251_bstack, rx251_done687
    pop $I19, rx251_bstack
    if_null rx251_cstack, rx251_cstack_done692
    unless rx251_cstack, rx251_cstack_done692
    dec $I19
    set $P11, rx251_cstack[$I19]
  rx251_cstack_done692:
    pop rx251_rep, rx251_bstack
    pop rx251_pos, rx251_bstack
    pop $I19, rx251_bstack
    lt rx251_pos, -1, rx251_done687
    lt rx251_pos, 0, rx251_fail689
    eq $I19, 0, rx251_fail689
    nqp_islist $I20, rx251_cstack
    unless $I20, rx251_jump690
    elements $I18, rx251_bstack
    le $I18, 0, rx251_cut691
    dec $I18
    set $I18, rx251_bstack[$I18]
  rx251_cut691:
    assign rx251_cstack, $I18
  rx251_jump690:
    jump $I19
  rx251_done687:
    rx251_cur."!cursor_fail"()
    .return (rx251_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_47_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx254_start
    .local string rx254_tgt
    .local int rx254_pos
    .local int rx254_off
    .local int rx254_eos
    .local int rx254_rep
    .local pmc rx254_cur
    .local pmc rx254_curclass
    .local pmc rx254_bstack
    .local pmc rx254_cstack
    rx254_start = self."!cursor_start_all"()
    set rx254_cur, rx254_start[0]
    set rx254_tgt, rx254_start[1]
    set rx254_pos, rx254_start[2]
    set rx254_curclass, rx254_start[3]
    set rx254_bstack, rx254_start[4]
    set $I19, rx254_start[5]
    store_lex unicode:"$\x{a2}", rx254_cur
    length rx254_eos, rx254_tgt
    eq $I19, 1, rx254_restart699
    gt rx254_pos, rx254_eos, rx254_fail700
    repr_get_attr_int $I11, self, rx254_curclass, "$!from"
    ne $I11, -1, rxscan255_done706
    goto rxscan255_scan705
  rxscan255_loop704:
    inc rx254_pos
    gt rx254_pos, rx254_eos, rx254_fail700
    repr_bind_attr_int rx254_cur, rx254_curclass, "$!from", rx254_pos
  rxscan255_scan705:
    nqp_rxmark rx254_bstack, rxscan255_loop704, rx254_pos, 0
  rxscan255_done706:
    ge rx254_pos, rx254_eos, rx254_fail700
    substr $S11, rx254_tgt, rx254_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx254_fail700
    repr_bind_attr_int rx254_cur, rx254_curclass, "$!pos", rx254_pos
    $P11 = rx254_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx254_curclass, "$!pos"
    lt $I11, 0, rx254_fail700
    nqp_rxmark rx254_bstack, rxsubrule256_pass707, -1, 0
  rxsubrule256_pass707:
    rx254_cstack = rx254_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx254_pos, $P11, rx254_curclass, "$!pos"
    rx254_cur."!cursor_pass"(rx254_pos, "metachar:sym<\">", 'backtrack'=>1)
    .return (rx254_cur)
  rx254_restart699:
    repr_get_attr_obj rx254_cstack, rx254_cur, rx254_curclass, "$!cstack"
  rx254_fail700:
    unless rx254_bstack, rx254_done698
    pop $I19, rx254_bstack
    if_null rx254_cstack, rx254_cstack_done703
    unless rx254_cstack, rx254_cstack_done703
    dec $I19
    set $P11, rx254_cstack[$I19]
  rx254_cstack_done703:
    pop rx254_rep, rx254_bstack
    pop rx254_pos, rx254_bstack
    pop $I19, rx254_bstack
    lt rx254_pos, -1, rx254_done698
    lt rx254_pos, 0, rx254_fail700
    eq $I19, 0, rx254_fail700
    nqp_islist $I20, rx254_cstack
    unless $I20, rx254_jump701
    elements $I18, rx254_bstack
    le $I18, 0, rx254_cut702
    dec $I18
    set $I18, rx254_bstack[$I18]
  rx254_cut702:
    assign rx254_cstack, $I18
  rx254_jump701:
    jump $I19
  rx254_done698:
    rx254_cur."!cursor_fail"()
    .return (rx254_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_48_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 193
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx257_start
    .local string rx257_tgt
    .local int rx257_pos
    .local int rx257_off
    .local int rx257_eos
    .local int rx257_rep
    .local pmc rx257_cur
    .local pmc rx257_curclass
    .local pmc rx257_bstack
    .local pmc rx257_cstack
    rx257_start = self."!cursor_start_all"()
    set rx257_cur, rx257_start[0]
    set rx257_tgt, rx257_start[1]
    set rx257_pos, rx257_start[2]
    set rx257_curclass, rx257_start[3]
    set rx257_bstack, rx257_start[4]
    set $I19, rx257_start[5]
    store_lex unicode:"$\x{a2}", rx257_cur
    length rx257_eos, rx257_tgt
    eq $I19, 1, rx257_restart710
    gt rx257_pos, rx257_eos, rx257_fail711
    repr_get_attr_int $I11, self, rx257_curclass, "$!from"
    ne $I11, -1, rxscan258_done717
    goto rxscan258_scan716
  rxscan258_loop715:
    inc rx257_pos
    gt rx257_pos, rx257_eos, rx257_fail711
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!from", rx257_pos
  rxscan258_scan716:
    nqp_rxmark rx257_bstack, rxscan258_loop715, rx257_pos, 0
  rxscan258_done717:
    nqp_rxmark rx257_bstack, rxcap259_fail719, rx257_pos, 0
    add $I11, rx257_pos, 1
    gt $I11, rx257_eos, rx257_fail711
    substr $S10, rx257_tgt, rx257_pos, 1
    ne $S10, ucs4:".", rx257_fail711
    add rx257_pos, 1
    nqp_rxpeek $I19, rx257_bstack, rxcap259_fail719
    inc $I19
    set $I11, rx257_bstack[$I19]
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx257_pos)
    rx257_cstack = rx257_cur."!cursor_capture"($P11, "sym")
    goto rxcap259_done718
  rxcap259_fail719:
    goto rx257_fail711
  rxcap259_done718:
    rx257_cur."!cursor_pass"(rx257_pos, "metachar:sym<.>", 'backtrack'=>1)
    .return (rx257_cur)
  rx257_restart710:
    repr_get_attr_obj rx257_cstack, rx257_cur, rx257_curclass, "$!cstack"
  rx257_fail711:
    unless rx257_bstack, rx257_done709
    pop $I19, rx257_bstack
    if_null rx257_cstack, rx257_cstack_done714
    unless rx257_cstack, rx257_cstack_done714
    dec $I19
    set $P11, rx257_cstack[$I19]
  rx257_cstack_done714:
    pop rx257_rep, rx257_bstack
    pop rx257_pos, rx257_bstack
    pop $I19, rx257_bstack
    lt rx257_pos, -1, rx257_done709
    lt rx257_pos, 0, rx257_fail711
    eq $I19, 0, rx257_fail711
    nqp_islist $I20, rx257_cstack
    unless $I20, rx257_jump712
    elements $I18, rx257_bstack
    le $I18, 0, rx257_cut713
    dec $I18
    set $I18, rx257_bstack[$I18]
  rx257_cut713:
    assign rx257_cstack, $I18
  rx257_jump712:
    jump $I19
  rx257_done709:
    rx257_cur."!cursor_fail"()
    .return (rx257_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_49_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 194
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx260_start
    .local string rx260_tgt
    .local int rx260_pos
    .local int rx260_off
    .local int rx260_eos
    .local int rx260_rep
    .local pmc rx260_cur
    .local pmc rx260_curclass
    .local pmc rx260_bstack
    .local pmc rx260_cstack
    rx260_start = self."!cursor_start_all"()
    set rx260_cur, rx260_start[0]
    set rx260_tgt, rx260_start[1]
    set rx260_pos, rx260_start[2]
    set rx260_curclass, rx260_start[3]
    set rx260_bstack, rx260_start[4]
    set $I19, rx260_start[5]
    store_lex unicode:"$\x{a2}", rx260_cur
    length rx260_eos, rx260_tgt
    eq $I19, 1, rx260_restart722
    gt rx260_pos, rx260_eos, rx260_fail723
    repr_get_attr_int $I11, self, rx260_curclass, "$!from"
    ne $I11, -1, rxscan261_done729
    goto rxscan261_scan728
  rxscan261_loop727:
    inc rx260_pos
    gt rx260_pos, rx260_eos, rx260_fail723
    repr_bind_attr_int rx260_cur, rx260_curclass, "$!from", rx260_pos
  rxscan261_scan728:
    nqp_rxmark rx260_bstack, rxscan261_loop727, rx260_pos, 0
  rxscan261_done729:
    nqp_rxmark rx260_bstack, rxcap262_fail731, rx260_pos, 0
    add $I11, rx260_pos, 1
    gt $I11, rx260_eos, rx260_fail723
    substr $S10, rx260_tgt, rx260_pos, 1
    ne $S10, ucs4:"^", rx260_fail723
    add rx260_pos, 1
    nqp_rxpeek $I19, rx260_bstack, rxcap262_fail731
    inc $I19
    set $I11, rx260_bstack[$I19]
    repr_bind_attr_int rx260_cur, rx260_curclass, "$!pos", rx260_pos
    $P11 = rx260_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx260_pos)
    rx260_cstack = rx260_cur."!cursor_capture"($P11, "sym")
    goto rxcap262_done730
  rxcap262_fail731:
    goto rx260_fail723
  rxcap262_done730:
    rx260_cur."!cursor_pass"(rx260_pos, "metachar:sym<^>", 'backtrack'=>1)
    .return (rx260_cur)
  rx260_restart722:
    repr_get_attr_obj rx260_cstack, rx260_cur, rx260_curclass, "$!cstack"
  rx260_fail723:
    unless rx260_bstack, rx260_done721
    pop $I19, rx260_bstack
    if_null rx260_cstack, rx260_cstack_done726
    unless rx260_cstack, rx260_cstack_done726
    dec $I19
    set $P11, rx260_cstack[$I19]
  rx260_cstack_done726:
    pop rx260_rep, rx260_bstack
    pop rx260_pos, rx260_bstack
    pop $I19, rx260_bstack
    lt rx260_pos, -1, rx260_done721
    lt rx260_pos, 0, rx260_fail723
    eq $I19, 0, rx260_fail723
    nqp_islist $I20, rx260_cstack
    unless $I20, rx260_jump724
    elements $I18, rx260_bstack
    le $I18, 0, rx260_cut725
    dec $I18
    set $I18, rx260_bstack[$I18]
  rx260_cut725:
    assign rx260_cstack, $I18
  rx260_jump724:
    jump $I19
  rx260_done721:
    rx260_cur."!cursor_fail"()
    .return (rx260_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_50_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 195
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx263_start
    .local string rx263_tgt
    .local int rx263_pos
    .local int rx263_off
    .local int rx263_eos
    .local int rx263_rep
    .local pmc rx263_cur
    .local pmc rx263_curclass
    .local pmc rx263_bstack
    .local pmc rx263_cstack
    rx263_start = self."!cursor_start_all"()
    set rx263_cur, rx263_start[0]
    set rx263_tgt, rx263_start[1]
    set rx263_pos, rx263_start[2]
    set rx263_curclass, rx263_start[3]
    set rx263_bstack, rx263_start[4]
    set $I19, rx263_start[5]
    store_lex unicode:"$\x{a2}", rx263_cur
    length rx263_eos, rx263_tgt
    eq $I19, 1, rx263_restart734
    gt rx263_pos, rx263_eos, rx263_fail735
    repr_get_attr_int $I11, self, rx263_curclass, "$!from"
    ne $I11, -1, rxscan264_done741
    goto rxscan264_scan740
  rxscan264_loop739:
    inc rx263_pos
    gt rx263_pos, rx263_eos, rx263_fail735
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!from", rx263_pos
  rxscan264_scan740:
    nqp_rxmark rx263_bstack, rxscan264_loop739, rx263_pos, 0
  rxscan264_done741:
    nqp_rxmark rx263_bstack, rxcap265_fail743, rx263_pos, 0
    add $I11, rx263_pos, 2
    gt $I11, rx263_eos, rx263_fail735
    substr $S10, rx263_tgt, rx263_pos, 2
    ne $S10, ucs4:"^^", rx263_fail735
    add rx263_pos, 2
    nqp_rxpeek $I19, rx263_bstack, rxcap265_fail743
    inc $I19
    set $I11, rx263_bstack[$I19]
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!pos", rx263_pos
    $P11 = rx263_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx263_pos)
    rx263_cstack = rx263_cur."!cursor_capture"($P11, "sym")
    goto rxcap265_done742
  rxcap265_fail743:
    goto rx263_fail735
  rxcap265_done742:
    rx263_cur."!cursor_pass"(rx263_pos, "metachar:sym<^^>", 'backtrack'=>1)
    .return (rx263_cur)
  rx263_restart734:
    repr_get_attr_obj rx263_cstack, rx263_cur, rx263_curclass, "$!cstack"
  rx263_fail735:
    unless rx263_bstack, rx263_done733
    pop $I19, rx263_bstack
    if_null rx263_cstack, rx263_cstack_done738
    unless rx263_cstack, rx263_cstack_done738
    dec $I19
    set $P11, rx263_cstack[$I19]
  rx263_cstack_done738:
    pop rx263_rep, rx263_bstack
    pop rx263_pos, rx263_bstack
    pop $I19, rx263_bstack
    lt rx263_pos, -1, rx263_done733
    lt rx263_pos, 0, rx263_fail735
    eq $I19, 0, rx263_fail735
    nqp_islist $I20, rx263_cstack
    unless $I20, rx263_jump736
    elements $I18, rx263_bstack
    le $I18, 0, rx263_cut737
    dec $I18
    set $I18, rx263_bstack[$I18]
  rx263_cut737:
    assign rx263_cstack, $I18
  rx263_jump736:
    jump $I19
  rx263_done733:
    rx263_cur."!cursor_fail"()
    .return (rx263_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_51_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 196
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx266_start
    .local string rx266_tgt
    .local int rx266_pos
    .local int rx266_off
    .local int rx266_eos
    .local int rx266_rep
    .local pmc rx266_cur
    .local pmc rx266_curclass
    .local pmc rx266_bstack
    .local pmc rx266_cstack
    rx266_start = self."!cursor_start_all"()
    set rx266_cur, rx266_start[0]
    set rx266_tgt, rx266_start[1]
    set rx266_pos, rx266_start[2]
    set rx266_curclass, rx266_start[3]
    set rx266_bstack, rx266_start[4]
    set $I19, rx266_start[5]
    store_lex unicode:"$\x{a2}", rx266_cur
    length rx266_eos, rx266_tgt
    eq $I19, 1, rx266_restart746
    gt rx266_pos, rx266_eos, rx266_fail747
    repr_get_attr_int $I11, self, rx266_curclass, "$!from"
    ne $I11, -1, rxscan267_done753
    goto rxscan267_scan752
  rxscan267_loop751:
    inc rx266_pos
    gt rx266_pos, rx266_eos, rx266_fail747
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!from", rx266_pos
  rxscan267_scan752:
    nqp_rxmark rx266_bstack, rxscan267_loop751, rx266_pos, 0
  rxscan267_done753:
    nqp_rxmark rx266_bstack, rxcap268_fail755, rx266_pos, 0
    add $I11, rx266_pos, 1
    gt $I11, rx266_eos, rx266_fail747
    substr $S10, rx266_tgt, rx266_pos, 1
    ne $S10, ucs4:"$", rx266_fail747
    add rx266_pos, 1
    nqp_rxpeek $I19, rx266_bstack, rxcap268_fail755
    inc $I19
    set $I11, rx266_bstack[$I19]
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!pos", rx266_pos
    $P11 = rx266_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx266_pos)
    rx266_cstack = rx266_cur."!cursor_capture"($P11, "sym")
    goto rxcap268_done754
  rxcap268_fail755:
    goto rx266_fail747
  rxcap268_done754:
    rx266_cur."!cursor_pass"(rx266_pos, "metachar:sym<$>", 'backtrack'=>1)
    .return (rx266_cur)
  rx266_restart746:
    repr_get_attr_obj rx266_cstack, rx266_cur, rx266_curclass, "$!cstack"
  rx266_fail747:
    unless rx266_bstack, rx266_done745
    pop $I19, rx266_bstack
    if_null rx266_cstack, rx266_cstack_done750
    unless rx266_cstack, rx266_cstack_done750
    dec $I19
    set $P11, rx266_cstack[$I19]
  rx266_cstack_done750:
    pop rx266_rep, rx266_bstack
    pop rx266_pos, rx266_bstack
    pop $I19, rx266_bstack
    lt rx266_pos, -1, rx266_done745
    lt rx266_pos, 0, rx266_fail747
    eq $I19, 0, rx266_fail747
    nqp_islist $I20, rx266_cstack
    unless $I20, rx266_jump748
    elements $I18, rx266_bstack
    le $I18, 0, rx266_cut749
    dec $I18
    set $I18, rx266_bstack[$I18]
  rx266_cut749:
    assign rx266_cstack, $I18
  rx266_jump748:
    jump $I19
  rx266_done745:
    rx266_cur."!cursor_fail"()
    .return (rx266_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_52_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx269_start
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    rx269_start = self."!cursor_start_all"()
    set rx269_cur, rx269_start[0]
    set rx269_tgt, rx269_start[1]
    set rx269_pos, rx269_start[2]
    set rx269_curclass, rx269_start[3]
    set rx269_bstack, rx269_start[4]
    set $I19, rx269_start[5]
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart758
    gt rx269_pos, rx269_eos, rx269_fail759
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done765
    goto rxscan270_scan764
  rxscan270_loop763:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail759
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan764:
    nqp_rxmark rx269_bstack, rxscan270_loop763, rx269_pos, 0
  rxscan270_done765:
    nqp_rxmark rx269_bstack, rxcap271_fail767, rx269_pos, 0
    add $I11, rx269_pos, 2
    gt $I11, rx269_eos, rx269_fail759
    substr $S10, rx269_tgt, rx269_pos, 2
    ne $S10, ucs4:"$$", rx269_fail759
    add rx269_pos, 2
    nqp_rxpeek $I19, rx269_bstack, rxcap271_fail767
    inc $I19
    set $I11, rx269_bstack[$I19]
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx269_pos)
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "sym")
    goto rxcap271_done766
  rxcap271_fail767:
    goto rx269_fail759
  rxcap271_done766:
    rx269_cur."!cursor_pass"(rx269_pos, "metachar:sym<$$>", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart758:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail759:
    unless rx269_bstack, rx269_done757
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done762
    unless rx269_cstack, rx269_cstack_done762
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done762:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done757
    lt rx269_pos, 0, rx269_fail759
    eq $I19, 0, rx269_fail759
    nqp_islist $I20, rx269_cstack
    unless $I20, rx269_jump760
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut761
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut761:
    assign rx269_cstack, $I18
  rx269_jump760:
    jump $I19
  rx269_done757:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:::>" :subid("cuid_53_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx272_start
    .local string rx272_tgt
    .local int rx272_pos
    .local int rx272_off
    .local int rx272_eos
    .local int rx272_rep
    .local pmc rx272_cur
    .local pmc rx272_curclass
    .local pmc rx272_bstack
    .local pmc rx272_cstack
    rx272_start = self."!cursor_start_all"()
    set rx272_cur, rx272_start[0]
    set rx272_tgt, rx272_start[1]
    set rx272_pos, rx272_start[2]
    set rx272_curclass, rx272_start[3]
    set rx272_bstack, rx272_start[4]
    set $I19, rx272_start[5]
    store_lex unicode:"$\x{a2}", rx272_cur
    length rx272_eos, rx272_tgt
    eq $I19, 1, rx272_restart770
    gt rx272_pos, rx272_eos, rx272_fail771
    repr_get_attr_int $I11, self, rx272_curclass, "$!from"
    ne $I11, -1, rxscan273_done777
    goto rxscan273_scan776
  rxscan273_loop775:
    inc rx272_pos
    gt rx272_pos, rx272_eos, rx272_fail771
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!from", rx272_pos
  rxscan273_scan776:
    nqp_rxmark rx272_bstack, rxscan273_loop775, rx272_pos, 0
  rxscan273_done777:
    nqp_rxmark rx272_bstack, rxcap274_fail779, rx272_pos, 0
    add $I11, rx272_pos, 3
    gt $I11, rx272_eos, rx272_fail771
    substr $S10, rx272_tgt, rx272_pos, 3
    ne $S10, ucs4:":::", rx272_fail771
    add rx272_pos, 3
    nqp_rxpeek $I19, rx272_bstack, rxcap274_fail779
    inc $I19
    set $I11, rx272_bstack[$I19]
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!pos", rx272_pos
    $P11 = rx272_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx272_pos)
    rx272_cstack = rx272_cur."!cursor_capture"($P11, "sym")
    goto rxcap274_done778
  rxcap274_fail779:
    goto rx272_fail771
  rxcap274_done778:
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!pos", rx272_pos
    $P11 = rx272_cur."panic"("::: not yet implemented")
    repr_get_attr_int $I11, $P11, rx272_curclass, "$!pos"
    lt $I11, 0, rx272_fail771
    repr_get_attr_int rx272_pos, $P11, rx272_curclass, "$!pos"
    rx272_cur."!cursor_pass"(rx272_pos, "metachar:sym<:::>", 'backtrack'=>1)
    .return (rx272_cur)
  rx272_restart770:
    repr_get_attr_obj rx272_cstack, rx272_cur, rx272_curclass, "$!cstack"
  rx272_fail771:
    unless rx272_bstack, rx272_done769
    pop $I19, rx272_bstack
    if_null rx272_cstack, rx272_cstack_done774
    unless rx272_cstack, rx272_cstack_done774
    dec $I19
    set $P11, rx272_cstack[$I19]
  rx272_cstack_done774:
    pop rx272_rep, rx272_bstack
    pop rx272_pos, rx272_bstack
    pop $I19, rx272_bstack
    lt rx272_pos, -1, rx272_done769
    lt rx272_pos, 0, rx272_fail771
    eq $I19, 0, rx272_fail771
    nqp_islist $I20, rx272_cstack
    unless $I20, rx272_jump772
    elements $I18, rx272_bstack
    le $I18, 0, rx272_cut773
    dec $I18
    set $I18, rx272_bstack[$I18]
  rx272_cut773:
    assign rx272_cstack, $I18
  rx272_jump772:
    jump $I19
  rx272_done769:
    rx272_cur."!cursor_fail"()
    .return (rx272_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<::>" :subid("cuid_54_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx276_start
    .local string rx276_tgt
    .local int rx276_pos
    .local int rx276_off
    .local int rx276_eos
    .local int rx276_rep
    .local pmc rx276_cur
    .local pmc rx276_curclass
    .local pmc rx276_bstack
    .local pmc rx276_cstack
    rx276_start = self."!cursor_start_all"()
    set rx276_cur, rx276_start[0]
    set rx276_tgt, rx276_start[1]
    set rx276_pos, rx276_start[2]
    set rx276_curclass, rx276_start[3]
    set rx276_bstack, rx276_start[4]
    set $I19, rx276_start[5]
    store_lex unicode:"$\x{a2}", rx276_cur
    length rx276_eos, rx276_tgt
    eq $I19, 1, rx276_restart783
    gt rx276_pos, rx276_eos, rx276_fail784
    repr_get_attr_int $I11, self, rx276_curclass, "$!from"
    ne $I11, -1, rxscan277_done790
    goto rxscan277_scan789
  rxscan277_loop788:
    inc rx276_pos
    gt rx276_pos, rx276_eos, rx276_fail784
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!from", rx276_pos
  rxscan277_scan789:
    nqp_rxmark rx276_bstack, rxscan277_loop788, rx276_pos, 0
  rxscan277_done790:
    nqp_rxmark rx276_bstack, rxcap278_fail792, rx276_pos, 0
    add $I11, rx276_pos, 2
    gt $I11, rx276_eos, rx276_fail784
    substr $S10, rx276_tgt, rx276_pos, 2
    ne $S10, ucs4:"::", rx276_fail784
    add rx276_pos, 2
    nqp_rxpeek $I19, rx276_bstack, rxcap278_fail792
    inc $I19
    set $I11, rx276_bstack[$I19]
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!pos", rx276_pos
    $P11 = rx276_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx276_pos)
    rx276_cstack = rx276_cur."!cursor_capture"($P11, "sym")
    goto rxcap278_done791
  rxcap278_fail792:
    goto rx276_fail784
  rxcap278_done791:
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!pos", rx276_pos
    $P11 = rx276_cur."panic"(":: not yet implemented")
    repr_get_attr_int $I11, $P11, rx276_curclass, "$!pos"
    lt $I11, 0, rx276_fail784
    repr_get_attr_int rx276_pos, $P11, rx276_curclass, "$!pos"
    rx276_cur."!cursor_pass"(rx276_pos, "metachar:sym<::>", 'backtrack'=>1)
    .return (rx276_cur)
  rx276_restart783:
    repr_get_attr_obj rx276_cstack, rx276_cur, rx276_curclass, "$!cstack"
  rx276_fail784:
    unless rx276_bstack, rx276_done782
    pop $I19, rx276_bstack
    if_null rx276_cstack, rx276_cstack_done787
    unless rx276_cstack, rx276_cstack_done787
    dec $I19
    set $P11, rx276_cstack[$I19]
  rx276_cstack_done787:
    pop rx276_rep, rx276_bstack
    pop rx276_pos, rx276_bstack
    pop $I19, rx276_bstack
    lt rx276_pos, -1, rx276_done782
    lt rx276_pos, 0, rx276_fail784
    eq $I19, 0, rx276_fail784
    nqp_islist $I20, rx276_cstack
    unless $I20, rx276_jump785
    elements $I18, rx276_bstack
    le $I18, 0, rx276_cut786
    dec $I18
    set $I18, rx276_bstack[$I18]
  rx276_cut786:
    assign rx276_cstack, $I18
  rx276_jump785:
    jump $I19
  rx276_done782:
    rx276_cur."!cursor_fail"()
    .return (rx276_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_55_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx280_start
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_curclass
    .local pmc rx280_bstack
    .local pmc rx280_cstack
    rx280_start = self."!cursor_start_all"()
    set rx280_cur, rx280_start[0]
    set rx280_tgt, rx280_start[1]
    set rx280_pos, rx280_start[2]
    set rx280_curclass, rx280_start[3]
    set rx280_bstack, rx280_start[4]
    set $I19, rx280_start[5]
    store_lex unicode:"$\x{a2}", rx280_cur
    length rx280_eos, rx280_tgt
    eq $I19, 1, rx280_restart796
    gt rx280_pos, rx280_eos, rx280_fail797
    repr_get_attr_int $I11, self, rx280_curclass, "$!from"
    ne $I11, -1, rxscan281_done803
    goto rxscan281_scan802
  rxscan281_loop801:
    inc rx280_pos
    gt rx280_pos, rx280_eos, rx280_fail797
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!from", rx280_pos
  rxscan281_scan802:
    nqp_rxmark rx280_bstack, rxscan281_loop801, rx280_pos, 0
  rxscan281_done803:
    nqp_rxmark rx280_bstack, rxcap282_fail805, rx280_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt283_0807
    nqp_push_label $P11, alt283_1808
    nqp_rxmark rx280_bstack, alt283_end806, -1, 0
    rx280_cur."!alt"(rx280_pos, "alt_nfa__10_1361537946.8947", $P11)
    goto rx280_fail797
  alt283_0807:
    add $I11, rx280_pos, 2
    gt $I11, rx280_eos, rx280_fail797
    substr $S10, rx280_tgt, rx280_pos, 2
    ne $S10, ucs4:"<<", rx280_fail797
    add rx280_pos, 2
    goto alt283_end806
  alt283_1808:
    add $I11, rx280_pos, 1
    gt $I11, rx280_eos, rx280_fail797
    substr $S10, rx280_tgt, rx280_pos, 1
    ne $S10, ucs4:"\x{ab}", rx280_fail797
    add rx280_pos, 1
    goto alt283_end806
  alt283_end806:
    nqp_rxcommit rx280_bstack, alt283_end806
    nqp_rxpeek $I19, rx280_bstack, rxcap282_fail805
    inc $I19
    set $I11, rx280_bstack[$I19]
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!pos", rx280_pos
    $P11 = rx280_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx280_pos)
    rx280_cstack = rx280_cur."!cursor_capture"($P11, "sym")
    goto rxcap282_done804
  rxcap282_fail805:
    goto rx280_fail797
  rxcap282_done804:
    rx280_cur."!cursor_pass"(rx280_pos, "metachar:sym<lwb>", 'backtrack'=>1)
    .return (rx280_cur)
  rx280_restart796:
    repr_get_attr_obj rx280_cstack, rx280_cur, rx280_curclass, "$!cstack"
  rx280_fail797:
    unless rx280_bstack, rx280_done795
    pop $I19, rx280_bstack
    if_null rx280_cstack, rx280_cstack_done800
    unless rx280_cstack, rx280_cstack_done800
    dec $I19
    set $P11, rx280_cstack[$I19]
  rx280_cstack_done800:
    pop rx280_rep, rx280_bstack
    pop rx280_pos, rx280_bstack
    pop $I19, rx280_bstack
    lt rx280_pos, -1, rx280_done795
    lt rx280_pos, 0, rx280_fail797
    eq $I19, 0, rx280_fail797
    nqp_islist $I20, rx280_cstack
    unless $I20, rx280_jump798
    elements $I18, rx280_bstack
    le $I18, 0, rx280_cut799
    dec $I18
    set $I18, rx280_bstack[$I18]
  rx280_cut799:
    assign rx280_cstack, $I18
  rx280_jump798:
    jump $I19
  rx280_done795:
    rx280_cur."!cursor_fail"()
    .return (rx280_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_56_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 201
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx284_start
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    rx284_start = self."!cursor_start_all"()
    set rx284_cur, rx284_start[0]
    set rx284_tgt, rx284_start[1]
    set rx284_pos, rx284_start[2]
    set rx284_curclass, rx284_start[3]
    set rx284_bstack, rx284_start[4]
    set $I19, rx284_start[5]
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart811
    gt rx284_pos, rx284_eos, rx284_fail812
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done818
    goto rxscan285_scan817
  rxscan285_loop816:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail812
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan817:
    nqp_rxmark rx284_bstack, rxscan285_loop816, rx284_pos, 0
  rxscan285_done818:
    nqp_rxmark rx284_bstack, rxcap286_fail820, rx284_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt287_0822
    nqp_push_label $P11, alt287_1823
    nqp_rxmark rx284_bstack, alt287_end821, -1, 0
    rx284_cur."!alt"(rx284_pos, "alt_nfa__11_1361537946.9259", $P11)
    goto rx284_fail812
  alt287_0822:
    add $I11, rx284_pos, 2
    gt $I11, rx284_eos, rx284_fail812
    substr $S10, rx284_tgt, rx284_pos, 2
    ne $S10, ucs4:">>", rx284_fail812
    add rx284_pos, 2
    goto alt287_end821
  alt287_1823:
    add $I11, rx284_pos, 1
    gt $I11, rx284_eos, rx284_fail812
    substr $S10, rx284_tgt, rx284_pos, 1
    ne $S10, ucs4:"\x{bb}", rx284_fail812
    add rx284_pos, 1
    goto alt287_end821
  alt287_end821:
    nqp_rxcommit rx284_bstack, alt287_end821
    nqp_rxpeek $I19, rx284_bstack, rxcap286_fail820
    inc $I19
    set $I11, rx284_bstack[$I19]
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx284_pos)
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "sym")
    goto rxcap286_done819
  rxcap286_fail820:
    goto rx284_fail812
  rxcap286_done819:
    rx284_cur."!cursor_pass"(rx284_pos, "metachar:sym<rwb>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart811:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail812:
    unless rx284_bstack, rx284_done810
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done815
    unless rx284_cstack, rx284_cstack_done815
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done815:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done810
    lt rx284_pos, 0, rx284_fail812
    eq $I19, 0, rx284_fail812
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump813
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut814
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut814:
    assign rx284_cstack, $I18
  rx284_jump813:
    jump $I19
  rx284_done810:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_57_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx288_start
    .local string rx288_tgt
    .local int rx288_pos
    .local int rx288_off
    .local int rx288_eos
    .local int rx288_rep
    .local pmc rx288_cur
    .local pmc rx288_curclass
    .local pmc rx288_bstack
    .local pmc rx288_cstack
    rx288_start = self."!cursor_start_all"()
    set rx288_cur, rx288_start[0]
    set rx288_tgt, rx288_start[1]
    set rx288_pos, rx288_start[2]
    set rx288_curclass, rx288_start[3]
    set rx288_bstack, rx288_start[4]
    set $I19, rx288_start[5]
    store_lex unicode:"$\x{a2}", rx288_cur
    length rx288_eos, rx288_tgt
    eq $I19, 1, rx288_restart826
    gt rx288_pos, rx288_eos, rx288_fail827
    repr_get_attr_int $I11, self, rx288_curclass, "$!from"
    ne $I11, -1, rxscan289_done833
    goto rxscan289_scan832
  rxscan289_loop831:
    inc rx288_pos
    gt rx288_pos, rx288_eos, rx288_fail827
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!from", rx288_pos
  rxscan289_scan832:
    nqp_rxmark rx288_bstack, rxscan289_loop831, rx288_pos, 0
  rxscan289_done833:
    add $I11, rx288_pos, 2
    gt $I11, rx288_eos, rx288_fail827
    substr $S10, rx288_tgt, rx288_pos, 2
    ne $S10, ucs4:"<(", rx288_fail827
    add rx288_pos, 2
    rx288_cur."!cursor_pass"(rx288_pos, "metachar:sym<from>", 'backtrack'=>1)
    .return (rx288_cur)
  rx288_restart826:
    repr_get_attr_obj rx288_cstack, rx288_cur, rx288_curclass, "$!cstack"
  rx288_fail827:
    unless rx288_bstack, rx288_done825
    pop $I19, rx288_bstack
    if_null rx288_cstack, rx288_cstack_done830
    unless rx288_cstack, rx288_cstack_done830
    dec $I19
    set $P11, rx288_cstack[$I19]
  rx288_cstack_done830:
    pop rx288_rep, rx288_bstack
    pop rx288_pos, rx288_bstack
    pop $I19, rx288_bstack
    lt rx288_pos, -1, rx288_done825
    lt rx288_pos, 0, rx288_fail827
    eq $I19, 0, rx288_fail827
    nqp_islist $I20, rx288_cstack
    unless $I20, rx288_jump828
    elements $I18, rx288_bstack
    le $I18, 0, rx288_cut829
    dec $I18
    set $I18, rx288_bstack[$I18]
  rx288_cut829:
    assign rx288_cstack, $I18
  rx288_jump828:
    jump $I19
  rx288_done825:
    rx288_cur."!cursor_fail"()
    .return (rx288_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_58_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 203
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx290_start
    .local string rx290_tgt
    .local int rx290_pos
    .local int rx290_off
    .local int rx290_eos
    .local int rx290_rep
    .local pmc rx290_cur
    .local pmc rx290_curclass
    .local pmc rx290_bstack
    .local pmc rx290_cstack
    rx290_start = self."!cursor_start_all"()
    set rx290_cur, rx290_start[0]
    set rx290_tgt, rx290_start[1]
    set rx290_pos, rx290_start[2]
    set rx290_curclass, rx290_start[3]
    set rx290_bstack, rx290_start[4]
    set $I19, rx290_start[5]
    store_lex unicode:"$\x{a2}", rx290_cur
    length rx290_eos, rx290_tgt
    eq $I19, 1, rx290_restart836
    gt rx290_pos, rx290_eos, rx290_fail837
    repr_get_attr_int $I11, self, rx290_curclass, "$!from"
    ne $I11, -1, rxscan291_done843
    goto rxscan291_scan842
  rxscan291_loop841:
    inc rx290_pos
    gt rx290_pos, rx290_eos, rx290_fail837
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!from", rx290_pos
  rxscan291_scan842:
    nqp_rxmark rx290_bstack, rxscan291_loop841, rx290_pos, 0
  rxscan291_done843:
    add $I11, rx290_pos, 2
    gt $I11, rx290_eos, rx290_fail837
    substr $S10, rx290_tgt, rx290_pos, 2
    ne $S10, ucs4:")>", rx290_fail837
    add rx290_pos, 2
    rx290_cur."!cursor_pass"(rx290_pos, "metachar:sym<to>", 'backtrack'=>1)
    .return (rx290_cur)
  rx290_restart836:
    repr_get_attr_obj rx290_cstack, rx290_cur, rx290_curclass, "$!cstack"
  rx290_fail837:
    unless rx290_bstack, rx290_done835
    pop $I19, rx290_bstack
    if_null rx290_cstack, rx290_cstack_done840
    unless rx290_cstack, rx290_cstack_done840
    dec $I19
    set $P11, rx290_cstack[$I19]
  rx290_cstack_done840:
    pop rx290_rep, rx290_bstack
    pop rx290_pos, rx290_bstack
    pop $I19, rx290_bstack
    lt rx290_pos, -1, rx290_done835
    lt rx290_pos, 0, rx290_fail837
    eq $I19, 0, rx290_fail837
    nqp_islist $I20, rx290_cstack
    unless $I20, rx290_jump838
    elements $I18, rx290_bstack
    le $I18, 0, rx290_cut839
    dec $I18
    set $I18, rx290_bstack[$I18]
  rx290_cut839:
    assign rx290_cstack, $I18
  rx290_jump838:
    jump $I19
  rx290_done835:
    rx290_cur."!cursor_fail"()
    .return (rx290_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_59_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx292_start
    .local string rx292_tgt
    .local int rx292_pos
    .local int rx292_off
    .local int rx292_eos
    .local int rx292_rep
    .local pmc rx292_cur
    .local pmc rx292_curclass
    .local pmc rx292_bstack
    .local pmc rx292_cstack
    rx292_start = self."!cursor_start_all"()
    set rx292_cur, rx292_start[0]
    set rx292_tgt, rx292_start[1]
    set rx292_pos, rx292_start[2]
    set rx292_curclass, rx292_start[3]
    set rx292_bstack, rx292_start[4]
    set $I19, rx292_start[5]
    store_lex unicode:"$\x{a2}", rx292_cur
    length rx292_eos, rx292_tgt
    eq $I19, 1, rx292_restart846
    gt rx292_pos, rx292_eos, rx292_fail847
    repr_get_attr_int $I11, self, rx292_curclass, "$!from"
    ne $I11, -1, rxscan293_done853
    goto rxscan293_scan852
  rxscan293_loop851:
    inc rx292_pos
    gt rx292_pos, rx292_eos, rx292_fail847
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!from", rx292_pos
  rxscan293_scan852:
    nqp_rxmark rx292_bstack, rxscan293_loop851, rx292_pos, 0
  rxscan293_done853:
    add $I11, rx292_pos, 1
    gt $I11, rx292_eos, rx292_fail847
    substr $S10, rx292_tgt, rx292_pos, 1
    ne $S10, ucs4:"\\", rx292_fail847
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail847
    nqp_rxmark rx292_bstack, rxsubrule294_pass854, -1, 0
  rxsubrule294_pass854:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    rx292_cur."!cursor_pass"(rx292_pos, "metachar:sym<bs>", 'backtrack'=>1)
    .return (rx292_cur)
  rx292_restart846:
    repr_get_attr_obj rx292_cstack, rx292_cur, rx292_curclass, "$!cstack"
  rx292_fail847:
    unless rx292_bstack, rx292_done845
    pop $I19, rx292_bstack
    if_null rx292_cstack, rx292_cstack_done850
    unless rx292_cstack, rx292_cstack_done850
    dec $I19
    set $P11, rx292_cstack[$I19]
  rx292_cstack_done850:
    pop rx292_rep, rx292_bstack
    pop rx292_pos, rx292_bstack
    pop $I19, rx292_bstack
    lt rx292_pos, -1, rx292_done845
    lt rx292_pos, 0, rx292_fail847
    eq $I19, 0, rx292_fail847
    nqp_islist $I20, rx292_cstack
    unless $I20, rx292_jump848
    elements $I18, rx292_bstack
    le $I18, 0, rx292_cut849
    dec $I18
    set $I18, rx292_bstack[$I18]
  rx292_cut849:
    assign rx292_cstack, $I18
  rx292_jump848:
    jump $I19
  rx292_done845:
    rx292_cur."!cursor_fail"()
    .return (rx292_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_60_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx295_start
    .local string rx295_tgt
    .local int rx295_pos
    .local int rx295_off
    .local int rx295_eos
    .local int rx295_rep
    .local pmc rx295_cur
    .local pmc rx295_curclass
    .local pmc rx295_bstack
    .local pmc rx295_cstack
    rx295_start = self."!cursor_start_all"()
    set rx295_cur, rx295_start[0]
    set rx295_tgt, rx295_start[1]
    set rx295_pos, rx295_start[2]
    set rx295_curclass, rx295_start[3]
    set rx295_bstack, rx295_start[4]
    set $I19, rx295_start[5]
    store_lex unicode:"$\x{a2}", rx295_cur
    length rx295_eos, rx295_tgt
    eq $I19, 1, rx295_restart857
    gt rx295_pos, rx295_eos, rx295_fail858
    repr_get_attr_int $I11, self, rx295_curclass, "$!from"
    ne $I11, -1, rxscan296_done864
    goto rxscan296_scan863
  rxscan296_loop862:
    inc rx295_pos
    gt rx295_pos, rx295_eos, rx295_fail858
    repr_bind_attr_int rx295_cur, rx295_curclass, "$!from", rx295_pos
  rxscan296_scan863:
    nqp_rxmark rx295_bstack, rxscan296_loop862, rx295_pos, 0
  rxscan296_done864:
    repr_bind_attr_int rx295_cur, rx295_curclass, "$!pos", rx295_pos
    $P11 = rx295_cur."mod_internal"()
    repr_get_attr_int $I11, $P11, rx295_curclass, "$!pos"
    lt $I11, 0, rx295_fail858
    nqp_rxmark rx295_bstack, rxsubrule297_pass865, -1, 0
  rxsubrule297_pass865:
    rx295_cstack = rx295_cur."!cursor_capture"($P11, "mod_internal")
    repr_get_attr_int rx295_pos, $P11, rx295_curclass, "$!pos"
    rx295_cur."!cursor_pass"(rx295_pos, "metachar:sym<mod>", 'backtrack'=>1)
    .return (rx295_cur)
  rx295_restart857:
    repr_get_attr_obj rx295_cstack, rx295_cur, rx295_curclass, "$!cstack"
  rx295_fail858:
    unless rx295_bstack, rx295_done856
    pop $I19, rx295_bstack
    if_null rx295_cstack, rx295_cstack_done861
    unless rx295_cstack, rx295_cstack_done861
    dec $I19
    set $P11, rx295_cstack[$I19]
  rx295_cstack_done861:
    pop rx295_rep, rx295_bstack
    pop rx295_pos, rx295_bstack
    pop $I19, rx295_bstack
    lt rx295_pos, -1, rx295_done856
    lt rx295_pos, 0, rx295_fail858
    eq $I19, 0, rx295_fail858
    nqp_islist $I20, rx295_cstack
    unless $I20, rx295_jump859
    elements $I18, rx295_bstack
    le $I18, 0, rx295_cut860
    dec $I18
    set $I18, rx295_bstack[$I18]
  rx295_cut860:
    assign rx295_cstack, $I18
  rx295_jump859:
    jump $I19
  rx295_done856:
    rx295_cur."!cursor_fail"()
    .return (rx295_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<quantifier>" :subid("cuid_61_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx298_start
    .local string rx298_tgt
    .local int rx298_pos
    .local int rx298_off
    .local int rx298_eos
    .local int rx298_rep
    .local pmc rx298_cur
    .local pmc rx298_curclass
    .local pmc rx298_bstack
    .local pmc rx298_cstack
    rx298_start = self."!cursor_start_all"()
    set rx298_cur, rx298_start[0]
    set rx298_tgt, rx298_start[1]
    set rx298_pos, rx298_start[2]
    set rx298_curclass, rx298_start[3]
    set rx298_bstack, rx298_start[4]
    set $I19, rx298_start[5]
    store_lex unicode:"$\x{a2}", rx298_cur
    length rx298_eos, rx298_tgt
    eq $I19, 1, rx298_restart868
    gt rx298_pos, rx298_eos, rx298_fail869
    repr_get_attr_int $I11, self, rx298_curclass, "$!from"
    ne $I11, -1, rxscan299_done875
    goto rxscan299_scan874
  rxscan299_loop873:
    inc rx298_pos
    gt rx298_pos, rx298_eos, rx298_fail869
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!from", rx298_pos
  rxscan299_scan874:
    nqp_rxmark rx298_bstack, rxscan299_loop873, rx298_pos, 0
  rxscan299_done875:
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx298_curclass, "$!pos"
    lt $I11, 0, rx298_fail869
    nqp_rxmark rx298_bstack, rxsubrule300_pass876, -1, 0
  rxsubrule300_pass876:
    rx298_cstack = rx298_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx298_pos, $P11, rx298_curclass, "$!pos"
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."panic"("Quantifier quantifies nothing")
    repr_get_attr_int $I11, $P11, rx298_curclass, "$!pos"
    lt $I11, 0, rx298_fail869
    repr_get_attr_int rx298_pos, $P11, rx298_curclass, "$!pos"
    rx298_cur."!cursor_pass"(rx298_pos, "metachar:sym<quantifier>", 'backtrack'=>1)
    .return (rx298_cur)
  rx298_restart868:
    repr_get_attr_obj rx298_cstack, rx298_cur, rx298_curclass, "$!cstack"
  rx298_fail869:
    unless rx298_bstack, rx298_done867
    pop $I19, rx298_bstack
    if_null rx298_cstack, rx298_cstack_done872
    unless rx298_cstack, rx298_cstack_done872
    dec $I19
    set $P11, rx298_cstack[$I19]
  rx298_cstack_done872:
    pop rx298_rep, rx298_bstack
    pop rx298_pos, rx298_bstack
    pop $I19, rx298_bstack
    lt rx298_pos, -1, rx298_done867
    lt rx298_pos, 0, rx298_fail869
    eq $I19, 0, rx298_fail869
    nqp_islist $I20, rx298_cstack
    unless $I20, rx298_jump870
    elements $I18, rx298_bstack
    le $I18, 0, rx298_cut871
    dec $I18
    set $I18, rx298_bstack[$I18]
  rx298_cut871:
    assign rx298_cstack, $I18
  rx298_jump870:
    jump $I19
  rx298_done867:
    rx298_cur."!cursor_fail"()
    .return (rx298_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_62_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 211
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx302_start
    .local string rx302_tgt
    .local int rx302_pos
    .local int rx302_off
    .local int rx302_eos
    .local int rx302_rep
    .local pmc rx302_cur
    .local pmc rx302_curclass
    .local pmc rx302_bstack
    .local pmc rx302_cstack
    rx302_start = self."!cursor_start_all"()
    set rx302_cur, rx302_start[0]
    set rx302_tgt, rx302_start[1]
    set rx302_pos, rx302_start[2]
    set rx302_curclass, rx302_start[3]
    set rx302_bstack, rx302_start[4]
    set $I19, rx302_start[5]
    store_lex unicode:"$\x{a2}", rx302_cur
    length rx302_eos, rx302_tgt
    eq $I19, 1, rx302_restart880
    gt rx302_pos, rx302_eos, rx302_fail881
    repr_get_attr_int $I11, self, rx302_curclass, "$!from"
    ne $I11, -1, rxscan303_done887
    goto rxscan303_scan886
  rxscan303_loop885:
    inc rx302_pos
    gt rx302_pos, rx302_eos, rx302_fail881
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!from", rx302_pos
  rxscan303_scan886:
    nqp_rxmark rx302_bstack, rxscan303_loop885, rx302_pos, 0
  rxscan303_done887:
    nqp_rxmark rx302_bstack, rxcap304_fail889, rx302_pos, 0
    add $I11, rx302_pos, 1
    gt $I11, rx302_eos, rx302_fail881
    substr $S10, rx302_tgt, rx302_pos, 1
    ne $S10, ucs4:"~", rx302_fail881
    add rx302_pos, 1
    nqp_rxpeek $I19, rx302_bstack, rxcap304_fail889
    inc $I19
    set $I11, rx302_bstack[$I19]
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx302_pos)
    rx302_cstack = rx302_cur."!cursor_capture"($P11, "sym")
    goto rxcap304_done888
  rxcap304_fail889:
    goto rx302_fail881
  rxcap304_done888:
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."ws"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail881
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail881
    nqp_rxmark rx302_bstack, rxsubrule306_pass891, -1, 0
  rxsubrule306_pass891:
    rx302_cstack = rx302_cur."!cursor_capture"($P11, "GOAL")
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."ws"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail881
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail881
    nqp_rxmark rx302_bstack, rxsubrule308_pass893, -1, 0
  rxsubrule308_pass893:
    rx302_cstack = rx302_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    rx302_cur."!cursor_pass"(rx302_pos, "metachar:sym<~>", 'backtrack'=>1)
    .return (rx302_cur)
  rx302_restart880:
    repr_get_attr_obj rx302_cstack, rx302_cur, rx302_curclass, "$!cstack"
  rx302_fail881:
    unless rx302_bstack, rx302_done879
    pop $I19, rx302_bstack
    if_null rx302_cstack, rx302_cstack_done884
    unless rx302_cstack, rx302_cstack_done884
    dec $I19
    set $P11, rx302_cstack[$I19]
  rx302_cstack_done884:
    pop rx302_rep, rx302_bstack
    pop rx302_pos, rx302_bstack
    pop $I19, rx302_bstack
    lt rx302_pos, -1, rx302_done879
    lt rx302_pos, 0, rx302_fail881
    eq $I19, 0, rx302_fail881
    nqp_islist $I20, rx302_cstack
    unless $I20, rx302_jump882
    elements $I18, rx302_bstack
    le $I18, 0, rx302_cut883
    dec $I18
    set $I18, rx302_bstack[$I18]
  rx302_cut883:
    assign rx302_cstack, $I18
  rx302_jump882:
    jump $I19
  rx302_done879:
    rx302_cur."!cursor_fail"()
    .return (rx302_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{*}>" :subid("cuid_63_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 217
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx309_start
    .local string rx309_tgt
    .local int rx309_pos
    .local int rx309_off
    .local int rx309_eos
    .local int rx309_rep
    .local pmc rx309_cur
    .local pmc rx309_curclass
    .local pmc rx309_bstack
    .local pmc rx309_cstack
    rx309_start = self."!cursor_start_all"()
    set rx309_cur, rx309_start[0]
    set rx309_tgt, rx309_start[1]
    set rx309_pos, rx309_start[2]
    set rx309_curclass, rx309_start[3]
    set rx309_bstack, rx309_start[4]
    set $I19, rx309_start[5]
    store_lex unicode:"$\x{a2}", rx309_cur
    length rx309_eos, rx309_tgt
    eq $I19, 1, rx309_restart896
    gt rx309_pos, rx309_eos, rx309_fail897
    repr_get_attr_int $I11, self, rx309_curclass, "$!from"
    ne $I11, -1, rxscan310_done903
    goto rxscan310_scan902
  rxscan310_loop901:
    inc rx309_pos
    gt rx309_pos, rx309_eos, rx309_fail897
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!from", rx309_pos
  rxscan310_scan902:
    nqp_rxmark rx309_bstack, rxscan310_loop901, rx309_pos, 0
  rxscan310_done903:
    nqp_rxmark rx309_bstack, rxcap311_fail905, rx309_pos, 0
    add $I11, rx309_pos, 3
    gt $I11, rx309_eos, rx309_fail897
    substr $S10, rx309_tgt, rx309_pos, 3
    ne $S10, ucs4:"{*}", rx309_fail897
    add rx309_pos, 3
    nqp_rxpeek $I19, rx309_bstack, rxcap311_fail905
    inc $I19
    set $I11, rx309_bstack[$I19]
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx309_pos)
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "sym")
    goto rxcap311_done904
  rxcap311_fail905:
    goto rx309_fail897
  rxcap311_done904:
    nqp_rxmark rx309_bstack, rxquantr312_done907, rx309_pos, 0
  rxquantr312_loop906:
    nqp_rxmark rx309_bstack, rxquantr313_done909, rx309_pos, 0
  rxquantr313_loop908:
    ge rx309_pos, rx309_eos, rx309_fail897
    substr $S11, rx309_tgt, rx309_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx309_fail897
    inc rx309_pos
    nqp_rxpeek $I19, rx309_bstack, rxquantr313_done909
    inc $I19
    inc $I19
    set rx309_rep, rx309_bstack[$I19]
    nqp_rxcommit rx309_bstack, rxquantr313_done909
    inc rx309_rep
    nqp_rxmark rx309_bstack, rxquantr313_done909, rx309_pos, rx309_rep
    goto rxquantr313_loop908
  rxquantr313_done909:
    add $I11, rx309_pos, 3
    gt $I11, rx309_eos, rx309_fail897
    substr $S10, rx309_tgt, rx309_pos, 3
    ne $S10, ucs4:"#= ", rx309_fail897
    add rx309_pos, 3
    nqp_rxmark rx309_bstack, rxquantr314_done911, rx309_pos, 0
  rxquantr314_loop910:
    ge rx309_pos, rx309_eos, rx309_fail897
    substr $S11, rx309_tgt, rx309_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx309_fail897
    inc rx309_pos
    nqp_rxpeek $I19, rx309_bstack, rxquantr314_done911
    inc $I19
    inc $I19
    set rx309_rep, rx309_bstack[$I19]
    nqp_rxcommit rx309_bstack, rxquantr314_done911
    inc rx309_rep
    nqp_rxmark rx309_bstack, rxquantr314_done911, rx309_pos, rx309_rep
    goto rxquantr314_loop910
  rxquantr314_done911:
    nqp_rxmark rx309_bstack, rxcap315_fail913, rx309_pos, 0
    nqp_rxmark rx309_bstack, rxquantr316_done915, -1, 0
  rxquantr316_loop914:
    ge rx309_pos, rx309_eos, rx309_fail897
    is_cclass $I11, .CCLASS_WHITESPACE, rx309_tgt, rx309_pos
    if $I11, rx309_fail897
    add rx309_pos, 1
    nqp_rxpeek $I19, rx309_bstack, rxquantr316_done915
    inc $I19
    inc $I19
    set rx309_rep, rx309_bstack[$I19]
    nqp_rxcommit rx309_bstack, rxquantr316_done915
    inc rx309_rep
    nqp_rxmark rx309_bstack, rxquantr316_done915, rx309_pos, rx309_rep
    goto rxquantr316_loop914
  rxquantr316_done915:
    nqp_rxmark rx309_bstack, rxquantr317_done917, rx309_pos, 0
  rxquantr317_loop916:
    nqp_rxmark rx309_bstack, rxquantr318_done919, -1, 0
  rxquantr318_loop918:
    ge rx309_pos, rx309_eos, rx309_fail897
    substr $S11, rx309_tgt, rx309_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx309_fail897
    inc rx309_pos
    nqp_rxpeek $I19, rx309_bstack, rxquantr318_done919
    inc $I19
    inc $I19
    set rx309_rep, rx309_bstack[$I19]
    nqp_rxcommit rx309_bstack, rxquantr318_done919
    inc rx309_rep
    nqp_rxmark rx309_bstack, rxquantr318_done919, rx309_pos, rx309_rep
    goto rxquantr318_loop918
  rxquantr318_done919:
    nqp_rxmark rx309_bstack, rxquantr319_done921, -1, 0
  rxquantr319_loop920:
    ge rx309_pos, rx309_eos, rx309_fail897
    is_cclass $I11, .CCLASS_WHITESPACE, rx309_tgt, rx309_pos
    if $I11, rx309_fail897
    add rx309_pos, 1
    nqp_rxpeek $I19, rx309_bstack, rxquantr319_done921
    inc $I19
    inc $I19
    set rx309_rep, rx309_bstack[$I19]
    nqp_rxcommit rx309_bstack, rxquantr319_done921
    inc rx309_rep
    nqp_rxmark rx309_bstack, rxquantr319_done921, rx309_pos, rx309_rep
    goto rxquantr319_loop920
  rxquantr319_done921:
    nqp_rxpeek $I19, rx309_bstack, rxquantr317_done917
    inc $I19
    inc $I19
    set rx309_rep, rx309_bstack[$I19]
    nqp_rxcommit rx309_bstack, rxquantr317_done917
    inc rx309_rep
    nqp_rxmark rx309_bstack, rxquantr317_done917, rx309_pos, rx309_rep
    goto rxquantr317_loop916
  rxquantr317_done917:
    nqp_rxpeek $I19, rx309_bstack, rxcap315_fail913
    inc $I19
    set $I11, rx309_bstack[$I19]
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx309_pos)
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "key")
    goto rxcap315_done912
  rxcap315_fail913:
    goto rx309_fail897
  rxcap315_done912:
    nqp_rxpeek $I19, rx309_bstack, rxquantr312_done907
    inc $I19
    inc $I19
    set rx309_rep, rx309_bstack[$I19]
    nqp_rxcommit rx309_bstack, rxquantr312_done907
    inc rx309_rep
  rxquantr312_done907:
    rx309_cur."!cursor_pass"(rx309_pos, "metachar:sym<{*}>", 'backtrack'=>1)
    .return (rx309_cur)
  rx309_restart896:
    repr_get_attr_obj rx309_cstack, rx309_cur, rx309_curclass, "$!cstack"
  rx309_fail897:
    unless rx309_bstack, rx309_done895
    pop $I19, rx309_bstack
    if_null rx309_cstack, rx309_cstack_done900
    unless rx309_cstack, rx309_cstack_done900
    dec $I19
    set $P11, rx309_cstack[$I19]
  rx309_cstack_done900:
    pop rx309_rep, rx309_bstack
    pop rx309_pos, rx309_bstack
    pop $I19, rx309_bstack
    lt rx309_pos, -1, rx309_done895
    lt rx309_pos, 0, rx309_fail897
    eq $I19, 0, rx309_fail897
    nqp_islist $I20, rx309_cstack
    unless $I20, rx309_jump898
    elements $I18, rx309_bstack
    le $I18, 0, rx309_cut899
    dec $I18
    set $I18, rx309_bstack[$I18]
  rx309_cut899:
    assign rx309_cstack, $I18
  rx309_jump898:
    jump $I19
  rx309_done895:
    rx309_cur."!cursor_fail"()
    .return (rx309_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_64_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 221
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx320_start
    .local string rx320_tgt
    .local int rx320_pos
    .local int rx320_off
    .local int rx320_eos
    .local int rx320_rep
    .local pmc rx320_cur
    .local pmc rx320_curclass
    .local pmc rx320_bstack
    .local pmc rx320_cstack
    rx320_start = self."!cursor_start_all"()
    set rx320_cur, rx320_start[0]
    set rx320_tgt, rx320_start[1]
    set rx320_pos, rx320_start[2]
    set rx320_curclass, rx320_start[3]
    set rx320_bstack, rx320_start[4]
    set $I19, rx320_start[5]
    store_lex unicode:"$\x{a2}", rx320_cur
    length rx320_eos, rx320_tgt
    eq $I19, 1, rx320_restart924
    gt rx320_pos, rx320_eos, rx320_fail925
    repr_get_attr_int $I11, self, rx320_curclass, "$!from"
    ne $I11, -1, rxscan321_done931
    goto rxscan321_scan930
  rxscan321_loop929:
    inc rx320_pos
    gt rx320_pos, rx320_eos, rx320_fail925
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!from", rx320_pos
  rxscan321_scan930:
    nqp_rxmark rx320_bstack, rxscan321_loop929, rx320_pos, 0
  rxscan321_done931:
    add $I11, rx320_pos, 1
    gt $I11, rx320_eos, rx320_fail925
    substr $S10, rx320_tgt, rx320_pos, 1
    ne $S10, ucs4:"<", rx320_fail925
    add rx320_pos, 1
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!pos", rx320_pos
    $P11 = rx320_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx320_curclass, "$!pos"
    lt $I11, 0, rx320_fail925
    nqp_rxmark rx320_bstack, rxsubrule322_pass932, -1, 0
  rxsubrule322_pass932:
    rx320_cstack = rx320_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx320_pos, $P11, rx320_curclass, "$!pos"
  alt323_0934:
    nqp_rxmark rx320_bstack, alt323_1935, rx320_pos, 0
    add $I11, rx320_pos, 1
    gt $I11, rx320_eos, rx320_fail925
    substr $S10, rx320_tgt, rx320_pos, 1
    ne $S10, ucs4:">", rx320_fail925
    add rx320_pos, 1
    goto alt323_end933
  alt323_1935:
    repr_bind_attr_int rx320_cur, rx320_curclass, "$!pos", rx320_pos
    $P11 = rx320_cur."panic"("regex assertion not terminated by angle bracket")
    repr_get_attr_int $I11, $P11, rx320_curclass, "$!pos"
    lt $I11, 0, rx320_fail925
    repr_get_attr_int rx320_pos, $P11, rx320_curclass, "$!pos"
  alt323_end933:
    rx320_cur."!cursor_pass"(rx320_pos, "metachar:sym<assert>", 'backtrack'=>1)
    .return (rx320_cur)
  rx320_restart924:
    repr_get_attr_obj rx320_cstack, rx320_cur, rx320_curclass, "$!cstack"
  rx320_fail925:
    unless rx320_bstack, rx320_done923
    pop $I19, rx320_bstack
    if_null rx320_cstack, rx320_cstack_done928
    unless rx320_cstack, rx320_cstack_done928
    dec $I19
    set $P11, rx320_cstack[$I19]
  rx320_cstack_done928:
    pop rx320_rep, rx320_bstack
    pop rx320_pos, rx320_bstack
    pop $I19, rx320_bstack
    lt rx320_pos, -1, rx320_done923
    lt rx320_pos, 0, rx320_fail925
    eq $I19, 0, rx320_fail925
    nqp_islist $I20, rx320_cstack
    unless $I20, rx320_jump926
    elements $I18, rx320_bstack
    le $I18, 0, rx320_cut927
    dec $I18
    set $I18, rx320_bstack[$I18]
  rx320_cut927:
    assign rx320_cstack, $I18
  rx320_jump926:
    jump $I19
  rx320_done923:
    rx320_cur."!cursor_fail"()
    .return (rx320_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_65_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 226
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx325_start
    .local string rx325_tgt
    .local int rx325_pos
    .local int rx325_off
    .local int rx325_eos
    .local int rx325_rep
    .local pmc rx325_cur
    .local pmc rx325_curclass
    .local pmc rx325_bstack
    .local pmc rx325_cstack
    rx325_start = self."!cursor_start_all"()
    set rx325_cur, rx325_start[0]
    set rx325_tgt, rx325_start[1]
    set rx325_pos, rx325_start[2]
    set rx325_curclass, rx325_start[3]
    set rx325_bstack, rx325_start[4]
    set $I19, rx325_start[5]
    store_lex unicode:"$\x{a2}", rx325_cur
    length rx325_eos, rx325_tgt
    eq $I19, 1, rx325_restart939
    gt rx325_pos, rx325_eos, rx325_fail940
    repr_get_attr_int $I11, self, rx325_curclass, "$!from"
    ne $I11, -1, rxscan326_done946
    goto rxscan326_scan945
  rxscan326_loop944:
    inc rx325_pos
    gt rx325_pos, rx325_eos, rx325_fail940
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!from", rx325_pos
  rxscan326_scan945:
    nqp_rxmark rx325_bstack, rxscan326_loop944, rx325_pos, 0
  rxscan326_done946:
    ge rx325_pos, rx325_eos, rx325_fail940
    substr $S11, rx325_tgt, rx325_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx325_fail940
    inc rx325_pos
    rx325_cur."!cursor_pass"(rx325_pos, "sigil", 'backtrack'=>1)
    .return (rx325_cur)
  rx325_restart939:
    repr_get_attr_obj rx325_cstack, rx325_cur, rx325_curclass, "$!cstack"
  rx325_fail940:
    unless rx325_bstack, rx325_done938
    pop $I19, rx325_bstack
    if_null rx325_cstack, rx325_cstack_done943
    unless rx325_cstack, rx325_cstack_done943
    dec $I19
    set $P11, rx325_cstack[$I19]
  rx325_cstack_done943:
    pop rx325_rep, rx325_bstack
    pop rx325_pos, rx325_bstack
    pop $I19, rx325_bstack
    lt rx325_pos, -1, rx325_done938
    lt rx325_pos, 0, rx325_fail940
    eq $I19, 0, rx325_fail940
    nqp_islist $I20, rx325_cstack
    unless $I20, rx325_jump941
    elements $I18, rx325_bstack
    le $I18, 0, rx325_cut942
    dec $I18
    set $I18, rx325_bstack[$I18]
  rx325_cut942:
    assign rx325_cstack, $I18
  rx325_jump941:
    jump $I19
  rx325_done938:
    rx325_cur."!cursor_fail"()
    .return (rx325_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_66_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 228
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx327_start
    .local string rx327_tgt
    .local int rx327_pos
    .local int rx327_off
    .local int rx327_eos
    .local int rx327_rep
    .local pmc rx327_cur
    .local pmc rx327_curclass
    .local pmc rx327_bstack
    .local pmc rx327_cstack
    rx327_start = self."!cursor_start_all"()
    set rx327_cur, rx327_start[0]
    set rx327_tgt, rx327_start[1]
    set rx327_pos, rx327_start[2]
    set rx327_curclass, rx327_start[3]
    set rx327_bstack, rx327_start[4]
    set $I19, rx327_start[5]
    store_lex unicode:"$\x{a2}", rx327_cur
    length rx327_eos, rx327_tgt
    eq $I19, 1, rx327_restart949
    gt rx327_pos, rx327_eos, rx327_fail950
    repr_get_attr_int $I11, self, rx327_curclass, "$!from"
    ne $I11, -1, rxscan328_done956
    goto rxscan328_scan955
  rxscan328_loop954:
    inc rx327_pos
    gt rx327_pos, rx327_eos, rx327_fail950
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!from", rx327_pos
  rxscan328_scan955:
    nqp_rxmark rx327_bstack, rxscan328_loop954, rx327_pos, 0
  rxscan328_done956:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt329_0958
    nqp_push_label $P11, alt329_1963
    nqp_rxmark rx327_bstack, alt329_end957, -1, 0
    rx327_cur."!alt"(rx327_pos, "alt_nfa__12_1361537947.0351", $P11)
    goto rx327_fail950
  alt329_0958:
    add $I11, rx327_pos, 2
    gt $I11, rx327_eos, rx327_fail950
    substr $S10, rx327_tgt, rx327_pos, 2
    ne $S10, ucs4:"$<", rx327_fail950
    add rx327_pos, 2
    nqp_rxmark rx327_bstack, rxcap330_fail960, rx327_pos, 0
    nqp_rxmark rx327_bstack, rxquantr331_done962, -1, 0
  rxquantr331_loop961:
    ge rx327_pos, rx327_eos, rx327_fail950
    substr $S11, rx327_tgt, rx327_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx327_fail950
    inc rx327_pos
    nqp_rxpeek $I19, rx327_bstack, rxquantr331_done962
    inc $I19
    inc $I19
    set rx327_rep, rx327_bstack[$I19]
    nqp_rxcommit rx327_bstack, rxquantr331_done962
    inc rx327_rep
    nqp_rxmark rx327_bstack, rxquantr331_done962, rx327_pos, rx327_rep
    goto rxquantr331_loop961
  rxquantr331_done962:
    nqp_rxpeek $I19, rx327_bstack, rxcap330_fail960
    inc $I19
    set $I11, rx327_bstack[$I19]
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx327_pos)
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "name")
    goto rxcap330_done959
  rxcap330_fail960:
    goto rx327_fail950
  rxcap330_done959:
    add $I11, rx327_pos, 1
    gt $I11, rx327_eos, rx327_fail950
    substr $S10, rx327_tgt, rx327_pos, 1
    ne $S10, ucs4:">", rx327_fail950
    add rx327_pos, 1
    goto alt329_end957
  alt329_1963:
    add $I11, rx327_pos, 1
    gt $I11, rx327_eos, rx327_fail950
    substr $S10, rx327_tgt, rx327_pos, 1
    ne $S10, ucs4:"$", rx327_fail950
    add rx327_pos, 1
    nqp_rxmark rx327_bstack, rxcap332_fail965, rx327_pos, 0
    nqp_rxmark rx327_bstack, rxquantr333_done967, -1, 0
  rxquantr333_loop966:
    ge rx327_pos, rx327_eos, rx327_fail950
    is_cclass $I11, .CCLASS_NUMERIC, rx327_tgt, rx327_pos
    unless $I11, rx327_fail950
    add rx327_pos, 1
    nqp_rxpeek $I19, rx327_bstack, rxquantr333_done967
    inc $I19
    inc $I19
    set rx327_rep, rx327_bstack[$I19]
    nqp_rxcommit rx327_bstack, rxquantr333_done967
    inc rx327_rep
    nqp_rxmark rx327_bstack, rxquantr333_done967, rx327_pos, rx327_rep
    goto rxquantr333_loop966
  rxquantr333_done967:
    nqp_rxpeek $I19, rx327_bstack, rxcap332_fail965
    inc $I19
    set $I11, rx327_bstack[$I19]
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx327_pos)
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "pos")
    goto rxcap332_done964
  rxcap332_fail965:
    goto rx327_fail950
  rxcap332_done964:
    goto alt329_end957
  alt329_end957:
    nqp_rxcommit rx327_bstack, alt329_end957
    nqp_rxmark rx327_bstack, rxquantr334_done969, rx327_pos, 0
  rxquantr334_loop968:
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."ws"()
    repr_get_attr_int $I11, $P11, rx327_curclass, "$!pos"
    lt $I11, 0, rx327_fail950
    repr_get_attr_int rx327_pos, $P11, rx327_curclass, "$!pos"
    add $I11, rx327_pos, 1
    gt $I11, rx327_eos, rx327_fail950
    substr $S10, rx327_tgt, rx327_pos, 1
    ne $S10, ucs4:"=", rx327_fail950
    add rx327_pos, 1
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."ws"()
    repr_get_attr_int $I11, $P11, rx327_curclass, "$!pos"
    lt $I11, 0, rx327_fail950
    repr_get_attr_int rx327_pos, $P11, rx327_curclass, "$!pos"
    repr_bind_attr_int rx327_cur, rx327_curclass, "$!pos", rx327_pos
    $P11 = rx327_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx327_curclass, "$!pos"
    lt $I11, 0, rx327_fail950
    nqp_rxmark rx327_bstack, rxsubrule337_pass972, -1, 0
  rxsubrule337_pass972:
    rx327_cstack = rx327_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx327_pos, $P11, rx327_curclass, "$!pos"
    nqp_rxpeek $I19, rx327_bstack, rxquantr334_done969
    inc $I19
    inc $I19
    set rx327_rep, rx327_bstack[$I19]
    nqp_rxcommit rx327_bstack, rxquantr334_done969
    inc rx327_rep
  rxquantr334_done969:
    rx327_cur."!cursor_pass"(rx327_pos, "metachar:sym<var>", 'backtrack'=>1)
    .return (rx327_cur)
  rx327_restart949:
    repr_get_attr_obj rx327_cstack, rx327_cur, rx327_curclass, "$!cstack"
  rx327_fail950:
    unless rx327_bstack, rx327_done948
    pop $I19, rx327_bstack
    if_null rx327_cstack, rx327_cstack_done953
    unless rx327_cstack, rx327_cstack_done953
    dec $I19
    set $P11, rx327_cstack[$I19]
  rx327_cstack_done953:
    pop rx327_rep, rx327_bstack
    pop rx327_pos, rx327_bstack
    pop $I19, rx327_bstack
    lt rx327_pos, -1, rx327_done948
    lt rx327_pos, 0, rx327_fail950
    eq $I19, 0, rx327_fail950
    nqp_islist $I20, rx327_cstack
    unless $I20, rx327_jump951
    elements $I18, rx327_bstack
    le $I18, 0, rx327_cut952
    dec $I18
    set $I18, rx327_bstack[$I18]
  rx327_cut952:
    assign rx327_cstack, $I18
  rx327_jump951:
    jump $I19
  rx327_done948:
    rx327_cur."!cursor_fail"()
    .return (rx327_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash" :subid("cuid_67_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 237
    .param pmc self 
    $P5001 = self."!protoregex"("backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_68_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx338_start
    .local string rx338_tgt
    .local int rx338_pos
    .local int rx338_off
    .local int rx338_eos
    .local int rx338_rep
    .local pmc rx338_cur
    .local pmc rx338_curclass
    .local pmc rx338_bstack
    .local pmc rx338_cstack
    rx338_start = self."!cursor_start_all"()
    set rx338_cur, rx338_start[0]
    set rx338_tgt, rx338_start[1]
    set rx338_pos, rx338_start[2]
    set rx338_curclass, rx338_start[3]
    set rx338_bstack, rx338_start[4]
    set $I19, rx338_start[5]
    store_lex unicode:"$\x{a2}", rx338_cur
    length rx338_eos, rx338_tgt
    eq $I19, 1, rx338_restart975
    gt rx338_pos, rx338_eos, rx338_fail976
    repr_get_attr_int $I11, self, rx338_curclass, "$!from"
    ne $I11, -1, rxscan339_done982
    goto rxscan339_scan981
  rxscan339_loop980:
    inc rx338_pos
    gt rx338_pos, rx338_eos, rx338_fail976
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!from", rx338_pos
  rxscan339_scan981:
    nqp_rxmark rx338_bstack, rxscan339_loop980, rx338_pos, 0
  rxscan339_done982:
    nqp_rxmark rx338_bstack, rxcap340_fail984, rx338_pos, 0
    ge rx338_pos, rx338_eos, rx338_fail976
    substr $S11, rx338_tgt, rx338_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx338_fail976
    inc rx338_pos
    nqp_rxpeek $I19, rx338_bstack, rxcap340_fail984
    inc $I19
    set $I11, rx338_bstack[$I19]
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx338_pos)
    rx338_cstack = rx338_cur."!cursor_capture"($P11, "sym")
    goto rxcap340_done983
  rxcap340_fail984:
    goto rx338_fail976
  rxcap340_done983:
    rx338_cur."!cursor_pass"(rx338_pos, "backslash:sym<s>", 'backtrack'=>1)
    .return (rx338_cur)
  rx338_restart975:
    repr_get_attr_obj rx338_cstack, rx338_cur, rx338_curclass, "$!cstack"
  rx338_fail976:
    unless rx338_bstack, rx338_done974
    pop $I19, rx338_bstack
    if_null rx338_cstack, rx338_cstack_done979
    unless rx338_cstack, rx338_cstack_done979
    dec $I19
    set $P11, rx338_cstack[$I19]
  rx338_cstack_done979:
    pop rx338_rep, rx338_bstack
    pop rx338_pos, rx338_bstack
    pop $I19, rx338_bstack
    lt rx338_pos, -1, rx338_done974
    lt rx338_pos, 0, rx338_fail976
    eq $I19, 0, rx338_fail976
    nqp_islist $I20, rx338_cstack
    unless $I20, rx338_jump977
    elements $I18, rx338_bstack
    le $I18, 0, rx338_cut978
    dec $I18
    set $I18, rx338_bstack[$I18]
  rx338_cut978:
    assign rx338_cstack, $I18
  rx338_jump977:
    jump $I19
  rx338_done974:
    rx338_cur."!cursor_fail"()
    .return (rx338_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_69_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 239
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx341_start
    .local string rx341_tgt
    .local int rx341_pos
    .local int rx341_off
    .local int rx341_eos
    .local int rx341_rep
    .local pmc rx341_cur
    .local pmc rx341_curclass
    .local pmc rx341_bstack
    .local pmc rx341_cstack
    rx341_start = self."!cursor_start_all"()
    set rx341_cur, rx341_start[0]
    set rx341_tgt, rx341_start[1]
    set rx341_pos, rx341_start[2]
    set rx341_curclass, rx341_start[3]
    set rx341_bstack, rx341_start[4]
    set $I19, rx341_start[5]
    store_lex unicode:"$\x{a2}", rx341_cur
    length rx341_eos, rx341_tgt
    eq $I19, 1, rx341_restart987
    gt rx341_pos, rx341_eos, rx341_fail988
    repr_get_attr_int $I11, self, rx341_curclass, "$!from"
    ne $I11, -1, rxscan342_done994
    goto rxscan342_scan993
  rxscan342_loop992:
    inc rx341_pos
    gt rx341_pos, rx341_eos, rx341_fail988
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!from", rx341_pos
  rxscan342_scan993:
    nqp_rxmark rx341_bstack, rxscan342_loop992, rx341_pos, 0
  rxscan342_done994:
    nqp_rxmark rx341_bstack, rxcap343_fail996, rx341_pos, 0
    ge rx341_pos, rx341_eos, rx341_fail988
    substr $S11, rx341_tgt, rx341_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx341_fail988
    inc rx341_pos
    nqp_rxpeek $I19, rx341_bstack, rxcap343_fail996
    inc $I19
    set $I11, rx341_bstack[$I19]
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!pos", rx341_pos
    $P11 = rx341_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx341_pos)
    rx341_cstack = rx341_cur."!cursor_capture"($P11, "sym")
    goto rxcap343_done995
  rxcap343_fail996:
    goto rx341_fail988
  rxcap343_done995:
    rx341_cur."!cursor_pass"(rx341_pos, "backslash:sym<b>", 'backtrack'=>1)
    .return (rx341_cur)
  rx341_restart987:
    repr_get_attr_obj rx341_cstack, rx341_cur, rx341_curclass, "$!cstack"
  rx341_fail988:
    unless rx341_bstack, rx341_done986
    pop $I19, rx341_bstack
    if_null rx341_cstack, rx341_cstack_done991
    unless rx341_cstack, rx341_cstack_done991
    dec $I19
    set $P11, rx341_cstack[$I19]
  rx341_cstack_done991:
    pop rx341_rep, rx341_bstack
    pop rx341_pos, rx341_bstack
    pop $I19, rx341_bstack
    lt rx341_pos, -1, rx341_done986
    lt rx341_pos, 0, rx341_fail988
    eq $I19, 0, rx341_fail988
    nqp_islist $I20, rx341_cstack
    unless $I20, rx341_jump989
    elements $I18, rx341_bstack
    le $I18, 0, rx341_cut990
    dec $I18
    set $I18, rx341_bstack[$I18]
  rx341_cut990:
    assign rx341_cstack, $I18
  rx341_jump989:
    jump $I19
  rx341_done986:
    rx341_cur."!cursor_fail"()
    .return (rx341_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_70_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx344_start
    .local string rx344_tgt
    .local int rx344_pos
    .local int rx344_off
    .local int rx344_eos
    .local int rx344_rep
    .local pmc rx344_cur
    .local pmc rx344_curclass
    .local pmc rx344_bstack
    .local pmc rx344_cstack
    rx344_start = self."!cursor_start_all"()
    set rx344_cur, rx344_start[0]
    set rx344_tgt, rx344_start[1]
    set rx344_pos, rx344_start[2]
    set rx344_curclass, rx344_start[3]
    set rx344_bstack, rx344_start[4]
    set $I19, rx344_start[5]
    store_lex unicode:"$\x{a2}", rx344_cur
    length rx344_eos, rx344_tgt
    eq $I19, 1, rx344_restart999
    gt rx344_pos, rx344_eos, rx344_fail1000
    repr_get_attr_int $I11, self, rx344_curclass, "$!from"
    ne $I11, -1, rxscan345_done1006
    goto rxscan345_scan1005
  rxscan345_loop1004:
    inc rx344_pos
    gt rx344_pos, rx344_eos, rx344_fail1000
    repr_bind_attr_int rx344_cur, rx344_curclass, "$!from", rx344_pos
  rxscan345_scan1005:
    nqp_rxmark rx344_bstack, rxscan345_loop1004, rx344_pos, 0
  rxscan345_done1006:
    nqp_rxmark rx344_bstack, rxcap346_fail1008, rx344_pos, 0
    ge rx344_pos, rx344_eos, rx344_fail1000
    substr $S11, rx344_tgt, rx344_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx344_fail1000
    inc rx344_pos
    nqp_rxpeek $I19, rx344_bstack, rxcap346_fail1008
    inc $I19
    set $I11, rx344_bstack[$I19]
    repr_bind_attr_int rx344_cur, rx344_curclass, "$!pos", rx344_pos
    $P11 = rx344_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx344_pos)
    rx344_cstack = rx344_cur."!cursor_capture"($P11, "sym")
    goto rxcap346_done1007
  rxcap346_fail1008:
    goto rx344_fail1000
  rxcap346_done1007:
    rx344_cur."!cursor_pass"(rx344_pos, "backslash:sym<e>", 'backtrack'=>1)
    .return (rx344_cur)
  rx344_restart999:
    repr_get_attr_obj rx344_cstack, rx344_cur, rx344_curclass, "$!cstack"
  rx344_fail1000:
    unless rx344_bstack, rx344_done998
    pop $I19, rx344_bstack
    if_null rx344_cstack, rx344_cstack_done1003
    unless rx344_cstack, rx344_cstack_done1003
    dec $I19
    set $P11, rx344_cstack[$I19]
  rx344_cstack_done1003:
    pop rx344_rep, rx344_bstack
    pop rx344_pos, rx344_bstack
    pop $I19, rx344_bstack
    lt rx344_pos, -1, rx344_done998
    lt rx344_pos, 0, rx344_fail1000
    eq $I19, 0, rx344_fail1000
    nqp_islist $I20, rx344_cstack
    unless $I20, rx344_jump1001
    elements $I18, rx344_bstack
    le $I18, 0, rx344_cut1002
    dec $I18
    set $I18, rx344_bstack[$I18]
  rx344_cut1002:
    assign rx344_cstack, $I18
  rx344_jump1001:
    jump $I19
  rx344_done998:
    rx344_cur."!cursor_fail"()
    .return (rx344_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_71_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 241
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx347_start
    .local string rx347_tgt
    .local int rx347_pos
    .local int rx347_off
    .local int rx347_eos
    .local int rx347_rep
    .local pmc rx347_cur
    .local pmc rx347_curclass
    .local pmc rx347_bstack
    .local pmc rx347_cstack
    rx347_start = self."!cursor_start_all"()
    set rx347_cur, rx347_start[0]
    set rx347_tgt, rx347_start[1]
    set rx347_pos, rx347_start[2]
    set rx347_curclass, rx347_start[3]
    set rx347_bstack, rx347_start[4]
    set $I19, rx347_start[5]
    store_lex unicode:"$\x{a2}", rx347_cur
    length rx347_eos, rx347_tgt
    eq $I19, 1, rx347_restart1011
    gt rx347_pos, rx347_eos, rx347_fail1012
    repr_get_attr_int $I11, self, rx347_curclass, "$!from"
    ne $I11, -1, rxscan348_done1018
    goto rxscan348_scan1017
  rxscan348_loop1016:
    inc rx347_pos
    gt rx347_pos, rx347_eos, rx347_fail1012
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!from", rx347_pos
  rxscan348_scan1017:
    nqp_rxmark rx347_bstack, rxscan348_loop1016, rx347_pos, 0
  rxscan348_done1018:
    nqp_rxmark rx347_bstack, rxcap349_fail1020, rx347_pos, 0
    ge rx347_pos, rx347_eos, rx347_fail1012
    substr $S11, rx347_tgt, rx347_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx347_fail1012
    inc rx347_pos
    nqp_rxpeek $I19, rx347_bstack, rxcap349_fail1020
    inc $I19
    set $I11, rx347_bstack[$I19]
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!pos", rx347_pos
    $P11 = rx347_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx347_pos)
    rx347_cstack = rx347_cur."!cursor_capture"($P11, "sym")
    goto rxcap349_done1019
  rxcap349_fail1020:
    goto rx347_fail1012
  rxcap349_done1019:
    rx347_cur."!cursor_pass"(rx347_pos, "backslash:sym<f>", 'backtrack'=>1)
    .return (rx347_cur)
  rx347_restart1011:
    repr_get_attr_obj rx347_cstack, rx347_cur, rx347_curclass, "$!cstack"
  rx347_fail1012:
    unless rx347_bstack, rx347_done1010
    pop $I19, rx347_bstack
    if_null rx347_cstack, rx347_cstack_done1015
    unless rx347_cstack, rx347_cstack_done1015
    dec $I19
    set $P11, rx347_cstack[$I19]
  rx347_cstack_done1015:
    pop rx347_rep, rx347_bstack
    pop rx347_pos, rx347_bstack
    pop $I19, rx347_bstack
    lt rx347_pos, -1, rx347_done1010
    lt rx347_pos, 0, rx347_fail1012
    eq $I19, 0, rx347_fail1012
    nqp_islist $I20, rx347_cstack
    unless $I20, rx347_jump1013
    elements $I18, rx347_bstack
    le $I18, 0, rx347_cut1014
    dec $I18
    set $I18, rx347_bstack[$I18]
  rx347_cut1014:
    assign rx347_cstack, $I18
  rx347_jump1013:
    jump $I19
  rx347_done1010:
    rx347_cur."!cursor_fail"()
    .return (rx347_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_72_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx350_start
    .local string rx350_tgt
    .local int rx350_pos
    .local int rx350_off
    .local int rx350_eos
    .local int rx350_rep
    .local pmc rx350_cur
    .local pmc rx350_curclass
    .local pmc rx350_bstack
    .local pmc rx350_cstack
    rx350_start = self."!cursor_start_all"()
    set rx350_cur, rx350_start[0]
    set rx350_tgt, rx350_start[1]
    set rx350_pos, rx350_start[2]
    set rx350_curclass, rx350_start[3]
    set rx350_bstack, rx350_start[4]
    set $I19, rx350_start[5]
    store_lex unicode:"$\x{a2}", rx350_cur
    length rx350_eos, rx350_tgt
    eq $I19, 1, rx350_restart1023
    gt rx350_pos, rx350_eos, rx350_fail1024
    repr_get_attr_int $I11, self, rx350_curclass, "$!from"
    ne $I11, -1, rxscan351_done1030
    goto rxscan351_scan1029
  rxscan351_loop1028:
    inc rx350_pos
    gt rx350_pos, rx350_eos, rx350_fail1024
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!from", rx350_pos
  rxscan351_scan1029:
    nqp_rxmark rx350_bstack, rxscan351_loop1028, rx350_pos, 0
  rxscan351_done1030:
    nqp_rxmark rx350_bstack, rxcap352_fail1032, rx350_pos, 0
    ge rx350_pos, rx350_eos, rx350_fail1024
    substr $S11, rx350_tgt, rx350_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx350_fail1024
    inc rx350_pos
    nqp_rxpeek $I19, rx350_bstack, rxcap352_fail1032
    inc $I19
    set $I11, rx350_bstack[$I19]
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx350_pos)
    rx350_cstack = rx350_cur."!cursor_capture"($P11, "sym")
    goto rxcap352_done1031
  rxcap352_fail1032:
    goto rx350_fail1024
  rxcap352_done1031:
    rx350_cur."!cursor_pass"(rx350_pos, "backslash:sym<h>", 'backtrack'=>1)
    .return (rx350_cur)
  rx350_restart1023:
    repr_get_attr_obj rx350_cstack, rx350_cur, rx350_curclass, "$!cstack"
  rx350_fail1024:
    unless rx350_bstack, rx350_done1022
    pop $I19, rx350_bstack
    if_null rx350_cstack, rx350_cstack_done1027
    unless rx350_cstack, rx350_cstack_done1027
    dec $I19
    set $P11, rx350_cstack[$I19]
  rx350_cstack_done1027:
    pop rx350_rep, rx350_bstack
    pop rx350_pos, rx350_bstack
    pop $I19, rx350_bstack
    lt rx350_pos, -1, rx350_done1022
    lt rx350_pos, 0, rx350_fail1024
    eq $I19, 0, rx350_fail1024
    nqp_islist $I20, rx350_cstack
    unless $I20, rx350_jump1025
    elements $I18, rx350_bstack
    le $I18, 0, rx350_cut1026
    dec $I18
    set $I18, rx350_bstack[$I18]
  rx350_cut1026:
    assign rx350_cstack, $I18
  rx350_jump1025:
    jump $I19
  rx350_done1022:
    rx350_cur."!cursor_fail"()
    .return (rx350_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_73_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx353_start
    .local string rx353_tgt
    .local int rx353_pos
    .local int rx353_off
    .local int rx353_eos
    .local int rx353_rep
    .local pmc rx353_cur
    .local pmc rx353_curclass
    .local pmc rx353_bstack
    .local pmc rx353_cstack
    rx353_start = self."!cursor_start_all"()
    set rx353_cur, rx353_start[0]
    set rx353_tgt, rx353_start[1]
    set rx353_pos, rx353_start[2]
    set rx353_curclass, rx353_start[3]
    set rx353_bstack, rx353_start[4]
    set $I19, rx353_start[5]
    store_lex unicode:"$\x{a2}", rx353_cur
    length rx353_eos, rx353_tgt
    eq $I19, 1, rx353_restart1035
    gt rx353_pos, rx353_eos, rx353_fail1036
    repr_get_attr_int $I11, self, rx353_curclass, "$!from"
    ne $I11, -1, rxscan354_done1042
    goto rxscan354_scan1041
  rxscan354_loop1040:
    inc rx353_pos
    gt rx353_pos, rx353_eos, rx353_fail1036
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!from", rx353_pos
  rxscan354_scan1041:
    nqp_rxmark rx353_bstack, rxscan354_loop1040, rx353_pos, 0
  rxscan354_done1042:
    nqp_rxmark rx353_bstack, rxcap355_fail1044, rx353_pos, 0
    ge rx353_pos, rx353_eos, rx353_fail1036
    substr $S11, rx353_tgt, rx353_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx353_fail1036
    inc rx353_pos
    nqp_rxpeek $I19, rx353_bstack, rxcap355_fail1044
    inc $I19
    set $I11, rx353_bstack[$I19]
    repr_bind_attr_int rx353_cur, rx353_curclass, "$!pos", rx353_pos
    $P11 = rx353_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx353_pos)
    rx353_cstack = rx353_cur."!cursor_capture"($P11, "sym")
    goto rxcap355_done1043
  rxcap355_fail1044:
    goto rx353_fail1036
  rxcap355_done1043:
    rx353_cur."!cursor_pass"(rx353_pos, "backslash:sym<r>", 'backtrack'=>1)
    .return (rx353_cur)
  rx353_restart1035:
    repr_get_attr_obj rx353_cstack, rx353_cur, rx353_curclass, "$!cstack"
  rx353_fail1036:
    unless rx353_bstack, rx353_done1034
    pop $I19, rx353_bstack
    if_null rx353_cstack, rx353_cstack_done1039
    unless rx353_cstack, rx353_cstack_done1039
    dec $I19
    set $P11, rx353_cstack[$I19]
  rx353_cstack_done1039:
    pop rx353_rep, rx353_bstack
    pop rx353_pos, rx353_bstack
    pop $I19, rx353_bstack
    lt rx353_pos, -1, rx353_done1034
    lt rx353_pos, 0, rx353_fail1036
    eq $I19, 0, rx353_fail1036
    nqp_islist $I20, rx353_cstack
    unless $I20, rx353_jump1037
    elements $I18, rx353_bstack
    le $I18, 0, rx353_cut1038
    dec $I18
    set $I18, rx353_bstack[$I18]
  rx353_cut1038:
    assign rx353_cstack, $I18
  rx353_jump1037:
    jump $I19
  rx353_done1034:
    rx353_cur."!cursor_fail"()
    .return (rx353_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_74_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx356_start
    .local string rx356_tgt
    .local int rx356_pos
    .local int rx356_off
    .local int rx356_eos
    .local int rx356_rep
    .local pmc rx356_cur
    .local pmc rx356_curclass
    .local pmc rx356_bstack
    .local pmc rx356_cstack
    rx356_start = self."!cursor_start_all"()
    set rx356_cur, rx356_start[0]
    set rx356_tgt, rx356_start[1]
    set rx356_pos, rx356_start[2]
    set rx356_curclass, rx356_start[3]
    set rx356_bstack, rx356_start[4]
    set $I19, rx356_start[5]
    store_lex unicode:"$\x{a2}", rx356_cur
    length rx356_eos, rx356_tgt
    eq $I19, 1, rx356_restart1047
    gt rx356_pos, rx356_eos, rx356_fail1048
    repr_get_attr_int $I11, self, rx356_curclass, "$!from"
    ne $I11, -1, rxscan357_done1054
    goto rxscan357_scan1053
  rxscan357_loop1052:
    inc rx356_pos
    gt rx356_pos, rx356_eos, rx356_fail1048
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!from", rx356_pos
  rxscan357_scan1053:
    nqp_rxmark rx356_bstack, rxscan357_loop1052, rx356_pos, 0
  rxscan357_done1054:
    nqp_rxmark rx356_bstack, rxcap358_fail1056, rx356_pos, 0
    ge rx356_pos, rx356_eos, rx356_fail1048
    substr $S11, rx356_tgt, rx356_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx356_fail1048
    inc rx356_pos
    nqp_rxpeek $I19, rx356_bstack, rxcap358_fail1056
    inc $I19
    set $I11, rx356_bstack[$I19]
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx356_pos)
    rx356_cstack = rx356_cur."!cursor_capture"($P11, "sym")
    goto rxcap358_done1055
  rxcap358_fail1056:
    goto rx356_fail1048
  rxcap358_done1055:
    rx356_cur."!cursor_pass"(rx356_pos, "backslash:sym<t>", 'backtrack'=>1)
    .return (rx356_cur)
  rx356_restart1047:
    repr_get_attr_obj rx356_cstack, rx356_cur, rx356_curclass, "$!cstack"
  rx356_fail1048:
    unless rx356_bstack, rx356_done1046
    pop $I19, rx356_bstack
    if_null rx356_cstack, rx356_cstack_done1051
    unless rx356_cstack, rx356_cstack_done1051
    dec $I19
    set $P11, rx356_cstack[$I19]
  rx356_cstack_done1051:
    pop rx356_rep, rx356_bstack
    pop rx356_pos, rx356_bstack
    pop $I19, rx356_bstack
    lt rx356_pos, -1, rx356_done1046
    lt rx356_pos, 0, rx356_fail1048
    eq $I19, 0, rx356_fail1048
    nqp_islist $I20, rx356_cstack
    unless $I20, rx356_jump1049
    elements $I18, rx356_bstack
    le $I18, 0, rx356_cut1050
    dec $I18
    set $I18, rx356_bstack[$I18]
  rx356_cut1050:
    assign rx356_cstack, $I18
  rx356_jump1049:
    jump $I19
  rx356_done1046:
    rx356_cur."!cursor_fail"()
    .return (rx356_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_75_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx359_start
    .local string rx359_tgt
    .local int rx359_pos
    .local int rx359_off
    .local int rx359_eos
    .local int rx359_rep
    .local pmc rx359_cur
    .local pmc rx359_curclass
    .local pmc rx359_bstack
    .local pmc rx359_cstack
    rx359_start = self."!cursor_start_all"()
    set rx359_cur, rx359_start[0]
    set rx359_tgt, rx359_start[1]
    set rx359_pos, rx359_start[2]
    set rx359_curclass, rx359_start[3]
    set rx359_bstack, rx359_start[4]
    set $I19, rx359_start[5]
    store_lex unicode:"$\x{a2}", rx359_cur
    length rx359_eos, rx359_tgt
    eq $I19, 1, rx359_restart1059
    gt rx359_pos, rx359_eos, rx359_fail1060
    repr_get_attr_int $I11, self, rx359_curclass, "$!from"
    ne $I11, -1, rxscan360_done1066
    goto rxscan360_scan1065
  rxscan360_loop1064:
    inc rx359_pos
    gt rx359_pos, rx359_eos, rx359_fail1060
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!from", rx359_pos
  rxscan360_scan1065:
    nqp_rxmark rx359_bstack, rxscan360_loop1064, rx359_pos, 0
  rxscan360_done1066:
    nqp_rxmark rx359_bstack, rxcap361_fail1068, rx359_pos, 0
    ge rx359_pos, rx359_eos, rx359_fail1060
    substr $S11, rx359_tgt, rx359_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx359_fail1060
    inc rx359_pos
    nqp_rxpeek $I19, rx359_bstack, rxcap361_fail1068
    inc $I19
    set $I11, rx359_bstack[$I19]
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    $P11 = rx359_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx359_pos)
    rx359_cstack = rx359_cur."!cursor_capture"($P11, "sym")
    goto rxcap361_done1067
  rxcap361_fail1068:
    goto rx359_fail1060
  rxcap361_done1067:
    rx359_cur."!cursor_pass"(rx359_pos, "backslash:sym<v>", 'backtrack'=>1)
    .return (rx359_cur)
  rx359_restart1059:
    repr_get_attr_obj rx359_cstack, rx359_cur, rx359_curclass, "$!cstack"
  rx359_fail1060:
    unless rx359_bstack, rx359_done1058
    pop $I19, rx359_bstack
    if_null rx359_cstack, rx359_cstack_done1063
    unless rx359_cstack, rx359_cstack_done1063
    dec $I19
    set $P11, rx359_cstack[$I19]
  rx359_cstack_done1063:
    pop rx359_rep, rx359_bstack
    pop rx359_pos, rx359_bstack
    pop $I19, rx359_bstack
    lt rx359_pos, -1, rx359_done1058
    lt rx359_pos, 0, rx359_fail1060
    eq $I19, 0, rx359_fail1060
    nqp_islist $I20, rx359_cstack
    unless $I20, rx359_jump1061
    elements $I18, rx359_bstack
    le $I18, 0, rx359_cut1062
    dec $I18
    set $I18, rx359_bstack[$I18]
  rx359_cut1062:
    assign rx359_cstack, $I18
  rx359_jump1061:
    jump $I19
  rx359_done1058:
    rx359_cur."!cursor_fail"()
    .return (rx359_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_76_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx362_start
    .local string rx362_tgt
    .local int rx362_pos
    .local int rx362_off
    .local int rx362_eos
    .local int rx362_rep
    .local pmc rx362_cur
    .local pmc rx362_curclass
    .local pmc rx362_bstack
    .local pmc rx362_cstack
    rx362_start = self."!cursor_start_all"()
    set rx362_cur, rx362_start[0]
    set rx362_tgt, rx362_start[1]
    set rx362_pos, rx362_start[2]
    set rx362_curclass, rx362_start[3]
    set rx362_bstack, rx362_start[4]
    set $I19, rx362_start[5]
    store_lex unicode:"$\x{a2}", rx362_cur
    length rx362_eos, rx362_tgt
    eq $I19, 1, rx362_restart1071
    gt rx362_pos, rx362_eos, rx362_fail1072
    repr_get_attr_int $I11, self, rx362_curclass, "$!from"
    ne $I11, -1, rxscan363_done1078
    goto rxscan363_scan1077
  rxscan363_loop1076:
    inc rx362_pos
    gt rx362_pos, rx362_eos, rx362_fail1072
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!from", rx362_pos
  rxscan363_scan1077:
    nqp_rxmark rx362_bstack, rxscan363_loop1076, rx362_pos, 0
  rxscan363_done1078:
    nqp_rxmark rx362_bstack, rxcap364_fail1080, rx362_pos, 0
    ge rx362_pos, rx362_eos, rx362_fail1072
    substr $S11, rx362_tgt, rx362_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx362_fail1072
    inc rx362_pos
    nqp_rxpeek $I19, rx362_bstack, rxcap364_fail1080
    inc $I19
    set $I11, rx362_bstack[$I19]
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx362_pos)
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "sym")
    goto rxcap364_done1079
  rxcap364_fail1080:
    goto rx362_fail1072
  rxcap364_done1079:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt365_01082
    nqp_push_label $P11, alt365_11084
    nqp_rxmark rx362_bstack, alt365_end1081, -1, 0
    rx362_cur."!alt"(rx362_pos, "alt_nfa__13_1361537947.1131", $P11)
    goto rx362_fail1072
  alt365_01082:
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."octint"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1072
    nqp_rxmark rx362_bstack, rxsubrule366_pass1083, -1, 0
  rxsubrule366_pass1083:
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    goto alt365_end1081
  alt365_11084:
    add $I11, rx362_pos, 1
    gt $I11, rx362_eos, rx362_fail1072
    substr $S10, rx362_tgt, rx362_pos, 1
    ne $S10, ucs4:"[", rx362_fail1072
    add rx362_pos, 1
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."octints"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1072
    nqp_rxmark rx362_bstack, rxsubrule367_pass1085, -1, 0
  rxsubrule367_pass1085:
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    add $I11, rx362_pos, 1
    gt $I11, rx362_eos, rx362_fail1072
    substr $S10, rx362_tgt, rx362_pos, 1
    ne $S10, ucs4:"]", rx362_fail1072
    add rx362_pos, 1
    goto alt365_end1081
  alt365_end1081:
    nqp_rxcommit rx362_bstack, alt365_end1081
    rx362_cur."!cursor_pass"(rx362_pos, "backslash:sym<o>", 'backtrack'=>1)
    .return (rx362_cur)
  rx362_restart1071:
    repr_get_attr_obj rx362_cstack, rx362_cur, rx362_curclass, "$!cstack"
  rx362_fail1072:
    unless rx362_bstack, rx362_done1070
    pop $I19, rx362_bstack
    if_null rx362_cstack, rx362_cstack_done1075
    unless rx362_cstack, rx362_cstack_done1075
    dec $I19
    set $P11, rx362_cstack[$I19]
  rx362_cstack_done1075:
    pop rx362_rep, rx362_bstack
    pop rx362_pos, rx362_bstack
    pop $I19, rx362_bstack
    lt rx362_pos, -1, rx362_done1070
    lt rx362_pos, 0, rx362_fail1072
    eq $I19, 0, rx362_fail1072
    nqp_islist $I20, rx362_cstack
    unless $I20, rx362_jump1073
    elements $I18, rx362_bstack
    le $I18, 0, rx362_cut1074
    dec $I18
    set $I18, rx362_bstack[$I18]
  rx362_cut1074:
    assign rx362_cstack, $I18
  rx362_jump1073:
    jump $I19
  rx362_done1070:
    rx362_cur."!cursor_fail"()
    .return (rx362_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_77_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx368_start
    .local string rx368_tgt
    .local int rx368_pos
    .local int rx368_off
    .local int rx368_eos
    .local int rx368_rep
    .local pmc rx368_cur
    .local pmc rx368_curclass
    .local pmc rx368_bstack
    .local pmc rx368_cstack
    rx368_start = self."!cursor_start_all"()
    set rx368_cur, rx368_start[0]
    set rx368_tgt, rx368_start[1]
    set rx368_pos, rx368_start[2]
    set rx368_curclass, rx368_start[3]
    set rx368_bstack, rx368_start[4]
    set $I19, rx368_start[5]
    store_lex unicode:"$\x{a2}", rx368_cur
    length rx368_eos, rx368_tgt
    eq $I19, 1, rx368_restart1088
    gt rx368_pos, rx368_eos, rx368_fail1089
    repr_get_attr_int $I11, self, rx368_curclass, "$!from"
    ne $I11, -1, rxscan369_done1095
    goto rxscan369_scan1094
  rxscan369_loop1093:
    inc rx368_pos
    gt rx368_pos, rx368_eos, rx368_fail1089
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!from", rx368_pos
  rxscan369_scan1094:
    nqp_rxmark rx368_bstack, rxscan369_loop1093, rx368_pos, 0
  rxscan369_done1095:
    nqp_rxmark rx368_bstack, rxcap370_fail1097, rx368_pos, 0
    ge rx368_pos, rx368_eos, rx368_fail1089
    substr $S11, rx368_tgt, rx368_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx368_fail1089
    inc rx368_pos
    nqp_rxpeek $I19, rx368_bstack, rxcap370_fail1097
    inc $I19
    set $I11, rx368_bstack[$I19]
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx368_pos)
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "sym")
    goto rxcap370_done1096
  rxcap370_fail1097:
    goto rx368_fail1089
  rxcap370_done1096:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt371_01099
    nqp_push_label $P11, alt371_11101
    nqp_rxmark rx368_bstack, alt371_end1098, -1, 0
    rx368_cur."!alt"(rx368_pos, "alt_nfa__14_1361537947.1287", $P11)
    goto rx368_fail1089
  alt371_01099:
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx368_curclass, "$!pos"
    lt $I11, 0, rx368_fail1089
    nqp_rxmark rx368_bstack, rxsubrule372_pass1100, -1, 0
  rxsubrule372_pass1100:
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx368_pos, $P11, rx368_curclass, "$!pos"
    goto alt371_end1098
  alt371_11101:
    add $I11, rx368_pos, 1
    gt $I11, rx368_eos, rx368_fail1089
    substr $S10, rx368_tgt, rx368_pos, 1
    ne $S10, ucs4:"[", rx368_fail1089
    add rx368_pos, 1
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx368_curclass, "$!pos"
    lt $I11, 0, rx368_fail1089
    nqp_rxmark rx368_bstack, rxsubrule373_pass1102, -1, 0
  rxsubrule373_pass1102:
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx368_pos, $P11, rx368_curclass, "$!pos"
    add $I11, rx368_pos, 1
    gt $I11, rx368_eos, rx368_fail1089
    substr $S10, rx368_tgt, rx368_pos, 1
    ne $S10, ucs4:"]", rx368_fail1089
    add rx368_pos, 1
    goto alt371_end1098
  alt371_end1098:
    nqp_rxcommit rx368_bstack, alt371_end1098
    rx368_cur."!cursor_pass"(rx368_pos, "backslash:sym<x>", 'backtrack'=>1)
    .return (rx368_cur)
  rx368_restart1088:
    repr_get_attr_obj rx368_cstack, rx368_cur, rx368_curclass, "$!cstack"
  rx368_fail1089:
    unless rx368_bstack, rx368_done1087
    pop $I19, rx368_bstack
    if_null rx368_cstack, rx368_cstack_done1092
    unless rx368_cstack, rx368_cstack_done1092
    dec $I19
    set $P11, rx368_cstack[$I19]
  rx368_cstack_done1092:
    pop rx368_rep, rx368_bstack
    pop rx368_pos, rx368_bstack
    pop $I19, rx368_bstack
    lt rx368_pos, -1, rx368_done1087
    lt rx368_pos, 0, rx368_fail1089
    eq $I19, 0, rx368_fail1089
    nqp_islist $I20, rx368_cstack
    unless $I20, rx368_jump1090
    elements $I18, rx368_bstack
    le $I18, 0, rx368_cut1091
    dec $I18
    set $I18, rx368_bstack[$I18]
  rx368_cut1091:
    assign rx368_cstack, $I18
  rx368_jump1090:
    jump $I19
  rx368_done1087:
    rx368_cur."!cursor_fail"()
    .return (rx368_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_78_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx374_start
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    rx374_start = self."!cursor_start_all"()
    set rx374_cur, rx374_start[0]
    set rx374_tgt, rx374_start[1]
    set rx374_pos, rx374_start[2]
    set rx374_curclass, rx374_start[3]
    set rx374_bstack, rx374_start[4]
    set $I19, rx374_start[5]
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1105
    gt rx374_pos, rx374_eos, rx374_fail1106
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1112
    goto rxscan375_scan1111
  rxscan375_loop1110:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1106
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1111:
    nqp_rxmark rx374_bstack, rxscan375_loop1110, rx374_pos, 0
  rxscan375_done1112:
    nqp_rxmark rx374_bstack, rxcap376_fail1114, rx374_pos, 0
    ge rx374_pos, rx374_eos, rx374_fail1106
    substr $S11, rx374_tgt, rx374_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx374_fail1106
    inc rx374_pos
    nqp_rxpeek $I19, rx374_bstack, rxcap376_fail1114
    inc $I19
    set $I11, rx374_bstack[$I19]
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx374_pos)
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "sym")
    goto rxcap376_done1113
  rxcap376_fail1114:
    goto rx374_fail1106
  rxcap376_done1113:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1106
    nqp_rxmark rx374_bstack, rxsubrule377_pass1115, -1, 0
  rxsubrule377_pass1115:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    rx374_cur."!cursor_pass"(rx374_pos, "backslash:sym<c>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1105:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1106:
    unless rx374_bstack, rx374_done1104
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1109
    unless rx374_cstack, rx374_cstack_done1109
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1109:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1104
    lt rx374_pos, 0, rx374_fail1106
    eq $I19, 0, rx374_fail1106
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1107
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1108
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1108:
    assign rx374_cstack, $I18
  rx374_jump1107:
    jump $I19
  rx374_done1104:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<A>" :subid("cuid_79_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 249
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx378_start
    .local string rx378_tgt
    .local int rx378_pos
    .local int rx378_off
    .local int rx378_eos
    .local int rx378_rep
    .local pmc rx378_cur
    .local pmc rx378_curclass
    .local pmc rx378_bstack
    .local pmc rx378_cstack
    rx378_start = self."!cursor_start_all"()
    set rx378_cur, rx378_start[0]
    set rx378_tgt, rx378_start[1]
    set rx378_pos, rx378_start[2]
    set rx378_curclass, rx378_start[3]
    set rx378_bstack, rx378_start[4]
    set $I19, rx378_start[5]
    store_lex unicode:"$\x{a2}", rx378_cur
    length rx378_eos, rx378_tgt
    eq $I19, 1, rx378_restart1118
    gt rx378_pos, rx378_eos, rx378_fail1119
    repr_get_attr_int $I11, self, rx378_curclass, "$!from"
    ne $I11, -1, rxscan379_done1125
    goto rxscan379_scan1124
  rxscan379_loop1123:
    inc rx378_pos
    gt rx378_pos, rx378_eos, rx378_fail1119
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!from", rx378_pos
  rxscan379_scan1124:
    nqp_rxmark rx378_bstack, rxscan379_loop1123, rx378_pos, 0
  rxscan379_done1125:
    add $I11, rx378_pos, 1
    gt $I11, rx378_eos, rx378_fail1119
    substr $S10, rx378_tgt, rx378_pos, 1
    ne $S10, ucs4:"A", rx378_fail1119
    add rx378_pos, 1
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."obs"("\\\\A as beginning-of-string matcher", "^")
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1119
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    rx378_cur."!cursor_pass"(rx378_pos, "backslash:sym<A>", 'backtrack'=>1)
    .return (rx378_cur)
  rx378_restart1118:
    repr_get_attr_obj rx378_cstack, rx378_cur, rx378_curclass, "$!cstack"
  rx378_fail1119:
    unless rx378_bstack, rx378_done1117
    pop $I19, rx378_bstack
    if_null rx378_cstack, rx378_cstack_done1122
    unless rx378_cstack, rx378_cstack_done1122
    dec $I19
    set $P11, rx378_cstack[$I19]
  rx378_cstack_done1122:
    pop rx378_rep, rx378_bstack
    pop rx378_pos, rx378_bstack
    pop $I19, rx378_bstack
    lt rx378_pos, -1, rx378_done1117
    lt rx378_pos, 0, rx378_fail1119
    eq $I19, 0, rx378_fail1119
    nqp_islist $I20, rx378_cstack
    unless $I20, rx378_jump1120
    elements $I18, rx378_bstack
    le $I18, 0, rx378_cut1121
    dec $I18
    set $I18, rx378_bstack[$I18]
  rx378_cut1121:
    assign rx378_cstack, $I18
  rx378_jump1120:
    jump $I19
  rx378_done1117:
    rx378_cur."!cursor_fail"()
    .return (rx378_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<z>" :subid("cuid_80_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 250
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx381_start
    .local string rx381_tgt
    .local int rx381_pos
    .local int rx381_off
    .local int rx381_eos
    .local int rx381_rep
    .local pmc rx381_cur
    .local pmc rx381_curclass
    .local pmc rx381_bstack
    .local pmc rx381_cstack
    rx381_start = self."!cursor_start_all"()
    set rx381_cur, rx381_start[0]
    set rx381_tgt, rx381_start[1]
    set rx381_pos, rx381_start[2]
    set rx381_curclass, rx381_start[3]
    set rx381_bstack, rx381_start[4]
    set $I19, rx381_start[5]
    store_lex unicode:"$\x{a2}", rx381_cur
    length rx381_eos, rx381_tgt
    eq $I19, 1, rx381_restart1129
    gt rx381_pos, rx381_eos, rx381_fail1130
    repr_get_attr_int $I11, self, rx381_curclass, "$!from"
    ne $I11, -1, rxscan382_done1136
    goto rxscan382_scan1135
  rxscan382_loop1134:
    inc rx381_pos
    gt rx381_pos, rx381_eos, rx381_fail1130
    repr_bind_attr_int rx381_cur, rx381_curclass, "$!from", rx381_pos
  rxscan382_scan1135:
    nqp_rxmark rx381_bstack, rxscan382_loop1134, rx381_pos, 0
  rxscan382_done1136:
    add $I11, rx381_pos, 1
    gt $I11, rx381_eos, rx381_fail1130
    substr $S10, rx381_tgt, rx381_pos, 1
    ne $S10, ucs4:"z", rx381_fail1130
    add rx381_pos, 1
    repr_bind_attr_int rx381_cur, rx381_curclass, "$!pos", rx381_pos
    $P11 = rx381_cur."obs"("\\\\z as end-of-string matcher", "$")
    repr_get_attr_int $I11, $P11, rx381_curclass, "$!pos"
    lt $I11, 0, rx381_fail1130
    repr_get_attr_int rx381_pos, $P11, rx381_curclass, "$!pos"
    rx381_cur."!cursor_pass"(rx381_pos, "backslash:sym<z>", 'backtrack'=>1)
    .return (rx381_cur)
  rx381_restart1129:
    repr_get_attr_obj rx381_cstack, rx381_cur, rx381_curclass, "$!cstack"
  rx381_fail1130:
    unless rx381_bstack, rx381_done1128
    pop $I19, rx381_bstack
    if_null rx381_cstack, rx381_cstack_done1133
    unless rx381_cstack, rx381_cstack_done1133
    dec $I19
    set $P11, rx381_cstack[$I19]
  rx381_cstack_done1133:
    pop rx381_rep, rx381_bstack
    pop rx381_pos, rx381_bstack
    pop $I19, rx381_bstack
    lt rx381_pos, -1, rx381_done1128
    lt rx381_pos, 0, rx381_fail1130
    eq $I19, 0, rx381_fail1130
    nqp_islist $I20, rx381_cstack
    unless $I20, rx381_jump1131
    elements $I18, rx381_bstack
    le $I18, 0, rx381_cut1132
    dec $I18
    set $I18, rx381_bstack[$I18]
  rx381_cut1132:
    assign rx381_cstack, $I18
  rx381_jump1131:
    jump $I19
  rx381_done1128:
    rx381_cur."!cursor_fail"()
    .return (rx381_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Z>" :subid("cuid_81_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 251
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx384_start
    .local string rx384_tgt
    .local int rx384_pos
    .local int rx384_off
    .local int rx384_eos
    .local int rx384_rep
    .local pmc rx384_cur
    .local pmc rx384_curclass
    .local pmc rx384_bstack
    .local pmc rx384_cstack
    rx384_start = self."!cursor_start_all"()
    set rx384_cur, rx384_start[0]
    set rx384_tgt, rx384_start[1]
    set rx384_pos, rx384_start[2]
    set rx384_curclass, rx384_start[3]
    set rx384_bstack, rx384_start[4]
    set $I19, rx384_start[5]
    store_lex unicode:"$\x{a2}", rx384_cur
    length rx384_eos, rx384_tgt
    eq $I19, 1, rx384_restart1140
    gt rx384_pos, rx384_eos, rx384_fail1141
    repr_get_attr_int $I11, self, rx384_curclass, "$!from"
    ne $I11, -1, rxscan385_done1147
    goto rxscan385_scan1146
  rxscan385_loop1145:
    inc rx384_pos
    gt rx384_pos, rx384_eos, rx384_fail1141
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!from", rx384_pos
  rxscan385_scan1146:
    nqp_rxmark rx384_bstack, rxscan385_loop1145, rx384_pos, 0
  rxscan385_done1147:
    add $I11, rx384_pos, 1
    gt $I11, rx384_eos, rx384_fail1141
    substr $S10, rx384_tgt, rx384_pos, 1
    ne $S10, ucs4:"Z", rx384_fail1141
    add rx384_pos, 1
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."obs"("\\\\Z as end-of-string matcher", "\\\\n?$")
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1141
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    rx384_cur."!cursor_pass"(rx384_pos, "backslash:sym<Z>", 'backtrack'=>1)
    .return (rx384_cur)
  rx384_restart1140:
    repr_get_attr_obj rx384_cstack, rx384_cur, rx384_curclass, "$!cstack"
  rx384_fail1141:
    unless rx384_bstack, rx384_done1139
    pop $I19, rx384_bstack
    if_null rx384_cstack, rx384_cstack_done1144
    unless rx384_cstack, rx384_cstack_done1144
    dec $I19
    set $P11, rx384_cstack[$I19]
  rx384_cstack_done1144:
    pop rx384_rep, rx384_bstack
    pop rx384_pos, rx384_bstack
    pop $I19, rx384_bstack
    lt rx384_pos, -1, rx384_done1139
    lt rx384_pos, 0, rx384_fail1141
    eq $I19, 0, rx384_fail1141
    nqp_islist $I20, rx384_cstack
    unless $I20, rx384_jump1142
    elements $I18, rx384_bstack
    le $I18, 0, rx384_cut1143
    dec $I18
    set $I18, rx384_bstack[$I18]
  rx384_cut1143:
    assign rx384_cstack, $I18
  rx384_jump1142:
    jump $I19
  rx384_done1139:
    rx384_cur."!cursor_fail"()
    .return (rx384_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Q>" :subid("cuid_82_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 252
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx387_start
    .local string rx387_tgt
    .local int rx387_pos
    .local int rx387_off
    .local int rx387_eos
    .local int rx387_rep
    .local pmc rx387_cur
    .local pmc rx387_curclass
    .local pmc rx387_bstack
    .local pmc rx387_cstack
    rx387_start = self."!cursor_start_all"()
    set rx387_cur, rx387_start[0]
    set rx387_tgt, rx387_start[1]
    set rx387_pos, rx387_start[2]
    set rx387_curclass, rx387_start[3]
    set rx387_bstack, rx387_start[4]
    set $I19, rx387_start[5]
    store_lex unicode:"$\x{a2}", rx387_cur
    length rx387_eos, rx387_tgt
    eq $I19, 1, rx387_restart1151
    gt rx387_pos, rx387_eos, rx387_fail1152
    repr_get_attr_int $I11, self, rx387_curclass, "$!from"
    ne $I11, -1, rxscan388_done1158
    goto rxscan388_scan1157
  rxscan388_loop1156:
    inc rx387_pos
    gt rx387_pos, rx387_eos, rx387_fail1152
    repr_bind_attr_int rx387_cur, rx387_curclass, "$!from", rx387_pos
  rxscan388_scan1157:
    nqp_rxmark rx387_bstack, rxscan388_loop1156, rx387_pos, 0
  rxscan388_done1158:
    add $I11, rx387_pos, 1
    gt $I11, rx387_eos, rx387_fail1152
    substr $S10, rx387_tgt, rx387_pos, 1
    ne $S10, ucs4:"Q", rx387_fail1152
    add rx387_pos, 1
    repr_bind_attr_int rx387_cur, rx387_curclass, "$!pos", rx387_pos
    $P11 = rx387_cur."obs"("\\\\Q as quotemeta", "quotes or literal variable match")
    repr_get_attr_int $I11, $P11, rx387_curclass, "$!pos"
    lt $I11, 0, rx387_fail1152
    repr_get_attr_int rx387_pos, $P11, rx387_curclass, "$!pos"
    rx387_cur."!cursor_pass"(rx387_pos, "backslash:sym<Q>", 'backtrack'=>1)
    .return (rx387_cur)
  rx387_restart1151:
    repr_get_attr_obj rx387_cstack, rx387_cur, rx387_curclass, "$!cstack"
  rx387_fail1152:
    unless rx387_bstack, rx387_done1150
    pop $I19, rx387_bstack
    if_null rx387_cstack, rx387_cstack_done1155
    unless rx387_cstack, rx387_cstack_done1155
    dec $I19
    set $P11, rx387_cstack[$I19]
  rx387_cstack_done1155:
    pop rx387_rep, rx387_bstack
    pop rx387_pos, rx387_bstack
    pop $I19, rx387_bstack
    lt rx387_pos, -1, rx387_done1150
    lt rx387_pos, 0, rx387_fail1152
    eq $I19, 0, rx387_fail1152
    nqp_islist $I20, rx387_cstack
    unless $I20, rx387_jump1153
    elements $I18, rx387_bstack
    le $I18, 0, rx387_cut1154
    dec $I18
    set $I18, rx387_bstack[$I18]
  rx387_cut1154:
    assign rx387_cstack, $I18
  rx387_jump1153:
    jump $I19
  rx387_done1150:
    rx387_cur."!cursor_fail"()
    .return (rx387_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unrec>" :subid("cuid_83_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 253
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_191_1361537946.1303' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_84_1361537946.1303' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_192_1361537946.1303' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx390_start
    .local string rx390_tgt
    .local int rx390_pos
    .local int rx390_off
    .local int rx390_eos
    .local int rx390_rep
    .local pmc rx390_cur
    .local pmc rx390_curclass
    .local pmc rx390_bstack
    .local pmc rx390_cstack
    rx390_start = self."!cursor_start_all"()
    set rx390_cur, rx390_start[0]
    set rx390_tgt, rx390_start[1]
    set rx390_pos, rx390_start[2]
    set rx390_curclass, rx390_start[3]
    set rx390_bstack, rx390_start[4]
    set $I19, rx390_start[5]
    store_lex unicode:"$\x{a2}", rx390_cur
    length rx390_eos, rx390_tgt
    eq $I19, 1, rx390_restart1162
    gt rx390_pos, rx390_eos, rx390_fail1163
    repr_get_attr_int $I11, self, rx390_curclass, "$!from"
    ne $I11, -1, rxscan391_done1169
    goto rxscan391_scan1168
  rxscan391_loop1167:
    inc rx390_pos
    gt rx390_pos, rx390_eos, rx390_fail1163
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!from", rx390_pos
  rxscan391_scan1168:
    nqp_rxmark rx390_bstack, rxscan391_loop1167, rx390_pos, 0
  rxscan391_done1169:
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    store_lex unicode:"$\x{a2}", rx390_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_191_1361537946.1303' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_84_1361537946.1303' 
    capture_lex $P5004
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1163
    nqp_rxmark rx390_bstack, rxsubrule394_pass1180, -1, 0
  rxsubrule394_pass1180:
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    store_lex unicode:"$\x{a2}", rx390_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_192_1361537946.1303' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx390_cur."!cursor_pass"(rx390_pos, "backslash:sym<unrec>", 'backtrack'=>1)
    .return (rx390_cur)
  rx390_restart1162:
    repr_get_attr_obj rx390_cstack, rx390_cur, rx390_curclass, "$!cstack"
  rx390_fail1163:
    unless rx390_bstack, rx390_done1161
    pop $I19, rx390_bstack
    if_null rx390_cstack, rx390_cstack_done1166
    unless rx390_cstack, rx390_cstack_done1166
    dec $I19
    set $P11, rx390_cstack[$I19]
  rx390_cstack_done1166:
    pop rx390_rep, rx390_bstack
    pop rx390_pos, rx390_bstack
    pop $I19, rx390_bstack
    lt rx390_pos, -1, rx390_done1161
    lt rx390_pos, 0, rx390_fail1163
    eq $I19, 0, rx390_fail1163
    nqp_islist $I20, rx390_cstack
    unless $I20, rx390_jump1164
    elements $I18, rx390_bstack
    le $I18, 0, rx390_cut1165
    dec $I18
    set $I18, rx390_bstack[$I18]
  rx390_cut1165:
    assign rx390_cstack, $I18
  rx390_jump1164:
    jump $I19
  rx390_done1161:
    rx390_cur."!cursor_fail"()
    .return (rx390_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_191_1361537946.1303") :anon :lex :outer("cuid_83_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 253

    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_84_1361537946.1303") :anon :lex :outer("cuid_83_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx392_start
    .local string rx392_tgt
    .local int rx392_pos
    .local int rx392_off
    .local int rx392_eos
    .local int rx392_rep
    .local pmc rx392_cur
    .local pmc rx392_curclass
    .local pmc rx392_bstack
    .local pmc rx392_cstack
    rx392_start = self."!cursor_start_all"()
    set rx392_cur, rx392_start[0]
    set rx392_tgt, rx392_start[1]
    set rx392_pos, rx392_start[2]
    set rx392_curclass, rx392_start[3]
    set rx392_bstack, rx392_start[4]
    set $I19, rx392_start[5]
    store_lex unicode:"$\x{a2}", rx392_cur
    length rx392_eos, rx392_tgt
    eq $I19, 1, rx392_restart1172
    gt rx392_pos, rx392_eos, rx392_fail1173
    repr_get_attr_int $I11, self, rx392_curclass, "$!from"
    ne $I11, -1, rxscan393_done1179
    goto rxscan393_scan1178
  rxscan393_loop1177:
    inc rx392_pos
    gt rx392_pos, rx392_eos, rx392_fail1173
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!from", rx392_pos
  rxscan393_scan1178:
    nqp_rxmark rx392_bstack, rxscan393_loop1177, rx392_pos, 0
  rxscan393_done1179:
    ge rx392_pos, rx392_eos, rx392_fail1173
    is_cclass $I11, .CCLASS_WORD, rx392_tgt, rx392_pos
    unless $I11, rx392_fail1173
    add rx392_pos, 1
    rx392_cur."!cursor_pass"(rx392_pos, 'backtrack'=>1)
    .return (rx392_cur)
  rx392_restart1172:
    repr_get_attr_obj rx392_cstack, rx392_cur, rx392_curclass, "$!cstack"
  rx392_fail1173:
    unless rx392_bstack, rx392_done1171
    pop $I19, rx392_bstack
    if_null rx392_cstack, rx392_cstack_done1176
    unless rx392_cstack, rx392_cstack_done1176
    dec $I19
    set $P11, rx392_cstack[$I19]
  rx392_cstack_done1176:
    pop rx392_rep, rx392_bstack
    pop rx392_pos, rx392_bstack
    pop $I19, rx392_bstack
    lt rx392_pos, -1, rx392_done1171
    lt rx392_pos, 0, rx392_fail1173
    eq $I19, 0, rx392_fail1173
    nqp_islist $I20, rx392_cstack
    unless $I20, rx392_jump1174
    elements $I18, rx392_bstack
    le $I18, 0, rx392_cut1175
    dec $I18
    set $I18, rx392_bstack[$I18]
  rx392_cut1175:
    assign rx392_cstack, $I18
  rx392_jump1174:
    jump $I19
  rx392_done1171:
    rx392_cur."!cursor_fail"()
    .return (rx392_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_192_1361537946.1303") :anon :lex :outer("cuid_83_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 253
    .local pmc fb_tmp_16 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_16, $P5003
    repr_defined $I5001, fb_tmp_16
    unless $I5001 goto if395_else1181 
    set $P5004, fb_tmp_16[0]
    set $P5006, $P5004
    goto if395_end1182
  if395_else1181:
    null $P5005
    set $P5006, $P5005
  if395_end1182:
    unless_null $P5006, vivi_3961183
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_3961183:
    $P5008 = $P5006."Str"()
    $P5009 = $P5001."throw_unrecog_backslash_seq"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_85_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx397_start
    .local string rx397_tgt
    .local int rx397_pos
    .local int rx397_off
    .local int rx397_eos
    .local int rx397_rep
    .local pmc rx397_cur
    .local pmc rx397_curclass
    .local pmc rx397_bstack
    .local pmc rx397_cstack
    rx397_start = self."!cursor_start_all"()
    set rx397_cur, rx397_start[0]
    set rx397_tgt, rx397_start[1]
    set rx397_pos, rx397_start[2]
    set rx397_curclass, rx397_start[3]
    set rx397_bstack, rx397_start[4]
    set $I19, rx397_start[5]
    store_lex unicode:"$\x{a2}", rx397_cur
    length rx397_eos, rx397_tgt
    eq $I19, 1, rx397_restart1186
    gt rx397_pos, rx397_eos, rx397_fail1187
    repr_get_attr_int $I11, self, rx397_curclass, "$!from"
    ne $I11, -1, rxscan398_done1193
    goto rxscan398_scan1192
  rxscan398_loop1191:
    inc rx397_pos
    gt rx397_pos, rx397_eos, rx397_fail1187
    repr_bind_attr_int rx397_cur, rx397_curclass, "$!from", rx397_pos
  rxscan398_scan1192:
    nqp_rxmark rx397_bstack, rxscan398_loop1191, rx397_pos, 0
  rxscan398_done1193:
    ge rx397_pos, rx397_eos, rx397_fail1187
    is_cclass $I11, .CCLASS_WORD, rx397_tgt, rx397_pos
    if $I11, rx397_fail1187
    add rx397_pos, 1
    rx397_cur."!cursor_pass"(rx397_pos, "backslash:sym<misc>", 'backtrack'=>1)
    .return (rx397_cur)
  rx397_restart1186:
    repr_get_attr_obj rx397_cstack, rx397_cur, rx397_curclass, "$!cstack"
  rx397_fail1187:
    unless rx397_bstack, rx397_done1185
    pop $I19, rx397_bstack
    if_null rx397_cstack, rx397_cstack_done1190
    unless rx397_cstack, rx397_cstack_done1190
    dec $I19
    set $P11, rx397_cstack[$I19]
  rx397_cstack_done1190:
    pop rx397_rep, rx397_bstack
    pop rx397_pos, rx397_bstack
    pop $I19, rx397_bstack
    lt rx397_pos, -1, rx397_done1185
    lt rx397_pos, 0, rx397_fail1187
    eq $I19, 0, rx397_fail1187
    nqp_islist $I20, rx397_cstack
    unless $I20, rx397_jump1188
    elements $I18, rx397_bstack
    le $I18, 0, rx397_cut1189
    dec $I18
    set $I18, rx397_bstack[$I18]
  rx397_cut1189:
    assign rx397_cstack, $I18
  rx397_jump1188:
    jump $I19
  rx397_done1185:
    rx397_cur."!cursor_fail"()
    .return (rx397_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion" :subid("cuid_86_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 256
    .param pmc self 
    $P5001 = self."!protoregex"("assertion")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_87_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 258
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_88_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx399_start
    .local string rx399_tgt
    .local int rx399_pos
    .local int rx399_off
    .local int rx399_eos
    .local int rx399_rep
    .local pmc rx399_cur
    .local pmc rx399_curclass
    .local pmc rx399_bstack
    .local pmc rx399_cstack
    rx399_start = self."!cursor_start_all"()
    set rx399_cur, rx399_start[0]
    set rx399_tgt, rx399_start[1]
    set rx399_pos, rx399_start[2]
    set rx399_curclass, rx399_start[3]
    set rx399_bstack, rx399_start[4]
    set $I19, rx399_start[5]
    store_lex unicode:"$\x{a2}", rx399_cur
    length rx399_eos, rx399_tgt
    eq $I19, 1, rx399_restart1196
    gt rx399_pos, rx399_eos, rx399_fail1197
    repr_get_attr_int $I11, self, rx399_curclass, "$!from"
    ne $I11, -1, rxscan400_done1203
    goto rxscan400_scan1202
  rxscan400_loop1201:
    inc rx399_pos
    gt rx399_pos, rx399_eos, rx399_fail1197
    repr_bind_attr_int rx399_cur, rx399_curclass, "$!from", rx399_pos
  rxscan400_scan1202:
    nqp_rxmark rx399_bstack, rxscan400_loop1201, rx399_pos, 0
  rxscan400_done1203:
    add $I11, rx399_pos, 1
    gt $I11, rx399_eos, rx399_fail1197
    substr $S10, rx399_tgt, rx399_pos, 1
    ne $S10, ucs4:"?", rx399_fail1197
    add rx399_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt401_01205
    nqp_push_label $P11, alt401_11216
    nqp_rxmark rx399_bstack, alt401_end1204, -1, 0
    rx399_cur."!alt"(rx399_pos, "alt_nfa__15_1361537947.2535", $P11)
    goto rx399_fail1197
  alt401_01205:
    .const 'Sub' $P5001 = 'cuid_88_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx399_cur, rx399_curclass, "$!pos", rx399_pos
    $P11 = rx399_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx399_curclass, "$!pos"
    lt $I11, 0, rx399_fail1197
    goto alt401_end1204
  alt401_11216:
    repr_bind_attr_int rx399_cur, rx399_curclass, "$!pos", rx399_pos
    $P11 = rx399_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx399_curclass, "$!pos"
    lt $I11, 0, rx399_fail1197
    nqp_rxmark rx399_bstack, rxsubrule404_pass1217, -1, 0
  rxsubrule404_pass1217:
    rx399_cstack = rx399_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx399_pos, $P11, rx399_curclass, "$!pos"
    goto alt401_end1204
  alt401_end1204:
    nqp_rxcommit rx399_bstack, alt401_end1204
    rx399_cur."!cursor_pass"(rx399_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx399_cur)
  rx399_restart1196:
    repr_get_attr_obj rx399_cstack, rx399_cur, rx399_curclass, "$!cstack"
  rx399_fail1197:
    unless rx399_bstack, rx399_done1195
    pop $I19, rx399_bstack
    if_null rx399_cstack, rx399_cstack_done1200
    unless rx399_cstack, rx399_cstack_done1200
    dec $I19
    set $P11, rx399_cstack[$I19]
  rx399_cstack_done1200:
    pop rx399_rep, rx399_bstack
    pop rx399_pos, rx399_bstack
    pop $I19, rx399_bstack
    lt rx399_pos, -1, rx399_done1195
    lt rx399_pos, 0, rx399_fail1197
    eq $I19, 0, rx399_fail1197
    nqp_islist $I20, rx399_cstack
    unless $I20, rx399_jump1198
    elements $I18, rx399_bstack
    le $I18, 0, rx399_cut1199
    dec $I18
    set $I18, rx399_bstack[$I18]
  rx399_cut1199:
    assign rx399_cstack, $I18
  rx399_jump1198:
    jump $I19
  rx399_done1195:
    rx399_cur."!cursor_fail"()
    .return (rx399_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1361537946.1303") :anon :lex :outer("cuid_87_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx402_start
    .local string rx402_tgt
    .local int rx402_pos
    .local int rx402_off
    .local int rx402_eos
    .local int rx402_rep
    .local pmc rx402_cur
    .local pmc rx402_curclass
    .local pmc rx402_bstack
    .local pmc rx402_cstack
    rx402_start = self."!cursor_start_all"()
    set rx402_cur, rx402_start[0]
    set rx402_tgt, rx402_start[1]
    set rx402_pos, rx402_start[2]
    set rx402_curclass, rx402_start[3]
    set rx402_bstack, rx402_start[4]
    set $I19, rx402_start[5]
    store_lex unicode:"$\x{a2}", rx402_cur
    length rx402_eos, rx402_tgt
    eq $I19, 1, rx402_restart1208
    gt rx402_pos, rx402_eos, rx402_fail1209
    repr_get_attr_int $I11, self, rx402_curclass, "$!from"
    ne $I11, -1, rxscan403_done1215
    goto rxscan403_scan1214
  rxscan403_loop1213:
    inc rx402_pos
    gt rx402_pos, rx402_eos, rx402_fail1209
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!from", rx402_pos
  rxscan403_scan1214:
    nqp_rxmark rx402_bstack, rxscan403_loop1213, rx402_pos, 0
  rxscan403_done1215:
    add $I11, rx402_pos, 1
    gt $I11, rx402_eos, rx402_fail1209
    substr $S10, rx402_tgt, rx402_pos, 1
    ne $S10, ucs4:">", rx402_fail1209
    add rx402_pos, 1
    rx402_cur."!cursor_pass"(rx402_pos, 'backtrack'=>1)
    .return (rx402_cur)
  rx402_restart1208:
    repr_get_attr_obj rx402_cstack, rx402_cur, rx402_curclass, "$!cstack"
  rx402_fail1209:
    unless rx402_bstack, rx402_done1207
    pop $I19, rx402_bstack
    if_null rx402_cstack, rx402_cstack_done1212
    unless rx402_cstack, rx402_cstack_done1212
    dec $I19
    set $P11, rx402_cstack[$I19]
  rx402_cstack_done1212:
    pop rx402_rep, rx402_bstack
    pop rx402_pos, rx402_bstack
    pop $I19, rx402_bstack
    lt rx402_pos, -1, rx402_done1207
    lt rx402_pos, 0, rx402_fail1209
    eq $I19, 0, rx402_fail1209
    nqp_islist $I20, rx402_cstack
    unless $I20, rx402_jump1210
    elements $I18, rx402_bstack
    le $I18, 0, rx402_cut1211
    dec $I18
    set $I18, rx402_bstack[$I18]
  rx402_cut1211:
    assign rx402_cstack, $I18
  rx402_jump1210:
    jump $I19
  rx402_done1207:
    rx402_cur."!cursor_fail"()
    .return (rx402_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_89_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 259
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_90_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx405_start
    .local string rx405_tgt
    .local int rx405_pos
    .local int rx405_off
    .local int rx405_eos
    .local int rx405_rep
    .local pmc rx405_cur
    .local pmc rx405_curclass
    .local pmc rx405_bstack
    .local pmc rx405_cstack
    rx405_start = self."!cursor_start_all"()
    set rx405_cur, rx405_start[0]
    set rx405_tgt, rx405_start[1]
    set rx405_pos, rx405_start[2]
    set rx405_curclass, rx405_start[3]
    set rx405_bstack, rx405_start[4]
    set $I19, rx405_start[5]
    store_lex unicode:"$\x{a2}", rx405_cur
    length rx405_eos, rx405_tgt
    eq $I19, 1, rx405_restart1220
    gt rx405_pos, rx405_eos, rx405_fail1221
    repr_get_attr_int $I11, self, rx405_curclass, "$!from"
    ne $I11, -1, rxscan406_done1227
    goto rxscan406_scan1226
  rxscan406_loop1225:
    inc rx405_pos
    gt rx405_pos, rx405_eos, rx405_fail1221
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!from", rx405_pos
  rxscan406_scan1226:
    nqp_rxmark rx405_bstack, rxscan406_loop1225, rx405_pos, 0
  rxscan406_done1227:
    add $I11, rx405_pos, 1
    gt $I11, rx405_eos, rx405_fail1221
    substr $S10, rx405_tgt, rx405_pos, 1
    ne $S10, ucs4:"!", rx405_fail1221
    add rx405_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt407_01229
    nqp_push_label $P11, alt407_11240
    nqp_rxmark rx405_bstack, alt407_end1228, -1, 0
    rx405_cur."!alt"(rx405_pos, "alt_nfa__16_1361537947.2691", $P11)
    goto rx405_fail1221
  alt407_01229:
    .const 'Sub' $P5001 = 'cuid_90_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!pos", rx405_pos
    $P11 = rx405_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx405_curclass, "$!pos"
    lt $I11, 0, rx405_fail1221
    goto alt407_end1228
  alt407_11240:
    repr_bind_attr_int rx405_cur, rx405_curclass, "$!pos", rx405_pos
    $P11 = rx405_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx405_curclass, "$!pos"
    lt $I11, 0, rx405_fail1221
    nqp_rxmark rx405_bstack, rxsubrule410_pass1241, -1, 0
  rxsubrule410_pass1241:
    rx405_cstack = rx405_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx405_pos, $P11, rx405_curclass, "$!pos"
    goto alt407_end1228
  alt407_end1228:
    nqp_rxcommit rx405_bstack, alt407_end1228
    rx405_cur."!cursor_pass"(rx405_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx405_cur)
  rx405_restart1220:
    repr_get_attr_obj rx405_cstack, rx405_cur, rx405_curclass, "$!cstack"
  rx405_fail1221:
    unless rx405_bstack, rx405_done1219
    pop $I19, rx405_bstack
    if_null rx405_cstack, rx405_cstack_done1224
    unless rx405_cstack, rx405_cstack_done1224
    dec $I19
    set $P11, rx405_cstack[$I19]
  rx405_cstack_done1224:
    pop rx405_rep, rx405_bstack
    pop rx405_pos, rx405_bstack
    pop $I19, rx405_bstack
    lt rx405_pos, -1, rx405_done1219
    lt rx405_pos, 0, rx405_fail1221
    eq $I19, 0, rx405_fail1221
    nqp_islist $I20, rx405_cstack
    unless $I20, rx405_jump1222
    elements $I18, rx405_bstack
    le $I18, 0, rx405_cut1223
    dec $I18
    set $I18, rx405_bstack[$I18]
  rx405_cut1223:
    assign rx405_cstack, $I18
  rx405_jump1222:
    jump $I19
  rx405_done1219:
    rx405_cur."!cursor_fail"()
    .return (rx405_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1361537946.1303") :anon :lex :outer("cuid_89_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx408_start
    .local string rx408_tgt
    .local int rx408_pos
    .local int rx408_off
    .local int rx408_eos
    .local int rx408_rep
    .local pmc rx408_cur
    .local pmc rx408_curclass
    .local pmc rx408_bstack
    .local pmc rx408_cstack
    rx408_start = self."!cursor_start_all"()
    set rx408_cur, rx408_start[0]
    set rx408_tgt, rx408_start[1]
    set rx408_pos, rx408_start[2]
    set rx408_curclass, rx408_start[3]
    set rx408_bstack, rx408_start[4]
    set $I19, rx408_start[5]
    store_lex unicode:"$\x{a2}", rx408_cur
    length rx408_eos, rx408_tgt
    eq $I19, 1, rx408_restart1232
    gt rx408_pos, rx408_eos, rx408_fail1233
    repr_get_attr_int $I11, self, rx408_curclass, "$!from"
    ne $I11, -1, rxscan409_done1239
    goto rxscan409_scan1238
  rxscan409_loop1237:
    inc rx408_pos
    gt rx408_pos, rx408_eos, rx408_fail1233
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!from", rx408_pos
  rxscan409_scan1238:
    nqp_rxmark rx408_bstack, rxscan409_loop1237, rx408_pos, 0
  rxscan409_done1239:
    add $I11, rx408_pos, 1
    gt $I11, rx408_eos, rx408_fail1233
    substr $S10, rx408_tgt, rx408_pos, 1
    ne $S10, ucs4:">", rx408_fail1233
    add rx408_pos, 1
    rx408_cur."!cursor_pass"(rx408_pos, 'backtrack'=>1)
    .return (rx408_cur)
  rx408_restart1232:
    repr_get_attr_obj rx408_cstack, rx408_cur, rx408_curclass, "$!cstack"
  rx408_fail1233:
    unless rx408_bstack, rx408_done1231
    pop $I19, rx408_bstack
    if_null rx408_cstack, rx408_cstack_done1236
    unless rx408_cstack, rx408_cstack_done1236
    dec $I19
    set $P11, rx408_cstack[$I19]
  rx408_cstack_done1236:
    pop rx408_rep, rx408_bstack
    pop rx408_pos, rx408_bstack
    pop $I19, rx408_bstack
    lt rx408_pos, -1, rx408_done1231
    lt rx408_pos, 0, rx408_fail1233
    eq $I19, 0, rx408_fail1233
    nqp_islist $I20, rx408_cstack
    unless $I20, rx408_jump1234
    elements $I18, rx408_bstack
    le $I18, 0, rx408_cut1235
    dec $I18
    set $I18, rx408_bstack[$I18]
  rx408_cut1235:
    assign rx408_cstack, $I18
  rx408_jump1234:
    jump $I19
  rx408_done1231:
    rx408_cur."!cursor_fail"()
    .return (rx408_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_91_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx411_start
    .local string rx411_tgt
    .local int rx411_pos
    .local int rx411_off
    .local int rx411_eos
    .local int rx411_rep
    .local pmc rx411_cur
    .local pmc rx411_curclass
    .local pmc rx411_bstack
    .local pmc rx411_cstack
    rx411_start = self."!cursor_start_all"()
    set rx411_cur, rx411_start[0]
    set rx411_tgt, rx411_start[1]
    set rx411_pos, rx411_start[2]
    set rx411_curclass, rx411_start[3]
    set rx411_bstack, rx411_start[4]
    set $I19, rx411_start[5]
    store_lex unicode:"$\x{a2}", rx411_cur
    length rx411_eos, rx411_tgt
    eq $I19, 1, rx411_restart1244
    gt rx411_pos, rx411_eos, rx411_fail1245
    repr_get_attr_int $I11, self, rx411_curclass, "$!from"
    ne $I11, -1, rxscan412_done1251
    goto rxscan412_scan1250
  rxscan412_loop1249:
    inc rx411_pos
    gt rx411_pos, rx411_eos, rx411_fail1245
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!from", rx411_pos
  rxscan412_scan1250:
    nqp_rxmark rx411_bstack, rxscan412_loop1249, rx411_pos, 0
  rxscan412_done1251:
    add $I11, rx411_pos, 1
    gt $I11, rx411_eos, rx411_fail1245
    substr $S10, rx411_tgt, rx411_pos, 1
    ne $S10, ucs4:"|", rx411_fail1245
    add rx411_pos, 1
    repr_bind_attr_int rx411_cur, rx411_curclass, "$!pos", rx411_pos
    $P11 = rx411_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx411_curclass, "$!pos"
    lt $I11, 0, rx411_fail1245
    nqp_rxmark rx411_bstack, rxsubrule413_pass1252, -1, 0
  rxsubrule413_pass1252:
    rx411_cstack = rx411_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx411_pos, $P11, rx411_curclass, "$!pos"
    rx411_cur."!cursor_pass"(rx411_pos, "assertion:sym<|>", 'backtrack'=>1)
    .return (rx411_cur)
  rx411_restart1244:
    repr_get_attr_obj rx411_cstack, rx411_cur, rx411_curclass, "$!cstack"
  rx411_fail1245:
    unless rx411_bstack, rx411_done1243
    pop $I19, rx411_bstack
    if_null rx411_cstack, rx411_cstack_done1248
    unless rx411_cstack, rx411_cstack_done1248
    dec $I19
    set $P11, rx411_cstack[$I19]
  rx411_cstack_done1248:
    pop rx411_rep, rx411_bstack
    pop rx411_pos, rx411_bstack
    pop $I19, rx411_bstack
    lt rx411_pos, -1, rx411_done1243
    lt rx411_pos, 0, rx411_fail1245
    eq $I19, 0, rx411_fail1245
    nqp_islist $I20, rx411_cstack
    unless $I20, rx411_jump1246
    elements $I18, rx411_bstack
    le $I18, 0, rx411_cut1247
    dec $I18
    set $I18, rx411_bstack[$I18]
  rx411_cut1247:
    assign rx411_cstack, $I18
  rx411_jump1246:
    jump $I19
  rx411_done1243:
    rx411_cur."!cursor_fail"()
    .return (rx411_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_92_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 262
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx414_start
    .local string rx414_tgt
    .local int rx414_pos
    .local int rx414_off
    .local int rx414_eos
    .local int rx414_rep
    .local pmc rx414_cur
    .local pmc rx414_curclass
    .local pmc rx414_bstack
    .local pmc rx414_cstack
    rx414_start = self."!cursor_start_all"()
    set rx414_cur, rx414_start[0]
    set rx414_tgt, rx414_start[1]
    set rx414_pos, rx414_start[2]
    set rx414_curclass, rx414_start[3]
    set rx414_bstack, rx414_start[4]
    set $I19, rx414_start[5]
    store_lex unicode:"$\x{a2}", rx414_cur
    length rx414_eos, rx414_tgt
    eq $I19, 1, rx414_restart1255
    gt rx414_pos, rx414_eos, rx414_fail1256
    repr_get_attr_int $I11, self, rx414_curclass, "$!from"
    ne $I11, -1, rxscan415_done1262
    goto rxscan415_scan1261
  rxscan415_loop1260:
    inc rx414_pos
    gt rx414_pos, rx414_eos, rx414_fail1256
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!from", rx414_pos
  rxscan415_scan1261:
    nqp_rxmark rx414_bstack, rxscan415_loop1260, rx414_pos, 0
  rxscan415_done1262:
    add $I11, rx414_pos, 1
    gt $I11, rx414_eos, rx414_fail1256
    substr $S10, rx414_tgt, rx414_pos, 1
    ne $S10, ucs4:".", rx414_fail1256
    add rx414_pos, 1
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!pos", rx414_pos
    $P11 = rx414_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx414_curclass, "$!pos"
    lt $I11, 0, rx414_fail1256
    nqp_rxmark rx414_bstack, rxsubrule416_pass1263, -1, 0
  rxsubrule416_pass1263:
    rx414_cstack = rx414_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx414_pos, $P11, rx414_curclass, "$!pos"
    rx414_cur."!cursor_pass"(rx414_pos, "assertion:sym<method>", 'backtrack'=>1)
    .return (rx414_cur)
  rx414_restart1255:
    repr_get_attr_obj rx414_cstack, rx414_cur, rx414_curclass, "$!cstack"
  rx414_fail1256:
    unless rx414_bstack, rx414_done1254
    pop $I19, rx414_bstack
    if_null rx414_cstack, rx414_cstack_done1259
    unless rx414_cstack, rx414_cstack_done1259
    dec $I19
    set $P11, rx414_cstack[$I19]
  rx414_cstack_done1259:
    pop rx414_rep, rx414_bstack
    pop rx414_pos, rx414_bstack
    pop $I19, rx414_bstack
    lt rx414_pos, -1, rx414_done1254
    lt rx414_pos, 0, rx414_fail1256
    eq $I19, 0, rx414_fail1256
    nqp_islist $I20, rx414_cstack
    unless $I20, rx414_jump1257
    elements $I18, rx414_bstack
    le $I18, 0, rx414_cut1258
    dec $I18
    set $I18, rx414_bstack[$I18]
  rx414_cut1258:
    assign rx414_cstack, $I18
  rx414_jump1257:
    jump $I19
  rx414_done1254:
    rx414_cur."!cursor_fail"()
    .return (rx414_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_93_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 266
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_94_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx417_start
    .local string rx417_tgt
    .local int rx417_pos
    .local int rx417_off
    .local int rx417_eos
    .local int rx417_rep
    .local pmc rx417_cur
    .local pmc rx417_curclass
    .local pmc rx417_bstack
    .local pmc rx417_cstack
    rx417_start = self."!cursor_start_all"()
    set rx417_cur, rx417_start[0]
    set rx417_tgt, rx417_start[1]
    set rx417_pos, rx417_start[2]
    set rx417_curclass, rx417_start[3]
    set rx417_bstack, rx417_start[4]
    set $I19, rx417_start[5]
    store_lex unicode:"$\x{a2}", rx417_cur
    length rx417_eos, rx417_tgt
    eq $I19, 1, rx417_restart1266
    gt rx417_pos, rx417_eos, rx417_fail1267
    repr_get_attr_int $I11, self, rx417_curclass, "$!from"
    ne $I11, -1, rxscan418_done1273
    goto rxscan418_scan1272
  rxscan418_loop1271:
    inc rx417_pos
    gt rx417_pos, rx417_eos, rx417_fail1267
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!from", rx417_pos
  rxscan418_scan1272:
    nqp_rxmark rx417_bstack, rxscan418_loop1271, rx417_pos, 0
  rxscan418_done1273:
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1267
    nqp_rxmark rx417_bstack, rxsubrule419_pass1274, -1, 0
  rxsubrule419_pass1274:
    rx417_cstack = rx417_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx417_pos, $P11, rx417_curclass, "$!pos"
    nqp_rxmark rx417_bstack, rxquantr420_done1276, rx417_pos, 0
  rxquantr420_loop1275:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt421_01278
    nqp_push_label $P11, alt421_11289
    nqp_push_label $P11, alt421_21291
    nqp_push_label $P11, alt421_31293
    nqp_push_label $P11, alt421_41295
    nqp_rxmark rx417_bstack, alt421_end1277, -1, 0
    rx417_cur."!alt"(rx417_pos, "alt_nfa__17_1361537947.3003", $P11)
    goto rx417_fail1267
  alt421_01278:
    .const 'Sub' $P5001 = 'cuid_94_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1267
    goto alt421_end1277
  alt421_11289:
    add $I11, rx417_pos, 1
    gt $I11, rx417_eos, rx417_fail1267
    substr $S10, rx417_tgt, rx417_pos, 1
    ne $S10, ucs4:"=", rx417_fail1267
    add rx417_pos, 1
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1267
    nqp_rxmark rx417_bstack, rxsubrule424_pass1290, -1, 0
  rxsubrule424_pass1290:
    rx417_cstack = rx417_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx417_pos, $P11, rx417_curclass, "$!pos"
    goto alt421_end1277
  alt421_21291:
    add $I11, rx417_pos, 1
    gt $I11, rx417_eos, rx417_fail1267
    substr $S10, rx417_tgt, rx417_pos, 1
    ne $S10, ucs4:":", rx417_fail1267
    add rx417_pos, 1
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1267
    nqp_rxmark rx417_bstack, rxsubrule425_pass1292, -1, 0
  rxsubrule425_pass1292:
    rx417_cstack = rx417_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx417_pos, $P11, rx417_curclass, "$!pos"
    goto alt421_end1277
  alt421_31293:
    add $I11, rx417_pos, 1
    gt $I11, rx417_eos, rx417_fail1267
    substr $S10, rx417_tgt, rx417_pos, 1
    ne $S10, ucs4:"(", rx417_fail1267
    add rx417_pos, 1
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1267
    nqp_rxmark rx417_bstack, rxsubrule426_pass1294, -1, 0
  rxsubrule426_pass1294:
    rx417_cstack = rx417_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx417_pos, $P11, rx417_curclass, "$!pos"
    add $I11, rx417_pos, 1
    gt $I11, rx417_eos, rx417_fail1267
    substr $S10, rx417_tgt, rx417_pos, 1
    ne $S10, ucs4:")", rx417_fail1267
    add rx417_pos, 1
    goto alt421_end1277
  alt421_41295:
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1267
    repr_get_attr_int rx417_pos, $P11, rx417_curclass, "$!pos"
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1267
    nqp_rxmark rx417_bstack, rxsubrule428_pass1297, -1, 0
  rxsubrule428_pass1297:
    rx417_cstack = rx417_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx417_pos, $P11, rx417_curclass, "$!pos"
    goto alt421_end1277
  alt421_end1277:
    nqp_rxpeek $I19, rx417_bstack, rxquantr420_done1276
    inc $I19
    inc $I19
    set rx417_rep, rx417_bstack[$I19]
    nqp_rxcommit rx417_bstack, rxquantr420_done1276
    inc rx417_rep
  rxquantr420_done1276:
    rx417_cur."!cursor_pass"(rx417_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx417_cur)
  rx417_restart1266:
    repr_get_attr_obj rx417_cstack, rx417_cur, rx417_curclass, "$!cstack"
  rx417_fail1267:
    unless rx417_bstack, rx417_done1265
    pop $I19, rx417_bstack
    if_null rx417_cstack, rx417_cstack_done1270
    unless rx417_cstack, rx417_cstack_done1270
    dec $I19
    set $P11, rx417_cstack[$I19]
  rx417_cstack_done1270:
    pop rx417_rep, rx417_bstack
    pop rx417_pos, rx417_bstack
    pop $I19, rx417_bstack
    lt rx417_pos, -1, rx417_done1265
    lt rx417_pos, 0, rx417_fail1267
    eq $I19, 0, rx417_fail1267
    nqp_islist $I20, rx417_cstack
    unless $I20, rx417_jump1268
    elements $I18, rx417_bstack
    le $I18, 0, rx417_cut1269
    dec $I18
    set $I18, rx417_bstack[$I18]
  rx417_cut1269:
    assign rx417_cstack, $I18
  rx417_jump1268:
    jump $I19
  rx417_done1265:
    rx417_cur."!cursor_fail"()
    .return (rx417_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_94_1361537946.1303") :anon :lex :outer("cuid_93_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx422_start
    .local string rx422_tgt
    .local int rx422_pos
    .local int rx422_off
    .local int rx422_eos
    .local int rx422_rep
    .local pmc rx422_cur
    .local pmc rx422_curclass
    .local pmc rx422_bstack
    .local pmc rx422_cstack
    rx422_start = self."!cursor_start_all"()
    set rx422_cur, rx422_start[0]
    set rx422_tgt, rx422_start[1]
    set rx422_pos, rx422_start[2]
    set rx422_curclass, rx422_start[3]
    set rx422_bstack, rx422_start[4]
    set $I19, rx422_start[5]
    store_lex unicode:"$\x{a2}", rx422_cur
    length rx422_eos, rx422_tgt
    eq $I19, 1, rx422_restart1281
    gt rx422_pos, rx422_eos, rx422_fail1282
    repr_get_attr_int $I11, self, rx422_curclass, "$!from"
    ne $I11, -1, rxscan423_done1288
    goto rxscan423_scan1287
  rxscan423_loop1286:
    inc rx422_pos
    gt rx422_pos, rx422_eos, rx422_fail1282
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!from", rx422_pos
  rxscan423_scan1287:
    nqp_rxmark rx422_bstack, rxscan423_loop1286, rx422_pos, 0
  rxscan423_done1288:
    add $I11, rx422_pos, 1
    gt $I11, rx422_eos, rx422_fail1282
    substr $S10, rx422_tgt, rx422_pos, 1
    ne $S10, ucs4:">", rx422_fail1282
    add rx422_pos, 1
    rx422_cur."!cursor_pass"(rx422_pos, 'backtrack'=>1)
    .return (rx422_cur)
  rx422_restart1281:
    repr_get_attr_obj rx422_cstack, rx422_cur, rx422_curclass, "$!cstack"
  rx422_fail1282:
    unless rx422_bstack, rx422_done1280
    pop $I19, rx422_bstack
    if_null rx422_cstack, rx422_cstack_done1285
    unless rx422_cstack, rx422_cstack_done1285
    dec $I19
    set $P11, rx422_cstack[$I19]
  rx422_cstack_done1285:
    pop rx422_rep, rx422_bstack
    pop rx422_pos, rx422_bstack
    pop $I19, rx422_bstack
    lt rx422_pos, -1, rx422_done1280
    lt rx422_pos, 0, rx422_fail1282
    eq $I19, 0, rx422_fail1282
    nqp_islist $I20, rx422_cstack
    unless $I20, rx422_jump1283
    elements $I18, rx422_bstack
    le $I18, 0, rx422_cut1284
    dec $I18
    set $I18, rx422_bstack[$I18]
  rx422_cut1284:
    assign rx422_cstack, $I18
  rx422_jump1283:
    jump $I19
  rx422_done1280:
    rx422_cur."!cursor_fail"()
    .return (rx422_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_95_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 277
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_96_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx429_start
    .local string rx429_tgt
    .local int rx429_pos
    .local int rx429_off
    .local int rx429_eos
    .local int rx429_rep
    .local pmc rx429_cur
    .local pmc rx429_curclass
    .local pmc rx429_bstack
    .local pmc rx429_cstack
    rx429_start = self."!cursor_start_all"()
    set rx429_cur, rx429_start[0]
    set rx429_tgt, rx429_start[1]
    set rx429_pos, rx429_start[2]
    set rx429_curclass, rx429_start[3]
    set rx429_bstack, rx429_start[4]
    set $I19, rx429_start[5]
    store_lex unicode:"$\x{a2}", rx429_cur
    length rx429_eos, rx429_tgt
    eq $I19, 1, rx429_restart1300
    gt rx429_pos, rx429_eos, rx429_fail1301
    repr_get_attr_int $I11, self, rx429_curclass, "$!from"
    ne $I11, -1, rxscan430_done1307
    goto rxscan430_scan1306
  rxscan430_loop1305:
    inc rx429_pos
    gt rx429_pos, rx429_eos, rx429_fail1301
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!from", rx429_pos
  rxscan430_scan1306:
    nqp_rxmark rx429_bstack, rxscan430_loop1305, rx429_pos, 0
  rxscan430_done1307:
    .const 'Sub' $P5001 = 'cuid_96_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!pos", rx429_pos
    $P11 = rx429_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx429_curclass, "$!pos"
    lt $I11, 0, rx429_fail1301
    nqp_rxmark rx429_bstack, rxquantr434_done1324, -1, 0
  rxquantr434_loop1323:
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!pos", rx429_pos
    $P11 = rx429_cur."cclass_elem"()
    repr_get_attr_int $I11, $P11, rx429_curclass, "$!pos"
    lt $I11, 0, rx429_fail1301
    goto rxsubrule435_pass1325
  rxsubrule435_back1326:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx429_curclass, "$!pos"
    lt $I11, 0, rx429_fail1301
  rxsubrule435_pass1325:
    rx429_cstack = rx429_cur."!cursor_capture"($P11, "cclass_elem")
    set_addr $I11, rxsubrule435_back1326
    push rx429_bstack, $I11
    push rx429_bstack, 0
    push rx429_bstack, rx429_pos
    elements $I11, rx429_cstack
    push rx429_bstack, $I11
    repr_get_attr_int rx429_pos, $P11, rx429_curclass, "$!pos"
    nqp_rxpeek $I19, rx429_bstack, rxquantr434_done1324
    inc $I19
    inc $I19
    set rx429_rep, rx429_bstack[$I19]
    nqp_rxcommit rx429_bstack, rxquantr434_done1324
    inc rx429_rep
    nqp_rxmark rx429_bstack, rxquantr434_done1324, rx429_pos, rx429_rep
    goto rxquantr434_loop1323
  rxquantr434_done1324:
    rx429_cur."!cursor_pass"(rx429_pos, "assertion:sym<[>", 'backtrack'=>1)
    .return (rx429_cur)
  rx429_restart1300:
    repr_get_attr_obj rx429_cstack, rx429_cur, rx429_curclass, "$!cstack"
  rx429_fail1301:
    unless rx429_bstack, rx429_done1299
    pop $I19, rx429_bstack
    if_null rx429_cstack, rx429_cstack_done1304
    unless rx429_cstack, rx429_cstack_done1304
    dec $I19
    set $P11, rx429_cstack[$I19]
  rx429_cstack_done1304:
    pop rx429_rep, rx429_bstack
    pop rx429_pos, rx429_bstack
    pop $I19, rx429_bstack
    lt rx429_pos, -1, rx429_done1299
    lt rx429_pos, 0, rx429_fail1301
    eq $I19, 0, rx429_fail1301
    nqp_islist $I20, rx429_cstack
    unless $I20, rx429_jump1302
    elements $I18, rx429_bstack
    le $I18, 0, rx429_cut1303
    dec $I18
    set $I18, rx429_bstack[$I18]
  rx429_cut1303:
    assign rx429_cstack, $I18
  rx429_jump1302:
    jump $I19
  rx429_done1299:
    rx429_cur."!cursor_fail"()
    .return (rx429_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_96_1361537946.1303") :anon :lex :outer("cuid_95_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx431_start
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    rx431_start = self."!cursor_start_all"()
    set rx431_cur, rx431_start[0]
    set rx431_tgt, rx431_start[1]
    set rx431_pos, rx431_start[2]
    set rx431_curclass, rx431_start[3]
    set rx431_bstack, rx431_start[4]
    set $I19, rx431_start[5]
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1310
    gt rx431_pos, rx431_eos, rx431_fail1311
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1317
    goto rxscan432_scan1316
  rxscan432_loop1315:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1311
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1316:
    nqp_rxmark rx431_bstack, rxscan432_loop1315, rx431_pos, 0
  rxscan432_done1317:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt433_01319
    nqp_push_label $P11, alt433_11320
    nqp_push_label $P11, alt433_21321
    nqp_push_label $P11, alt433_31322
    nqp_rxmark rx431_bstack, alt433_end1318, -1, 0
    rx431_cur."!alt"(rx431_pos, "alt_nfa__18_1361537947.3159", $P11)
    goto rx431_fail1311
  alt433_01319:
    add $I11, rx431_pos, 1
    gt $I11, rx431_eos, rx431_fail1311
    substr $S10, rx431_tgt, rx431_pos, 1
    ne $S10, ucs4:"[", rx431_fail1311
    add rx431_pos, 1
    goto alt433_end1318
  alt433_11320:
    add $I11, rx431_pos, 1
    gt $I11, rx431_eos, rx431_fail1311
    substr $S10, rx431_tgt, rx431_pos, 1
    ne $S10, ucs4:"+", rx431_fail1311
    add rx431_pos, 1
    goto alt433_end1318
  alt433_21321:
    add $I11, rx431_pos, 1
    gt $I11, rx431_eos, rx431_fail1311
    substr $S10, rx431_tgt, rx431_pos, 1
    ne $S10, ucs4:"-", rx431_fail1311
    add rx431_pos, 1
    goto alt433_end1318
  alt433_31322:
    add $I11, rx431_pos, 1
    gt $I11, rx431_eos, rx431_fail1311
    substr $S10, rx431_tgt, rx431_pos, 1
    ne $S10, ucs4:":", rx431_fail1311
    add rx431_pos, 1
    goto alt433_end1318
  alt433_end1318:
    rx431_cur."!cursor_pass"(rx431_pos, 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1310:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1311:
    unless rx431_bstack, rx431_done1309
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1314
    unless rx431_cstack, rx431_cstack_done1314
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1314:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1309
    lt rx431_pos, 0, rx431_fail1311
    eq $I19, 0, rx431_fail1311
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1312
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1313
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1313:
    assign rx431_cstack, $I18
  rx431_jump1312:
    jump $I19
  rx431_done1309:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_97_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 279
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_103_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx436_start
    .local string rx436_tgt
    .local int rx436_pos
    .local int rx436_off
    .local int rx436_eos
    .local int rx436_rep
    .local pmc rx436_cur
    .local pmc rx436_curclass
    .local pmc rx436_bstack
    .local pmc rx436_cstack
    rx436_start = self."!cursor_start_all"()
    set rx436_cur, rx436_start[0]
    set rx436_tgt, rx436_start[1]
    set rx436_pos, rx436_start[2]
    set rx436_curclass, rx436_start[3]
    set rx436_bstack, rx436_start[4]
    set $I19, rx436_start[5]
    store_lex unicode:"$\x{a2}", rx436_cur
    length rx436_eos, rx436_tgt
    eq $I19, 1, rx436_restart1329
    gt rx436_pos, rx436_eos, rx436_fail1330
    repr_get_attr_int $I11, self, rx436_curclass, "$!from"
    ne $I11, -1, rxscan437_done1336
    goto rxscan437_scan1335
  rxscan437_loop1334:
    inc rx436_pos
    gt rx436_pos, rx436_eos, rx436_fail1330
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!from", rx436_pos
  rxscan437_scan1335:
    nqp_rxmark rx436_bstack, rxscan437_loop1334, rx436_pos, 0
  rxscan437_done1336:
    nqp_rxmark rx436_bstack, rxcap438_fail1338, rx436_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt439_01340
    nqp_push_label $P11, alt439_11341
    nqp_push_label $P11, alt439_21342
    nqp_rxmark rx436_bstack, alt439_end1339, -1, 0
    rx436_cur."!alt"(rx436_pos, "alt_nfa__19_1361537947.3939", $P11)
    goto rx436_fail1330
  alt439_01340:
    add $I11, rx436_pos, 1
    gt $I11, rx436_eos, rx436_fail1330
    substr $S10, rx436_tgt, rx436_pos, 1
    ne $S10, ucs4:"+", rx436_fail1330
    add rx436_pos, 1
    goto alt439_end1339
  alt439_11341:
    add $I11, rx436_pos, 1
    gt $I11, rx436_eos, rx436_fail1330
    substr $S10, rx436_tgt, rx436_pos, 1
    ne $S10, ucs4:"-", rx436_fail1330
    add rx436_pos, 1
    goto alt439_end1339
  alt439_21342:
    goto alt439_end1339
  alt439_end1339:
    nqp_rxcommit rx436_bstack, alt439_end1339
    nqp_rxpeek $I19, rx436_bstack, rxcap438_fail1338
    inc $I19
    set $I11, rx436_bstack[$I19]
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx436_pos)
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "sign")
    goto rxcap438_done1337
  rxcap438_fail1338:
    goto rx436_fail1330
  rxcap438_done1337:
    nqp_rxmark rx436_bstack, rxquantr441_done1345, rx436_pos, 0
  rxquantr441_loop1344:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1330
    goto rxsubrule442_pass1346
  rxsubrule442_back1347:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1330
  rxsubrule442_pass1346:
    rx436_cstack = rx436_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule442_back1347
    push rx436_bstack, $I11
    push rx436_bstack, 0
    push rx436_bstack, rx436_pos
    elements $I11, rx436_cstack
    push rx436_bstack, $I11
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    nqp_rxpeek $I19, rx436_bstack, rxquantr441_done1345
    inc $I19
    inc $I19
    set rx436_rep, rx436_bstack[$I19]
    nqp_rxcommit rx436_bstack, rxquantr441_done1345
    inc rx436_rep
  rxquantr441_done1345:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt443_01349
    nqp_push_label $P11, alt443_11448
    nqp_push_label $P11, alt443_21453
    nqp_rxmark rx436_bstack, alt443_end1348, -1, 0
    rx436_cur."!alt"(rx436_pos, "alt_nfa__21_1361537947.3939", $P11)
    goto rx436_fail1330
  alt443_01349:
    add $I11, rx436_pos, 1
    gt $I11, rx436_eos, rx436_fail1330
    substr $S10, rx436_tgt, rx436_pos, 1
    ne $S10, ucs4:"[", rx436_fail1330
    add rx436_pos, 1
    nqp_rxmark rx436_bstack, rxquantr444_done1351, rx436_pos, 0
  rxquantr444_loop1350:
    .const 'Sub' $P5001 = 'cuid_103_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1330
    goto rxsubrule475_pass1444
  rxsubrule475_back1445:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1330
  rxsubrule475_pass1444:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "charspec")
    set_addr $I11, rxsubrule475_back1445
    push rx436_bstack, $I11
    push rx436_bstack, 0
    push rx436_bstack, rx436_pos
    elements $I11, rx436_cstack
    push rx436_bstack, $I11
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    nqp_rxpeek $I19, rx436_bstack, rxquantr444_done1351
    inc $I19
    inc $I19
    set rx436_rep, rx436_bstack[$I19]
    nqp_rxcommit rx436_bstack, rxquantr444_done1351
    inc rx436_rep
    nqp_rxmark rx436_bstack, rxquantr444_done1351, rx436_pos, rx436_rep
    goto rxquantr444_loop1350
  rxquantr444_done1351:
    nqp_rxmark rx436_bstack, rxquantr476_done1447, rx436_pos, 0
  rxquantr476_loop1446:
    ge rx436_pos, rx436_eos, rx436_fail1330
    is_cclass $I11, .CCLASS_WHITESPACE, rx436_tgt, rx436_pos
    unless $I11, rx436_fail1330
    add rx436_pos, 1
    nqp_rxpeek $I19, rx436_bstack, rxquantr476_done1447
    inc $I19
    inc $I19
    set rx436_rep, rx436_bstack[$I19]
    nqp_rxcommit rx436_bstack, rxquantr476_done1447
    inc rx436_rep
    nqp_rxmark rx436_bstack, rxquantr476_done1447, rx436_pos, rx436_rep
    goto rxquantr476_loop1446
  rxquantr476_done1447:
    add $I11, rx436_pos, 1
    gt $I11, rx436_eos, rx436_fail1330
    substr $S10, rx436_tgt, rx436_pos, 1
    ne $S10, ucs4:"]", rx436_fail1330
    add rx436_pos, 1
    goto alt443_end1348
  alt443_11448:
    nqp_rxmark rx436_bstack, rxcap477_fail1450, rx436_pos, 0
    nqp_rxmark rx436_bstack, rxquantr478_done1452, -1, 0
  rxquantr478_loop1451:
    ge rx436_pos, rx436_eos, rx436_fail1330
    is_cclass $I11, .CCLASS_WORD, rx436_tgt, rx436_pos
    unless $I11, rx436_fail1330
    add rx436_pos, 1
    nqp_rxpeek $I19, rx436_bstack, rxquantr478_done1452
    inc $I19
    inc $I19
    set rx436_rep, rx436_bstack[$I19]
    nqp_rxcommit rx436_bstack, rxquantr478_done1452
    inc rx436_rep
    nqp_rxmark rx436_bstack, rxquantr478_done1452, rx436_pos, rx436_rep
    goto rxquantr478_loop1451
  rxquantr478_done1452:
    nqp_rxpeek $I19, rx436_bstack, rxcap477_fail1450
    inc $I19
    set $I11, rx436_bstack[$I19]
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx436_pos)
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "name")
    goto rxcap477_done1449
  rxcap477_fail1450:
    goto rx436_fail1330
  rxcap477_done1449:
    goto alt443_end1348
  alt443_21453:
    add $I11, rx436_pos, 1
    gt $I11, rx436_eos, rx436_fail1330
    substr $S10, rx436_tgt, rx436_pos, 1
    ne $S10, ucs4:":", rx436_fail1330
    add rx436_pos, 1
    nqp_rxmark rx436_bstack, rxcap479_fail1455, rx436_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt480_01457
    nqp_push_label $P11, alt480_11458
    nqp_rxmark rx436_bstack, alt480_end1456, -1, 0
    rx436_cur."!alt"(rx436_pos, "alt_nfa__20_1361537947.3939", $P11)
    goto rx436_fail1330
  alt480_01457:
    add $I11, rx436_pos, 1
    gt $I11, rx436_eos, rx436_fail1330
    substr $S10, rx436_tgt, rx436_pos, 1
    ne $S10, ucs4:"!", rx436_fail1330
    add rx436_pos, 1
    goto alt480_end1456
  alt480_11458:
    goto alt480_end1456
  alt480_end1456:
    nqp_rxcommit rx436_bstack, alt480_end1456
    nqp_rxpeek $I19, rx436_bstack, rxcap479_fail1455
    inc $I19
    set $I11, rx436_bstack[$I19]
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx436_pos)
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "invert")
    goto rxcap479_done1454
  rxcap479_fail1455:
    goto rx436_fail1330
  rxcap479_done1454:
    nqp_rxmark rx436_bstack, rxcap482_fail1461, rx436_pos, 0
    nqp_rxmark rx436_bstack, rxquantr483_done1463, -1, 0
  rxquantr483_loop1462:
    ge rx436_pos, rx436_eos, rx436_fail1330
    is_cclass $I11, .CCLASS_WORD, rx436_tgt, rx436_pos
    unless $I11, rx436_fail1330
    add rx436_pos, 1
    nqp_rxpeek $I19, rx436_bstack, rxquantr483_done1463
    inc $I19
    inc $I19
    set rx436_rep, rx436_bstack[$I19]
    nqp_rxcommit rx436_bstack, rxquantr483_done1463
    inc rx436_rep
    nqp_rxmark rx436_bstack, rxquantr483_done1463, rx436_pos, rx436_rep
    goto rxquantr483_loop1462
  rxquantr483_done1463:
    nqp_rxpeek $I19, rx436_bstack, rxcap482_fail1461
    inc $I19
    set $I11, rx436_bstack[$I19]
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx436_pos)
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "uniprop")
    goto rxcap482_done1460
  rxcap482_fail1461:
    goto rx436_fail1330
  rxcap482_done1460:
    goto alt443_end1348
  alt443_end1348:
    nqp_rxcommit rx436_bstack, alt443_end1348
    nqp_rxmark rx436_bstack, rxquantr484_done1465, rx436_pos, 0
  rxquantr484_loop1464:
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1330
    goto rxsubrule485_pass1466
  rxsubrule485_back1467:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1330
  rxsubrule485_pass1466:
    rx436_cstack = rx436_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule485_back1467
    push rx436_bstack, $I11
    push rx436_bstack, 0
    push rx436_bstack, rx436_pos
    elements $I11, rx436_cstack
    push rx436_bstack, $I11
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    nqp_rxpeek $I19, rx436_bstack, rxquantr484_done1465
    inc $I19
    inc $I19
    set rx436_rep, rx436_bstack[$I19]
    nqp_rxcommit rx436_bstack, rxquantr484_done1465
    inc rx436_rep
  rxquantr484_done1465:
    rx436_cur."!cursor_pass"(rx436_pos, "cclass_elem", 'backtrack'=>1)
    .return (rx436_cur)
  rx436_restart1329:
    repr_get_attr_obj rx436_cstack, rx436_cur, rx436_curclass, "$!cstack"
  rx436_fail1330:
    unless rx436_bstack, rx436_done1328
    pop $I19, rx436_bstack
    if_null rx436_cstack, rx436_cstack_done1333
    unless rx436_cstack, rx436_cstack_done1333
    dec $I19
    set $P11, rx436_cstack[$I19]
  rx436_cstack_done1333:
    pop rx436_rep, rx436_bstack
    pop rx436_pos, rx436_bstack
    pop $I19, rx436_bstack
    lt rx436_pos, -1, rx436_done1328
    lt rx436_pos, 0, rx436_fail1330
    eq $I19, 0, rx436_fail1330
    nqp_islist $I20, rx436_cstack
    unless $I20, rx436_jump1331
    elements $I18, rx436_bstack
    le $I18, 0, rx436_cut1332
    dec $I18
    set $I18, rx436_bstack[$I18]
  rx436_cut1332:
    assign rx436_cstack, $I18
  rx436_jump1331:
    jump $I19
  rx436_done1328:
    rx436_cur."!cursor_fail"()
    .return (rx436_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_103_1361537946.1303") :anon :lex :outer("cuid_97_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5004 = 'cuid_98_1361537946.1303' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_100_1361537946.1303' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_102_1361537946.1303' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx445_start
    .local string rx445_tgt
    .local int rx445_pos
    .local int rx445_off
    .local int rx445_eos
    .local int rx445_rep
    .local pmc rx445_cur
    .local pmc rx445_curclass
    .local pmc rx445_bstack
    .local pmc rx445_cstack
    rx445_start = self."!cursor_start_all"()
    set rx445_cur, rx445_start[0]
    set rx445_tgt, rx445_start[1]
    set rx445_pos, rx445_start[2]
    set rx445_curclass, rx445_start[3]
    set rx445_bstack, rx445_start[4]
    set $I19, rx445_start[5]
    store_lex unicode:"$\x{a2}", rx445_cur
    length rx445_eos, rx445_tgt
    eq $I19, 1, rx445_restart1354
    gt rx445_pos, rx445_eos, rx445_fail1355
    repr_get_attr_int $I11, self, rx445_curclass, "$!from"
    ne $I11, -1, rxscan446_done1361
    goto rxscan446_scan1360
  rxscan446_loop1359:
    inc rx445_pos
    gt rx445_pos, rx445_eos, rx445_fail1355
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!from", rx445_pos
  rxscan446_scan1360:
    nqp_rxmark rx445_bstack, rxscan446_loop1359, rx445_pos, 0
  rxscan446_done1361:
  alt447_01363:
    nqp_rxmark rx445_bstack, alt447_11379, rx445_pos, 0
    nqp_rxmark rx445_bstack, rxquantr448_done1365, rx445_pos, 0
  rxquantr448_loop1364:
    ge rx445_pos, rx445_eos, rx445_fail1355
    is_cclass $I11, .CCLASS_WHITESPACE, rx445_tgt, rx445_pos
    unless $I11, rx445_fail1355
    add rx445_pos, 1
    nqp_rxpeek $I19, rx445_bstack, rxquantr448_done1365
    inc $I19
    inc $I19
    set rx445_rep, rx445_bstack[$I19]
    nqp_rxcommit rx445_bstack, rxquantr448_done1365
    inc rx445_rep
    nqp_rxmark rx445_bstack, rxquantr448_done1365, rx445_pos, rx445_rep
    goto rxquantr448_loop1364
  rxquantr448_done1365:
    add $I11, rx445_pos, 1
    gt $I11, rx445_eos, rx445_fail1355
    substr $S10, rx445_tgt, rx445_pos, 1
    ne $S10, ucs4:"-", rx445_fail1355
    add rx445_pos, 1
    .const 'Sub' $P5001 = 'cuid_98_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!pos", rx445_pos
    $P11 = rx445_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx445_curclass, "$!pos"
    ge $I11, 0, rx445_fail1355
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!pos", rx445_pos
    $P11 = rx445_cur."obs"("- as character range", ".. for range, for explicit - in character class, escape it or place as last thing")
    repr_get_attr_int $I11, $P11, rx445_curclass, "$!pos"
    lt $I11, 0, rx445_fail1355
    repr_get_attr_int rx445_pos, $P11, rx445_curclass, "$!pos"
    goto alt447_end1362
  alt447_11379:
    nqp_rxmark rx445_bstack, rxquantr453_done1381, rx445_pos, 0
  rxquantr453_loop1380:
    ge rx445_pos, rx445_eos, rx445_fail1355
    is_cclass $I11, .CCLASS_WHITESPACE, rx445_tgt, rx445_pos
    unless $I11, rx445_fail1355
    add rx445_pos, 1
    nqp_rxpeek $I19, rx445_bstack, rxquantr453_done1381
    inc $I19
    inc $I19
    set rx445_rep, rx445_bstack[$I19]
    nqp_rxcommit rx445_bstack, rxquantr453_done1381
    inc rx445_rep
    nqp_rxmark rx445_bstack, rxquantr453_done1381, rx445_pos, rx445_rep
    goto rxquantr453_loop1380
  rxquantr453_done1381:
    .const 'Sub' $P5002 = 'cuid_100_1361537946.1303' 
    capture_lex $P5002
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!pos", rx445_pos
    $P11 = rx445_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx445_curclass, "$!pos"
    lt $I11, 0, rx445_fail1355
    nqp_rxmark rx445_bstack, rxsubrule462_pass1409, -1, 0
  rxsubrule462_pass1409:
    rx445_cstack = rx445_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx445_pos, $P11, rx445_curclass, "$!pos"
    nqp_rxmark rx445_bstack, rxquantr463_done1411, rx445_pos, 0
  rxquantr463_loop1410:
    nqp_rxmark rx445_bstack, rxquantr464_done1413, rx445_pos, 0
  rxquantr464_loop1412:
    ge rx445_pos, rx445_eos, rx445_fail1355
    is_cclass $I11, .CCLASS_WHITESPACE, rx445_tgt, rx445_pos
    unless $I11, rx445_fail1355
    add rx445_pos, 1
    nqp_rxpeek $I19, rx445_bstack, rxquantr464_done1413
    inc $I19
    inc $I19
    set rx445_rep, rx445_bstack[$I19]
    nqp_rxcommit rx445_bstack, rxquantr464_done1413
    inc rx445_rep
    nqp_rxmark rx445_bstack, rxquantr464_done1413, rx445_pos, rx445_rep
    goto rxquantr464_loop1412
  rxquantr464_done1413:
    add $I11, rx445_pos, 2
    gt $I11, rx445_eos, rx445_fail1355
    substr $S10, rx445_tgt, rx445_pos, 2
    ne $S10, ucs4:"..", rx445_fail1355
    add rx445_pos, 2
    nqp_rxmark rx445_bstack, rxquantr465_done1415, rx445_pos, 0
  rxquantr465_loop1414:
    ge rx445_pos, rx445_eos, rx445_fail1355
    is_cclass $I11, .CCLASS_WHITESPACE, rx445_tgt, rx445_pos
    unless $I11, rx445_fail1355
    add rx445_pos, 1
    nqp_rxpeek $I19, rx445_bstack, rxquantr465_done1415
    inc $I19
    inc $I19
    set rx445_rep, rx445_bstack[$I19]
    nqp_rxcommit rx445_bstack, rxquantr465_done1415
    inc rx445_rep
    nqp_rxmark rx445_bstack, rxquantr465_done1415, rx445_pos, rx445_rep
    goto rxquantr465_loop1414
  rxquantr465_done1415:
    .const 'Sub' $P5003 = 'cuid_102_1361537946.1303' 
    capture_lex $P5003
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!pos", rx445_pos
    $P11 = rx445_cur.$P5003()
    repr_get_attr_int $I11, $P11, rx445_curclass, "$!pos"
    lt $I11, 0, rx445_fail1355
    nqp_rxmark rx445_bstack, rxsubrule474_pass1443, -1, 0
  rxsubrule474_pass1443:
    rx445_cstack = rx445_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx445_pos, $P11, rx445_curclass, "$!pos"
    nqp_rxpeek $I19, rx445_bstack, rxquantr463_done1411
    inc $I19
    inc $I19
    set rx445_rep, rx445_bstack[$I19]
    nqp_rxcommit rx445_bstack, rxquantr463_done1411
    inc rx445_rep
  rxquantr463_done1411:
  alt447_end1362:
    rx445_cur."!cursor_pass"(rx445_pos, 'backtrack'=>1)
    .return (rx445_cur)
  rx445_restart1354:
    repr_get_attr_obj rx445_cstack, rx445_cur, rx445_curclass, "$!cstack"
  rx445_fail1355:
    unless rx445_bstack, rx445_done1353
    pop $I19, rx445_bstack
    if_null rx445_cstack, rx445_cstack_done1358
    unless rx445_cstack, rx445_cstack_done1358
    dec $I19
    set $P11, rx445_cstack[$I19]
  rx445_cstack_done1358:
    pop rx445_rep, rx445_bstack
    pop rx445_pos, rx445_bstack
    pop $I19, rx445_bstack
    lt rx445_pos, -1, rx445_done1353
    lt rx445_pos, 0, rx445_fail1355
    eq $I19, 0, rx445_fail1355
    nqp_islist $I20, rx445_cstack
    unless $I20, rx445_jump1356
    elements $I18, rx445_bstack
    le $I18, 0, rx445_cut1357
    dec $I18
    set $I18, rx445_bstack[$I18]
  rx445_cut1357:
    assign rx445_cstack, $I18
  rx445_jump1356:
    jump $I19
  rx445_done1353:
    rx445_cur."!cursor_fail"()
    .return (rx445_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_98_1361537946.1303") :anon :lex :outer("cuid_103_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx449_start
    .local string rx449_tgt
    .local int rx449_pos
    .local int rx449_off
    .local int rx449_eos
    .local int rx449_rep
    .local pmc rx449_cur
    .local pmc rx449_curclass
    .local pmc rx449_bstack
    .local pmc rx449_cstack
    rx449_start = self."!cursor_start_all"()
    set rx449_cur, rx449_start[0]
    set rx449_tgt, rx449_start[1]
    set rx449_pos, rx449_start[2]
    set rx449_curclass, rx449_start[3]
    set rx449_bstack, rx449_start[4]
    set $I19, rx449_start[5]
    store_lex unicode:"$\x{a2}", rx449_cur
    length rx449_eos, rx449_tgt
    eq $I19, 1, rx449_restart1368
    gt rx449_pos, rx449_eos, rx449_fail1369
    repr_get_attr_int $I11, self, rx449_curclass, "$!from"
    ne $I11, -1, rxscan450_done1375
    goto rxscan450_scan1374
  rxscan450_loop1373:
    inc rx449_pos
    gt rx449_pos, rx449_eos, rx449_fail1369
    repr_bind_attr_int rx449_cur, rx449_curclass, "$!from", rx449_pos
  rxscan450_scan1374:
    nqp_rxmark rx449_bstack, rxscan450_loop1373, rx449_pos, 0
  rxscan450_done1375:
    nqp_rxmark rx449_bstack, rxquantr451_done1377, rx449_pos, 0
  rxquantr451_loop1376:
    ge rx449_pos, rx449_eos, rx449_fail1369
    is_cclass $I11, .CCLASS_WHITESPACE, rx449_tgt, rx449_pos
    unless $I11, rx449_fail1369
    add rx449_pos, 1
    nqp_rxpeek $I19, rx449_bstack, rxquantr451_done1377
    inc $I19
    inc $I19
    set rx449_rep, rx449_bstack[$I19]
    nqp_rxcommit rx449_bstack, rxquantr451_done1377
    inc rx449_rep
    nqp_rxmark rx449_bstack, rxquantr451_done1377, rx449_pos, rx449_rep
    goto rxquantr451_loop1376
  rxquantr451_done1377:
    add $I11, rx449_pos, 1
    gt $I11, rx449_eos, rx449_fail1369
    substr $S10, rx449_tgt, rx449_pos, 1
    ne $S10, ucs4:"]", rx449_fail1369
    add rx449_pos, 1
    rx449_cur."!cursor_pass"(rx449_pos, 'backtrack'=>1)
    .return (rx449_cur)
  rx449_restart1368:
    repr_get_attr_obj rx449_cstack, rx449_cur, rx449_curclass, "$!cstack"
  rx449_fail1369:
    unless rx449_bstack, rx449_done1367
    pop $I19, rx449_bstack
    if_null rx449_cstack, rx449_cstack_done1372
    unless rx449_cstack, rx449_cstack_done1372
    dec $I19
    set $P11, rx449_cstack[$I19]
  rx449_cstack_done1372:
    pop rx449_rep, rx449_bstack
    pop rx449_pos, rx449_bstack
    pop $I19, rx449_bstack
    lt rx449_pos, -1, rx449_done1367
    lt rx449_pos, 0, rx449_fail1369
    eq $I19, 0, rx449_fail1369
    nqp_islist $I20, rx449_cstack
    unless $I20, rx449_jump1370
    elements $I18, rx449_bstack
    le $I18, 0, rx449_cut1371
    dec $I18
    set $I18, rx449_bstack[$I18]
  rx449_cut1371:
    assign rx449_cstack, $I18
  rx449_jump1370:
    jump $I19
  rx449_done1367:
    rx449_cur."!cursor_fail"()
    .return (rx449_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_100_1361537946.1303") :anon :lex :outer("cuid_103_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_99_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx454_start
    .local string rx454_tgt
    .local int rx454_pos
    .local int rx454_off
    .local int rx454_eos
    .local int rx454_rep
    .local pmc rx454_cur
    .local pmc rx454_curclass
    .local pmc rx454_bstack
    .local pmc rx454_cstack
    rx454_start = self."!cursor_start_all"()
    set rx454_cur, rx454_start[0]
    set rx454_tgt, rx454_start[1]
    set rx454_pos, rx454_start[2]
    set rx454_curclass, rx454_start[3]
    set rx454_bstack, rx454_start[4]
    set $I19, rx454_start[5]
    store_lex unicode:"$\x{a2}", rx454_cur
    length rx454_eos, rx454_tgt
    eq $I19, 1, rx454_restart1384
    gt rx454_pos, rx454_eos, rx454_fail1385
    repr_get_attr_int $I11, self, rx454_curclass, "$!from"
    ne $I11, -1, rxscan455_done1391
    goto rxscan455_scan1390
  rxscan455_loop1389:
    inc rx454_pos
    gt rx454_pos, rx454_eos, rx454_fail1385
    repr_bind_attr_int rx454_cur, rx454_curclass, "$!from", rx454_pos
  rxscan455_scan1390:
    nqp_rxmark rx454_bstack, rxscan455_loop1389, rx454_pos, 0
  rxscan455_done1391:
  alt456_01393:
    nqp_rxmark rx454_bstack, alt456_11395, rx454_pos, 0
    add $I11, rx454_pos, 1
    gt $I11, rx454_eos, rx454_fail1385
    substr $S10, rx454_tgt, rx454_pos, 1
    ne $S10, ucs4:"\\", rx454_fail1385
    add rx454_pos, 1
    repr_bind_attr_int rx454_cur, rx454_curclass, "$!pos", rx454_pos
    $P11 = rx454_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx454_curclass, "$!pos"
    lt $I11, 0, rx454_fail1385
    nqp_rxmark rx454_bstack, rxsubrule457_pass1394, -1, 0
  rxsubrule457_pass1394:
    rx454_cstack = rx454_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx454_pos, $P11, rx454_curclass, "$!pos"
    goto alt456_end1392
  alt456_11395:
    .const 'Sub' $P5001 = 'cuid_99_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx454_cur, rx454_curclass, "$!pos", rx454_pos
    $P11 = rx454_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx454_curclass, "$!pos"
    lt $I11, 0, rx454_fail1385
    nqp_rxmark rx454_bstack, rxsubrule461_pass1408, -1, 0
  rxsubrule461_pass1408:
    rx454_cstack = rx454_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx454_pos, $P11, rx454_curclass, "$!pos"
  alt456_end1392:
    rx454_cur."!cursor_pass"(rx454_pos, 'backtrack'=>1)
    .return (rx454_cur)
  rx454_restart1384:
    repr_get_attr_obj rx454_cstack, rx454_cur, rx454_curclass, "$!cstack"
  rx454_fail1385:
    unless rx454_bstack, rx454_done1383
    pop $I19, rx454_bstack
    if_null rx454_cstack, rx454_cstack_done1388
    unless rx454_cstack, rx454_cstack_done1388
    dec $I19
    set $P11, rx454_cstack[$I19]
  rx454_cstack_done1388:
    pop rx454_rep, rx454_bstack
    pop rx454_pos, rx454_bstack
    pop $I19, rx454_bstack
    lt rx454_pos, -1, rx454_done1383
    lt rx454_pos, 0, rx454_fail1385
    eq $I19, 0, rx454_fail1385
    nqp_islist $I20, rx454_cstack
    unless $I20, rx454_jump1386
    elements $I18, rx454_bstack
    le $I18, 0, rx454_cut1387
    dec $I18
    set $I18, rx454_bstack[$I18]
  rx454_cut1387:
    assign rx454_cstack, $I18
  rx454_jump1386:
    jump $I19
  rx454_done1383:
    rx454_cur."!cursor_fail"()
    .return (rx454_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_99_1361537946.1303") :anon :lex :outer("cuid_100_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx458_start
    .local string rx458_tgt
    .local int rx458_pos
    .local int rx458_off
    .local int rx458_eos
    .local int rx458_rep
    .local pmc rx458_cur
    .local pmc rx458_curclass
    .local pmc rx458_bstack
    .local pmc rx458_cstack
    rx458_start = self."!cursor_start_all"()
    set rx458_cur, rx458_start[0]
    set rx458_tgt, rx458_start[1]
    set rx458_pos, rx458_start[2]
    set rx458_curclass, rx458_start[3]
    set rx458_bstack, rx458_start[4]
    set $I19, rx458_start[5]
    store_lex unicode:"$\x{a2}", rx458_cur
    length rx458_eos, rx458_tgt
    eq $I19, 1, rx458_restart1398
    gt rx458_pos, rx458_eos, rx458_fail1399
    repr_get_attr_int $I11, self, rx458_curclass, "$!from"
    ne $I11, -1, rxscan459_done1405
    goto rxscan459_scan1404
  rxscan459_loop1403:
    inc rx458_pos
    gt rx458_pos, rx458_eos, rx458_fail1399
    repr_bind_attr_int rx458_cur, rx458_curclass, "$!from", rx458_pos
  rxscan459_scan1404:
    nqp_rxmark rx458_bstack, rxscan459_loop1403, rx458_pos, 0
  rxscan459_done1405:
    nqp_rxmark rx458_bstack, rxconj460_fail1406, rx458_pos, 0
    goto rxconj460_first1407
  rxconj460_fail1406:
    goto rx458_fail1399
  rxconj460_first1407:
    add $I11, rx458_pos, 1
    gt $I11, rx458_eos, rx458_fail1399
    substr $S10, rx458_tgt, rx458_pos, 1
    eq $S10, ucs4:"]", rx458_fail1399
    add rx458_pos, 1
    nqp_rxpeek $I19, rx458_bstack, rxconj460_fail1406
    inc $I19
    set $I11, rx458_bstack[$I19]
    nqp_rxmark rx458_bstack, rxconj460_fail1406, $I11, rx458_pos
    set rx458_pos, $I11
    add $I11, rx458_pos, 1
    gt $I11, rx458_eos, rx458_fail1399
    substr $S10, rx458_tgt, rx458_pos, 1
    eq $S10, ucs4:"\\", rx458_fail1399
    add rx458_pos, 1
    nqp_rxpeek $I19, rx458_bstack, rxconj460_fail1406
    inc $I19
    set $I11, rx458_bstack[$I19]
    inc $I19
    set $I12, rx458_bstack[$I19]
    ne rx458_pos, $I12, rx458_fail1399
    set rx458_pos, $I11
    ge rx458_pos, rx458_eos, rx458_fail1399
    add rx458_pos, 1
    rx458_cur."!cursor_pass"(rx458_pos, 'backtrack'=>1)
    .return (rx458_cur)
  rx458_restart1398:
    repr_get_attr_obj rx458_cstack, rx458_cur, rx458_curclass, "$!cstack"
  rx458_fail1399:
    unless rx458_bstack, rx458_done1397
    pop $I19, rx458_bstack
    if_null rx458_cstack, rx458_cstack_done1402
    unless rx458_cstack, rx458_cstack_done1402
    dec $I19
    set $P11, rx458_cstack[$I19]
  rx458_cstack_done1402:
    pop rx458_rep, rx458_bstack
    pop rx458_pos, rx458_bstack
    pop $I19, rx458_bstack
    lt rx458_pos, -1, rx458_done1397
    lt rx458_pos, 0, rx458_fail1399
    eq $I19, 0, rx458_fail1399
    nqp_islist $I20, rx458_cstack
    unless $I20, rx458_jump1400
    elements $I18, rx458_bstack
    le $I18, 0, rx458_cut1401
    dec $I18
    set $I18, rx458_bstack[$I18]
  rx458_cut1401:
    assign rx458_cstack, $I18
  rx458_jump1400:
    jump $I19
  rx458_done1397:
    rx458_cur."!cursor_fail"()
    .return (rx458_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_102_1361537946.1303") :anon :lex :outer("cuid_103_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_101_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx466_start
    .local string rx466_tgt
    .local int rx466_pos
    .local int rx466_off
    .local int rx466_eos
    .local int rx466_rep
    .local pmc rx466_cur
    .local pmc rx466_curclass
    .local pmc rx466_bstack
    .local pmc rx466_cstack
    rx466_start = self."!cursor_start_all"()
    set rx466_cur, rx466_start[0]
    set rx466_tgt, rx466_start[1]
    set rx466_pos, rx466_start[2]
    set rx466_curclass, rx466_start[3]
    set rx466_bstack, rx466_start[4]
    set $I19, rx466_start[5]
    store_lex unicode:"$\x{a2}", rx466_cur
    length rx466_eos, rx466_tgt
    eq $I19, 1, rx466_restart1418
    gt rx466_pos, rx466_eos, rx466_fail1419
    repr_get_attr_int $I11, self, rx466_curclass, "$!from"
    ne $I11, -1, rxscan467_done1425
    goto rxscan467_scan1424
  rxscan467_loop1423:
    inc rx466_pos
    gt rx466_pos, rx466_eos, rx466_fail1419
    repr_bind_attr_int rx466_cur, rx466_curclass, "$!from", rx466_pos
  rxscan467_scan1424:
    nqp_rxmark rx466_bstack, rxscan467_loop1423, rx466_pos, 0
  rxscan467_done1425:
  alt468_01427:
    nqp_rxmark rx466_bstack, alt468_11429, rx466_pos, 0
    add $I11, rx466_pos, 1
    gt $I11, rx466_eos, rx466_fail1419
    substr $S10, rx466_tgt, rx466_pos, 1
    ne $S10, ucs4:"\\", rx466_fail1419
    add rx466_pos, 1
    repr_bind_attr_int rx466_cur, rx466_curclass, "$!pos", rx466_pos
    $P11 = rx466_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx466_curclass, "$!pos"
    lt $I11, 0, rx466_fail1419
    nqp_rxmark rx466_bstack, rxsubrule469_pass1428, -1, 0
  rxsubrule469_pass1428:
    rx466_cstack = rx466_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx466_pos, $P11, rx466_curclass, "$!pos"
    goto alt468_end1426
  alt468_11429:
    .const 'Sub' $P5001 = 'cuid_101_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx466_cur, rx466_curclass, "$!pos", rx466_pos
    $P11 = rx466_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx466_curclass, "$!pos"
    lt $I11, 0, rx466_fail1419
    nqp_rxmark rx466_bstack, rxsubrule473_pass1442, -1, 0
  rxsubrule473_pass1442:
    rx466_cstack = rx466_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx466_pos, $P11, rx466_curclass, "$!pos"
  alt468_end1426:
    rx466_cur."!cursor_pass"(rx466_pos, 'backtrack'=>1)
    .return (rx466_cur)
  rx466_restart1418:
    repr_get_attr_obj rx466_cstack, rx466_cur, rx466_curclass, "$!cstack"
  rx466_fail1419:
    unless rx466_bstack, rx466_done1417
    pop $I19, rx466_bstack
    if_null rx466_cstack, rx466_cstack_done1422
    unless rx466_cstack, rx466_cstack_done1422
    dec $I19
    set $P11, rx466_cstack[$I19]
  rx466_cstack_done1422:
    pop rx466_rep, rx466_bstack
    pop rx466_pos, rx466_bstack
    pop $I19, rx466_bstack
    lt rx466_pos, -1, rx466_done1417
    lt rx466_pos, 0, rx466_fail1419
    eq $I19, 0, rx466_fail1419
    nqp_islist $I20, rx466_cstack
    unless $I20, rx466_jump1420
    elements $I18, rx466_bstack
    le $I18, 0, rx466_cut1421
    dec $I18
    set $I18, rx466_bstack[$I18]
  rx466_cut1421:
    assign rx466_cstack, $I18
  rx466_jump1420:
    jump $I19
  rx466_done1417:
    rx466_cur."!cursor_fail"()
    .return (rx466_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_101_1361537946.1303") :anon :lex :outer("cuid_102_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx470_start
    .local string rx470_tgt
    .local int rx470_pos
    .local int rx470_off
    .local int rx470_eos
    .local int rx470_rep
    .local pmc rx470_cur
    .local pmc rx470_curclass
    .local pmc rx470_bstack
    .local pmc rx470_cstack
    rx470_start = self."!cursor_start_all"()
    set rx470_cur, rx470_start[0]
    set rx470_tgt, rx470_start[1]
    set rx470_pos, rx470_start[2]
    set rx470_curclass, rx470_start[3]
    set rx470_bstack, rx470_start[4]
    set $I19, rx470_start[5]
    store_lex unicode:"$\x{a2}", rx470_cur
    length rx470_eos, rx470_tgt
    eq $I19, 1, rx470_restart1432
    gt rx470_pos, rx470_eos, rx470_fail1433
    repr_get_attr_int $I11, self, rx470_curclass, "$!from"
    ne $I11, -1, rxscan471_done1439
    goto rxscan471_scan1438
  rxscan471_loop1437:
    inc rx470_pos
    gt rx470_pos, rx470_eos, rx470_fail1433
    repr_bind_attr_int rx470_cur, rx470_curclass, "$!from", rx470_pos
  rxscan471_scan1438:
    nqp_rxmark rx470_bstack, rxscan471_loop1437, rx470_pos, 0
  rxscan471_done1439:
    nqp_rxmark rx470_bstack, rxconj472_fail1440, rx470_pos, 0
    goto rxconj472_first1441
  rxconj472_fail1440:
    goto rx470_fail1433
  rxconj472_first1441:
    add $I11, rx470_pos, 1
    gt $I11, rx470_eos, rx470_fail1433
    substr $S10, rx470_tgt, rx470_pos, 1
    eq $S10, ucs4:"]", rx470_fail1433
    add rx470_pos, 1
    nqp_rxpeek $I19, rx470_bstack, rxconj472_fail1440
    inc $I19
    set $I11, rx470_bstack[$I19]
    nqp_rxmark rx470_bstack, rxconj472_fail1440, $I11, rx470_pos
    set rx470_pos, $I11
    add $I11, rx470_pos, 1
    gt $I11, rx470_eos, rx470_fail1433
    substr $S10, rx470_tgt, rx470_pos, 1
    eq $S10, ucs4:"\\", rx470_fail1433
    add rx470_pos, 1
    nqp_rxpeek $I19, rx470_bstack, rxconj472_fail1440
    inc $I19
    set $I11, rx470_bstack[$I19]
    inc $I19
    set $I12, rx470_bstack[$I19]
    ne rx470_pos, $I12, rx470_fail1433
    set rx470_pos, $I11
    ge rx470_pos, rx470_eos, rx470_fail1433
    add rx470_pos, 1
    rx470_cur."!cursor_pass"(rx470_pos, 'backtrack'=>1)
    .return (rx470_cur)
  rx470_restart1432:
    repr_get_attr_obj rx470_cstack, rx470_cur, rx470_curclass, "$!cstack"
  rx470_fail1433:
    unless rx470_bstack, rx470_done1431
    pop $I19, rx470_bstack
    if_null rx470_cstack, rx470_cstack_done1436
    unless rx470_cstack, rx470_cstack_done1436
    dec $I19
    set $P11, rx470_cstack[$I19]
  rx470_cstack_done1436:
    pop rx470_rep, rx470_bstack
    pop rx470_pos, rx470_bstack
    pop $I19, rx470_bstack
    lt rx470_pos, -1, rx470_done1431
    lt rx470_pos, 0, rx470_fail1433
    eq $I19, 0, rx470_fail1433
    nqp_islist $I20, rx470_cstack
    unless $I20, rx470_jump1434
    elements $I18, rx470_bstack
    le $I18, 0, rx470_cut1435
    dec $I18
    set $I18, rx470_bstack[$I18]
  rx470_cut1435:
    assign rx470_cstack, $I18
  rx470_jump1434:
    jump $I19
  rx470_done1431:
    rx470_cur."!cursor_fail"()
    .return (rx470_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_104_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 298
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_105_1361537946.1303' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx486_start
    .local string rx486_tgt
    .local int rx486_pos
    .local int rx486_off
    .local int rx486_eos
    .local int rx486_rep
    .local pmc rx486_cur
    .local pmc rx486_curclass
    .local pmc rx486_bstack
    .local pmc rx486_cstack
    rx486_start = self."!cursor_start_all"()
    set rx486_cur, rx486_start[0]
    set rx486_tgt, rx486_start[1]
    set rx486_pos, rx486_start[2]
    set rx486_curclass, rx486_start[3]
    set rx486_bstack, rx486_start[4]
    set $I19, rx486_start[5]
    store_lex unicode:"$\x{a2}", rx486_cur
    length rx486_eos, rx486_tgt
    eq $I19, 1, rx486_restart1470
    gt rx486_pos, rx486_eos, rx486_fail1471
    repr_get_attr_int $I11, self, rx486_curclass, "$!from"
    ne $I11, -1, rxscan487_done1477
    goto rxscan487_scan1476
  rxscan487_loop1475:
    inc rx486_pos
    gt rx486_pos, rx486_eos, rx486_fail1471
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!from", rx486_pos
  rxscan487_scan1476:
    nqp_rxmark rx486_bstack, rxscan487_loop1475, rx486_pos, 0
  rxscan487_done1477:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt488_01479
    nqp_push_label $P11, alt488_11501
    nqp_rxmark rx486_bstack, alt488_end1478, -1, 0
    rx486_cur."!alt"(rx486_pos, "alt_nfa__24_1361537947.4563", $P11)
    goto rx486_fail1471
  alt488_01479:
    add $I11, rx486_pos, 1
    gt $I11, rx486_eos, rx486_fail1471
    substr $S10, rx486_tgt, rx486_pos, 1
    ne $S10, ucs4:":", rx486_fail1471
    add rx486_pos, 1
    nqp_rxmark rx486_bstack, rxquantr489_done1481, -1, 0
  rxquantr489_loop1480:
    .const 'Sub' $P5001 = 'cuid_105_1361537946.1303' 
    capture_lex $P5001
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx486_curclass, "$!pos"
    lt $I11, 0, rx486_fail1471
    goto rxsubrule494_pass1497
  rxsubrule494_back1498:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx486_curclass, "$!pos"
    lt $I11, 0, rx486_fail1471
  rxsubrule494_pass1497:
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "n")
    set_addr $I11, rxsubrule494_back1498
    push rx486_bstack, $I11
    push rx486_bstack, 0
    push rx486_bstack, rx486_pos
    elements $I11, rx486_cstack
    push rx486_bstack, $I11
    repr_get_attr_int rx486_pos, $P11, rx486_curclass, "$!pos"
    nqp_rxpeek $I19, rx486_bstack, rxquantr489_done1481
    inc $I19
    inc $I19
    set rx486_rep, rx486_bstack[$I19]
    nqp_rxcommit rx486_bstack, rxquantr489_done1481
    inc rx486_rep
  rxquantr489_done1481:
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx486_curclass, "$!pos"
    lt $I11, 0, rx486_fail1471
    nqp_rxmark rx486_bstack, rxsubrule495_pass1499, -1, 0
  rxsubrule495_pass1499:
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx486_pos, $P11, rx486_curclass, "$!pos"
    le rx486_pos, 0, rx486_fail1471
    is_cclass $I11, .CCLASS_WORD, rx486_tgt, rx486_pos
    if $I11, rx486_fail1471
    sub $I11, rx486_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx486_tgt, $I11
    unless $I11, rx486_fail1471
    goto alt488_end1478
  alt488_11501:
    add $I11, rx486_pos, 1
    gt $I11, rx486_eos, rx486_fail1471
    substr $S10, rx486_tgt, rx486_pos, 1
    ne $S10, ucs4:":", rx486_fail1471
    add rx486_pos, 1
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx486_curclass, "$!pos"
    lt $I11, 0, rx486_fail1471
    nqp_rxmark rx486_bstack, rxsubrule497_pass1502, -1, 0
  rxsubrule497_pass1502:
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx486_pos, $P11, rx486_curclass, "$!pos"
    nqp_rxmark rx486_bstack, rxquantr498_done1504, rx486_pos, 0
  rxquantr498_loop1503:
    add $I11, rx486_pos, 1
    gt $I11, rx486_eos, rx486_fail1471
    substr $S10, rx486_tgt, rx486_pos, 1
    ne $S10, ucs4:"(", rx486_fail1471
    add rx486_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt499_01506
    nqp_push_label $P11, alt499_11511
    nqp_push_label $P11, alt499_21513
    nqp_rxmark rx486_bstack, alt499_end1505, -1, 0
    rx486_cur."!alt"(rx486_pos, "alt_nfa__23_1361537947.4563", $P11)
    goto rx486_fail1471
  alt499_01506:
    nqp_rxmark rx486_bstack, rxcap500_fail1508, rx486_pos, 0
    nqp_rxmark rx486_bstack, rxquantr501_done1510, -1, 0
  rxquantr501_loop1509:
    ge rx486_pos, rx486_eos, rx486_fail1471
    is_cclass $I11, .CCLASS_NUMERIC, rx486_tgt, rx486_pos
    unless $I11, rx486_fail1471
    add rx486_pos, 1
    nqp_rxpeek $I19, rx486_bstack, rxquantr501_done1510
    inc $I19
    inc $I19
    set rx486_rep, rx486_bstack[$I19]
    nqp_rxcommit rx486_bstack, rxquantr501_done1510
    inc rx486_rep
    nqp_rxmark rx486_bstack, rxquantr501_done1510, rx486_pos, rx486_rep
    goto rxquantr501_loop1509
  rxquantr501_done1510:
    nqp_rxpeek $I19, rx486_bstack, rxcap500_fail1508
    inc $I19
    set $I11, rx486_bstack[$I19]
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx486_pos)
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "n")
    goto rxcap500_done1507
  rxcap500_fail1508:
    goto rx486_fail1471
  rxcap500_done1507:
    goto alt499_end1505
  alt499_11511:
    ge rx486_pos, rx486_eos, rx486_fail1471
    substr $S11, rx486_tgt, rx486_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx486_fail1471
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx486_curclass, "$!pos"
    lt $I11, 0, rx486_fail1471
    nqp_rxmark rx486_bstack, rxsubrule502_pass1512, -1, 0
  rxsubrule502_pass1512:
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx486_pos, $P11, rx486_curclass, "$!pos"
    goto alt499_end1505
  alt499_21513:
    ge rx486_pos, rx486_eos, rx486_fail1471
    substr $S11, rx486_tgt, rx486_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx486_fail1471
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!pos", rx486_pos
    $P11 = rx486_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx486_curclass, "$!pos"
    lt $I11, 0, rx486_fail1471
    nqp_rxmark rx486_bstack, rxsubrule503_pass1514, -1, 0
  rxsubrule503_pass1514:
    rx486_cstack = rx486_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx486_pos, $P11, rx486_curclass, "$!pos"
    goto alt499_end1505
  alt499_end1505:
    nqp_rxcommit rx486_bstack, alt499_end1505
    add $I11, rx486_pos, 1
    gt $I11, rx486_eos, rx486_fail1471
    substr $S10, rx486_tgt, rx486_pos, 1
    ne $S10, ucs4:")", rx486_fail1471
    add rx486_pos, 1
    nqp_rxpeek $I19, rx486_bstack, rxquantr498_done1504
    inc $I19
    inc $I19
    set rx486_rep, rx486_bstack[$I19]
    nqp_rxcommit rx486_bstack, rxquantr498_done1504
    inc rx486_rep
  rxquantr498_done1504:
    goto alt488_end1478
  alt488_end1478:
    nqp_rxcommit rx486_bstack, alt488_end1478
    rx486_cur."!cursor_pass"(rx486_pos, "mod_internal", 'backtrack'=>1)
    .return (rx486_cur)
  rx486_restart1470:
    repr_get_attr_obj rx486_cstack, rx486_cur, rx486_curclass, "$!cstack"
  rx486_fail1471:
    unless rx486_bstack, rx486_done1469
    pop $I19, rx486_bstack
    if_null rx486_cstack, rx486_cstack_done1474
    unless rx486_cstack, rx486_cstack_done1474
    dec $I19
    set $P11, rx486_cstack[$I19]
  rx486_cstack_done1474:
    pop rx486_rep, rx486_bstack
    pop rx486_pos, rx486_bstack
    pop $I19, rx486_bstack
    lt rx486_pos, -1, rx486_done1469
    lt rx486_pos, 0, rx486_fail1471
    eq $I19, 0, rx486_fail1471
    nqp_islist $I20, rx486_cstack
    unless $I20, rx486_jump1472
    elements $I18, rx486_bstack
    le $I18, 0, rx486_cut1473
    dec $I18
    set $I18, rx486_bstack[$I18]
  rx486_cut1473:
    assign rx486_cstack, $I18
  rx486_jump1472:
    jump $I19
  rx486_done1469:
    rx486_cur."!cursor_fail"()
    .return (rx486_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_105_1361537946.1303") :anon :lex :outer("cuid_104_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx490_start
    .local string rx490_tgt
    .local int rx490_pos
    .local int rx490_off
    .local int rx490_eos
    .local int rx490_rep
    .local pmc rx490_cur
    .local pmc rx490_curclass
    .local pmc rx490_bstack
    .local pmc rx490_cstack
    rx490_start = self."!cursor_start_all"()
    set rx490_cur, rx490_start[0]
    set rx490_tgt, rx490_start[1]
    set rx490_pos, rx490_start[2]
    set rx490_curclass, rx490_start[3]
    set rx490_bstack, rx490_start[4]
    set $I19, rx490_start[5]
    store_lex unicode:"$\x{a2}", rx490_cur
    length rx490_eos, rx490_tgt
    eq $I19, 1, rx490_restart1484
    gt rx490_pos, rx490_eos, rx490_fail1485
    repr_get_attr_int $I11, self, rx490_curclass, "$!from"
    ne $I11, -1, rxscan491_done1491
    goto rxscan491_scan1490
  rxscan491_loop1489:
    inc rx490_pos
    gt rx490_pos, rx490_eos, rx490_fail1485
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!from", rx490_pos
  rxscan491_scan1490:
    nqp_rxmark rx490_bstack, rxscan491_loop1489, rx490_pos, 0
  rxscan491_done1491:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt492_01493
    nqp_push_label $P11, alt492_11494
    nqp_rxmark rx490_bstack, alt492_end1492, -1, 0
    rx490_cur."!alt"(rx490_pos, "alt_nfa__22_1361537947.3939", $P11)
    goto rx490_fail1485
  alt492_01493:
    add $I11, rx490_pos, 1
    gt $I11, rx490_eos, rx490_fail1485
    substr $S10, rx490_tgt, rx490_pos, 1
    ne $S10, ucs4:"!", rx490_fail1485
    add rx490_pos, 1
    goto alt492_end1492
  alt492_11494:
    nqp_rxmark rx490_bstack, rxquantr493_done1496, -1, 0
  rxquantr493_loop1495:
    ge rx490_pos, rx490_eos, rx490_fail1485
    is_cclass $I11, .CCLASS_NUMERIC, rx490_tgt, rx490_pos
    unless $I11, rx490_fail1485
    add rx490_pos, 1
    nqp_rxpeek $I19, rx490_bstack, rxquantr493_done1496
    inc $I19
    inc $I19
    set rx490_rep, rx490_bstack[$I19]
    nqp_rxcommit rx490_bstack, rxquantr493_done1496
    inc rx490_rep
    nqp_rxmark rx490_bstack, rxquantr493_done1496, rx490_pos, rx490_rep
    goto rxquantr493_loop1495
  rxquantr493_done1496:
    goto alt492_end1492
  alt492_end1492:
    rx490_cur."!cursor_pass"(rx490_pos, 'backtrack'=>1)
    .return (rx490_cur)
  rx490_restart1484:
    repr_get_attr_obj rx490_cstack, rx490_cur, rx490_curclass, "$!cstack"
  rx490_fail1485:
    unless rx490_bstack, rx490_done1483
    pop $I19, rx490_bstack
    if_null rx490_cstack, rx490_cstack_done1488
    unless rx490_cstack, rx490_cstack_done1488
    dec $I19
    set $P11, rx490_cstack[$I19]
  rx490_cstack_done1488:
    pop rx490_rep, rx490_bstack
    pop rx490_pos, rx490_bstack
    pop $I19, rx490_bstack
    lt rx490_pos, -1, rx490_done1483
    lt rx490_pos, 0, rx490_fail1485
    eq $I19, 0, rx490_fail1485
    nqp_islist $I20, rx490_cstack
    unless $I20, rx490_jump1486
    elements $I18, rx490_bstack
    le $I18, 0, rx490_cut1487
    dec $I18
    set $I18, rx490_bstack[$I18]
  rx490_cut1487:
    assign rx490_cstack, $I18
  rx490_jump1486:
    jump $I19
  rx490_done1483:
    rx490_cur."!cursor_fail"()
    .return (rx490_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident" :subid("cuid_106_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 314
    .param pmc self 
    $P5001 = self."!protoregex"("mod_ident")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ignorecase>" :subid("cuid_107_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx504_start
    .local string rx504_tgt
    .local int rx504_pos
    .local int rx504_off
    .local int rx504_eos
    .local int rx504_rep
    .local pmc rx504_cur
    .local pmc rx504_curclass
    .local pmc rx504_bstack
    .local pmc rx504_cstack
    rx504_start = self."!cursor_start_all"()
    set rx504_cur, rx504_start[0]
    set rx504_tgt, rx504_start[1]
    set rx504_pos, rx504_start[2]
    set rx504_curclass, rx504_start[3]
    set rx504_bstack, rx504_start[4]
    set $I19, rx504_start[5]
    store_lex unicode:"$\x{a2}", rx504_cur
    length rx504_eos, rx504_tgt
    eq $I19, 1, rx504_restart1517
    gt rx504_pos, rx504_eos, rx504_fail1518
    repr_get_attr_int $I11, self, rx504_curclass, "$!from"
    ne $I11, -1, rxscan505_done1524
    goto rxscan505_scan1523
  rxscan505_loop1522:
    inc rx504_pos
    gt rx504_pos, rx504_eos, rx504_fail1518
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!from", rx504_pos
  rxscan505_scan1523:
    nqp_rxmark rx504_bstack, rxscan505_loop1522, rx504_pos, 0
  rxscan505_done1524:
    nqp_rxmark rx504_bstack, rxcap506_fail1526, rx504_pos, 0
    add $I11, rx504_pos, 1
    gt $I11, rx504_eos, rx504_fail1518
    substr $S10, rx504_tgt, rx504_pos, 1
    ne $S10, ucs4:"i", rx504_fail1518
    add rx504_pos, 1
    nqp_rxpeek $I19, rx504_bstack, rxcap506_fail1526
    inc $I19
    set $I11, rx504_bstack[$I19]
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    $P11 = rx504_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx504_pos)
    rx504_cstack = rx504_cur."!cursor_capture"($P11, "sym")
    goto rxcap506_done1525
  rxcap506_fail1526:
    goto rx504_fail1518
  rxcap506_done1525:
    nqp_rxmark rx504_bstack, rxquantr507_done1528, rx504_pos, 0
  rxquantr507_loop1527:
    add $I11, rx504_pos, 9
    gt $I11, rx504_eos, rx504_fail1518
    substr $S10, rx504_tgt, rx504_pos, 9
    ne $S10, ucs4:"gnorecase", rx504_fail1518
    add rx504_pos, 9
    nqp_rxpeek $I19, rx504_bstack, rxquantr507_done1528
    inc $I19
    inc $I19
    set rx504_rep, rx504_bstack[$I19]
    nqp_rxcommit rx504_bstack, rxquantr507_done1528
    inc rx504_rep
  rxquantr507_done1528:
    le rx504_pos, 0, rx504_fail1518
    is_cclass $I11, .CCLASS_WORD, rx504_tgt, rx504_pos
    if $I11, rx504_fail1518
    sub $I11, rx504_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx504_tgt, $I11
    unless $I11, rx504_fail1518
    rx504_cur."!cursor_pass"(rx504_pos, "mod_ident:sym<ignorecase>", 'backtrack'=>1)
    .return (rx504_cur)
  rx504_restart1517:
    repr_get_attr_obj rx504_cstack, rx504_cur, rx504_curclass, "$!cstack"
  rx504_fail1518:
    unless rx504_bstack, rx504_done1516
    pop $I19, rx504_bstack
    if_null rx504_cstack, rx504_cstack_done1521
    unless rx504_cstack, rx504_cstack_done1521
    dec $I19
    set $P11, rx504_cstack[$I19]
  rx504_cstack_done1521:
    pop rx504_rep, rx504_bstack
    pop rx504_pos, rx504_bstack
    pop $I19, rx504_bstack
    lt rx504_pos, -1, rx504_done1516
    lt rx504_pos, 0, rx504_fail1518
    eq $I19, 0, rx504_fail1518
    nqp_islist $I20, rx504_cstack
    unless $I20, rx504_jump1519
    elements $I18, rx504_bstack
    le $I18, 0, rx504_cut1520
    dec $I18
    set $I18, rx504_bstack[$I18]
  rx504_cut1520:
    assign rx504_cstack, $I18
  rx504_jump1519:
    jump $I19
  rx504_done1516:
    rx504_cur."!cursor_fail"()
    .return (rx504_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ratchet>" :subid("cuid_108_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx509_start
    .local string rx509_tgt
    .local int rx509_pos
    .local int rx509_off
    .local int rx509_eos
    .local int rx509_rep
    .local pmc rx509_cur
    .local pmc rx509_curclass
    .local pmc rx509_bstack
    .local pmc rx509_cstack
    rx509_start = self."!cursor_start_all"()
    set rx509_cur, rx509_start[0]
    set rx509_tgt, rx509_start[1]
    set rx509_pos, rx509_start[2]
    set rx509_curclass, rx509_start[3]
    set rx509_bstack, rx509_start[4]
    set $I19, rx509_start[5]
    store_lex unicode:"$\x{a2}", rx509_cur
    length rx509_eos, rx509_tgt
    eq $I19, 1, rx509_restart1532
    gt rx509_pos, rx509_eos, rx509_fail1533
    repr_get_attr_int $I11, self, rx509_curclass, "$!from"
    ne $I11, -1, rxscan510_done1539
    goto rxscan510_scan1538
  rxscan510_loop1537:
    inc rx509_pos
    gt rx509_pos, rx509_eos, rx509_fail1533
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!from", rx509_pos
  rxscan510_scan1538:
    nqp_rxmark rx509_bstack, rxscan510_loop1537, rx509_pos, 0
  rxscan510_done1539:
    nqp_rxmark rx509_bstack, rxcap511_fail1541, rx509_pos, 0
    add $I11, rx509_pos, 1
    gt $I11, rx509_eos, rx509_fail1533
    substr $S10, rx509_tgt, rx509_pos, 1
    ne $S10, ucs4:"r", rx509_fail1533
    add rx509_pos, 1
    nqp_rxpeek $I19, rx509_bstack, rxcap511_fail1541
    inc $I19
    set $I11, rx509_bstack[$I19]
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    $P11 = rx509_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx509_pos)
    rx509_cstack = rx509_cur."!cursor_capture"($P11, "sym")
    goto rxcap511_done1540
  rxcap511_fail1541:
    goto rx509_fail1533
  rxcap511_done1540:
    nqp_rxmark rx509_bstack, rxquantr512_done1543, rx509_pos, 0
  rxquantr512_loop1542:
    add $I11, rx509_pos, 6
    gt $I11, rx509_eos, rx509_fail1533
    substr $S10, rx509_tgt, rx509_pos, 6
    ne $S10, ucs4:"atchet", rx509_fail1533
    add rx509_pos, 6
    nqp_rxpeek $I19, rx509_bstack, rxquantr512_done1543
    inc $I19
    inc $I19
    set rx509_rep, rx509_bstack[$I19]
    nqp_rxcommit rx509_bstack, rxquantr512_done1543
    inc rx509_rep
  rxquantr512_done1543:
    le rx509_pos, 0, rx509_fail1533
    is_cclass $I11, .CCLASS_WORD, rx509_tgt, rx509_pos
    if $I11, rx509_fail1533
    sub $I11, rx509_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx509_tgt, $I11
    unless $I11, rx509_fail1533
    rx509_cur."!cursor_pass"(rx509_pos, "mod_ident:sym<ratchet>", 'backtrack'=>1)
    .return (rx509_cur)
  rx509_restart1532:
    repr_get_attr_obj rx509_cstack, rx509_cur, rx509_curclass, "$!cstack"
  rx509_fail1533:
    unless rx509_bstack, rx509_done1531
    pop $I19, rx509_bstack
    if_null rx509_cstack, rx509_cstack_done1536
    unless rx509_cstack, rx509_cstack_done1536
    dec $I19
    set $P11, rx509_cstack[$I19]
  rx509_cstack_done1536:
    pop rx509_rep, rx509_bstack
    pop rx509_pos, rx509_bstack
    pop $I19, rx509_bstack
    lt rx509_pos, -1, rx509_done1531
    lt rx509_pos, 0, rx509_fail1533
    eq $I19, 0, rx509_fail1533
    nqp_islist $I20, rx509_cstack
    unless $I20, rx509_jump1534
    elements $I18, rx509_bstack
    le $I18, 0, rx509_cut1535
    dec $I18
    set $I18, rx509_bstack[$I18]
  rx509_cut1535:
    assign rx509_cstack, $I18
  rx509_jump1534:
    jump $I19
  rx509_done1531:
    rx509_cur."!cursor_fail"()
    .return (rx509_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<sigspace>" :subid("cuid_109_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx514_start
    .local string rx514_tgt
    .local int rx514_pos
    .local int rx514_off
    .local int rx514_eos
    .local int rx514_rep
    .local pmc rx514_cur
    .local pmc rx514_curclass
    .local pmc rx514_bstack
    .local pmc rx514_cstack
    rx514_start = self."!cursor_start_all"()
    set rx514_cur, rx514_start[0]
    set rx514_tgt, rx514_start[1]
    set rx514_pos, rx514_start[2]
    set rx514_curclass, rx514_start[3]
    set rx514_bstack, rx514_start[4]
    set $I19, rx514_start[5]
    store_lex unicode:"$\x{a2}", rx514_cur
    length rx514_eos, rx514_tgt
    eq $I19, 1, rx514_restart1547
    gt rx514_pos, rx514_eos, rx514_fail1548
    repr_get_attr_int $I11, self, rx514_curclass, "$!from"
    ne $I11, -1, rxscan515_done1554
    goto rxscan515_scan1553
  rxscan515_loop1552:
    inc rx514_pos
    gt rx514_pos, rx514_eos, rx514_fail1548
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!from", rx514_pos
  rxscan515_scan1553:
    nqp_rxmark rx514_bstack, rxscan515_loop1552, rx514_pos, 0
  rxscan515_done1554:
    nqp_rxmark rx514_bstack, rxcap516_fail1556, rx514_pos, 0
    add $I11, rx514_pos, 1
    gt $I11, rx514_eos, rx514_fail1548
    substr $S10, rx514_tgt, rx514_pos, 1
    ne $S10, ucs4:"s", rx514_fail1548
    add rx514_pos, 1
    nqp_rxpeek $I19, rx514_bstack, rxcap516_fail1556
    inc $I19
    set $I11, rx514_bstack[$I19]
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx514_pos)
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "sym")
    goto rxcap516_done1555
  rxcap516_fail1556:
    goto rx514_fail1548
  rxcap516_done1555:
    nqp_rxmark rx514_bstack, rxquantr517_done1558, rx514_pos, 0
  rxquantr517_loop1557:
    add $I11, rx514_pos, 7
    gt $I11, rx514_eos, rx514_fail1548
    substr $S10, rx514_tgt, rx514_pos, 7
    ne $S10, ucs4:"igspace", rx514_fail1548
    add rx514_pos, 7
    nqp_rxpeek $I19, rx514_bstack, rxquantr517_done1558
    inc $I19
    inc $I19
    set rx514_rep, rx514_bstack[$I19]
    nqp_rxcommit rx514_bstack, rxquantr517_done1558
    inc rx514_rep
  rxquantr517_done1558:
    le rx514_pos, 0, rx514_fail1548
    is_cclass $I11, .CCLASS_WORD, rx514_tgt, rx514_pos
    if $I11, rx514_fail1548
    sub $I11, rx514_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx514_tgt, $I11
    unless $I11, rx514_fail1548
    rx514_cur."!cursor_pass"(rx514_pos, "mod_ident:sym<sigspace>", 'backtrack'=>1)
    .return (rx514_cur)
  rx514_restart1547:
    repr_get_attr_obj rx514_cstack, rx514_cur, rx514_curclass, "$!cstack"
  rx514_fail1548:
    unless rx514_bstack, rx514_done1546
    pop $I19, rx514_bstack
    if_null rx514_cstack, rx514_cstack_done1551
    unless rx514_cstack, rx514_cstack_done1551
    dec $I19
    set $P11, rx514_cstack[$I19]
  rx514_cstack_done1551:
    pop rx514_rep, rx514_bstack
    pop rx514_pos, rx514_bstack
    pop $I19, rx514_bstack
    lt rx514_pos, -1, rx514_done1546
    lt rx514_pos, 0, rx514_fail1548
    eq $I19, 0, rx514_fail1548
    nqp_islist $I20, rx514_cstack
    unless $I20, rx514_jump1549
    elements $I18, rx514_bstack
    le $I18, 0, rx514_cut1550
    dec $I18
    set $I18, rx514_bstack[$I18]
  rx514_cut1550:
    assign rx514_cstack, $I18
  rx514_jump1549:
    jump $I19
  rx514_done1546:
    rx514_cur."!cursor_fail"()
    .return (rx514_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<dba>" :subid("cuid_110_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx519_start
    .local string rx519_tgt
    .local int rx519_pos
    .local int rx519_off
    .local int rx519_eos
    .local int rx519_rep
    .local pmc rx519_cur
    .local pmc rx519_curclass
    .local pmc rx519_bstack
    .local pmc rx519_cstack
    rx519_start = self."!cursor_start_all"()
    set rx519_cur, rx519_start[0]
    set rx519_tgt, rx519_start[1]
    set rx519_pos, rx519_start[2]
    set rx519_curclass, rx519_start[3]
    set rx519_bstack, rx519_start[4]
    set $I19, rx519_start[5]
    store_lex unicode:"$\x{a2}", rx519_cur
    length rx519_eos, rx519_tgt
    eq $I19, 1, rx519_restart1562
    gt rx519_pos, rx519_eos, rx519_fail1563
    repr_get_attr_int $I11, self, rx519_curclass, "$!from"
    ne $I11, -1, rxscan520_done1569
    goto rxscan520_scan1568
  rxscan520_loop1567:
    inc rx519_pos
    gt rx519_pos, rx519_eos, rx519_fail1563
    repr_bind_attr_int rx519_cur, rx519_curclass, "$!from", rx519_pos
  rxscan520_scan1568:
    nqp_rxmark rx519_bstack, rxscan520_loop1567, rx519_pos, 0
  rxscan520_done1569:
    nqp_rxmark rx519_bstack, rxcap521_fail1571, rx519_pos, 0
    add $I11, rx519_pos, 3
    gt $I11, rx519_eos, rx519_fail1563
    substr $S10, rx519_tgt, rx519_pos, 3
    ne $S10, ucs4:"dba", rx519_fail1563
    add rx519_pos, 3
    nqp_rxpeek $I19, rx519_bstack, rxcap521_fail1571
    inc $I19
    set $I11, rx519_bstack[$I19]
    repr_bind_attr_int rx519_cur, rx519_curclass, "$!pos", rx519_pos
    $P11 = rx519_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx519_pos)
    rx519_cstack = rx519_cur."!cursor_capture"($P11, "sym")
    goto rxcap521_done1570
  rxcap521_fail1571:
    goto rx519_fail1563
  rxcap521_done1570:
    le rx519_pos, 0, rx519_fail1563
    is_cclass $I11, .CCLASS_WORD, rx519_tgt, rx519_pos
    if $I11, rx519_fail1563
    sub $I11, rx519_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx519_tgt, $I11
    unless $I11, rx519_fail1563
    rx519_cur."!cursor_pass"(rx519_pos, "mod_ident:sym<dba>", 'backtrack'=>1)
    .return (rx519_cur)
  rx519_restart1562:
    repr_get_attr_obj rx519_cstack, rx519_cur, rx519_curclass, "$!cstack"
  rx519_fail1563:
    unless rx519_bstack, rx519_done1561
    pop $I19, rx519_bstack
    if_null rx519_cstack, rx519_cstack_done1566
    unless rx519_cstack, rx519_cstack_done1566
    dec $I19
    set $P11, rx519_cstack[$I19]
  rx519_cstack_done1566:
    pop rx519_rep, rx519_bstack
    pop rx519_pos, rx519_bstack
    pop $I19, rx519_bstack
    lt rx519_pos, -1, rx519_done1561
    lt rx519_pos, 0, rx519_fail1563
    eq $I19, 0, rx519_fail1563
    nqp_islist $I20, rx519_cstack
    unless $I20, rx519_jump1564
    elements $I18, rx519_bstack
    le $I18, 0, rx519_cut1565
    dec $I18
    set $I18, rx519_bstack[$I18]
  rx519_cut1565:
    assign rx519_cstack, $I18
  rx519_jump1564:
    jump $I19
  rx519_done1561:
    rx519_cur."!cursor_fail"()
    .return (rx519_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<oops>" :subid("cuid_111_1361537946.1303") :anon :lex :outer("cuid_180_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 319
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_193_1361537946.1303' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_112_1361537946.1303' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_194_1361537946.1303' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx523_start
    .local string rx523_tgt
    .local int rx523_pos
    .local int rx523_off
    .local int rx523_eos
    .local int rx523_rep
    .local pmc rx523_cur
    .local pmc rx523_curclass
    .local pmc rx523_bstack
    .local pmc rx523_cstack
    rx523_start = self."!cursor_start_all"()
    set rx523_cur, rx523_start[0]
    set rx523_tgt, rx523_start[1]
    set rx523_pos, rx523_start[2]
    set rx523_curclass, rx523_start[3]
    set rx523_bstack, rx523_start[4]
    set $I19, rx523_start[5]
    store_lex unicode:"$\x{a2}", rx523_cur
    length rx523_eos, rx523_tgt
    eq $I19, 1, rx523_restart1575
    gt rx523_pos, rx523_eos, rx523_fail1576
    repr_get_attr_int $I11, self, rx523_curclass, "$!from"
    ne $I11, -1, rxscan524_done1582
    goto rxscan524_scan1581
  rxscan524_loop1580:
    inc rx523_pos
    gt rx523_pos, rx523_eos, rx523_fail1576
    repr_bind_attr_int rx523_cur, rx523_curclass, "$!from", rx523_pos
  rxscan524_scan1581:
    nqp_rxmark rx523_bstack, rxscan524_loop1580, rx523_pos, 0
  rxscan524_done1582:
    repr_bind_attr_int rx523_cur, rx523_curclass, "$!pos", rx523_pos
    store_lex unicode:"$\x{a2}", rx523_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_193_1361537946.1303' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_112_1361537946.1303' 
    capture_lex $P5004
    repr_bind_attr_int rx523_cur, rx523_curclass, "$!pos", rx523_pos
    $P11 = rx523_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx523_curclass, "$!pos"
    lt $I11, 0, rx523_fail1576
    nqp_rxmark rx523_bstack, rxsubrule528_pass1595, -1, 0
  rxsubrule528_pass1595:
    rx523_cstack = rx523_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx523_pos, $P11, rx523_curclass, "$!pos"
    repr_bind_attr_int rx523_cur, rx523_curclass, "$!pos", rx523_pos
    store_lex unicode:"$\x{a2}", rx523_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_194_1361537946.1303' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx523_cur."!cursor_pass"(rx523_pos, "mod_ident:sym<oops>", 'backtrack'=>1)
    .return (rx523_cur)
  rx523_restart1575:
    repr_get_attr_obj rx523_cstack, rx523_cur, rx523_curclass, "$!cstack"
  rx523_fail1576:
    unless rx523_bstack, rx523_done1574
    pop $I19, rx523_bstack
    if_null rx523_cstack, rx523_cstack_done1579
    unless rx523_cstack, rx523_cstack_done1579
    dec $I19
    set $P11, rx523_cstack[$I19]
  rx523_cstack_done1579:
    pop rx523_rep, rx523_bstack
    pop rx523_pos, rx523_bstack
    pop $I19, rx523_bstack
    lt rx523_pos, -1, rx523_done1574
    lt rx523_pos, 0, rx523_fail1576
    eq $I19, 0, rx523_fail1576
    nqp_islist $I20, rx523_cstack
    unless $I20, rx523_jump1577
    elements $I18, rx523_bstack
    le $I18, 0, rx523_cut1578
    dec $I18
    set $I18, rx523_bstack[$I18]
  rx523_cut1578:
    assign rx523_cstack, $I18
  rx523_jump1577:
    jump $I19
  rx523_done1574:
    rx523_cur."!cursor_fail"()
    .return (rx523_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_193_1361537946.1303") :anon :lex :outer("cuid_111_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 319

    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_112_1361537946.1303") :anon :lex :outer("cuid_111_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx525_start
    .local string rx525_tgt
    .local int rx525_pos
    .local int rx525_off
    .local int rx525_eos
    .local int rx525_rep
    .local pmc rx525_cur
    .local pmc rx525_curclass
    .local pmc rx525_bstack
    .local pmc rx525_cstack
    rx525_start = self."!cursor_start_all"()
    set rx525_cur, rx525_start[0]
    set rx525_tgt, rx525_start[1]
    set rx525_pos, rx525_start[2]
    set rx525_curclass, rx525_start[3]
    set rx525_bstack, rx525_start[4]
    set $I19, rx525_start[5]
    store_lex unicode:"$\x{a2}", rx525_cur
    length rx525_eos, rx525_tgt
    eq $I19, 1, rx525_restart1585
    gt rx525_pos, rx525_eos, rx525_fail1586
    repr_get_attr_int $I11, self, rx525_curclass, "$!from"
    ne $I11, -1, rxscan526_done1592
    goto rxscan526_scan1591
  rxscan526_loop1590:
    inc rx525_pos
    gt rx525_pos, rx525_eos, rx525_fail1586
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!from", rx525_pos
  rxscan526_scan1591:
    nqp_rxmark rx525_bstack, rxscan526_loop1590, rx525_pos, 0
  rxscan526_done1592:
    nqp_rxmark rx525_bstack, rxquantr527_done1594, -1, 0
  rxquantr527_loop1593:
    ge rx525_pos, rx525_eos, rx525_fail1586
    is_cclass $I11, .CCLASS_WORD, rx525_tgt, rx525_pos
    unless $I11, rx525_fail1586
    add rx525_pos, 1
    nqp_rxpeek $I19, rx525_bstack, rxquantr527_done1594
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr527_done1594
    inc rx525_rep
    nqp_rxmark rx525_bstack, rxquantr527_done1594, rx525_pos, rx525_rep
    goto rxquantr527_loop1593
  rxquantr527_done1594:
    rx525_cur."!cursor_pass"(rx525_pos, 'backtrack'=>1)
    .return (rx525_cur)
  rx525_restart1585:
    repr_get_attr_obj rx525_cstack, rx525_cur, rx525_curclass, "$!cstack"
  rx525_fail1586:
    unless rx525_bstack, rx525_done1584
    pop $I19, rx525_bstack
    if_null rx525_cstack, rx525_cstack_done1589
    unless rx525_cstack, rx525_cstack_done1589
    dec $I19
    set $P11, rx525_cstack[$I19]
  rx525_cstack_done1589:
    pop rx525_rep, rx525_bstack
    pop rx525_pos, rx525_bstack
    pop $I19, rx525_bstack
    lt rx525_pos, -1, rx525_done1584
    lt rx525_pos, 0, rx525_fail1586
    eq $I19, 0, rx525_fail1586
    nqp_islist $I20, rx525_cstack
    unless $I20, rx525_jump1587
    elements $I18, rx525_bstack
    le $I18, 0, rx525_cut1588
    dec $I18
    set $I18, rx525_bstack[$I18]
  rx525_cut1588:
    assign rx525_cstack, $I18
  rx525_jump1587:
    jump $I19
  rx525_done1584:
    rx525_cur."!cursor_fail"()
    .return (rx525_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_194_1361537946.1303") :anon :lex :outer("cuid_111_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 319
    .local pmc fb_tmp_17 
    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    find_lex $P5003, "$/"
    set fb_tmp_17, $P5003
    repr_defined $I5001, fb_tmp_17
    unless $I5001 goto if529_else1596 
    set $P5004, fb_tmp_17[0]
    set $P5006, $P5004
    goto if529_end1597
  if529_else1596:
    null $P5005
    set $P5006, $P5005
  if529_end1597:
    unless_null $P5006, vivi_5301598
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_5301598:
    $P5008 = $P5006."Str"()
    set $S5002, $P5008
    concat $S5001, "Unrecognized regex modifier :", $S5002
    $P5009 = $P5002."panic"($S5001)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_196_1361537946.1303") :anon :lex :outer("cuid_177_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 323
    .const 'Sub' $P5066 = 'cuid_195_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_199_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_113_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_114_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_115_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_116_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_117_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_118_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_119_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_120_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_121_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_122_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_123_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_124_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_125_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_126_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_127_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_128_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_129_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_130_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_131_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_132_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_133_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_134_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_135_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_136_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_137_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_138_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_139_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_140_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_141_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_142_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_143_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_144_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_145_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_146_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_147_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_148_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_149_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_150_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_151_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_152_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_153_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_154_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_155_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_156_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_157_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_158_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_159_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_160_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_161_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_162_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_163_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_164_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_165_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_166_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_167_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_168_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_169_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_170_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_171_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_172_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_173_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_174_1361537946.1303' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_175_1361537946.1303' 
    capture_lex $P5066 
    .lex "&backmod", $P101 
    .lex "&capnames", $P102 
    .lex "$?PACKAGE", $P103 
    .lex "$?CLASS", $P104 
    .const 'Sub' $P5001 = 'cuid_195_1361537946.1303' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_199_1361537946.1303' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_113_1361537946.1303' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_114_1361537946.1303' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_115_1361537946.1303' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_116_1361537946.1303' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_117_1361537946.1303' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_118_1361537946.1303' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_119_1361537946.1303' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_120_1361537946.1303' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_121_1361537946.1303' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_122_1361537946.1303' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_123_1361537946.1303' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_124_1361537946.1303' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_125_1361537946.1303' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_126_1361537946.1303' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_127_1361537946.1303' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_128_1361537946.1303' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_129_1361537946.1303' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_130_1361537946.1303' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_131_1361537946.1303' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_132_1361537946.1303' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_133_1361537946.1303' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_134_1361537946.1303' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_135_1361537946.1303' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_136_1361537946.1303' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_137_1361537946.1303' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_138_1361537946.1303' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_139_1361537946.1303' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_140_1361537946.1303' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_141_1361537946.1303' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_142_1361537946.1303' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_143_1361537946.1303' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_144_1361537946.1303' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_145_1361537946.1303' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_146_1361537946.1303' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_147_1361537946.1303' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_148_1361537946.1303' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_149_1361537946.1303' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_150_1361537946.1303' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_151_1361537946.1303' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_152_1361537946.1303' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_153_1361537946.1303' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_154_1361537946.1303' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_155_1361537946.1303' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_156_1361537946.1303' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_157_1361537946.1303' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_158_1361537946.1303' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_159_1361537946.1303' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_160_1361537946.1303' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_161_1361537946.1303' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_162_1361537946.1303' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_163_1361537946.1303' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_164_1361537946.1303' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_165_1361537946.1303' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_166_1361537946.1303' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_167_1361537946.1303' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_168_1361537946.1303' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_169_1361537946.1303' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_170_1361537946.1303' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_171_1361537946.1303' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_172_1361537946.1303' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_173_1361537946.1303' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_174_1361537946.1303' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_175_1361537946.1303' 
    capture_lex $P5065
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_195_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 869
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ast", _lex_param_0 
    .lex "$backmod", _lex_param_1 
    set $S5001, _lex_param_1
    iseq $I5001, $S5001, ":"
    unless $I5001 goto if531_else1599 
.annotate 'line', 870
    $P5001 = _lex_param_0."backtrack"("r")
    goto if531_end1600
  if531_else1599:
    set $S5002, _lex_param_1
    iseq $I5002, $S5002, ":?"
    set $I5004, $I5002
    if $I5002 goto unless533_end1604 
    set $S5003, _lex_param_1
    iseq $I5003, $S5003, "?"
    set $I5004, $I5003
  unless533_end1604:
    unless $I5004 goto if532_else1601 
.annotate 'line', 871
    $P5002 = _lex_param_0."backtrack"("f")
    set $P5006, $P5002
    goto if532_end1602
  if532_else1601:
    set $S5004, _lex_param_1
    iseq $I5005, $S5004, ":!"
    set $I5007, $I5005
    if $I5005 goto unless535_end1608 
    set $S5005, _lex_param_1
    iseq $I5006, $S5005, "!"
    set $I5007, $I5006
  unless535_end1608:
    box $P5005, $I5007
    set $P5004, $P5005
    unless $I5007 goto if534_end1606 
.annotate 'line', 872
    $P5003 = _lex_param_0."backtrack"("g")
    set $P5004, $P5003
  if534_end1606:
    set $P5006, $P5004
  if532_end1602:
  if531_end1600:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "capnames" :subid("cuid_199_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 913
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_198_1361537946.1303' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_202_1361537946.1303' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_204_1361537946.1303' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_206_1361537946.1303' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_209_1361537946.1303' 
    capture_lex $P5024 
    .lex "%capnames", $P101 
    .lex "$rxtype", $P102 
    .lex "$ast", _lex_param_0 
    .lex "$count", _lex_param_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
.annotate 'line', 915
    $P5003 = _lex_param_0."rxtype"()
    set $P102, $P5003
    set $S5001, $P102
    iseq $I5001, $S5001, "concat"
    unless $I5001 goto if536_else1609 
.annotate 'line', 916
.annotate 'line', 917
    $P5007 = _lex_param_0."list"()
    set $P5004, $P5007
    iter $P5006, $P5007
  for_next1620:
    unless $P5006, for_done1622
    shift $P5009, $P5006
  for_redo1621:
    .const 'Sub' $P5008 = 'cuid_198_1361537946.1303' 
    capture_lex $P5008
    $P5004 = $P5008($P5009)
    goto for_next1620
  for_done1622:
    goto if536_end1610
  if536_else1609:
    set $S5002, $P102
    iseq $I5002, $S5002, "altseq"
    set $I5004, $I5002
    if $I5002 goto unless542_end1626 
    set $S5003, $P102
    iseq $I5003, $S5003, "alt"
    set $I5004, $I5003
  unless542_end1626:
    unless $I5004 goto if541_else1623 
    .const 'Sub' $P5010 = 'cuid_202_1361537946.1303' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5023, $P5011
    goto if541_end1624
  if541_else1623:
    set $S5004, $P102
    iseq $I5005, $S5004, "subrule"
    set $I5007, $I5005
    unless $I5005 goto if555_end1654 
.annotate 'line', 934
    $P5012 = _lex_param_0."subtype"()
    set $S5005, $P5012
    iseq $I5006, $S5005, "capture"
    set $I5007, $I5006
  if555_end1654:
    unless $I5007 goto if554_else1651 
    .const 'Sub' $P5013 = 'cuid_204_1361537946.1303' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5022, $P5014
    goto if554_end1652
  if554_else1651:
    set $S5006, $P102
    iseq $I5008, $S5006, "subcapture"
    unless $I5008 goto if559_else1664 
    .const 'Sub' $P5015 = 'cuid_206_1361537946.1303' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5021, $P5016
    goto if559_end1665
  if559_else1664:
    set $S5007, $P102
    iseq $I5009, $S5007, "quant"
    box $P5020, $I5009
    set $P5019, $P5020
    unless $I5009 goto if570_end1689 
    .const 'Sub' $P5017 = 'cuid_209_1361537946.1303' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if570_end1689:
    set $P5021, $P5019
  if559_end1665:
    set $P5022, $P5021
  if554_end1652:
    set $P5023, $P5022
  if541_end1624:
  if536_end1610:
    set $P101[""], _lex_param_1
    delete $P101["$!from"]
    delete $P101["$!to"]
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_198_1361537946.1303") :anon :lex :outer("cuid_199_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 917
    .param pmc _lex_param_0 
    .const 'Sub' $P5013 = 'cuid_197_1361537946.1303' 
    capture_lex $P5013 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_19 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 918
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1614:
    unless $P5006, for_done1616
    shift $P5008, $P5006
  for_redo1615:
    .const 'Sub' $P5007 = 'cuid_197_1361537946.1303' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1614
  for_done1616:
    set fb_tmp_19, $P101
    repr_defined $I5001, fb_tmp_19
    unless $I5001 goto if539_else1617 
    set $P5009, fb_tmp_19[""]
    set $P5011, $P5009
    goto if539_end1618
  if539_else1617:
    null $P5010
    set $P5011, $P5010
  if539_end1618:
    unless_null $P5011, vivi_5401619
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_5401619:
    store_lex "$count", $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_197_1361537946.1303") :anon :lex :outer("cuid_198_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 919
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_18 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_18, $P5003
    repr_defined $I5001, fb_tmp_18
    unless $I5001 goto if537_else1611 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_18[$S5002]
    set $P5007, $P5004
    goto if537_end1612
  if537_else1611:
    null $P5006
    set $P5007, $P5006
  if537_end1612:
    unless_null $P5007, vivi_5381613
    nqp_get_sc_object $P5008, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5008
  vivi_5381613:
    set $N5002, $P5007
    $P5009 = _lex_param_0."value"()
    set $N5003, $P5009
    add $N5001, $N5002, $N5003
    box $P5010, $N5001
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_202_1361537946.1303") :anon :lex :outer("cuid_199_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 923
    .const 'Sub' $P5010 = 'cuid_201_1361537946.1303' 
    capture_lex $P5010 
    .lex "$max", $P101 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    find_lex $P5002, "$count"
    set $P101, $P5002
.annotate 'line', 925
    find_lex $P5006, "$ast"
    $P5007 = $P5006."list"()
    set $P5003, $P5007
    iter $P5005, $P5007
  for_next1648:
    unless $P5005, for_done1650
    shift $P5009, $P5005
  for_redo1649:
    .const 'Sub' $P5008 = 'cuid_201_1361537946.1303' 
    capture_lex $P5008
    $P5003 = $P5008($P5009)
    goto for_next1648
  for_done1650:
    store_lex "$count", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_201_1361537946.1303") :anon :lex :outer("cuid_202_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 925
    .param pmc _lex_param_0 
    .const 'Sub' $P5020 = 'cuid_200_1361537946.1303' 
    capture_lex $P5020 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_22 
    .local pmc fb_tmp_23 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 926
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1637:
    unless $P5006, for_done1639
    shift $P5008, $P5006
  for_redo1638:
    .const 'Sub' $P5007 = 'cuid_200_1361537946.1303' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1637
  for_done1639:
    set fb_tmp_22, $P101
    repr_defined $I5002, fb_tmp_22
    unless $I5002 goto if550_else1642 
    set $P5009, fb_tmp_22[""]
    set $P5011, $P5009
    goto if550_end1643
  if550_else1642:
    null $P5010
    set $P5011, $P5010
  if550_end1643:
    unless_null $P5011, vivi_5511644
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_5511644:
    set $N5001, $P5011
    find_lex $P5013, "$max"
    set $N5002, $P5013
    isgt $I5001, $N5001, $N5002
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if549_end1641 
    set fb_tmp_23, $P101
    repr_defined $I5003, fb_tmp_23
    unless $I5003 goto if552_else1645 
    set $P5014, fb_tmp_23[""]
    set $P5016, $P5014
    goto if552_end1646
  if552_else1645:
    null $P5015
    set $P5016, $P5015
  if552_end1646:
    unless_null $P5016, vivi_5531647
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_5531647:
    store_lex "$max", $P5016
    set $P5018, $P5016
  if549_end1641:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_200_1361537946.1303") :anon :lex :outer("cuid_201_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 927
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_20 
    .local pmc fb_tmp_21 
    find_lex $P5001, "%capnames"
.annotate 'line', 928
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_20, $P5003
    repr_defined $I5002, fb_tmp_20
    unless $I5002 goto if545_else1631 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_20[$S5002]
    set $P5007, $P5004
    goto if545_end1632
  if545_else1631:
    null $P5006
    set $P5007, $P5006
  if545_end1632:
    unless_null $P5007, vivi_5461633
    nqp_get_sc_object $P5008, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5008
  vivi_5461633:
    set $N5001, $P5007
    set $N5002, 2
    islt $I5001, $N5001, $N5002
    set $I5005, $I5001
    unless $I5001 goto if544_end1630 
    find_lex $P5009, "%x"
    set fb_tmp_21, $P5009
    repr_defined $I5004, fb_tmp_21
    unless $I5004 goto if547_else1634 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_21[$S5003]
    set $P5013, $P5010
    goto if547_end1635
  if547_else1634:
    null $P5012
    set $P5013, $P5012
  if547_end1635:
    unless_null $P5013, vivi_5481636
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5013, $P5014
  vivi_5481636:
    set $N5003, $P5013
    set $N5004, 1
    iseq $I5003, $N5003, $N5004
    set $I5005, $I5003
  if544_end1630:
    unless $I5005 goto if543_else1627 
    set $I5006, 1
    goto if543_end1628
  if543_else1627:
    set $I5006, 2
  if543_end1628:
    box $P5015, $I5006
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_204_1361537946.1303") :anon :lex :outer("cuid_199_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 934
    .const 'Sub' $P5014 = 'cuid_203_1361537946.1303' 
    capture_lex $P5014 
    .lex "$name", $P101 
    .lex "@names", $P102 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 935
    find_lex $P5003, "$ast"
    $P5004 = $P5003."name"()
    set $P101, $P5004
    set $S5001, $P101
    iseq $I5001, $S5001, ""
    unless $I5001 goto if556_end1656 
.annotate 'line', 936
    find_lex $P5005, "$count"
    set $P101, $P5005
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"($P101)
  if556_end1656:
    set $S5002, $P101
    split $P5008, "=", $S5002
    set $P102, $P5008
    set $P5009, $P102
    iter $P5011, $P102
  for_next1661:
    unless $P5011, for_done1663
    shift $P5013, $P5011
  for_redo1662:
    .const 'Sub' $P5012 = 'cuid_203_1361537946.1303' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1661
  for_done1663:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_203_1361537946.1303") :anon :lex :outer("cuid_204_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 938
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless558_end1660 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless558_end1660:
    unless $I5003 goto if557_end1658 
.annotate 'line', 939
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if557_end1658:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_206_1361537946.1303") :anon :lex :outer("cuid_199_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 943
    .const 'Sub' $P5026 = 'cuid_205_1361537946.1303' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_207_1361537946.1303' 
    capture_lex $P5026 
    .lex "%x", $P101 
    .local pmc fb_tmp_24 
    .local pmc fb_tmp_27 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 944
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"()
    set $S5001, $P5007
    split $P5005, " ", $S5001
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next1670:
    unless $P5004, for_done1672
    shift $P5009, $P5004
  for_redo1671:
    .const 'Sub' $P5008 = 'cuid_205_1361537946.1303' 
    capture_lex $P5008
    $P5002 = $P5008($P5009)
    goto for_next1670
  for_done1672:
.annotate 'line', 948
    find_lex $P5010, "$ast"
    set fb_tmp_24, $P5010
    repr_defined $I5001, fb_tmp_24
    unless $I5001 goto if562_else1673 
    set $P5011, fb_tmp_24[0]
    set $P5013, $P5011
    goto if562_end1674
  if562_else1673:
    null $P5012
    set $P5013, $P5012
  if562_end1674:
    unless_null $P5013, vivi_5631675
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5013, $P5014
  vivi_5631675:
    find_lex $P5015, "$count"
    $P5016 = "&capnames"($P5013, $P5015)
    set $P101, $P5016
    set $P5017, $P101
    iter $P5019, $P101
  for_next1682:
    unless $P5019, for_done1684
    shift $P5021, $P5019
  for_redo1683:
    .const 'Sub' $P5020 = 'cuid_207_1361537946.1303' 
    capture_lex $P5020
    $P5017 = $P5020($P5021)
    goto for_next1682
  for_done1684:
    set fb_tmp_27, $P101
    repr_defined $I5002, fb_tmp_27
    unless $I5002 goto if568_else1685 
    set $P5022, fb_tmp_27[""]
    set $P5024, $P5022
    goto if568_end1686
  if568_else1685:
    null $P5023
    set $P5024, $P5023
  if568_end1686:
    unless_null $P5024, vivi_5691687
    nqp_get_sc_object $P5025, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5024, $P5025
  vivi_5691687:
    store_lex "$count", $P5024
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_205_1361537946.1303") :anon :lex :outer("cuid_206_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 944
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless561_end1669 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless561_end1669:
    unless $I5003 goto if560_end1667 
.annotate 'line', 945
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if560_end1667:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_207_1361537946.1303") :anon :lex :outer("cuid_206_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 949
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_25 
    .local pmc fb_tmp_26 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_25, $P5003
    repr_defined $I5001, fb_tmp_25
    unless $I5001 goto if564_else1676 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_25[$S5002]
    set $P5007, $P5004
    goto if564_end1677
  if564_else1676:
    null $P5006
    set $P5007, $P5006
  if564_end1677:
    unless_null $P5007, vivi_5651678
    nqp_get_sc_object $P5008, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5008
  vivi_5651678:
    set $N5002, $P5007
    find_lex $P5009, "%x"
    set fb_tmp_26, $P5009
    repr_defined $I5002, fb_tmp_26
    unless $I5002 goto if566_else1679 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_26[$S5003]
    set $P5013, $P5010
    goto if566_end1680
  if566_else1679:
    null $P5012
    set $P5013, $P5012
  if566_end1680:
    unless_null $P5013, vivi_5671681
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5013, $P5014
  vivi_5671681:
    set $N5003, $P5013
    add $N5001, $N5002, $N5003
    box $P5015, $N5001
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_209_1361537946.1303") :anon :lex :outer("cuid_199_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 952
    .const 'Sub' $P5018 = 'cuid_208_1361537946.1303' 
    capture_lex $P5018 
    .lex "%astcap", $P101 
    .local pmc fb_tmp_28 
    .local pmc fb_tmp_29 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 953
    find_lex $P5002, "$ast"
    set fb_tmp_28, $P5002
    repr_defined $I5001, fb_tmp_28
    unless $I5001 goto if571_else1690 
    set $P5003, fb_tmp_28[0]
    set $P5005, $P5003
    goto if571_end1691
  if571_else1690:
    null $P5004
    set $P5005, $P5004
  if571_end1691:
    unless_null $P5005, vivi_5721692
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_5721692:
    find_lex $P5007, "$count"
    $P5008 = "&capnames"($P5005, $P5007)
    set $P101, $P5008
    set $P5009, $P101
    iter $P5011, $P101
  for_next1693:
    unless $P5011, for_done1695
    shift $P5013, $P5011
  for_redo1694:
    .const 'Sub' $P5012 = 'cuid_208_1361537946.1303' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1693
  for_done1695:
    set fb_tmp_29, $P101
    repr_defined $I5002, fb_tmp_29
    unless $I5002 goto if573_else1696 
    set $P5014, fb_tmp_29[""]
    set $P5016, $P5014
    goto if573_end1697
  if573_else1696:
    null $P5015
    set $P5016, $P5015
  if573_end1697:
    unless_null $P5016, vivi_5741698
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_5741698:
    store_lex "$count", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_208_1361537946.1303") :anon :lex :outer("cuid_209_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 954
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    set $S5001, _lex_param_0
    box $P5002, 2
    set $P5001[$S5001], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_113_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 324
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_30 
    .local pmc pkg_lookup_tmp_12 
    .local pmc fb_tmp_31 
    .local pmc fb_tmp_32 
    .local pmc fb_tmp_33 
    .local pmc fb_tmp_34 
    .local pmc fb_tmp_35 
.annotate 'line', 325
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_12, $P5002
    get_who $P5003, pkg_lookup_tmp_12
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if576_else1701 
    get_who $P5005, pkg_lookup_tmp_12
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if576_end1702
  if576_else1701:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if576_end1702:
    get_who $P5001, $P5007
    set fb_tmp_30, $P5001
    repr_defined $I5001, fb_tmp_30
    unless $I5001 goto if575_else1699 
    set $P5008, fb_tmp_30["CompUnit"]
    set $P5010, $P5008
    goto if575_end1700
  if575_else1699:
    null $P5009
    set $P5010, $P5009
  if575_end1700:
    unless_null $P5010, vivi_5771703
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_5771703:
.annotate 'line', 327
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback1704
    nqp_get_sc_object $P5014, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5013, $P5014
    set fb_tmp_31, $P5013
    repr_defined $I5003, fb_tmp_31
    unless $I5003 goto if578_else1705 
    set $P5015, fb_tmp_31["$W"]
    set $P5017, $P5015
    goto if578_end1706
  if578_else1705:
    null $P5016
    set $P5017, $P5016
  if578_end1706:
    unless_null $P5017, vivi_5791707
    nqp_get_sc_object $P5018, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5017, $P5018
  vivi_5791707:
    unless_null $P5017, vivi_5801708
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5017, $P5019
  vivi_5801708:
    set $P5012, $P5017
  fallback1704:
    $P5020 = $P5012."sc"()
.annotate 'line', 328
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback1709
    nqp_get_sc_object $P5023, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5022, $P5023
    set fb_tmp_32, $P5022
    repr_defined $I5004, fb_tmp_32
    unless $I5004 goto if581_else1710 
    set $P5024, fb_tmp_32["$W"]
    set $P5026, $P5024
    goto if581_end1711
  if581_else1710:
    null $P5025
    set $P5026, $P5025
  if581_end1711:
    unless_null $P5026, vivi_5821712
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5027
  vivi_5821712:
    unless_null $P5026, vivi_5831713
    die "Contextual $*W not found"
    box $P5028, "Contextual $*W not found"
    set $P5026, $P5028
  vivi_5831713:
    set $P5021, $P5026
  fallback1709:
    $P5029 = $P5021."code_ref_blocks"()
.annotate 'line', 330
    find_dynamic_lex $P5030, "$*W"
    unless_null $P5030, fallback1714
    nqp_get_sc_object $P5032, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5031, $P5032
    set fb_tmp_33, $P5031
    repr_defined $I5005, fb_tmp_33
    unless $I5005 goto if584_else1715 
    set $P5033, fb_tmp_33["$W"]
    set $P5035, $P5033
    goto if584_end1716
  if584_else1715:
    null $P5034
    set $P5035, $P5034
  if584_end1716:
    unless_null $P5035, vivi_5851717
    nqp_get_sc_object $P5036, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5035, $P5036
  vivi_5851717:
    unless_null $P5035, vivi_5861718
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5035, $P5037
  vivi_5861718:
    set $P5030, $P5035
  fallback1714:
    $P5038 = $P5030."load_dependency_tasks"()
.annotate 'line', 331
    find_dynamic_lex $P5039, "$*W"
    unless_null $P5039, fallback1719
    nqp_get_sc_object $P5041, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5040, $P5041
    set fb_tmp_34, $P5040
    repr_defined $I5006, fb_tmp_34
    unless $I5006 goto if587_else1720 
    set $P5042, fb_tmp_34["$W"]
    set $P5044, $P5042
    goto if587_end1721
  if587_else1720:
    null $P5043
    set $P5044, $P5043
  if587_end1721:
    unless_null $P5044, vivi_5881722
    nqp_get_sc_object $P5045, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5044, $P5045
  vivi_5881722:
    unless_null $P5044, vivi_5891723
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5044, $P5046
  vivi_5891723:
    set $P5039, $P5044
  fallback1719:
    $P5047 = $P5039."fixup_tasks"()
.annotate 'line', 332
    nqp_decontainerize $P5048, _lex_param_0
    unless_null _lex_param_1, fallback1726
    nqp_get_sc_object $P5049, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5049
  fallback1726:
    set fb_tmp_35, _lex_param_1
    repr_defined $I5007, fb_tmp_35
    unless $I5007 goto if590_else1724 
    set $P5050, fb_tmp_35["nibbler"]
    set $P5052, $P5050
    goto if590_end1725
  if590_else1724:
    null $P5051
    set $P5052, $P5051
  if590_end1725:
    unless_null $P5052, vivi_5911727
    nqp_get_sc_object $P5053, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5052, $P5053
  vivi_5911727:
    $P5054 = $P5052."ast"()
    $P5055 = $P5048."qbuildsub"($P5054, 1 :named("anon"), 1 :named("addself"))
    $P5056 = $P5010."new"($P5055, "P6Regex" :named("hll"), $P5020 :named("sc"), $P5029 :named("code_ref_blocks"), 0 :named("compilation_mode"), $P5038 :named("pre_deserialize"), $P5047 :named("post_deserialize"))
    $P5057 = _lex_param_1."!make"($P5056)
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_114_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 336
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_36 
    unless_null _lex_param_1, fallback1730
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5001
  fallback1730:
    set fb_tmp_36, _lex_param_1
    repr_defined $I5001, fb_tmp_36
    unless $I5001 goto if592_else1728 
    set $P5002, fb_tmp_36["termaltseq"]
    set $P5004, $P5002
    goto if592_end1729
  if592_else1728:
    null $P5003
    set $P5004, $P5003
  if592_end1729:
    unless_null $P5004, vivi_5931731
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_5931731:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_115_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 338
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_210_1361537946.1303' 
    capture_lex $P5040 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_37 
    .local pmc fb_tmp_38 
    .local pmc fb_tmp_39 
    .local pmc fb_tmp_40 
    .local pmc pkg_lookup_tmp_13 
    .local pmc fb_tmp_41 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 339
    unless_null _lex_param_1, fallback1736
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5002
  fallback1736:
    set fb_tmp_38, _lex_param_1
    repr_defined $I5002, fb_tmp_38
    unless $I5002 goto if595_else1734 
    set $P5003, fb_tmp_38["termconjseq"]
    set $P5005, $P5003
    goto if595_end1735
  if595_else1734:
    null $P5004
    set $P5005, $P5004
  if595_end1735:
    unless_null $P5005, vivi_5961737
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_5961737:
    set fb_tmp_37, $P5005
    repr_defined $I5001, fb_tmp_37
    unless $I5001 goto if594_else1732 
    set $P5007, fb_tmp_37[0]
    set $P5009, $P5007
    goto if594_end1733
  if594_else1732:
    null $P5008
    set $P5009, $P5008
  if594_end1733:
    unless_null $P5009, vivi_5971738
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_5971738:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1743
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5012
  fallback1743:
    set fb_tmp_39, _lex_param_1
    repr_defined $I5004, fb_tmp_39
    unless $I5004 goto if599_else1741 
    set $P5013, fb_tmp_39["termconjseq"]
    set $P5015, $P5013
    goto if599_end1742
  if599_else1741:
    null $P5014
    set $P5015, $P5014
  if599_end1742:
    unless_null $P5015, vivi_6001744
    nqp_get_sc_object $P5016, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5016
  vivi_6001744:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if598_end1740 
.annotate 'line', 340
.annotate 'line', 341
    nqp_get_sc_object $P5018, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_13, $P5018
    get_who $P5019, pkg_lookup_tmp_13
    exists $I5006, $P5019["QAST"]
    unless $I5006 goto if602_else1747 
    get_who $P5021, pkg_lookup_tmp_13
    set $P5020, $P5021["QAST"]
    set $P5023, $P5020
    goto if602_end1748
  if602_else1747:
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5023, $P5022
  if602_end1748:
    get_who $P5017, $P5023
    set fb_tmp_40, $P5017
    repr_defined $I5005, fb_tmp_40
    unless $I5005 goto if601_else1745 
    set $P5024, fb_tmp_40["Regex"]
    set $P5026, $P5024
    goto if601_end1746
  if601_else1745:
    null $P5025
    set $P5026, $P5025
  if601_end1746:
    unless_null $P5026, vivi_6031749
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5027
  vivi_6031749:
    $P5028 = $P5026."new"("altseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5028
    unless_null _lex_param_1, fallback1752
    nqp_get_sc_object $P5032, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5032
  fallback1752:
    set fb_tmp_41, _lex_param_1
    repr_defined $I5007, fb_tmp_41
    unless $I5007 goto if604_else1750 
    set $P5033, fb_tmp_41["termconjseq"]
    set $P5035, $P5033
    goto if604_end1751
  if604_else1750:
    null $P5034
    set $P5035, $P5034
  if604_end1751:
    unless_null $P5035, vivi_6051753
    nqp_get_sc_object $P5036, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5035, $P5036
  vivi_6051753:
    set $P5029, $P5035
    iter $P5031, $P5035
  for_next1754:
    unless $P5031, for_done1756
    shift $P5038, $P5031
  for_redo1755:
    .const 'Sub' $P5037 = 'cuid_210_1361537946.1303' 
    capture_lex $P5037
    $P5029 = $P5037($P5038)
    goto for_next1754
  for_done1756:
  if598_end1740:
.annotate 'line', 344
    $P5039 = _lex_param_1."!make"($P101)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_210_1361537946.1303") :anon :lex :outer("cuid_115_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 342
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_116_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 347
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_211_1361537946.1303' 
    capture_lex $P5040 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_42 
    .local pmc fb_tmp_43 
    .local pmc fb_tmp_44 
    .local pmc fb_tmp_45 
    .local pmc pkg_lookup_tmp_14 
    .local pmc fb_tmp_46 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 348
    unless_null _lex_param_1, fallback1761
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5002
  fallback1761:
    set fb_tmp_43, _lex_param_1
    repr_defined $I5002, fb_tmp_43
    unless $I5002 goto if607_else1759 
    set $P5003, fb_tmp_43["termalt"]
    set $P5005, $P5003
    goto if607_end1760
  if607_else1759:
    null $P5004
    set $P5005, $P5004
  if607_end1760:
    unless_null $P5005, vivi_6081762
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_6081762:
    set fb_tmp_42, $P5005
    repr_defined $I5001, fb_tmp_42
    unless $I5001 goto if606_else1757 
    set $P5007, fb_tmp_42[0]
    set $P5009, $P5007
    goto if606_end1758
  if606_else1757:
    null $P5008
    set $P5009, $P5008
  if606_end1758:
    unless_null $P5009, vivi_6091763
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_6091763:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1768
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5012
  fallback1768:
    set fb_tmp_44, _lex_param_1
    repr_defined $I5004, fb_tmp_44
    unless $I5004 goto if611_else1766 
    set $P5013, fb_tmp_44["termalt"]
    set $P5015, $P5013
    goto if611_end1767
  if611_else1766:
    null $P5014
    set $P5015, $P5014
  if611_end1767:
    unless_null $P5015, vivi_6121769
    nqp_get_sc_object $P5016, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5016
  vivi_6121769:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if610_end1765 
.annotate 'line', 349
.annotate 'line', 350
    nqp_get_sc_object $P5018, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_14, $P5018
    get_who $P5019, pkg_lookup_tmp_14
    exists $I5006, $P5019["QAST"]
    unless $I5006 goto if614_else1772 
    get_who $P5021, pkg_lookup_tmp_14
    set $P5020, $P5021["QAST"]
    set $P5023, $P5020
    goto if614_end1773
  if614_else1772:
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5023, $P5022
  if614_end1773:
    get_who $P5017, $P5023
    set fb_tmp_45, $P5017
    repr_defined $I5005, fb_tmp_45
    unless $I5005 goto if613_else1770 
    set $P5024, fb_tmp_45["Regex"]
    set $P5026, $P5024
    goto if613_end1771
  if613_else1770:
    null $P5025
    set $P5026, $P5025
  if613_end1771:
    unless_null $P5026, vivi_6151774
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5027
  vivi_6151774:
    $P5028 = $P5026."new"("conjseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5028
    unless_null _lex_param_1, fallback1777
    nqp_get_sc_object $P5032, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5032
  fallback1777:
    set fb_tmp_46, _lex_param_1
    repr_defined $I5007, fb_tmp_46
    unless $I5007 goto if616_else1775 
    set $P5033, fb_tmp_46["termalt"]
    set $P5035, $P5033
    goto if616_end1776
  if616_else1775:
    null $P5034
    set $P5035, $P5034
  if616_end1776:
    unless_null $P5035, vivi_6171778
    nqp_get_sc_object $P5036, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5035, $P5036
  vivi_6171778:
    set $P5029, $P5035
    iter $P5031, $P5035
  for_next1779:
    unless $P5031, for_done1781
    shift $P5038, $P5031
  for_redo1780:
    .const 'Sub' $P5037 = 'cuid_211_1361537946.1303' 
    capture_lex $P5037
    $P5029 = $P5037($P5038)
    goto for_next1779
  for_done1781:
  if610_end1765:
.annotate 'line', 353
    $P5039 = _lex_param_1."!make"($P101)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_211_1361537946.1303") :anon :lex :outer("cuid_116_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 351
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_117_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 356
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_212_1361537946.1303' 
    capture_lex $P5040 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_47 
    .local pmc fb_tmp_48 
    .local pmc fb_tmp_49 
    .local pmc fb_tmp_50 
    .local pmc pkg_lookup_tmp_15 
    .local pmc fb_tmp_51 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 357
    unless_null _lex_param_1, fallback1786
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5002
  fallback1786:
    set fb_tmp_48, _lex_param_1
    repr_defined $I5002, fb_tmp_48
    unless $I5002 goto if619_else1784 
    set $P5003, fb_tmp_48["termconj"]
    set $P5005, $P5003
    goto if619_end1785
  if619_else1784:
    null $P5004
    set $P5005, $P5004
  if619_end1785:
    unless_null $P5005, vivi_6201787
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_6201787:
    set fb_tmp_47, $P5005
    repr_defined $I5001, fb_tmp_47
    unless $I5001 goto if618_else1782 
    set $P5007, fb_tmp_47[0]
    set $P5009, $P5007
    goto if618_end1783
  if618_else1782:
    null $P5008
    set $P5009, $P5008
  if618_end1783:
    unless_null $P5009, vivi_6211788
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_6211788:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1793
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5012
  fallback1793:
    set fb_tmp_49, _lex_param_1
    repr_defined $I5004, fb_tmp_49
    unless $I5004 goto if623_else1791 
    set $P5013, fb_tmp_49["termconj"]
    set $P5015, $P5013
    goto if623_end1792
  if623_else1791:
    null $P5014
    set $P5015, $P5014
  if623_end1792:
    unless_null $P5015, vivi_6241794
    nqp_get_sc_object $P5016, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5016
  vivi_6241794:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if622_end1790 
.annotate 'line', 358
.annotate 'line', 359
    nqp_get_sc_object $P5018, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_15, $P5018
    get_who $P5019, pkg_lookup_tmp_15
    exists $I5006, $P5019["QAST"]
    unless $I5006 goto if626_else1797 
    get_who $P5021, pkg_lookup_tmp_15
    set $P5020, $P5021["QAST"]
    set $P5023, $P5020
    goto if626_end1798
  if626_else1797:
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5023, $P5022
  if626_end1798:
    get_who $P5017, $P5023
    set fb_tmp_50, $P5017
    repr_defined $I5005, fb_tmp_50
    unless $I5005 goto if625_else1795 
    set $P5024, fb_tmp_50["Regex"]
    set $P5026, $P5024
    goto if625_end1796
  if625_else1795:
    null $P5025
    set $P5026, $P5025
  if625_end1796:
    unless_null $P5026, vivi_6271799
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5027
  vivi_6271799:
    $P5028 = $P5026."new"("alt" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5028
    unless_null _lex_param_1, fallback1802
    nqp_get_sc_object $P5032, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5032
  fallback1802:
    set fb_tmp_51, _lex_param_1
    repr_defined $I5007, fb_tmp_51
    unless $I5007 goto if628_else1800 
    set $P5033, fb_tmp_51["termconj"]
    set $P5035, $P5033
    goto if628_end1801
  if628_else1800:
    null $P5034
    set $P5035, $P5034
  if628_end1801:
    unless_null $P5035, vivi_6291803
    nqp_get_sc_object $P5036, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5035, $P5036
  vivi_6291803:
    set $P5029, $P5035
    iter $P5031, $P5035
  for_next1804:
    unless $P5031, for_done1806
    shift $P5038, $P5031
  for_redo1805:
    .const 'Sub' $P5037 = 'cuid_212_1361537946.1303' 
    capture_lex $P5037
    $P5029 = $P5037($P5038)
    goto for_next1804
  for_done1806:
  if622_end1790:
.annotate 'line', 362
    $P5039 = _lex_param_1."!make"($P101)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_212_1361537946.1303") :anon :lex :outer("cuid_117_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 360
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_118_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 365
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_213_1361537946.1303' 
    capture_lex $P5040 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_52 
    .local pmc fb_tmp_53 
    .local pmc fb_tmp_54 
    .local pmc fb_tmp_55 
    .local pmc pkg_lookup_tmp_16 
    .local pmc fb_tmp_56 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 366
    unless_null _lex_param_1, fallback1811
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5002
  fallback1811:
    set fb_tmp_53, _lex_param_1
    repr_defined $I5002, fb_tmp_53
    unless $I5002 goto if631_else1809 
    set $P5003, fb_tmp_53["termish"]
    set $P5005, $P5003
    goto if631_end1810
  if631_else1809:
    null $P5004
    set $P5005, $P5004
  if631_end1810:
    unless_null $P5005, vivi_6321812
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_6321812:
    set fb_tmp_52, $P5005
    repr_defined $I5001, fb_tmp_52
    unless $I5001 goto if630_else1807 
    set $P5007, fb_tmp_52[0]
    set $P5009, $P5007
    goto if630_end1808
  if630_else1807:
    null $P5008
    set $P5009, $P5008
  if630_end1808:
    unless_null $P5009, vivi_6331813
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_6331813:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1818
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5012
  fallback1818:
    set fb_tmp_54, _lex_param_1
    repr_defined $I5004, fb_tmp_54
    unless $I5004 goto if635_else1816 
    set $P5013, fb_tmp_54["termish"]
    set $P5015, $P5013
    goto if635_end1817
  if635_else1816:
    null $P5014
    set $P5015, $P5014
  if635_end1817:
    unless_null $P5015, vivi_6361819
    nqp_get_sc_object $P5016, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5016
  vivi_6361819:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if634_end1815 
.annotate 'line', 367
.annotate 'line', 368
    nqp_get_sc_object $P5018, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_16, $P5018
    get_who $P5019, pkg_lookup_tmp_16
    exists $I5006, $P5019["QAST"]
    unless $I5006 goto if638_else1822 
    get_who $P5021, pkg_lookup_tmp_16
    set $P5020, $P5021["QAST"]
    set $P5023, $P5020
    goto if638_end1823
  if638_else1822:
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5023, $P5022
  if638_end1823:
    get_who $P5017, $P5023
    set fb_tmp_55, $P5017
    repr_defined $I5005, fb_tmp_55
    unless $I5005 goto if637_else1820 
    set $P5024, fb_tmp_55["Regex"]
    set $P5026, $P5024
    goto if637_end1821
  if637_else1820:
    null $P5025
    set $P5026, $P5025
  if637_end1821:
    unless_null $P5026, vivi_6391824
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5027
  vivi_6391824:
    $P5028 = $P5026."new"("conj" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5028
    unless_null _lex_param_1, fallback1827
    nqp_get_sc_object $P5032, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5032
  fallback1827:
    set fb_tmp_56, _lex_param_1
    repr_defined $I5007, fb_tmp_56
    unless $I5007 goto if640_else1825 
    set $P5033, fb_tmp_56["termish"]
    set $P5035, $P5033
    goto if640_end1826
  if640_else1825:
    null $P5034
    set $P5035, $P5034
  if640_end1826:
    unless_null $P5035, vivi_6411828
    nqp_get_sc_object $P5036, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5035, $P5036
  vivi_6411828:
    set $P5029, $P5035
    iter $P5031, $P5035
  for_next1829:
    unless $P5031, for_done1831
    shift $P5038, $P5031
  for_redo1830:
    .const 'Sub' $P5037 = 'cuid_213_1361537946.1303' 
    capture_lex $P5037
    $P5029 = $P5037($P5038)
    goto for_next1829
  for_done1831:
  if634_end1815:
.annotate 'line', 371
    $P5039 = _lex_param_1."!make"($P101)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_213_1361537946.1303") :anon :lex :outer("cuid_118_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 369
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_119_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 374
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5027 = 'cuid_214_1361537946.1303' 
    capture_lex $P5027 
    .lex "$qast", $P101 
    .lex "$lastlit", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_57 
    .local pmc pkg_lookup_tmp_17 
    .local pmc fb_tmp_58 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
.annotate 'line', 375
    nqp_get_sc_object $P5004, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_17, $P5004
    get_who $P5005, pkg_lookup_tmp_17
    exists $I5002, $P5005["QAST"]
    unless $I5002 goto if643_else1834 
    get_who $P5007, pkg_lookup_tmp_17
    set $P5006, $P5007["QAST"]
    set $P5009, $P5006
    goto if643_end1835
  if643_else1834:
    nqp_get_sc_object $P5008, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5008
  if643_end1835:
    get_who $P5003, $P5009
    set fb_tmp_57, $P5003
    repr_defined $I5001, fb_tmp_57
    unless $I5001 goto if642_else1832 
    set $P5010, fb_tmp_57["Regex"]
    set $P5012, $P5010
    goto if642_end1833
  if642_else1832:
    null $P5011
    set $P5012, $P5011
  if642_end1833:
    unless_null $P5012, vivi_6441836
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5012, $P5013
  vivi_6441836:
    $P5014 = $P5012."new"("concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5014
    box $P5015, 0
    set $P102, $P5015
    unless_null _lex_param_1, fallback1839
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5019
  fallback1839:
    set fb_tmp_58, _lex_param_1
    repr_defined $I5003, fb_tmp_58
    unless $I5003 goto if645_else1837 
    set $P5020, fb_tmp_58["noun"]
    set $P5022, $P5020
    goto if645_end1838
  if645_else1837:
    null $P5021
    set $P5022, $P5021
  if645_end1838:
    unless_null $P5022, vivi_6461840
    nqp_get_sc_object $P5023, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5022, $P5023
  vivi_6461840:
    set $P5016, $P5022
    iter $P5018, $P5022
  for_next1875:
    unless $P5018, for_done1877
    shift $P5025, $P5018
  for_redo1876:
    .const 'Sub' $P5024 = 'cuid_214_1361537946.1303' 
    capture_lex $P5024
    $P5016 = $P5024($P5025)
    goto for_next1875
  for_done1877:
.annotate 'line', 392
    $P5026 = _lex_param_1."!make"($P101)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_214_1361537946.1303") :anon :lex :outer("cuid_119_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 377
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_59 
    .local pmc pkg_lookup_tmp_18 
    .local pmc fb_tmp_60 
    .local pmc fb_tmp_61 
    .local pmc fb_tmp_62 
    .local pmc fb_tmp_63 
    .local pmc pkg_lookup_tmp_19 
    .local pmc fb_tmp_64 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 378
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5058, $P101
    unless $P101 goto if647_end1842 
.annotate 'line', 379
    find_lex $P5003, "$lastlit"
    set $P5005, $P5003
    unless $P5003 goto if650_end1848 
.annotate 'line', 380
    $P5004 = $P101."rxtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "literal"
    box $P5006, $I5001
    set $P5005, $P5006
  if650_end1848:
    set $P5023, $P5005
    unless $P5005 goto if649_end1846 
.annotate 'line', 381
    nqp_get_sc_object $P5008, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_18, $P5008
    get_who $P5009, pkg_lookup_tmp_18
    exists $I5004, $P5009["QAST"]
    unless $I5004 goto if652_else1851 
    get_who $P5011, pkg_lookup_tmp_18
    set $P5010, $P5011["QAST"]
    set $P5013, $P5010
    goto if652_end1852
  if652_else1851:
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5013, $P5012
  if652_end1852:
    get_who $P5007, $P5013
    set fb_tmp_59, $P5007
    repr_defined $I5003, fb_tmp_59
    unless $I5003 goto if651_else1849 
    set $P5014, fb_tmp_59["Node"]
    set $P5016, $P5014
    goto if651_end1850
  if651_else1849:
    null $P5015
    set $P5016, $P5015
  if651_end1850:
    unless_null $P5016, vivi_6531853
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_6531853:
    set fb_tmp_60, $P101
    repr_defined $I5005, fb_tmp_60
    unless $I5005 goto if654_else1854 
    set $P5018, fb_tmp_60[0]
    set $P5020, $P5018
    goto if654_end1855
  if654_else1854:
    null $P5019
    set $P5020, $P5019
  if654_end1855:
    unless_null $P5020, vivi_6551856
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5021
  vivi_6551856:
    $P5022 = $P5016."ACCEPTS"($P5020)
    isfalse $I5002, $P5022
    box $P5024, $I5002
    set $P5023, $P5024
  if649_end1846:
    unless $P5023 goto if648_else1843 
    find_lex $P5025, "$lastlit"
    find_lex $P5026, "$lastlit"
    set fb_tmp_61, $P5026
    repr_defined $I5006, fb_tmp_61
    unless $I5006 goto if656_else1857 
    set $P5027, fb_tmp_61[0]
    set $P5029, $P5027
    goto if656_end1858
  if656_else1857:
    null $P5028
    set $P5029, $P5028
  if656_end1858:
    unless_null $P5029, vivi_6571859
    nqp_get_sc_object $P5030, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5029, $P5030
  vivi_6571859:
    set $S5003, $P5029
    set fb_tmp_62, $P101
    repr_defined $I5007, fb_tmp_62
    unless $I5007 goto if658_else1860 
    set $P5031, fb_tmp_62[0]
    set $P5033, $P5031
    goto if658_end1861
  if658_else1860:
    null $P5032
    set $P5033, $P5032
  if658_end1861:
    unless_null $P5033, vivi_6591862
    nqp_get_sc_object $P5034, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5033, $P5034
  vivi_6591862:
    set $S5004, $P5033
    concat $S5002, $S5003, $S5004
    box $P5035, $S5002
    set $P5025[0], $P5035
    set $P5057, $P5035
    goto if648_end1844
  if648_else1843:
.annotate 'line', 384
.annotate 'line', 385
    find_lex $P5036, "$qast"
    $P5037 = _lex_param_0."ast"()
    $P5036."push"($P5037)
.annotate 'line', 386
    $P5038 = $P101."rxtype"()
    set $S5005, $P5038
    iseq $I5008, $S5005, "literal"
    set $I5013, $I5008
    unless $I5008 goto if661_end1866 
.annotate 'line', 387
    nqp_get_sc_object $P5040, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_19, $P5040
    get_who $P5041, pkg_lookup_tmp_19
    exists $I5011, $P5041["QAST"]
    unless $I5011 goto if663_else1869 
    get_who $P5043, pkg_lookup_tmp_19
    set $P5042, $P5043["QAST"]
    set $P5045, $P5042
    goto if663_end1870
  if663_else1869:
    nqp_get_sc_object $P5044, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5045, $P5044
  if663_end1870:
    get_who $P5039, $P5045
    set fb_tmp_63, $P5039
    repr_defined $I5010, fb_tmp_63
    unless $I5010 goto if662_else1867 
    set $P5046, fb_tmp_63["Node"]
    set $P5048, $P5046
    goto if662_end1868
  if662_else1867:
    null $P5047
    set $P5048, $P5047
  if662_end1868:
    unless_null $P5048, vivi_6641871
    nqp_get_sc_object $P5049, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5048, $P5049
  vivi_6641871:
    set fb_tmp_64, $P101
    repr_defined $I5012, fb_tmp_64
    unless $I5012 goto if665_else1872 
    set $P5050, fb_tmp_64[0]
    set $P5052, $P5050
    goto if665_end1873
  if665_else1872:
    null $P5051
    set $P5052, $P5051
  if665_end1873:
    unless_null $P5052, vivi_6661874
    nqp_get_sc_object $P5053, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5052, $P5053
  vivi_6661874:
    $P5054 = $P5048."ACCEPTS"($P5052)
    isfalse $I5009, $P5054
    set $I5013, $I5009
  if661_end1866:
    unless $I5013 goto if660_else1863 
    set $P5055, $P101
    goto if660_end1864
  if660_else1863:
    box $P5056, 0
    set $P5055, $P5056
  if660_end1864:
    store_lex "$lastlit", $P5055
    set $P5057, $P5055
  if648_end1844:
    set $P5058, $P5057
  if647_end1842:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_120_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 395
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5130 = 'cuid_215_1361537946.1303' 
    capture_lex $P5130 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_65 
    .local pmc fb_tmp_66 
    .local pmc fb_tmp_69 
    .local pmc fb_tmp_70 
    .local pmc fb_tmp_71 
    .local pmc fb_tmp_72 
    .local pmc fb_tmp_73 
    .local pmc fb_tmp_74 
    .local pmc fb_tmp_75 
    .local pmc fb_tmp_76 
    .local pmc fb_tmp_77 
    .local pmc fb_tmp_78 
    .local pmc pkg_lookup_tmp_20 
    .local pmc fb_tmp_79 
    .local pmc pkg_lookup_tmp_21 
    .local pmc fb_tmp_80 
    .local pmc fb_tmp_81 
    .local pmc fb_tmp_82 
    .local pmc fb_tmp_83 
    .local pmc pkg_viv_tmp_4 
    .local pmc fb_tmp_84 
    .local pmc fb_tmp_85 
    .local pmc fb_tmp_86 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 396
    unless_null _lex_param_1, fallback1880
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5002
  fallback1880:
    set fb_tmp_65, _lex_param_1
    repr_defined $I5001, fb_tmp_65
    unless $I5001 goto if667_else1878 
    set $P5003, fb_tmp_65["atom"]
    set $P5005, $P5003
    goto if667_end1879
  if667_else1878:
    null $P5004
    set $P5005, $P5004
  if667_end1879:
    unless_null $P5005, vivi_6681881
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_6681881:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1886
    nqp_get_sc_object $P5008, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5008
  fallback1886:
    set fb_tmp_66, _lex_param_1
    repr_defined $I5002, fb_tmp_66
    unless $I5002 goto if670_else1884 
    set $P5009, fb_tmp_66["quantifier"]
    set $P5011, $P5009
    goto if670_end1885
  if670_else1884:
    null $P5010
    set $P5011, $P5010
  if670_end1885:
    unless_null $P5011, vivi_6711887
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_6711887:
    unless $P5011 goto if669_end1883 
    .const 'Sub' $P5013 = 'cuid_215_1361537946.1303' 
    capture_lex $P5013
    $P5014 = $P5013()
  if669_end1883:
    unless_null _lex_param_1, fallback1899
    nqp_get_sc_object $P5015, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5015
  fallback1899:
    set fb_tmp_69, _lex_param_1
    repr_defined $I5003, fb_tmp_69
    unless $I5003 goto if677_else1897 
    set $P5016, fb_tmp_69["separator"]
    set $P5018, $P5016
    goto if677_end1898
  if677_else1897:
    null $P5017
    set $P5018, $P5017
  if677_end1898:
    unless_null $P5018, vivi_6781900
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5019
  vivi_6781900:
    unless $P5018 goto if676_end1896 
.annotate 'line', 402
.annotate 'line', 403
    $P5020 = $P101."rxtype"()
    set $S5001, $P5020
    iseq $I5004, $S5001, "quant"
    if $I5004 goto unless679_end1902 
.annotate 'line', 404
    $P5021 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback1909
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5022
  fallback1909:
    set fb_tmp_72, _lex_param_1
    repr_defined $I5007, fb_tmp_72
    unless $I5007 goto if682_else1907 
    set $P5023, fb_tmp_72["separator"]
    set $P5025, $P5023
    goto if682_end1908
  if682_else1907:
    null $P5024
    set $P5025, $P5024
  if682_end1908:
    unless_null $P5025, vivi_6831910
    nqp_get_sc_object $P5026, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5025, $P5026
  vivi_6831910:
    set fb_tmp_71, $P5025
    repr_defined $I5006, fb_tmp_71
    unless $I5006 goto if681_else1905 
    set $P5027, fb_tmp_71[0]
    set $P5029, $P5027
    goto if681_end1906
  if681_else1905:
    null $P5028
    set $P5029, $P5028
  if681_end1906:
    unless_null $P5029, vivi_6841911
    nqp_get_sc_object $P5030, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5029, $P5030
  vivi_6841911:
    set fb_tmp_70, $P5029
    repr_defined $I5005, fb_tmp_70
    unless $I5005 goto if680_else1903 
    set $P5031, fb_tmp_70["septype"]
    set $P5033, $P5031
    goto if680_end1904
  if680_else1903:
    null $P5032
    set $P5033, $P5032
  if680_end1904:
    unless_null $P5033, vivi_6851912
    nqp_get_sc_object $P5034, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5033, $P5034
  vivi_6851912:
    set $S5004, $P5033
    concat $S5003, "'", $S5004
    concat $S5002, $S5003, "' many only be used immediately following a quantifier"
    $P5035 = $P5021."panic"($S5002)
  unless679_end1902:
.annotate 'line', 407
    unless_null _lex_param_1, fallback1917
    nqp_get_sc_object $P5036, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5036
  fallback1917:
    set fb_tmp_74, _lex_param_1
    repr_defined $I5009, fb_tmp_74
    unless $I5009 goto if687_else1915 
    set $P5037, fb_tmp_74["separator"]
    set $P5039, $P5037
    goto if687_end1916
  if687_else1915:
    null $P5038
    set $P5039, $P5038
  if687_end1916:
    unless_null $P5039, vivi_6881918
    nqp_get_sc_object $P5040, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5039, $P5040
  vivi_6881918:
    set fb_tmp_73, $P5039
    repr_defined $I5008, fb_tmp_73
    unless $I5008 goto if686_else1913 
    set $P5041, fb_tmp_73[0]
    set $P5043, $P5041
    goto if686_end1914
  if686_else1913:
    null $P5042
    set $P5043, $P5042
  if686_end1914:
    unless_null $P5043, vivi_6891919
    nqp_get_sc_object $P5044, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5043, $P5044
  vivi_6891919:
    $P5045 = $P5043."ast"()
    $P101."push"($P5045)
    unless_null _lex_param_1, fallback1928
    nqp_get_sc_object $P5046, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5046
  fallback1928:
    set fb_tmp_77, _lex_param_1
    repr_defined $I5013, fb_tmp_77
    unless $I5013 goto if693_else1926 
    set $P5047, fb_tmp_77["separator"]
    set $P5049, $P5047
    goto if693_end1927
  if693_else1926:
    null $P5048
    set $P5049, $P5048
  if693_end1927:
    unless_null $P5049, vivi_6941929
    nqp_get_sc_object $P5050, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5049, $P5050
  vivi_6941929:
    set fb_tmp_76, $P5049
    repr_defined $I5012, fb_tmp_76
    unless $I5012 goto if692_else1924 
    set $P5051, fb_tmp_76[0]
    set $P5053, $P5051
    goto if692_end1925
  if692_else1924:
    null $P5052
    set $P5053, $P5052
  if692_end1925:
    unless_null $P5053, vivi_6951930
    nqp_get_sc_object $P5054, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5053, $P5054
  vivi_6951930:
    set fb_tmp_75, $P5053
    repr_defined $I5011, fb_tmp_75
    unless $I5011 goto if691_else1922 
    set $P5055, fb_tmp_75["septype"]
    set $P5057, $P5055
    goto if691_end1923
  if691_else1922:
    null $P5056
    set $P5057, $P5056
  if691_end1923:
    unless_null $P5057, vivi_6961931
    nqp_get_sc_object $P5058, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5057, $P5058
  vivi_6961931:
    set $S5005, $P5057
    iseq $I5010, $S5005, "%%"
    box $P5094, $I5010
    set $P5093, $P5094
    unless $I5010 goto if690_end1921 
.annotate 'line', 408
.annotate 'line', 409
    nqp_get_sc_object $P5060, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_20, $P5060
    get_who $P5061, pkg_lookup_tmp_20
    exists $I5015, $P5061["QAST"]
    unless $I5015 goto if698_else1934 
    get_who $P5063, pkg_lookup_tmp_20
    set $P5062, $P5063["QAST"]
    set $P5065, $P5062
    goto if698_end1935
  if698_else1934:
    nqp_get_sc_object $P5064, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5065, $P5064
  if698_end1935:
    get_who $P5059, $P5065
    set fb_tmp_78, $P5059
    repr_defined $I5014, fb_tmp_78
    unless $I5014 goto if697_else1932 
    set $P5066, fb_tmp_78["Regex"]
    set $P5068, $P5066
    goto if697_end1933
  if697_else1932:
    null $P5067
    set $P5068, $P5067
  if697_end1933:
    unless_null $P5068, vivi_6991936
    nqp_get_sc_object $P5069, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5068, $P5069
  vivi_6991936:
.annotate 'line', 410
    nqp_get_sc_object $P5071, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_21, $P5071
    get_who $P5072, pkg_lookup_tmp_21
    exists $I5017, $P5072["QAST"]
    unless $I5017 goto if701_else1939 
    get_who $P5074, pkg_lookup_tmp_21
    set $P5073, $P5074["QAST"]
    set $P5076, $P5073
    goto if701_end1940
  if701_else1939:
    nqp_get_sc_object $P5075, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5076, $P5075
  if701_end1940:
    get_who $P5070, $P5076
    set fb_tmp_79, $P5070
    repr_defined $I5016, fb_tmp_79
    unless $I5016 goto if700_else1937 
    set $P5077, fb_tmp_79["Regex"]
    set $P5079, $P5077
    goto if700_end1938
  if700_else1937:
    null $P5078
    set $P5079, $P5078
  if700_end1938:
    unless_null $P5079, vivi_7021941
    nqp_get_sc_object $P5080, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5079, $P5080
  vivi_7021941:
    unless_null _lex_param_1, fallback1946
    nqp_get_sc_object $P5081, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5081
  fallback1946:
    set fb_tmp_81, _lex_param_1
    repr_defined $I5019, fb_tmp_81
    unless $I5019 goto if704_else1944 
    set $P5082, fb_tmp_81["separator"]
    set $P5084, $P5082
    goto if704_end1945
  if704_else1944:
    null $P5083
    set $P5084, $P5083
  if704_end1945:
    unless_null $P5084, vivi_7051947
    nqp_get_sc_object $P5085, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5084, $P5085
  vivi_7051947:
    set fb_tmp_80, $P5084
    repr_defined $I5018, fb_tmp_80
    unless $I5018 goto if703_else1942 
    set $P5086, fb_tmp_80[0]
    set $P5088, $P5086
    goto if703_end1943
  if703_else1942:
    null $P5087
    set $P5088, $P5087
  if703_end1943:
    unless_null $P5088, vivi_7061948
    nqp_get_sc_object $P5089, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5088, $P5089
  vivi_7061948:
    $P5090 = $P5088."ast"()
    $P5091 = $P5079."new"($P5090, "quant" :named("rxtype"), 0 :named("min"), 1 :named("max"))
    $P5092 = $P5068."new"($P101, $P5091, "concat" :named("rxtype"))
    set $P101, $P5092
    set $P5093, $P101
  if690_end1921:
  if676_end1896:
    set $P5096, $P101
    unless $P101 goto if709_end1954 
.annotate 'line', 413
    $P5095 = $P101."backtrack"()
    isfalse $I5020, $P5095
    box $P5097, $I5020
    set $P5096, $P5097
  if709_end1954:
    set $P5127, $P5096
    unless $P5096 goto if708_end1952 
    find_dynamic_lex $P5098, "%*RX"
    unless_null $P5098, fallback1959
    nqp_get_sc_object $P5100, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5099, $P5100
    set pkg_viv_tmp_4, $P5099
    set fb_tmp_83, pkg_viv_tmp_4
    repr_defined $I5022, fb_tmp_83
    unless $I5022 goto if712_else1960 
    set $P5101, fb_tmp_83["%RX"]
    set $P5103, $P5101
    goto if712_end1961
  if712_else1960:
    null $P5102
    set $P5103, $P5102
  if712_end1961:
    unless_null $P5103, vivi_7131962
    new $P5104, 'Hash'
    set pkg_viv_tmp_4["%RX"], $P5104
    set $P5103, $P5104
  vivi_7131962:
    unless_null $P5103, vivi_7141963
    die "Contextual %*RX not found"
    box $P5105, "Contextual %*RX not found"
    set $P5103, $P5105
  vivi_7141963:
    set $P5098, $P5103
  fallback1959:
    set fb_tmp_82, $P5098
    repr_defined $I5021, fb_tmp_82
    unless $I5021 goto if711_else1957 
    set $P5106, fb_tmp_82["r"]
    set $P5108, $P5106
    goto if711_end1958
  if711_else1957:
    null $P5107
    set $P5108, $P5107
  if711_end1958:
    unless_null $P5108, vivi_7151964
    nqp_get_sc_object $P5109, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5108, $P5109
  vivi_7151964:
    set $P5126, $P5108
    if $P5108 goto unless710_end1956 
    unless_null _lex_param_1, fallback1969
    nqp_get_sc_object $P5110, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5110
  fallback1969:
    set fb_tmp_84, _lex_param_1
    repr_defined $I5023, fb_tmp_84
    unless $I5023 goto if717_else1967 
    set $P5111, fb_tmp_84["backmod"]
    set $P5113, $P5111
    goto if717_end1968
  if717_else1967:
    null $P5112
    set $P5113, $P5112
  if717_end1968:
    unless_null $P5113, vivi_7181970
    nqp_get_sc_object $P5114, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5113, $P5114
  vivi_7181970:
    set $P5124, $P5113
    unless $P5113 goto if716_end1966 
    unless_null _lex_param_1, fallback1975
    nqp_get_sc_object $P5115, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5115
  fallback1975:
    set fb_tmp_86, _lex_param_1
    repr_defined $I5026, fb_tmp_86
    unless $I5026 goto if720_else1973 
    set $P5116, fb_tmp_86["backmod"]
    set $P5118, $P5116
    goto if720_end1974
  if720_else1973:
    null $P5117
    set $P5118, $P5117
  if720_end1974:
    unless_null $P5118, vivi_7211976
    nqp_get_sc_object $P5119, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5118, $P5119
  vivi_7211976:
    set fb_tmp_85, $P5118
    repr_defined $I5025, fb_tmp_85
    unless $I5025 goto if719_else1971 
    set $P5120, fb_tmp_85[0]
    set $P5122, $P5120
    goto if719_end1972
  if719_else1971:
    null $P5121
    set $P5122, $P5121
  if719_end1972:
    unless_null $P5122, vivi_7221977
    nqp_get_sc_object $P5123, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5122, $P5123
  vivi_7221977:
    set $S5006, $P5122
    iseq $I5024, $S5006, ":"
    box $P5125, $I5024
    set $P5124, $P5125
  if716_end1966:
    set $P5126, $P5124
  unless710_end1956:
    set $P5127, $P5126
  if708_end1952:
    unless $P5127 goto if707_end1950 
    $P5128 = $P101."backtrack"("r")
  if707_end1950:
.annotate 'line', 415
    $P5129 = _lex_param_1."!make"($P101)
    .return ($P5129) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_215_1361537946.1303") :anon :lex :outer("cuid_120_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 397
    .lex "$ast", $P101 
    .local pmc fb_tmp_67 
    .local pmc fb_tmp_68 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 398
    find_lex $P5002, "$/"
    unless_null $P5002, fallback1892
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5002, $P5003
  fallback1892:
    set fb_tmp_68, $P5002
    repr_defined $I5002, fb_tmp_68
    unless $I5002 goto if673_else1890 
    set $P5004, fb_tmp_68["quantifier"]
    set $P5006, $P5004
    goto if673_end1891
  if673_else1890:
    null $P5005
    set $P5006, $P5005
  if673_end1891:
    unless_null $P5006, vivi_6741893
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_6741893:
    set fb_tmp_67, $P5006
    repr_defined $I5001, fb_tmp_67
    unless $I5001 goto if672_else1888 
    set $P5008, fb_tmp_67[0]
    set $P5010, $P5008
    goto if672_end1889
  if672_else1888:
    null $P5009
    set $P5010, $P5009
  if672_end1889:
    unless_null $P5010, vivi_6751894
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_6751894:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 399
    find_lex $P5013, "$qast"
    $P101."unshift"($P5013)
    store_lex "$qast", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_121_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 418
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_87 
.annotate 'line', 419
    unless_null _lex_param_1, fallback1980
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5001
  fallback1980:
    set fb_tmp_87, _lex_param_1
    repr_defined $I5001, fb_tmp_87
    unless $I5001 goto if723_else1978 
    set $P5002, fb_tmp_87["quantified_atom"]
    set $P5004, $P5002
    goto if723_end1979
  if723_else1978:
    null $P5003
    set $P5004, $P5003
  if723_end1979:
    unless_null $P5004, vivi_7241981
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_7241981:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_122_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 422
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5016 = 'cuid_216_1361537946.1303' 
    capture_lex $P5016 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_88 
    .local pmc fb_tmp_89 
    unless_null _lex_param_1, fallback1986
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5001
  fallback1986:
    set fb_tmp_88, _lex_param_1
    repr_defined $I5001, fb_tmp_88
    unless $I5001 goto if726_else1984 
    set $P5002, fb_tmp_88["metachar"]
    set $P5004, $P5002
    goto if726_end1985
  if726_else1984:
    null $P5003
    set $P5004, $P5003
  if726_end1985:
    unless_null $P5004, vivi_7271987
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_7271987:
    unless $P5004 goto if725_else1982 
.annotate 'line', 423
.annotate 'line', 424
    unless_null _lex_param_1, fallback1990
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5006
  fallback1990:
    set fb_tmp_89, _lex_param_1
    repr_defined $I5002, fb_tmp_89
    unless $I5002 goto if728_else1988 
    set $P5007, fb_tmp_89["metachar"]
    set $P5009, $P5007
    goto if728_end1989
  if728_else1988:
    null $P5008
    set $P5009, $P5008
  if728_end1989:
    unless_null $P5009, vivi_7291991
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_7291991:
    $P5011 = $P5009."ast"()
    $P5012 = _lex_param_1."!make"($P5011)
    set $P5015, $P5012
    goto if725_end1983
  if725_else1982:
    .const 'Sub' $P5013 = 'cuid_216_1361537946.1303' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if725_end1983:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1361537946.1303") :anon :lex :outer("cuid_122_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 426
    .lex "$qast", $P101 
    .local pmc fb_tmp_90 
    .local pmc pkg_lookup_tmp_22 
    .local pmc fb_tmp_91 
    .local pmc fb_tmp_92 
    .local pmc pkg_viv_tmp_5 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 427
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_22, $P5003
    get_who $P5004, pkg_lookup_tmp_22
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if731_else1994 
    get_who $P5006, pkg_lookup_tmp_22
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if731_end1995
  if731_else1994:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if731_end1995:
    get_who $P5002, $P5008
    set fb_tmp_90, $P5002
    repr_defined $I5001, fb_tmp_90
    unless $I5001 goto if730_else1992 
    set $P5009, fb_tmp_90["Regex"]
    set $P5011, $P5009
    goto if730_end1993
  if730_else1992:
    null $P5010
    set $P5011, $P5010
  if730_end1993:
    unless_null $P5011, vivi_7321996
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_7321996:
    find_lex $P5013, "$/"
    set $S5001, $P5013
    find_lex $P5014, "$/"
    $P5015 = $P5011."new"($S5001, "literal" :named("rxtype"), $P5014 :named("node"))
    set $P101, $P5015
    find_dynamic_lex $P5016, "%*RX"
    unless_null $P5016, fallback2001
    nqp_get_sc_object $P5018, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5017, $P5018
    set pkg_viv_tmp_5, $P5017
    set fb_tmp_92, pkg_viv_tmp_5
    repr_defined $I5004, fb_tmp_92
    unless $I5004 goto if735_else2002 
    set $P5019, fb_tmp_92["%RX"]
    set $P5021, $P5019
    goto if735_end2003
  if735_else2002:
    null $P5020
    set $P5021, $P5020
  if735_end2003:
    unless_null $P5021, vivi_7362004
    new $P5022, 'Hash'
    set pkg_viv_tmp_5["%RX"], $P5022
    set $P5021, $P5022
  vivi_7362004:
    unless_null $P5021, vivi_7372005
    die "Contextual %*RX not found"
    box $P5023, "Contextual %*RX not found"
    set $P5021, $P5023
  vivi_7372005:
    set $P5016, $P5021
  fallback2001:
    set fb_tmp_91, $P5016
    repr_defined $I5003, fb_tmp_91
    unless $I5003 goto if734_else1999 
    set $P5024, fb_tmp_91["i"]
    set $P5026, $P5024
    goto if734_end2000
  if734_else1999:
    null $P5025
    set $P5026, $P5025
  if734_end2000:
    unless_null $P5026, vivi_7382006
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5027
  vivi_7382006:
    unless $P5026 goto if733_end1998 
.annotate 'line', 428
    $P5028 = $P101."subtype"("ignorecase")
  if733_end1998:
.annotate 'line', 429
    find_dynamic_lex $P5029, "$/"
    $P5030 = $P5029."!make"($P101)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_123_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 433
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_93 
    .local pmc pkg_lookup_tmp_23 
    .local pmc fb_tmp_94 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 434
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_23, $P5003
    get_who $P5004, pkg_lookup_tmp_23
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if740_else2009 
    get_who $P5006, pkg_lookup_tmp_23
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if740_end2010
  if740_else2009:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if740_end2010:
    get_who $P5002, $P5008
    set fb_tmp_93, $P5002
    repr_defined $I5001, fb_tmp_93
    unless $I5001 goto if739_else2007 
    set $P5009, fb_tmp_93["Regex"]
    set $P5011, $P5009
    goto if739_end2008
  if739_else2007:
    null $P5010
    set $P5011, $P5010
  if739_end2008:
    unless_null $P5011, vivi_7412011
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_7412011:
    $P5013 = $P5011."new"("quant" :named("rxtype"), 0 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5013
.annotate 'line', 435
    unless_null _lex_param_1, fallback2014
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5014
  fallback2014:
    set fb_tmp_94, _lex_param_1
    repr_defined $I5003, fb_tmp_94
    unless $I5003 goto if742_else2012 
    set $P5015, fb_tmp_94["backmod"]
    set $P5017, $P5015
    goto if742_end2013
  if742_else2012:
    null $P5016
    set $P5017, $P5016
  if742_end2013:
    unless_null $P5017, vivi_7432015
    nqp_get_sc_object $P5018, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5017, $P5018
  vivi_7432015:
    $P5019 = "&backmod"($P101, $P5017)
    $P5020 = _lex_param_1."!make"($P5019)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_124_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 438
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_95 
    .local pmc pkg_lookup_tmp_24 
    .local pmc fb_tmp_96 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 439
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_24, $P5003
    get_who $P5004, pkg_lookup_tmp_24
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if745_else2018 
    get_who $P5006, pkg_lookup_tmp_24
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if745_end2019
  if745_else2018:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if745_end2019:
    get_who $P5002, $P5008
    set fb_tmp_95, $P5002
    repr_defined $I5001, fb_tmp_95
    unless $I5001 goto if744_else2016 
    set $P5009, fb_tmp_95["Regex"]
    set $P5011, $P5009
    goto if744_end2017
  if744_else2016:
    null $P5010
    set $P5011, $P5010
  if744_end2017:
    unless_null $P5011, vivi_7462020
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_7462020:
    $P5013 = $P5011."new"("quant" :named("rxtype"), 1 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5013
.annotate 'line', 440
    unless_null _lex_param_1, fallback2023
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5014
  fallback2023:
    set fb_tmp_96, _lex_param_1
    repr_defined $I5003, fb_tmp_96
    unless $I5003 goto if747_else2021 
    set $P5015, fb_tmp_96["backmod"]
    set $P5017, $P5015
    goto if747_end2022
  if747_else2021:
    null $P5016
    set $P5017, $P5016
  if747_end2022:
    unless_null $P5017, vivi_7482024
    nqp_get_sc_object $P5018, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5017, $P5018
  vivi_7482024:
    $P5019 = "&backmod"($P101, $P5017)
    $P5020 = _lex_param_1."!make"($P5019)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_125_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 443
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_97 
    .local pmc pkg_lookup_tmp_25 
    .local pmc fb_tmp_98 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 444
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_25, $P5003
    get_who $P5004, pkg_lookup_tmp_25
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if750_else2027 
    get_who $P5006, pkg_lookup_tmp_25
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if750_end2028
  if750_else2027:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if750_end2028:
    get_who $P5002, $P5008
    set fb_tmp_97, $P5002
    repr_defined $I5001, fb_tmp_97
    unless $I5001 goto if749_else2025 
    set $P5009, fb_tmp_97["Regex"]
    set $P5011, $P5009
    goto if749_end2026
  if749_else2025:
    null $P5010
    set $P5011, $P5010
  if749_end2026:
    unless_null $P5011, vivi_7512029
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_7512029:
    $P5013 = $P5011."new"("quant" :named("rxtype"), 0 :named("min"), 1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5013
.annotate 'line', 445
    unless_null _lex_param_1, fallback2032
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5014
  fallback2032:
    set fb_tmp_98, _lex_param_1
    repr_defined $I5003, fb_tmp_98
    unless $I5003 goto if752_else2030 
    set $P5015, fb_tmp_98["backmod"]
    set $P5017, $P5015
    goto if752_end2031
  if752_else2030:
    null $P5016
    set $P5017, $P5016
  if752_end2031:
    unless_null $P5017, vivi_7532033
    nqp_get_sc_object $P5018, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5017, $P5018
  vivi_7532033:
    $P5019 = "&backmod"($P101, $P5017)
    $P5020 = _lex_param_1."!make"($P5019)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_126_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 448
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_99 
    .local pmc pkg_lookup_tmp_26 
    .local pmc fb_tmp_100 
    .local pmc fb_tmp_101 
    .local pmc fb_tmp_102 
    .local pmc fb_tmp_103 
    .local pmc fb_tmp_104 
    .local pmc fb_tmp_105 
    .local pmc fb_tmp_106 
    .local pmc fb_tmp_107 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 450
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_26, $P5003
    get_who $P5004, pkg_lookup_tmp_26
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if755_else2036 
    get_who $P5006, pkg_lookup_tmp_26
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if755_end2037
  if755_else2036:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if755_end2037:
    get_who $P5002, $P5008
    set fb_tmp_99, $P5002
    repr_defined $I5001, fb_tmp_99
    unless $I5001 goto if754_else2034 
    set $P5009, fb_tmp_99["Regex"]
    set $P5011, $P5009
    goto if754_end2035
  if754_else2034:
    null $P5010
    set $P5011, $P5010
  if754_end2035:
    unless_null $P5011, vivi_7562038
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_7562038:
    unless_null _lex_param_1, fallback2041
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2041:
    set fb_tmp_100, _lex_param_1
    repr_defined $I5003, fb_tmp_100
    unless $I5003 goto if757_else2039 
    set $P5014, fb_tmp_100["min"]
    set $P5016, $P5014
    goto if757_end2040
  if757_else2039:
    null $P5015
    set $P5016, $P5015
  if757_end2040:
    unless_null $P5016, vivi_7582042
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_7582042:
    set $N5001, $P5016
    $P5018 = $P5011."new"("quant" :named("rxtype"), $N5001 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback2047
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5019
  fallback2047:
    set fb_tmp_101, _lex_param_1
    repr_defined $I5005, fb_tmp_101
    unless $I5005 goto if760_else2045 
    set $P5020, fb_tmp_101["max"]
    set $P5022, $P5020
    goto if760_end2046
  if760_else2045:
    null $P5021
    set $P5022, $P5021
  if760_end2046:
    unless_null $P5022, vivi_7612048
    nqp_get_sc_object $P5023, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5022, $P5023
  vivi_7612048:
    isfalse $I5004, $P5022
    unless $I5004 goto if759_else2043 
.annotate 'line', 451
    unless_null _lex_param_1, fallback2051
    nqp_get_sc_object $P5024, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5024
  fallback2051:
    set fb_tmp_102, _lex_param_1
    repr_defined $I5006, fb_tmp_102
    unless $I5006 goto if762_else2049 
    set $P5025, fb_tmp_102["min"]
    set $P5027, $P5025
    goto if762_end2050
  if762_else2049:
    null $P5026
    set $P5027, $P5026
  if762_end2050:
    unless_null $P5027, vivi_7632052
    nqp_get_sc_object $P5028, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5027, $P5028
  vivi_7632052:
    set $N5002, $P5027
    $P5029 = $P101."max"($N5002)
    goto if759_end2044
  if759_else2043:
    unless_null _lex_param_1, fallback2059
    nqp_get_sc_object $P5030, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5030
  fallback2059:
    set fb_tmp_104, _lex_param_1
    repr_defined $I5009, fb_tmp_104
    unless $I5009 goto if766_else2057 
    set $P5031, fb_tmp_104["max"]
    set $P5033, $P5031
    goto if766_end2058
  if766_else2057:
    null $P5032
    set $P5033, $P5032
  if766_end2058:
    unless_null $P5033, vivi_7672060
    nqp_get_sc_object $P5034, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5033, $P5034
  vivi_7672060:
    set fb_tmp_103, $P5033
    repr_defined $I5008, fb_tmp_103
    unless $I5008 goto if765_else2055 
    set $P5035, fb_tmp_103[0]
    set $P5037, $P5035
    goto if765_end2056
  if765_else2055:
    null $P5036
    set $P5037, $P5036
  if765_end2056:
    unless_null $P5037, vivi_7682061
    nqp_get_sc_object $P5038, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5037, $P5038
  vivi_7682061:
    set $S5001, $P5037
    isne $I5007, $S5001, "*"
    box $P5050, $I5007
    set $P5049, $P5050
    unless $I5007 goto if764_end2054 
.annotate 'line', 452
    unless_null _lex_param_1, fallback2066
    nqp_get_sc_object $P5039, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5039
  fallback2066:
    set fb_tmp_106, _lex_param_1
    repr_defined $I5011, fb_tmp_106
    unless $I5011 goto if770_else2064 
    set $P5040, fb_tmp_106["max"]
    set $P5042, $P5040
    goto if770_end2065
  if770_else2064:
    null $P5041
    set $P5042, $P5041
  if770_end2065:
    unless_null $P5042, vivi_7712067
    nqp_get_sc_object $P5043, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5042, $P5043
  vivi_7712067:
    set fb_tmp_105, $P5042
    repr_defined $I5010, fb_tmp_105
    unless $I5010 goto if769_else2062 
    set $P5044, fb_tmp_105[0]
    set $P5046, $P5044
    goto if769_end2063
  if769_else2062:
    null $P5045
    set $P5046, $P5045
  if769_end2063:
    unless_null $P5046, vivi_7722068
    nqp_get_sc_object $P5047, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5046, $P5047
  vivi_7722068:
    set $N5003, $P5046
    $P5048 = $P101."max"($N5003)
    set $P5049, $P5048
  if764_end2054:
  if759_end2044:
.annotate 'line', 453
    unless_null _lex_param_1, fallback2071
    nqp_get_sc_object $P5051, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5051
  fallback2071:
    set fb_tmp_107, _lex_param_1
    repr_defined $I5012, fb_tmp_107
    unless $I5012 goto if773_else2069 
    set $P5052, fb_tmp_107["backmod"]
    set $P5054, $P5052
    goto if773_end2070
  if773_else2069:
    null $P5053
    set $P5054, $P5053
  if773_end2070:
    unless_null $P5054, vivi_7742072
    nqp_get_sc_object $P5055, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5054, $P5055
  vivi_7742072:
    $P5056 = "&backmod"($P101, $P5054)
    $P5057 = _lex_param_1."!make"($P5056)
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_127_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 456
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_108 
    .local pmc fb_tmp_109 
    .local pmc pkg_viv_tmp_6 
    .local pmc fb_tmp_110 
    .local pmc pkg_lookup_tmp_27 
    .local pmc fb_tmp_111 
    .local pmc pkg_lookup_tmp_28 
    .local pmc fb_tmp_112 
    .local pmc pkg_lookup_tmp_29 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback2077
    nqp_get_sc_object $P5004, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_6, $P5003
    set fb_tmp_109, pkg_viv_tmp_6
    repr_defined $I5002, fb_tmp_109
    unless $I5002 goto if777_else2078 
    set $P5005, fb_tmp_109["%RX"]
    set $P5007, $P5005
    goto if777_end2079
  if777_else2078:
    null $P5006
    set $P5007, $P5006
  if777_end2079:
    unless_null $P5007, vivi_7782080
    new $P5008, 'Hash'
    set pkg_viv_tmp_6["%RX"], $P5008
    set $P5007, $P5008
  vivi_7782080:
    unless_null $P5007, vivi_7792081
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_7792081:
    set $P5002, $P5007
  fallback2077:
    set fb_tmp_108, $P5002
    repr_defined $I5001, fb_tmp_108
    unless $I5001 goto if776_else2075 
    set $P5010, fb_tmp_108["s"]
    set $P5012, $P5010
    goto if776_end2076
  if776_else2075:
    null $P5011
    set $P5012, $P5011
  if776_end2076:
    unless_null $P5012, vivi_7802082
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5012, $P5013
  vivi_7802082:
    unless $P5012 goto if775_else2073 
.annotate 'line', 458
    nqp_get_sc_object $P5015, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_27, $P5015
    get_who $P5016, pkg_lookup_tmp_27
    exists $I5004, $P5016["QAST"]
    unless $I5004 goto if782_else2085 
    get_who $P5018, pkg_lookup_tmp_27
    set $P5017, $P5018["QAST"]
    set $P5020, $P5017
    goto if782_end2086
  if782_else2085:
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5019
  if782_end2086:
    get_who $P5014, $P5020
    set fb_tmp_110, $P5014
    repr_defined $I5003, fb_tmp_110
    unless $I5003 goto if781_else2083 
    set $P5021, fb_tmp_110["Regex"]
    set $P5023, $P5021
    goto if781_end2084
  if781_else2083:
    null $P5022
    set $P5023, $P5022
  if781_end2084:
    unless_null $P5023, vivi_7832087
    nqp_get_sc_object $P5024, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5023, $P5024
  vivi_7832087:
.annotate 'line', 459
    nqp_get_sc_object $P5026, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_28, $P5026
    get_who $P5027, pkg_lookup_tmp_28
    exists $I5006, $P5027["QAST"]
    unless $I5006 goto if785_else2090 
    get_who $P5029, pkg_lookup_tmp_28
    set $P5028, $P5029["QAST"]
    set $P5031, $P5028
    goto if785_end2091
  if785_else2090:
    nqp_get_sc_object $P5030, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5031, $P5030
  if785_end2091:
    get_who $P5025, $P5031
    set fb_tmp_111, $P5025
    repr_defined $I5005, fb_tmp_111
    unless $I5005 goto if784_else2088 
    set $P5032, fb_tmp_111["Node"]
    set $P5034, $P5032
    goto if784_end2089
  if784_else2088:
    null $P5033
    set $P5034, $P5033
  if784_end2089:
    unless_null $P5034, vivi_7862092
    nqp_get_sc_object $P5035, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5034, $P5035
  vivi_7862092:
    nqp_get_sc_object $P5037, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_29, $P5037
    get_who $P5038, pkg_lookup_tmp_29
    exists $I5008, $P5038["QAST"]
    unless $I5008 goto if788_else2095 
    get_who $P5040, pkg_lookup_tmp_29
    set $P5039, $P5040["QAST"]
    set $P5042, $P5039
    goto if788_end2096
  if788_else2095:
    nqp_get_sc_object $P5041, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5042, $P5041
  if788_end2096:
    get_who $P5036, $P5042
    set fb_tmp_112, $P5036
    repr_defined $I5007, fb_tmp_112
    unless $I5007 goto if787_else2093 
    set $P5043, fb_tmp_112["SVal"]
    set $P5045, $P5043
    goto if787_end2094
  if787_else2093:
    null $P5044
    set $P5045, $P5044
  if787_end2094:
    unless_null $P5045, vivi_7892097
    nqp_get_sc_object $P5046, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5045, $P5046
  vivi_7892097:
    $P5047 = $P5045."new"("ws" :named("value"))
    $P5048 = $P5034."new"($P5047)
    $P5049 = $P5023."new"($P5048, "ws" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P5050, $P5049
    goto if775_end2074
  if775_else2073:
    box $P5051, 0
    set $P5050, $P5051
  if775_end2074:
    set $P101, $P5050
.annotate 'line', 461
    $P5052 = _lex_param_1."!make"($P101)
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_128_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 464
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_113 
.annotate 'line', 465
    unless_null _lex_param_1, fallback2100
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5001
  fallback2100:
    set fb_tmp_113, _lex_param_1
    repr_defined $I5001, fb_tmp_113
    unless $I5001 goto if790_else2098 
    set $P5002, fb_tmp_113["nibbler"]
    set $P5004, $P5002
    goto if790_end2099
  if790_else2098:
    null $P5003
    set $P5004, $P5003
  if790_end2099:
    unless_null $P5004, vivi_7912101
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_7912101:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_129_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 468
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_114 
    .local pmc pkg_lookup_tmp_30 
    .local pmc fb_tmp_115 
    .local pmc fb_tmp_116 
    .local pmc pkg_lookup_tmp_31 
    .local pmc fb_tmp_117 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
.annotate 'line', 469
    nqp_get_sc_object $P5004, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_30, $P5004
    get_who $P5005, pkg_lookup_tmp_30
    exists $I5002, $P5005["QAST"]
    unless $I5002 goto if793_else2104 
    get_who $P5007, pkg_lookup_tmp_30
    set $P5006, $P5007["QAST"]
    set $P5009, $P5006
    goto if793_end2105
  if793_else2104:
    nqp_get_sc_object $P5008, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5008
  if793_end2105:
    get_who $P5003, $P5009
    set fb_tmp_114, $P5003
    repr_defined $I5001, fb_tmp_114
    unless $I5001 goto if792_else2102 
    set $P5010, fb_tmp_114["Node"]
    set $P5012, $P5010
    goto if792_end2103
  if792_else2102:
    null $P5011
    set $P5012, $P5011
  if792_end2103:
    unless_null $P5012, vivi_7942106
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5012, $P5013
  vivi_7942106:
    nqp_decontainerize $P5014, _lex_param_0
    unless_null _lex_param_1, fallback2109
    nqp_get_sc_object $P5015, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5015
  fallback2109:
    set fb_tmp_115, _lex_param_1
    repr_defined $I5003, fb_tmp_115
    unless $I5003 goto if795_else2107 
    set $P5016, fb_tmp_115["nibbler"]
    set $P5018, $P5016
    goto if795_end2108
  if795_else2107:
    null $P5017
    set $P5018, $P5017
  if795_end2108:
    unless_null $P5018, vivi_7962110
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5019
  vivi_7962110:
    $P5020 = $P5018."ast"()
    $P5021 = $P5014."qbuildsub"($P5020, 1 :named("anon"), 1 :named("addself"))
    $P5022 = $P5012."new"($P5021)
    set $P101, $P5022
.annotate 'line', 470
    nqp_get_sc_object $P5024, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_31, $P5024
    get_who $P5025, pkg_lookup_tmp_31
    exists $I5005, $P5025["QAST"]
    unless $I5005 goto if798_else2113 
    get_who $P5027, pkg_lookup_tmp_31
    set $P5026, $P5027["QAST"]
    set $P5029, $P5026
    goto if798_end2114
  if798_else2113:
    nqp_get_sc_object $P5028, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5029, $P5028
  if798_end2114:
    get_who $P5023, $P5029
    set fb_tmp_116, $P5023
    repr_defined $I5004, fb_tmp_116
    unless $I5004 goto if797_else2111 
    set $P5030, fb_tmp_116["Regex"]
    set $P5032, $P5030
    goto if797_end2112
  if797_else2111:
    null $P5031
    set $P5032, $P5031
  if797_end2112:
    unless_null $P5032, vivi_7992115
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5033
  vivi_7992115:
    unless_null _lex_param_1, fallback2118
    nqp_get_sc_object $P5034, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5034
  fallback2118:
    set fb_tmp_117, _lex_param_1
    repr_defined $I5006, fb_tmp_117
    unless $I5006 goto if800_else2116 
    set $P5035, fb_tmp_117["nibbler"]
    set $P5037, $P5035
    goto if800_end2117
  if800_else2116:
    null $P5036
    set $P5037, $P5036
  if800_end2117:
    unless_null $P5037, vivi_8012119
    nqp_get_sc_object $P5038, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5037, $P5038
  vivi_8012119:
    $P5039 = $P5037."ast"()
    $P5040 = $P5032."new"($P101, $P5039, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5040
.annotate 'line', 472
    $P5041 = _lex_param_1."!make"($P102)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_130_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 475
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_118 
    .local pmc fb_tmp_119 
    .local pmc pkg_lookup_tmp_32 
    .local pmc fb_tmp_120 
    .local pmc pkg_lookup_tmp_33 
    .local pmc fb_tmp_121 
    .local pmc fb_tmp_122 
    .local pmc pkg_viv_tmp_7 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
.annotate 'line', 476
    unless_null _lex_param_1, fallback2122
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5003
  fallback2122:
    set fb_tmp_118, _lex_param_1
    repr_defined $I5001, fb_tmp_118
    unless $I5001 goto if802_else2120 
    set $P5004, fb_tmp_118["quote_EXPR"]
    set $P5006, $P5004
    goto if802_end2121
  if802_else2120:
    null $P5005
    set $P5006, $P5005
  if802_end2121:
    unless_null $P5006, vivi_8032123
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_8032123:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 477
    nqp_get_sc_object $P5010, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_32, $P5010
    get_who $P5011, pkg_lookup_tmp_32
    exists $I5003, $P5011["QAST"]
    unless $I5003 goto if806_else2128 
    get_who $P5013, pkg_lookup_tmp_32
    set $P5012, $P5013["QAST"]
    set $P5015, $P5012
    goto if806_end2129
  if806_else2128:
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5014
  if806_end2129:
    get_who $P5009, $P5015
    set fb_tmp_119, $P5009
    repr_defined $I5002, fb_tmp_119
    unless $I5002 goto if805_else2126 
    set $P5016, fb_tmp_119["SVal"]
    set $P5018, $P5016
    goto if805_end2127
  if805_else2126:
    null $P5017
    set $P5018, $P5017
  if805_end2127:
    unless_null $P5018, vivi_8072130
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5019
  vivi_8072130:
    $P5020 = $P5018."ACCEPTS"($P101)
    unless $P5020 goto if804_end2125 
    $P5021 = $P101."value"()
    set $P101, $P5021
  if804_end2125:
.annotate 'line', 478
    nqp_get_sc_object $P5023, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_33, $P5023
    get_who $P5024, pkg_lookup_tmp_33
    exists $I5005, $P5024["QAST"]
    unless $I5005 goto if809_else2133 
    get_who $P5026, pkg_lookup_tmp_33
    set $P5025, $P5026["QAST"]
    set $P5028, $P5025
    goto if809_end2134
  if809_else2133:
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5028, $P5027
  if809_end2134:
    get_who $P5022, $P5028
    set fb_tmp_120, $P5022
    repr_defined $I5004, fb_tmp_120
    unless $I5004 goto if808_else2131 
    set $P5029, fb_tmp_120["Regex"]
    set $P5031, $P5029
    goto if808_end2132
  if808_else2131:
    null $P5030
    set $P5031, $P5030
  if808_end2132:
    unless_null $P5031, vivi_8102135
    nqp_get_sc_object $P5032, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5031, $P5032
  vivi_8102135:
    $P5033 = $P5031."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5033
    find_dynamic_lex $P5034, "%*RX"
    unless_null $P5034, fallback2140
    nqp_get_sc_object $P5036, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5035, $P5036
    set pkg_viv_tmp_7, $P5035
    set fb_tmp_122, pkg_viv_tmp_7
    repr_defined $I5007, fb_tmp_122
    unless $I5007 goto if813_else2141 
    set $P5037, fb_tmp_122["%RX"]
    set $P5039, $P5037
    goto if813_end2142
  if813_else2141:
    null $P5038
    set $P5039, $P5038
  if813_end2142:
    unless_null $P5039, vivi_8142143
    new $P5040, 'Hash'
    set pkg_viv_tmp_7["%RX"], $P5040
    set $P5039, $P5040
  vivi_8142143:
    unless_null $P5039, vivi_8152144
    die "Contextual %*RX not found"
    box $P5041, "Contextual %*RX not found"
    set $P5039, $P5041
  vivi_8152144:
    set $P5034, $P5039
  fallback2140:
    set fb_tmp_121, $P5034
    repr_defined $I5006, fb_tmp_121
    unless $I5006 goto if812_else2138 
    set $P5042, fb_tmp_121["i"]
    set $P5044, $P5042
    goto if812_end2139
  if812_else2138:
    null $P5043
    set $P5044, $P5043
  if812_end2139:
    unless_null $P5044, vivi_8162145
    nqp_get_sc_object $P5045, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5044, $P5045
  vivi_8162145:
    unless $P5044 goto if811_end2137 
.annotate 'line', 479
    $P5046 = $P102."subtype"("ignorecase")
  if811_end2137:
.annotate 'line', 480
    $P5047 = _lex_param_1."!make"($P102)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_131_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 483
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_123 
    .local pmc fb_tmp_124 
    .local pmc pkg_lookup_tmp_34 
    .local pmc fb_tmp_125 
    .local pmc pkg_lookup_tmp_35 
    .local pmc fb_tmp_126 
    .local pmc fb_tmp_127 
    .local pmc pkg_viv_tmp_8 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
.annotate 'line', 484
    unless_null _lex_param_1, fallback2148
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5003
  fallback2148:
    set fb_tmp_123, _lex_param_1
    repr_defined $I5001, fb_tmp_123
    unless $I5001 goto if817_else2146 
    set $P5004, fb_tmp_123["quote_EXPR"]
    set $P5006, $P5004
    goto if817_end2147
  if817_else2146:
    null $P5005
    set $P5006, $P5005
  if817_end2147:
    unless_null $P5006, vivi_8182149
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_8182149:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 485
    nqp_get_sc_object $P5010, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_34, $P5010
    get_who $P5011, pkg_lookup_tmp_34
    exists $I5003, $P5011["QAST"]
    unless $I5003 goto if821_else2154 
    get_who $P5013, pkg_lookup_tmp_34
    set $P5012, $P5013["QAST"]
    set $P5015, $P5012
    goto if821_end2155
  if821_else2154:
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5014
  if821_end2155:
    get_who $P5009, $P5015
    set fb_tmp_124, $P5009
    repr_defined $I5002, fb_tmp_124
    unless $I5002 goto if820_else2152 
    set $P5016, fb_tmp_124["SVal"]
    set $P5018, $P5016
    goto if820_end2153
  if820_else2152:
    null $P5017
    set $P5018, $P5017
  if820_end2153:
    unless_null $P5018, vivi_8222156
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5019
  vivi_8222156:
    $P5020 = $P5018."ACCEPTS"($P101)
    unless $P5020 goto if819_end2151 
    $P5021 = $P101."value"()
    set $P101, $P5021
  if819_end2151:
.annotate 'line', 486
    nqp_get_sc_object $P5023, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_35, $P5023
    get_who $P5024, pkg_lookup_tmp_35
    exists $I5005, $P5024["QAST"]
    unless $I5005 goto if824_else2159 
    get_who $P5026, pkg_lookup_tmp_35
    set $P5025, $P5026["QAST"]
    set $P5028, $P5025
    goto if824_end2160
  if824_else2159:
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5028, $P5027
  if824_end2160:
    get_who $P5022, $P5028
    set fb_tmp_125, $P5022
    repr_defined $I5004, fb_tmp_125
    unless $I5004 goto if823_else2157 
    set $P5029, fb_tmp_125["Regex"]
    set $P5031, $P5029
    goto if823_end2158
  if823_else2157:
    null $P5030
    set $P5031, $P5030
  if823_end2158:
    unless_null $P5031, vivi_8252161
    nqp_get_sc_object $P5032, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5031, $P5032
  vivi_8252161:
    $P5033 = $P5031."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5033
    find_dynamic_lex $P5034, "%*RX"
    unless_null $P5034, fallback2166
    nqp_get_sc_object $P5036, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5035, $P5036
    set pkg_viv_tmp_8, $P5035
    set fb_tmp_127, pkg_viv_tmp_8
    repr_defined $I5007, fb_tmp_127
    unless $I5007 goto if828_else2167 
    set $P5037, fb_tmp_127["%RX"]
    set $P5039, $P5037
    goto if828_end2168
  if828_else2167:
    null $P5038
    set $P5039, $P5038
  if828_end2168:
    unless_null $P5039, vivi_8292169
    new $P5040, 'Hash'
    set pkg_viv_tmp_8["%RX"], $P5040
    set $P5039, $P5040
  vivi_8292169:
    unless_null $P5039, vivi_8302170
    die "Contextual %*RX not found"
    box $P5041, "Contextual %*RX not found"
    set $P5039, $P5041
  vivi_8302170:
    set $P5034, $P5039
  fallback2166:
    set fb_tmp_126, $P5034
    repr_defined $I5006, fb_tmp_126
    unless $I5006 goto if827_else2164 
    set $P5042, fb_tmp_126["i"]
    set $P5044, $P5042
    goto if827_end2165
  if827_else2164:
    null $P5043
    set $P5044, $P5043
  if827_end2165:
    unless_null $P5044, vivi_8312171
    nqp_get_sc_object $P5045, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5044, $P5045
  vivi_8312171:
    unless $P5044 goto if826_end2163 
.annotate 'line', 487
    $P5046 = $P102."subtype"("ignorecase")
  if826_end2163:
.annotate 'line', 488
    $P5047 = _lex_param_1."!make"($P102)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_132_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 491
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_128 
    .local pmc pkg_lookup_tmp_36 
.annotate 'line', 492
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_36, $P5002
    get_who $P5003, pkg_lookup_tmp_36
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if833_else2174 
    get_who $P5005, pkg_lookup_tmp_36
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if833_end2175
  if833_else2174:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if833_end2175:
    get_who $P5001, $P5007
    set fb_tmp_128, $P5001
    repr_defined $I5001, fb_tmp_128
    unless $I5001 goto if832_else2172 
    set $P5008, fb_tmp_128["Regex"]
    set $P5010, $P5008
    goto if832_end2173
  if832_else2172:
    null $P5009
    set $P5010, $P5009
  if832_end2173:
    unless_null $P5010, vivi_8342176
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_8342176:
    $P5012 = $P5010."new"("cclass" :named("rxtype"), "." :named("subtype"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_133_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 495
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_129 
    .local pmc pkg_lookup_tmp_37 
.annotate 'line', 496
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_37, $P5002
    get_who $P5003, pkg_lookup_tmp_37
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if836_else2179 
    get_who $P5005, pkg_lookup_tmp_37
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if836_end2180
  if836_else2179:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if836_end2180:
    get_who $P5001, $P5007
    set fb_tmp_129, $P5001
    repr_defined $I5001, fb_tmp_129
    unless $I5001 goto if835_else2177 
    set $P5008, fb_tmp_129["Regex"]
    set $P5010, $P5008
    goto if835_end2178
  if835_else2177:
    null $P5009
    set $P5010, $P5009
  if835_end2178:
    unless_null $P5010, vivi_8372181
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_8372181:
    $P5012 = $P5010."new"("anchor" :named("rxtype"), "bos" :named("subtype"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_134_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 499
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_130 
    .local pmc pkg_lookup_tmp_38 
.annotate 'line', 500
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_38, $P5002
    get_who $P5003, pkg_lookup_tmp_38
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if839_else2184 
    get_who $P5005, pkg_lookup_tmp_38
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if839_end2185
  if839_else2184:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if839_end2185:
    get_who $P5001, $P5007
    set fb_tmp_130, $P5001
    repr_defined $I5001, fb_tmp_130
    unless $I5001 goto if838_else2182 
    set $P5008, fb_tmp_130["Regex"]
    set $P5010, $P5008
    goto if838_end2183
  if838_else2182:
    null $P5009
    set $P5010, $P5009
  if838_end2183:
    unless_null $P5010, vivi_8402186
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_8402186:
    $P5012 = $P5010."new"("anchor" :named("rxtype"), "bol" :named("subtype"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_135_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 503
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_131 
    .local pmc pkg_lookup_tmp_39 
.annotate 'line', 504
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_39, $P5002
    get_who $P5003, pkg_lookup_tmp_39
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if842_else2189 
    get_who $P5005, pkg_lookup_tmp_39
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if842_end2190
  if842_else2189:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if842_end2190:
    get_who $P5001, $P5007
    set fb_tmp_131, $P5001
    repr_defined $I5001, fb_tmp_131
    unless $I5001 goto if841_else2187 
    set $P5008, fb_tmp_131["Regex"]
    set $P5010, $P5008
    goto if841_end2188
  if841_else2187:
    null $P5009
    set $P5010, $P5009
  if841_end2188:
    unless_null $P5010, vivi_8432191
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_8432191:
    $P5012 = $P5010."new"("anchor" :named("rxtype"), "eos" :named("subtype"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_136_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 507
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_132 
    .local pmc pkg_lookup_tmp_40 
.annotate 'line', 508
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_40, $P5002
    get_who $P5003, pkg_lookup_tmp_40
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if845_else2194 
    get_who $P5005, pkg_lookup_tmp_40
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if845_end2195
  if845_else2194:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if845_end2195:
    get_who $P5001, $P5007
    set fb_tmp_132, $P5001
    repr_defined $I5001, fb_tmp_132
    unless $I5001 goto if844_else2192 
    set $P5008, fb_tmp_132["Regex"]
    set $P5010, $P5008
    goto if844_end2193
  if844_else2192:
    null $P5009
    set $P5010, $P5009
  if844_end2193:
    unless_null $P5010, vivi_8462196
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_8462196:
    $P5012 = $P5010."new"("anchor" :named("rxtype"), "eol" :named("subtype"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_137_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 511
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_133 
    .local pmc pkg_lookup_tmp_41 
.annotate 'line', 512
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_41, $P5002
    get_who $P5003, pkg_lookup_tmp_41
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if848_else2199 
    get_who $P5005, pkg_lookup_tmp_41
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if848_end2200
  if848_else2199:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if848_end2200:
    get_who $P5001, $P5007
    set fb_tmp_133, $P5001
    repr_defined $I5001, fb_tmp_133
    unless $I5001 goto if847_else2197 
    set $P5008, fb_tmp_133["Regex"]
    set $P5010, $P5008
    goto if847_end2198
  if847_else2197:
    null $P5009
    set $P5010, $P5009
  if847_end2198:
    unless_null $P5010, vivi_8492201
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_8492201:
    $P5012 = $P5010."new"("anchor" :named("rxtype"), "lwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_138_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 515
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_134 
    .local pmc pkg_lookup_tmp_42 
.annotate 'line', 516
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_42, $P5002
    get_who $P5003, pkg_lookup_tmp_42
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if851_else2204 
    get_who $P5005, pkg_lookup_tmp_42
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if851_end2205
  if851_else2204:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if851_end2205:
    get_who $P5001, $P5007
    set fb_tmp_134, $P5001
    repr_defined $I5001, fb_tmp_134
    unless $I5001 goto if850_else2202 
    set $P5008, fb_tmp_134["Regex"]
    set $P5010, $P5008
    goto if850_end2203
  if850_else2202:
    null $P5009
    set $P5010, $P5009
  if850_end2203:
    unless_null $P5010, vivi_8522206
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_8522206:
    $P5012 = $P5010."new"("anchor" :named("rxtype"), "rwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_139_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 519
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_135 
    .local pmc pkg_lookup_tmp_43 
    .local pmc fb_tmp_136 
    .local pmc pkg_lookup_tmp_44 
    .local pmc fb_tmp_137 
    .local pmc pkg_lookup_tmp_45 
    .local pmc fb_tmp_138 
    .local pmc pkg_lookup_tmp_46 
.annotate 'line', 520
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_43, $P5002
    get_who $P5003, pkg_lookup_tmp_43
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if854_else2209 
    get_who $P5005, pkg_lookup_tmp_43
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if854_end2210
  if854_else2209:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if854_end2210:
    get_who $P5001, $P5007
    set fb_tmp_135, $P5001
    repr_defined $I5001, fb_tmp_135
    unless $I5001 goto if853_else2207 
    set $P5008, fb_tmp_135["Regex"]
    set $P5010, $P5008
    goto if853_end2208
  if853_else2207:
    null $P5009
    set $P5010, $P5009
  if853_end2208:
    unless_null $P5010, vivi_8552211
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_8552211:
.annotate 'line', 522
    nqp_get_sc_object $P5013, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_44, $P5013
    get_who $P5014, pkg_lookup_tmp_44
    exists $I5004, $P5014["QAST"]
    unless $I5004 goto if857_else2214 
    get_who $P5016, pkg_lookup_tmp_44
    set $P5015, $P5016["QAST"]
    set $P5018, $P5015
    goto if857_end2215
  if857_else2214:
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5017
  if857_end2215:
    get_who $P5012, $P5018
    set fb_tmp_136, $P5012
    repr_defined $I5003, fb_tmp_136
    unless $I5003 goto if856_else2212 
    set $P5019, fb_tmp_136["Node"]
    set $P5021, $P5019
    goto if856_end2213
  if856_else2212:
    null $P5020
    set $P5021, $P5020
  if856_end2213:
    unless_null $P5021, vivi_8582216
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5021, $P5022
  vivi_8582216:
.annotate 'line', 523
    nqp_get_sc_object $P5024, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_45, $P5024
    get_who $P5025, pkg_lookup_tmp_45
    exists $I5006, $P5025["QAST"]
    unless $I5006 goto if860_else2219 
    get_who $P5027, pkg_lookup_tmp_45
    set $P5026, $P5027["QAST"]
    set $P5029, $P5026
    goto if860_end2220
  if860_else2219:
    nqp_get_sc_object $P5028, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5029, $P5028
  if860_end2220:
    get_who $P5023, $P5029
    set fb_tmp_137, $P5023
    repr_defined $I5005, fb_tmp_137
    unless $I5005 goto if859_else2217 
    set $P5030, fb_tmp_137["SVal"]
    set $P5032, $P5030
    goto if859_end2218
  if859_else2217:
    null $P5031
    set $P5032, $P5031
  if859_end2218:
    unless_null $P5032, vivi_8612221
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5033
  vivi_8612221:
    $P5034 = $P5032."new"("!LITERAL" :named("value"))
.annotate 'line', 524
    nqp_get_sc_object $P5036, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_46, $P5036
    get_who $P5037, pkg_lookup_tmp_46
    exists $I5008, $P5037["QAST"]
    unless $I5008 goto if863_else2224 
    get_who $P5039, pkg_lookup_tmp_46
    set $P5038, $P5039["QAST"]
    set $P5041, $P5038
    goto if863_end2225
  if863_else2224:
    nqp_get_sc_object $P5040, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5041, $P5040
  if863_end2225:
    get_who $P5035, $P5041
    set fb_tmp_138, $P5035
    repr_defined $I5007, fb_tmp_138
    unless $I5007 goto if862_else2222 
    set $P5042, fb_tmp_138["SVal"]
    set $P5044, $P5042
    goto if862_end2223
  if862_else2222:
    null $P5043
    set $P5044, $P5043
  if862_end2223:
    unless_null $P5044, vivi_8642226
    nqp_get_sc_object $P5045, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5044, $P5045
  vivi_8642226:
    $P5046 = $P5044."new"("" :named("value"))
    $P5047 = $P5021."new"($P5034, $P5046)
    $P5048 = $P5010."new"($P5047, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!from" :named("name"), _lex_param_1 :named("node"))
    $P5049 = _lex_param_1."!make"($P5048)
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_140_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 527
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_139 
    .local pmc pkg_lookup_tmp_47 
    .local pmc fb_tmp_140 
    .local pmc pkg_lookup_tmp_48 
    .local pmc fb_tmp_141 
    .local pmc pkg_lookup_tmp_49 
    .local pmc fb_tmp_142 
    .local pmc pkg_lookup_tmp_50 
.annotate 'line', 528
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_47, $P5002
    get_who $P5003, pkg_lookup_tmp_47
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if866_else2229 
    get_who $P5005, pkg_lookup_tmp_47
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if866_end2230
  if866_else2229:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if866_end2230:
    get_who $P5001, $P5007
    set fb_tmp_139, $P5001
    repr_defined $I5001, fb_tmp_139
    unless $I5001 goto if865_else2227 
    set $P5008, fb_tmp_139["Regex"]
    set $P5010, $P5008
    goto if865_end2228
  if865_else2227:
    null $P5009
    set $P5010, $P5009
  if865_end2228:
    unless_null $P5010, vivi_8672231
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_8672231:
.annotate 'line', 530
    nqp_get_sc_object $P5013, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_48, $P5013
    get_who $P5014, pkg_lookup_tmp_48
    exists $I5004, $P5014["QAST"]
    unless $I5004 goto if869_else2234 
    get_who $P5016, pkg_lookup_tmp_48
    set $P5015, $P5016["QAST"]
    set $P5018, $P5015
    goto if869_end2235
  if869_else2234:
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5017
  if869_end2235:
    get_who $P5012, $P5018
    set fb_tmp_140, $P5012
    repr_defined $I5003, fb_tmp_140
    unless $I5003 goto if868_else2232 
    set $P5019, fb_tmp_140["Node"]
    set $P5021, $P5019
    goto if868_end2233
  if868_else2232:
    null $P5020
    set $P5021, $P5020
  if868_end2233:
    unless_null $P5021, vivi_8702236
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5021, $P5022
  vivi_8702236:
.annotate 'line', 531
    nqp_get_sc_object $P5024, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_49, $P5024
    get_who $P5025, pkg_lookup_tmp_49
    exists $I5006, $P5025["QAST"]
    unless $I5006 goto if872_else2239 
    get_who $P5027, pkg_lookup_tmp_49
    set $P5026, $P5027["QAST"]
    set $P5029, $P5026
    goto if872_end2240
  if872_else2239:
    nqp_get_sc_object $P5028, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5029, $P5028
  if872_end2240:
    get_who $P5023, $P5029
    set fb_tmp_141, $P5023
    repr_defined $I5005, fb_tmp_141
    unless $I5005 goto if871_else2237 
    set $P5030, fb_tmp_141["SVal"]
    set $P5032, $P5030
    goto if871_end2238
  if871_else2237:
    null $P5031
    set $P5032, $P5031
  if871_end2238:
    unless_null $P5032, vivi_8732241
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5033
  vivi_8732241:
    $P5034 = $P5032."new"("!LITERAL" :named("value"))
.annotate 'line', 532
    nqp_get_sc_object $P5036, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_50, $P5036
    get_who $P5037, pkg_lookup_tmp_50
    exists $I5008, $P5037["QAST"]
    unless $I5008 goto if875_else2244 
    get_who $P5039, pkg_lookup_tmp_50
    set $P5038, $P5039["QAST"]
    set $P5041, $P5038
    goto if875_end2245
  if875_else2244:
    nqp_get_sc_object $P5040, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5041, $P5040
  if875_end2245:
    get_who $P5035, $P5041
    set fb_tmp_142, $P5035
    repr_defined $I5007, fb_tmp_142
    unless $I5007 goto if874_else2242 
    set $P5042, fb_tmp_142["SVal"]
    set $P5044, $P5042
    goto if874_end2243
  if874_else2242:
    null $P5043
    set $P5044, $P5043
  if874_end2243:
    unless_null $P5044, vivi_8762246
    nqp_get_sc_object $P5045, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5044, $P5045
  vivi_8762246:
    $P5046 = $P5044."new"("" :named("value"))
    $P5047 = $P5021."new"($P5034, $P5046)
    $P5048 = $P5010."new"($P5047, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!to" :named("name"), _lex_param_1 :named("node"))
    $P5049 = _lex_param_1."!make"($P5048)
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_141_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 535
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_143 
.annotate 'line', 536
    unless_null _lex_param_1, fallback2249
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5001
  fallback2249:
    set fb_tmp_143, _lex_param_1
    repr_defined $I5001, fb_tmp_143
    unless $I5001 goto if877_else2247 
    set $P5002, fb_tmp_143["backslash"]
    set $P5004, $P5002
    goto if877_end2248
  if877_else2247:
    null $P5003
    set $P5004, $P5003
  if877_end2248:
    unless_null $P5004, vivi_8782250
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_8782250:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_142_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 539
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_144 
.annotate 'line', 540
    unless_null _lex_param_1, fallback2253
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5001
  fallback2253:
    set fb_tmp_144, _lex_param_1
    repr_defined $I5001, fb_tmp_144
    unless $I5001 goto if879_else2251 
    set $P5002, fb_tmp_144["assertion"]
    set $P5004, $P5002
    goto if879_end2252
  if879_else2251:
    null $P5003
    set $P5004, $P5003
  if879_end2252:
    unless_null $P5004, vivi_8802254
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_8802254:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_143_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 543
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_145 
    .local pmc fb_tmp_146 
    .local pmc fb_tmp_147 
    .local pmc fb_tmp_148 
    .local pmc fb_tmp_149 
    .local pmc fb_tmp_150 
    .local pmc fb_tmp_151 
    .local pmc fb_tmp_152 
    .local pmc fb_tmp_153 
    .local pmc pkg_lookup_tmp_51 
    .local pmc fb_tmp_154 
    .local pmc pkg_lookup_tmp_52 
    .local pmc fb_tmp_155 
    .local pmc pkg_lookup_tmp_53 
    .local pmc fb_tmp_156 
    .local pmc pkg_lookup_tmp_54 
    .local pmc fb_tmp_157 
    .local pmc pkg_lookup_tmp_55 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2259
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5003
  fallback2259:
    set fb_tmp_145, _lex_param_1
    repr_defined $I5001, fb_tmp_145
    unless $I5001 goto if882_else2257 
    set $P5004, fb_tmp_145["pos"]
    set $P5006, $P5004
    goto if882_end2258
  if882_else2257:
    null $P5005
    set $P5006, $P5005
  if882_end2258:
    unless_null $P5006, vivi_8832260
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_8832260:
    unless $P5006 goto if881_else2255 
    unless_null _lex_param_1, fallback2263
    nqp_get_sc_object $P5008, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5008
  fallback2263:
    set fb_tmp_146, _lex_param_1
    repr_defined $I5002, fb_tmp_146
    unless $I5002 goto if884_else2261 
    set $P5009, fb_tmp_146["pos"]
    set $P5011, $P5009
    goto if884_end2262
  if884_else2261:
    null $P5010
    set $P5011, $P5010
  if884_end2262:
    unless_null $P5011, vivi_8852264
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_8852264:
    set $N5001, $P5011
    box $P5019, $N5001
    set $P5018, $P5019
    goto if881_end2256
  if881_else2255:
    unless_null _lex_param_1, fallback2267
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2267:
    set fb_tmp_147, _lex_param_1
    repr_defined $I5003, fb_tmp_147
    unless $I5003 goto if886_else2265 
    set $P5014, fb_tmp_147["name"]
    set $P5016, $P5014
    goto if886_end2266
  if886_else2265:
    null $P5015
    set $P5016, $P5015
  if886_end2266:
    unless_null $P5016, vivi_8872268
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_8872268:
    set $S5001, $P5016
    box $P5020, $S5001
    set $P5018, $P5020
  if881_end2256:
    set $P102, $P5018
    unless_null _lex_param_1, fallback2273
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5021
  fallback2273:
    set fb_tmp_148, _lex_param_1
    repr_defined $I5004, fb_tmp_148
    unless $I5004 goto if889_else2271 
    set $P5022, fb_tmp_148["quantified_atom"]
    set $P5024, $P5022
    goto if889_end2272
  if889_else2271:
    null $P5023
    set $P5024, $P5023
  if889_end2272:
    unless_null $P5024, vivi_8902274
    nqp_get_sc_object $P5025, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5024, $P5025
  vivi_8902274:
    unless $P5024 goto if888_else2269 
.annotate 'line', 546
.annotate 'line', 547
    unless_null _lex_param_1, fallback2279
    nqp_get_sc_object $P5026, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5026
  fallback2279:
    set fb_tmp_150, _lex_param_1
    repr_defined $I5006, fb_tmp_150
    unless $I5006 goto if892_else2277 
    set $P5027, fb_tmp_150["quantified_atom"]
    set $P5029, $P5027
    goto if892_end2278
  if892_else2277:
    null $P5028
    set $P5029, $P5028
  if892_end2278:
    unless_null $P5029, vivi_8932280
    nqp_get_sc_object $P5030, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5029, $P5030
  vivi_8932280:
    set fb_tmp_149, $P5029
    repr_defined $I5005, fb_tmp_149
    unless $I5005 goto if891_else2275 
    set $P5031, fb_tmp_149[0]
    set $P5033, $P5031
    goto if891_end2276
  if891_else2275:
    null $P5032
    set $P5033, $P5032
  if891_end2276:
    unless_null $P5033, vivi_8942281
    nqp_get_sc_object $P5034, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5033, $P5034
  vivi_8942281:
    $P5035 = $P5033."ast"()
    set $P101, $P5035
.annotate 'line', 548
    $P5036 = $P101."rxtype"()
    set $S5002, $P5036
    iseq $I5007, $S5002, "quant"
    set $I5010, $I5007
    unless $I5007 goto if896_end2285 
    set fb_tmp_151, $P101
    repr_defined $I5009, fb_tmp_151
    unless $I5009 goto if897_else2286 
    set $P5037, fb_tmp_151[0]
    set $P5039, $P5037
    goto if897_end2287
  if897_else2286:
    null $P5038
    set $P5039, $P5038
  if897_end2287:
    unless_null $P5039, vivi_8982288
    nqp_get_sc_object $P5040, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5039, $P5040
  vivi_8982288:
    $P5041 = $P5039."rxtype"()
    set $S5003, $P5041
    iseq $I5008, $S5003, "subrule"
    set $I5010, $I5008
  if896_end2285:
    unless $I5010 goto if895_else2282 
.annotate 'line', 549
    nqp_decontainerize $P5042, _lex_param_0
    set fb_tmp_152, $P101
    repr_defined $I5011, fb_tmp_152
    unless $I5011 goto if899_else2289 
    set $P5043, fb_tmp_152[0]
    set $P5045, $P5043
    goto if899_end2290
  if899_else2289:
    null $P5044
    set $P5045, $P5044
  if899_end2290:
    unless_null $P5045, vivi_9002291
    nqp_get_sc_object $P5046, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5045, $P5046
  vivi_9002291:
    $P5047 = $P5042."subrule_alias"($P5045, $P102)
    set $P5064, $P5047
    goto if895_end2283
  if895_else2282:
.annotate 'line', 551
    $P5048 = $P101."rxtype"()
    set $S5004, $P5048
    iseq $I5012, $S5004, "subrule"
    unless $I5012 goto if901_else2292 
.annotate 'line', 552
    nqp_decontainerize $P5049, _lex_param_0
    $P5050 = $P5049."subrule_alias"($P101, $P102)
    set $P5063, $P5050
    goto if901_end2293
  if901_else2292:
.annotate 'line', 554
.annotate 'line', 555
    nqp_get_sc_object $P5052, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_51, $P5052
    get_who $P5053, pkg_lookup_tmp_51
    exists $I5014, $P5053["QAST"]
    unless $I5014 goto if903_else2296 
    get_who $P5055, pkg_lookup_tmp_51
    set $P5054, $P5055["QAST"]
    set $P5057, $P5054
    goto if903_end2297
  if903_else2296:
    nqp_get_sc_object $P5056, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5057, $P5056
  if903_end2297:
    get_who $P5051, $P5057
    set fb_tmp_153, $P5051
    repr_defined $I5013, fb_tmp_153
    unless $I5013 goto if902_else2294 
    set $P5058, fb_tmp_153["Regex"]
    set $P5060, $P5058
    goto if902_end2295
  if902_else2294:
    null $P5059
    set $P5060, $P5059
  if902_end2295:
    unless_null $P5060, vivi_9042298
    nqp_get_sc_object $P5061, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5060, $P5061
  vivi_9042298:
    $P5062 = $P5060."new"($P101, $P102 :named("name"), "subcapture" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5062
    set $P5063, $P101
  if901_end2293:
    set $P5064, $P5063
  if895_end2283:
    goto if888_end2270
  if888_else2269:
.annotate 'line', 559
.annotate 'line', 560
    nqp_get_sc_object $P5066, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_52, $P5066
    get_who $P5067, pkg_lookup_tmp_52
    exists $I5016, $P5067["QAST"]
    unless $I5016 goto if906_else2301 
    get_who $P5069, pkg_lookup_tmp_52
    set $P5068, $P5069["QAST"]
    set $P5071, $P5068
    goto if906_end2302
  if906_else2301:
    nqp_get_sc_object $P5070, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5071, $P5070
  if906_end2302:
    get_who $P5065, $P5071
    set fb_tmp_154, $P5065
    repr_defined $I5015, fb_tmp_154
    unless $I5015 goto if905_else2299 
    set $P5072, fb_tmp_154["Regex"]
    set $P5074, $P5072
    goto if905_end2300
  if905_else2299:
    null $P5073
    set $P5074, $P5073
  if905_end2300:
    unless_null $P5074, vivi_9072303
    nqp_get_sc_object $P5075, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5074, $P5075
  vivi_9072303:
.annotate 'line', 561
    nqp_get_sc_object $P5077, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_53, $P5077
    get_who $P5078, pkg_lookup_tmp_53
    exists $I5018, $P5078["QAST"]
    unless $I5018 goto if909_else2306 
    get_who $P5080, pkg_lookup_tmp_53
    set $P5079, $P5080["QAST"]
    set $P5082, $P5079
    goto if909_end2307
  if909_else2306:
    nqp_get_sc_object $P5081, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5082, $P5081
  if909_end2307:
    get_who $P5076, $P5082
    set fb_tmp_155, $P5076
    repr_defined $I5017, fb_tmp_155
    unless $I5017 goto if908_else2304 
    set $P5083, fb_tmp_155["Node"]
    set $P5085, $P5083
    goto if908_end2305
  if908_else2304:
    null $P5084
    set $P5085, $P5084
  if908_end2305:
    unless_null $P5085, vivi_9102308
    nqp_get_sc_object $P5086, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5085, $P5086
  vivi_9102308:
.annotate 'line', 562
    nqp_get_sc_object $P5088, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_54, $P5088
    get_who $P5089, pkg_lookup_tmp_54
    exists $I5020, $P5089["QAST"]
    unless $I5020 goto if912_else2311 
    get_who $P5091, pkg_lookup_tmp_54
    set $P5090, $P5091["QAST"]
    set $P5093, $P5090
    goto if912_end2312
  if912_else2311:
    nqp_get_sc_object $P5092, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5093, $P5092
  if912_end2312:
    get_who $P5087, $P5093
    set fb_tmp_156, $P5087
    repr_defined $I5019, fb_tmp_156
    unless $I5019 goto if911_else2309 
    set $P5094, fb_tmp_156["SVal"]
    set $P5096, $P5094
    goto if911_end2310
  if911_else2309:
    null $P5095
    set $P5096, $P5095
  if911_end2310:
    unless_null $P5096, vivi_9132313
    nqp_get_sc_object $P5097, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5096, $P5097
  vivi_9132313:
    $P5098 = $P5096."new"("!BACKREF" :named("value"))
.annotate 'line', 563
    nqp_get_sc_object $P5100, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_55, $P5100
    get_who $P5101, pkg_lookup_tmp_55
    exists $I5022, $P5101["QAST"]
    unless $I5022 goto if915_else2316 
    get_who $P5103, pkg_lookup_tmp_55
    set $P5102, $P5103["QAST"]
    set $P5105, $P5102
    goto if915_end2317
  if915_else2316:
    nqp_get_sc_object $P5104, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5105, $P5104
  if915_end2317:
    get_who $P5099, $P5105
    set fb_tmp_157, $P5099
    repr_defined $I5021, fb_tmp_157
    unless $I5021 goto if914_else2314 
    set $P5106, fb_tmp_157["SVal"]
    set $P5108, $P5106
    goto if914_end2315
  if914_else2314:
    null $P5107
    set $P5108, $P5107
  if914_end2315:
    unless_null $P5108, vivi_9162318
    nqp_get_sc_object $P5109, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5108, $P5109
  vivi_9162318:
    $P5110 = $P5108."new"($P102 :named("value"))
    $P5111 = $P5085."new"($P5098, $P5110)
    $P5112 = $P5074."new"($P5111, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5112
  if888_end2270:
.annotate 'line', 565
    $P5113 = _lex_param_1."!make"($P101)
    .return ($P5113) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_144_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 568
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@dba", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_158 
    .local pmc pkg_viv_tmp_10 
    .local pmc fb_tmp_159 
    .local pmc pkg_lookup_tmp_56 
    .local pmc fb_tmp_160 
    .local pmc fb_tmp_161 
    .local pmc pkg_viv_tmp_9 
    .local pmc fb_tmp_162 
    .local pmc pkg_lookup_tmp_57 
    .local pmc fb_tmp_163 
    .local pmc fb_tmp_164 
    .local pmc pkg_lookup_tmp_58 
    .local pmc fb_tmp_165 
    .local pmc fb_tmp_166 
    .local pmc pkg_lookup_tmp_59 
    .local pmc fb_tmp_167 
    .local pmc pkg_lookup_tmp_60 
    .local pmc fb_tmp_168 
    .local pmc pkg_lookup_tmp_61 
    .local pmc fb_tmp_169 
    .local pmc pkg_lookup_tmp_62 
    .local pmc fb_tmp_170 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback2321
    nqp_get_sc_object $P5004, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_10, $P5003
    set fb_tmp_158, pkg_viv_tmp_10
    repr_defined $I5002, fb_tmp_158
    unless $I5002 goto if918_else2322 
    set $P5005, fb_tmp_158["%RX"]
    set $P5007, $P5005
    goto if918_end2323
  if918_else2322:
    null $P5006
    set $P5007, $P5006
  if918_end2323:
    unless_null $P5007, vivi_9192324
    new $P5008, 'Hash'
    set pkg_viv_tmp_10["%RX"], $P5008
    set $P5007, $P5008
  vivi_9192324:
    unless_null $P5007, vivi_9202325
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_9202325:
    set $P5002, $P5007
  fallback2321:
    exists $I5001, $P5002["dba"]
    unless $I5001 goto if917_end2320 
    new $P5010, 'ResizablePMCArray'
.annotate 'line', 569
    nqp_get_sc_object $P5012, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_56, $P5012
    get_who $P5013, pkg_lookup_tmp_56
    exists $I5004, $P5013["QAST"]
    unless $I5004 goto if922_else2328 
    get_who $P5015, pkg_lookup_tmp_56
    set $P5014, $P5015["QAST"]
    set $P5017, $P5014
    goto if922_end2329
  if922_else2328:
    nqp_get_sc_object $P5016, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5017, $P5016
  if922_end2329:
    get_who $P5011, $P5017
    set fb_tmp_159, $P5011
    repr_defined $I5003, fb_tmp_159
    unless $I5003 goto if921_else2326 
    set $P5018, fb_tmp_159["SVal"]
    set $P5020, $P5018
    goto if921_end2327
  if921_else2326:
    null $P5019
    set $P5020, $P5019
  if921_end2327:
    unless_null $P5020, vivi_9232330
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5021
  vivi_9232330:
    find_dynamic_lex $P5022, "%*RX"
    unless_null $P5022, fallback2333
    nqp_get_sc_object $P5024, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5023, $P5024
    set pkg_viv_tmp_9, $P5023
    set fb_tmp_161, pkg_viv_tmp_9
    repr_defined $I5006, fb_tmp_161
    unless $I5006 goto if925_else2334 
    set $P5025, fb_tmp_161["%RX"]
    set $P5027, $P5025
    goto if925_end2335
  if925_else2334:
    null $P5026
    set $P5027, $P5026
  if925_end2335:
    unless_null $P5027, vivi_9262336
    new $P5028, 'Hash'
    set pkg_viv_tmp_9["%RX"], $P5028
    set $P5027, $P5028
  vivi_9262336:
    unless_null $P5027, vivi_9272337
    die "Contextual %*RX not found"
    box $P5029, "Contextual %*RX not found"
    set $P5027, $P5029
  vivi_9272337:
    set $P5022, $P5027
  fallback2333:
    set fb_tmp_160, $P5022
    repr_defined $I5005, fb_tmp_160
    unless $I5005 goto if924_else2331 
    set $P5030, fb_tmp_160["dba"]
    set $P5032, $P5030
    goto if924_end2332
  if924_else2331:
    null $P5031
    set $P5032, $P5031
  if924_end2332:
    unless_null $P5032, vivi_9282338
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5033
  vivi_9282338:
    $P5034 = $P5020."new"($P5032 :named("value"))
    push $P5010, $P5034
    set $P101, $P5010
  if917_end2320:
.annotate 'line', 570
    nqp_get_sc_object $P5036, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_57, $P5036
    get_who $P5037, pkg_lookup_tmp_57
    exists $I5008, $P5037["QAST"]
    unless $I5008 goto if930_else2341 
    get_who $P5039, pkg_lookup_tmp_57
    set $P5038, $P5039["QAST"]
    set $P5041, $P5038
    goto if930_end2342
  if930_else2341:
    nqp_get_sc_object $P5040, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5041, $P5040
  if930_end2342:
    get_who $P5035, $P5041
    set fb_tmp_162, $P5035
    repr_defined $I5007, fb_tmp_162
    unless $I5007 goto if929_else2339 
    set $P5042, fb_tmp_162["Regex"]
    set $P5044, $P5042
    goto if929_end2340
  if929_else2339:
    null $P5043
    set $P5044, $P5043
  if929_end2340:
    unless_null $P5044, vivi_9312343
    nqp_get_sc_object $P5045, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5044, $P5045
  vivi_9312343:
.annotate 'line', 571
    unless_null _lex_param_1, fallback2346
    nqp_get_sc_object $P5046, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5046
  fallback2346:
    set fb_tmp_163, _lex_param_1
    repr_defined $I5009, fb_tmp_163
    unless $I5009 goto if932_else2344 
    set $P5047, fb_tmp_163["EXPR"]
    set $P5049, $P5047
    goto if932_end2345
  if932_else2344:
    null $P5048
    set $P5049, $P5048
  if932_end2345:
    unless_null $P5049, vivi_9332347
    nqp_get_sc_object $P5050, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5049, $P5050
  vivi_9332347:
    $P5051 = $P5049."ast"()
.annotate 'line', 572
    nqp_get_sc_object $P5053, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_58, $P5053
    get_who $P5054, pkg_lookup_tmp_58
    exists $I5011, $P5054["QAST"]
    unless $I5011 goto if935_else2350 
    get_who $P5056, pkg_lookup_tmp_58
    set $P5055, $P5056["QAST"]
    set $P5058, $P5055
    goto if935_end2351
  if935_else2350:
    nqp_get_sc_object $P5057, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5058, $P5057
  if935_end2351:
    get_who $P5052, $P5058
    set fb_tmp_164, $P5052
    repr_defined $I5010, fb_tmp_164
    unless $I5010 goto if934_else2348 
    set $P5059, fb_tmp_164["Regex"]
    set $P5061, $P5059
    goto if934_end2349
  if934_else2348:
    null $P5060
    set $P5061, $P5060
  if934_end2349:
    unless_null $P5061, vivi_9362352
    nqp_get_sc_object $P5062, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5061, $P5062
  vivi_9362352:
.annotate 'line', 573
    unless_null _lex_param_1, fallback2355
    nqp_get_sc_object $P5063, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5063
  fallback2355:
    set fb_tmp_165, _lex_param_1
    repr_defined $I5012, fb_tmp_165
    unless $I5012 goto if937_else2353 
    set $P5064, fb_tmp_165["GOAL"]
    set $P5066, $P5064
    goto if937_end2354
  if937_else2353:
    null $P5065
    set $P5066, $P5065
  if937_end2354:
    unless_null $P5066, vivi_9382356
    nqp_get_sc_object $P5067, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5066, $P5067
  vivi_9382356:
    $P5068 = $P5066."ast"()
.annotate 'line', 574
    nqp_get_sc_object $P5070, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_59, $P5070
    get_who $P5071, pkg_lookup_tmp_59
    exists $I5014, $P5071["QAST"]
    unless $I5014 goto if940_else2359 
    get_who $P5073, pkg_lookup_tmp_59
    set $P5072, $P5073["QAST"]
    set $P5075, $P5072
    goto if940_end2360
  if940_else2359:
    nqp_get_sc_object $P5074, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5075, $P5074
  if940_end2360:
    get_who $P5069, $P5075
    set fb_tmp_166, $P5069
    repr_defined $I5013, fb_tmp_166
    unless $I5013 goto if939_else2357 
    set $P5076, fb_tmp_166["Regex"]
    set $P5078, $P5076
    goto if939_end2358
  if939_else2357:
    null $P5077
    set $P5078, $P5077
  if939_end2358:
    unless_null $P5078, vivi_9412361
    nqp_get_sc_object $P5079, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5078, $P5079
  vivi_9412361:
.annotate 'line', 575
    nqp_get_sc_object $P5081, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_60, $P5081
    get_who $P5082, pkg_lookup_tmp_60
    exists $I5016, $P5082["QAST"]
    unless $I5016 goto if943_else2364 
    get_who $P5084, pkg_lookup_tmp_60
    set $P5083, $P5084["QAST"]
    set $P5086, $P5083
    goto if943_end2365
  if943_else2364:
    nqp_get_sc_object $P5085, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5086, $P5085
  if943_end2365:
    get_who $P5080, $P5086
    set fb_tmp_167, $P5080
    repr_defined $I5015, fb_tmp_167
    unless $I5015 goto if942_else2362 
    set $P5087, fb_tmp_167["Node"]
    set $P5089, $P5087
    goto if942_end2363
  if942_else2362:
    null $P5088
    set $P5089, $P5088
  if942_end2363:
    unless_null $P5089, vivi_9442366
    nqp_get_sc_object $P5090, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5089, $P5090
  vivi_9442366:
.annotate 'line', 576
    nqp_get_sc_object $P5092, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_61, $P5092
    get_who $P5093, pkg_lookup_tmp_61
    exists $I5018, $P5093["QAST"]
    unless $I5018 goto if946_else2369 
    get_who $P5095, pkg_lookup_tmp_61
    set $P5094, $P5095["QAST"]
    set $P5097, $P5094
    goto if946_end2370
  if946_else2369:
    nqp_get_sc_object $P5096, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5097, $P5096
  if946_end2370:
    get_who $P5091, $P5097
    set fb_tmp_168, $P5091
    repr_defined $I5017, fb_tmp_168
    unless $I5017 goto if945_else2367 
    set $P5098, fb_tmp_168["SVal"]
    set $P5100, $P5098
    goto if945_end2368
  if945_else2367:
    null $P5099
    set $P5100, $P5099
  if945_end2368:
    unless_null $P5100, vivi_9472371
    nqp_get_sc_object $P5101, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5100, $P5101
  vivi_9472371:
    $P5102 = $P5100."new"("FAILGOAL" :named("value"))
.annotate 'line', 577
    nqp_get_sc_object $P5104, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_62, $P5104
    get_who $P5105, pkg_lookup_tmp_62
    exists $I5020, $P5105["QAST"]
    unless $I5020 goto if949_else2374 
    get_who $P5107, pkg_lookup_tmp_62
    set $P5106, $P5107["QAST"]
    set $P5109, $P5106
    goto if949_end2375
  if949_else2374:
    nqp_get_sc_object $P5108, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5109, $P5108
  if949_end2375:
    get_who $P5103, $P5109
    set fb_tmp_169, $P5103
    repr_defined $I5019, fb_tmp_169
    unless $I5019 goto if948_else2372 
    set $P5110, fb_tmp_169["SVal"]
    set $P5112, $P5110
    goto if948_end2373
  if948_else2372:
    null $P5111
    set $P5112, $P5111
  if948_end2373:
    unless_null $P5112, vivi_9502376
    nqp_get_sc_object $P5113, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5112, $P5113
  vivi_9502376:
    unless_null _lex_param_1, fallback2379
    nqp_get_sc_object $P5114, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5114
  fallback2379:
    set fb_tmp_170, _lex_param_1
    repr_defined $I5021, fb_tmp_170
    unless $I5021 goto if951_else2377 
    set $P5115, fb_tmp_170["GOAL"]
    set $P5117, $P5115
    goto if951_end2378
  if951_else2377:
    null $P5116
    set $P5117, $P5116
  if951_end2378:
    unless_null $P5117, vivi_9522380
    nqp_get_sc_object $P5118, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5117, $P5118
  vivi_9522380:
    set $S5001, $P5117
    $P5119 = $P5112."new"($S5001 :named("value"))
    $P5120 = $P5089."new"($P5102, $P5119, $P101 :flat)
    $P5121 = $P5078."new"($P5120, "subrule" :named("rxtype"), "method" :named("subtype"))
    $P5122 = $P5061."new"($P5068, $P5121, "altseq" :named("rxtype"))
    $P5123 = $P5044."new"($P5051, $P5122, "concat" :named("rxtype"))
    $P5124 = _lex_param_1."!make"($P5123)
    .return ($P5124) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_145_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 585
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_171 
    unless_null _lex_param_1, fallback2383
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5001
  fallback2383:
    set fb_tmp_171, _lex_param_1
    repr_defined $I5001, fb_tmp_171
    unless $I5001 goto if953_else2381 
    set $P5002, fb_tmp_171["mod_internal"]
    set $P5004, $P5002
    goto if953_end2382
  if953_else2381:
    null $P5003
    set $P5004, $P5003
  if953_end2382:
    unless_null $P5004, vivi_9542384
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_9542384:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_146_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 587
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_172 
    .local pmc pkg_lookup_tmp_63 
    .local pmc fb_tmp_173 
    .local pmc fb_tmp_174 
    .local pmc fb_tmp_175 
.annotate 'line', 588
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_63, $P5002
    get_who $P5003, pkg_lookup_tmp_63
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if956_else2387 
    get_who $P5005, pkg_lookup_tmp_63
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if956_end2388
  if956_else2387:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if956_end2388:
    get_who $P5001, $P5007
    set fb_tmp_172, $P5001
    repr_defined $I5001, fb_tmp_172
    unless $I5001 goto if955_else2385 
    set $P5008, fb_tmp_172["Regex"]
    set $P5010, $P5008
    goto if955_end2386
  if955_else2385:
    null $P5009
    set $P5010, $P5009
  if955_end2386:
    unless_null $P5010, vivi_9572389
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_9572389:
    unless_null _lex_param_1, fallback2394
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5012
  fallback2394:
    set fb_tmp_173, _lex_param_1
    repr_defined $I5004, fb_tmp_173
    unless $I5004 goto if959_else2392 
    set $P5013, fb_tmp_173["sym"]
    set $P5015, $P5013
    goto if959_end2393
  if959_else2392:
    null $P5014
    set $P5015, $P5014
  if959_end2393:
    unless_null $P5015, vivi_9602395
    nqp_get_sc_object $P5016, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5016
  vivi_9602395:
    set $S5001, $P5015
    iseq $I5003, $S5001, "n"
    unless $I5003 goto if958_else2390 
    set $S5003, "nl"
    goto if958_end2391
  if958_else2390:
    unless_null _lex_param_1, fallback2398
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5017
  fallback2398:
    set fb_tmp_174, _lex_param_1
    repr_defined $I5005, fb_tmp_174
    unless $I5005 goto if961_else2396 
    set $P5018, fb_tmp_174["sym"]
    set $P5020, $P5018
    goto if961_end2397
  if961_else2396:
    null $P5019
    set $P5020, $P5019
  if961_end2397:
    unless_null $P5020, vivi_9622399
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5021
  vivi_9622399:
    set $S5002, $P5020
    set $S5003, $S5002
  if958_end2391:
    unless_null _lex_param_1, fallback2402
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5022
  fallback2402:
    set fb_tmp_175, _lex_param_1
    repr_defined $I5007, fb_tmp_175
    unless $I5007 goto if963_else2400 
    set $P5023, fb_tmp_175["sym"]
    set $P5025, $P5023
    goto if963_end2401
  if963_else2400:
    null $P5024
    set $P5025, $P5024
  if963_end2401:
    unless_null $P5025, vivi_9642403
    nqp_get_sc_object $P5026, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5025, $P5026
  vivi_9642403:
    set $S5004, $P5025
    isle $I5006, $S5004, "Z"
    $P5027 = $P5010."new"(".CCLASS_WHITESPACE", "cclass" :named("rxtype"), $S5003 :named("subtype"), $I5006 :named("negate"), _lex_param_1 :named("node"))
    $P5028 = _lex_param_1."!make"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_147_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 593
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_176 
    .local pmc pkg_lookup_tmp_64 
    .local pmc fb_tmp_177 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 594
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_64, $P5003
    get_who $P5004, pkg_lookup_tmp_64
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if966_else2406 
    get_who $P5006, pkg_lookup_tmp_64
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if966_end2407
  if966_else2406:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if966_end2407:
    get_who $P5002, $P5008
    set fb_tmp_176, $P5002
    repr_defined $I5001, fb_tmp_176
    unless $I5001 goto if965_else2404 
    set $P5009, fb_tmp_176["Regex"]
    set $P5011, $P5009
    goto if965_end2405
  if965_else2404:
    null $P5010
    set $P5011, $P5010
  if965_end2405:
    unless_null $P5011, vivi_9672408
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_9672408:
    unless_null _lex_param_1, fallback2411
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2411:
    set fb_tmp_177, _lex_param_1
    repr_defined $I5004, fb_tmp_177
    unless $I5004 goto if968_else2409 
    set $P5014, fb_tmp_177["sym"]
    set $P5016, $P5014
    goto if968_end2410
  if968_else2409:
    null $P5015
    set $P5016, $P5015
  if968_end2410:
    unless_null $P5016, vivi_9692412
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_9692412:
    set $S5001, $P5016
    iseq $I5003, $S5001, "B"
    $P5018 = $P5011."new"("\b", "enumcharlist" :named("rxtype"), $I5003 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5018
.annotate 'line', 596
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_148_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 599
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_178 
    .local pmc pkg_lookup_tmp_65 
    .local pmc fb_tmp_179 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 600
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_65, $P5003
    get_who $P5004, pkg_lookup_tmp_65
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if971_else2415 
    get_who $P5006, pkg_lookup_tmp_65
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if971_end2416
  if971_else2415:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if971_end2416:
    get_who $P5002, $P5008
    set fb_tmp_178, $P5002
    repr_defined $I5001, fb_tmp_178
    unless $I5001 goto if970_else2413 
    set $P5009, fb_tmp_178["Regex"]
    set $P5011, $P5009
    goto if970_end2414
  if970_else2413:
    null $P5010
    set $P5011, $P5010
  if970_end2414:
    unless_null $P5011, vivi_9722417
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_9722417:
    unless_null _lex_param_1, fallback2420
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2420:
    set fb_tmp_179, _lex_param_1
    repr_defined $I5004, fb_tmp_179
    unless $I5004 goto if973_else2418 
    set $P5014, fb_tmp_179["sym"]
    set $P5016, $P5014
    goto if973_end2419
  if973_else2418:
    null $P5015
    set $P5016, $P5015
  if973_end2419:
    unless_null $P5016, vivi_9742421
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_9742421:
    set $S5001, $P5016
    iseq $I5003, $S5001, "E"
    $P5018 = $P5011."new"("\e", "enumcharlist" :named("rxtype"), $I5003 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5018
.annotate 'line', 602
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_149_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 605
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_180 
    .local pmc pkg_lookup_tmp_66 
    .local pmc fb_tmp_181 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 606
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_66, $P5003
    get_who $P5004, pkg_lookup_tmp_66
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if976_else2424 
    get_who $P5006, pkg_lookup_tmp_66
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if976_end2425
  if976_else2424:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if976_end2425:
    get_who $P5002, $P5008
    set fb_tmp_180, $P5002
    repr_defined $I5001, fb_tmp_180
    unless $I5001 goto if975_else2422 
    set $P5009, fb_tmp_180["Regex"]
    set $P5011, $P5009
    goto if975_end2423
  if975_else2422:
    null $P5010
    set $P5011, $P5010
  if975_end2423:
    unless_null $P5011, vivi_9772426
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_9772426:
    unless_null _lex_param_1, fallback2429
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2429:
    set fb_tmp_181, _lex_param_1
    repr_defined $I5004, fb_tmp_181
    unless $I5004 goto if978_else2427 
    set $P5014, fb_tmp_181["sym"]
    set $P5016, $P5014
    goto if978_end2428
  if978_else2427:
    null $P5015
    set $P5016, $P5015
  if978_end2428:
    unless_null $P5016, vivi_9792430
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_9792430:
    set $S5001, $P5016
    iseq $I5003, $S5001, "F"
    $P5018 = $P5011."new"("\f", "enumcharlist" :named("rxtype"), $I5003 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5018
.annotate 'line', 608
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_150_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 611
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_182 
    .local pmc pkg_lookup_tmp_67 
    .local pmc fb_tmp_183 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 612
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_67, $P5003
    get_who $P5004, pkg_lookup_tmp_67
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if981_else2433 
    get_who $P5006, pkg_lookup_tmp_67
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if981_end2434
  if981_else2433:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if981_end2434:
    get_who $P5002, $P5008
    set fb_tmp_182, $P5002
    repr_defined $I5001, fb_tmp_182
    unless $I5001 goto if980_else2431 
    set $P5009, fb_tmp_182["Regex"]
    set $P5011, $P5009
    goto if980_end2432
  if980_else2431:
    null $P5010
    set $P5011, $P5010
  if980_end2432:
    unless_null $P5011, vivi_9822435
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_9822435:
    unless_null _lex_param_1, fallback2438
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2438:
    set fb_tmp_183, _lex_param_1
    repr_defined $I5004, fb_tmp_183
    unless $I5004 goto if983_else2436 
    set $P5014, fb_tmp_183["sym"]
    set $P5016, $P5014
    goto if983_end2437
  if983_else2436:
    null $P5015
    set $P5016, $P5015
  if983_end2437:
    unless_null $P5016, vivi_9842439
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_9842439:
    set $S5001, $P5016
    iseq $I5003, $S5001, "H"
    $P5018 = $P5011."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5003 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5018
.annotate 'line', 614
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_151_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 617
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_184 
    .local pmc pkg_lookup_tmp_68 
    .local pmc fb_tmp_185 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 618
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_68, $P5003
    get_who $P5004, pkg_lookup_tmp_68
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if986_else2442 
    get_who $P5006, pkg_lookup_tmp_68
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if986_end2443
  if986_else2442:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if986_end2443:
    get_who $P5002, $P5008
    set fb_tmp_184, $P5002
    repr_defined $I5001, fb_tmp_184
    unless $I5001 goto if985_else2440 
    set $P5009, fb_tmp_184["Regex"]
    set $P5011, $P5009
    goto if985_end2441
  if985_else2440:
    null $P5010
    set $P5011, $P5010
  if985_end2441:
    unless_null $P5011, vivi_9872444
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_9872444:
    unless_null _lex_param_1, fallback2447
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2447:
    set fb_tmp_185, _lex_param_1
    repr_defined $I5004, fb_tmp_185
    unless $I5004 goto if988_else2445 
    set $P5014, fb_tmp_185["sym"]
    set $P5016, $P5014
    goto if988_end2446
  if988_else2445:
    null $P5015
    set $P5016, $P5015
  if988_end2446:
    unless_null $P5016, vivi_9892448
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_9892448:
    set $S5001, $P5016
    iseq $I5003, $S5001, "R"
    $P5018 = $P5011."new"("\r", "enumcharlist" :named("rxtype"), $I5003 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5018
.annotate 'line', 620
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_152_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 623
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_186 
    .local pmc pkg_lookup_tmp_69 
    .local pmc fb_tmp_187 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 624
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_69, $P5003
    get_who $P5004, pkg_lookup_tmp_69
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if991_else2451 
    get_who $P5006, pkg_lookup_tmp_69
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if991_end2452
  if991_else2451:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if991_end2452:
    get_who $P5002, $P5008
    set fb_tmp_186, $P5002
    repr_defined $I5001, fb_tmp_186
    unless $I5001 goto if990_else2449 
    set $P5009, fb_tmp_186["Regex"]
    set $P5011, $P5009
    goto if990_end2450
  if990_else2449:
    null $P5010
    set $P5011, $P5010
  if990_end2450:
    unless_null $P5011, vivi_9922453
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_9922453:
    unless_null _lex_param_1, fallback2456
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2456:
    set fb_tmp_187, _lex_param_1
    repr_defined $I5004, fb_tmp_187
    unless $I5004 goto if993_else2454 
    set $P5014, fb_tmp_187["sym"]
    set $P5016, $P5014
    goto if993_end2455
  if993_else2454:
    null $P5015
    set $P5016, $P5015
  if993_end2455:
    unless_null $P5016, vivi_9942457
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_9942457:
    set $S5001, $P5016
    iseq $I5003, $S5001, "T"
    $P5018 = $P5011."new"("\t", "enumcharlist" :named("rxtype"), $I5003 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5018
.annotate 'line', 626
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_153_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 629
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_188 
    .local pmc pkg_lookup_tmp_70 
    .local pmc fb_tmp_189 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 630
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_70, $P5003
    get_who $P5004, pkg_lookup_tmp_70
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if996_else2460 
    get_who $P5006, pkg_lookup_tmp_70
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if996_end2461
  if996_else2460:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if996_end2461:
    get_who $P5002, $P5008
    set fb_tmp_188, $P5002
    repr_defined $I5001, fb_tmp_188
    unless $I5001 goto if995_else2458 
    set $P5009, fb_tmp_188["Regex"]
    set $P5011, $P5009
    goto if995_end2459
  if995_else2458:
    null $P5010
    set $P5011, $P5010
  if995_end2459:
    unless_null $P5011, vivi_9972462
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_9972462:
    unless_null _lex_param_1, fallback2465
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2465:
    set fb_tmp_189, _lex_param_1
    repr_defined $I5004, fb_tmp_189
    unless $I5004 goto if998_else2463 
    set $P5014, fb_tmp_189["sym"]
    set $P5016, $P5014
    goto if998_end2464
  if998_else2463:
    null $P5015
    set $P5016, $P5015
  if998_end2464:
    unless_null $P5016, vivi_9992466
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_9992466:
    set $S5001, $P5016
    iseq $I5003, $S5001, "V"
    $P5018 = $P5011."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5003 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5018
.annotate 'line', 633
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_154_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 636
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_190 
    .local pmc pkg_lookup_tmp_71 
    .local pmc fb_tmp_191 
    .local pmc fb_tmp_192 
    .local pmc fb_tmp_193 
    .local pmc fb_tmp_194 
    .local pmc fb_tmp_195 
    .local pmc pkg_lookup_tmp_72 
    .local pmc fb_tmp_196 
    .local pmc pkg_lookup_tmp_73 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 638
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_71, $P5003
    get_who $P5004, pkg_lookup_tmp_71
    exists $I5002, $P5004["HLL"]
    unless $I5002 goto if1001_else2469 
    get_who $P5006, pkg_lookup_tmp_71
    set $P5005, $P5006["HLL"]
    set $P5008, $P5005
    goto if1001_end2470
  if1001_else2469:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if1001_end2470:
    get_who $P5002, $P5008
    set fb_tmp_190, $P5002
    repr_defined $I5001, fb_tmp_190
    unless $I5001 goto if1000_else2467 
    set $P5009, fb_tmp_190["Actions"]
    set $P5011, $P5009
    goto if1000_end2468
  if1000_else2467:
    null $P5010
    set $P5011, $P5010
  if1000_end2468:
    unless_null $P5011, vivi_10022471
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_10022471:
    unless_null _lex_param_1, fallback2476
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2476:
    set fb_tmp_191, _lex_param_1
    repr_defined $I5003, fb_tmp_191
    unless $I5003 goto if1004_else2474 
    set $P5014, fb_tmp_191["octint"]
    set $P5016, $P5014
    goto if1004_end2475
  if1004_else2474:
    null $P5015
    set $P5016, $P5015
  if1004_end2475:
    unless_null $P5016, vivi_10052477
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_10052477:
    set $P5027, $P5016
    if $P5016 goto unless1003_end2473 
    unless_null _lex_param_1, fallback2482
    nqp_get_sc_object $P5018, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5018
  fallback2482:
    set fb_tmp_193, _lex_param_1
    repr_defined $I5005, fb_tmp_193
    unless $I5005 goto if1007_else2480 
    set $P5019, fb_tmp_193["octints"]
    set $P5021, $P5019
    goto if1007_end2481
  if1007_else2480:
    null $P5020
    set $P5021, $P5020
  if1007_end2481:
    unless_null $P5021, vivi_10082483
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5021, $P5022
  vivi_10082483:
    set fb_tmp_192, $P5021
    repr_defined $I5004, fb_tmp_192
    unless $I5004 goto if1006_else2478 
    set $P5023, fb_tmp_192["octint"]
    set $P5025, $P5023
    goto if1006_end2479
  if1006_else2478:
    null $P5024
    set $P5025, $P5024
  if1006_end2479:
    unless_null $P5025, vivi_10092484
    nqp_get_sc_object $P5026, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5025, $P5026
  vivi_10092484:
    set $P5027, $P5025
  unless1003_end2473:
    $P5028 = $P5011."ints_to_string"($P5027)
    set $P101, $P5028
.annotate 'line', 639
    unless_null _lex_param_1, fallback2489
    nqp_get_sc_object $P5029, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5029
  fallback2489:
    set fb_tmp_194, _lex_param_1
    repr_defined $I5007, fb_tmp_194
    unless $I5007 goto if1011_else2487 
    set $P5030, fb_tmp_194["sym"]
    set $P5032, $P5030
    goto if1011_end2488
  if1011_else2487:
    null $P5031
    set $P5032, $P5031
  if1011_end2488:
    unless_null $P5032, vivi_10122490
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5033
  vivi_10122490:
    set $S5001, $P5032
    iseq $I5006, $S5001, "O"
    unless $I5006 goto if1010_else2485 
.annotate 'line', 640
    nqp_get_sc_object $P5035, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_72, $P5035
    get_who $P5036, pkg_lookup_tmp_72
    exists $I5009, $P5036["QAST"]
    unless $I5009 goto if1014_else2493 
    get_who $P5038, pkg_lookup_tmp_72
    set $P5037, $P5038["QAST"]
    set $P5040, $P5037
    goto if1014_end2494
  if1014_else2493:
    nqp_get_sc_object $P5039, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5040, $P5039
  if1014_end2494:
    get_who $P5034, $P5040
    set fb_tmp_195, $P5034
    repr_defined $I5008, fb_tmp_195
    unless $I5008 goto if1013_else2491 
    set $P5041, fb_tmp_195["Regex"]
    set $P5043, $P5041
    goto if1013_end2492
  if1013_else2491:
    null $P5042
    set $P5043, $P5042
  if1013_end2492:
    unless_null $P5043, vivi_10152495
    nqp_get_sc_object $P5044, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5043, $P5044
  vivi_10152495:
    $P5045 = $P5043."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5058, $P5045
    goto if1010_end2486
  if1010_else2485:
.annotate 'line', 642
    nqp_get_sc_object $P5047, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_73, $P5047
    get_who $P5048, pkg_lookup_tmp_73
    exists $I5011, $P5048["QAST"]
    unless $I5011 goto if1017_else2498 
    get_who $P5050, pkg_lookup_tmp_73
    set $P5049, $P5050["QAST"]
    set $P5052, $P5049
    goto if1017_end2499
  if1017_else2498:
    nqp_get_sc_object $P5051, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5052, $P5051
  if1017_end2499:
    get_who $P5046, $P5052
    set fb_tmp_196, $P5046
    repr_defined $I5010, fb_tmp_196
    unless $I5010 goto if1016_else2496 
    set $P5053, fb_tmp_196["Regex"]
    set $P5055, $P5053
    goto if1016_end2497
  if1016_else2496:
    null $P5054
    set $P5055, $P5054
  if1016_end2497:
    unless_null $P5055, vivi_10182500
    nqp_get_sc_object $P5056, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5055, $P5056
  vivi_10182500:
    $P5057 = $P5055."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5058, $P5057
  if1010_end2486:
    $P5059 = _lex_param_1."!make"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_155_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 645
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_197 
    .local pmc pkg_lookup_tmp_74 
    .local pmc fb_tmp_198 
    .local pmc fb_tmp_199 
    .local pmc fb_tmp_200 
    .local pmc fb_tmp_201 
    .local pmc fb_tmp_202 
    .local pmc pkg_lookup_tmp_75 
    .local pmc fb_tmp_203 
    .local pmc pkg_lookup_tmp_76 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 647
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_74, $P5003
    get_who $P5004, pkg_lookup_tmp_74
    exists $I5002, $P5004["HLL"]
    unless $I5002 goto if1020_else2503 
    get_who $P5006, pkg_lookup_tmp_74
    set $P5005, $P5006["HLL"]
    set $P5008, $P5005
    goto if1020_end2504
  if1020_else2503:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if1020_end2504:
    get_who $P5002, $P5008
    set fb_tmp_197, $P5002
    repr_defined $I5001, fb_tmp_197
    unless $I5001 goto if1019_else2501 
    set $P5009, fb_tmp_197["Actions"]
    set $P5011, $P5009
    goto if1019_end2502
  if1019_else2501:
    null $P5010
    set $P5011, $P5010
  if1019_end2502:
    unless_null $P5011, vivi_10212505
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_10212505:
    unless_null _lex_param_1, fallback2510
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5013
  fallback2510:
    set fb_tmp_198, _lex_param_1
    repr_defined $I5003, fb_tmp_198
    unless $I5003 goto if1023_else2508 
    set $P5014, fb_tmp_198["hexint"]
    set $P5016, $P5014
    goto if1023_end2509
  if1023_else2508:
    null $P5015
    set $P5016, $P5015
  if1023_end2509:
    unless_null $P5016, vivi_10242511
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_10242511:
    set $P5027, $P5016
    if $P5016 goto unless1022_end2507 
    unless_null _lex_param_1, fallback2516
    nqp_get_sc_object $P5018, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5018
  fallback2516:
    set fb_tmp_200, _lex_param_1
    repr_defined $I5005, fb_tmp_200
    unless $I5005 goto if1026_else2514 
    set $P5019, fb_tmp_200["hexints"]
    set $P5021, $P5019
    goto if1026_end2515
  if1026_else2514:
    null $P5020
    set $P5021, $P5020
  if1026_end2515:
    unless_null $P5021, vivi_10272517
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5021, $P5022
  vivi_10272517:
    set fb_tmp_199, $P5021
    repr_defined $I5004, fb_tmp_199
    unless $I5004 goto if1025_else2512 
    set $P5023, fb_tmp_199["hexint"]
    set $P5025, $P5023
    goto if1025_end2513
  if1025_else2512:
    null $P5024
    set $P5025, $P5024
  if1025_end2513:
    unless_null $P5025, vivi_10282518
    nqp_get_sc_object $P5026, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5025, $P5026
  vivi_10282518:
    set $P5027, $P5025
  unless1022_end2507:
    $P5028 = $P5011."ints_to_string"($P5027)
    set $P101, $P5028
.annotate 'line', 648
    unless_null _lex_param_1, fallback2523
    nqp_get_sc_object $P5029, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5029
  fallback2523:
    set fb_tmp_201, _lex_param_1
    repr_defined $I5007, fb_tmp_201
    unless $I5007 goto if1030_else2521 
    set $P5030, fb_tmp_201["sym"]
    set $P5032, $P5030
    goto if1030_end2522
  if1030_else2521:
    null $P5031
    set $P5032, $P5031
  if1030_end2522:
    unless_null $P5032, vivi_10312524
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5033
  vivi_10312524:
    set $S5001, $P5032
    iseq $I5006, $S5001, "X"
    unless $I5006 goto if1029_else2519 
.annotate 'line', 649
    nqp_get_sc_object $P5035, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_75, $P5035
    get_who $P5036, pkg_lookup_tmp_75
    exists $I5009, $P5036["QAST"]
    unless $I5009 goto if1033_else2527 
    get_who $P5038, pkg_lookup_tmp_75
    set $P5037, $P5038["QAST"]
    set $P5040, $P5037
    goto if1033_end2528
  if1033_else2527:
    nqp_get_sc_object $P5039, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5040, $P5039
  if1033_end2528:
    get_who $P5034, $P5040
    set fb_tmp_202, $P5034
    repr_defined $I5008, fb_tmp_202
    unless $I5008 goto if1032_else2525 
    set $P5041, fb_tmp_202["Regex"]
    set $P5043, $P5041
    goto if1032_end2526
  if1032_else2525:
    null $P5042
    set $P5043, $P5042
  if1032_end2526:
    unless_null $P5043, vivi_10342529
    nqp_get_sc_object $P5044, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5043, $P5044
  vivi_10342529:
    $P5045 = $P5043."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5058, $P5045
    goto if1029_end2520
  if1029_else2519:
.annotate 'line', 651
    nqp_get_sc_object $P5047, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_76, $P5047
    get_who $P5048, pkg_lookup_tmp_76
    exists $I5011, $P5048["QAST"]
    unless $I5011 goto if1036_else2532 
    get_who $P5050, pkg_lookup_tmp_76
    set $P5049, $P5050["QAST"]
    set $P5052, $P5049
    goto if1036_end2533
  if1036_else2532:
    nqp_get_sc_object $P5051, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5052, $P5051
  if1036_end2533:
    get_who $P5046, $P5052
    set fb_tmp_203, $P5046
    repr_defined $I5010, fb_tmp_203
    unless $I5010 goto if1035_else2530 
    set $P5053, fb_tmp_203["Regex"]
    set $P5055, $P5053
    goto if1035_end2531
  if1035_else2530:
    null $P5054
    set $P5055, $P5054
  if1035_end2531:
    unless_null $P5055, vivi_10372534
    nqp_get_sc_object $P5056, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5055, $P5056
  vivi_10372534:
    $P5057 = $P5055."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5058, $P5057
  if1029_end2520:
    $P5059 = _lex_param_1."!make"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_156_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 654
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_204 
    .local pmc pkg_lookup_tmp_77 
    .local pmc fb_tmp_205 
.annotate 'line', 655
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_77, $P5002
    get_who $P5003, pkg_lookup_tmp_77
    exists $I5002, $P5003["QAST"]
    unless $I5002 goto if1039_else2537 
    get_who $P5005, pkg_lookup_tmp_77
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if1039_end2538
  if1039_else2537:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if1039_end2538:
    get_who $P5001, $P5007
    set fb_tmp_204, $P5001
    repr_defined $I5001, fb_tmp_204
    unless $I5001 goto if1038_else2535 
    set $P5008, fb_tmp_204["Regex"]
    set $P5010, $P5008
    goto if1038_end2536
  if1038_else2535:
    null $P5009
    set $P5010, $P5009
  if1038_end2536:
    unless_null $P5010, vivi_10402539
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_10402539:
    unless_null _lex_param_1, fallback2542
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5012
  fallback2542:
    set fb_tmp_205, _lex_param_1
    repr_defined $I5003, fb_tmp_205
    unless $I5003 goto if1041_else2540 
    set $P5013, fb_tmp_205["charspec"]
    set $P5015, $P5013
    goto if1041_end2541
  if1041_else2540:
    null $P5014
    set $P5015, $P5014
  if1041_end2541:
    unless_null $P5015, vivi_10422543
    nqp_get_sc_object $P5016, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5016
  vivi_10422543:
    $P5017 = $P5015."ast"()
    $P5018 = $P5010."new"($P5017, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_157_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 658
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_206 
    .local pmc pkg_lookup_tmp_78 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 659
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_78, $P5003
    get_who $P5004, pkg_lookup_tmp_78
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if1044_else2546 
    get_who $P5006, pkg_lookup_tmp_78
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if1044_end2547
  if1044_else2546:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if1044_end2547:
    get_who $P5002, $P5008
    set fb_tmp_206, $P5002
    repr_defined $I5001, fb_tmp_206
    unless $I5001 goto if1043_else2544 
    set $P5009, fb_tmp_206["Regex"]
    set $P5011, $P5009
    goto if1043_end2545
  if1043_else2544:
    null $P5010
    set $P5011, $P5010
  if1043_end2545:
    unless_null $P5011, vivi_10452548
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_10452548:
    set $S5001, _lex_param_1
    $P5013 = $P5011."new"($S5001, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5013
.annotate 'line', 660
    $P5014 = _lex_param_1."!make"($P101)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_158_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 663
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_207 
    .local pmc fb_tmp_208 
    .local pmc fb_tmp_209 
    .local pmc pkg_lookup_tmp_79 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback2553
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5002
  fallback2553:
    set fb_tmp_207, _lex_param_1
    repr_defined $I5001, fb_tmp_207
    unless $I5001 goto if1047_else2551 
    set $P5003, fb_tmp_207["assertion"]
    set $P5005, $P5003
    goto if1047_end2552
  if1047_else2551:
    null $P5004
    set $P5005, $P5004
  if1047_end2552:
    unless_null $P5005, vivi_10482554
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_10482554:
    unless $P5005 goto if1046_else2549 
.annotate 'line', 665
.annotate 'line', 666
    unless_null _lex_param_1, fallback2557
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5007
  fallback2557:
    set fb_tmp_208, _lex_param_1
    repr_defined $I5002, fb_tmp_208
    unless $I5002 goto if1049_else2555 
    set $P5008, fb_tmp_208["assertion"]
    set $P5010, $P5008
    goto if1049_end2556
  if1049_else2555:
    null $P5009
    set $P5010, $P5009
  if1049_end2556:
    unless_null $P5010, vivi_10502558
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_10502558:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 667
    $P5013 = $P101."subtype"("zerowidth")
    goto if1046_end2550
  if1046_else2549:
.annotate 'line', 669
.annotate 'line', 670
    nqp_get_sc_object $P5015, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_79, $P5015
    get_who $P5016, pkg_lookup_tmp_79
    exists $I5004, $P5016["QAST"]
    unless $I5004 goto if1052_else2561 
    get_who $P5018, pkg_lookup_tmp_79
    set $P5017, $P5018["QAST"]
    set $P5020, $P5017
    goto if1052_end2562
  if1052_else2561:
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5019
  if1052_end2562:
    get_who $P5014, $P5020
    set fb_tmp_209, $P5014
    repr_defined $I5003, fb_tmp_209
    unless $I5003 goto if1051_else2559 
    set $P5021, fb_tmp_209["Regex"]
    set $P5023, $P5021
    goto if1051_end2560
  if1051_else2559:
    null $P5022
    set $P5023, $P5022
  if1051_end2560:
    unless_null $P5023, vivi_10532563
    nqp_get_sc_object $P5024, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5023, $P5024
  vivi_10532563:
    $P5025 = $P5023."new"("anchor" :named("rxtype"), "pass" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5025
  if1046_end2550:
.annotate 'line', 672
    $P5026 = _lex_param_1."!make"($P101)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_159_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 675
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_210 
    .local pmc fb_tmp_211 
    .local pmc fb_tmp_212 
    .local pmc pkg_lookup_tmp_80 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback2568
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5002
  fallback2568:
    set fb_tmp_210, _lex_param_1
    repr_defined $I5001, fb_tmp_210
    unless $I5001 goto if1055_else2566 
    set $P5003, fb_tmp_210["assertion"]
    set $P5005, $P5003
    goto if1055_end2567
  if1055_else2566:
    null $P5004
    set $P5005, $P5004
  if1055_end2567:
    unless_null $P5005, vivi_10562569
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_10562569:
    unless $P5005 goto if1054_else2564 
.annotate 'line', 677
.annotate 'line', 678
    unless_null _lex_param_1, fallback2572
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5007
  fallback2572:
    set fb_tmp_211, _lex_param_1
    repr_defined $I5002, fb_tmp_211
    unless $I5002 goto if1057_else2570 
    set $P5008, fb_tmp_211["assertion"]
    set $P5010, $P5008
    goto if1057_end2571
  if1057_else2570:
    null $P5009
    set $P5010, $P5009
  if1057_end2571:
    unless_null $P5010, vivi_10582573
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_10582573:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 679
    $P5013 = $P101."negate"()
    isfalse $I5003, $P5013
    $P101."negate"($I5003)
.annotate 'line', 680
    $P5014 = $P101."subtype"("zerowidth")
    goto if1054_end2565
  if1054_else2564:
.annotate 'line', 682
.annotate 'line', 683
    nqp_get_sc_object $P5016, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_80, $P5016
    get_who $P5017, pkg_lookup_tmp_80
    exists $I5005, $P5017["QAST"]
    unless $I5005 goto if1060_else2576 
    get_who $P5019, pkg_lookup_tmp_80
    set $P5018, $P5019["QAST"]
    set $P5021, $P5018
    goto if1060_end2577
  if1060_else2576:
    nqp_get_sc_object $P5020, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5021, $P5020
  if1060_end2577:
    get_who $P5015, $P5021
    set fb_tmp_212, $P5015
    repr_defined $I5004, fb_tmp_212
    unless $I5004 goto if1059_else2574 
    set $P5022, fb_tmp_212["Regex"]
    set $P5024, $P5022
    goto if1059_end2575
  if1059_else2574:
    null $P5023
    set $P5024, $P5023
  if1059_end2575:
    unless_null $P5024, vivi_10612578
    nqp_get_sc_object $P5025, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5024, $P5025
  vivi_10612578:
    $P5026 = $P5024."new"("anchor" :named("rxtype"), "fail" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5026
  if1054_end2565:
.annotate 'line', 685
    $P5027 = _lex_param_1."!make"($P101)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_160_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 688
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_213 
    .local pmc fb_tmp_214 
    .local pmc pkg_lookup_tmp_81 
    .local pmc fb_tmp_215 
    .local pmc pkg_lookup_tmp_82 
    .local pmc fb_tmp_216 
    .local pmc pkg_lookup_tmp_83 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2581
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5003
  fallback2581:
    set fb_tmp_213, _lex_param_1
    repr_defined $I5001, fb_tmp_213
    unless $I5001 goto if1062_else2579 
    set $P5004, fb_tmp_213["identifier"]
    set $P5006, $P5004
    goto if1062_end2580
  if1062_else2579:
    null $P5005
    set $P5006, $P5005
  if1062_end2580:
    unless_null $P5006, vivi_10632582
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_10632582:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P102, $P5008
    set $S5002, $P102
    iseq $I5002, $S5002, "c"
    unless $I5002 goto if1064_else2583 
.annotate 'line', 691
    box $P5009, 0
    set $P101, $P5009
    goto if1064_end2584
  if1064_else2583:
    set $S5003, $P102
    iseq $I5003, $S5003, "w"
    box $P5047, $I5003
    set $P5046, $P5047
    unless $I5003 goto if1065_end2586 
.annotate 'line', 696
.annotate 'line', 697
    nqp_get_sc_object $P5011, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_81, $P5011
    get_who $P5012, pkg_lookup_tmp_81
    exists $I5005, $P5012["QAST"]
    unless $I5005 goto if1067_else2589 
    get_who $P5014, pkg_lookup_tmp_81
    set $P5013, $P5014["QAST"]
    set $P5016, $P5013
    goto if1067_end2590
  if1067_else2589:
    nqp_get_sc_object $P5015, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5015
  if1067_end2590:
    get_who $P5010, $P5016
    set fb_tmp_214, $P5010
    repr_defined $I5004, fb_tmp_214
    unless $I5004 goto if1066_else2587 
    set $P5017, fb_tmp_214["Regex"]
    set $P5019, $P5017
    goto if1066_end2588
  if1066_else2587:
    null $P5018
    set $P5019, $P5018
  if1066_end2588:
    unless_null $P5019, vivi_10682591
    nqp_get_sc_object $P5020, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5019, $P5020
  vivi_10682591:
.annotate 'line', 699
    nqp_get_sc_object $P5022, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_82, $P5022
    get_who $P5023, pkg_lookup_tmp_82
    exists $I5007, $P5023["QAST"]
    unless $I5007 goto if1070_else2594 
    get_who $P5025, pkg_lookup_tmp_82
    set $P5024, $P5025["QAST"]
    set $P5027, $P5024
    goto if1070_end2595
  if1070_else2594:
    nqp_get_sc_object $P5026, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5027, $P5026
  if1070_end2595:
    get_who $P5021, $P5027
    set fb_tmp_215, $P5021
    repr_defined $I5006, fb_tmp_215
    unless $I5006 goto if1069_else2592 
    set $P5028, fb_tmp_215["Node"]
    set $P5030, $P5028
    goto if1069_end2593
  if1069_else2592:
    null $P5029
    set $P5030, $P5029
  if1069_end2593:
    unless_null $P5030, vivi_10712596
    nqp_get_sc_object $P5031, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5030, $P5031
  vivi_10712596:
    nqp_get_sc_object $P5033, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_83, $P5033
    get_who $P5034, pkg_lookup_tmp_83
    exists $I5009, $P5034["QAST"]
    unless $I5009 goto if1073_else2599 
    get_who $P5036, pkg_lookup_tmp_83
    set $P5035, $P5036["QAST"]
    set $P5038, $P5035
    goto if1073_end2600
  if1073_else2599:
    nqp_get_sc_object $P5037, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5038, $P5037
  if1073_end2600:
    get_who $P5032, $P5038
    set fb_tmp_216, $P5032
    repr_defined $I5008, fb_tmp_216
    unless $I5008 goto if1072_else2597 
    set $P5039, fb_tmp_216["SVal"]
    set $P5041, $P5039
    goto if1072_end2598
  if1072_else2597:
    null $P5040
    set $P5041, $P5040
  if1072_end2598:
    unless_null $P5041, vivi_10742601
    nqp_get_sc_object $P5042, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5041, $P5042
  vivi_10742601:
    $P5043 = $P5041."new"("wb" :named("value"))
    $P5044 = $P5030."new"($P5043)
    $P5045 = $P5019."new"($P5044, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"), "" :named("name"))
    set $P101, $P5045
    set $P5046, $P101
  if1065_end2586:
  if1064_end2584:
.annotate 'line', 701
    $P5048 = _lex_param_1."!make"($P101)
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_161_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 704
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_217 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 705
    unless_null _lex_param_1, fallback2604
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5002
  fallback2604:
    set fb_tmp_217, _lex_param_1
    repr_defined $I5001, fb_tmp_217
    unless $I5001 goto if1075_else2602 
    set $P5003, fb_tmp_217["assertion"]
    set $P5005, $P5003
    goto if1075_end2603
  if1075_else2602:
    null $P5004
    set $P5005, $P5004
  if1075_end2603:
    unless_null $P5005, vivi_10762605
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_10762605:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
.annotate 'line', 706
    $P101."subtype"("method")
.annotate 'line', 707
    $P101."name"("")
.annotate 'line', 708
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_162_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 711
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5131 = 'cuid_217_1361537946.1303' 
    capture_lex $P5131 
    .const 'Sub' $P5131 = 'cuid_218_1361537946.1303' 
    capture_lex $P5131 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_218 
    .local pmc fb_tmp_219 
    .local pmc fb_tmp_220 
    .local pmc fb_tmp_221 
    .local pmc fb_tmp_230 
    .local pmc pkg_lookup_tmp_86 
    .local pmc fb_tmp_231 
    .local pmc pkg_lookup_tmp_87 
    .local pmc fb_tmp_232 
    .local pmc pkg_lookup_tmp_88 
    .local pmc fb_tmp_233 
    .local pmc fb_tmp_234 
    .local pmc fb_tmp_235 
    .local pmc fb_tmp_237 
    .local pmc fb_tmp_238 
    .local pmc fb_tmp_239 
    .local pmc fb_tmp_240 
    .local pmc fb_tmp_241 
    .local pmc fb_tmp_242 
    .local pmc fb_tmp_243 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback2608
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5003
  fallback2608:
    set fb_tmp_218, _lex_param_1
    repr_defined $I5001, fb_tmp_218
    unless $I5001 goto if1077_else2606 
    set $P5004, fb_tmp_218["longname"]
    set $P5006, $P5004
    goto if1077_end2607
  if1077_else2606:
    null $P5005
    set $P5006, $P5005
  if1077_end2607:
    unless_null $P5006, vivi_10782609
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_10782609:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
    unless_null _lex_param_1, fallback2614
    nqp_get_sc_object $P5009, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5009
  fallback2614:
    set fb_tmp_219, _lex_param_1
    repr_defined $I5002, fb_tmp_219
    unless $I5002 goto if1080_else2612 
    set $P5010, fb_tmp_219["assertion"]
    set $P5012, $P5010
    goto if1080_end2613
  if1080_else2612:
    null $P5011
    set $P5012, $P5011
  if1080_end2613:
    unless_null $P5012, vivi_10812615
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5012, $P5013
  vivi_10812615:
    unless $P5012 goto if1079_else2610 
.annotate 'line', 714
.annotate 'line', 715
    unless_null _lex_param_1, fallback2620
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5014
  fallback2620:
    set fb_tmp_221, _lex_param_1
    repr_defined $I5004, fb_tmp_221
    unless $I5004 goto if1083_else2618 
    set $P5015, fb_tmp_221["assertion"]
    set $P5017, $P5015
    goto if1083_end2619
  if1083_else2618:
    null $P5016
    set $P5017, $P5016
  if1083_end2619:
    unless_null $P5017, vivi_10842621
    nqp_get_sc_object $P5018, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5017, $P5018
  vivi_10842621:
    set fb_tmp_220, $P5017
    repr_defined $I5003, fb_tmp_220
    unless $I5003 goto if1082_else2616 
    set $P5019, fb_tmp_220[0]
    set $P5021, $P5019
    goto if1082_end2617
  if1082_else2616:
    null $P5020
    set $P5021, $P5020
  if1082_end2617:
    unless_null $P5021, vivi_10852622
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5021, $P5022
  vivi_10852622:
    $P5023 = $P5021."ast"()
    set $P102, $P5023
.annotate 'line', 716
    nqp_decontainerize $P5024, _lex_param_0
    $P5025 = $P5024."subrule_alias"($P102, $P101)
    goto if1079_end2611
  if1079_else2610:
    set $S5002, $P101
    iseq $I5005, $S5002, "sym"
    unless $I5005 goto if1086_else2623 
    .const 'Sub' $P5026 = 'cuid_217_1361537946.1303' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5129, $P5027
    goto if1086_end2624
  if1086_else2623:
.annotate 'line', 727
.annotate 'line', 728
    nqp_get_sc_object $P5029, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_86, $P5029
    get_who $P5030, pkg_lookup_tmp_86
    exists $I5007, $P5030["QAST"]
    unless $I5007 goto if1110_else2663 
    get_who $P5032, pkg_lookup_tmp_86
    set $P5031, $P5032["QAST"]
    set $P5034, $P5031
    goto if1110_end2664
  if1110_else2663:
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5034, $P5033
  if1110_end2664:
    get_who $P5028, $P5034
    set fb_tmp_230, $P5028
    repr_defined $I5006, fb_tmp_230
    unless $I5006 goto if1109_else2661 
    set $P5035, fb_tmp_230["Regex"]
    set $P5037, $P5035
    goto if1109_end2662
  if1109_else2661:
    null $P5036
    set $P5037, $P5036
  if1109_end2662:
    unless_null $P5037, vivi_11112665
    nqp_get_sc_object $P5038, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5037, $P5038
  vivi_11112665:
.annotate 'line', 730
    nqp_get_sc_object $P5040, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_87, $P5040
    get_who $P5041, pkg_lookup_tmp_87
    exists $I5009, $P5041["QAST"]
    unless $I5009 goto if1113_else2668 
    get_who $P5043, pkg_lookup_tmp_87
    set $P5042, $P5043["QAST"]
    set $P5045, $P5042
    goto if1113_end2669
  if1113_else2668:
    nqp_get_sc_object $P5044, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5045, $P5044
  if1113_end2669:
    get_who $P5039, $P5045
    set fb_tmp_231, $P5039
    repr_defined $I5008, fb_tmp_231
    unless $I5008 goto if1112_else2666 
    set $P5046, fb_tmp_231["Node"]
    set $P5048, $P5046
    goto if1112_end2667
  if1112_else2666:
    null $P5047
    set $P5048, $P5047
  if1112_end2667:
    unless_null $P5048, vivi_11142670
    nqp_get_sc_object $P5049, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5048, $P5049
  vivi_11142670:
    nqp_get_sc_object $P5051, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_88, $P5051
    get_who $P5052, pkg_lookup_tmp_88
    exists $I5011, $P5052["QAST"]
    unless $I5011 goto if1116_else2673 
    get_who $P5054, pkg_lookup_tmp_88
    set $P5053, $P5054["QAST"]
    set $P5056, $P5053
    goto if1116_end2674
  if1116_else2673:
    nqp_get_sc_object $P5055, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5056, $P5055
  if1116_end2674:
    get_who $P5050, $P5056
    set fb_tmp_232, $P5050
    repr_defined $I5010, fb_tmp_232
    unless $I5010 goto if1115_else2671 
    set $P5057, fb_tmp_232["SVal"]
    set $P5059, $P5057
    goto if1115_end2672
  if1115_else2671:
    null $P5058
    set $P5059, $P5058
  if1115_end2672:
    unless_null $P5059, vivi_11172675
    nqp_get_sc_object $P5060, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5059, $P5060
  vivi_11172675:
    $P5061 = $P5059."new"($P101 :named("value"))
    $P5062 = $P5048."new"($P5061)
    $P5063 = $P5037."new"($P5062, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5063
    unless_null _lex_param_1, fallback2680
    nqp_get_sc_object $P5064, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5064
  fallback2680:
    set fb_tmp_233, _lex_param_1
    repr_defined $I5012, fb_tmp_233
    unless $I5012 goto if1119_else2678 
    set $P5065, fb_tmp_233["arglist"]
    set $P5067, $P5065
    goto if1119_end2679
  if1119_else2678:
    null $P5066
    set $P5067, $P5066
  if1119_end2679:
    unless_null $P5067, vivi_11202681
    nqp_get_sc_object $P5068, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5067, $P5068
  vivi_11202681:
    unless $P5067 goto if1118_else2676 
.annotate 'line', 731
.annotate 'line', 732
    unless_null _lex_param_1, fallback2686
    nqp_get_sc_object $P5072, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5072
  fallback2686:
    set fb_tmp_235, _lex_param_1
    repr_defined $I5014, fb_tmp_235
    unless $I5014 goto if1122_else2684 
    set $P5073, fb_tmp_235["arglist"]
    set $P5075, $P5073
    goto if1122_end2685
  if1122_else2684:
    null $P5074
    set $P5075, $P5074
  if1122_end2685:
    unless_null $P5075, vivi_11232687
    nqp_get_sc_object $P5076, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5075, $P5076
  vivi_11232687:
    set fb_tmp_234, $P5075
    repr_defined $I5013, fb_tmp_234
    unless $I5013 goto if1121_else2682 
    set $P5077, fb_tmp_234[0]
    set $P5079, $P5077
    goto if1121_end2683
  if1121_else2682:
    null $P5078
    set $P5079, $P5078
  if1121_end2683:
    unless_null $P5079, vivi_11242688
    nqp_get_sc_object $P5080, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5079, $P5080
  vivi_11242688:
    $P5081 = $P5079."ast"()
    $P5082 = $P5081."list"()
    set $P5069, $P5082
    iter $P5071, $P5082
  for_next2692:
    unless $P5071, for_done2694
    shift $P5084, $P5071
  for_redo2693:
    .const 'Sub' $P5083 = 'cuid_218_1361537946.1303' 
    capture_lex $P5083
    $P5069 = $P5083($P5084)
    goto for_next2692
  for_done2694:
    set $P5128, $P5069
    goto if1118_end2677
  if1118_else2676:
    unless_null _lex_param_1, fallback2699
    nqp_get_sc_object $P5085, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5085
  fallback2699:
    set fb_tmp_237, _lex_param_1
    repr_defined $I5015, fb_tmp_237
    unless $I5015 goto if1128_else2697 
    set $P5086, fb_tmp_237["nibbler"]
    set $P5088, $P5086
    goto if1128_end2698
  if1128_else2697:
    null $P5087
    set $P5088, $P5087
  if1128_end2698:
    unless_null $P5088, vivi_11292700
    nqp_get_sc_object $P5089, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5088, $P5089
  vivi_11292700:
    set $P5127, $P5088
    unless $P5088 goto if1127_end2696 
.annotate 'line', 734
    set $S5003, $P101
    iseq $I5016, $S5003, "after"
    unless $I5016 goto if1130_else2701 
.annotate 'line', 736
    set fb_tmp_238, $P102
    repr_defined $I5017, fb_tmp_238
    unless $I5017 goto if1131_else2703 
    set $P5090, fb_tmp_238[0]
    set $P5092, $P5090
    goto if1131_end2704
  if1131_else2703:
    null $P5091
    set $P5092, $P5091
  if1131_end2704:
    unless_null $P5092, vivi_11322705
    nqp_get_sc_object $P5093, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5092, $P5093
  vivi_11322705:
    nqp_decontainerize $P5094, _lex_param_0
    nqp_decontainerize $P5095, _lex_param_0
    unless_null _lex_param_1, fallback2710
    nqp_get_sc_object $P5096, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5096
  fallback2710:
    set fb_tmp_240, _lex_param_1
    repr_defined $I5019, fb_tmp_240
    unless $I5019 goto if1134_else2708 
    set $P5097, fb_tmp_240["nibbler"]
    set $P5099, $P5097
    goto if1134_end2709
  if1134_else2708:
    null $P5098
    set $P5099, $P5098
  if1134_end2709:
    unless_null $P5099, vivi_11352711
    nqp_get_sc_object $P5100, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5099, $P5100
  vivi_11352711:
    set fb_tmp_239, $P5099
    repr_defined $I5018, fb_tmp_239
    unless $I5018 goto if1133_else2706 
    set $P5101, fb_tmp_239[0]
    set $P5103, $P5101
    goto if1133_end2707
  if1133_else2706:
    null $P5102
    set $P5103, $P5102
  if1133_end2707:
    unless_null $P5103, vivi_11362712
    nqp_get_sc_object $P5104, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5103, $P5104
  vivi_11362712:
    $P5105 = $P5103."ast"()
    $P5106 = $P5095."flip_ast"($P5105)
    $P5107 = $P5094."qbuildsub"($P5106, 1 :named("anon"), 1 :named("addself"))
    $P5108 = $P5092."push"($P5107)
    set $P5126, $P5108
    goto if1130_end2702
  if1130_else2701:
.annotate 'line', 737
    set fb_tmp_241, $P102
    repr_defined $I5020, fb_tmp_241
    unless $I5020 goto if1137_else2713 
    set $P5109, fb_tmp_241[0]
    set $P5111, $P5109
    goto if1137_end2714
  if1137_else2713:
    null $P5110
    set $P5111, $P5110
  if1137_end2714:
    unless_null $P5111, vivi_11382715
    nqp_get_sc_object $P5112, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5111, $P5112
  vivi_11382715:
    nqp_decontainerize $P5113, _lex_param_0
    unless_null _lex_param_1, fallback2720
    nqp_get_sc_object $P5114, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5114
  fallback2720:
    set fb_tmp_243, _lex_param_1
    repr_defined $I5022, fb_tmp_243
    unless $I5022 goto if1140_else2718 
    set $P5115, fb_tmp_243["nibbler"]
    set $P5117, $P5115
    goto if1140_end2719
  if1140_else2718:
    null $P5116
    set $P5117, $P5116
  if1140_end2719:
    unless_null $P5117, vivi_11412721
    nqp_get_sc_object $P5118, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5117, $P5118
  vivi_11412721:
    set fb_tmp_242, $P5117
    repr_defined $I5021, fb_tmp_242
    unless $I5021 goto if1139_else2716 
    set $P5119, fb_tmp_242[0]
    set $P5121, $P5119
    goto if1139_end2717
  if1139_else2716:
    null $P5120
    set $P5121, $P5120
  if1139_end2717:
    unless_null $P5121, vivi_11422722
    nqp_get_sc_object $P5122, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5121, $P5122
  vivi_11422722:
    $P5123 = $P5121."ast"()
    $P5124 = $P5113."qbuildsub"($P5123, 1 :named("anon"), 1 :named("addself"))
    $P5125 = $P5111."push"($P5124)
    set $P5126, $P5125
  if1130_end2702:
    set $P5127, $P5126
  if1127_end2696:
    set $P5128, $P5127
  if1118_end2677:
    set $P5129, $P5128
  if1086_end2624:
  if1079_end2611:
.annotate 'line', 740
    $P5130 = _lex_param_1."!make"($P102)
    .return ($P5130) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_217_1361537946.1303") :anon :lex :outer("cuid_162_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 718
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    .local pmc fb_tmp_222 
    .local pmc fb_tmp_223 
    .local pmc pkg_viv_tmp_11 
    .local pmc fb_tmp_224 
    .local pmc fb_tmp_225 
    .local pmc pkg_viv_tmp_12 
    .local pmc fb_tmp_226 
    .local pmc fb_tmp_227 
    .local pmc pkg_viv_tmp_13 
    .local pmc fb_tmp_228 
    .local pmc pkg_lookup_tmp_84 
    .local pmc fb_tmp_229 
    .local pmc pkg_lookup_tmp_85 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*RX"
    unless_null $P5003, fallback2627
    nqp_get_sc_object $P5005, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5004, $P5005
    set pkg_viv_tmp_11, $P5004
    set fb_tmp_223, pkg_viv_tmp_11
    repr_defined $I5003, fb_tmp_223
    unless $I5003 goto if1088_else2628 
    set $P5006, fb_tmp_223["%RX"]
    set $P5008, $P5006
    goto if1088_end2629
  if1088_else2628:
    null $P5007
    set $P5008, $P5007
  if1088_end2629:
    unless_null $P5008, vivi_10892630
    new $P5009, 'Hash'
    set pkg_viv_tmp_11["%RX"], $P5009
    set $P5008, $P5009
  vivi_10892630:
    unless_null $P5008, vivi_10902631
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5008, $P5010
  vivi_10902631:
    set $P5003, $P5008
  fallback2627:
    set fb_tmp_222, $P5003
    repr_defined $I5002, fb_tmp_222
    unless $I5002 goto if1087_else2625 
    set $P5011, fb_tmp_222["name"]
    set $P5013, $P5011
    goto if1087_end2626
  if1087_else2625:
    null $P5012
    set $P5013, $P5012
  if1087_end2626:
    unless_null $P5013, vivi_10912632
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5013, $P5014
  vivi_10912632:
    set $S5001, $P5013
    index $I5001, $S5001, ":sym<", 0
    box $P5015, $I5001
    set $P101, $P5015
    set $N5001, $P101
    set $N5002, 0
    islt $I5004, $N5001, $N5002
    unless $I5004 goto if1092_end2634 
    find_dynamic_lex $P5016, "%*RX"
    unless_null $P5016, fallback2637
    nqp_get_sc_object $P5018, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5017, $P5018
    set pkg_viv_tmp_12, $P5017
    set fb_tmp_225, pkg_viv_tmp_12
    repr_defined $I5007, fb_tmp_225
    unless $I5007 goto if1094_else2638 
    set $P5019, fb_tmp_225["%RX"]
    set $P5021, $P5019
    goto if1094_end2639
  if1094_else2638:
    null $P5020
    set $P5021, $P5020
  if1094_end2639:
    unless_null $P5021, vivi_10952640
    new $P5022, 'Hash'
    set pkg_viv_tmp_12["%RX"], $P5022
    set $P5021, $P5022
  vivi_10952640:
    unless_null $P5021, vivi_10962641
    die "Contextual %*RX not found"
    box $P5023, "Contextual %*RX not found"
    set $P5021, $P5023
  vivi_10962641:
    set $P5016, $P5021
  fallback2637:
    set fb_tmp_224, $P5016
    repr_defined $I5006, fb_tmp_224
    unless $I5006 goto if1093_else2635 
    set $P5024, fb_tmp_224["name"]
    set $P5026, $P5024
    goto if1093_end2636
  if1093_else2635:
    null $P5025
    set $P5026, $P5025
  if1093_end2636:
    unless_null $P5026, vivi_10972642
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5027
  vivi_10972642:
    set $S5002, $P5026
    index $I5005, $S5002, utf8:":sym\x{ab}", 0
    box $P5028, $I5005
    set $P101, $P5028
  if1092_end2634:
    find_dynamic_lex $P5029, "%*RX"
    unless_null $P5029, fallback2645
    nqp_get_sc_object $P5031, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5030, $P5031
    set pkg_viv_tmp_13, $P5030
    set fb_tmp_227, pkg_viv_tmp_13
    repr_defined $I5009, fb_tmp_227
    unless $I5009 goto if1099_else2646 
    set $P5032, fb_tmp_227["%RX"]
    set $P5034, $P5032
    goto if1099_end2647
  if1099_else2646:
    null $P5033
    set $P5034, $P5033
  if1099_end2647:
    unless_null $P5034, vivi_11002648
    new $P5035, 'Hash'
    set pkg_viv_tmp_13["%RX"], $P5035
    set $P5034, $P5035
  vivi_11002648:
    unless_null $P5034, vivi_11012649
    die "Contextual %*RX not found"
    box $P5036, "Contextual %*RX not found"
    set $P5034, $P5036
  vivi_11012649:
    set $P5029, $P5034
  fallback2645:
    set fb_tmp_226, $P5029
    repr_defined $I5008, fb_tmp_226
    unless $I5008 goto if1098_else2643 
    set $P5037, fb_tmp_226["name"]
    set $P5039, $P5037
    goto if1098_end2644
  if1098_else2643:
    null $P5038
    set $P5039, $P5038
  if1098_end2644:
    unless_null $P5039, vivi_11022650
    nqp_get_sc_object $P5040, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5039, $P5040
  vivi_11022650:
    set $S5004, $P5039
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5010, $N5003
    substr $S5003, $S5004, $I5010
    box $P5041, $S5003
    set $P102, $P5041
    set $S5006, $P102
    set $S5007, $P102
    length $I5011, $S5007
    set $N5007, $I5011
    set $N5008, 1
    sub $N5006, $N5007, $N5008
    set $I5012, $N5006
    substr $S5005, $S5006, 0, $I5012
    box $P5042, $S5005
    set $P102, $P5042
.annotate 'line', 724
    nqp_get_sc_object $P5044, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_84, $P5044
    get_who $P5045, pkg_lookup_tmp_84
    exists $I5014, $P5045["QAST"]
    unless $I5014 goto if1104_else2653 
    get_who $P5047, pkg_lookup_tmp_84
    set $P5046, $P5047["QAST"]
    set $P5049, $P5046
    goto if1104_end2654
  if1104_else2653:
    nqp_get_sc_object $P5048, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5049, $P5048
  if1104_end2654:
    get_who $P5043, $P5049
    set fb_tmp_228, $P5043
    repr_defined $I5013, fb_tmp_228
    unless $I5013 goto if1103_else2651 
    set $P5050, fb_tmp_228["Regex"]
    set $P5052, $P5050
    goto if1103_end2652
  if1103_else2651:
    null $P5051
    set $P5052, $P5051
  if1103_end2652:
    unless_null $P5052, vivi_11052655
    nqp_get_sc_object $P5053, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5052, $P5053
  vivi_11052655:
    find_lex $P5054, "$/"
.annotate 'line', 725
    nqp_get_sc_object $P5056, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_85, $P5056
    get_who $P5057, pkg_lookup_tmp_85
    exists $I5016, $P5057["QAST"]
    unless $I5016 goto if1107_else2658 
    get_who $P5059, pkg_lookup_tmp_85
    set $P5058, $P5059["QAST"]
    set $P5061, $P5058
    goto if1107_end2659
  if1107_else2658:
    nqp_get_sc_object $P5060, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5061, $P5060
  if1107_end2659:
    get_who $P5055, $P5061
    set fb_tmp_229, $P5055
    repr_defined $I5015, fb_tmp_229
    unless $I5015 goto if1106_else2656 
    set $P5062, fb_tmp_229["Regex"]
    set $P5064, $P5062
    goto if1106_end2657
  if1106_else2656:
    null $P5063
    set $P5064, $P5063
  if1106_end2657:
    unless_null $P5064, vivi_11082660
    nqp_get_sc_object $P5065, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5064, $P5065
  vivi_11082660:
    find_lex $P5066, "$/"
    $P5067 = $P5064."new"($P102, "literal" :named("rxtype"), $P5066 :named("node"))
    $P5068 = $P5052."new"($P5067, "sym" :named("name"), "subcapture" :named("rxtype"), $P5054 :named("node"))
    store_lex "$qast", $P5068
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1361537946.1303") :anon :lex :outer("cuid_162_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 732
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_236 
    find_lex $P5001, "$qast"
    set fb_tmp_236, $P5001
    repr_defined $I5001, fb_tmp_236
    unless $I5001 goto if1125_else2689 
    set $P5002, fb_tmp_236[0]
    set $P5004, $P5002
    goto if1125_end2690
  if1125_else2689:
    null $P5003
    set $P5004, $P5003
  if1125_end2690:
    unless_null $P5004, vivi_11262691
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_11262691:
    $P5006 = $P5004."push"(_lex_param_0)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_163_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 743
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5050 = 'cuid_219_1361537946.1303' 
    capture_lex $P5050 
    .lex "$clist", $P101 
    .lex "$qast", $P102 
    .lex "$i", $P103 
    .lex "$n", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_244 
    .local pmc fb_tmp_245 
    .local pmc fb_tmp_246 
    .local pmc pkg_lookup_tmp_89 
    .local pmc fb_tmp_247 
    .local pmc pkg_lookup_tmp_90 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P104, $P5004
    unless_null _lex_param_1, fallback2725
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5005
  fallback2725:
    set fb_tmp_244, _lex_param_1
    repr_defined $I5001, fb_tmp_244
    unless $I5001 goto if1143_else2723 
    set $P5006, fb_tmp_244["cclass_elem"]
    set $P5008, $P5006
    goto if1143_end2724
  if1143_else2723:
    null $P5007
    set $P5008, $P5007
  if1143_end2724:
    unless_null $P5008, vivi_11442726
    nqp_get_sc_object $P5009, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5009
  vivi_11442726:
    set $P101, $P5008
.annotate 'line', 745
    set fb_tmp_245, $P101
    repr_defined $I5002, fb_tmp_245
    unless $I5002 goto if1145_else2727 
    set $P5010, fb_tmp_245[0]
    set $P5012, $P5010
    goto if1145_end2728
  if1145_else2727:
    null $P5011
    set $P5012, $P5011
  if1145_end2728:
    unless_null $P5012, vivi_11462729
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5012, $P5013
  vivi_11462729:
    $P5014 = $P5012."ast"()
    set $P102, $P5014
.annotate 'line', 746
    $P5015 = $P102."negate"()
    set $P5017, $P5015
    unless $P5015 goto if1148_end2733 
    $P5016 = $P102."rxtype"()
    set $S5001, $P5016
    iseq $I5003, $S5001, "subrule"
    box $P5018, $I5003
    set $P5017, $P5018
  if1148_end2733:
    unless $P5017 goto if1147_end2731 
.annotate 'line', 747
    $P102."subtype"("zerowidth")
.annotate 'line', 748
    nqp_get_sc_object $P5020, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_89, $P5020
    get_who $P5021, pkg_lookup_tmp_89
    exists $I5005, $P5021["QAST"]
    unless $I5005 goto if1150_else2736 
    get_who $P5023, pkg_lookup_tmp_89
    set $P5022, $P5023["QAST"]
    set $P5025, $P5022
    goto if1150_end2737
  if1150_else2736:
    nqp_get_sc_object $P5024, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5025, $P5024
  if1150_end2737:
    get_who $P5019, $P5025
    set fb_tmp_246, $P5019
    repr_defined $I5004, fb_tmp_246
    unless $I5004 goto if1149_else2734 
    set $P5026, fb_tmp_246["Regex"]
    set $P5028, $P5026
    goto if1149_end2735
  if1149_else2734:
    null $P5027
    set $P5028, $P5027
  if1149_end2735:
    unless_null $P5028, vivi_11512738
    nqp_get_sc_object $P5029, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5028, $P5029
  vivi_11512738:
.annotate 'line', 750
    nqp_get_sc_object $P5031, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_90, $P5031
    get_who $P5032, pkg_lookup_tmp_90
    exists $I5007, $P5032["QAST"]
    unless $I5007 goto if1153_else2741 
    get_who $P5034, pkg_lookup_tmp_90
    set $P5033, $P5034["QAST"]
    set $P5036, $P5033
    goto if1153_end2742
  if1153_else2741:
    nqp_get_sc_object $P5035, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5036, $P5035
  if1153_end2742:
    get_who $P5030, $P5036
    set fb_tmp_247, $P5030
    repr_defined $I5006, fb_tmp_247
    unless $I5006 goto if1152_else2739 
    set $P5037, fb_tmp_247["Regex"]
    set $P5039, $P5037
    goto if1152_end2740
  if1152_else2739:
    null $P5038
    set $P5039, $P5038
  if1152_end2740:
    unless_null $P5039, vivi_11542743
    nqp_get_sc_object $P5040, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5039, $P5040
  vivi_11542743:
    $P5041 = $P5039."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5042 = $P5028."new"($P102, $P5041, "concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5042
  if1147_end2731:
    box $P5043, 1
    set $P103, $P5043
    set $N5001, $P101
    box $P5044, $N5001
    set $P104, $P5044
  while1155_test2744:
    set $N5002, $P103
    set $N5003, $P104
    islt $I5008, $N5002, $N5003
    box $P5048, $I5008
    set $P5047, $P5048
    unless $I5008 goto while1155_done2748 
  while1155_redo2746:
    .const 'Sub' $P5045 = 'cuid_219_1361537946.1303' 
    capture_lex $P5045
    $P5046 = $P5045()
    set $P5047, $P5046
    goto while1155_test2744 
  while1155_done2748:
.annotate 'line', 765
    $P5049 = _lex_param_1."!make"($P102)
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1361537946.1303") :anon :lex :outer("cuid_163_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 754
    .lex "$ast", $P101 
    .local pmc fb_tmp_248 
    .local pmc fb_tmp_249 
    .local pmc pkg_lookup_tmp_91 
    .local pmc fb_tmp_250 
    .local pmc pkg_lookup_tmp_92 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 755
    find_lex $P5002, "$clist"
    set fb_tmp_248, $P5002
    repr_defined $I5001, fb_tmp_248
    unless $I5001 goto if1156_else2749 
    find_lex $P5004, "$i"
    set $I5002, $P5004
    set $P5003, fb_tmp_248[$I5002]
    set $P5006, $P5003
    goto if1156_end2750
  if1156_else2749:
    null $P5005
    set $P5006, $P5005
  if1156_end2750:
    unless_null $P5006, vivi_11572751
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_11572751:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 756
    $P5009 = $P101."negate"()
    unless $P5009 goto if1158_else2752 
.annotate 'line', 757
    $P101."subtype"("zerowidth")
.annotate 'line', 758
    nqp_get_sc_object $P5011, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_91, $P5011
    get_who $P5012, pkg_lookup_tmp_91
    exists $I5004, $P5012["QAST"]
    unless $I5004 goto if1160_else2756 
    get_who $P5014, pkg_lookup_tmp_91
    set $P5013, $P5014["QAST"]
    set $P5016, $P5013
    goto if1160_end2757
  if1160_else2756:
    nqp_get_sc_object $P5015, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5015
  if1160_end2757:
    get_who $P5010, $P5016
    set fb_tmp_249, $P5010
    repr_defined $I5003, fb_tmp_249
    unless $I5003 goto if1159_else2754 
    set $P5017, fb_tmp_249["Regex"]
    set $P5019, $P5017
    goto if1159_end2755
  if1159_else2754:
    null $P5018
    set $P5019, $P5018
  if1159_end2755:
    unless_null $P5019, vivi_11612758
    nqp_get_sc_object $P5020, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5019, $P5020
  vivi_11612758:
    find_lex $P5021, "$qast"
    find_lex $P5022, "$/"
    $P5023 = $P5019."new"($P101, $P5021, "concat" :named("rxtype"), $P5022 :named("node"))
    store_lex "$qast", $P5023
    goto if1158_end2753
  if1158_else2752:
.annotate 'line', 760
.annotate 'line', 761
    nqp_get_sc_object $P5025, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_92, $P5025
    get_who $P5026, pkg_lookup_tmp_92
    exists $I5006, $P5026["QAST"]
    unless $I5006 goto if1163_else2761 
    get_who $P5028, pkg_lookup_tmp_92
    set $P5027, $P5028["QAST"]
    set $P5030, $P5027
    goto if1163_end2762
  if1163_else2761:
    nqp_get_sc_object $P5029, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5030, $P5029
  if1163_end2762:
    get_who $P5024, $P5030
    set fb_tmp_250, $P5024
    repr_defined $I5005, fb_tmp_250
    unless $I5005 goto if1162_else2759 
    set $P5031, fb_tmp_250["Regex"]
    set $P5033, $P5031
    goto if1162_end2760
  if1162_else2759:
    null $P5032
    set $P5033, $P5032
  if1162_end2760:
    unless_null $P5033, vivi_11642763
    nqp_get_sc_object $P5034, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5033, $P5034
  vivi_11642763:
    find_lex $P5035, "$qast"
    find_lex $P5036, "$/"
    $P5037 = $P5033."new"($P5035, $P101, "altseq" :named("rxtype"), $P5036 :named("node"))
    store_lex "$qast", $P5037
  if1158_end2753:
    find_lex $P5038, "$i"
    set tmp_1, $P5038
    set $N5002, tmp_1
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5039, $N5001
    store_lex "$i", $P5039
    .return (tmp_1) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_164_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 768
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_251 
    .local pmc fb_tmp_252 
    .local pmc fb_tmp_253 
    .local pmc pkg_lookup_tmp_93 
    .local pmc fb_tmp_254 
.annotate 'line', 769
    unless_null _lex_param_1, fallback2768
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5001
  fallback2768:
    set fb_tmp_251, _lex_param_1
    repr_defined $I5001, fb_tmp_251
    unless $I5001 goto if1166_else2766 
    set $P5002, fb_tmp_251["quote_EXPR"]
    set $P5004, $P5002
    goto if1166_end2767
  if1166_else2766:
    null $P5003
    set $P5004, $P5003
  if1166_end2767:
    unless_null $P5004, vivi_11672769
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_11672769:
    unless $P5004 goto if1165_else2764 
.annotate 'line', 770
    unless_null _lex_param_1, fallback2772
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5006
  fallback2772:
    set fb_tmp_252, _lex_param_1
    repr_defined $I5002, fb_tmp_252
    unless $I5002 goto if1168_else2770 
    set $P5007, fb_tmp_252["quote_EXPR"]
    set $P5009, $P5007
    goto if1168_end2771
  if1168_else2770:
    null $P5008
    set $P5009, $P5008
  if1168_end2771:
    unless_null $P5009, vivi_11692773
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_11692773:
    $P5011 = $P5009."ast"()
    set $P5029, $P5011
    goto if1165_end2765
  if1165_else2764:
.annotate 'line', 771
    nqp_get_sc_object $P5013, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_93, $P5013
    get_who $P5014, pkg_lookup_tmp_93
    exists $I5004, $P5014["QAST"]
    unless $I5004 goto if1171_else2776 
    get_who $P5016, pkg_lookup_tmp_93
    set $P5015, $P5016["QAST"]
    set $P5018, $P5015
    goto if1171_end2777
  if1171_else2776:
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5017
  if1171_end2777:
    get_who $P5012, $P5018
    set fb_tmp_253, $P5012
    repr_defined $I5003, fb_tmp_253
    unless $I5003 goto if1170_else2774 
    set $P5019, fb_tmp_253["NVal"]
    set $P5021, $P5019
    goto if1170_end2775
  if1170_else2774:
    null $P5020
    set $P5021, $P5020
  if1170_end2775:
    unless_null $P5021, vivi_11722778
    nqp_get_sc_object $P5022, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5021, $P5022
  vivi_11722778:
    unless_null _lex_param_1, fallback2781
    nqp_get_sc_object $P5023, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5023
  fallback2781:
    set fb_tmp_254, _lex_param_1
    repr_defined $I5005, fb_tmp_254
    unless $I5005 goto if1173_else2779 
    set $P5024, fb_tmp_254["val"]
    set $P5026, $P5024
    goto if1173_end2780
  if1173_else2779:
    null $P5025
    set $P5026, $P5025
  if1173_end2780:
    unless_null $P5026, vivi_11742782
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5027
  vivi_11742782:
    set $N5001, $P5026
    $P5028 = $P5021."new"($N5001 :named("value"))
    set $P5029, $P5028
  if1165_end2765:
    $P5030 = _lex_param_1."!make"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_165_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 774
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_220_1361537946.1303' 
    capture_lex $P5025 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_255 
    .local pmc pkg_lookup_tmp_94 
    .local pmc fb_tmp_256 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 775
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_94, $P5003
    get_who $P5004, pkg_lookup_tmp_94
    exists $I5002, $P5004["QAST"]
    unless $I5002 goto if1176_else2785 
    get_who $P5006, pkg_lookup_tmp_94
    set $P5005, $P5006["QAST"]
    set $P5008, $P5005
    goto if1176_end2786
  if1176_else2785:
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5007
  if1176_end2786:
    get_who $P5002, $P5008
    set fb_tmp_255, $P5002
    repr_defined $I5001, fb_tmp_255
    unless $I5001 goto if1175_else2783 
    set $P5009, fb_tmp_255["Op"]
    set $P5011, $P5009
    goto if1175_end2784
  if1175_else2783:
    null $P5010
    set $P5011, $P5010
  if1175_end2784:
    unless_null $P5011, vivi_11772787
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_11772787:
    $P5013 = $P5011."new"("list" :named("op"))
    set $P101, $P5013
    unless_null _lex_param_1, fallback2790
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5017
  fallback2790:
    set fb_tmp_256, _lex_param_1
    repr_defined $I5003, fb_tmp_256
    unless $I5003 goto if1178_else2788 
    set $P5018, fb_tmp_256["arg"]
    set $P5020, $P5018
    goto if1178_end2789
  if1178_else2788:
    null $P5019
    set $P5020, $P5019
  if1178_end2789:
    unless_null $P5020, vivi_11792791
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5021
  vivi_11792791:
    set $P5014, $P5020
    iter $P5016, $P5020
  for_next2792:
    unless $P5016, for_done2794
    shift $P5023, $P5016
  for_redo2793:
    .const 'Sub' $P5022 = 'cuid_220_1361537946.1303' 
    capture_lex $P5022
    $P5014 = $P5022($P5023)
    goto for_next2792
  for_done2794:
.annotate 'line', 777
    $P5024 = _lex_param_1."!make"($P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1361537946.1303") :anon :lex :outer("cuid_165_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 776
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_166_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 780
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_221_1361537946.1303' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_222_1361537946.1303' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_226_1361537946.1303' 
    capture_lex $P5022 
    .lex "$str", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_257 
    .local pmc fb_tmp_263 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    box $P5003, ""
    set $P101, $P5003
    unless_null _lex_param_1, fallback2799
    nqp_get_sc_object $P5004, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5004
  fallback2799:
    set fb_tmp_257, _lex_param_1
    repr_defined $I5001, fb_tmp_257
    unless $I5001 goto if1181_else2797 
    set $P5005, fb_tmp_257["name"]
    set $P5007, $P5005
    goto if1181_end2798
  if1181_else2797:
    null $P5006
    set $P5007, $P5006
  if1181_end2798:
    unless_null $P5007, vivi_11822800
    nqp_get_sc_object $P5008, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5008
  vivi_11822800:
    unless $P5007 goto if1180_else2795 
    .const 'Sub' $P5009 = 'cuid_221_1361537946.1303' 
    capture_lex $P5009
    $P5010 = $P5009()
    goto if1180_end2796
  if1180_else2795:
    unless_null _lex_param_1, fallback2828
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5011
  fallback2828:
    set fb_tmp_263, _lex_param_1
    repr_defined $I5002, fb_tmp_263
    unless $I5002 goto if1197_else2826 
    set $P5012, fb_tmp_263["uniprop"]
    set $P5014, $P5012
    goto if1197_end2827
  if1197_else2826:
    null $P5013
    set $P5014, $P5013
  if1197_end2827:
    unless_null $P5014, vivi_11982829
    nqp_get_sc_object $P5015, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5014, $P5015
  vivi_11982829:
    unless $P5014 goto if1196_else2824 
    .const 'Sub' $P5016 = 'cuid_222_1361537946.1303' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5020, $P5017
    goto if1196_end2825
  if1196_else2824:
    .const 'Sub' $P5018 = 'cuid_226_1361537946.1303' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1196_end2825:
  if1180_end2796:
.annotate 'line', 845
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1361537946.1303") :anon :lex :outer("cuid_166_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 783
    .lex "$name", $P101 
    .local pmc fb_tmp_258 
    .local pmc fb_tmp_259 
    .local pmc pkg_lookup_tmp_95 
    .local pmc fb_tmp_260 
    .local pmc fb_tmp_261 
    .local pmc pkg_lookup_tmp_96 
    .local pmc fb_tmp_262 
    .local pmc pkg_lookup_tmp_97 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2803
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5002, $P5003
  fallback2803:
    set fb_tmp_258, $P5002
    repr_defined $I5001, fb_tmp_258
    unless $I5001 goto if1183_else2801 
    set $P5004, fb_tmp_258["name"]
    set $P5006, $P5004
    goto if1183_end2802
  if1183_else2801:
    null $P5005
    set $P5006, $P5005
  if1183_end2802:
    unless_null $P5006, vivi_11842804
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_11842804:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 785
    nqp_get_sc_object $P5010, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_95, $P5010
    get_who $P5011, pkg_lookup_tmp_95
    exists $I5003, $P5011["QAST"]
    unless $I5003 goto if1186_else2807 
    get_who $P5013, pkg_lookup_tmp_95
    set $P5012, $P5013["QAST"]
    set $P5015, $P5012
    goto if1186_end2808
  if1186_else2807:
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5014
  if1186_end2808:
    get_who $P5009, $P5015
    set fb_tmp_259, $P5009
    repr_defined $I5002, fb_tmp_259
    unless $I5002 goto if1185_else2805 
    set $P5016, fb_tmp_259["Regex"]
    set $P5018, $P5016
    goto if1185_end2806
  if1185_else2805:
    null $P5017
    set $P5018, $P5017
  if1185_end2806:
    unless_null $P5018, vivi_11872809
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5019
  vivi_11872809:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback2812
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5021
  fallback2812:
    set fb_tmp_260, $P5020
    repr_defined $I5005, fb_tmp_260
    unless $I5005 goto if1188_else2810 
    set $P5022, fb_tmp_260["sign"]
    set $P5024, $P5022
    goto if1188_end2811
  if1188_else2810:
    null $P5023
    set $P5024, $P5023
  if1188_end2811:
    unless_null $P5024, vivi_11892813
    nqp_get_sc_object $P5025, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5024, $P5025
  vivi_11892813:
    set $S5002, $P5024
    iseq $I5004, $S5002, "-"
    find_lex $P5026, "$/"
.annotate 'line', 787
    nqp_get_sc_object $P5028, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_96, $P5028
    get_who $P5029, pkg_lookup_tmp_96
    exists $I5007, $P5029["QAST"]
    unless $I5007 goto if1191_else2816 
    get_who $P5031, pkg_lookup_tmp_96
    set $P5030, $P5031["QAST"]
    set $P5033, $P5030
    goto if1191_end2817
  if1191_else2816:
    nqp_get_sc_object $P5032, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5033, $P5032
  if1191_end2817:
    get_who $P5027, $P5033
    set fb_tmp_261, $P5027
    repr_defined $I5006, fb_tmp_261
    unless $I5006 goto if1190_else2814 
    set $P5034, fb_tmp_261["Node"]
    set $P5036, $P5034
    goto if1190_end2815
  if1190_else2814:
    null $P5035
    set $P5036, $P5035
  if1190_end2815:
    unless_null $P5036, vivi_11922818
    nqp_get_sc_object $P5037, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5036, $P5037
  vivi_11922818:
    nqp_get_sc_object $P5039, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_97, $P5039
    get_who $P5040, pkg_lookup_tmp_97
    exists $I5009, $P5040["QAST"]
    unless $I5009 goto if1194_else2821 
    get_who $P5042, pkg_lookup_tmp_97
    set $P5041, $P5042["QAST"]
    set $P5044, $P5041
    goto if1194_end2822
  if1194_else2821:
    nqp_get_sc_object $P5043, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5044, $P5043
  if1194_end2822:
    get_who $P5038, $P5044
    set fb_tmp_262, $P5038
    repr_defined $I5008, fb_tmp_262
    unless $I5008 goto if1193_else2819 
    set $P5045, fb_tmp_262["SVal"]
    set $P5047, $P5045
    goto if1193_end2820
  if1193_else2819:
    null $P5046
    set $P5047, $P5046
  if1193_end2820:
    unless_null $P5047, vivi_11952823
    nqp_get_sc_object $P5048, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5047, $P5048
  vivi_11952823:
    $P5049 = $P5047."new"($P101 :named("value"))
    $P5050 = $P5036."new"($P5049)
    $P5051 = $P5018."new"($P5050, "subrule" :named("rxtype"), "method" :named("subtype"), $I5004 :named("negate"), $P5026 :named("node"))
    store_lex "$qast", $P5051
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1361537946.1303") :anon :lex :outer("cuid_166_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 789
    .lex "$uniprop", $P101 
    .local pmc fb_tmp_264 
    .local pmc fb_tmp_265 
    .local pmc pkg_lookup_tmp_98 
    .local pmc fb_tmp_266 
    .local pmc fb_tmp_267 
    .local pmc fb_tmp_268 
    .local pmc fb_tmp_269 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2832
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5002, $P5003
  fallback2832:
    set fb_tmp_264, $P5002
    repr_defined $I5001, fb_tmp_264
    unless $I5001 goto if1199_else2830 
    set $P5004, fb_tmp_264["uniprop"]
    set $P5006, $P5004
    goto if1199_end2831
  if1199_else2830:
    null $P5005
    set $P5006, $P5005
  if1199_end2831:
    unless_null $P5006, vivi_12002833
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_12002833:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 791
    nqp_get_sc_object $P5010, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_98, $P5010
    get_who $P5011, pkg_lookup_tmp_98
    exists $I5003, $P5011["QAST"]
    unless $I5003 goto if1202_else2836 
    get_who $P5013, pkg_lookup_tmp_98
    set $P5012, $P5013["QAST"]
    set $P5015, $P5012
    goto if1202_end2837
  if1202_else2836:
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5014
  if1202_end2837:
    get_who $P5009, $P5015
    set fb_tmp_265, $P5009
    repr_defined $I5002, fb_tmp_265
    unless $I5002 goto if1201_else2834 
    set $P5016, fb_tmp_265["Regex"]
    set $P5018, $P5016
    goto if1201_end2835
  if1201_else2834:
    null $P5017
    set $P5018, $P5017
  if1201_end2835:
    unless_null $P5018, vivi_12032838
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5019
  vivi_12032838:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback2845
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5021
  fallback2845:
    set fb_tmp_266, $P5020
    repr_defined $I5005, fb_tmp_266
    unless $I5005 goto if1206_else2843 
    set $P5022, fb_tmp_266["sign"]
    set $P5024, $P5022
    goto if1206_end2844
  if1206_else2843:
    null $P5023
    set $P5024, $P5023
  if1206_end2844:
    unless_null $P5024, vivi_12072846
    nqp_get_sc_object $P5025, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5024, $P5025
  vivi_12072846:
    set $S5002, $P5024
    iseq $I5004, $S5002, "-"
    set $I5008, $I5004
    unless $I5004 goto if1205_end2842 
    find_lex $P5026, "$/"
    unless_null $P5026, fallback2849
    nqp_get_sc_object $P5027, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5026, $P5027
  fallback2849:
    set fb_tmp_267, $P5026
    repr_defined $I5007, fb_tmp_267
    unless $I5007 goto if1208_else2847 
    set $P5028, fb_tmp_267["invert"]
    set $P5030, $P5028
    goto if1208_end2848
  if1208_else2847:
    null $P5029
    set $P5030, $P5029
  if1208_end2848:
    unless_null $P5030, vivi_12092850
    nqp_get_sc_object $P5031, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5030, $P5031
  vivi_12092850:
    set $S5003, $P5030
    isne $I5006, $S5003, "!"
    set $I5008, $I5006
  if1205_end2842:
    set $I5014, $I5008
    if $I5008 goto unless1204_end2840 
    find_lex $P5032, "$/"
    unless_null $P5032, fallback2855
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5033
  fallback2855:
    set fb_tmp_268, $P5032
    repr_defined $I5010, fb_tmp_268
    unless $I5010 goto if1211_else2853 
    set $P5034, fb_tmp_268["sign"]
    set $P5036, $P5034
    goto if1211_end2854
  if1211_else2853:
    null $P5035
    set $P5036, $P5035
  if1211_end2854:
    unless_null $P5036, vivi_12122856
    nqp_get_sc_object $P5037, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5036, $P5037
  vivi_12122856:
    set $S5004, $P5036
    isne $I5009, $S5004, "-"
    set $I5013, $I5009
    unless $I5009 goto if1210_end2852 
    find_lex $P5038, "$/"
    unless_null $P5038, fallback2859
    nqp_get_sc_object $P5039, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5038, $P5039
  fallback2859:
    set fb_tmp_269, $P5038
    repr_defined $I5012, fb_tmp_269
    unless $I5012 goto if1213_else2857 
    set $P5040, fb_tmp_269["invert"]
    set $P5042, $P5040
    goto if1213_end2858
  if1213_else2857:
    null $P5041
    set $P5042, $P5041
  if1213_end2858:
    unless_null $P5042, vivi_12142860
    nqp_get_sc_object $P5043, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5042, $P5043
  vivi_12142860:
    set $S5005, $P5042
    iseq $I5011, $S5005, "!"
    set $I5013, $I5011
  if1210_end2852:
    set $I5014, $I5013
  unless1204_end2840:
    find_lex $P5044, "$/"
    $P5045 = $P5018."new"($P101, "uniprop" :named("rxtype"), $I5014 :named("negate"), $P5044 :named("node"))
    store_lex "$qast", $P5045
    .return ($P5045) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1361537946.1303") :anon :lex :outer("cuid_166_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 795
    .const 'Sub' $P5096 = 'cuid_224_1361537946.1303' 
    capture_lex $P5096 
    .lex "@alts", $P101 
    .local pmc fb_tmp_270 
    .local pmc fb_tmp_297 
    .local pmc pkg_lookup_tmp_99 
    .local pmc fb_tmp_298 
    .local pmc fb_tmp_299 
    .local pmc fb_tmp_300 
    .local pmc fb_tmp_301 
    .local pmc pkg_lookup_tmp_100 
    .local pmc fb_tmp_302 
    .local pmc pkg_lookup_tmp_101 
    .local pmc fb_tmp_303 
    .local pmc pkg_lookup_tmp_102 
    .local pmc fb_tmp_304 
    .local pmc pkg_lookup_tmp_103 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback2863
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  fallback2863:
    set fb_tmp_270, $P5005
    repr_defined $I5001, fb_tmp_270
    unless $I5001 goto if1215_else2861 
    set $P5007, fb_tmp_270["charspec"]
    set $P5009, $P5007
    goto if1215_end2862
  if1215_else2861:
    null $P5008
    set $P5009, $P5008
  if1215_end2862:
    unless_null $P5009, vivi_12162864
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_12162864:
    set $P5002, $P5009
    iter $P5004, $P5009
  for_next2977:
    unless $P5004, for_done2979
    shift $P5012, $P5004
  for_redo2978:
    .const 'Sub' $P5011 = 'cuid_224_1361537946.1303' 
    capture_lex $P5011
    $P5002 = $P5011($P5012)
    goto for_next2977
  for_done2979:
    find_lex $P5013, "$str"
    set $S5001, $P5013
    length $I5002, $S5001
    unless $I5002 goto if1284_end2981 
.annotate 'line', 835
    nqp_get_sc_object $P5015, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_99, $P5015
    get_who $P5016, pkg_lookup_tmp_99
    exists $I5004, $P5016["QAST"]
    unless $I5004 goto if1286_else2984 
    get_who $P5018, pkg_lookup_tmp_99
    set $P5017, $P5018["QAST"]
    set $P5020, $P5017
    goto if1286_end2985
  if1286_else2984:
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5019
  if1286_end2985:
    get_who $P5014, $P5020
    set fb_tmp_297, $P5014
    repr_defined $I5003, fb_tmp_297
    unless $I5003 goto if1285_else2982 
    set $P5021, fb_tmp_297["Regex"]
    set $P5023, $P5021
    goto if1285_end2983
  if1285_else2982:
    null $P5022
    set $P5023, $P5022
  if1285_end2983:
    unless_null $P5023, vivi_12872986
    nqp_get_sc_object $P5024, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5023, $P5024
  vivi_12872986:
    find_lex $P5025, "$str"
    find_lex $P5026, "$/"
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2989
    nqp_get_sc_object $P5028, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5027, $P5028
  fallback2989:
    set fb_tmp_298, $P5027
    repr_defined $I5006, fb_tmp_298
    unless $I5006 goto if1288_else2987 
    set $P5029, fb_tmp_298["sign"]
    set $P5031, $P5029
    goto if1288_end2988
  if1288_else2987:
    null $P5030
    set $P5031, $P5030
  if1288_end2988:
    unless_null $P5031, vivi_12892990
    nqp_get_sc_object $P5032, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5031, $P5032
  vivi_12892990:
    set $S5002, $P5031
    iseq $I5005, $S5002, "-"
    $P5033 = $P5023."new"($P5025, "enumcharlist" :named("rxtype"), $P5026 :named("node"), $I5005 :named("negate"))
    $P5034 = $P101."push"($P5033)
  if1284_end2981:
    set $N5001, $P101
    set $N5002, 1
    iseq $I5007, $N5001, $N5002
    unless $I5007 goto if1290_else2991 
    set fb_tmp_299, $P101
    repr_defined $I5008, fb_tmp_299
    unless $I5008 goto if1291_else2993 
    set $P5035, fb_tmp_299[0]
    set $P5037, $P5035
    goto if1291_end2994
  if1291_else2993:
    null $P5036
    set $P5037, $P5036
  if1291_end2994:
    unless_null $P5037, vivi_12922995
    nqp_get_sc_object $P5038, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5037, $P5038
  vivi_12922995:
    set $P5095, $P5037
    goto if1290_end2992
  if1290_else2991:
    find_lex $P5039, "$/"
    unless_null $P5039, fallback3000
    nqp_get_sc_object $P5040, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5039, $P5040
  fallback3000:
    set fb_tmp_300, $P5039
    repr_defined $I5010, fb_tmp_300
    unless $I5010 goto if1294_else2998 
    set $P5041, fb_tmp_300["sign"]
    set $P5043, $P5041
    goto if1294_end2999
  if1294_else2998:
    null $P5042
    set $P5043, $P5042
  if1294_end2999:
    unless_null $P5043, vivi_12953001
    nqp_get_sc_object $P5044, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5043, $P5044
  vivi_12953001:
    set $S5003, $P5043
    iseq $I5009, $S5003, "-"
    unless $I5009 goto if1293_else2996 
.annotate 'line', 839
    nqp_get_sc_object $P5046, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_100, $P5046
    get_who $P5047, pkg_lookup_tmp_100
    exists $I5012, $P5047["QAST"]
    unless $I5012 goto if1297_else3004 
    get_who $P5049, pkg_lookup_tmp_100
    set $P5048, $P5049["QAST"]
    set $P5051, $P5048
    goto if1297_end3005
  if1297_else3004:
    nqp_get_sc_object $P5050, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5051, $P5050
  if1297_end3005:
    get_who $P5045, $P5051
    set fb_tmp_301, $P5045
    repr_defined $I5011, fb_tmp_301
    unless $I5011 goto if1296_else3002 
    set $P5052, fb_tmp_301["Regex"]
    set $P5054, $P5052
    goto if1296_end3003
  if1296_else3002:
    null $P5053
    set $P5054, $P5053
  if1296_end3003:
    unless_null $P5054, vivi_12983006
    nqp_get_sc_object $P5055, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5054, $P5055
  vivi_12983006:
    find_lex $P5056, "$/"
.annotate 'line', 840
    nqp_get_sc_object $P5058, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_101, $P5058
    get_who $P5059, pkg_lookup_tmp_101
    exists $I5014, $P5059["QAST"]
    unless $I5014 goto if1300_else3009 
    get_who $P5061, pkg_lookup_tmp_101
    set $P5060, $P5061["QAST"]
    set $P5063, $P5060
    goto if1300_end3010
  if1300_else3009:
    nqp_get_sc_object $P5062, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5063, $P5062
  if1300_end3010:
    get_who $P5057, $P5063
    set fb_tmp_302, $P5057
    repr_defined $I5013, fb_tmp_302
    unless $I5013 goto if1299_else3007 
    set $P5064, fb_tmp_302["Regex"]
    set $P5066, $P5064
    goto if1299_end3008
  if1299_else3007:
    null $P5065
    set $P5066, $P5065
  if1299_end3008:
    unless_null $P5066, vivi_13013011
    nqp_get_sc_object $P5067, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5066, $P5067
  vivi_13013011:
    $P5068 = $P5066."new"($P101 :flat, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
.annotate 'line', 841
    nqp_get_sc_object $P5070, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_102, $P5070
    get_who $P5071, pkg_lookup_tmp_102
    exists $I5016, $P5071["QAST"]
    unless $I5016 goto if1303_else3014 
    get_who $P5073, pkg_lookup_tmp_102
    set $P5072, $P5073["QAST"]
    set $P5075, $P5072
    goto if1303_end3015
  if1303_else3014:
    nqp_get_sc_object $P5074, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5075, $P5074
  if1303_end3015:
    get_who $P5069, $P5075
    set fb_tmp_303, $P5069
    repr_defined $I5015, fb_tmp_303
    unless $I5015 goto if1302_else3012 
    set $P5076, fb_tmp_303["Regex"]
    set $P5078, $P5076
    goto if1302_end3013
  if1302_else3012:
    null $P5077
    set $P5078, $P5077
  if1302_end3013:
    unless_null $P5078, vivi_13043016
    nqp_get_sc_object $P5079, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5078, $P5079
  vivi_13043016:
    $P5080 = $P5078."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5081 = $P5054."new"($P5068, $P5080, "concat" :named("rxtype"), $P5056 :named("node"))
    set $P5094, $P5081
    goto if1293_end2997
  if1293_else2996:
.annotate 'line', 842
    nqp_get_sc_object $P5083, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_103, $P5083
    get_who $P5084, pkg_lookup_tmp_103
    exists $I5018, $P5084["QAST"]
    unless $I5018 goto if1306_else3019 
    get_who $P5086, pkg_lookup_tmp_103
    set $P5085, $P5086["QAST"]
    set $P5088, $P5085
    goto if1306_end3020
  if1306_else3019:
    nqp_get_sc_object $P5087, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5088, $P5087
  if1306_end3020:
    get_who $P5082, $P5088
    set fb_tmp_304, $P5082
    repr_defined $I5017, fb_tmp_304
    unless $I5017 goto if1305_else3017 
    set $P5089, fb_tmp_304["Regex"]
    set $P5091, $P5089
    goto if1305_end3018
  if1305_else3017:
    null $P5090
    set $P5091, $P5090
  if1305_end3018:
    unless_null $P5091, vivi_13073021
    nqp_get_sc_object $P5092, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5091, $P5092
  vivi_13073021:
    $P5093 = $P5091."new"($P101 :flat, "altseq" :named("rxtype"))
    set $P5094, $P5093
  if1293_end2997:
    set $P5095, $P5094
  if1290_end2992:
    store_lex "$qast", $P5095
    .return ($P5095) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1361537946.1303") :anon :lex :outer("cuid_226_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 797
    .param pmc _lex_param_0 
    .const 'Sub' $P5025 = 'cuid_223_1361537946.1303' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_225_1361537946.1303' 
    capture_lex $P5025 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_271 
    .local pmc fb_tmp_291 
    .local pmc fb_tmp_292 
    .local pmc fb_tmp_296 
    set fb_tmp_271, _lex_param_0
    repr_defined $I5001, fb_tmp_271
    unless $I5001 goto if1218_else2867 
    set $P5001, fb_tmp_271[1]
    set $P5003, $P5001
    goto if1218_end2868
  if1218_else2867:
    null $P5002
    set $P5003, $P5002
  if1218_end2868:
    unless_null $P5003, vivi_12192869
    nqp_get_sc_object $P5004, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5003, $P5004
  vivi_12192869:
    unless $P5003 goto if1217_else2865 
    .const 'Sub' $P5005 = 'cuid_223_1361537946.1303' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5024, $P5006
    goto if1217_end2866
  if1217_else2865:
    set fb_tmp_292, _lex_param_0
    repr_defined $I5003, fb_tmp_292
    unless $I5003 goto if1272_else2958 
    set $P5007, fb_tmp_292[0]
    set $P5009, $P5007
    goto if1272_end2959
  if1272_else2958:
    null $P5008
    set $P5009, $P5008
  if1272_end2959:
    unless_null $P5009, vivi_12732960
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_12732960:
    set fb_tmp_291, $P5009
    repr_defined $I5002, fb_tmp_291
    unless $I5002 goto if1271_else2956 
    set $P5011, fb_tmp_291["backslash"]
    set $P5013, $P5011
    goto if1271_end2957
  if1271_else2956:
    null $P5012
    set $P5013, $P5012
  if1271_end2957:
    unless_null $P5013, vivi_12742961
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5013, $P5014
  vivi_12742961:
    unless $P5013 goto if1270_else2954 
    .const 'Sub' $P5015 = 'cuid_225_1361537946.1303' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5023, $P5016
    goto if1270_end2955
  if1270_else2954:
.annotate 'line', 833
    find_lex $P5017, "$str"
    set $S5002, $P5017
    set fb_tmp_296, _lex_param_0
    repr_defined $I5004, fb_tmp_296
    unless $I5004 goto if1282_else2974 
    set $P5018, fb_tmp_296[0]
    set $P5020, $P5018
    goto if1282_end2975
  if1282_else2974:
    null $P5019
    set $P5020, $P5019
  if1282_end2975:
    unless_null $P5020, vivi_12832976
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5021
  vivi_12832976:
    set $S5003, $P5020
    concat $S5001, $S5002, $S5003
    box $P5022, $S5001
    store_lex "$str", $P5022
    set $P5023, $P5022
  if1270_end2955:
    set $P5024, $P5023
  if1217_end2866:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1361537946.1303") :anon :lex :outer("cuid_224_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 798
    .lex "$node", $P101 
    .lex "$lhs", $P102 
    .lex "$rhs", $P103 
    .lex "$ord0", $P104 
    .lex "$ord1", $P105 
    .local pmc fb_tmp_272 
    .local pmc fb_tmp_273 
    .local pmc fb_tmp_274 
    .local pmc fb_tmp_275 
    .local pmc fb_tmp_276 
    .local pmc fb_tmp_277 
    .local pmc fb_tmp_278 
    .local pmc fb_tmp_279 
    .local pmc fb_tmp_280 
    .local pmc fb_tmp_281 
    .local pmc fb_tmp_282 
    .local pmc fb_tmp_283 
    .local pmc fb_tmp_284 
    .local pmc fb_tmp_285 
    .local pmc fb_tmp_286 
    .local pmc fb_tmp_287 
    .local pmc fb_tmp_288 
    .local pmc fb_tmp_289 
    .local pmc fb_tmp_290 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P105, $P5005
    find_lex $P5006, "$_"
    set fb_tmp_273, $P5006
    repr_defined $I5002, fb_tmp_273
    unless $I5002 goto if1222_else2874 
    set $P5007, fb_tmp_273[0]
    set $P5009, $P5007
    goto if1222_end2875
  if1222_else2874:
    null $P5008
    set $P5009, $P5008
  if1222_end2875:
    unless_null $P5009, vivi_12232876
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_12232876:
    set fb_tmp_272, $P5009
    repr_defined $I5001, fb_tmp_272
    unless $I5001 goto if1221_else2872 
    set $P5011, fb_tmp_272["backslash"]
    set $P5013, $P5011
    goto if1221_end2873
  if1221_else2872:
    null $P5012
    set $P5013, $P5012
  if1221_end2873:
    unless_null $P5013, vivi_12242877
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5013, $P5014
  vivi_12242877:
    unless $P5013 goto if1220_else2870 
.annotate 'line', 802
.annotate 'line', 803
    find_lex $P5015, "$_"
    set fb_tmp_275, $P5015
    repr_defined $I5004, fb_tmp_275
    unless $I5004 goto if1226_else2880 
    set $P5016, fb_tmp_275[0]
    set $P5018, $P5016
    goto if1226_end2881
  if1226_else2880:
    null $P5017
    set $P5018, $P5017
  if1226_end2881:
    unless_null $P5018, vivi_12272882
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5019
  vivi_12272882:
    set fb_tmp_274, $P5018
    repr_defined $I5003, fb_tmp_274
    unless $I5003 goto if1225_else2878 
    set $P5020, fb_tmp_274["backslash"]
    set $P5022, $P5020
    goto if1225_end2879
  if1225_else2878:
    null $P5021
    set $P5022, $P5021
  if1225_end2879:
    unless_null $P5022, vivi_12282883
    nqp_get_sc_object $P5023, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5022, $P5023
  vivi_12282883:
    $P5024 = $P5022."ast"()
    set $P101, $P5024
.annotate 'line', 805
    $P5025 = $P101."rxtype"()
    set $S5001, $P5025
    isne $I5005, $S5001, "literal"
    set $I5007, $I5005
    unless $I5005 goto if1232_end2891 
    $P5026 = $P101."rxtype"()
    set $S5002, $P5026
    isne $I5006, $S5002, "enumcharlist"
    set $I5007, $I5006
  if1232_end2891:
    box $P5029, $I5007
    set $P5028, $P5029
    if $I5007 goto unless1231_end2889 
.annotate 'line', 806
    $P5027 = $P101."negate"()
    set $P5028, $P5027
  unless1231_end2889:
    set $P5034, $P5028
    if $P5028 goto unless1230_end2887 
    set fb_tmp_276, $P101
    repr_defined $I5010, fb_tmp_276
    unless $I5010 goto if1233_else2892 
    set $P5030, fb_tmp_276[0]
    set $P5032, $P5030
    goto if1233_end2893
  if1233_else2892:
    null $P5031
    set $P5032, $P5031
  if1233_end2893:
    unless_null $P5032, vivi_12342894
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5033
  vivi_12342894:
    set $S5003, $P5032
    length $I5009, $S5003
    set $N5001, $I5009
    set $N5002, 1
    isne $I5008, $N5001, $N5002
    box $P5035, $I5008
    set $P5034, $P5035
  unless1230_end2887:
    unless $P5034 goto if1229_end2885 
.annotate 'line', 804
    find_lex $P5036, "$/"
    $P5037 = $P5036."CURSOR"()
    find_lex $P5038, "$_"
    set $S5005, $P5038
    concat $S5004, "Illegal range endpoint in regex: ", $S5005
    $P5039 = $P5037."panic"($S5004)
  if1229_end2885:
    set fb_tmp_277, $P101
    repr_defined $I5011, fb_tmp_277
    unless $I5011 goto if1235_else2895 
    set $P5040, fb_tmp_277[0]
    set $P5042, $P5040
    goto if1235_end2896
  if1235_else2895:
    null $P5041
    set $P5042, $P5041
  if1235_end2896:
    unless_null $P5042, vivi_12362897
    nqp_get_sc_object $P5043, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5042, $P5043
  vivi_12362897:
    set $P102, $P5042
    goto if1220_end2871
  if1220_else2870:
.annotate 'line', 809
    find_lex $P5044, "$_"
    set fb_tmp_279, $P5044
    repr_defined $I5013, fb_tmp_279
    unless $I5013 goto if1238_else2900 
    set $P5045, fb_tmp_279[0]
    set $P5047, $P5045
    goto if1238_end2901
  if1238_else2900:
    null $P5046
    set $P5047, $P5046
  if1238_end2901:
    unless_null $P5047, vivi_12392902
    nqp_get_sc_object $P5048, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5047, $P5048
  vivi_12392902:
    set fb_tmp_278, $P5047
    repr_defined $I5012, fb_tmp_278
    unless $I5012 goto if1237_else2898 
    set $P5049, fb_tmp_278[0]
    set $P5051, $P5049
    goto if1237_end2899
  if1237_else2898:
    null $P5050
    set $P5051, $P5050
  if1237_end2899:
    unless_null $P5051, vivi_12402903
    nqp_get_sc_object $P5052, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5051, $P5052
  vivi_12402903:
    set $S5006, $P5051
    box $P5053, $S5006
    set $P102, $P5053
  if1220_end2871:
    find_lex $P5054, "$_"
    set fb_tmp_282, $P5054
    repr_defined $I5016, fb_tmp_282
    unless $I5016 goto if1244_else2910 
    set $P5055, fb_tmp_282[1]
    set $P5057, $P5055
    goto if1244_end2911
  if1244_else2910:
    null $P5056
    set $P5057, $P5056
  if1244_end2911:
    unless_null $P5057, vivi_12452912
    nqp_get_sc_object $P5058, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5057, $P5058
  vivi_12452912:
    set fb_tmp_281, $P5057
    repr_defined $I5015, fb_tmp_281
    unless $I5015 goto if1243_else2908 
    set $P5059, fb_tmp_281[0]
    set $P5061, $P5059
    goto if1243_end2909
  if1243_else2908:
    null $P5060
    set $P5061, $P5060
  if1243_end2909:
    unless_null $P5061, vivi_12462913
    nqp_get_sc_object $P5062, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5061, $P5062
  vivi_12462913:
    set fb_tmp_280, $P5061
    repr_defined $I5014, fb_tmp_280
    unless $I5014 goto if1242_else2906 
    set $P5063, fb_tmp_280["backslash"]
    set $P5065, $P5063
    goto if1242_end2907
  if1242_else2906:
    null $P5064
    set $P5065, $P5064
  if1242_end2907:
    unless_null $P5065, vivi_12472914
    nqp_get_sc_object $P5066, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5065, $P5066
  vivi_12472914:
    unless $P5065 goto if1241_else2904 
.annotate 'line', 812
.annotate 'line', 813
    find_lex $P5067, "$_"
    set fb_tmp_285, $P5067
    repr_defined $I5019, fb_tmp_285
    unless $I5019 goto if1250_else2919 
    set $P5068, fb_tmp_285[1]
    set $P5070, $P5068
    goto if1250_end2920
  if1250_else2919:
    null $P5069
    set $P5070, $P5069
  if1250_end2920:
    unless_null $P5070, vivi_12512921
    nqp_get_sc_object $P5071, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5070, $P5071
  vivi_12512921:
    set fb_tmp_284, $P5070
    repr_defined $I5018, fb_tmp_284
    unless $I5018 goto if1249_else2917 
    set $P5072, fb_tmp_284[0]
    set $P5074, $P5072
    goto if1249_end2918
  if1249_else2917:
    null $P5073
    set $P5074, $P5073
  if1249_end2918:
    unless_null $P5074, vivi_12522922
    nqp_get_sc_object $P5075, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5074, $P5075
  vivi_12522922:
    set fb_tmp_283, $P5074
    repr_defined $I5017, fb_tmp_283
    unless $I5017 goto if1248_else2915 
    set $P5076, fb_tmp_283["backslash"]
    set $P5078, $P5076
    goto if1248_end2916
  if1248_else2915:
    null $P5077
    set $P5078, $P5077
  if1248_end2916:
    unless_null $P5078, vivi_12532923
    nqp_get_sc_object $P5079, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5078, $P5079
  vivi_12532923:
    $P5080 = $P5078."ast"()
    set $P101, $P5080
.annotate 'line', 815
    $P5081 = $P101."rxtype"()
    set $S5007, $P5081
    isne $I5020, $S5007, "literal"
    set $I5022, $I5020
    unless $I5020 goto if1257_end2931 
    $P5082 = $P101."rxtype"()
    set $S5008, $P5082
    isne $I5021, $S5008, "enumcharlist"
    set $I5022, $I5021
  if1257_end2931:
    box $P5085, $I5022
    set $P5084, $P5085
    if $I5022 goto unless1256_end2929 
.annotate 'line', 816
    $P5083 = $P101."negate"()
    set $P5084, $P5083
  unless1256_end2929:
    set $P5090, $P5084
    if $P5084 goto unless1255_end2927 
    set fb_tmp_286, $P101
    repr_defined $I5025, fb_tmp_286
    unless $I5025 goto if1258_else2932 
    set $P5086, fb_tmp_286[0]
    set $P5088, $P5086
    goto if1258_end2933
  if1258_else2932:
    null $P5087
    set $P5088, $P5087
  if1258_end2933:
    unless_null $P5088, vivi_12592934
    nqp_get_sc_object $P5089, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5088, $P5089
  vivi_12592934:
    set $S5009, $P5088
    length $I5024, $S5009
    set $N5003, $I5024
    set $N5004, 1
    isne $I5023, $N5003, $N5004
    box $P5091, $I5023
    set $P5090, $P5091
  unless1255_end2927:
    unless $P5090 goto if1254_end2925 
.annotate 'line', 814
    find_lex $P5092, "$/"
    $P5093 = $P5092."CURSOR"()
    find_lex $P5094, "$_"
    set $S5011, $P5094
    concat $S5010, "Illegal range endpoint in regex: ", $S5011
    $P5095 = $P5093."panic"($S5010)
  if1254_end2925:
    set fb_tmp_287, $P101
    repr_defined $I5026, fb_tmp_287
    unless $I5026 goto if1260_else2935 
    set $P5096, fb_tmp_287[0]
    set $P5098, $P5096
    goto if1260_end2936
  if1260_else2935:
    null $P5097
    set $P5098, $P5097
  if1260_end2936:
    unless_null $P5098, vivi_12612937
    nqp_get_sc_object $P5099, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5098, $P5099
  vivi_12612937:
    set $P103, $P5098
    goto if1241_end2905
  if1241_else2904:
.annotate 'line', 819
    find_lex $P5100, "$_"
    set fb_tmp_290, $P5100
    repr_defined $I5029, fb_tmp_290
    unless $I5029 goto if1264_else2942 
    set $P5101, fb_tmp_290[1]
    set $P5103, $P5101
    goto if1264_end2943
  if1264_else2942:
    null $P5102
    set $P5103, $P5102
  if1264_end2943:
    unless_null $P5103, vivi_12652944
    nqp_get_sc_object $P5104, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5103, $P5104
  vivi_12652944:
    set fb_tmp_289, $P5103
    repr_defined $I5028, fb_tmp_289
    unless $I5028 goto if1263_else2940 
    set $P5105, fb_tmp_289[0]
    set $P5107, $P5105
    goto if1263_end2941
  if1263_else2940:
    null $P5106
    set $P5107, $P5106
  if1263_end2941:
    unless_null $P5107, vivi_12662945
    nqp_get_sc_object $P5108, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5107, $P5108
  vivi_12662945:
    set fb_tmp_288, $P5107
    repr_defined $I5027, fb_tmp_288
    unless $I5027 goto if1262_else2938 
    set $P5109, fb_tmp_288[0]
    set $P5111, $P5109
    goto if1262_end2939
  if1262_else2938:
    null $P5110
    set $P5111, $P5110
  if1262_end2939:
    unless_null $P5111, vivi_12672946
    nqp_get_sc_object $P5112, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5111, $P5112
  vivi_12672946:
    set $S5012, $P5111
    box $P5113, $S5012
    set $P103, $P5113
  if1241_end2905:
    set $S5013, $P102
    ord $I5030, $S5013
    box $P5114, $I5030
    set $P104, $P5114
    set $S5014, $P103
    ord $I5031, $S5014
    box $P5115, $I5031
    set $P105, $P5115
    set $N5005, $P104
    set $N5006, $P105
    isgt $I5032, $N5005, $N5006
    unless $I5032 goto if1268_end2948 
.annotate 'line', 824
    find_lex $P5116, "$/"
    $P5117 = $P5116."CURSOR"()
    find_lex $P5118, "$_"
    set $S5016, $P5118
    concat $S5015, "Illegal reversed character range in regex: ", $S5016
    $P5119 = $P5117."panic"($S5015)
  if1268_end2948:
    new $P5123, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5123, while1269_handlers2952
    push_eh $P5123
  while1269_test2949:
    set $N5007, $P104
    set $N5008, $P105
    isle $I5033, $N5007, $N5008
    box $P5124, $I5033
    set $P5122, $P5124
    unless $I5033 goto while1269_done2953 
  while1269_redo2951:
    find_lex $P5120, "$str"
    set $S5018, $P5120
    set tmp_2, $P104
    set $N5010, tmp_2
    set $N5011, 1
    add $N5009, $N5010, $N5011
    box $P5121, $N5009
    set $P104, $P5121
    set $I5034, tmp_2
    chr $S5019, $I5034
    concat $S5017, $S5018, $S5019
    box $P5121, $S5017
    store_lex "$str", $P5121
    set $P5122, $P5121
    goto while1269_test2949 
  while1269_handlers2952:
    .get_results ($P5123)
    pop_upto_eh $P5123
    getattribute $P5123, $P5123, 'type'
    eq $P5123, .CONTROL_LOOP_NEXT, while1269_test2949
    eq $P5123, .CONTROL_LOOP_REDO, while1269_redo2951
  while1269_done2953:
    pop_eh 
    .return ($P5122) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1361537946.1303") :anon :lex :outer("cuid_224_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 828
    .lex "$bs", $P101 
    .local pmc fb_tmp_293 
    .local pmc fb_tmp_294 
    .local pmc fb_tmp_295 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 829
    find_lex $P5002, "$_"
    set fb_tmp_294, $P5002
    repr_defined $I5002, fb_tmp_294
    unless $I5002 goto if1276_else2964 
    set $P5003, fb_tmp_294[0]
    set $P5005, $P5003
    goto if1276_end2965
  if1276_else2964:
    null $P5004
    set $P5005, $P5004
  if1276_end2965:
    unless_null $P5005, vivi_12772966
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5005, $P5006
  vivi_12772966:
    set fb_tmp_293, $P5005
    repr_defined $I5001, fb_tmp_293
    unless $I5001 goto if1275_else2962 
    set $P5007, fb_tmp_293["backslash"]
    set $P5009, $P5007
    goto if1275_end2963
  if1275_else2962:
    null $P5008
    set $P5009, $P5008
  if1275_end2963:
    unless_null $P5009, vivi_12782967
    nqp_get_sc_object $P5010, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5009, $P5010
  vivi_12782967:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2972
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5012, $P5013
  fallback2972:
    set fb_tmp_295, $P5012
    repr_defined $I5004, fb_tmp_295
    unless $I5004 goto if1280_else2970 
    set $P5014, fb_tmp_295["sign"]
    set $P5016, $P5014
    goto if1280_end2971
  if1280_else2970:
    null $P5015
    set $P5016, $P5015
  if1280_end2971:
    unless_null $P5016, vivi_12812973
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_12812973:
    set $S5001, $P5016
    iseq $I5003, $S5001, "-"
    unless $I5003 goto if1279_end2969 
.annotate 'line', 830
    $P5018 = $P101."negate"()
    isfalse $I5005, $P5018
    $P5019 = $P101."negate"($I5005)
  if1279_end2969:
.annotate 'line', 831
    find_lex $P5020, "@alts"
    $P5021 = $P5020."push"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_167_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 848
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5036 = 'cuid_227_1361537946.1303' 
    capture_lex $P5036 
    .const 'Sub' $P5036 = 'cuid_228_1361537946.1303' 
    capture_lex $P5036 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_305 
    .local pmc fb_tmp_306 
    .local pmc pkg_lookup_tmp_104 
    .local pmc fb_tmp_307 
    .local pmc fb_tmp_308 
    unless_null _lex_param_1, fallback3026
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5001
  fallback3026:
    set fb_tmp_305, _lex_param_1
    repr_defined $I5001, fb_tmp_305
    unless $I5001 goto if1309_else3024 
    set $P5002, fb_tmp_305["quote_EXPR"]
    set $P5004, $P5002
    goto if1309_end3025
  if1309_else3024:
    null $P5003
    set $P5004, $P5003
  if1309_end3025:
    unless_null $P5004, vivi_13103027
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_13103027:
    unless $P5004 goto if1308_else3022 
.annotate 'line', 849
.annotate 'line', 850
    nqp_get_sc_object $P5007, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_104, $P5007
    get_who $P5008, pkg_lookup_tmp_104
    exists $I5003, $P5008["QAST"]
    unless $I5003 goto if1313_else3032 
    get_who $P5010, pkg_lookup_tmp_104
    set $P5009, $P5010["QAST"]
    set $P5012, $P5009
    goto if1313_end3033
  if1313_else3032:
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5012, $P5011
  if1313_end3033:
    get_who $P5006, $P5012
    set fb_tmp_306, $P5006
    repr_defined $I5002, fb_tmp_306
    unless $I5002 goto if1312_else3030 
    set $P5013, fb_tmp_306["SVal"]
    set $P5015, $P5013
    goto if1312_end3031
  if1312_else3030:
    null $P5014
    set $P5015, $P5014
  if1312_end3031:
    unless_null $P5015, vivi_13143034
    nqp_get_sc_object $P5016, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5016
  vivi_13143034:
    unless_null _lex_param_1, fallback3039
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_1, $P5017
  fallback3039:
    set fb_tmp_308, _lex_param_1
    repr_defined $I5005, fb_tmp_308
    unless $I5005 goto if1316_else3037 
    set $P5018, fb_tmp_308["quote_EXPR"]
    set $P5020, $P5018
    goto if1316_end3038
  if1316_else3037:
    null $P5019
    set $P5020, $P5019
  if1316_end3038:
    unless_null $P5020, vivi_13173040
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5021
  vivi_13173040:
    set fb_tmp_307, $P5020
    repr_defined $I5004, fb_tmp_307
    unless $I5004 goto if1315_else3035 
    set $P5022, fb_tmp_307[0]
    set $P5024, $P5022
    goto if1315_end3036
  if1315_else3035:
    null $P5023
    set $P5024, $P5023
  if1315_end3036:
    unless_null $P5024, vivi_13183041
    nqp_get_sc_object $P5025, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5024, $P5025
  vivi_13183041:
    $P5026 = $P5024."ast"()
    $P5027 = $P5015."ACCEPTS"($P5026)
    unless $P5027 goto if1311_else3028 
    .const 'Sub' $P5028 = 'cuid_227_1361537946.1303' 
    capture_lex $P5028
    $P5029 = $P5028()
    set $P5032, $P5029
    goto if1311_end3029
  if1311_else3028:
.annotate 'line', 858
.annotate 'line', 859
    $P5030 = _lex_param_1."CURSOR"()
    $P5031 = $P5030."panic"("Internal modifier strings must be literals")
    set $P5032, $P5031
  if1311_end3029:
    set $P5035, $P5032
    goto if1308_end3023
  if1308_else3022:
    .const 'Sub' $P5033 = 'cuid_228_1361537946.1303' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5035, $P5034
  if1308_end3023:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1361537946.1303") :anon :lex :outer("cuid_167_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 850
    .lex "$key", $P101 
    .lex "$val", $P102 
    .local pmc fb_tmp_309 
    .local pmc fb_tmp_310 
    .local pmc fb_tmp_311 
    .local pmc fb_tmp_312 
    .local pmc fb_tmp_313 
    .local pmc pkg_viv_tmp_14 
    .local pmc fb_tmp_314 
    .local pmc pkg_lookup_tmp_105 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P102, $P5002
    find_lex $P5003, "$/"
    unless_null $P5003, fallback3046
    nqp_get_sc_object $P5004, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5003, $P5004
  fallback3046:
    set fb_tmp_310, $P5003
    repr_defined $I5002, fb_tmp_310
    unless $I5002 goto if1320_else3044 
    set $P5005, fb_tmp_310["mod_ident"]
    set $P5007, $P5005
    goto if1320_end3045
  if1320_else3044:
    null $P5006
    set $P5007, $P5006
  if1320_end3045:
    unless_null $P5007, vivi_13213047
    nqp_get_sc_object $P5008, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5008
  vivi_13213047:
    set fb_tmp_309, $P5007
    repr_defined $I5001, fb_tmp_309
    unless $I5001 goto if1319_else3042 
    set $P5009, fb_tmp_309["sym"]
    set $P5011, $P5009
    goto if1319_end3043
  if1319_else3042:
    null $P5010
    set $P5011, $P5010
  if1319_end3043:
    unless_null $P5011, vivi_13223048
    nqp_get_sc_object $P5012, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5011, $P5012
  vivi_13223048:
    set $S5001, $P5011
    box $P5013, $S5001
    set $P101, $P5013
.annotate 'line', 852
    find_lex $P5014, "$/"
    unless_null $P5014, fallback3053
    nqp_get_sc_object $P5015, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5014, $P5015
  fallback3053:
    set fb_tmp_312, $P5014
    repr_defined $I5004, fb_tmp_312
    unless $I5004 goto if1324_else3051 
    set $P5016, fb_tmp_312["quote_EXPR"]
    set $P5018, $P5016
    goto if1324_end3052
  if1324_else3051:
    null $P5017
    set $P5018, $P5017
  if1324_end3052:
    unless_null $P5018, vivi_13253054
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5019
  vivi_13253054:
    set fb_tmp_311, $P5018
    repr_defined $I5003, fb_tmp_311
    unless $I5003 goto if1323_else3049 
    set $P5020, fb_tmp_311[0]
    set $P5022, $P5020
    goto if1323_end3050
  if1323_else3049:
    null $P5021
    set $P5022, $P5021
  if1323_end3050:
    unless_null $P5022, vivi_13263055
    nqp_get_sc_object $P5023, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5022, $P5023
  vivi_13263055:
    $P5024 = $P5022."ast"()
    $P5025 = $P5024."value"()
    set $P102, $P5025
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback3056
    nqp_get_sc_object $P5028, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5027, $P5028
    set pkg_viv_tmp_14, $P5027
    set fb_tmp_313, pkg_viv_tmp_14
    repr_defined $I5005, fb_tmp_313
    unless $I5005 goto if1327_else3057 
    set $P5029, fb_tmp_313["%RX"]
    set $P5031, $P5029
    goto if1327_end3058
  if1327_else3057:
    null $P5030
    set $P5031, $P5030
  if1327_end3058:
    unless_null $P5031, vivi_13283059
    new $P5032, 'Hash'
    set pkg_viv_tmp_14["%RX"], $P5032
    set $P5031, $P5032
  vivi_13283059:
    unless_null $P5031, vivi_13293060
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5031, $P5033
  vivi_13293060:
    set $P5026, $P5031
  fallback3056:
    set $S5002, $P101
    set $P5026[$S5002], $P102
.annotate 'line', 854
    find_dynamic_lex $P5034, "$/"
    set $S5003, $P101
    iseq $I5006, $S5003, "dba"
    unless $I5006 goto if1330_else3061 
.annotate 'line', 855
    nqp_get_sc_object $P5036, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_105, $P5036
    get_who $P5037, pkg_lookup_tmp_105
    exists $I5008, $P5037["QAST"]
    unless $I5008 goto if1332_else3065 
    get_who $P5039, pkg_lookup_tmp_105
    set $P5038, $P5039["QAST"]
    set $P5041, $P5038
    goto if1332_end3066
  if1332_else3065:
    nqp_get_sc_object $P5040, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5041, $P5040
  if1332_end3066:
    get_who $P5035, $P5041
    set fb_tmp_314, $P5035
    repr_defined $I5007, fb_tmp_314
    unless $I5007 goto if1331_else3063 
    set $P5042, fb_tmp_314["Regex"]
    set $P5044, $P5042
    goto if1331_end3064
  if1331_else3063:
    null $P5043
    set $P5044, $P5043
  if1331_end3064:
    unless_null $P5044, vivi_13333067
    nqp_get_sc_object $P5045, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5044, $P5045
  vivi_13333067:
    $P5046 = $P5044."new"("dba" :named("rxtype"), $P102 :named("name"))
    set $P5047, $P5046
    goto if1330_end3062
  if1330_else3061:
    box $P5048, 0
    set $P5047, $P5048
  if1330_end3062:
    $P5049 = $P5034."!make"($P5047)
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_228_1361537946.1303") :anon :lex :outer("cuid_167_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 862
    .lex "$n", $P101 
    .local pmc fb_tmp_315 
    .local pmc fb_tmp_316 
    .local pmc fb_tmp_317 
    .local pmc fb_tmp_318 
    .local pmc fb_tmp_319 
    .local pmc pkg_viv_tmp_15 
    .local pmc fb_tmp_320 
    .local pmc fb_tmp_321 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback3074
    nqp_get_sc_object $P5003, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5002, $P5003
  fallback3074:
    set fb_tmp_316, $P5002
    repr_defined $I5003, fb_tmp_316
    unless $I5003 goto if1336_else3072 
    set $P5004, fb_tmp_316["n"]
    set $P5006, $P5004
    goto if1336_end3073
  if1336_else3072:
    null $P5005
    set $P5006, $P5005
  if1336_end3073:
    unless_null $P5006, vivi_13373075
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_13373075:
    set fb_tmp_315, $P5006
    repr_defined $I5002, fb_tmp_315
    unless $I5002 goto if1335_else3070 
    set $P5008, fb_tmp_315[0]
    set $P5010, $P5008
    goto if1335_end3071
  if1335_else3070:
    null $P5009
    set $P5010, $P5009
  if1335_end3071:
    unless_null $P5010, vivi_13383076
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_13383076:
    set $S5001, $P5010
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1334_else3068 
    find_lex $P5012, "$/"
    unless_null $P5012, fallback3081
    nqp_get_sc_object $P5013, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5012, $P5013
  fallback3081:
    set fb_tmp_318, $P5012
    repr_defined $I5005, fb_tmp_318
    unless $I5005 goto if1340_else3079 
    set $P5014, fb_tmp_318["n"]
    set $P5016, $P5014
    goto if1340_end3080
  if1340_else3079:
    null $P5015
    set $P5016, $P5015
  if1340_end3080:
    unless_null $P5016, vivi_13413082
    nqp_get_sc_object $P5017, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5017
  vivi_13413082:
    set fb_tmp_317, $P5016
    repr_defined $I5004, fb_tmp_317
    unless $I5004 goto if1339_else3077 
    set $P5018, fb_tmp_317[0]
    set $P5020, $P5018
    goto if1339_end3078
  if1339_else3077:
    null $P5019
    set $P5020, $P5019
  if1339_end3078:
    unless_null $P5020, vivi_13423083
    nqp_get_sc_object $P5021, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5020, $P5021
  vivi_13423083:
    set $N5001, $P5020
    box $P5023, $N5001
    set $P5022, $P5023
    goto if1334_end3069
  if1334_else3068:
    box $P5024, 1
    set $P5022, $P5024
  if1334_end3069:
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*RX"
    unless_null $P5025, fallback3084
    nqp_get_sc_object $P5027, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5026, $P5027
    set pkg_viv_tmp_15, $P5026
    set fb_tmp_319, pkg_viv_tmp_15
    repr_defined $I5006, fb_tmp_319
    unless $I5006 goto if1343_else3085 
    set $P5028, fb_tmp_319["%RX"]
    set $P5030, $P5028
    goto if1343_end3086
  if1343_else3085:
    null $P5029
    set $P5030, $P5029
  if1343_end3086:
    unless_null $P5030, vivi_13443087
    new $P5031, 'Hash'
    set pkg_viv_tmp_15["%RX"], $P5031
    set $P5030, $P5031
  vivi_13443087:
    unless_null $P5030, vivi_13453088
    die "Contextual %*RX not found"
    box $P5032, "Contextual %*RX not found"
    set $P5030, $P5032
  vivi_13453088:
    set $P5025, $P5030
  fallback3084:
    find_lex $P5033, "$/"
    unless_null $P5033, fallback3093
    nqp_get_sc_object $P5034, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5033, $P5034
  fallback3093:
    set fb_tmp_321, $P5033
    repr_defined $I5008, fb_tmp_321
    unless $I5008 goto if1347_else3091 
    set $P5035, fb_tmp_321["mod_ident"]
    set $P5037, $P5035
    goto if1347_end3092
  if1347_else3091:
    null $P5036
    set $P5037, $P5036
  if1347_end3092:
    unless_null $P5037, vivi_13483094
    nqp_get_sc_object $P5038, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5037, $P5038
  vivi_13483094:
    set fb_tmp_320, $P5037
    repr_defined $I5007, fb_tmp_320
    unless $I5007 goto if1346_else3089 
    set $P5039, fb_tmp_320["sym"]
    set $P5041, $P5039
    goto if1346_end3090
  if1346_else3089:
    null $P5040
    set $P5041, $P5040
  if1346_end3090:
    unless_null $P5041, vivi_13493095
    nqp_get_sc_object $P5042, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5041, $P5042
  vivi_13493095:
    set $S5002, $P5041
    set $P5025[$S5002], $P101
.annotate 'line', 865
    find_dynamic_lex $P5043, "$/"
    $P5044 = $P5043."!make"(0)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "qbuildsub" :subid("cuid_168_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 876
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("anon") :optional 
    .param int haz_param_3 :opt_flag 
    .param pmc _lex_param_4 :named("addself") :optional 
    .param int haz_param_4 :opt_flag 
    .param pmc _lex_param_5 :slurpy :named 
    .lex "$code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$anon", _lex_param_3 
    .lex "$addself", _lex_param_4 
    .lex "%rest", _lex_param_5 
    .local pmc fb_tmp_322 
    .local pmc fb_tmp_323 
    .local pmc pkg_lookup_tmp_107 
    .local pmc fb_tmp_324 
    .local pmc pkg_lookup_tmp_108 
    .local pmc fb_tmp_325 
    .local pmc pkg_lookup_tmp_109 
    .local pmc fb_tmp_326 
    .local pmc pkg_lookup_tmp_110 
    .local pmc fb_tmp_327 
    .local pmc pkg_lookup_tmp_111 
    .local pmc fb_tmp_328 
    .local pmc pkg_lookup_tmp_112 
    .local pmc fb_tmp_329 
    .local pmc fb_tmp_330 
    .local pmc pkg_viv_tmp_16 
    .local pmc fb_tmp_331 
    .local pmc pkg_lookup_tmp_113 
    .local pmc fb_tmp_332 
    .local pmc fb_tmp_333 
    .local pmc pkg_viv_tmp_17 
    .local pmc fb_tmp_334 
    .local pmc pkg_lookup_tmp_114 
    .local pmc fb_tmp_335 
    .local pmc pkg_lookup_tmp_115 
    .local pmc fb_tmp_336 
    .local pmc fb_tmp_337 
    .local pmc pkg_viv_tmp_18 
    .local pmc fb_tmp_338 
    .local pmc pkg_lookup_tmp_106 
    if haz_param_2, default3178
    nqp_get_sc_object $P5164, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_106, $P5164
    get_who $P5165, pkg_lookup_tmp_106
    exists $I5029, $P5165["QAST"]
    unless $I5029 goto if1400_else3181 
    get_who $P5167, pkg_lookup_tmp_106
    set $P5166, $P5167["QAST"]
    set $P5169, $P5166
    goto if1400_end3182
  if1400_else3181:
    nqp_get_sc_object $P5168, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5169, $P5168
  if1400_end3182:
    get_who $P5163, $P5169
    set fb_tmp_338, $P5163
    repr_defined $I5028, fb_tmp_338
    unless $I5028 goto if1399_else3179 
    set $P5170, fb_tmp_338["Block"]
    set $P5172, $P5170
    goto if1399_end3180
  if1399_else3179:
    null $P5171
    set $P5172, $P5171
  if1399_end3180:
    unless_null $P5172, vivi_14013183
    nqp_get_sc_object $P5173, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5172, $P5173
  vivi_14013183:
    $P5174 = $P5172."new"()
    set _lex_param_2, $P5174
  default3178:
    if haz_param_3, default3184
    nqp_get_sc_object $P5175, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_3, $P5175
  default3184:
    if haz_param_4, default3185
    nqp_get_sc_object $P5176, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set _lex_param_4, $P5176
  default3185:
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
    exists $I5001, _lex_param_5["code_obj"]
    unless $I5001 goto if1350_else3096 
    set fb_tmp_322, _lex_param_5
    repr_defined $I5002, fb_tmp_322
    unless $I5002 goto if1351_else3098 
    set $P5002, fb_tmp_322["code_obj"]
    set $P5004, $P5002
    goto if1351_end3099
  if1351_else3098:
    null $P5003
    set $P5004, $P5003
  if1351_end3099:
    unless_null $P5004, vivi_13523100
    nqp_get_sc_object $P5005, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5004, $P5005
  vivi_13523100:
    set $P5008, $P5004
    goto if1350_end3097
  if1350_else3096:
.annotate 'line', 879
    nqp_decontainerize $P5006, _lex_param_0
    $P5007 = $P5006."create_regex_code_object"(_lex_param_2)
    set $P5008, $P5007
  if1350_end3097:
    set $P101, $P5008
    unless _lex_param_4 goto if1353_end3102 
.annotate 'line', 881
.annotate 'line', 882
    nqp_get_sc_object $P5010, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_107, $P5010
    get_who $P5011, pkg_lookup_tmp_107
    exists $I5004, $P5011["QAST"]
    unless $I5004 goto if1355_else3105 
    get_who $P5013, pkg_lookup_tmp_107
    set $P5012, $P5013["QAST"]
    set $P5015, $P5012
    goto if1355_end3106
  if1355_else3105:
    nqp_get_sc_object $P5014, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5014
  if1355_end3106:
    get_who $P5009, $P5015
    set fb_tmp_323, $P5009
    repr_defined $I5003, fb_tmp_323
    unless $I5003 goto if1354_else3103 
    set $P5016, fb_tmp_323["Var"]
    set $P5018, $P5016
    goto if1354_end3104
  if1354_else3103:
    null $P5017
    set $P5018, $P5017
  if1354_end3104:
    unless_null $P5018, vivi_13563107
    nqp_get_sc_object $P5019, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5018, $P5019
  vivi_13563107:
    $P5020 = $P5018."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
    $P5021 = _lex_param_2."push"($P5020)
  if1353_end3102:
.annotate 'line', 884
    $P5022 = _lex_param_2."symbol"(utf8:"$\x{a2}")
    if $P5022 goto unless1357_end3109 
.annotate 'line', 885
    nqp_get_sc_object $P5024, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_108, $P5024
    get_who $P5025, pkg_lookup_tmp_108
    exists $I5006, $P5025["QAST"]
    unless $I5006 goto if1359_else3112 
    get_who $P5027, pkg_lookup_tmp_108
    set $P5026, $P5027["QAST"]
    set $P5029, $P5026
    goto if1359_end3113
  if1359_else3112:
    nqp_get_sc_object $P5028, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5029, $P5028
  if1359_end3113:
    get_who $P5023, $P5029
    set fb_tmp_324, $P5023
    repr_defined $I5005, fb_tmp_324
    unless $I5005 goto if1358_else3110 
    set $P5030, fb_tmp_324["Var"]
    set $P5032, $P5030
    goto if1358_end3111
  if1358_else3110:
    null $P5031
    set $P5032, $P5031
  if1358_end3111:
    unless_null $P5032, vivi_13603114
    nqp_get_sc_object $P5033, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5032, $P5033
  vivi_13603114:
    $P5034 = $P5032."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    _lex_param_2."push"($P5034)
.annotate 'line', 886
    $P5035 = _lex_param_2."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
  unless1357_end3109:
.annotate 'line', 889
    nqp_decontainerize $P5036, _lex_param_0
    $P5037 = "&capnames"(_lex_param_1, 0)
    $P5036."store_regex_caps"($P101, _lex_param_2, $P5037)
.annotate 'line', 890
    nqp_decontainerize $P5038, _lex_param_0
    nqp_get_sc_object $P5040, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_109, $P5040
    get_who $P5041, pkg_lookup_tmp_109
    exists $I5008, $P5041["QRegex"]
    unless $I5008 goto if1362_else3117 
    get_who $P5043, pkg_lookup_tmp_109
    set $P5042, $P5043["QRegex"]
    set $P5045, $P5042
    goto if1362_end3118
  if1362_else3117:
    nqp_get_sc_object $P5044, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5045, $P5044
  if1362_end3118:
    get_who $P5039, $P5045
    set fb_tmp_325, $P5039
    repr_defined $I5007, fb_tmp_325
    unless $I5007 goto if1361_else3115 
    set $P5046, fb_tmp_325["NFA"]
    set $P5048, $P5046
    goto if1361_end3116
  if1361_else3115:
    null $P5047
    set $P5048, $P5047
  if1361_end3116:
    unless_null $P5048, vivi_13633119
    nqp_get_sc_object $P5049, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5048, $P5049
  vivi_13633119:
    $P5050 = $P5048."new"()
    $P5051 = $P5050."addnode"(_lex_param_1)
    $P5038."store_regex_nfa"($P101, _lex_param_2, $P5051)
.annotate 'line', 891
    nqp_decontainerize $P5052, _lex_param_0
    $P5052."alt_nfas"($P101, _lex_param_2, _lex_param_1)
    set _lex_param_2["orig_qast"], _lex_param_1
.annotate 'line', 894
    nqp_get_sc_object $P5054, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_110, $P5054
    get_who $P5055, pkg_lookup_tmp_110
    exists $I5010, $P5055["QAST"]
    unless $I5010 goto if1365_else3122 
    get_who $P5057, pkg_lookup_tmp_110
    set $P5056, $P5057["QAST"]
    set $P5059, $P5056
    goto if1365_end3123
  if1365_else3122:
    nqp_get_sc_object $P5058, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5059, $P5058
  if1365_end3123:
    get_who $P5053, $P5059
    set fb_tmp_326, $P5053
    repr_defined $I5009, fb_tmp_326
    unless $I5009 goto if1364_else3120 
    set $P5060, fb_tmp_326["Regex"]
    set $P5062, $P5060
    goto if1364_end3121
  if1364_else3120:
    null $P5061
    set $P5062, $P5061
  if1364_end3121:
    unless_null $P5062, vivi_13663124
    nqp_get_sc_object $P5063, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5062, $P5063
  vivi_13663124:
.annotate 'line', 895
    nqp_get_sc_object $P5065, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_111, $P5065
    get_who $P5066, pkg_lookup_tmp_111
    exists $I5012, $P5066["QAST"]
    unless $I5012 goto if1368_else3127 
    get_who $P5068, pkg_lookup_tmp_111
    set $P5067, $P5068["QAST"]
    set $P5070, $P5067
    goto if1368_end3128
  if1368_else3127:
    nqp_get_sc_object $P5069, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5070, $P5069
  if1368_end3128:
    get_who $P5064, $P5070
    set fb_tmp_327, $P5064
    repr_defined $I5011, fb_tmp_327
    unless $I5011 goto if1367_else3125 
    set $P5071, fb_tmp_327["Regex"]
    set $P5073, $P5071
    goto if1367_end3126
  if1367_else3125:
    null $P5072
    set $P5073, $P5072
  if1367_end3126:
    unless_null $P5073, vivi_13693129
    nqp_get_sc_object $P5074, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5073, $P5074
  vivi_13693129:
    $P5075 = $P5073."new"("scan" :named("rxtype"))
    unless _lex_param_3 goto if1370_else3130 
.annotate 'line', 898
    nqp_get_sc_object $P5077, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_112, $P5077
    get_who $P5078, pkg_lookup_tmp_112
    exists $I5014, $P5078["QAST"]
    unless $I5014 goto if1372_else3134 
    get_who $P5080, pkg_lookup_tmp_112
    set $P5079, $P5080["QAST"]
    set $P5082, $P5079
    goto if1372_end3135
  if1372_else3134:
    nqp_get_sc_object $P5081, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5082, $P5081
  if1372_end3135:
    get_who $P5076, $P5082
    set fb_tmp_328, $P5076
    repr_defined $I5013, fb_tmp_328
    unless $I5013 goto if1371_else3132 
    set $P5083, fb_tmp_328["Regex"]
    set $P5085, $P5083
    goto if1371_end3133
  if1371_else3132:
    null $P5084
    set $P5085, $P5084
  if1371_end3133:
    unless_null $P5085, vivi_13733136
    nqp_get_sc_object $P5086, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5085, $P5086
  vivi_13733136:
    $P5087 = $P5085."new"("pass" :named("rxtype"))
    set $P5161, $P5087
    goto if1370_end3131
  if1370_else3130:
    find_dynamic_lex $P5088, "%*RX"
    unless_null $P5088, fallback3141
    nqp_get_sc_object $P5090, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5089, $P5090
    set pkg_viv_tmp_16, $P5089
    set fb_tmp_330, pkg_viv_tmp_16
    repr_defined $I5017, fb_tmp_330
    unless $I5017 goto if1376_else3142 
    set $P5091, fb_tmp_330["%RX"]
    set $P5093, $P5091
    goto if1376_end3143
  if1376_else3142:
    null $P5092
    set $P5093, $P5092
  if1376_end3143:
    unless_null $P5093, vivi_13773144
    new $P5094, 'Hash'
    set pkg_viv_tmp_16["%RX"], $P5094
    set $P5093, $P5094
  vivi_13773144:
    unless_null $P5093, vivi_13783145
    die "Contextual %*RX not found"
    box $P5095, "Contextual %*RX not found"
    set $P5093, $P5095
  vivi_13783145:
    set $P5088, $P5093
  fallback3141:
    set fb_tmp_329, $P5088
    repr_defined $I5016, fb_tmp_329
    unless $I5016 goto if1375_else3139 
    set $P5096, fb_tmp_329["name"]
    set $P5098, $P5096
    goto if1375_end3140
  if1375_else3139:
    null $P5097
    set $P5098, $P5097
  if1375_end3140:
    unless_null $P5098, vivi_13793146
    nqp_get_sc_object $P5099, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5098, $P5099
  vivi_13793146:
    set $S5002, $P5098
    substr $S5001, $S5002, 0, 12
    isne $I5015, $S5001, "!!LATENAME!!"
    unless $I5015 goto if1374_else3137 
.annotate 'line', 900
    nqp_get_sc_object $P5101, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_113, $P5101
    get_who $P5102, pkg_lookup_tmp_113
    exists $I5019, $P5102["QAST"]
    unless $I5019 goto if1381_else3149 
    get_who $P5104, pkg_lookup_tmp_113
    set $P5103, $P5104["QAST"]
    set $P5106, $P5103
    goto if1381_end3150
  if1381_else3149:
    nqp_get_sc_object $P5105, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5106, $P5105
  if1381_end3150:
    get_who $P5100, $P5106
    set fb_tmp_331, $P5100
    repr_defined $I5018, fb_tmp_331
    unless $I5018 goto if1380_else3147 
    set $P5107, fb_tmp_331["Regex"]
    set $P5109, $P5107
    goto if1380_end3148
  if1380_else3147:
    null $P5108
    set $P5109, $P5108
  if1380_end3148:
    unless_null $P5109, vivi_13823151
    nqp_get_sc_object $P5110, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5109, $P5110
  vivi_13823151:
    find_dynamic_lex $P5111, "%*RX"
    unless_null $P5111, fallback3154
    nqp_get_sc_object $P5113, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5112, $P5113
    set pkg_viv_tmp_17, $P5112
    set fb_tmp_333, pkg_viv_tmp_17
    repr_defined $I5021, fb_tmp_333
    unless $I5021 goto if1384_else3155 
    set $P5114, fb_tmp_333["%RX"]
    set $P5116, $P5114
    goto if1384_end3156
  if1384_else3155:
    null $P5115
    set $P5116, $P5115
  if1384_end3156:
    unless_null $P5116, vivi_13853157
    new $P5117, 'Hash'
    set pkg_viv_tmp_17["%RX"], $P5117
    set $P5116, $P5117
  vivi_13853157:
    unless_null $P5116, vivi_13863158
    die "Contextual %*RX not found"
    box $P5118, "Contextual %*RX not found"
    set $P5116, $P5118
  vivi_13863158:
    set $P5111, $P5116
  fallback3154:
    set fb_tmp_332, $P5111
    repr_defined $I5020, fb_tmp_332
    unless $I5020 goto if1383_else3152 
    set $P5119, fb_tmp_332["name"]
    set $P5121, $P5119
    goto if1383_end3153
  if1383_else3152:
    null $P5120
    set $P5121, $P5120
  if1383_end3153:
    unless_null $P5121, vivi_13873159
    nqp_get_sc_object $P5122, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5121, $P5122
  vivi_13873159:
    $P5123 = $P5109."new"("pass" :named("rxtype"), $P5121 :named("name"))
    set $P5160, $P5123
    goto if1374_end3138
  if1374_else3137:
.annotate 'line', 901
    nqp_get_sc_object $P5125, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_114, $P5125
    get_who $P5126, pkg_lookup_tmp_114
    exists $I5023, $P5126["QAST"]
    unless $I5023 goto if1389_else3162 
    get_who $P5128, pkg_lookup_tmp_114
    set $P5127, $P5128["QAST"]
    set $P5130, $P5127
    goto if1389_end3163
  if1389_else3162:
    nqp_get_sc_object $P5129, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5130, $P5129
  if1389_end3163:
    get_who $P5124, $P5130
    set fb_tmp_334, $P5124
    repr_defined $I5022, fb_tmp_334
    unless $I5022 goto if1388_else3160 
    set $P5131, fb_tmp_334["Regex"]
    set $P5133, $P5131
    goto if1388_end3161
  if1388_else3160:
    null $P5132
    set $P5133, $P5132
  if1388_end3161:
    unless_null $P5133, vivi_13903164
    nqp_get_sc_object $P5134, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5133, $P5134
  vivi_13903164:
.annotate 'line', 902
    nqp_get_sc_object $P5136, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_115, $P5136
    get_who $P5137, pkg_lookup_tmp_115
    exists $I5025, $P5137["QAST"]
    unless $I5025 goto if1392_else3167 
    get_who $P5139, pkg_lookup_tmp_115
    set $P5138, $P5139["QAST"]
    set $P5141, $P5138
    goto if1392_end3168
  if1392_else3167:
    nqp_get_sc_object $P5140, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5141, $P5140
  if1392_end3168:
    get_who $P5135, $P5141
    set fb_tmp_335, $P5135
    repr_defined $I5024, fb_tmp_335
    unless $I5024 goto if1391_else3165 
    set $P5142, fb_tmp_335["Var"]
    set $P5144, $P5142
    goto if1391_end3166
  if1391_else3165:
    null $P5143
    set $P5144, $P5143
  if1391_end3166:
    unless_null $P5144, vivi_13933169
    nqp_get_sc_object $P5145, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5144, $P5145
  vivi_13933169:
    find_dynamic_lex $P5146, "%*RX"
    unless_null $P5146, fallback3172
    nqp_get_sc_object $P5148, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5147, $P5148
    set pkg_viv_tmp_18, $P5147
    set fb_tmp_337, pkg_viv_tmp_18
    repr_defined $I5027, fb_tmp_337
    unless $I5027 goto if1395_else3173 
    set $P5149, fb_tmp_337["%RX"]
    set $P5151, $P5149
    goto if1395_end3174
  if1395_else3173:
    null $P5150
    set $P5151, $P5150
  if1395_end3174:
    unless_null $P5151, vivi_13963175
    new $P5152, 'Hash'
    set pkg_viv_tmp_18["%RX"], $P5152
    set $P5151, $P5152
  vivi_13963175:
    unless_null $P5151, vivi_13973176
    die "Contextual %*RX not found"
    box $P5153, "Contextual %*RX not found"
    set $P5151, $P5153
  vivi_13973176:
    set $P5146, $P5151
  fallback3172:
    set fb_tmp_336, $P5146
    repr_defined $I5026, fb_tmp_336
    unless $I5026 goto if1394_else3170 
    set $P5154, fb_tmp_336["name"]
    set $P5156, $P5154
    goto if1394_end3171
  if1394_else3170:
    null $P5155
    set $P5156, $P5155
  if1394_end3171:
    unless_null $P5156, vivi_13983177
    nqp_get_sc_object $P5157, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5156, $P5157
  vivi_13983177:
    set $S5004, $P5156
    substr $S5003, $S5004, 12
    $P5158 = $P5144."new"($S5003 :named("name"), "lexical" :named("scope"))
    $P5159 = $P5133."new"($P5158, "pass" :named("rxtype"))
    set $P5160, $P5159
  if1374_end3138:
    set $P5161, $P5160
  if1370_end3131:
    $P5162 = $P5062."new"($P5075, _lex_param_1, $P5161, "concat" :named("rxtype"))
    set _lex_param_1, $P5162
.annotate 'line', 908
    _lex_param_2."push"(_lex_param_1)
    .return (_lex_param_2) 
.end
.HLL "nqp"
.namespace []
.sub "alt_nfas" :subid("cuid_169_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 963
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5021 = 'cuid_230_1361537946.1303' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_231_1361537946.1303' 
    capture_lex $P5021 
    .lex "$rxtype", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$ast", _lex_param_3 
    .local pmc fb_tmp_341 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P101, $P5001
.annotate 'line', 964
    $P5002 = _lex_param_3."rxtype"()
    set $P101, $P5002
    set $S5001, $P101
    iseq $I5001, $S5001, "alt"
    unless $I5001 goto if1402_else3186 
    .const 'Sub' $P5003 = 'cuid_230_1361537946.1303' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5020, $P5004
    goto if1402_end3187
  if1402_else3186:
    set $S5002, $P101
    iseq $I5002, $S5002, "subcapture"
    set $I5004, $I5002
    if $I5002 goto unless1410_end3204 
    set $S5003, $P101
    iseq $I5003, $S5003, "quant"
    set $I5004, $I5003
  unless1410_end3204:
    unless $I5004 goto if1409_else3201 
.annotate 'line', 974
.annotate 'line', 975
    nqp_decontainerize $P5005, _lex_param_0
    set fb_tmp_341, _lex_param_3
    repr_defined $I5005, fb_tmp_341
    unless $I5005 goto if1411_else3205 
    set $P5006, fb_tmp_341[0]
    set $P5008, $P5006
    goto if1411_end3206
  if1411_else3205:
    null $P5007
    set $P5008, $P5007
  if1411_end3206:
    unless_null $P5008, vivi_14123207
    nqp_get_sc_object $P5009, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5008, $P5009
  vivi_14123207:
    $P5010 = $P5005."alt_nfas"(_lex_param_1, _lex_param_2, $P5008)
    set $P5019, $P5010
    goto if1409_end3202
  if1409_else3201:
    set $S5004, $P101
    iseq $I5006, $S5004, "concat"
    set $I5008, $I5006
    if $I5006 goto unless1416_end3215 
    set $S5005, $P101
    iseq $I5007, $S5005, "altseq"
    set $I5008, $I5007
  unless1416_end3215:
    set $I5010, $I5008
    if $I5008 goto unless1415_end3213 
    set $S5006, $P101
    iseq $I5009, $S5006, "conj"
    set $I5010, $I5009
  unless1415_end3213:
    set $I5012, $I5010
    if $I5010 goto unless1414_end3211 
    set $S5007, $P101
    iseq $I5011, $S5007, "conjseq"
    set $I5012, $I5011
  unless1414_end3211:
    box $P5018, $I5012
    set $P5017, $P5018
    unless $I5012 goto if1413_end3209 
.annotate 'line', 977
.annotate 'line', 978
    $P5014 = _lex_param_3."list"()
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next3216:
    unless $P5013, for_done3218
    shift $P5016, $P5013
  for_redo3217:
    .const 'Sub' $P5015 = 'cuid_231_1361537946.1303' 
    capture_lex $P5015
    $P5011 = $P5015($P5016)
    goto for_next3216
  for_done3218:
    set $P5017, $P5011
  if1413_end3209:
    set $P5019, $P5017
  if1409_end3202:
    set $P5020, $P5019
  if1402_end3187:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1361537946.1303") :anon :lex :outer("cuid_169_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 965
    .const 'Sub' $P5029 = 'cuid_229_1361537946.1303' 
    capture_lex $P5029 
    .lex "@alternatives", $P101 
    .local pmc fb_tmp_340 
    .local pmc pkg_lookup_tmp_117 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 967
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3193:
    unless $P5004, for_done3195
    shift $P5008, $P5004
  for_redo3194:
    .const 'Sub' $P5007 = 'cuid_229_1361537946.1303' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3193
  for_done3195:
.annotate 'line', 971
    find_lex $P5009, "$ast"
    nqp_get_sc_object $P5011, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_117, $P5011
    get_who $P5012, pkg_lookup_tmp_117
    exists $I5002, $P5012["QAST"]
    unless $I5002 goto if1407_else3198 
    get_who $P5014, pkg_lookup_tmp_117
    set $P5013, $P5014["QAST"]
    set $P5016, $P5013
    goto if1407_end3199
  if1407_else3198:
    nqp_get_sc_object $P5015, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5016, $P5015
  if1407_end3199:
    get_who $P5010, $P5016
    set fb_tmp_340, $P5010
    repr_defined $I5001, fb_tmp_340
    unless $I5001 goto if1406_else3196 
    set $P5017, fb_tmp_340["Node"]
    set $P5019, $P5017
    goto if1406_end3197
  if1406_else3196:
    null $P5018
    set $P5019, $P5018
  if1406_end3197:
    unless_null $P5019, vivi_14083200
    nqp_get_sc_object $P5020, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5019, $P5020
  vivi_14083200:
    $P5021 = $P5019."unique"("alt_nfa_")
    set $S5003, $P5021
    concat $S5002, $S5003, "_"
    time $N5001
    set $S5004, $N5001
    concat $S5001, $S5002, $S5004
    $P5009."name"($S5001)
.annotate 'line', 972
    find_lex $P5023, "self"
    nqp_decontainerize $P5022, $P5023
    find_lex $P5024, "$code_obj"
    find_lex $P5025, "$block"
    find_lex $P5026, "$ast"
    $P5027 = $P5026."name"()
    $P5028 = $P5022."store_regex_alt_nfa"($P5024, $P5025, $P5027, $P101)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1361537946.1303") :anon :lex :outer("cuid_230_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 967
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_339 
    .local pmc pkg_lookup_tmp_116 
.annotate 'line', 968
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    find_lex $P5005, "@alternatives"
.annotate 'line', 969
    nqp_get_sc_object $P5007, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_116, $P5007
    get_who $P5008, pkg_lookup_tmp_116
    exists $I5002, $P5008["QRegex"]
    unless $I5002 goto if1404_else3190 
    get_who $P5010, pkg_lookup_tmp_116
    set $P5009, $P5010["QRegex"]
    set $P5012, $P5009
    goto if1404_end3191
  if1404_else3190:
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5012, $P5011
  if1404_end3191:
    get_who $P5006, $P5012
    set fb_tmp_339, $P5006
    repr_defined $I5001, fb_tmp_339
    unless $I5001 goto if1403_else3188 
    set $P5013, fb_tmp_339["NFA"]
    set $P5015, $P5013
    goto if1403_end3189
  if1403_else3188:
    null $P5014
    set $P5015, $P5014
  if1403_end3189:
    unless_null $P5015, vivi_14053192
    nqp_get_sc_object $P5016, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5015, $P5016
  vivi_14053192:
    $P5017 = $P5015."new"()
    $P5018 = $P5017."addnode"(_lex_param_0)
    push $P5005, $P5018
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1361537946.1303") :anon :lex :outer("cuid_169_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 978
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5005 = $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "subrule_alias" :subid("cuid_170_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$ast", _lex_param_1 
    .lex "$name", _lex_param_2 
.annotate 'line', 983
    $P5001 = _lex_param_1."name"()
    set $S5001, $P5001
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1417_else3219 
    set $S5004, _lex_param_2
    concat $S5003, $S5004, "="
    $P5002 = _lex_param_1."name"()
    set $S5005, $P5002
    concat $S5002, $S5003, $S5005
    $P5003 = _lex_param_1."name"($S5002)
    goto if1417_end3220
  if1417_else3219:
.annotate 'line', 984
    $P5004 = _lex_param_1."name"(_lex_param_2)
  if1417_end3220:
.annotate 'line', 985
    $P5005 = _lex_param_1."subtype"("capture")
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "flip_ast" :subid("cuid_171_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 988
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_232_1361537946.1303' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_233_1361537946.1303' 
    capture_lex $P5030 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .local pmc fb_tmp_342 
    .local pmc pkg_lookup_tmp_118 
    .local pmc fb_tmp_343 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_3221
    .lex "RETURN", $P101
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    set pkg_lookup_tmp_118, $P5002
    get_who $P5003, pkg_lookup_tmp_118
    exists $I5003, $P5003["QAST"]
    unless $I5003 goto if1420_else3227 
    get_who $P5005, pkg_lookup_tmp_118
    set $P5004, $P5005["QAST"]
    set $P5007, $P5004
    goto if1420_end3228
  if1420_else3227:
    nqp_get_sc_object $P5006, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5007, $P5006
  if1420_end3228:
    get_who $P5001, $P5007
    set fb_tmp_342, $P5001
    repr_defined $I5002, fb_tmp_342
    unless $I5002 goto if1419_else3225 
    set $P5008, fb_tmp_342["Regex"]
    set $P5010, $P5008
    goto if1419_end3226
  if1419_else3225:
    null $P5009
    set $P5010, $P5009
  if1419_end3226:
    unless_null $P5010, vivi_14213229
    nqp_get_sc_object $P5011, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5010, $P5011
  vivi_14213229:
    type_check $I5001, _lex_param_1, $P5010
    if $I5001 goto unless1418_end3224 
    find_lex $P5012, "RETURN"
    $P5013 = $P5012(_lex_param_1)
  unless1418_end3224:
.annotate 'line', 990
    $P5014 = _lex_param_1."rxtype"()
    set $S5001, $P5014
    iseq $I5004, $S5001, "literal"
    unless $I5004 goto if1422_else3230 
.annotate 'line', 991
    set fb_tmp_343, _lex_param_1
    repr_defined $I5005, fb_tmp_343
    unless $I5005 goto if1423_else3232 
    set $P5015, fb_tmp_343[0]
    set $P5017, $P5015
    goto if1423_end3233
  if1423_else3232:
    null $P5016
    set $P5017, $P5016
  if1423_end3233:
    unless_null $P5017, vivi_14243234
    nqp_get_sc_object $P5018, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5017, $P5018
  vivi_14243234:
    $P5019 = $P5017."reverse"()
    set _lex_param_1[0], $P5019
    goto if1422_end3231
  if1422_else3230:
.annotate 'line', 993
    $P5020 = _lex_param_1."rxtype"()
    set $S5002, $P5020
    iseq $I5006, $S5002, "concat"
    unless $I5006 goto if1425_else3235 
    .const 'Sub' $P5021 = 'cuid_232_1361537946.1303' 
    capture_lex $P5021
    $P5022 = $P5021()
    set $P5029, $P5022
    goto if1425_end3236
  if1425_else3235:
.annotate 'line', 998
    $P5026 = _lex_param_1."list"()
    set $P5023, $P5026
    iter $P5025, $P5026
  for_next3247:
    unless $P5025, for_done3249
    shift $P5028, $P5025
  for_redo3248:
    .const 'Sub' $P5027 = 'cuid_233_1361537946.1303' 
    capture_lex $P5027
    $P5023 = $P5027($P5028)
    goto for_next3247
  for_done3249:
    set $P5029, $P5023
  if1425_end3236:
  if1422_end3231:
    goto lexotic_3222
  lexotic_3221:
    .get_results (_lex_param_1)
  lexotic_3222:
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1361537946.1303") :anon :lex :outer("cuid_171_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 993
    .lex "@tmp", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
  while1426_test3237:
    find_lex $P5002, "$qast"
    $P5003 = $P5002."list"()
    set $N5001, $P5003
    box $P5009, $N5001
    set $P5008, $P5009
    unless $N5001 goto while1426_done3241 
  while1426_redo3239:
.annotate 'line', 995
    find_lex $P5004, "$qast"
    $P5005 = $P5004."list"()
    $P5006 = $P5005."shift"()
    $P5007 = $P101."push"($P5006)
    set $P5008, $P5007
    goto while1426_test3237 
  while1426_done3241:
  while1427_test3242:
    set $P5017, $P101
    unless $P101 goto while1427_done3246 
  while1427_redo3244:
.annotate 'line', 996
    find_lex $P5010, "$qast"
    $P5011 = $P5010."list"()
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    $P5014 = $P101."pop"()
    $P5015 = $P5012."flip_ast"($P5014)
    $P5016 = $P5011."push"($P5015)
    set $P5017, $P5016
    goto while1427_test3242 
  while1427_done3246:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1361537946.1303") :anon :lex :outer("cuid_171_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 999
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."flip_ast"(_lex_param_0)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_172_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1006
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .local pmc fb_tmp_344 
.annotate 'line', 1007
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3250
    nqp_get_sc_object $P5003, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    get_who $P5002, $P5003
    set fb_tmp_344, $P5002
    repr_defined $I5001, fb_tmp_344
    unless $I5001 goto if1428_else3251 
    set $P5004, fb_tmp_344["$W"]
    set $P5006, $P5004
    goto if1428_end3252
  if1428_else3251:
    null $P5005
    set $P5006, $P5005
  if1428_end3252:
    unless_null $P5006, vivi_14293253
    nqp_get_sc_object $P5007, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    set $P5006, $P5007
  vivi_14293253:
    unless_null $P5006, vivi_14303254
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5006, $P5008
  vivi_14303254:
    set $P5001, $P5006
  fallback3250:
    $P5009 = _lex_param_1."name"()
    $P5010 = $P5001."create_code"(_lex_param_1, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_173_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1011
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 1012
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_174_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1016
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 1017
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_175_1361537946.1303") :anon :lex :outer("cuid_196_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1021
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_234_1361537946.1303' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next3255:
    unless $P5004, for_done3257
    shift $P5006, $P5004
  for_redo3256:
    .const 'Sub' $P5005 = 'cuid_234_1361537946.1303' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next3255
  for_done3257:
.annotate 'line', 1026
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1361537946.1303") :anon :lex :outer("cuid_175_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1023
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1024
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1361537946.1303") :anon :lex :outer("cuid_177_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1031
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1361537946.1303") :load :init
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .const 'Sub' $P5001 = 'cuid_236_1361537946.1303' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_177_1361537946.1303" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPHLL")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src/stage2/gen/NQPP6QRegex.pm")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "7DD1B5B9E21CADC2FBACC98D0B31001EB126DE0C-1361537912.59024"
    push $P5004, "src/stage2/QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "D4E0CA5AAC5F9C8A71CA3B044B7ECC9913216510-1361537907.73863"
    push $P5004, "src/stage2/NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "BUILD"
    push $P5004, "FF45FE93F2CABD7DE984214B41A3DF6A1D65EBE6-1361537918.36225"
    push $P5004, "src/stage2/gen/NQPHLL.pm"
    push $P5004, "slot_for_object"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "create_code"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start_all"
    push $P5004, "!cursor_start_cur"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "identifier"
    push $P5004, "arg"
    push $P5004, "arglist"
    push $P5004, "TOP"
    push $P5004, "nibbler"
    push $P5004, "infixstopper"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "sigil"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "load_module"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "pir"
    push $P5004, "pbc"
    push $P5004, "init"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, ""
    push $P5004, "alt_nfa__1_1361537946.3331"
    push $P5004, "alt_nfa__2_1361537946.3487"
    push $P5004, "val"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "alt_nfa__3_1361537946.4111"
    push $P5004, "0"
    push $P5004, "alt_nfa__4_1361537946.5047"
    push $P5004, ">"
    push $P5004, "alt_nfa__5_1361537946.5359"
    push $P5004, "|"
    push $P5004, "&"
    push $P5004, "noun"
    push $P5004, "&|~"
    push $P5004, "alt_nfa__6_1361537946.6295"
    push $P5004, "alt_nfa__7_1361537946.6919"
    push $P5004, "septype"
    push $P5004, "alt_nfa__8_1361537946.7075"
    push $P5004, "sym"
    push $P5004, "1"
    push $P5004, "2"
    push $P5004, "min"
    push $P5004, "max"
    push $P5004, "alt_nfa__9_1361537946.8011"
    push $P5004, "alt_nfa__10_1361537946.8947"
    push $P5004, "alt_nfa__11_1361537946.9259"
    push $P5004, "GOAL"
    push $P5004, "key"
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "$@%&"
    push $P5004, "name"
    push $P5004, "alt_nfa__12_1361537947.0351"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "alt_nfa__13_1361537947.1131"
    push $P5004, "xX"
    push $P5004, "alt_nfa__14_1361537947.1287"
    push $P5004, "cC"
    push $P5004, "alt_nfa__15_1361537947.2535"
    push $P5004, "alt_nfa__16_1361537947.2691"
    push $P5004, "longname"
    push $P5004, "alt_nfa__17_1361537947.3003"
    push $P5004, "alt_nfa__18_1361537947.3159"
    push $P5004, "sign"
    push $P5004, "invert"
    push $P5004, "uniprop"
    push $P5004, "alt_nfa__19_1361537947.3939"
    push $P5004, "alt_nfa__20_1361537947.3939"
    push $P5004, "alt_nfa__21_1361537947.3939"
    push $P5004, "n"
    push $P5004, "alt_nfa__23_1361537947.4563"
    push $P5004, "alt_nfa__24_1361537947.4563"
    push $P5004, "alt_nfa__22_1361537947.3939"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "0CFA2EB01BFB7173CB04D945815D8B274BC236CB-1361537902.85582"
    push $P5004, "src/stage2/gen/nqp-mo.pm"
    push $P5004, "QRegex::P6Regex::World"
    push $P5004, "QRegex::P6Regex::Grammar"
    push $P5004, "alt_nfa__1_1361537918.50265"
    push $P5004, "alt_nfa__2_1361537918.54945"
    push $P5004, "alt_nfa__3_1361537918.65865"
    push $P5004, "alt_nfa__4_1361537918.65865"
    push $P5004, "alt_nfa__5_1361537918.68985"
    push $P5004, "alt_nfa__6_1361537918.78345"
    push $P5004, "alt_nfa__7_1361537918.79905"
    push $P5004, "alt_nfa__8_1361537918.87705"
    push $P5004, "alt_nfa__9_1361537918.92385"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "QRegex::P6Regex::Actions"
    push $P5004, "QRegex::P6Regex::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "790414E005FB5592A735E24F73F0C2BBC92B5F1E-1361537910.23463"
    push $P5004, "src/stage2/QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "981BD5FC0B0D36B182D3DEC7128221DD4645D2E4-1361537925.07026"
    push $P5004, "src/stage2/QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "01"
    push $P5004, "Ee"
    .const 'Sub' $P5005 = 'cuid_236_1361537946.1303' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1444_end3282 
    die "Repossession conflicts occurred during deserialization"
  if1444_end3282:
    .const "LexInfo" $P5001 = "cuid_177_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1361537946.1303"
    nqp_get_sc_object $P5002, "7DD1B5B9E21CADC2FBACC98D0B31001EB126DE0C-1361537912.59024", 32
    $P5001."set_static_lexpad_value"("ParseShared", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_177_1361537946.1303"
    nqp_get_sc_object $P5002, "7DD1B5B9E21CADC2FBACC98D0B31001EB126DE0C-1361537912.59024", 33
    $P5001."set_static_lexpad_value"("NQPCursorRole", $P5002)
    .const "LexInfo" $P5003 = "cuid_177_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 4
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_179_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_179_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 116
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_180_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 5
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_180_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 5
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_180_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_113_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1361537946.1303" 
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 180
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_196_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 117
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_196_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_196_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 117
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_196_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_235_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 181
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_235_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_235_1361537946.1303"
    nqp_get_sc_object $P5002, "7433AC1B6CF7AE716AD54E1921987807F4E7F67F-1361537946.1771", 181
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_235_1361537946.1303"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1361537946.1303") :anon :lex :outer("cuid_237_1361537946.1303")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1361537946.1303" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1361537946.1303" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1361537946.1303") :load
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .const 'Sub' $P5001 = "cuid_177_1361537946.1303" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1361537946.1303") :main
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_177_1361537946.1303" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end