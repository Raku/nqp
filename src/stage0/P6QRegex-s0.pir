.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1356803021.47401") :anon :lex
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5039 = 'cuid_180_1356803021.47401' 
    capture_lex $P5039 
    .const 'Sub' $P5039 = 'cuid_3_1356803021.47401' 
    capture_lex $P5039 
    .const 'Sub' $P5039 = 'cuid_114_1356803021.47401' 
    capture_lex $P5039 
    .const 'Sub' $P5039 = 'cuid_178_1356803021.47401' 
    capture_lex $P5039 
    .const 'Sub' $P5039 = 'cuid_179_1356803021.47401' 
    capture_lex $P5039 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "NQPCursorRole", $P104 
    .lex "$p6regex", $P105 
    .lex "&MAIN", $P106 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P105, $P5001
    .const 'Sub' $P5002 = 'cuid_180_1356803021.47401' 
    capture_lex $P5002
    set $P106, $P5002
    find_dynamic_lex $P5003, "$*CTXSAVE"
    set ctxsave, $P5003
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if11_end13 
    $P5004 = ctxsave."ctxsave"()
    set $P5005, $P5004
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5007 = 'cuid_3_1356803021.47401' 
    capture_lex $P5007
    $P5008 = $P5007()
    .const 'Sub' $P5009 = 'cuid_114_1356803021.47401' 
    capture_lex $P5009
    $P5010 = $P5009()
    .const 'Sub' $P5011 = 'cuid_178_1356803021.47401' 
    capture_lex $P5011
    $P5012 = $P5011()
    .const 'Sub' $P5013 = 'cuid_179_1356803021.47401' 
    capture_lex $P5013
    $P5014 = $P5013()
.annotate 'line', 1026
    nqp_get_sc_object $P5019, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5018, $P5019, "QRegex"
    nqp_get_package_through_who $P5017, $P5018, "P6Regex"
    get_who $P5016, $P5017
    set $P5015, $P5016["Compiler"]
    unless_null $P5015, fallback2324
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5020
  fallback2324:
    $P5021 = $P5015."new"()
    set $P105, $P5021
.annotate 'line', 1027
    $P105."language"("QRegex::P6Regex")
.annotate 'line', 1028
    nqp_get_sc_object $P5026, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5025, $P5026, "QRegex"
    nqp_get_package_through_who $P5024, $P5025, "P6Regex"
    get_who $P5023, $P5024
    set $P5022, $P5023["Grammar"]
    unless_null $P5022, fallback2325
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5027
  fallback2325:
    $P105."parsegrammar"($P5022)
.annotate 'line', 1029
    nqp_get_sc_object $P5032, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5031, $P5032, "QRegex"
    nqp_get_package_through_who $P5030, $P5031, "P6Regex"
    get_who $P5029, $P5030
    set $P5028, $P5029["Actions"]
    unless_null $P5028, fallback2326
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5033
  fallback2326:
    $P105."parseactions"($P5028)
    unless _lex_param_0 goto if623_end2328 
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5034, "ModuleLoader"
    getinterp $P5036
    set $P5035, $P5036["context"]
    $P5034."set_mainline_module"($P5035)
    .const 'Sub' $P5037 = "cuid_180_1356803021.47401" 
    $P5038 = $P5037(_lex_param_0 :flat)
  if623_end2328:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_180_1356803021.47401") :anon :lex :outer("cuid_1_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1031
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 1032
    find_lex $P5001, "$p6regex"
    $P5002 = $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ucs4" :named("transcode"))
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_3_1356803021.47401") :anon :lex :outer("cuid_1_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 9
    .const 'Sub' $P5002 = 'cuid_2_1356803021.47401' 
    capture_lex $P5002 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_2_1356803021.47401' 
    capture_lex $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_2_1356803021.47401") :anon :lex :outer("cuid_3_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 10
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5070 = 'cuid_181_1356803021.47401' 
    capture_lex $P5070 
    .lex "$dummy", $P101 
    .lex "$code_obj", $P102 
    .lex "$slot", $P103 
    .lex "$fixups", $P104 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    .const 'Sub' $P5007 = 'cuid_181_1356803021.47401' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    nqp_fresh_stub $P5005, $P5006
    set $P101, $P5005
    set $S5001, _lex_param_2
    assign $P101, $S5001
    setprop $P101, "STATIC_CODE_REF", $P101
.annotate 'line', 17
    nqp_decontainerize $P5008, _lex_param_0
    $P5008."add_root_code_ref"($P101, _lex_param_1)
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 7
    repr_instance_of $P5009, $P5010
    set $P102, $P5009
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 7
    setattribute $P102, $P5011, "$!do", $P101
.annotate 'line', 22
    nqp_decontainerize $P5012, _lex_param_0
    $P5013 = $P5012."add_object"($P102)
    set $P103, $P5013
.annotate 'line', 25
    nqp_get_sc_object $P5017, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Stmt"]
    unless_null $P5014, fallback14
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5018
  fallback14:
    $P5019 = $P5014."new"()
    set $P104, $P5019
.annotate 'line', 26
    nqp_get_sc_object $P5023, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback15
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback15:
.annotate 'line', 28
    nqp_get_sc_object $P5028, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback16
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback16:
    $P5030 = $P5025."new"($P102 :named("value"))
.annotate 'line', 29
    nqp_get_sc_object $P5034, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["WVal"]
    unless_null $P5031, fallback17
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5031, $P5035
  fallback17:
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 7
    $P5037 = $P5031."new"($P5036 :named("value"))
.annotate 'line', 30
    nqp_get_sc_object $P5041, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["SVal"]
    unless_null $P5038, fallback18
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5042
  fallback18:
    $P5043 = $P5038."new"("$!do" :named("value"))
.annotate 'line', 31
    nqp_get_sc_object $P5047, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["BVal"]
    unless_null $P5044, fallback19
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5048
  fallback19:
    $P5049 = $P5044."new"(_lex_param_1 :named("value"))
    $P5050 = $P5020."new"($P5030, $P5037, $P5043, $P5049, "bindattr" :named("op"))
    $P104."push"($P5050)
.annotate 'line', 33
    nqp_get_sc_object $P5054, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Op"]
    unless_null $P5051, fallback20
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5051, $P5055
  fallback20:
.annotate 'line', 35
    nqp_get_sc_object $P5059, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5058, $P5059, "QAST"
    get_who $P5057, $P5058
    set $P5056, $P5057["BVal"]
    unless_null $P5056, fallback21
    nqp_get_sc_object $P5060, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5056, $P5060
  fallback21:
    $P5061 = $P5056."new"(_lex_param_1 :named("value"))
.annotate 'line', 36
    nqp_get_sc_object $P5065, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["WVal"]
    unless_null $P5062, fallback22
    nqp_get_sc_object $P5066, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5062, $P5066
  fallback22:
    $P5067 = $P5062."new"($P102 :named("value"))
    $P5068 = $P5051."new"($P5061, $P5067, "setcodeobj" :named("op"))
    $P104."push"($P5068)
.annotate 'line', 38
    nqp_decontainerize $P5069, _lex_param_0
    $P5069."add_fixup_task"($P104 :named("fixup_past"))
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_181_1356803021.47401") :anon :lex :outer("cuid_2_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 12

    box $P5001, "Uncompiled code executed"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_114_1356803021.47401") :anon :lex :outer("cuid_1_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 44
    .const 'Sub' $P5085 = 'cuid_4_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_5_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_6_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_7_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_8_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_10_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_11_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_12_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_13_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_14_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_16_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_20_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_21_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_22_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_23_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_24_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_25_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_28_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_30_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_31_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_33_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_34_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_35_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_36_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_37_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_41_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_42_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_44_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_45_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_46_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_47_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_48_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_49_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_50_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_51_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_52_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_53_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_54_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_55_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_56_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_57_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_58_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_59_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_60_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_61_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_62_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_63_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_64_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_65_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_66_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_67_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_68_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_69_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_70_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_71_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_72_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_73_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_74_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_75_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_76_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_77_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_78_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_79_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_80_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_81_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_82_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_83_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_84_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_86_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_87_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_88_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_90_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_92_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_93_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_94_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_96_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_98_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_105_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_107_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_108_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_109_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_110_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_111_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_112_1356803021.47401' 
    capture_lex $P5085 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_4_1356803021.47401' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_5_1356803021.47401' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_6_1356803021.47401' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_7_1356803021.47401' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_8_1356803021.47401' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_10_1356803021.47401' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_11_1356803021.47401' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_12_1356803021.47401' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_13_1356803021.47401' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_14_1356803021.47401' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_16_1356803021.47401' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_20_1356803021.47401' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_21_1356803021.47401' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_22_1356803021.47401' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_23_1356803021.47401' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_24_1356803021.47401' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_25_1356803021.47401' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_28_1356803021.47401' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_30_1356803021.47401' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_31_1356803021.47401' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_33_1356803021.47401' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_34_1356803021.47401' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_35_1356803021.47401' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_36_1356803021.47401' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_37_1356803021.47401' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_41_1356803021.47401' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_42_1356803021.47401' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_44_1356803021.47401' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_45_1356803021.47401' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_46_1356803021.47401' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_47_1356803021.47401' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_48_1356803021.47401' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_49_1356803021.47401' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_50_1356803021.47401' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_51_1356803021.47401' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_52_1356803021.47401' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_53_1356803021.47401' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_54_1356803021.47401' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_55_1356803021.47401' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_56_1356803021.47401' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_57_1356803021.47401' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_58_1356803021.47401' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_59_1356803021.47401' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_60_1356803021.47401' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_61_1356803021.47401' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_62_1356803021.47401' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_63_1356803021.47401' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_64_1356803021.47401' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_65_1356803021.47401' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_66_1356803021.47401' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_67_1356803021.47401' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_68_1356803021.47401' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_69_1356803021.47401' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_70_1356803021.47401' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_71_1356803021.47401' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_72_1356803021.47401' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_73_1356803021.47401' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_74_1356803021.47401' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_75_1356803021.47401' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_76_1356803021.47401' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_77_1356803021.47401' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_78_1356803021.47401' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_79_1356803021.47401' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_80_1356803021.47401' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_81_1356803021.47401' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_82_1356803021.47401' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_83_1356803021.47401' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_84_1356803021.47401' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_86_1356803021.47401' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_87_1356803021.47401' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_88_1356803021.47401' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_90_1356803021.47401' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_92_1356803021.47401' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_93_1356803021.47401' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_94_1356803021.47401' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_96_1356803021.47401' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_98_1356803021.47401' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_105_1356803021.47401' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_107_1356803021.47401' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_108_1356803021.47401' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_109_1356803021.47401' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_110_1356803021.47401' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_111_1356803021.47401' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_112_1356803021.47401' 
    capture_lex $P5084
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "obs" :subid("cuid_4_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :optional 
    .param int haz_param_1 :opt_flag 
    if haz_param_1, default23
    box $P5003, " in Perl 6"
    set _lex_param_3, $P5003
  default23:
    .lex "self", _lex_param_0 
    .lex "$old", _lex_param_1 
    .lex "$new", _lex_param_2 
    .lex "$when", _lex_param_3 
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    set $S5006, _lex_param_1
    concat $S5005, "Unsupported use of ", $S5006
    concat $S5004, $S5005, ";"
    set $S5007, _lex_param_3
    concat $S5003, $S5004, $S5007
    concat $S5002, $S5003, " please use "
    set $S5008, _lex_param_2
    concat $S5001, $S5002, $S5008
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_unrecognized_metachar" :subid("cuid_5_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 54
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$char", _lex_param_1 
.annotate 'line', 55
    nqp_decontainerize $P5001, _lex_param_0
    set $S5003, _lex_param_1
    concat $S5002, "Unrecognized regex metacharacter ", $S5003
    concat $S5001, $S5002, " (must be quoted to match literally)"
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_null_pattern" :subid("cuid_6_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 58
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 59
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."panic"("Null regex not allowed")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_7_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx12_tgt
    .local int rx12_pos
    .local int rx12_off
    .local int rx12_eos
    .local int rx12_rep
    .local pmc rx12_cur
    .local pmc rx12_curclass
    .local pmc rx12_bstack
    .local pmc rx12_cstack
    (rx12_cur, rx12_tgt, rx12_pos, rx12_curclass, rx12_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx12_cur
    length rx12_eos, rx12_tgt
    eq $I19, 1, rx12_restart26
    gt rx12_pos, rx12_eos, rx12_fail27
    repr_get_attr_int $I11, self, rx12_curclass, "$!from"
    ne $I11, -1, rxscan13_done33
    goto rxscan13_scan32
  rxscan13_loop31:
    inc rx12_pos
    gt rx12_pos, rx12_eos, rx12_fail27
    repr_bind_attr_int rx12_cur, rx12_curclass, "$!from", rx12_pos
  rxscan13_scan32:
    nqp_rxmark rx12_bstack, rxscan13_loop31, rx12_pos, 0
  rxscan13_done33:
    nqp_rxmark rx12_bstack, rxquantr14_done35, rx12_pos, 0
  rxquantr14_loop34:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt15_037
    nqp_push_label $P11, alt15_140
    nqp_rxmark rx12_bstack, alt15_end36, -1, 0
    rx12_cur."!alt"(rx12_pos, "alt_nfa__1_1356803021.73087", $P11)
    goto rx12_fail27
  alt15_037:
    nqp_rxmark rx12_bstack, rxquantr16_done39, -1, 0
  rxquantr16_loop38:
    ge rx12_pos, rx12_eos, rx12_fail27
    is_cclass $I11, .CCLASS_WHITESPACE, rx12_tgt, rx12_pos
    unless $I11, rx12_fail27
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr16_done39
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr16_done39
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr16_done39, rx12_pos, rx12_rep
    goto rxquantr16_loop38
  rxquantr16_done39:
    goto alt15_end36
  alt15_140:
    add $I11, rx12_pos, 1
    gt $I11, rx12_eos, rx12_fail27
    substr $S10, rx12_tgt, rx12_pos, 1
    ne $S10, ucs4:"#", rx12_fail27
    add rx12_pos, 1
    nqp_rxmark rx12_bstack, rxquantr17_done42, rx12_pos, 0
  rxquantr17_loop41:
    ge rx12_pos, rx12_eos, rx12_fail27
    is_cclass $I11, .CCLASS_NEWLINE, rx12_tgt, rx12_pos
    if $I11, rx12_fail27
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr17_done42
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr17_done42
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr17_done42, rx12_pos, rx12_rep
    goto rxquantr17_loop41
  rxquantr17_done42:
    goto alt15_end36
  alt15_end36:
    nqp_rxpeek $I19, rx12_bstack, rxquantr14_done35
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr14_done35
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr14_done35, rx12_pos, rx12_rep
    goto rxquantr14_loop34
  rxquantr14_done35:
    rx12_cur."!cursor_pass"(rx12_pos, "ws", 'backtrack'=>1)
    .return (rx12_cur)
  rx12_restart26:
    repr_get_attr_obj rx12_cstack, rx12_cur, rx12_curclass, "$!cstack"
  rx12_fail27:
    unless rx12_bstack, rx12_done25
    pop $I19, rx12_bstack
    if_null rx12_cstack, rx12_cstack_done30
    unless rx12_cstack, rx12_cstack_done30
    dec $I19
    set $P11, rx12_cstack[$I19]
  rx12_cstack_done30:
    pop rx12_rep, rx12_bstack
    pop rx12_pos, rx12_bstack
    pop $I19, rx12_bstack
    lt rx12_pos, -1, rx12_done25
    lt rx12_pos, 0, rx12_fail27
    eq $I19, 0, rx12_fail27
    nqp_islist $I20, rx12_cstack
    unless $I20, rx12_jump28
    elements $I18, rx12_bstack
    le $I18, 0, rx12_cut29
    dec $I18
    set $I18, rx12_bstack[$I18]
  rx12_cut29:
    assign rx12_cstack, $I18
  rx12_jump28:
    jump $I19
  rx12_done25:
    rx12_cur."!cursor_fail"()
    .return (rx12_cur) 
.end
.HLL "nqp"
.namespace []
.sub "normspace" :subid("cuid_8_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 64
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_9_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx18_tgt
    .local int rx18_pos
    .local int rx18_off
    .local int rx18_eos
    .local int rx18_rep
    .local pmc rx18_cur
    .local pmc rx18_curclass
    .local pmc rx18_bstack
    .local pmc rx18_cstack
    (rx18_cur, rx18_tgt, rx18_pos, rx18_curclass, rx18_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx18_cur
    length rx18_eos, rx18_tgt
    eq $I19, 1, rx18_restart45
    gt rx18_pos, rx18_eos, rx18_fail46
    repr_get_attr_int $I11, self, rx18_curclass, "$!from"
    ne $I11, -1, rxscan19_done52
    goto rxscan19_scan51
  rxscan19_loop50:
    inc rx18_pos
    gt rx18_pos, rx18_eos, rx18_fail46
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!from", rx18_pos
  rxscan19_scan51:
    nqp_rxmark rx18_bstack, rxscan19_loop50, rx18_pos, 0
  rxscan19_done52:
    .const 'Sub' $P5001 = 'cuid_9_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail46
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."ws"()
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail46
    repr_get_attr_int rx18_pos, $P11, rx18_curclass, "$!pos"
    rx18_cur."!cursor_pass"(rx18_pos, "normspace", 'backtrack'=>1)
    .return (rx18_cur)
  rx18_restart45:
    repr_get_attr_obj rx18_cstack, rx18_cur, rx18_curclass, "$!cstack"
  rx18_fail46:
    unless rx18_bstack, rx18_done44
    pop $I19, rx18_bstack
    if_null rx18_cstack, rx18_cstack_done49
    unless rx18_cstack, rx18_cstack_done49
    dec $I19
    set $P11, rx18_cstack[$I19]
  rx18_cstack_done49:
    pop rx18_rep, rx18_bstack
    pop rx18_pos, rx18_bstack
    pop $I19, rx18_bstack
    lt rx18_pos, -1, rx18_done44
    lt rx18_pos, 0, rx18_fail46
    eq $I19, 0, rx18_fail46
    nqp_islist $I20, rx18_cstack
    unless $I20, rx18_jump47
    elements $I18, rx18_bstack
    le $I18, 0, rx18_cut48
    dec $I18
    set $I18, rx18_bstack[$I18]
  rx18_cut48:
    assign rx18_cstack, $I18
  rx18_jump47:
    jump $I19
  rx18_done44:
    rx18_cur."!cursor_fail"()
    .return (rx18_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_9_1356803021.47401") :anon :lex :outer("cuid_8_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx20_tgt
    .local int rx20_pos
    .local int rx20_off
    .local int rx20_eos
    .local int rx20_rep
    .local pmc rx20_cur
    .local pmc rx20_curclass
    .local pmc rx20_bstack
    .local pmc rx20_cstack
    (rx20_cur, rx20_tgt, rx20_pos, rx20_curclass, rx20_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx20_cur
    length rx20_eos, rx20_tgt
    eq $I19, 1, rx20_restart55
    gt rx20_pos, rx20_eos, rx20_fail56
    repr_get_attr_int $I11, self, rx20_curclass, "$!from"
    ne $I11, -1, rxscan21_done62
    goto rxscan21_scan61
  rxscan21_loop60:
    inc rx20_pos
    gt rx20_pos, rx20_eos, rx20_fail56
    repr_bind_attr_int rx20_cur, rx20_curclass, "$!from", rx20_pos
  rxscan21_scan61:
    nqp_rxmark rx20_bstack, rxscan21_loop60, rx20_pos, 0
  rxscan21_done62:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt22_064
    nqp_push_label $P11, alt22_165
    nqp_rxmark rx20_bstack, alt22_end63, -1, 0
    rx20_cur."!alt"(rx20_pos, "alt_nfa__2_1356803021.73767", $P11)
    goto rx20_fail56
  alt22_064:
    ge rx20_pos, rx20_eos, rx20_fail56
    is_cclass $I11, .CCLASS_WHITESPACE, rx20_tgt, rx20_pos
    unless $I11, rx20_fail56
    add rx20_pos, 1
    goto alt22_end63
  alt22_165:
    add $I11, rx20_pos, 1
    gt $I11, rx20_eos, rx20_fail56
    substr $S10, rx20_tgt, rx20_pos, 1
    ne $S10, ucs4:"#", rx20_fail56
    add rx20_pos, 1
    goto alt22_end63
  alt22_end63:
    rx20_cur."!cursor_pass"(rx20_pos, 'backtrack'=>1)
    .return (rx20_cur)
  rx20_restart55:
    repr_get_attr_obj rx20_cstack, rx20_cur, rx20_curclass, "$!cstack"
  rx20_fail56:
    unless rx20_bstack, rx20_done54
    pop $I19, rx20_bstack
    if_null rx20_cstack, rx20_cstack_done59
    unless rx20_cstack, rx20_cstack_done59
    dec $I19
    set $P11, rx20_cstack[$I19]
  rx20_cstack_done59:
    pop rx20_rep, rx20_bstack
    pop rx20_pos, rx20_bstack
    pop $I19, rx20_bstack
    lt rx20_pos, -1, rx20_done54
    lt rx20_pos, 0, rx20_fail56
    eq $I19, 0, rx20_fail56
    nqp_islist $I20, rx20_cstack
    unless $I20, rx20_jump57
    elements $I18, rx20_bstack
    le $I18, 0, rx20_cut58
    dec $I18
    set $I18, rx20_bstack[$I18]
  rx20_cut58:
    assign rx20_cstack, $I18
  rx20_jump57:
    jump $I19
  rx20_done54:
    rx20_cur."!cursor_fail"()
    .return (rx20_cur) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_10_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx24_tgt
    .local int rx24_pos
    .local int rx24_off
    .local int rx24_eos
    .local int rx24_rep
    .local pmc rx24_cur
    .local pmc rx24_curclass
    .local pmc rx24_bstack
    .local pmc rx24_cstack
    (rx24_cur, rx24_tgt, rx24_pos, rx24_curclass, rx24_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx24_cur
    length rx24_eos, rx24_tgt
    eq $I19, 1, rx24_restart69
    gt rx24_pos, rx24_eos, rx24_fail70
    repr_get_attr_int $I11, self, rx24_curclass, "$!from"
    ne $I11, -1, rxscan25_done76
    goto rxscan25_scan75
  rxscan25_loop74:
    inc rx24_pos
    gt rx24_pos, rx24_eos, rx24_fail70
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!from", rx24_pos
  rxscan25_scan75:
    nqp_rxmark rx24_bstack, rxscan25_loop74, rx24_pos, 0
  rxscan25_done76:
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!pos", rx24_pos
    $P11 = rx24_cur."ident"()
    repr_get_attr_int $I11, $P11, rx24_curclass, "$!pos"
    lt $I11, 0, rx24_fail70
    repr_get_attr_int rx24_pos, $P11, rx24_curclass, "$!pos"
    nqp_rxmark rx24_bstack, rxquantr27_done79, rx24_pos, 0
  rxquantr27_loop78:
  alt28_081:
    nqp_rxmark rx24_bstack, alt28_182, rx24_pos, 0
    add $I11, rx24_pos, 1
    gt $I11, rx24_eos, rx24_fail70
    substr $S10, rx24_tgt, rx24_pos, 1
    ne $S10, ucs4:"-", rx24_fail70
    add rx24_pos, 1
    goto alt28_end80
  alt28_182:
    ge rx24_pos, rx24_eos, rx24_fail70
    substr $S11, rx24_tgt, rx24_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx24_fail70
    inc rx24_pos
  alt28_end80:
    repr_bind_attr_int rx24_cur, rx24_curclass, "$!pos", rx24_pos
    $P11 = rx24_cur."ident"()
    repr_get_attr_int $I11, $P11, rx24_curclass, "$!pos"
    lt $I11, 0, rx24_fail70
    repr_get_attr_int rx24_pos, $P11, rx24_curclass, "$!pos"
    nqp_rxpeek $I19, rx24_bstack, rxquantr27_done79
    inc $I19
    inc $I19
    set rx24_rep, rx24_bstack[$I19]
    nqp_rxcommit rx24_bstack, rxquantr27_done79
    inc rx24_rep
    nqp_rxmark rx24_bstack, rxquantr27_done79, rx24_pos, rx24_rep
    goto rxquantr27_loop78
  rxquantr27_done79:
    rx24_cur."!cursor_pass"(rx24_pos, "identifier", 'backtrack'=>1)
    .return (rx24_cur)
  rx24_restart69:
    repr_get_attr_obj rx24_cstack, rx24_cur, rx24_curclass, "$!cstack"
  rx24_fail70:
    unless rx24_bstack, rx24_done68
    pop $I19, rx24_bstack
    if_null rx24_cstack, rx24_cstack_done73
    unless rx24_cstack, rx24_cstack_done73
    dec $I19
    set $P11, rx24_cstack[$I19]
  rx24_cstack_done73:
    pop rx24_rep, rx24_bstack
    pop rx24_pos, rx24_bstack
    pop $I19, rx24_bstack
    lt rx24_pos, -1, rx24_done68
    lt rx24_pos, 0, rx24_fail70
    eq $I19, 0, rx24_fail70
    nqp_islist $I20, rx24_cstack
    unless $I20, rx24_jump71
    elements $I18, rx24_bstack
    le $I18, 0, rx24_cut72
    dec $I18
    set $I18, rx24_bstack[$I18]
  rx24_cut72:
    assign rx24_cstack, $I18
  rx24_jump71:
    jump $I19
  rx24_done68:
    rx24_cur."!cursor_fail"()
    .return (rx24_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_11_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 68
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx30_tgt
    .local int rx30_pos
    .local int rx30_off
    .local int rx30_eos
    .local int rx30_rep
    .local pmc rx30_cur
    .local pmc rx30_curclass
    .local pmc rx30_bstack
    .local pmc rx30_cstack
    (rx30_cur, rx30_tgt, rx30_pos, rx30_curclass, rx30_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx30_cur
    length rx30_eos, rx30_tgt
    eq $I19, 1, rx30_restart86
    gt rx30_pos, rx30_eos, rx30_fail87
    repr_get_attr_int $I11, self, rx30_curclass, "$!from"
    ne $I11, -1, rxscan31_done93
    goto rxscan31_scan92
  rxscan31_loop91:
    inc rx30_pos
    gt rx30_pos, rx30_eos, rx30_fail87
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!from", rx30_pos
  rxscan31_scan92:
    nqp_rxmark rx30_bstack, rxscan31_loop91, rx30_pos, 0
  rxscan31_done93:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt32_095
    nqp_push_label $P11, alt32_197
    nqp_push_label $P11, alt32_299
    nqp_rxmark rx30_bstack, alt32_end94, -1, 0
    rx30_cur."!alt"(rx30_pos, "alt_nfa__3_1356803021.76411", $P11)
    goto rx30_fail87
  alt32_095:
    ge rx30_pos, rx30_eos, rx30_fail87
    substr $S11, rx30_tgt, rx30_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx30_fail87
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx30_curclass, "$!pos"
    lt $I11, 0, rx30_fail87
    nqp_rxmark rx30_bstack, rxsubrule33_pass96, -1, 0
  rxsubrule33_pass96:
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx30_pos, $P11, rx30_curclass, "$!pos"
    goto alt32_end94
  alt32_197:
    ge rx30_pos, rx30_eos, rx30_fail87
    substr $S11, rx30_tgt, rx30_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx30_fail87
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx30_curclass, "$!pos"
    lt $I11, 0, rx30_fail87
    nqp_rxmark rx30_bstack, rxsubrule34_pass98, -1, 0
  rxsubrule34_pass98:
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx30_pos, $P11, rx30_curclass, "$!pos"
    goto alt32_end94
  alt32_299:
    nqp_rxmark rx30_bstack, rxcap35_fail101, rx30_pos, 0
    nqp_rxmark rx30_bstack, rxquantr36_done103, -1, 0
  rxquantr36_loop102:
    ge rx30_pos, rx30_eos, rx30_fail87
    is_cclass $I11, .CCLASS_NUMERIC, rx30_tgt, rx30_pos
    unless $I11, rx30_fail87
    add rx30_pos, 1
    nqp_rxpeek $I19, rx30_bstack, rxquantr36_done103
    inc $I19
    inc $I19
    set rx30_rep, rx30_bstack[$I19]
    nqp_rxcommit rx30_bstack, rxquantr36_done103
    inc rx30_rep
    nqp_rxmark rx30_bstack, rxquantr36_done103, rx30_pos, rx30_rep
    goto rxquantr36_loop102
  rxquantr36_done103:
    nqp_rxpeek $I19, rx30_bstack, rxcap35_fail101
    inc $I19
    set $I11, rx30_bstack[$I19]
    repr_bind_attr_int rx30_cur, rx30_curclass, "$!pos", rx30_pos
    $P11 = rx30_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx30_pos)
    rx30_cstack = rx30_cur."!cursor_capture"($P11, "val")
    goto rxcap35_done100
  rxcap35_fail101:
    goto rx30_fail87
  rxcap35_done100:
    goto alt32_end94
  alt32_end94:
    nqp_rxcommit rx30_bstack, alt32_end94
    rx30_cur."!cursor_pass"(rx30_pos, "arg", 'backtrack'=>1)
    .return (rx30_cur)
  rx30_restart86:
    repr_get_attr_obj rx30_cstack, rx30_cur, rx30_curclass, "$!cstack"
  rx30_fail87:
    unless rx30_bstack, rx30_done85
    pop $I19, rx30_bstack
    if_null rx30_cstack, rx30_cstack_done90
    unless rx30_cstack, rx30_cstack_done90
    dec $I19
    set $P11, rx30_cstack[$I19]
  rx30_cstack_done90:
    pop rx30_rep, rx30_bstack
    pop rx30_pos, rx30_bstack
    pop $I19, rx30_bstack
    lt rx30_pos, -1, rx30_done85
    lt rx30_pos, 0, rx30_fail87
    eq $I19, 0, rx30_fail87
    nqp_islist $I20, rx30_cstack
    unless $I20, rx30_jump88
    elements $I18, rx30_bstack
    le $I18, 0, rx30_cut89
    dec $I18
    set $I18, rx30_bstack[$I18]
  rx30_cut89:
    assign rx30_cstack, $I18
  rx30_jump88:
    jump $I19
  rx30_done85:
    rx30_cur."!cursor_fail"()
    .return (rx30_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_12_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 76
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx37_tgt
    .local int rx37_pos
    .local int rx37_off
    .local int rx37_eos
    .local int rx37_rep
    .local pmc rx37_cur
    .local pmc rx37_curclass
    .local pmc rx37_bstack
    .local pmc rx37_cstack
    (rx37_cur, rx37_tgt, rx37_pos, rx37_curclass, rx37_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx37_cur
    length rx37_eos, rx37_tgt
    eq $I19, 1, rx37_restart106
    gt rx37_pos, rx37_eos, rx37_fail107
    repr_get_attr_int $I11, self, rx37_curclass, "$!from"
    ne $I11, -1, rxscan38_done113
    goto rxscan38_scan112
  rxscan38_loop111:
    inc rx37_pos
    gt rx37_pos, rx37_eos, rx37_fail107
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!from", rx37_pos
  rxscan38_scan112:
    nqp_rxmark rx37_bstack, rxscan38_loop111, rx37_pos, 0
  rxscan38_done113:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."arg"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    nqp_rxmark rx37_bstack, rxsubrule40_pass115, -1, 0
  rxsubrule40_pass115:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    nqp_rxmark rx37_bstack, rxquantr42_done118, rx37_pos, 0
  rxquantr42_loop117:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    add $I11, rx37_pos, 1
    gt $I11, rx37_eos, rx37_fail107
    substr $S10, rx37_tgt, rx37_pos, 1
    ne $S10, ucs4:",", rx37_fail107
    add rx37_pos, 1
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."arg"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    nqp_rxmark rx37_bstack, rxsubrule45_pass121, -1, 0
  rxsubrule45_pass121:
    rx37_cstack = rx37_cur."!cursor_capture"($P11, "arg")
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    nqp_rxpeek $I19, rx37_bstack, rxquantr42_done118
    inc $I19
    inc $I19
    set rx37_rep, rx37_bstack[$I19]
    nqp_rxcommit rx37_bstack, rxquantr42_done118
    inc rx37_rep
    nqp_rxmark rx37_bstack, rxquantr42_done118, rx37_pos, rx37_rep
    goto rxquantr42_loop117
  rxquantr42_done118:
    repr_bind_attr_int rx37_cur, rx37_curclass, "$!pos", rx37_pos
    $P11 = rx37_cur."ws"()
    repr_get_attr_int $I11, $P11, rx37_curclass, "$!pos"
    lt $I11, 0, rx37_fail107
    repr_get_attr_int rx37_pos, $P11, rx37_curclass, "$!pos"
    rx37_cur."!cursor_pass"(rx37_pos, "arglist", 'backtrack'=>1)
    .return (rx37_cur)
  rx37_restart106:
    repr_get_attr_obj rx37_cstack, rx37_cur, rx37_curclass, "$!cstack"
  rx37_fail107:
    unless rx37_bstack, rx37_done105
    pop $I19, rx37_bstack
    if_null rx37_cstack, rx37_cstack_done110
    unless rx37_cstack, rx37_cstack_done110
    dec $I19
    set $P11, rx37_cstack[$I19]
  rx37_cstack_done110:
    pop rx37_rep, rx37_bstack
    pop rx37_pos, rx37_bstack
    pop $I19, rx37_bstack
    lt rx37_pos, -1, rx37_done105
    lt rx37_pos, 0, rx37_fail107
    eq $I19, 0, rx37_fail107
    nqp_islist $I20, rx37_cstack
    unless $I20, rx37_jump108
    elements $I18, rx37_bstack
    le $I18, 0, rx37_cut109
    dec $I18
    set $I18, rx37_bstack[$I18]
  rx37_cut109:
    assign rx37_cstack, $I18
  rx37_jump108:
    jump $I19
  rx37_done105:
    rx37_cur."!cursor_fail"()
    .return (rx37_cur) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_13_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 78
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex "$*W", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx47_tgt
    .local int rx47_pos
    .local int rx47_off
    .local int rx47_eos
    .local int rx47_rep
    .local pmc rx47_cur
    .local pmc rx47_curclass
    .local pmc rx47_bstack
    .local pmc rx47_cstack
    (rx47_cur, rx47_tgt, rx47_pos, rx47_curclass, rx47_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx47_cur
    length rx47_eos, rx47_tgt
    eq $I19, 1, rx47_restart125
    gt rx47_pos, rx47_eos, rx47_fail126
    repr_get_attr_int $I11, self, rx47_curclass, "$!from"
    ne $I11, -1, rxscan48_done132
    goto rxscan48_scan131
  rxscan48_loop130:
    inc rx47_pos
    gt rx47_pos, rx47_eos, rx47_fail126
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!from", rx47_pos
  rxscan48_scan131:
    nqp_rxmark rx47_bstack, rxscan48_loop130, rx47_pos, 0
  rxscan48_done132:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    store_lex unicode:"$\x{a2}", rx47_cur
    unless_null $P101, fallback133
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["%RX"]
    unless_null $P5003, fallback134
    nqp_get_sc_object $P5007, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5006, $P5007
    new $P5008, 'Hash'
    set $P5006["%RX"], $P5008
    set $P5003, $P5008
  fallback134:
    unless_null $P5003, vivi_49135
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5003, $P5009
  vivi_49135:
    set $P101, $P5003
  fallback133:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    store_lex unicode:"$\x{a2}", rx47_cur
.annotate 'line', 80
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5013, $P5014, "QRegex"
    nqp_get_package_through_who $P5012, $P5013, "P6Regex"
    get_who $P5011, $P5012
    set $P5010, $P5011["World"]
    unless_null $P5010, fallback136
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5015
  fallback136:
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."target"()
    set $S5002, $P5017
    nqp_sha1 $S5001, $S5002
    $P5018 = $P5010."new"($S5001 :named("handle"))
    set $P102, $P5018
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail126
    nqp_rxmark rx47_bstack, rxsubrule50_pass137, -1, 0
  rxsubrule50_pass137:
    rx47_cstack = rx47_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
  alt51_0139:
    nqp_rxmark rx47_bstack, alt51_1141, rx47_pos, 0
    lt rx47_pos, rx47_eos, rx47_fail126
    goto alt51_end138
  alt51_1141:
    repr_bind_attr_int rx47_cur, rx47_curclass, "$!pos", rx47_pos
    $P11 = rx47_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx47_curclass, "$!pos"
    lt $I11, 0, rx47_fail126
    repr_get_attr_int rx47_pos, $P11, rx47_curclass, "$!pos"
  alt51_end138:
    rx47_cur."!cursor_pass"(rx47_pos, "TOP", 'backtrack'=>1)
    .return (rx47_cur)
  rx47_restart125:
    repr_get_attr_obj rx47_cstack, rx47_cur, rx47_curclass, "$!cstack"
  rx47_fail126:
    unless rx47_bstack, rx47_done124
    pop $I19, rx47_bstack
    if_null rx47_cstack, rx47_cstack_done129
    unless rx47_cstack, rx47_cstack_done129
    dec $I19
    set $P11, rx47_cstack[$I19]
  rx47_cstack_done129:
    pop rx47_rep, rx47_bstack
    pop rx47_pos, rx47_bstack
    pop $I19, rx47_bstack
    lt rx47_pos, -1, rx47_done124
    lt rx47_pos, 0, rx47_fail126
    eq $I19, 0, rx47_fail126
    nqp_islist $I20, rx47_cstack
    unless $I20, rx47_jump127
    elements $I18, rx47_bstack
    le $I18, 0, rx47_cut128
    dec $I18
    set $I18, rx47_bstack[$I18]
  rx47_cut128:
    assign rx47_cstack, $I18
  rx47_jump127:
    jump $I19
  rx47_done124:
    rx47_cur."!cursor_fail"()
    .return (rx47_cur) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_14_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 85
    .param pmc _lex_param_0 
    .const 'Sub' $P5018 = 'cuid_183_1356803021.47401' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_15_1356803021.47401' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_184_1356803021.47401' 
    capture_lex $P5018 
    .lex "$OLDRX", $P101 
    .lex "%*RX", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx54_tgt
    .local int rx54_pos
    .local int rx54_off
    .local int rx54_eos
    .local int rx54_rep
    .local pmc rx54_cur
    .local pmc rx54_curclass
    .local pmc rx54_bstack
    .local pmc rx54_cstack
    (rx54_cur, rx54_tgt, rx54_pos, rx54_curclass, rx54_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx54_cur
    length rx54_eos, rx54_tgt
    eq $I19, 1, rx54_restart145
    gt rx54_pos, rx54_eos, rx54_fail146
    repr_get_attr_int $I11, self, rx54_curclass, "$!from"
    ne $I11, -1, rxscan55_done152
    goto rxscan55_scan151
  rxscan55_loop150:
    inc rx54_pos
    gt rx54_pos, rx54_eos, rx54_fail146
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!from", rx54_pos
  rxscan55_scan151:
    nqp_rxmark rx54_bstack, rxscan55_loop150, rx54_pos, 0
  rxscan55_done152:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    store_lex unicode:"$\x{a2}", rx54_cur
    find_dynamic_lex $P5003, "%*RX"
    set $P101, $P5003
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    store_lex unicode:"$\x{a2}", rx54_cur
    unless_null $P102, fallback153
    nqp_get_sc_object $P5006, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%RX"]
    unless_null $P5004, fallback154
    nqp_get_sc_object $P5008, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%RX"], $P5009
    set $P5004, $P5009
  fallback154:
    unless_null $P5004, vivi_56155
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5004, $P5010
  vivi_56155:
    set $P102, $P5004
  fallback153:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    store_lex unicode:"$\x{a2}", rx54_cur
    $P5011 = $P103."MATCH"()
    set $P104, $P5011
    .const 'Sub' $P5012 = 'cuid_183_1356803021.47401' 
    capture_lex $P5012
    $P5013 = $P5012()
    nqp_rxmark rx54_bstack, rxquantr58_done163, rx54_pos, 0
  rxquantr58_loop162:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."ws"()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt60_0166
    nqp_push_label $P11, alt60_1167
    nqp_push_label $P11, alt60_2168
    nqp_push_label $P11, alt60_3169
    nqp_rxmark rx54_bstack, alt60_end165, -1, 0
    rx54_cur."!alt"(rx54_pos, "alt_nfa__4_1356803021.87678", $P11)
    goto rx54_fail146
  alt60_0166:
    add $I11, rx54_pos, 2
    gt $I11, rx54_eos, rx54_fail146
    substr $S10, rx54_tgt, rx54_pos, 2
    ne $S10, ucs4:"||", rx54_fail146
    add rx54_pos, 2
    goto alt60_end165
  alt60_1167:
    add $I11, rx54_pos, 1
    gt $I11, rx54_eos, rx54_fail146
    substr $S10, rx54_tgt, rx54_pos, 1
    ne $S10, ucs4:"|", rx54_fail146
    add rx54_pos, 1
    goto alt60_end165
  alt60_2168:
    add $I11, rx54_pos, 2
    gt $I11, rx54_eos, rx54_fail146
    substr $S10, rx54_tgt, rx54_pos, 2
    ne $S10, ucs4:"&&", rx54_fail146
    add rx54_pos, 2
    goto alt60_end165
  alt60_3169:
    add $I11, rx54_pos, 1
    gt $I11, rx54_eos, rx54_fail146
    substr $S10, rx54_tgt, rx54_pos, 1
    ne $S10, ucs4:"&", rx54_fail146
    add rx54_pos, 1
    goto alt60_end165
  alt60_end165:
    nqp_rxcommit rx54_bstack, alt60_end165
    nqp_rxpeek $I19, rx54_bstack, rxquantr58_done163
    inc $I19
    inc $I19
    set rx54_rep, rx54_bstack[$I19]
    nqp_rxcommit rx54_bstack, rxquantr58_done163
    inc rx54_rep
  rxquantr58_done163:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."termaltseq"()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    nqp_rxmark rx54_bstack, rxsubrule61_pass170, -1, 0
  rxsubrule61_pass170:
    rx54_cstack = rx54_cur."!cursor_capture"($P11, "termaltseq")
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."ws"()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
  alt63_0173:
    nqp_rxmark rx54_bstack, alt63_1174, rx54_pos, 0
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    goto alt63_end172
  alt63_1174:
    nqp_rxmark rx54_bstack, alt63_2177, rx54_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx54_tgt, rx54_pos
    if $I11, rxanchor64_done175
    ne rx54_pos, rx54_eos, rx54_fail146
    eq rx54_pos, 0, rxanchor64_done175
    sub $I11, rx54_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx54_tgt, $I11
    if $I11, rx54_fail146
  rxanchor64_done175:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
    goto alt63_end172
  alt63_2177:
    nqp_rxmark rx54_bstack, alt63_3190, rx54_pos, 0
    .const 'Sub' $P5014 = 'cuid_15_1356803021.47401' 
    capture_lex $P5014
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur.$P5014()
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    nqp_rxmark rx54_bstack, rxsubrule68_pass188, -1, 0
  rxsubrule68_pass188:
    rx54_cstack = rx54_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    store_lex unicode:"$\x{a2}", rx54_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_184_1356803021.47401' 
    capture_lex $P5016
    $P5017 = $P5016()
    goto alt63_end172
  alt63_3190:
    repr_bind_attr_int rx54_cur, rx54_curclass, "$!pos", rx54_pos
    $P11 = rx54_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx54_curclass, "$!pos"
    lt $I11, 0, rx54_fail146
    repr_get_attr_int rx54_pos, $P11, rx54_curclass, "$!pos"
  alt63_end172:
    rx54_cur."!cursor_pass"(rx54_pos, "nibbler", 'backtrack'=>1)
    .return (rx54_cur)
  rx54_restart145:
    repr_get_attr_obj rx54_cstack, rx54_cur, rx54_curclass, "$!cstack"
  rx54_fail146:
    unless rx54_bstack, rx54_done144
    pop $I19, rx54_bstack
    if_null rx54_cstack, rx54_cstack_done149
    unless rx54_cstack, rx54_cstack_done149
    dec $I19
    set $P11, rx54_cstack[$I19]
  rx54_cstack_done149:
    pop rx54_rep, rx54_bstack
    pop rx54_pos, rx54_bstack
    pop $I19, rx54_bstack
    lt rx54_pos, -1, rx54_done144
    lt rx54_pos, 0, rx54_fail146
    eq $I19, 0, rx54_fail146
    nqp_islist $I20, rx54_cstack
    unless $I20, rx54_jump147
    elements $I18, rx54_bstack
    le $I18, 0, rx54_cut148
    dec $I18
    set $I18, rx54_bstack[$I18]
  rx54_cut148:
    assign rx54_cstack, $I18
  rx54_jump147:
    jump $I19
  rx54_done144:
    rx54_cur."!cursor_fail"()
    .return (rx54_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_183_1356803021.47401") :anon :lex :outer("cuid_14_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 88
    .const 'Sub' $P5007 = 'cuid_182_1356803021.47401' 
    capture_lex $P5007 
    find_lex $P5004, "$OLDRX"
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next159:
    unless $P5003, for_done161
    shift $P5006, $P5003
  for_redo160:
    .const 'Sub' $P5005 = 'cuid_182_1356803021.47401' 
    capture_lex $P5005
    $P5001 = $P5005($P5006)
    goto for_next159
  for_done161:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_182_1356803021.47401") :anon :lex :outer("cuid_183_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 89
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback156
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback157
    nqp_get_sc_object $P5006, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback157:
    unless_null $P5002, vivi_57158
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_57158:
    set $P5001, $P5002
  fallback156:
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1356803021.47401") :anon :lex :outer("cuid_14_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx66_tgt
    .local int rx66_pos
    .local int rx66_off
    .local int rx66_eos
    .local int rx66_rep
    .local pmc rx66_cur
    .local pmc rx66_curclass
    .local pmc rx66_bstack
    .local pmc rx66_cstack
    (rx66_cur, rx66_tgt, rx66_pos, rx66_curclass, rx66_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx66_cur
    length rx66_eos, rx66_tgt
    eq $I19, 1, rx66_restart180
    gt rx66_pos, rx66_eos, rx66_fail181
    repr_get_attr_int $I11, self, rx66_curclass, "$!from"
    ne $I11, -1, rxscan67_done187
    goto rxscan67_scan186
  rxscan67_loop185:
    inc rx66_pos
    gt rx66_pos, rx66_eos, rx66_fail181
    repr_bind_attr_int rx66_cur, rx66_curclass, "$!from", rx66_pos
  rxscan67_scan186:
    nqp_rxmark rx66_bstack, rxscan67_loop185, rx66_pos, 0
  rxscan67_done187:
    ge rx66_pos, rx66_eos, rx66_fail181
    is_cclass $I11, .CCLASS_WORD, rx66_tgt, rx66_pos
    if $I11, rx66_fail181
    add rx66_pos, 1
    rx66_cur."!cursor_pass"(rx66_pos, 'backtrack'=>1)
    .return (rx66_cur)
  rx66_restart180:
    repr_get_attr_obj rx66_cstack, rx66_cur, rx66_curclass, "$!cstack"
  rx66_fail181:
    unless rx66_bstack, rx66_done179
    pop $I19, rx66_bstack
    if_null rx66_cstack, rx66_cstack_done184
    unless rx66_cstack, rx66_cstack_done184
    dec $I19
    set $P11, rx66_cstack[$I19]
  rx66_cstack_done184:
    pop rx66_rep, rx66_bstack
    pop rx66_pos, rx66_bstack
    pop $I19, rx66_bstack
    lt rx66_pos, -1, rx66_done179
    lt rx66_pos, 0, rx66_fail181
    eq $I19, 0, rx66_fail181
    nqp_islist $I20, rx66_cstack
    unless $I20, rx66_jump182
    elements $I18, rx66_bstack
    le $I18, 0, rx66_cut183
    dec $I18
    set $I18, rx66_bstack[$I18]
  rx66_cut183:
    assign rx66_cstack, $I18
  rx66_jump182:
    jump $I19
  rx66_done179:
    rx66_cur."!cursor_fail"()
    .return (rx66_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_184_1356803021.47401") :anon :lex :outer("cuid_14_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 96

    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5004, "$/"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback189
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback189:
    set $S5001, $P5003
    $P5006 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_16_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 101
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_17_1356803021.47401' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_18_1356803021.47401' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_19_1356803021.47401' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx70_tgt
    .local int rx70_pos
    .local int rx70_off
    .local int rx70_eos
    .local int rx70_rep
    .local pmc rx70_cur
    .local pmc rx70_curclass
    .local pmc rx70_bstack
    .local pmc rx70_cstack
    (rx70_cur, rx70_tgt, rx70_pos, rx70_curclass, rx70_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx70_cur
    length rx70_eos, rx70_tgt
    eq $I19, 1, rx70_restart194
    gt rx70_pos, rx70_eos, rx70_fail195
    repr_get_attr_int $I11, self, rx70_curclass, "$!from"
    ne $I11, -1, rxscan71_done201
    goto rxscan71_scan200
  rxscan71_loop199:
    inc rx70_pos
    gt rx70_pos, rx70_eos, rx70_fail195
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!from", rx70_pos
  rxscan71_scan200:
    nqp_rxmark rx70_bstack, rxscan71_loop199, rx70_pos, 0
  rxscan71_done201:
    rx70_cur."!dba"(rx70_pos, "infix stopper")
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt72_0203
    nqp_push_label $P11, alt72_1218
    nqp_push_label $P11, alt72_2229
    nqp_rxmark rx70_bstack, alt72_end202, -1, 0
    rx70_cur."!alt"(rx70_pos, "alt_nfa__5_1356803021.90024", $P11)
    goto rx70_fail195
  alt72_0203:
    .const 'Sub' $P5001 = 'cuid_17_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail195
    goto alt72_end202
  alt72_1218:
    .const 'Sub' $P5002 = 'cuid_18_1356803021.47401' 
    capture_lex $P5002
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail195
    goto alt72_end202
  alt72_2229:
    .const 'Sub' $P5003 = 'cuid_19_1356803021.47401' 
    capture_lex $P5003
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."before"($P5003)
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail195
    goto alt72_end202
  alt72_end202:
    rx70_cur."!cursor_pass"(rx70_pos, "infixstopper", 'backtrack'=>1)
    .return (rx70_cur)
  rx70_restart194:
    repr_get_attr_obj rx70_cstack, rx70_cur, rx70_curclass, "$!cstack"
  rx70_fail195:
    unless rx70_bstack, rx70_done193
    pop $I19, rx70_bstack
    if_null rx70_cstack, rx70_cstack_done198
    unless rx70_cstack, rx70_cstack_done198
    dec $I19
    set $P11, rx70_cstack[$I19]
  rx70_cstack_done198:
    pop rx70_rep, rx70_bstack
    pop rx70_pos, rx70_bstack
    pop $I19, rx70_bstack
    lt rx70_pos, -1, rx70_done193
    lt rx70_pos, 0, rx70_fail195
    eq $I19, 0, rx70_fail195
    nqp_islist $I20, rx70_cstack
    unless $I20, rx70_jump196
    elements $I18, rx70_bstack
    le $I18, 0, rx70_cut197
    dec $I18
    set $I18, rx70_bstack[$I18]
  rx70_cut197:
    assign rx70_cstack, $I18
  rx70_jump196:
    jump $I19
  rx70_done193:
    rx70_cur."!cursor_fail"()
    .return (rx70_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_17_1356803021.47401") :anon :lex :outer("cuid_16_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx73_tgt
    .local int rx73_pos
    .local int rx73_off
    .local int rx73_eos
    .local int rx73_rep
    .local pmc rx73_cur
    .local pmc rx73_curclass
    .local pmc rx73_bstack
    .local pmc rx73_cstack
    (rx73_cur, rx73_tgt, rx73_pos, rx73_curclass, rx73_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx73_cur
    length rx73_eos, rx73_tgt
    eq $I19, 1, rx73_restart206
    gt rx73_pos, rx73_eos, rx73_fail207
    repr_get_attr_int $I11, self, rx73_curclass, "$!from"
    ne $I11, -1, rxscan74_done213
    goto rxscan74_scan212
  rxscan74_loop211:
    inc rx73_pos
    gt rx73_pos, rx73_eos, rx73_fail207
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!from", rx73_pos
  rxscan74_scan212:
    nqp_rxmark rx73_bstack, rxscan74_loop211, rx73_pos, 0
  rxscan74_done213:
  alt75_0215:
    nqp_rxmark rx73_bstack, alt75_1216, rx73_pos, 0
    add $I11, rx73_pos, 1
    gt $I11, rx73_eos, rx73_fail207
    substr $S10, rx73_tgt, rx73_pos, 1
    ne $S10, ucs4:")", rx73_fail207
    add rx73_pos, 1
    goto alt75_end214
  alt75_1216:
    nqp_rxmark rx73_bstack, alt75_2217, rx73_pos, 0
    add $I11, rx73_pos, 1
    gt $I11, rx73_eos, rx73_fail207
    substr $S10, rx73_tgt, rx73_pos, 1
    ne $S10, ucs4:"}", rx73_fail207
    add rx73_pos, 1
    goto alt75_end214
  alt75_2217:
    add $I11, rx73_pos, 1
    gt $I11, rx73_eos, rx73_fail207
    substr $S10, rx73_tgt, rx73_pos, 1
    ne $S10, ucs4:"]", rx73_fail207
    add rx73_pos, 1
  alt75_end214:
    rx73_cur."!cursor_pass"(rx73_pos, 'backtrack'=>1)
    .return (rx73_cur)
  rx73_restart206:
    repr_get_attr_obj rx73_cstack, rx73_cur, rx73_curclass, "$!cstack"
  rx73_fail207:
    unless rx73_bstack, rx73_done205
    pop $I19, rx73_bstack
    if_null rx73_cstack, rx73_cstack_done210
    unless rx73_cstack, rx73_cstack_done210
    dec $I19
    set $P11, rx73_cstack[$I19]
  rx73_cstack_done210:
    pop rx73_rep, rx73_bstack
    pop rx73_pos, rx73_bstack
    pop $I19, rx73_bstack
    lt rx73_pos, -1, rx73_done205
    lt rx73_pos, 0, rx73_fail207
    eq $I19, 0, rx73_fail207
    nqp_islist $I20, rx73_cstack
    unless $I20, rx73_jump208
    elements $I18, rx73_bstack
    le $I18, 0, rx73_cut209
    dec $I18
    set $I18, rx73_bstack[$I18]
  rx73_cut209:
    assign rx73_cstack, $I18
  rx73_jump208:
    jump $I19
  rx73_done205:
    rx73_cur."!cursor_fail"()
    .return (rx73_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_18_1356803021.47401") :anon :lex :outer("cuid_16_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    (rx76_cur, rx76_tgt, rx76_pos, rx76_curclass, rx76_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart221
    gt rx76_pos, rx76_eos, rx76_fail222
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done228
    goto rxscan77_scan227
  rxscan77_loop226:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail222
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan227:
    nqp_rxmark rx76_bstack, rxscan77_loop226, rx76_pos, 0
  rxscan77_done228:
    add $I11, rx76_pos, 1
    gt $I11, rx76_eos, rx76_fail222
    substr $S10, rx76_tgt, rx76_pos, 1
    ne $S10, ucs4:">", rx76_fail222
    add rx76_pos, 1
    ge rx76_pos, rx76_eos, rx76_fail222
    substr $S11, rx76_tgt, rx76_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx76_fail222
    inc rx76_pos
    rx76_cur."!cursor_pass"(rx76_pos, 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart221:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail222:
    unless rx76_bstack, rx76_done220
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done225
    unless rx76_cstack, rx76_cstack_done225
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done225:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done220
    lt rx76_pos, 0, rx76_fail222
    eq $I19, 0, rx76_fail222
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump223
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut224
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut224:
    assign rx76_cstack, $I18
  rx76_jump223:
    jump $I19
  rx76_done220:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_19_1356803021.47401") :anon :lex :outer("cuid_16_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    (rx78_cur, rx78_tgt, rx78_pos, rx78_curclass, rx78_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart232
    gt rx78_pos, rx78_eos, rx78_fail233
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done239
    goto rxscan79_scan238
  rxscan79_loop237:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail233
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan238:
    nqp_rxmark rx78_bstack, rxscan79_loop237, rx78_pos, 0
  rxscan79_done239:
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail233
    goto rxsubrule80_pass240
  rxsubrule80_back241:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail233
  rxsubrule80_pass240:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "rxstopper")
    set_addr $I11, rxsubrule80_back241
    push rx78_bstack, $I11
    push rx78_bstack, 0
    push rx78_bstack, rx78_pos
    elements $I11, rx78_cstack
    push rx78_bstack, $I11
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
    rx78_cur."!cursor_pass"(rx78_pos, 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart232:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail233:
    unless rx78_bstack, rx78_done231
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done236
    unless rx78_cstack, rx78_cstack_done236
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done236:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done231
    lt rx78_pos, 0, rx78_fail233
    eq $I19, 0, rx78_fail233
    nqp_islist $I20, rx78_cstack
    unless $I20, rx78_jump234
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut235
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut235:
    assign rx78_cstack, $I18
  rx78_jump234:
    jump $I19
  rx78_done231:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_20_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 110
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    (rx81_cur, rx81_tgt, rx81_pos, rx81_curclass, rx81_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart244
    gt rx81_pos, rx81_eos, rx81_fail245
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done251
    goto rxscan82_scan250
  rxscan82_loop249:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail245
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan250:
    nqp_rxmark rx81_bstack, rxscan82_loop249, rx81_pos, 0
  rxscan82_done251:
    lt rx81_pos, rx81_eos, rx81_fail245
    rx81_cur."!cursor_pass"(rx81_pos, "rxstopper", 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart244:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail245:
    unless rx81_bstack, rx81_done243
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done248
    unless rx81_cstack, rx81_cstack_done248
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done248:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done243
    lt rx81_pos, 0, rx81_fail245
    eq $I19, 0, rx81_fail245
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump246
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut247
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut247:
    assign rx81_cstack, $I18
  rx81_jump246:
    jump $I19
  rx81_done243:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_21_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 112
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx84_tgt
    .local int rx84_pos
    .local int rx84_off
    .local int rx84_eos
    .local int rx84_rep
    .local pmc rx84_cur
    .local pmc rx84_curclass
    .local pmc rx84_bstack
    .local pmc rx84_cstack
    (rx84_cur, rx84_tgt, rx84_pos, rx84_curclass, rx84_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx84_cur
    length rx84_eos, rx84_tgt
    eq $I19, 1, rx84_restart255
    gt rx84_pos, rx84_eos, rx84_fail256
    repr_get_attr_int $I11, self, rx84_curclass, "$!from"
    ne $I11, -1, rxscan85_done262
    goto rxscan85_scan261
  rxscan85_loop260:
    inc rx84_pos
    gt rx84_pos, rx84_eos, rx84_fail256
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!from", rx84_pos
  rxscan85_scan261:
    nqp_rxmark rx84_bstack, rxscan85_loop260, rx84_pos, 0
  rxscan85_done262:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail256
    nqp_rxmark rx84_bstack, rxsubrule86_pass263, -1, 0
  rxsubrule86_pass263:
    rx84_cstack = rx84_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    nqp_rxmark rx84_bstack, rxquantr87_done265, rx84_pos, 0
  rxquantr87_loop264:
    add $I11, rx84_pos, 2
    gt $I11, rx84_eos, rx84_fail256
    substr $S10, rx84_tgt, rx84_pos, 2
    ne $S10, ucs4:"||", rx84_fail256
    add rx84_pos, 2
  alt88_0267:
    nqp_rxmark rx84_bstack, alt88_1269, rx84_pos, 0
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail256
    nqp_rxmark rx84_bstack, rxsubrule89_pass268, -1, 0
  rxsubrule89_pass268:
    rx84_cstack = rx84_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    goto alt88_end266
  alt88_1269:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail256
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
  alt88_end266:
    nqp_rxpeek $I19, rx84_bstack, rxquantr87_done265
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr87_done265
    inc rx84_rep
    nqp_rxmark rx84_bstack, rxquantr87_done265, rx84_pos, rx84_rep
    goto rxquantr87_loop264
  rxquantr87_done265:
    rx84_cur."!cursor_pass"(rx84_pos, "termaltseq", 'backtrack'=>1)
    .return (rx84_cur)
  rx84_restart255:
    repr_get_attr_obj rx84_cstack, rx84_cur, rx84_curclass, "$!cstack"
  rx84_fail256:
    unless rx84_bstack, rx84_done254
    pop $I19, rx84_bstack
    if_null rx84_cstack, rx84_cstack_done259
    unless rx84_cstack, rx84_cstack_done259
    dec $I19
    set $P11, rx84_cstack[$I19]
  rx84_cstack_done259:
    pop rx84_rep, rx84_bstack
    pop rx84_pos, rx84_bstack
    pop $I19, rx84_bstack
    lt rx84_pos, -1, rx84_done254
    lt rx84_pos, 0, rx84_fail256
    eq $I19, 0, rx84_fail256
    nqp_islist $I20, rx84_cstack
    unless $I20, rx84_jump257
    elements $I18, rx84_bstack
    le $I18, 0, rx84_cut258
    dec $I18
    set $I18, rx84_bstack[$I18]
  rx84_cut258:
    assign rx84_cstack, $I18
  rx84_jump257:
    jump $I19
  rx84_done254:
    rx84_cur."!cursor_fail"()
    .return (rx84_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_22_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 117
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx91_tgt
    .local int rx91_pos
    .local int rx91_off
    .local int rx91_eos
    .local int rx91_rep
    .local pmc rx91_cur
    .local pmc rx91_curclass
    .local pmc rx91_bstack
    .local pmc rx91_cstack
    (rx91_cur, rx91_tgt, rx91_pos, rx91_curclass, rx91_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx91_cur
    length rx91_eos, rx91_tgt
    eq $I19, 1, rx91_restart273
    gt rx91_pos, rx91_eos, rx91_fail274
    repr_get_attr_int $I11, self, rx91_curclass, "$!from"
    ne $I11, -1, rxscan92_done280
    goto rxscan92_scan279
  rxscan92_loop278:
    inc rx91_pos
    gt rx91_pos, rx91_eos, rx91_fail274
    repr_bind_attr_int rx91_cur, rx91_curclass, "$!from", rx91_pos
  rxscan92_scan279:
    nqp_rxmark rx91_bstack, rxscan92_loop278, rx91_pos, 0
  rxscan92_done280:
    repr_bind_attr_int rx91_cur, rx91_curclass, "$!pos", rx91_pos
    $P11 = rx91_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx91_curclass, "$!pos"
    lt $I11, 0, rx91_fail274
    nqp_rxmark rx91_bstack, rxsubrule93_pass281, -1, 0
  rxsubrule93_pass281:
    rx91_cstack = rx91_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx91_pos, $P11, rx91_curclass, "$!pos"
    nqp_rxmark rx91_bstack, rxquantr94_done283, rx91_pos, 0
  rxquantr94_loop282:
    add $I11, rx91_pos, 2
    gt $I11, rx91_eos, rx91_fail274
    substr $S10, rx91_tgt, rx91_pos, 2
    ne $S10, ucs4:"&&", rx91_fail274
    add rx91_pos, 2
  alt95_0285:
    nqp_rxmark rx91_bstack, alt95_1287, rx91_pos, 0
    repr_bind_attr_int rx91_cur, rx91_curclass, "$!pos", rx91_pos
    $P11 = rx91_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx91_curclass, "$!pos"
    lt $I11, 0, rx91_fail274
    nqp_rxmark rx91_bstack, rxsubrule96_pass286, -1, 0
  rxsubrule96_pass286:
    rx91_cstack = rx91_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx91_pos, $P11, rx91_curclass, "$!pos"
    goto alt95_end284
  alt95_1287:
    repr_bind_attr_int rx91_cur, rx91_curclass, "$!pos", rx91_pos
    $P11 = rx91_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx91_curclass, "$!pos"
    lt $I11, 0, rx91_fail274
    repr_get_attr_int rx91_pos, $P11, rx91_curclass, "$!pos"
  alt95_end284:
    nqp_rxpeek $I19, rx91_bstack, rxquantr94_done283
    inc $I19
    inc $I19
    set rx91_rep, rx91_bstack[$I19]
    nqp_rxcommit rx91_bstack, rxquantr94_done283
    inc rx91_rep
    nqp_rxmark rx91_bstack, rxquantr94_done283, rx91_pos, rx91_rep
    goto rxquantr94_loop282
  rxquantr94_done283:
    rx91_cur."!cursor_pass"(rx91_pos, "termconjseq", 'backtrack'=>1)
    .return (rx91_cur)
  rx91_restart273:
    repr_get_attr_obj rx91_cstack, rx91_cur, rx91_curclass, "$!cstack"
  rx91_fail274:
    unless rx91_bstack, rx91_done272
    pop $I19, rx91_bstack
    if_null rx91_cstack, rx91_cstack_done277
    unless rx91_cstack, rx91_cstack_done277
    dec $I19
    set $P11, rx91_cstack[$I19]
  rx91_cstack_done277:
    pop rx91_rep, rx91_bstack
    pop rx91_pos, rx91_bstack
    pop $I19, rx91_bstack
    lt rx91_pos, -1, rx91_done272
    lt rx91_pos, 0, rx91_fail274
    eq $I19, 0, rx91_fail274
    nqp_islist $I20, rx91_cstack
    unless $I20, rx91_jump275
    elements $I18, rx91_bstack
    le $I18, 0, rx91_cut276
    dec $I18
    set $I18, rx91_bstack[$I18]
  rx91_cut276:
    assign rx91_cstack, $I18
  rx91_jump275:
    jump $I19
  rx91_done272:
    rx91_cur."!cursor_fail"()
    .return (rx91_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_23_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 122
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx98_tgt
    .local int rx98_pos
    .local int rx98_off
    .local int rx98_eos
    .local int rx98_rep
    .local pmc rx98_cur
    .local pmc rx98_curclass
    .local pmc rx98_bstack
    .local pmc rx98_cstack
    (rx98_cur, rx98_tgt, rx98_pos, rx98_curclass, rx98_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx98_cur
    length rx98_eos, rx98_tgt
    eq $I19, 1, rx98_restart291
    gt rx98_pos, rx98_eos, rx98_fail292
    repr_get_attr_int $I11, self, rx98_curclass, "$!from"
    ne $I11, -1, rxscan99_done298
    goto rxscan99_scan297
  rxscan99_loop296:
    inc rx98_pos
    gt rx98_pos, rx98_eos, rx98_fail292
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!from", rx98_pos
  rxscan99_scan297:
    nqp_rxmark rx98_bstack, rxscan99_loop296, rx98_pos, 0
  rxscan99_done298:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail292
    nqp_rxmark rx98_bstack, rxsubrule100_pass299, -1, 0
  rxsubrule100_pass299:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
    nqp_rxmark rx98_bstack, rxquantr101_done301, rx98_pos, 0
  rxquantr101_loop300:
    add $I11, rx98_pos, 1
    gt $I11, rx98_eos, rx98_fail292
    substr $S10, rx98_tgt, rx98_pos, 1
    ne $S10, ucs4:"|", rx98_fail292
    add rx98_pos, 1
    ge rx98_pos, rx98_eos, rx98_fail292
    substr $S11, rx98_tgt, rx98_pos, 1
    index $I11, ucs4:"|", $S11
    ge $I11, 0, rx98_fail292
  alt102_0303:
    nqp_rxmark rx98_bstack, alt102_1305, rx98_pos, 0
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail292
    nqp_rxmark rx98_bstack, rxsubrule103_pass304, -1, 0
  rxsubrule103_pass304:
    rx98_cstack = rx98_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
    goto alt102_end302
  alt102_1305:
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!pos", rx98_pos
    $P11 = rx98_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx98_curclass, "$!pos"
    lt $I11, 0, rx98_fail292
    repr_get_attr_int rx98_pos, $P11, rx98_curclass, "$!pos"
  alt102_end302:
    nqp_rxpeek $I19, rx98_bstack, rxquantr101_done301
    inc $I19
    inc $I19
    set rx98_rep, rx98_bstack[$I19]
    nqp_rxcommit rx98_bstack, rxquantr101_done301
    inc rx98_rep
    nqp_rxmark rx98_bstack, rxquantr101_done301, rx98_pos, rx98_rep
    goto rxquantr101_loop300
  rxquantr101_done301:
    rx98_cur."!cursor_pass"(rx98_pos, "termalt", 'backtrack'=>1)
    .return (rx98_cur)
  rx98_restart291:
    repr_get_attr_obj rx98_cstack, rx98_cur, rx98_curclass, "$!cstack"
  rx98_fail292:
    unless rx98_bstack, rx98_done290
    pop $I19, rx98_bstack
    if_null rx98_cstack, rx98_cstack_done295
    unless rx98_cstack, rx98_cstack_done295
    dec $I19
    set $P11, rx98_cstack[$I19]
  rx98_cstack_done295:
    pop rx98_rep, rx98_bstack
    pop rx98_pos, rx98_bstack
    pop $I19, rx98_bstack
    lt rx98_pos, -1, rx98_done290
    lt rx98_pos, 0, rx98_fail292
    eq $I19, 0, rx98_fail292
    nqp_islist $I20, rx98_cstack
    unless $I20, rx98_jump293
    elements $I18, rx98_bstack
    le $I18, 0, rx98_cut294
    dec $I18
    set $I18, rx98_bstack[$I18]
  rx98_cut294:
    assign rx98_cstack, $I18
  rx98_jump293:
    jump $I19
  rx98_done290:
    rx98_cur."!cursor_fail"()
    .return (rx98_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_24_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 127
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx105_tgt
    .local int rx105_pos
    .local int rx105_off
    .local int rx105_eos
    .local int rx105_rep
    .local pmc rx105_cur
    .local pmc rx105_curclass
    .local pmc rx105_bstack
    .local pmc rx105_cstack
    (rx105_cur, rx105_tgt, rx105_pos, rx105_curclass, rx105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx105_cur
    length rx105_eos, rx105_tgt
    eq $I19, 1, rx105_restart309
    gt rx105_pos, rx105_eos, rx105_fail310
    repr_get_attr_int $I11, self, rx105_curclass, "$!from"
    ne $I11, -1, rxscan106_done316
    goto rxscan106_scan315
  rxscan106_loop314:
    inc rx105_pos
    gt rx105_pos, rx105_eos, rx105_fail310
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!from", rx105_pos
  rxscan106_scan315:
    nqp_rxmark rx105_bstack, rxscan106_loop314, rx105_pos, 0
  rxscan106_done316:
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."termish"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail310
    nqp_rxmark rx105_bstack, rxsubrule107_pass317, -1, 0
  rxsubrule107_pass317:
    rx105_cstack = rx105_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
    nqp_rxmark rx105_bstack, rxquantr108_done319, rx105_pos, 0
  rxquantr108_loop318:
    add $I11, rx105_pos, 1
    gt $I11, rx105_eos, rx105_fail310
    substr $S10, rx105_tgt, rx105_pos, 1
    ne $S10, ucs4:"&", rx105_fail310
    add rx105_pos, 1
    ge rx105_pos, rx105_eos, rx105_fail310
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"&", $S11
    ge $I11, 0, rx105_fail310
  alt109_0321:
    nqp_rxmark rx105_bstack, alt109_1323, rx105_pos, 0
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."termish"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail310
    nqp_rxmark rx105_bstack, rxsubrule110_pass322, -1, 0
  rxsubrule110_pass322:
    rx105_cstack = rx105_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
    goto alt109_end320
  alt109_1323:
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail310
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
  alt109_end320:
    nqp_rxpeek $I19, rx105_bstack, rxquantr108_done319
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr108_done319
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr108_done319, rx105_pos, rx105_rep
    goto rxquantr108_loop318
  rxquantr108_done319:
    rx105_cur."!cursor_pass"(rx105_pos, "termconj", 'backtrack'=>1)
    .return (rx105_cur)
  rx105_restart309:
    repr_get_attr_obj rx105_cstack, rx105_cur, rx105_curclass, "$!cstack"
  rx105_fail310:
    unless rx105_bstack, rx105_done308
    pop $I19, rx105_bstack
    if_null rx105_cstack, rx105_cstack_done313
    unless rx105_cstack, rx105_cstack_done313
    dec $I19
    set $P11, rx105_cstack[$I19]
  rx105_cstack_done313:
    pop rx105_rep, rx105_bstack
    pop rx105_pos, rx105_bstack
    pop $I19, rx105_bstack
    lt rx105_pos, -1, rx105_done308
    lt rx105_pos, 0, rx105_fail310
    eq $I19, 0, rx105_fail310
    nqp_islist $I20, rx105_cstack
    unless $I20, rx105_jump311
    elements $I18, rx105_bstack
    le $I18, 0, rx105_cut312
    dec $I18
    set $I18, rx105_bstack[$I18]
  rx105_cut312:
    assign rx105_cstack, $I18
  rx105_jump311:
    jump $I19
  rx105_done308:
    rx105_cur."!cursor_fail"()
    .return (rx105_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_25_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 132
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_26_1356803021.47401' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_27_1356803021.47401' 
    capture_lex $P5006 
    .const 'Sub' $P5006 = 'cuid_185_1356803021.47401' 
    capture_lex $P5006 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx112_tgt
    .local int rx112_pos
    .local int rx112_off
    .local int rx112_eos
    .local int rx112_rep
    .local pmc rx112_cur
    .local pmc rx112_curclass
    .local pmc rx112_bstack
    .local pmc rx112_cstack
    (rx112_cur, rx112_tgt, rx112_pos, rx112_curclass, rx112_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx112_cur
    length rx112_eos, rx112_tgt
    eq $I19, 1, rx112_restart327
    gt rx112_pos, rx112_eos, rx112_fail328
    repr_get_attr_int $I11, self, rx112_curclass, "$!from"
    ne $I11, -1, rxscan113_done334
    goto rxscan113_scan333
  rxscan113_loop332:
    inc rx112_pos
    gt rx112_pos, rx112_eos, rx112_fail328
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!from", rx112_pos
  rxscan113_scan333:
    nqp_rxmark rx112_bstack, rxscan113_loop332, rx112_pos, 0
  rxscan113_done334:
  alt114_0336:
    nqp_rxmark rx112_bstack, alt114_1341, rx112_pos, 0
    nqp_rxmark rx112_bstack, rxquantr115_done338, -1, 0
  rxquantr115_loop337:
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
    goto rxsubrule116_pass339
  rxsubrule116_back340:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
  rxsubrule116_pass339:
    rx112_cstack = rx112_cur."!cursor_capture"($P11, "noun")
    set_addr $I11, rxsubrule116_back340
    push rx112_bstack, $I11
    push rx112_bstack, 0
    push rx112_bstack, rx112_pos
    elements $I11, rx112_cstack
    push rx112_bstack, $I11
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    nqp_rxpeek $I19, rx112_bstack, rxquantr115_done338
    inc $I19
    inc $I19
    set rx112_rep, rx112_bstack[$I19]
    nqp_rxcommit rx112_bstack, rxquantr115_done338
    inc rx112_rep
    nqp_rxmark rx112_bstack, rxquantr115_done338, rx112_pos, rx112_rep
    goto rxquantr115_loop337
  rxquantr115_done338:
    goto alt114_end335
  alt114_1341:
    nqp_rxmark rx112_bstack, alt114_2357, rx112_pos, 0
    .const 'Sub' $P5001 = 'cuid_26_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    goto alt114_end335
  alt114_2357:
    .const 'Sub' $P5002 = 'cuid_27_1356803021.47401' 
    capture_lex $P5002
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail328
    nqp_rxmark rx112_bstack, rxsubrule124_pass368, -1, 0
  rxsubrule124_pass368:
    rx112_cstack = rx112_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    store_lex unicode:"$\x{a2}", rx112_cur
    $P5003 = $P101."MATCH"()
    set $P102, $P5003
    .const 'Sub' $P5004 = 'cuid_185_1356803021.47401' 
    capture_lex $P5004
    $P5005 = $P5004()
  alt114_end335:
    rx112_cur."!cursor_pass"(rx112_pos, "termish", 'backtrack'=>1)
    .return (rx112_cur)
  rx112_restart327:
    repr_get_attr_obj rx112_cstack, rx112_cur, rx112_curclass, "$!cstack"
  rx112_fail328:
    unless rx112_bstack, rx112_done326
    pop $I19, rx112_bstack
    if_null rx112_cstack, rx112_cstack_done331
    unless rx112_cstack, rx112_cstack_done331
    dec $I19
    set $P11, rx112_cstack[$I19]
  rx112_cstack_done331:
    pop rx112_rep, rx112_bstack
    pop rx112_pos, rx112_bstack
    pop $I19, rx112_bstack
    lt rx112_pos, -1, rx112_done326
    lt rx112_pos, 0, rx112_fail328
    eq $I19, 0, rx112_fail328
    nqp_islist $I20, rx112_cstack
    unless $I20, rx112_jump329
    elements $I18, rx112_bstack
    le $I18, 0, rx112_cut330
    dec $I18
    set $I18, rx112_bstack[$I18]
  rx112_cut330:
    assign rx112_cstack, $I18
  rx112_jump329:
    jump $I19
  rx112_done326:
    rx112_cur."!cursor_fail"()
    .return (rx112_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_26_1356803021.47401") :anon :lex :outer("cuid_25_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx117_tgt
    .local int rx117_pos
    .local int rx117_off
    .local int rx117_eos
    .local int rx117_rep
    .local pmc rx117_cur
    .local pmc rx117_curclass
    .local pmc rx117_bstack
    .local pmc rx117_cstack
    (rx117_cur, rx117_tgt, rx117_pos, rx117_curclass, rx117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx117_cur
    length rx117_eos, rx117_tgt
    eq $I19, 1, rx117_restart344
    gt rx117_pos, rx117_eos, rx117_fail345
    repr_get_attr_int $I11, self, rx117_curclass, "$!from"
    ne $I11, -1, rxscan118_done351
    goto rxscan118_scan350
  rxscan118_loop349:
    inc rx117_pos
    gt rx117_pos, rx117_eos, rx117_fail345
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!from", rx117_pos
  rxscan118_scan350:
    nqp_rxmark rx117_bstack, rxscan118_loop349, rx117_pos, 0
  rxscan118_done351:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt119_0353
    nqp_push_label $P11, alt119_1355
    nqp_rxmark rx117_bstack, alt119_end352, -1, 0
    rx117_cur."!alt"(rx117_pos, "alt_nfa__6_1356803021.96272", $P11)
    goto rx117_fail345
  alt119_0353:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail345
    nqp_rxmark rx117_bstack, rxsubrule120_pass354, -1, 0
  rxsubrule120_pass354:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    goto alt119_end352
  alt119_1355:
    ge rx117_pos, rx117_eos, rx117_fail345
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"&|~", $S11
    lt $I11, 0, rx117_fail345
    inc rx117_pos
    goto alt119_end352
  alt119_end352:
    rx117_cur."!cursor_pass"(rx117_pos, 'backtrack'=>1)
    .return (rx117_cur)
  rx117_restart344:
    repr_get_attr_obj rx117_cstack, rx117_cur, rx117_curclass, "$!cstack"
  rx117_fail345:
    unless rx117_bstack, rx117_done343
    pop $I19, rx117_bstack
    if_null rx117_cstack, rx117_cstack_done348
    unless rx117_cstack, rx117_cstack_done348
    dec $I19
    set $P11, rx117_cstack[$I19]
  rx117_cstack_done348:
    pop rx117_rep, rx117_bstack
    pop rx117_pos, rx117_bstack
    pop $I19, rx117_bstack
    lt rx117_pos, -1, rx117_done343
    lt rx117_pos, 0, rx117_fail345
    eq $I19, 0, rx117_fail345
    nqp_islist $I20, rx117_cstack
    unless $I20, rx117_jump346
    elements $I18, rx117_bstack
    le $I18, 0, rx117_cut347
    dec $I18
    set $I18, rx117_bstack[$I18]
  rx117_cut347:
    assign rx117_cstack, $I18
  rx117_jump346:
    jump $I19
  rx117_done343:
    rx117_cur."!cursor_fail"()
    .return (rx117_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_27_1356803021.47401") :anon :lex :outer("cuid_25_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx122_tgt
    .local int rx122_pos
    .local int rx122_off
    .local int rx122_eos
    .local int rx122_rep
    .local pmc rx122_cur
    .local pmc rx122_curclass
    .local pmc rx122_bstack
    .local pmc rx122_cstack
    (rx122_cur, rx122_tgt, rx122_pos, rx122_curclass, rx122_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx122_cur
    length rx122_eos, rx122_tgt
    eq $I19, 1, rx122_restart360
    gt rx122_pos, rx122_eos, rx122_fail361
    repr_get_attr_int $I11, self, rx122_curclass, "$!from"
    ne $I11, -1, rxscan123_done367
    goto rxscan123_scan366
  rxscan123_loop365:
    inc rx122_pos
    gt rx122_pos, rx122_eos, rx122_fail361
    repr_bind_attr_int rx122_cur, rx122_curclass, "$!from", rx122_pos
  rxscan123_scan366:
    nqp_rxmark rx122_bstack, rxscan123_loop365, rx122_pos, 0
  rxscan123_done367:
    ge rx122_pos, rx122_eos, rx122_fail361
    is_cclass $I11, .CCLASS_WORD, rx122_tgt, rx122_pos
    if $I11, rx122_fail361
    add rx122_pos, 1
    rx122_cur."!cursor_pass"(rx122_pos, 'backtrack'=>1)
    .return (rx122_cur)
  rx122_restart360:
    repr_get_attr_obj rx122_cstack, rx122_cur, rx122_curclass, "$!cstack"
  rx122_fail361:
    unless rx122_bstack, rx122_done359
    pop $I19, rx122_bstack
    if_null rx122_cstack, rx122_cstack_done364
    unless rx122_cstack, rx122_cstack_done364
    dec $I19
    set $P11, rx122_cstack[$I19]
  rx122_cstack_done364:
    pop rx122_rep, rx122_bstack
    pop rx122_pos, rx122_bstack
    pop $I19, rx122_bstack
    lt rx122_pos, -1, rx122_done359
    lt rx122_pos, 0, rx122_fail361
    eq $I19, 0, rx122_fail361
    nqp_islist $I20, rx122_cstack
    unless $I20, rx122_jump362
    elements $I18, rx122_bstack
    le $I18, 0, rx122_cut363
    dec $I18
    set $I18, rx122_bstack[$I18]
  rx122_cut363:
    assign rx122_cstack, $I18
  rx122_jump362:
    jump $I19
  rx122_done359:
    rx122_cur."!cursor_fail"()
    .return (rx122_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_185_1356803021.47401") :anon :lex :outer("cuid_25_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 135

    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5004, "$/"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback369
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback369:
    set $S5001, $P5003
    $P5006 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_28_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 138
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_29_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx125_tgt
    .local int rx125_pos
    .local int rx125_off
    .local int rx125_eos
    .local int rx125_rep
    .local pmc rx125_cur
    .local pmc rx125_curclass
    .local pmc rx125_bstack
    .local pmc rx125_cstack
    (rx125_cur, rx125_tgt, rx125_pos, rx125_curclass, rx125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx125_cur
    length rx125_eos, rx125_tgt
    eq $I19, 1, rx125_restart372
    gt rx125_pos, rx125_eos, rx125_fail373
    repr_get_attr_int $I11, self, rx125_curclass, "$!from"
    ne $I11, -1, rxscan126_done379
    goto rxscan126_scan378
  rxscan126_loop377:
    inc rx125_pos
    gt rx125_pos, rx125_eos, rx125_fail373
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!from", rx125_pos
  rxscan126_scan378:
    nqp_rxmark rx125_bstack, rxscan126_loop377, rx125_pos, 0
  rxscan126_done379:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."atom"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    nqp_rxmark rx125_bstack, rxsubrule127_pass380, -1, 0
  rxsubrule127_pass380:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "atom")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    nqp_rxmark rx125_bstack, rxquantr128_done382, rx125_pos, 0
  rxquantr128_loop381:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."ws"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt130_0385
    nqp_push_label $P11, alt130_1387
    nqp_rxmark rx125_bstack, alt130_end384, -1, 0
    rx125_cur."!alt"(rx125_pos, "alt_nfa__7_1356803021.98947", $P11)
    goto rx125_fail373
  alt130_0385:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    nqp_rxmark rx125_bstack, rxsubrule131_pass386, -1, 0
  rxsubrule131_pass386:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    goto alt130_end384
  alt130_1387:
    .const 'Sub' $P5001 = 'cuid_29_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    nqp_rxmark rx125_bstack, rxsubrule134_pass398, -1, 0
  rxsubrule134_pass398:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."alpha"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    ge $I11, 0, rx125_fail373
    goto alt130_end384
  alt130_end384:
    nqp_rxcommit rx125_bstack, alt130_end384
    nqp_rxmark rx125_bstack, rxquantr135_done400, rx125_pos, 0
  rxquantr135_loop399:
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."ws"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    repr_bind_attr_int rx125_cur, rx125_curclass, "$!pos", rx125_pos
    $P11 = rx125_cur."separator"()
    repr_get_attr_int $I11, $P11, rx125_curclass, "$!pos"
    lt $I11, 0, rx125_fail373
    nqp_rxmark rx125_bstack, rxsubrule137_pass402, -1, 0
  rxsubrule137_pass402:
    rx125_cstack = rx125_cur."!cursor_capture"($P11, "separator")
    repr_get_attr_int rx125_pos, $P11, rx125_curclass, "$!pos"
    nqp_rxpeek $I19, rx125_bstack, rxquantr135_done400
    inc $I19
    inc $I19
    set rx125_rep, rx125_bstack[$I19]
    nqp_rxcommit rx125_bstack, rxquantr135_done400
    inc rx125_rep
  rxquantr135_done400:
    nqp_rxpeek $I19, rx125_bstack, rxquantr128_done382
    inc $I19
    inc $I19
    set rx125_rep, rx125_bstack[$I19]
    nqp_rxcommit rx125_bstack, rxquantr128_done382
    inc rx125_rep
  rxquantr128_done382:
    rx125_cur."!cursor_pass"(rx125_pos, "quantified_atom", 'backtrack'=>1)
    .return (rx125_cur)
  rx125_restart372:
    repr_get_attr_obj rx125_cstack, rx125_cur, rx125_curclass, "$!cstack"
  rx125_fail373:
    unless rx125_bstack, rx125_done371
    pop $I19, rx125_bstack
    if_null rx125_cstack, rx125_cstack_done376
    unless rx125_cstack, rx125_cstack_done376
    dec $I19
    set $P11, rx125_cstack[$I19]
  rx125_cstack_done376:
    pop rx125_rep, rx125_bstack
    pop rx125_pos, rx125_bstack
    pop $I19, rx125_bstack
    lt rx125_pos, -1, rx125_done371
    lt rx125_pos, 0, rx125_fail373
    eq $I19, 0, rx125_fail373
    nqp_islist $I20, rx125_cstack
    unless $I20, rx125_jump374
    elements $I18, rx125_bstack
    le $I18, 0, rx125_cut375
    dec $I18
    set $I18, rx125_bstack[$I18]
  rx125_cut375:
    assign rx125_cstack, $I18
  rx125_jump374:
    jump $I19
  rx125_done371:
    rx125_cur."!cursor_fail"()
    .return (rx125_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_29_1356803021.47401") :anon :lex :outer("cuid_28_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx132_tgt
    .local int rx132_pos
    .local int rx132_off
    .local int rx132_eos
    .local int rx132_rep
    .local pmc rx132_cur
    .local pmc rx132_curclass
    .local pmc rx132_bstack
    .local pmc rx132_cstack
    (rx132_cur, rx132_tgt, rx132_pos, rx132_curclass, rx132_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx132_cur
    length rx132_eos, rx132_tgt
    eq $I19, 1, rx132_restart390
    gt rx132_pos, rx132_eos, rx132_fail391
    repr_get_attr_int $I11, self, rx132_curclass, "$!from"
    ne $I11, -1, rxscan133_done397
    goto rxscan133_scan396
  rxscan133_loop395:
    inc rx132_pos
    gt rx132_pos, rx132_eos, rx132_fail391
    repr_bind_attr_int rx132_cur, rx132_curclass, "$!from", rx132_pos
  rxscan133_scan396:
    nqp_rxmark rx132_bstack, rxscan133_loop395, rx132_pos, 0
  rxscan133_done397:
    add $I11, rx132_pos, 1
    gt $I11, rx132_eos, rx132_fail391
    substr $S10, rx132_tgt, rx132_pos, 1
    ne $S10, ucs4:":", rx132_fail391
    add rx132_pos, 1
    rx132_cur."!cursor_pass"(rx132_pos, 'backtrack'=>1)
    .return (rx132_cur)
  rx132_restart390:
    repr_get_attr_obj rx132_cstack, rx132_cur, rx132_curclass, "$!cstack"
  rx132_fail391:
    unless rx132_bstack, rx132_done389
    pop $I19, rx132_bstack
    if_null rx132_cstack, rx132_cstack_done394
    unless rx132_cstack, rx132_cstack_done394
    dec $I19
    set $P11, rx132_cstack[$I19]
  rx132_cstack_done394:
    pop rx132_rep, rx132_bstack
    pop rx132_pos, rx132_bstack
    pop $I19, rx132_bstack
    lt rx132_pos, -1, rx132_done389
    lt rx132_pos, 0, rx132_fail391
    eq $I19, 0, rx132_fail391
    nqp_islist $I20, rx132_cstack
    unless $I20, rx132_jump392
    elements $I18, rx132_bstack
    le $I18, 0, rx132_cut393
    dec $I18
    set $I18, rx132_bstack[$I18]
  rx132_cut393:
    assign rx132_cstack, $I18
  rx132_jump392:
    jump $I19
  rx132_done389:
    rx132_cur."!cursor_fail"()
    .return (rx132_cur) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_30_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 146
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx138_tgt
    .local int rx138_pos
    .local int rx138_off
    .local int rx138_eos
    .local int rx138_rep
    .local pmc rx138_cur
    .local pmc rx138_curclass
    .local pmc rx138_bstack
    .local pmc rx138_cstack
    (rx138_cur, rx138_tgt, rx138_pos, rx138_curclass, rx138_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx138_cur
    length rx138_eos, rx138_tgt
    eq $I19, 1, rx138_restart405
    gt rx138_pos, rx138_eos, rx138_fail406
    repr_get_attr_int $I11, self, rx138_curclass, "$!from"
    ne $I11, -1, rxscan139_done412
    goto rxscan139_scan411
  rxscan139_loop410:
    inc rx138_pos
    gt rx138_pos, rx138_eos, rx138_fail406
    repr_bind_attr_int rx138_cur, rx138_curclass, "$!from", rx138_pos
  rxscan139_scan411:
    nqp_rxmark rx138_bstack, rxscan139_loop410, rx138_pos, 0
  rxscan139_done412:
    nqp_rxmark rx138_bstack, rxcap140_fail414, rx138_pos, 0
    add $I11, rx138_pos, 1
    gt $I11, rx138_eos, rx138_fail406
    substr $S10, rx138_tgt, rx138_pos, 1
    ne $S10, ucs4:"%", rx138_fail406
    add rx138_pos, 1
    nqp_rxmark rx138_bstack, rxquantr141_done416, rx138_pos, 0
  rxquantr141_loop415:
    add $I11, rx138_pos, 1
    gt $I11, rx138_eos, rx138_fail406
    substr $S10, rx138_tgt, rx138_pos, 1
    ne $S10, ucs4:"%", rx138_fail406
    add rx138_pos, 1
    nqp_rxpeek $I19, rx138_bstack, rxquantr141_done416
    inc $I19
    inc $I19
    set rx138_rep, rx138_bstack[$I19]
    nqp_rxcommit rx138_bstack, rxquantr141_done416
    inc rx138_rep
  rxquantr141_done416:
    nqp_rxpeek $I19, rx138_bstack, rxcap140_fail414
    inc $I19
    set $I11, rx138_bstack[$I19]
    repr_bind_attr_int rx138_cur, rx138_curclass, "$!pos", rx138_pos
    $P11 = rx138_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx138_pos)
    rx138_cstack = rx138_cur."!cursor_capture"($P11, "septype")
    goto rxcap140_done413
  rxcap140_fail414:
    goto rx138_fail406
  rxcap140_done413:
    nqp_rxmark rx138_bstack, rxquantr142_done418, rx138_pos, 0
  rxquantr142_loop417:
    repr_bind_attr_int rx138_cur, rx138_curclass, "$!pos", rx138_pos
    $P11 = rx138_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx138_curclass, "$!pos"
    lt $I11, 0, rx138_fail406
    goto rxsubrule143_pass419
  rxsubrule143_back420:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx138_curclass, "$!pos"
    lt $I11, 0, rx138_fail406
  rxsubrule143_pass419:
    rx138_cstack = rx138_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule143_back420
    push rx138_bstack, $I11
    push rx138_bstack, 0
    push rx138_bstack, rx138_pos
    elements $I11, rx138_cstack
    push rx138_bstack, $I11
    repr_get_attr_int rx138_pos, $P11, rx138_curclass, "$!pos"
    nqp_rxpeek $I19, rx138_bstack, rxquantr142_done418
    inc $I19
    inc $I19
    set rx138_rep, rx138_bstack[$I19]
    nqp_rxcommit rx138_bstack, rxquantr142_done418
    inc rx138_rep
  rxquantr142_done418:
    repr_bind_attr_int rx138_cur, rx138_curclass, "$!pos", rx138_pos
    $P11 = rx138_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx138_curclass, "$!pos"
    lt $I11, 0, rx138_fail406
    nqp_rxmark rx138_bstack, rxsubrule144_pass421, -1, 0
  rxsubrule144_pass421:
    rx138_cstack = rx138_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx138_pos, $P11, rx138_curclass, "$!pos"
    rx138_cur."!cursor_pass"(rx138_pos, "separator", 'backtrack'=>1)
    .return (rx138_cur)
  rx138_restart405:
    repr_get_attr_obj rx138_cstack, rx138_cur, rx138_curclass, "$!cstack"
  rx138_fail406:
    unless rx138_bstack, rx138_done404
    pop $I19, rx138_bstack
    if_null rx138_cstack, rx138_cstack_done409
    unless rx138_cstack, rx138_cstack_done409
    dec $I19
    set $P11, rx138_cstack[$I19]
  rx138_cstack_done409:
    pop rx138_rep, rx138_bstack
    pop rx138_pos, rx138_bstack
    pop $I19, rx138_bstack
    lt rx138_pos, -1, rx138_done404
    lt rx138_pos, 0, rx138_fail406
    eq $I19, 0, rx138_fail406
    nqp_islist $I20, rx138_cstack
    unless $I20, rx138_jump407
    elements $I18, rx138_bstack
    le $I18, 0, rx138_cut408
    dec $I18
    set $I18, rx138_bstack[$I18]
  rx138_cut408:
    assign rx138_cstack, $I18
  rx138_jump407:
    jump $I19
  rx138_done404:
    rx138_cur."!cursor_fail"()
    .return (rx138_cur) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_31_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 150
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_32_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx145_tgt
    .local int rx145_pos
    .local int rx145_off
    .local int rx145_eos
    .local int rx145_rep
    .local pmc rx145_cur
    .local pmc rx145_curclass
    .local pmc rx145_bstack
    .local pmc rx145_cstack
    (rx145_cur, rx145_tgt, rx145_pos, rx145_curclass, rx145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx145_cur
    length rx145_eos, rx145_tgt
    eq $I19, 1, rx145_restart424
    gt rx145_pos, rx145_eos, rx145_fail425
    repr_get_attr_int $I11, self, rx145_curclass, "$!from"
    ne $I11, -1, rxscan146_done431
    goto rxscan146_scan430
  rxscan146_loop429:
    inc rx145_pos
    gt rx145_pos, rx145_eos, rx145_fail425
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!from", rx145_pos
  rxscan146_scan430:
    nqp_rxmark rx145_bstack, rxscan146_loop429, rx145_pos, 0
  rxscan146_done431:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt147_0433
    nqp_push_label $P11, alt147_1448
    nqp_rxmark rx145_bstack, alt147_end432, -1, 0
    rx145_cur."!alt"(rx145_pos, "alt_nfa__8_1356803022.01056", $P11)
    goto rx145_fail425
  alt147_0433:
    ge rx145_pos, rx145_eos, rx145_fail425
    is_cclass $I11, .CCLASS_WORD, rx145_tgt, rx145_pos
    unless $I11, rx145_fail425
    add rx145_pos, 1
    nqp_rxmark rx145_bstack, rxquantr148_done435, rx145_pos, 0
  rxquantr148_loop434:
  rxquantg149_loop436:
    ge rx145_pos, rx145_eos, rx145_fail425
    is_cclass $I11, .CCLASS_WORD, rx145_tgt, rx145_pos
    unless $I11, rx145_fail425
    add rx145_pos, 1
    nqp_rxmark rx145_bstack, rxquantg149_done437, rx145_pos, rx145_rep
    goto rxquantg149_loop436
  rxquantg149_done437:
    .const 'Sub' $P5001 = 'cuid_32_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail425
    nqp_rxpeek $I19, rx145_bstack, rxquantr148_done435
    inc $I19
    inc $I19
    set rx145_rep, rx145_bstack[$I19]
    nqp_rxcommit rx145_bstack, rxquantr148_done435
    inc rx145_rep
  rxquantr148_done435:
    goto alt147_end432
  alt147_1448:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."metachar"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail425
    nqp_rxmark rx145_bstack, rxsubrule152_pass449, -1, 0
  rxsubrule152_pass449:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "metachar")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    goto alt147_end432
  alt147_end432:
    nqp_rxcommit rx145_bstack, alt147_end432
    rx145_cur."!cursor_pass"(rx145_pos, "atom", 'backtrack'=>1)
    .return (rx145_cur)
  rx145_restart424:
    repr_get_attr_obj rx145_cstack, rx145_cur, rx145_curclass, "$!cstack"
  rx145_fail425:
    unless rx145_bstack, rx145_done423
    pop $I19, rx145_bstack
    if_null rx145_cstack, rx145_cstack_done428
    unless rx145_cstack, rx145_cstack_done428
    dec $I19
    set $P11, rx145_cstack[$I19]
  rx145_cstack_done428:
    pop rx145_rep, rx145_bstack
    pop rx145_pos, rx145_bstack
    pop $I19, rx145_bstack
    lt rx145_pos, -1, rx145_done423
    lt rx145_pos, 0, rx145_fail425
    eq $I19, 0, rx145_fail425
    nqp_islist $I20, rx145_cstack
    unless $I20, rx145_jump426
    elements $I18, rx145_bstack
    le $I18, 0, rx145_cut427
    dec $I18
    set $I18, rx145_bstack[$I18]
  rx145_cut427:
    assign rx145_cstack, $I18
  rx145_jump426:
    jump $I19
  rx145_done423:
    rx145_cur."!cursor_fail"()
    .return (rx145_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_32_1356803021.47401") :anon :lex :outer("cuid_31_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx150_tgt
    .local int rx150_pos
    .local int rx150_off
    .local int rx150_eos
    .local int rx150_rep
    .local pmc rx150_cur
    .local pmc rx150_curclass
    .local pmc rx150_bstack
    .local pmc rx150_cstack
    (rx150_cur, rx150_tgt, rx150_pos, rx150_curclass, rx150_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx150_cur
    length rx150_eos, rx150_tgt
    eq $I19, 1, rx150_restart440
    gt rx150_pos, rx150_eos, rx150_fail441
    repr_get_attr_int $I11, self, rx150_curclass, "$!from"
    ne $I11, -1, rxscan151_done447
    goto rxscan151_scan446
  rxscan151_loop445:
    inc rx150_pos
    gt rx150_pos, rx150_eos, rx150_fail441
    repr_bind_attr_int rx150_cur, rx150_curclass, "$!from", rx150_pos
  rxscan151_scan446:
    nqp_rxmark rx150_bstack, rxscan151_loop445, rx150_pos, 0
  rxscan151_done447:
    ge rx150_pos, rx150_eos, rx150_fail441
    is_cclass $I11, .CCLASS_WORD, rx150_tgt, rx150_pos
    unless $I11, rx150_fail441
    add rx150_pos, 1
    rx150_cur."!cursor_pass"(rx150_pos, 'backtrack'=>1)
    .return (rx150_cur)
  rx150_restart440:
    repr_get_attr_obj rx150_cstack, rx150_cur, rx150_curclass, "$!cstack"
  rx150_fail441:
    unless rx150_bstack, rx150_done439
    pop $I19, rx150_bstack
    if_null rx150_cstack, rx150_cstack_done444
    unless rx150_cstack, rx150_cstack_done444
    dec $I19
    set $P11, rx150_cstack[$I19]
  rx150_cstack_done444:
    pop rx150_rep, rx150_bstack
    pop rx150_pos, rx150_bstack
    pop $I19, rx150_bstack
    lt rx150_pos, -1, rx150_done439
    lt rx150_pos, 0, rx150_fail441
    eq $I19, 0, rx150_fail441
    nqp_islist $I20, rx150_cstack
    unless $I20, rx150_jump442
    elements $I18, rx150_bstack
    le $I18, 0, rx150_cut443
    dec $I18
    set $I18, rx150_bstack[$I18]
  rx150_cut443:
    assign rx150_cstack, $I18
  rx150_jump442:
    jump $I19
  rx150_done439:
    rx150_cur."!cursor_fail"()
    .return (rx150_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier" :subid("cuid_33_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 158
    .param pmc self 
    $P5001 = self."!protoregex"("quantifier")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_34_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 159
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx153_tgt
    .local int rx153_pos
    .local int rx153_off
    .local int rx153_eos
    .local int rx153_rep
    .local pmc rx153_cur
    .local pmc rx153_curclass
    .local pmc rx153_bstack
    .local pmc rx153_cstack
    (rx153_cur, rx153_tgt, rx153_pos, rx153_curclass, rx153_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx153_cur
    length rx153_eos, rx153_tgt
    eq $I19, 1, rx153_restart452
    gt rx153_pos, rx153_eos, rx153_fail453
    repr_get_attr_int $I11, self, rx153_curclass, "$!from"
    ne $I11, -1, rxscan154_done459
    goto rxscan154_scan458
  rxscan154_loop457:
    inc rx153_pos
    gt rx153_pos, rx153_eos, rx153_fail453
    repr_bind_attr_int rx153_cur, rx153_curclass, "$!from", rx153_pos
  rxscan154_scan458:
    nqp_rxmark rx153_bstack, rxscan154_loop457, rx153_pos, 0
  rxscan154_done459:
    nqp_rxmark rx153_bstack, rxcap155_fail461, rx153_pos, 0
    add $I11, rx153_pos, 1
    gt $I11, rx153_eos, rx153_fail453
    substr $S10, rx153_tgt, rx153_pos, 1
    ne $S10, ucs4:"*", rx153_fail453
    add rx153_pos, 1
    nqp_rxpeek $I19, rx153_bstack, rxcap155_fail461
    inc $I19
    set $I11, rx153_bstack[$I19]
    repr_bind_attr_int rx153_cur, rx153_curclass, "$!pos", rx153_pos
    $P11 = rx153_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx153_pos)
    rx153_cstack = rx153_cur."!cursor_capture"($P11, "sym")
    goto rxcap155_done460
  rxcap155_fail461:
    goto rx153_fail453
  rxcap155_done460:
    repr_bind_attr_int rx153_cur, rx153_curclass, "$!pos", rx153_pos
    $P11 = rx153_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx153_curclass, "$!pos"
    lt $I11, 0, rx153_fail453
    nqp_rxmark rx153_bstack, rxsubrule156_pass462, -1, 0
  rxsubrule156_pass462:
    rx153_cstack = rx153_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx153_pos, $P11, rx153_curclass, "$!pos"
    rx153_cur."!cursor_pass"(rx153_pos, "quantifier:sym<*>", 'backtrack'=>1)
    .return (rx153_cur)
  rx153_restart452:
    repr_get_attr_obj rx153_cstack, rx153_cur, rx153_curclass, "$!cstack"
  rx153_fail453:
    unless rx153_bstack, rx153_done451
    pop $I19, rx153_bstack
    if_null rx153_cstack, rx153_cstack_done456
    unless rx153_cstack, rx153_cstack_done456
    dec $I19
    set $P11, rx153_cstack[$I19]
  rx153_cstack_done456:
    pop rx153_rep, rx153_bstack
    pop rx153_pos, rx153_bstack
    pop $I19, rx153_bstack
    lt rx153_pos, -1, rx153_done451
    lt rx153_pos, 0, rx153_fail453
    eq $I19, 0, rx153_fail453
    nqp_islist $I20, rx153_cstack
    unless $I20, rx153_jump454
    elements $I18, rx153_bstack
    le $I18, 0, rx153_cut455
    dec $I18
    set $I18, rx153_bstack[$I18]
  rx153_cut455:
    assign rx153_cstack, $I18
  rx153_jump454:
    jump $I19
  rx153_done451:
    rx153_cur."!cursor_fail"()
    .return (rx153_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_35_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 160
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx157_tgt
    .local int rx157_pos
    .local int rx157_off
    .local int rx157_eos
    .local int rx157_rep
    .local pmc rx157_cur
    .local pmc rx157_curclass
    .local pmc rx157_bstack
    .local pmc rx157_cstack
    (rx157_cur, rx157_tgt, rx157_pos, rx157_curclass, rx157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx157_cur
    length rx157_eos, rx157_tgt
    eq $I19, 1, rx157_restart465
    gt rx157_pos, rx157_eos, rx157_fail466
    repr_get_attr_int $I11, self, rx157_curclass, "$!from"
    ne $I11, -1, rxscan158_done472
    goto rxscan158_scan471
  rxscan158_loop470:
    inc rx157_pos
    gt rx157_pos, rx157_eos, rx157_fail466
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!from", rx157_pos
  rxscan158_scan471:
    nqp_rxmark rx157_bstack, rxscan158_loop470, rx157_pos, 0
  rxscan158_done472:
    nqp_rxmark rx157_bstack, rxcap159_fail474, rx157_pos, 0
    add $I11, rx157_pos, 1
    gt $I11, rx157_eos, rx157_fail466
    substr $S10, rx157_tgt, rx157_pos, 1
    ne $S10, ucs4:"+", rx157_fail466
    add rx157_pos, 1
    nqp_rxpeek $I19, rx157_bstack, rxcap159_fail474
    inc $I19
    set $I11, rx157_bstack[$I19]
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx157_pos)
    rx157_cstack = rx157_cur."!cursor_capture"($P11, "sym")
    goto rxcap159_done473
  rxcap159_fail474:
    goto rx157_fail466
  rxcap159_done473:
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx157_curclass, "$!pos"
    lt $I11, 0, rx157_fail466
    nqp_rxmark rx157_bstack, rxsubrule160_pass475, -1, 0
  rxsubrule160_pass475:
    rx157_cstack = rx157_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx157_pos, $P11, rx157_curclass, "$!pos"
    rx157_cur."!cursor_pass"(rx157_pos, "quantifier:sym<+>", 'backtrack'=>1)
    .return (rx157_cur)
  rx157_restart465:
    repr_get_attr_obj rx157_cstack, rx157_cur, rx157_curclass, "$!cstack"
  rx157_fail466:
    unless rx157_bstack, rx157_done464
    pop $I19, rx157_bstack
    if_null rx157_cstack, rx157_cstack_done469
    unless rx157_cstack, rx157_cstack_done469
    dec $I19
    set $P11, rx157_cstack[$I19]
  rx157_cstack_done469:
    pop rx157_rep, rx157_bstack
    pop rx157_pos, rx157_bstack
    pop $I19, rx157_bstack
    lt rx157_pos, -1, rx157_done464
    lt rx157_pos, 0, rx157_fail466
    eq $I19, 0, rx157_fail466
    nqp_islist $I20, rx157_cstack
    unless $I20, rx157_jump467
    elements $I18, rx157_bstack
    le $I18, 0, rx157_cut468
    dec $I18
    set $I18, rx157_bstack[$I18]
  rx157_cut468:
    assign rx157_cstack, $I18
  rx157_jump467:
    jump $I19
  rx157_done464:
    rx157_cur."!cursor_fail"()
    .return (rx157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_36_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 161
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx161_tgt
    .local int rx161_pos
    .local int rx161_off
    .local int rx161_eos
    .local int rx161_rep
    .local pmc rx161_cur
    .local pmc rx161_curclass
    .local pmc rx161_bstack
    .local pmc rx161_cstack
    (rx161_cur, rx161_tgt, rx161_pos, rx161_curclass, rx161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx161_cur
    length rx161_eos, rx161_tgt
    eq $I19, 1, rx161_restart478
    gt rx161_pos, rx161_eos, rx161_fail479
    repr_get_attr_int $I11, self, rx161_curclass, "$!from"
    ne $I11, -1, rxscan162_done485
    goto rxscan162_scan484
  rxscan162_loop483:
    inc rx161_pos
    gt rx161_pos, rx161_eos, rx161_fail479
    repr_bind_attr_int rx161_cur, rx161_curclass, "$!from", rx161_pos
  rxscan162_scan484:
    nqp_rxmark rx161_bstack, rxscan162_loop483, rx161_pos, 0
  rxscan162_done485:
    nqp_rxmark rx161_bstack, rxcap163_fail487, rx161_pos, 0
    add $I11, rx161_pos, 1
    gt $I11, rx161_eos, rx161_fail479
    substr $S10, rx161_tgt, rx161_pos, 1
    ne $S10, ucs4:"?", rx161_fail479
    add rx161_pos, 1
    nqp_rxpeek $I19, rx161_bstack, rxcap163_fail487
    inc $I19
    set $I11, rx161_bstack[$I19]
    repr_bind_attr_int rx161_cur, rx161_curclass, "$!pos", rx161_pos
    $P11 = rx161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx161_pos)
    rx161_cstack = rx161_cur."!cursor_capture"($P11, "sym")
    goto rxcap163_done486
  rxcap163_fail487:
    goto rx161_fail479
  rxcap163_done486:
    repr_bind_attr_int rx161_cur, rx161_curclass, "$!pos", rx161_pos
    $P11 = rx161_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx161_curclass, "$!pos"
    lt $I11, 0, rx161_fail479
    nqp_rxmark rx161_bstack, rxsubrule164_pass488, -1, 0
  rxsubrule164_pass488:
    rx161_cstack = rx161_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx161_pos, $P11, rx161_curclass, "$!pos"
    rx161_cur."!cursor_pass"(rx161_pos, "quantifier:sym<?>", 'backtrack'=>1)
    .return (rx161_cur)
  rx161_restart478:
    repr_get_attr_obj rx161_cstack, rx161_cur, rx161_curclass, "$!cstack"
  rx161_fail479:
    unless rx161_bstack, rx161_done477
    pop $I19, rx161_bstack
    if_null rx161_cstack, rx161_cstack_done482
    unless rx161_cstack, rx161_cstack_done482
    dec $I19
    set $P11, rx161_cstack[$I19]
  rx161_cstack_done482:
    pop rx161_rep, rx161_bstack
    pop rx161_pos, rx161_bstack
    pop $I19, rx161_bstack
    lt rx161_pos, -1, rx161_done477
    lt rx161_pos, 0, rx161_fail479
    eq $I19, 0, rx161_fail479
    nqp_islist $I20, rx161_cstack
    unless $I20, rx161_jump480
    elements $I18, rx161_bstack
    le $I18, 0, rx161_cut481
    dec $I18
    set $I18, rx161_bstack[$I18]
  rx161_cut481:
    assign rx161_cstack, $I18
  rx161_jump480:
    jump $I19
  rx161_done477:
    rx161_cur."!cursor_fail"()
    .return (rx161_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<{N,M}>" :subid("cuid_37_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 162
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_186_1356803021.47401' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_38_1356803021.47401' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_39_1356803021.47401' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_40_1356803021.47401' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx165_tgt
    .local int rx165_pos
    .local int rx165_off
    .local int rx165_eos
    .local int rx165_rep
    .local pmc rx165_cur
    .local pmc rx165_curclass
    .local pmc rx165_bstack
    .local pmc rx165_cstack
    (rx165_cur, rx165_tgt, rx165_pos, rx165_curclass, rx165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx165_cur
    length rx165_eos, rx165_tgt
    eq $I19, 1, rx165_restart491
    gt rx165_pos, rx165_eos, rx165_fail492
    repr_get_attr_int $I11, self, rx165_curclass, "$!from"
    ne $I11, -1, rxscan166_done498
    goto rxscan166_scan497
  rxscan166_loop496:
    inc rx165_pos
    gt rx165_pos, rx165_eos, rx165_fail492
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!from", rx165_pos
  rxscan166_scan497:
    nqp_rxmark rx165_bstack, rxscan166_loop496, rx165_pos, 0
  rxscan166_done498:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_186_1356803021.47401' 
    capture_lex $P5002
    $P5003 = $P5002()
    add $I11, rx165_pos, 1
    gt $I11, rx165_eos, rx165_fail492
    substr $S10, rx165_tgt, rx165_pos, 1
    ne $S10, ucs4:"{", rx165_fail492
    add rx165_pos, 1
    .const 'Sub' $P5004 = 'cuid_38_1356803021.47401' 
    capture_lex $P5004
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail492
    nqp_rxmark rx165_bstack, rxsubrule170_pass511, -1, 0
  rxsubrule170_pass511:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    .const 'Sub' $P5005 = 'cuid_39_1356803021.47401' 
    capture_lex $P5005
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur.$P5005()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail492
    nqp_rxmark rx165_bstack, rxsubrule174_pass524, -1, 0
  rxsubrule174_pass524:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    .const 'Sub' $P5006 = 'cuid_40_1356803021.47401' 
    capture_lex $P5006
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur.$P5006()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail492
    nqp_rxmark rx165_bstack, rxsubrule178_pass537, -1, 0
  rxsubrule178_pass537:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "2")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    add $I11, rx165_pos, 1
    gt $I11, rx165_eos, rx165_fail492
    substr $S10, rx165_tgt, rx165_pos, 1
    ne $S10, ucs4:"}", rx165_fail492
    add rx165_pos, 1
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."obs"("{N,M} as general quantifier", "** N..M (or ** N..*)")
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail492
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    rx165_cur."!cursor_pass"(rx165_pos, "quantifier:sym<{N,M}>", 'backtrack'=>1)
    .return (rx165_cur)
  rx165_restart491:
    repr_get_attr_obj rx165_cstack, rx165_cur, rx165_curclass, "$!cstack"
  rx165_fail492:
    unless rx165_bstack, rx165_done490
    pop $I19, rx165_bstack
    if_null rx165_cstack, rx165_cstack_done495
    unless rx165_cstack, rx165_cstack_done495
    dec $I19
    set $P11, rx165_cstack[$I19]
  rx165_cstack_done495:
    pop rx165_rep, rx165_bstack
    pop rx165_pos, rx165_bstack
    pop $I19, rx165_bstack
    lt rx165_pos, -1, rx165_done490
    lt rx165_pos, 0, rx165_fail492
    eq $I19, 0, rx165_fail492
    nqp_islist $I20, rx165_cstack
    unless $I20, rx165_jump493
    elements $I18, rx165_bstack
    le $I18, 0, rx165_cut494
    dec $I18
    set $I18, rx165_bstack[$I18]
  rx165_cut494:
    assign rx165_cstack, $I18
  rx165_jump493:
    jump $I19
  rx165_done490:
    rx165_cur."!cursor_fail"()
    .return (rx165_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_186_1356803021.47401") :anon :lex :outer("cuid_37_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 162

    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_38_1356803021.47401") :anon :lex :outer("cuid_37_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart501
    gt rx167_pos, rx167_eos, rx167_fail502
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done508
    goto rxscan168_scan507
  rxscan168_loop506:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail502
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan507:
    nqp_rxmark rx167_bstack, rxscan168_loop506, rx167_pos, 0
  rxscan168_done508:
    nqp_rxmark rx167_bstack, rxquantr169_done510, -1, 0
  rxquantr169_loop509:
    ge rx167_pos, rx167_eos, rx167_fail502
    is_cclass $I11, .CCLASS_NUMERIC, rx167_tgt, rx167_pos
    unless $I11, rx167_fail502
    add rx167_pos, 1
    nqp_rxpeek $I19, rx167_bstack, rxquantr169_done510
    inc $I19
    inc $I19
    set rx167_rep, rx167_bstack[$I19]
    nqp_rxcommit rx167_bstack, rxquantr169_done510
    inc rx167_rep
    nqp_rxmark rx167_bstack, rxquantr169_done510, rx167_pos, rx167_rep
    goto rxquantr169_loop509
  rxquantr169_done510:
    rx167_cur."!cursor_pass"(rx167_pos, 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart501:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail502:
    unless rx167_bstack, rx167_done500
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done505
    unless rx167_cstack, rx167_cstack_done505
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done505:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done500
    lt rx167_pos, 0, rx167_fail502
    eq $I19, 0, rx167_fail502
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump503
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut504
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut504:
    assign rx167_cstack, $I18
  rx167_jump503:
    jump $I19
  rx167_done500:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1356803021.47401") :anon :lex :outer("cuid_37_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx171_tgt
    .local int rx171_pos
    .local int rx171_off
    .local int rx171_eos
    .local int rx171_rep
    .local pmc rx171_cur
    .local pmc rx171_curclass
    .local pmc rx171_bstack
    .local pmc rx171_cstack
    (rx171_cur, rx171_tgt, rx171_pos, rx171_curclass, rx171_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx171_cur
    length rx171_eos, rx171_tgt
    eq $I19, 1, rx171_restart514
    gt rx171_pos, rx171_eos, rx171_fail515
    repr_get_attr_int $I11, self, rx171_curclass, "$!from"
    ne $I11, -1, rxscan172_done521
    goto rxscan172_scan520
  rxscan172_loop519:
    inc rx171_pos
    gt rx171_pos, rx171_eos, rx171_fail515
    repr_bind_attr_int rx171_cur, rx171_curclass, "$!from", rx171_pos
  rxscan172_scan520:
    nqp_rxmark rx171_bstack, rxscan172_loop519, rx171_pos, 0
  rxscan172_done521:
    nqp_rxmark rx171_bstack, rxquantr173_done523, rx171_pos, 0
  rxquantr173_loop522:
    add $I11, rx171_pos, 1
    gt $I11, rx171_eos, rx171_fail515
    substr $S10, rx171_tgt, rx171_pos, 1
    ne $S10, ucs4:",", rx171_fail515
    add rx171_pos, 1
    nqp_rxpeek $I19, rx171_bstack, rxquantr173_done523
    inc $I19
    inc $I19
    set rx171_rep, rx171_bstack[$I19]
    nqp_rxcommit rx171_bstack, rxquantr173_done523
    inc rx171_rep
  rxquantr173_done523:
    rx171_cur."!cursor_pass"(rx171_pos, 'backtrack'=>1)
    .return (rx171_cur)
  rx171_restart514:
    repr_get_attr_obj rx171_cstack, rx171_cur, rx171_curclass, "$!cstack"
  rx171_fail515:
    unless rx171_bstack, rx171_done513
    pop $I19, rx171_bstack
    if_null rx171_cstack, rx171_cstack_done518
    unless rx171_cstack, rx171_cstack_done518
    dec $I19
    set $P11, rx171_cstack[$I19]
  rx171_cstack_done518:
    pop rx171_rep, rx171_bstack
    pop rx171_pos, rx171_bstack
    pop $I19, rx171_bstack
    lt rx171_pos, -1, rx171_done513
    lt rx171_pos, 0, rx171_fail515
    eq $I19, 0, rx171_fail515
    nqp_islist $I20, rx171_cstack
    unless $I20, rx171_jump516
    elements $I18, rx171_bstack
    le $I18, 0, rx171_cut517
    dec $I18
    set $I18, rx171_bstack[$I18]
  rx171_cut517:
    assign rx171_cstack, $I18
  rx171_jump516:
    jump $I19
  rx171_done513:
    rx171_cur."!cursor_fail"()
    .return (rx171_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_40_1356803021.47401") :anon :lex :outer("cuid_37_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx175_tgt
    .local int rx175_pos
    .local int rx175_off
    .local int rx175_eos
    .local int rx175_rep
    .local pmc rx175_cur
    .local pmc rx175_curclass
    .local pmc rx175_bstack
    .local pmc rx175_cstack
    (rx175_cur, rx175_tgt, rx175_pos, rx175_curclass, rx175_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx175_cur
    length rx175_eos, rx175_tgt
    eq $I19, 1, rx175_restart527
    gt rx175_pos, rx175_eos, rx175_fail528
    repr_get_attr_int $I11, self, rx175_curclass, "$!from"
    ne $I11, -1, rxscan176_done534
    goto rxscan176_scan533
  rxscan176_loop532:
    inc rx175_pos
    gt rx175_pos, rx175_eos, rx175_fail528
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!from", rx175_pos
  rxscan176_scan533:
    nqp_rxmark rx175_bstack, rxscan176_loop532, rx175_pos, 0
  rxscan176_done534:
    nqp_rxmark rx175_bstack, rxquantr177_done536, rx175_pos, 0
  rxquantr177_loop535:
    ge rx175_pos, rx175_eos, rx175_fail528
    is_cclass $I11, .CCLASS_NUMERIC, rx175_tgt, rx175_pos
    unless $I11, rx175_fail528
    add rx175_pos, 1
    nqp_rxpeek $I19, rx175_bstack, rxquantr177_done536
    inc $I19
    inc $I19
    set rx175_rep, rx175_bstack[$I19]
    nqp_rxcommit rx175_bstack, rxquantr177_done536
    inc rx175_rep
    nqp_rxmark rx175_bstack, rxquantr177_done536, rx175_pos, rx175_rep
    goto rxquantr177_loop535
  rxquantr177_done536:
    rx175_cur."!cursor_pass"(rx175_pos, 'backtrack'=>1)
    .return (rx175_cur)
  rx175_restart527:
    repr_get_attr_obj rx175_cstack, rx175_cur, rx175_curclass, "$!cstack"
  rx175_fail528:
    unless rx175_bstack, rx175_done526
    pop $I19, rx175_bstack
    if_null rx175_cstack, rx175_cstack_done531
    unless rx175_cstack, rx175_cstack_done531
    dec $I19
    set $P11, rx175_cstack[$I19]
  rx175_cstack_done531:
    pop rx175_rep, rx175_bstack
    pop rx175_pos, rx175_bstack
    pop $I19, rx175_bstack
    lt rx175_pos, -1, rx175_done526
    lt rx175_pos, 0, rx175_fail528
    eq $I19, 0, rx175_fail528
    nqp_islist $I20, rx175_cstack
    unless $I20, rx175_jump529
    elements $I18, rx175_bstack
    le $I18, 0, rx175_cut530
    dec $I18
    set $I18, rx175_bstack[$I18]
  rx175_cut530:
    assign rx175_cstack, $I18
  rx175_jump529:
    jump $I19
  rx175_done526:
    rx175_cur."!cursor_fail"()
    .return (rx175_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_41_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 165
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx180_tgt
    .local int rx180_pos
    .local int rx180_off
    .local int rx180_eos
    .local int rx180_rep
    .local pmc rx180_cur
    .local pmc rx180_curclass
    .local pmc rx180_bstack
    .local pmc rx180_cstack
    (rx180_cur, rx180_tgt, rx180_pos, rx180_curclass, rx180_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx180_cur
    length rx180_eos, rx180_tgt
    eq $I19, 1, rx180_restart541
    gt rx180_pos, rx180_eos, rx180_fail542
    repr_get_attr_int $I11, self, rx180_curclass, "$!from"
    ne $I11, -1, rxscan181_done548
    goto rxscan181_scan547
  rxscan181_loop546:
    inc rx180_pos
    gt rx180_pos, rx180_eos, rx180_fail542
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!from", rx180_pos
  rxscan181_scan547:
    nqp_rxmark rx180_bstack, rxscan181_loop546, rx180_pos, 0
  rxscan181_done548:
    nqp_rxmark rx180_bstack, rxcap182_fail550, rx180_pos, 0
    add $I11, rx180_pos, 2
    gt $I11, rx180_eos, rx180_fail542
    substr $S10, rx180_tgt, rx180_pos, 2
    ne $S10, ucs4:"**", rx180_fail542
    add rx180_pos, 2
    nqp_rxpeek $I19, rx180_bstack, rxcap182_fail550
    inc $I19
    set $I11, rx180_bstack[$I19]
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx180_pos)
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "sym")
    goto rxcap182_done549
  rxcap182_fail550:
    goto rx180_fail542
  rxcap182_done549:
    nqp_rxmark rx180_bstack, rxquantr183_done552, rx180_pos, 0
  rxquantr183_loop551:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
    goto rxsubrule184_pass553
  rxsubrule184_back554:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
  rxsubrule184_pass553:
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule184_back554
    push rx180_bstack, $I11
    push rx180_bstack, 0
    push rx180_bstack, rx180_pos
    elements $I11, rx180_cstack
    push rx180_bstack, $I11
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxpeek $I19, rx180_bstack, rxquantr183_done552
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr183_done552
    inc rx180_rep
  rxquantr183_done552:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
    nqp_rxmark rx180_bstack, rxsubrule185_pass555, -1, 0
  rxsubrule185_pass555:
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxmark rx180_bstack, rxquantr186_done557, rx180_pos, 0
  rxquantr186_loop556:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
    goto rxsubrule187_pass558
  rxsubrule187_back559:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
  rxsubrule187_pass558:
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule187_back559
    push rx180_bstack, $I11
    push rx180_bstack, 0
    push rx180_bstack, rx180_pos
    elements $I11, rx180_cstack
    push rx180_bstack, $I11
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
    nqp_rxpeek $I19, rx180_bstack, rxquantr186_done557
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr186_done557
    inc rx180_rep
  rxquantr186_done557:
    nqp_rxmark rx180_bstack, rxcap188_fail561, rx180_pos, 0
    nqp_rxmark rx180_bstack, rxquantr189_done563, -1, 0
  rxquantr189_loop562:
    ge rx180_pos, rx180_eos, rx180_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx180_tgt, rx180_pos
    unless $I11, rx180_fail542
    add rx180_pos, 1
    nqp_rxpeek $I19, rx180_bstack, rxquantr189_done563
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr189_done563
    inc rx180_rep
    nqp_rxmark rx180_bstack, rxquantr189_done563, rx180_pos, rx180_rep
    goto rxquantr189_loop562
  rxquantr189_done563:
    nqp_rxpeek $I19, rx180_bstack, rxcap188_fail561
    inc $I19
    set $I11, rx180_bstack[$I19]
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx180_pos)
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "min")
    goto rxcap188_done560
  rxcap188_fail561:
    goto rx180_fail542
  rxcap188_done560:
    nqp_rxmark rx180_bstack, rxquantr190_done565, rx180_pos, 0
  rxquantr190_loop564:
    add $I11, rx180_pos, 2
    gt $I11, rx180_eos, rx180_fail542
    substr $S10, rx180_tgt, rx180_pos, 2
    ne $S10, ucs4:"..", rx180_fail542
    add rx180_pos, 2
    nqp_rxmark rx180_bstack, rxcap191_fail567, rx180_pos, 0
  alt192_0569:
    nqp_rxmark rx180_bstack, alt192_1572, rx180_pos, 0
    nqp_rxmark rx180_bstack, rxquantr193_done571, -1, 0
  rxquantr193_loop570:
    ge rx180_pos, rx180_eos, rx180_fail542
    is_cclass $I11, .CCLASS_NUMERIC, rx180_tgt, rx180_pos
    unless $I11, rx180_fail542
    add rx180_pos, 1
    nqp_rxpeek $I19, rx180_bstack, rxquantr193_done571
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr193_done571
    inc rx180_rep
    nqp_rxmark rx180_bstack, rxquantr193_done571, rx180_pos, rx180_rep
    goto rxquantr193_loop570
  rxquantr193_done571:
    goto alt192_end568
  alt192_1572:
    nqp_rxmark rx180_bstack, alt192_2573, rx180_pos, 0
    add $I11, rx180_pos, 1
    gt $I11, rx180_eos, rx180_fail542
    substr $S10, rx180_tgt, rx180_pos, 1
    ne $S10, ucs4:"*", rx180_fail542
    add rx180_pos, 1
    goto alt192_end568
  alt192_2573:
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."panic"("Only integers or '*' allowed as range quantifier endpoint")
    repr_get_attr_int $I11, $P11, rx180_curclass, "$!pos"
    lt $I11, 0, rx180_fail542
    repr_get_attr_int rx180_pos, $P11, rx180_curclass, "$!pos"
  alt192_end568:
    nqp_rxpeek $I19, rx180_bstack, rxcap191_fail567
    inc $I19
    set $I11, rx180_bstack[$I19]
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!pos", rx180_pos
    $P11 = rx180_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx180_pos)
    rx180_cstack = rx180_cur."!cursor_capture"($P11, "max")
    goto rxcap191_done566
  rxcap191_fail567:
    goto rx180_fail542
  rxcap191_done566:
    nqp_rxpeek $I19, rx180_bstack, rxquantr190_done565
    inc $I19
    inc $I19
    set rx180_rep, rx180_bstack[$I19]
    nqp_rxcommit rx180_bstack, rxquantr190_done565
    inc rx180_rep
  rxquantr190_done565:
    rx180_cur."!cursor_pass"(rx180_pos, "quantifier:sym<**>", 'backtrack'=>1)
    .return (rx180_cur)
  rx180_restart541:
    repr_get_attr_obj rx180_cstack, rx180_cur, rx180_curclass, "$!cstack"
  rx180_fail542:
    unless rx180_bstack, rx180_done540
    pop $I19, rx180_bstack
    if_null rx180_cstack, rx180_cstack_done545
    unless rx180_cstack, rx180_cstack_done545
    dec $I19
    set $P11, rx180_cstack[$I19]
  rx180_cstack_done545:
    pop rx180_rep, rx180_bstack
    pop rx180_pos, rx180_bstack
    pop $I19, rx180_bstack
    lt rx180_pos, -1, rx180_done540
    lt rx180_pos, 0, rx180_fail542
    eq $I19, 0, rx180_fail542
    nqp_islist $I20, rx180_cstack
    unless $I20, rx180_jump543
    elements $I18, rx180_bstack
    le $I18, 0, rx180_cut544
    dec $I18
    set $I18, rx180_bstack[$I18]
  rx180_cut544:
    assign rx180_cstack, $I18
  rx180_jump543:
    jump $I19
  rx180_done540:
    rx180_cur."!cursor_fail"()
    .return (rx180_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_42_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 179
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_43_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx195_tgt
    .local int rx195_pos
    .local int rx195_off
    .local int rx195_eos
    .local int rx195_rep
    .local pmc rx195_cur
    .local pmc rx195_curclass
    .local pmc rx195_bstack
    .local pmc rx195_cstack
    (rx195_cur, rx195_tgt, rx195_pos, rx195_curclass, rx195_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx195_cur
    length rx195_eos, rx195_tgt
    eq $I19, 1, rx195_restart577
    gt rx195_pos, rx195_eos, rx195_fail578
    repr_get_attr_int $I11, self, rx195_curclass, "$!from"
    ne $I11, -1, rxscan196_done584
    goto rxscan196_scan583
  rxscan196_loop582:
    inc rx195_pos
    gt rx195_pos, rx195_eos, rx195_fail578
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!from", rx195_pos
  rxscan196_scan583:
    nqp_rxmark rx195_bstack, rxscan196_loop582, rx195_pos, 0
  rxscan196_done584:
    nqp_rxmark rx195_bstack, rxquantr197_done586, rx195_pos, 0
  rxquantr197_loop585:
    add $I11, rx195_pos, 1
    gt $I11, rx195_eos, rx195_fail578
    substr $S10, rx195_tgt, rx195_pos, 1
    ne $S10, ucs4:":", rx195_fail578
    add rx195_pos, 1
    nqp_rxpeek $I19, rx195_bstack, rxquantr197_done586
    inc $I19
    inc $I19
    set rx195_rep, rx195_bstack[$I19]
    nqp_rxcommit rx195_bstack, rxquantr197_done586
    inc rx195_rep
  rxquantr197_done586:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt198_0588
    nqp_push_label $P11, alt198_1589
    nqp_push_label $P11, alt198_2590
    nqp_rxmark rx195_bstack, alt198_end587, -1, 0
    rx195_cur."!alt"(rx195_pos, "alt_nfa__9_1356803022.08499", $P11)
    goto rx195_fail578
  alt198_0588:
    add $I11, rx195_pos, 1
    gt $I11, rx195_eos, rx195_fail578
    substr $S10, rx195_tgt, rx195_pos, 1
    ne $S10, ucs4:"?", rx195_fail578
    add rx195_pos, 1
    goto alt198_end587
  alt198_1589:
    add $I11, rx195_pos, 1
    gt $I11, rx195_eos, rx195_fail578
    substr $S10, rx195_tgt, rx195_pos, 1
    ne $S10, ucs4:"!", rx195_fail578
    add rx195_pos, 1
    goto alt198_end587
  alt198_2590:
    .const 'Sub' $P5001 = 'cuid_43_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx195_cur, rx195_curclass, "$!pos", rx195_pos
    $P11 = rx195_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx195_curclass, "$!pos"
    ge $I11, 0, rx195_fail578
    goto alt198_end587
  alt198_end587:
    nqp_rxcommit rx195_bstack, alt198_end587
    rx195_cur."!cursor_pass"(rx195_pos, "backmod", 'backtrack'=>1)
    .return (rx195_cur)
  rx195_restart577:
    repr_get_attr_obj rx195_cstack, rx195_cur, rx195_curclass, "$!cstack"
  rx195_fail578:
    unless rx195_bstack, rx195_done576
    pop $I19, rx195_bstack
    if_null rx195_cstack, rx195_cstack_done581
    unless rx195_cstack, rx195_cstack_done581
    dec $I19
    set $P11, rx195_cstack[$I19]
  rx195_cstack_done581:
    pop rx195_rep, rx195_bstack
    pop rx195_pos, rx195_bstack
    pop $I19, rx195_bstack
    lt rx195_pos, -1, rx195_done576
    lt rx195_pos, 0, rx195_fail578
    eq $I19, 0, rx195_fail578
    nqp_islist $I20, rx195_cstack
    unless $I20, rx195_jump579
    elements $I18, rx195_bstack
    le $I18, 0, rx195_cut580
    dec $I18
    set $I18, rx195_bstack[$I18]
  rx195_cut580:
    assign rx195_cstack, $I18
  rx195_jump579:
    jump $I19
  rx195_done576:
    rx195_cur."!cursor_fail"()
    .return (rx195_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_43_1356803021.47401") :anon :lex :outer("cuid_42_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx199_tgt
    .local int rx199_pos
    .local int rx199_off
    .local int rx199_eos
    .local int rx199_rep
    .local pmc rx199_cur
    .local pmc rx199_curclass
    .local pmc rx199_bstack
    .local pmc rx199_cstack
    (rx199_cur, rx199_tgt, rx199_pos, rx199_curclass, rx199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx199_cur
    length rx199_eos, rx199_tgt
    eq $I19, 1, rx199_restart593
    gt rx199_pos, rx199_eos, rx199_fail594
    repr_get_attr_int $I11, self, rx199_curclass, "$!from"
    ne $I11, -1, rxscan200_done600
    goto rxscan200_scan599
  rxscan200_loop598:
    inc rx199_pos
    gt rx199_pos, rx199_eos, rx199_fail594
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!from", rx199_pos
  rxscan200_scan599:
    nqp_rxmark rx199_bstack, rxscan200_loop598, rx199_pos, 0
  rxscan200_done600:
    add $I11, rx199_pos, 1
    gt $I11, rx199_eos, rx199_fail594
    substr $S10, rx199_tgt, rx199_pos, 1
    ne $S10, ucs4:":", rx199_fail594
    add rx199_pos, 1
    rx199_cur."!cursor_pass"(rx199_pos, 'backtrack'=>1)
    .return (rx199_cur)
  rx199_restart593:
    repr_get_attr_obj rx199_cstack, rx199_cur, rx199_curclass, "$!cstack"
  rx199_fail594:
    unless rx199_bstack, rx199_done592
    pop $I19, rx199_bstack
    if_null rx199_cstack, rx199_cstack_done597
    unless rx199_cstack, rx199_cstack_done597
    dec $I19
    set $P11, rx199_cstack[$I19]
  rx199_cstack_done597:
    pop rx199_rep, rx199_bstack
    pop rx199_pos, rx199_bstack
    pop $I19, rx199_bstack
    lt rx199_pos, -1, rx199_done592
    lt rx199_pos, 0, rx199_fail594
    eq $I19, 0, rx199_fail594
    nqp_islist $I20, rx199_cstack
    unless $I20, rx199_jump595
    elements $I18, rx199_bstack
    le $I18, 0, rx199_cut596
    dec $I18
    set $I18, rx199_bstack[$I18]
  rx199_cut596:
    assign rx199_cstack, $I18
  rx199_jump595:
    jump $I19
  rx199_done592:
    rx199_cur."!cursor_fail"()
    .return (rx199_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar" :subid("cuid_44_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 181
    .param pmc self 
    $P5001 = self."!protoregex"("metachar")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_45_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 182
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx201_tgt
    .local int rx201_pos
    .local int rx201_off
    .local int rx201_eos
    .local int rx201_rep
    .local pmc rx201_cur
    .local pmc rx201_curclass
    .local pmc rx201_bstack
    .local pmc rx201_cstack
    (rx201_cur, rx201_tgt, rx201_pos, rx201_curclass, rx201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx201_cur
    length rx201_eos, rx201_tgt
    eq $I19, 1, rx201_restart603
    gt rx201_pos, rx201_eos, rx201_fail604
    repr_get_attr_int $I11, self, rx201_curclass, "$!from"
    ne $I11, -1, rxscan202_done610
    goto rxscan202_scan609
  rxscan202_loop608:
    inc rx201_pos
    gt rx201_pos, rx201_eos, rx201_fail604
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!from", rx201_pos
  rxscan202_scan609:
    nqp_rxmark rx201_bstack, rxscan202_loop608, rx201_pos, 0
  rxscan202_done610:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail604
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    rx201_cur."!cursor_pass"(rx201_pos, "metachar:sym<ws>", 'backtrack'=>1)
    .return (rx201_cur)
  rx201_restart603:
    repr_get_attr_obj rx201_cstack, rx201_cur, rx201_curclass, "$!cstack"
  rx201_fail604:
    unless rx201_bstack, rx201_done602
    pop $I19, rx201_bstack
    if_null rx201_cstack, rx201_cstack_done607
    unless rx201_cstack, rx201_cstack_done607
    dec $I19
    set $P11, rx201_cstack[$I19]
  rx201_cstack_done607:
    pop rx201_rep, rx201_bstack
    pop rx201_pos, rx201_bstack
    pop $I19, rx201_bstack
    lt rx201_pos, -1, rx201_done602
    lt rx201_pos, 0, rx201_fail604
    eq $I19, 0, rx201_fail604
    nqp_islist $I20, rx201_cstack
    unless $I20, rx201_jump605
    elements $I18, rx201_bstack
    le $I18, 0, rx201_cut606
    dec $I18
    set $I18, rx201_bstack[$I18]
  rx201_cut606:
    assign rx201_cstack, $I18
  rx201_jump605:
    jump $I19
  rx201_done602:
    rx201_cur."!cursor_fail"()
    .return (rx201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_46_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 183
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx204_tgt
    .local int rx204_pos
    .local int rx204_off
    .local int rx204_eos
    .local int rx204_rep
    .local pmc rx204_cur
    .local pmc rx204_curclass
    .local pmc rx204_bstack
    .local pmc rx204_cstack
    (rx204_cur, rx204_tgt, rx204_pos, rx204_curclass, rx204_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx204_cur
    length rx204_eos, rx204_tgt
    eq $I19, 1, rx204_restart614
    gt rx204_pos, rx204_eos, rx204_fail615
    repr_get_attr_int $I11, self, rx204_curclass, "$!from"
    ne $I11, -1, rxscan205_done621
    goto rxscan205_scan620
  rxscan205_loop619:
    inc rx204_pos
    gt rx204_pos, rx204_eos, rx204_fail615
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!from", rx204_pos
  rxscan205_scan620:
    nqp_rxmark rx204_bstack, rxscan205_loop619, rx204_pos, 0
  rxscan205_done621:
    add $I11, rx204_pos, 1
    gt $I11, rx204_eos, rx204_fail615
    substr $S10, rx204_tgt, rx204_pos, 1
    ne $S10, ucs4:"[", rx204_fail615
    add rx204_pos, 1
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail615
    nqp_rxmark rx204_bstack, rxsubrule206_pass622, -1, 0
  rxsubrule206_pass622:
    rx204_cstack = rx204_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    add $I11, rx204_pos, 1
    gt $I11, rx204_eos, rx204_fail615
    substr $S10, rx204_tgt, rx204_pos, 1
    ne $S10, ucs4:"]", rx204_fail615
    add rx204_pos, 1
    rx204_cur."!cursor_pass"(rx204_pos, "metachar:sym<[ ]>", 'backtrack'=>1)
    .return (rx204_cur)
  rx204_restart614:
    repr_get_attr_obj rx204_cstack, rx204_cur, rx204_curclass, "$!cstack"
  rx204_fail615:
    unless rx204_bstack, rx204_done613
    pop $I19, rx204_bstack
    if_null rx204_cstack, rx204_cstack_done618
    unless rx204_cstack, rx204_cstack_done618
    dec $I19
    set $P11, rx204_cstack[$I19]
  rx204_cstack_done618:
    pop rx204_rep, rx204_bstack
    pop rx204_pos, rx204_bstack
    pop $I19, rx204_bstack
    lt rx204_pos, -1, rx204_done613
    lt rx204_pos, 0, rx204_fail615
    eq $I19, 0, rx204_fail615
    nqp_islist $I20, rx204_cstack
    unless $I20, rx204_jump616
    elements $I18, rx204_bstack
    le $I18, 0, rx204_cut617
    dec $I18
    set $I18, rx204_bstack[$I18]
  rx204_cut617:
    assign rx204_cstack, $I18
  rx204_jump616:
    jump $I19
  rx204_done613:
    rx204_cur."!cursor_fail"()
    .return (rx204_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_47_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 184
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx207_tgt
    .local int rx207_pos
    .local int rx207_off
    .local int rx207_eos
    .local int rx207_rep
    .local pmc rx207_cur
    .local pmc rx207_curclass
    .local pmc rx207_bstack
    .local pmc rx207_cstack
    (rx207_cur, rx207_tgt, rx207_pos, rx207_curclass, rx207_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx207_cur
    length rx207_eos, rx207_tgt
    eq $I19, 1, rx207_restart625
    gt rx207_pos, rx207_eos, rx207_fail626
    repr_get_attr_int $I11, self, rx207_curclass, "$!from"
    ne $I11, -1, rxscan208_done632
    goto rxscan208_scan631
  rxscan208_loop630:
    inc rx207_pos
    gt rx207_pos, rx207_eos, rx207_fail626
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!from", rx207_pos
  rxscan208_scan631:
    nqp_rxmark rx207_bstack, rxscan208_loop630, rx207_pos, 0
  rxscan208_done632:
    add $I11, rx207_pos, 1
    gt $I11, rx207_eos, rx207_fail626
    substr $S10, rx207_tgt, rx207_pos, 1
    ne $S10, ucs4:"(", rx207_fail626
    add rx207_pos, 1
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!pos", rx207_pos
    $P11 = rx207_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx207_curclass, "$!pos"
    lt $I11, 0, rx207_fail626
    nqp_rxmark rx207_bstack, rxsubrule209_pass633, -1, 0
  rxsubrule209_pass633:
    rx207_cstack = rx207_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx207_pos, $P11, rx207_curclass, "$!pos"
    add $I11, rx207_pos, 1
    gt $I11, rx207_eos, rx207_fail626
    substr $S10, rx207_tgt, rx207_pos, 1
    ne $S10, ucs4:")", rx207_fail626
    add rx207_pos, 1
    rx207_cur."!cursor_pass"(rx207_pos, "metachar:sym<( )>", 'backtrack'=>1)
    .return (rx207_cur)
  rx207_restart625:
    repr_get_attr_obj rx207_cstack, rx207_cur, rx207_curclass, "$!cstack"
  rx207_fail626:
    unless rx207_bstack, rx207_done624
    pop $I19, rx207_bstack
    if_null rx207_cstack, rx207_cstack_done629
    unless rx207_cstack, rx207_cstack_done629
    dec $I19
    set $P11, rx207_cstack[$I19]
  rx207_cstack_done629:
    pop rx207_rep, rx207_bstack
    pop rx207_pos, rx207_bstack
    pop $I19, rx207_bstack
    lt rx207_pos, -1, rx207_done624
    lt rx207_pos, 0, rx207_fail626
    eq $I19, 0, rx207_fail626
    nqp_islist $I20, rx207_cstack
    unless $I20, rx207_jump627
    elements $I18, rx207_bstack
    le $I18, 0, rx207_cut628
    dec $I18
    set $I18, rx207_bstack[$I18]
  rx207_cut628:
    assign rx207_cstack, $I18
  rx207_jump627:
    jump $I19
  rx207_done624:
    rx207_cur."!cursor_fail"()
    .return (rx207_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_48_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 185
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx210_tgt
    .local int rx210_pos
    .local int rx210_off
    .local int rx210_eos
    .local int rx210_rep
    .local pmc rx210_cur
    .local pmc rx210_curclass
    .local pmc rx210_bstack
    .local pmc rx210_cstack
    (rx210_cur, rx210_tgt, rx210_pos, rx210_curclass, rx210_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx210_cur
    length rx210_eos, rx210_tgt
    eq $I19, 1, rx210_restart636
    gt rx210_pos, rx210_eos, rx210_fail637
    repr_get_attr_int $I11, self, rx210_curclass, "$!from"
    ne $I11, -1, rxscan211_done643
    goto rxscan211_scan642
  rxscan211_loop641:
    inc rx210_pos
    gt rx210_pos, rx210_eos, rx210_fail637
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!from", rx210_pos
  rxscan211_scan642:
    nqp_rxmark rx210_bstack, rxscan211_loop641, rx210_pos, 0
  rxscan211_done643:
    ge rx210_pos, rx210_eos, rx210_fail637
    substr $S11, rx210_tgt, rx210_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx210_fail637
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!pos", rx210_pos
    $P11 = rx210_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx210_curclass, "$!pos"
    lt $I11, 0, rx210_fail637
    nqp_rxmark rx210_bstack, rxsubrule212_pass644, -1, 0
  rxsubrule212_pass644:
    rx210_cstack = rx210_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx210_pos, $P11, rx210_curclass, "$!pos"
    rx210_cur."!cursor_pass"(rx210_pos, "metachar:sym<'>", 'backtrack'=>1)
    .return (rx210_cur)
  rx210_restart636:
    repr_get_attr_obj rx210_cstack, rx210_cur, rx210_curclass, "$!cstack"
  rx210_fail637:
    unless rx210_bstack, rx210_done635
    pop $I19, rx210_bstack
    if_null rx210_cstack, rx210_cstack_done640
    unless rx210_cstack, rx210_cstack_done640
    dec $I19
    set $P11, rx210_cstack[$I19]
  rx210_cstack_done640:
    pop rx210_rep, rx210_bstack
    pop rx210_pos, rx210_bstack
    pop $I19, rx210_bstack
    lt rx210_pos, -1, rx210_done635
    lt rx210_pos, 0, rx210_fail637
    eq $I19, 0, rx210_fail637
    nqp_islist $I20, rx210_cstack
    unless $I20, rx210_jump638
    elements $I18, rx210_bstack
    le $I18, 0, rx210_cut639
    dec $I18
    set $I18, rx210_bstack[$I18]
  rx210_cut639:
    assign rx210_cstack, $I18
  rx210_jump638:
    jump $I19
  rx210_done635:
    rx210_cur."!cursor_fail"()
    .return (rx210_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_49_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 186
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart647
    gt rx213_pos, rx213_eos, rx213_fail648
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done654
    goto rxscan214_scan653
  rxscan214_loop652:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail648
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan653:
    nqp_rxmark rx213_bstack, rxscan214_loop652, rx213_pos, 0
  rxscan214_done654:
    ge rx213_pos, rx213_eos, rx213_fail648
    substr $S11, rx213_tgt, rx213_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx213_fail648
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail648
    nqp_rxmark rx213_bstack, rxsubrule215_pass655, -1, 0
  rxsubrule215_pass655:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    rx213_cur."!cursor_pass"(rx213_pos, "metachar:sym<\">", 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart647:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail648:
    unless rx213_bstack, rx213_done646
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done651
    unless rx213_cstack, rx213_cstack_done651
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done651:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done646
    lt rx213_pos, 0, rx213_fail648
    eq $I19, 0, rx213_fail648
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump649
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut650
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut650:
    assign rx213_cstack, $I18
  rx213_jump649:
    jump $I19
  rx213_done646:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_50_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 187
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx216_tgt
    .local int rx216_pos
    .local int rx216_off
    .local int rx216_eos
    .local int rx216_rep
    .local pmc rx216_cur
    .local pmc rx216_curclass
    .local pmc rx216_bstack
    .local pmc rx216_cstack
    (rx216_cur, rx216_tgt, rx216_pos, rx216_curclass, rx216_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx216_cur
    length rx216_eos, rx216_tgt
    eq $I19, 1, rx216_restart658
    gt rx216_pos, rx216_eos, rx216_fail659
    repr_get_attr_int $I11, self, rx216_curclass, "$!from"
    ne $I11, -1, rxscan217_done665
    goto rxscan217_scan664
  rxscan217_loop663:
    inc rx216_pos
    gt rx216_pos, rx216_eos, rx216_fail659
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!from", rx216_pos
  rxscan217_scan664:
    nqp_rxmark rx216_bstack, rxscan217_loop663, rx216_pos, 0
  rxscan217_done665:
    nqp_rxmark rx216_bstack, rxcap218_fail667, rx216_pos, 0
    add $I11, rx216_pos, 1
    gt $I11, rx216_eos, rx216_fail659
    substr $S10, rx216_tgt, rx216_pos, 1
    ne $S10, ucs4:".", rx216_fail659
    add rx216_pos, 1
    nqp_rxpeek $I19, rx216_bstack, rxcap218_fail667
    inc $I19
    set $I11, rx216_bstack[$I19]
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx216_pos)
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "sym")
    goto rxcap218_done666
  rxcap218_fail667:
    goto rx216_fail659
  rxcap218_done666:
    rx216_cur."!cursor_pass"(rx216_pos, "metachar:sym<.>", 'backtrack'=>1)
    .return (rx216_cur)
  rx216_restart658:
    repr_get_attr_obj rx216_cstack, rx216_cur, rx216_curclass, "$!cstack"
  rx216_fail659:
    unless rx216_bstack, rx216_done657
    pop $I19, rx216_bstack
    if_null rx216_cstack, rx216_cstack_done662
    unless rx216_cstack, rx216_cstack_done662
    dec $I19
    set $P11, rx216_cstack[$I19]
  rx216_cstack_done662:
    pop rx216_rep, rx216_bstack
    pop rx216_pos, rx216_bstack
    pop $I19, rx216_bstack
    lt rx216_pos, -1, rx216_done657
    lt rx216_pos, 0, rx216_fail659
    eq $I19, 0, rx216_fail659
    nqp_islist $I20, rx216_cstack
    unless $I20, rx216_jump660
    elements $I18, rx216_bstack
    le $I18, 0, rx216_cut661
    dec $I18
    set $I18, rx216_bstack[$I18]
  rx216_cut661:
    assign rx216_cstack, $I18
  rx216_jump660:
    jump $I19
  rx216_done657:
    rx216_cur."!cursor_fail"()
    .return (rx216_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_51_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx219_tgt
    .local int rx219_pos
    .local int rx219_off
    .local int rx219_eos
    .local int rx219_rep
    .local pmc rx219_cur
    .local pmc rx219_curclass
    .local pmc rx219_bstack
    .local pmc rx219_cstack
    (rx219_cur, rx219_tgt, rx219_pos, rx219_curclass, rx219_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx219_cur
    length rx219_eos, rx219_tgt
    eq $I19, 1, rx219_restart670
    gt rx219_pos, rx219_eos, rx219_fail671
    repr_get_attr_int $I11, self, rx219_curclass, "$!from"
    ne $I11, -1, rxscan220_done677
    goto rxscan220_scan676
  rxscan220_loop675:
    inc rx219_pos
    gt rx219_pos, rx219_eos, rx219_fail671
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!from", rx219_pos
  rxscan220_scan676:
    nqp_rxmark rx219_bstack, rxscan220_loop675, rx219_pos, 0
  rxscan220_done677:
    nqp_rxmark rx219_bstack, rxcap221_fail679, rx219_pos, 0
    add $I11, rx219_pos, 1
    gt $I11, rx219_eos, rx219_fail671
    substr $S10, rx219_tgt, rx219_pos, 1
    ne $S10, ucs4:"^", rx219_fail671
    add rx219_pos, 1
    nqp_rxpeek $I19, rx219_bstack, rxcap221_fail679
    inc $I19
    set $I11, rx219_bstack[$I19]
    repr_bind_attr_int rx219_cur, rx219_curclass, "$!pos", rx219_pos
    $P11 = rx219_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx219_pos)
    rx219_cstack = rx219_cur."!cursor_capture"($P11, "sym")
    goto rxcap221_done678
  rxcap221_fail679:
    goto rx219_fail671
  rxcap221_done678:
    rx219_cur."!cursor_pass"(rx219_pos, "metachar:sym<^>", 'backtrack'=>1)
    .return (rx219_cur)
  rx219_restart670:
    repr_get_attr_obj rx219_cstack, rx219_cur, rx219_curclass, "$!cstack"
  rx219_fail671:
    unless rx219_bstack, rx219_done669
    pop $I19, rx219_bstack
    if_null rx219_cstack, rx219_cstack_done674
    unless rx219_cstack, rx219_cstack_done674
    dec $I19
    set $P11, rx219_cstack[$I19]
  rx219_cstack_done674:
    pop rx219_rep, rx219_bstack
    pop rx219_pos, rx219_bstack
    pop $I19, rx219_bstack
    lt rx219_pos, -1, rx219_done669
    lt rx219_pos, 0, rx219_fail671
    eq $I19, 0, rx219_fail671
    nqp_islist $I20, rx219_cstack
    unless $I20, rx219_jump672
    elements $I18, rx219_bstack
    le $I18, 0, rx219_cut673
    dec $I18
    set $I18, rx219_bstack[$I18]
  rx219_cut673:
    assign rx219_cstack, $I18
  rx219_jump672:
    jump $I19
  rx219_done669:
    rx219_cur."!cursor_fail"()
    .return (rx219_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_52_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 189
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx222_tgt
    .local int rx222_pos
    .local int rx222_off
    .local int rx222_eos
    .local int rx222_rep
    .local pmc rx222_cur
    .local pmc rx222_curclass
    .local pmc rx222_bstack
    .local pmc rx222_cstack
    (rx222_cur, rx222_tgt, rx222_pos, rx222_curclass, rx222_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx222_cur
    length rx222_eos, rx222_tgt
    eq $I19, 1, rx222_restart682
    gt rx222_pos, rx222_eos, rx222_fail683
    repr_get_attr_int $I11, self, rx222_curclass, "$!from"
    ne $I11, -1, rxscan223_done689
    goto rxscan223_scan688
  rxscan223_loop687:
    inc rx222_pos
    gt rx222_pos, rx222_eos, rx222_fail683
    repr_bind_attr_int rx222_cur, rx222_curclass, "$!from", rx222_pos
  rxscan223_scan688:
    nqp_rxmark rx222_bstack, rxscan223_loop687, rx222_pos, 0
  rxscan223_done689:
    nqp_rxmark rx222_bstack, rxcap224_fail691, rx222_pos, 0
    add $I11, rx222_pos, 2
    gt $I11, rx222_eos, rx222_fail683
    substr $S10, rx222_tgt, rx222_pos, 2
    ne $S10, ucs4:"^^", rx222_fail683
    add rx222_pos, 2
    nqp_rxpeek $I19, rx222_bstack, rxcap224_fail691
    inc $I19
    set $I11, rx222_bstack[$I19]
    repr_bind_attr_int rx222_cur, rx222_curclass, "$!pos", rx222_pos
    $P11 = rx222_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx222_pos)
    rx222_cstack = rx222_cur."!cursor_capture"($P11, "sym")
    goto rxcap224_done690
  rxcap224_fail691:
    goto rx222_fail683
  rxcap224_done690:
    rx222_cur."!cursor_pass"(rx222_pos, "metachar:sym<^^>", 'backtrack'=>1)
    .return (rx222_cur)
  rx222_restart682:
    repr_get_attr_obj rx222_cstack, rx222_cur, rx222_curclass, "$!cstack"
  rx222_fail683:
    unless rx222_bstack, rx222_done681
    pop $I19, rx222_bstack
    if_null rx222_cstack, rx222_cstack_done686
    unless rx222_cstack, rx222_cstack_done686
    dec $I19
    set $P11, rx222_cstack[$I19]
  rx222_cstack_done686:
    pop rx222_rep, rx222_bstack
    pop rx222_pos, rx222_bstack
    pop $I19, rx222_bstack
    lt rx222_pos, -1, rx222_done681
    lt rx222_pos, 0, rx222_fail683
    eq $I19, 0, rx222_fail683
    nqp_islist $I20, rx222_cstack
    unless $I20, rx222_jump684
    elements $I18, rx222_bstack
    le $I18, 0, rx222_cut685
    dec $I18
    set $I18, rx222_bstack[$I18]
  rx222_cut685:
    assign rx222_cstack, $I18
  rx222_jump684:
    jump $I19
  rx222_done681:
    rx222_cur."!cursor_fail"()
    .return (rx222_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_53_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 190
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx225_tgt
    .local int rx225_pos
    .local int rx225_off
    .local int rx225_eos
    .local int rx225_rep
    .local pmc rx225_cur
    .local pmc rx225_curclass
    .local pmc rx225_bstack
    .local pmc rx225_cstack
    (rx225_cur, rx225_tgt, rx225_pos, rx225_curclass, rx225_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx225_cur
    length rx225_eos, rx225_tgt
    eq $I19, 1, rx225_restart694
    gt rx225_pos, rx225_eos, rx225_fail695
    repr_get_attr_int $I11, self, rx225_curclass, "$!from"
    ne $I11, -1, rxscan226_done701
    goto rxscan226_scan700
  rxscan226_loop699:
    inc rx225_pos
    gt rx225_pos, rx225_eos, rx225_fail695
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!from", rx225_pos
  rxscan226_scan700:
    nqp_rxmark rx225_bstack, rxscan226_loop699, rx225_pos, 0
  rxscan226_done701:
    nqp_rxmark rx225_bstack, rxcap227_fail703, rx225_pos, 0
    add $I11, rx225_pos, 1
    gt $I11, rx225_eos, rx225_fail695
    substr $S10, rx225_tgt, rx225_pos, 1
    ne $S10, ucs4:"$", rx225_fail695
    add rx225_pos, 1
    nqp_rxpeek $I19, rx225_bstack, rxcap227_fail703
    inc $I19
    set $I11, rx225_bstack[$I19]
    repr_bind_attr_int rx225_cur, rx225_curclass, "$!pos", rx225_pos
    $P11 = rx225_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx225_pos)
    rx225_cstack = rx225_cur."!cursor_capture"($P11, "sym")
    goto rxcap227_done702
  rxcap227_fail703:
    goto rx225_fail695
  rxcap227_done702:
    rx225_cur."!cursor_pass"(rx225_pos, "metachar:sym<$>", 'backtrack'=>1)
    .return (rx225_cur)
  rx225_restart694:
    repr_get_attr_obj rx225_cstack, rx225_cur, rx225_curclass, "$!cstack"
  rx225_fail695:
    unless rx225_bstack, rx225_done693
    pop $I19, rx225_bstack
    if_null rx225_cstack, rx225_cstack_done698
    unless rx225_cstack, rx225_cstack_done698
    dec $I19
    set $P11, rx225_cstack[$I19]
  rx225_cstack_done698:
    pop rx225_rep, rx225_bstack
    pop rx225_pos, rx225_bstack
    pop $I19, rx225_bstack
    lt rx225_pos, -1, rx225_done693
    lt rx225_pos, 0, rx225_fail695
    eq $I19, 0, rx225_fail695
    nqp_islist $I20, rx225_cstack
    unless $I20, rx225_jump696
    elements $I18, rx225_bstack
    le $I18, 0, rx225_cut697
    dec $I18
    set $I18, rx225_bstack[$I18]
  rx225_cut697:
    assign rx225_cstack, $I18
  rx225_jump696:
    jump $I19
  rx225_done693:
    rx225_cur."!cursor_fail"()
    .return (rx225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_54_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 191
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    (rx228_cur, rx228_tgt, rx228_pos, rx228_curclass, rx228_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart706
    gt rx228_pos, rx228_eos, rx228_fail707
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done713
    goto rxscan229_scan712
  rxscan229_loop711:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail707
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan712:
    nqp_rxmark rx228_bstack, rxscan229_loop711, rx228_pos, 0
  rxscan229_done713:
    nqp_rxmark rx228_bstack, rxcap230_fail715, rx228_pos, 0
    add $I11, rx228_pos, 2
    gt $I11, rx228_eos, rx228_fail707
    substr $S10, rx228_tgt, rx228_pos, 2
    ne $S10, ucs4:"$$", rx228_fail707
    add rx228_pos, 2
    nqp_rxpeek $I19, rx228_bstack, rxcap230_fail715
    inc $I19
    set $I11, rx228_bstack[$I19]
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx228_pos)
    rx228_cstack = rx228_cur."!cursor_capture"($P11, "sym")
    goto rxcap230_done714
  rxcap230_fail715:
    goto rx228_fail707
  rxcap230_done714:
    rx228_cur."!cursor_pass"(rx228_pos, "metachar:sym<$$>", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart706:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail707:
    unless rx228_bstack, rx228_done705
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done710
    unless rx228_cstack, rx228_cstack_done710
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done710:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done705
    lt rx228_pos, 0, rx228_fail707
    eq $I19, 0, rx228_fail707
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump708
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut709
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut709:
    assign rx228_cstack, $I18
  rx228_jump708:
    jump $I19
  rx228_done705:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:::>" :subid("cuid_55_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx231_tgt
    .local int rx231_pos
    .local int rx231_off
    .local int rx231_eos
    .local int rx231_rep
    .local pmc rx231_cur
    .local pmc rx231_curclass
    .local pmc rx231_bstack
    .local pmc rx231_cstack
    (rx231_cur, rx231_tgt, rx231_pos, rx231_curclass, rx231_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx231_cur
    length rx231_eos, rx231_tgt
    eq $I19, 1, rx231_restart718
    gt rx231_pos, rx231_eos, rx231_fail719
    repr_get_attr_int $I11, self, rx231_curclass, "$!from"
    ne $I11, -1, rxscan232_done725
    goto rxscan232_scan724
  rxscan232_loop723:
    inc rx231_pos
    gt rx231_pos, rx231_eos, rx231_fail719
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!from", rx231_pos
  rxscan232_scan724:
    nqp_rxmark rx231_bstack, rxscan232_loop723, rx231_pos, 0
  rxscan232_done725:
    nqp_rxmark rx231_bstack, rxcap233_fail727, rx231_pos, 0
    add $I11, rx231_pos, 3
    gt $I11, rx231_eos, rx231_fail719
    substr $S10, rx231_tgt, rx231_pos, 3
    ne $S10, ucs4:":::", rx231_fail719
    add rx231_pos, 3
    nqp_rxpeek $I19, rx231_bstack, rxcap233_fail727
    inc $I19
    set $I11, rx231_bstack[$I19]
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx231_pos)
    rx231_cstack = rx231_cur."!cursor_capture"($P11, "sym")
    goto rxcap233_done726
  rxcap233_fail727:
    goto rx231_fail719
  rxcap233_done726:
    repr_bind_attr_int rx231_cur, rx231_curclass, "$!pos", rx231_pos
    $P11 = rx231_cur."panic"("::: not yet implemented")
    repr_get_attr_int $I11, $P11, rx231_curclass, "$!pos"
    lt $I11, 0, rx231_fail719
    repr_get_attr_int rx231_pos, $P11, rx231_curclass, "$!pos"
    rx231_cur."!cursor_pass"(rx231_pos, "metachar:sym<:::>", 'backtrack'=>1)
    .return (rx231_cur)
  rx231_restart718:
    repr_get_attr_obj rx231_cstack, rx231_cur, rx231_curclass, "$!cstack"
  rx231_fail719:
    unless rx231_bstack, rx231_done717
    pop $I19, rx231_bstack
    if_null rx231_cstack, rx231_cstack_done722
    unless rx231_cstack, rx231_cstack_done722
    dec $I19
    set $P11, rx231_cstack[$I19]
  rx231_cstack_done722:
    pop rx231_rep, rx231_bstack
    pop rx231_pos, rx231_bstack
    pop $I19, rx231_bstack
    lt rx231_pos, -1, rx231_done717
    lt rx231_pos, 0, rx231_fail719
    eq $I19, 0, rx231_fail719
    nqp_islist $I20, rx231_cstack
    unless $I20, rx231_jump720
    elements $I18, rx231_bstack
    le $I18, 0, rx231_cut721
    dec $I18
    set $I18, rx231_bstack[$I18]
  rx231_cut721:
    assign rx231_cstack, $I18
  rx231_jump720:
    jump $I19
  rx231_done717:
    rx231_cur."!cursor_fail"()
    .return (rx231_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<::>" :subid("cuid_56_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 193
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx235_tgt
    .local int rx235_pos
    .local int rx235_off
    .local int rx235_eos
    .local int rx235_rep
    .local pmc rx235_cur
    .local pmc rx235_curclass
    .local pmc rx235_bstack
    .local pmc rx235_cstack
    (rx235_cur, rx235_tgt, rx235_pos, rx235_curclass, rx235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx235_cur
    length rx235_eos, rx235_tgt
    eq $I19, 1, rx235_restart731
    gt rx235_pos, rx235_eos, rx235_fail732
    repr_get_attr_int $I11, self, rx235_curclass, "$!from"
    ne $I11, -1, rxscan236_done738
    goto rxscan236_scan737
  rxscan236_loop736:
    inc rx235_pos
    gt rx235_pos, rx235_eos, rx235_fail732
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!from", rx235_pos
  rxscan236_scan737:
    nqp_rxmark rx235_bstack, rxscan236_loop736, rx235_pos, 0
  rxscan236_done738:
    nqp_rxmark rx235_bstack, rxcap237_fail740, rx235_pos, 0
    add $I11, rx235_pos, 2
    gt $I11, rx235_eos, rx235_fail732
    substr $S10, rx235_tgt, rx235_pos, 2
    ne $S10, ucs4:"::", rx235_fail732
    add rx235_pos, 2
    nqp_rxpeek $I19, rx235_bstack, rxcap237_fail740
    inc $I19
    set $I11, rx235_bstack[$I19]
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx235_pos)
    rx235_cstack = rx235_cur."!cursor_capture"($P11, "sym")
    goto rxcap237_done739
  rxcap237_fail740:
    goto rx235_fail732
  rxcap237_done739:
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."panic"(":: not yet implemented")
    repr_get_attr_int $I11, $P11, rx235_curclass, "$!pos"
    lt $I11, 0, rx235_fail732
    repr_get_attr_int rx235_pos, $P11, rx235_curclass, "$!pos"
    rx235_cur."!cursor_pass"(rx235_pos, "metachar:sym<::>", 'backtrack'=>1)
    .return (rx235_cur)
  rx235_restart731:
    repr_get_attr_obj rx235_cstack, rx235_cur, rx235_curclass, "$!cstack"
  rx235_fail732:
    unless rx235_bstack, rx235_done730
    pop $I19, rx235_bstack
    if_null rx235_cstack, rx235_cstack_done735
    unless rx235_cstack, rx235_cstack_done735
    dec $I19
    set $P11, rx235_cstack[$I19]
  rx235_cstack_done735:
    pop rx235_rep, rx235_bstack
    pop rx235_pos, rx235_bstack
    pop $I19, rx235_bstack
    lt rx235_pos, -1, rx235_done730
    lt rx235_pos, 0, rx235_fail732
    eq $I19, 0, rx235_fail732
    nqp_islist $I20, rx235_cstack
    unless $I20, rx235_jump733
    elements $I18, rx235_bstack
    le $I18, 0, rx235_cut734
    dec $I18
    set $I18, rx235_bstack[$I18]
  rx235_cut734:
    assign rx235_cstack, $I18
  rx235_jump733:
    jump $I19
  rx235_done730:
    rx235_cur."!cursor_fail"()
    .return (rx235_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_57_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 194
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx239_tgt
    .local int rx239_pos
    .local int rx239_off
    .local int rx239_eos
    .local int rx239_rep
    .local pmc rx239_cur
    .local pmc rx239_curclass
    .local pmc rx239_bstack
    .local pmc rx239_cstack
    (rx239_cur, rx239_tgt, rx239_pos, rx239_curclass, rx239_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx239_cur
    length rx239_eos, rx239_tgt
    eq $I19, 1, rx239_restart744
    gt rx239_pos, rx239_eos, rx239_fail745
    repr_get_attr_int $I11, self, rx239_curclass, "$!from"
    ne $I11, -1, rxscan240_done751
    goto rxscan240_scan750
  rxscan240_loop749:
    inc rx239_pos
    gt rx239_pos, rx239_eos, rx239_fail745
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!from", rx239_pos
  rxscan240_scan750:
    nqp_rxmark rx239_bstack, rxscan240_loop749, rx239_pos, 0
  rxscan240_done751:
    nqp_rxmark rx239_bstack, rxcap241_fail753, rx239_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt242_0755
    nqp_push_label $P11, alt242_1756
    nqp_rxmark rx239_bstack, alt242_end754, -1, 0
    rx239_cur."!alt"(rx239_pos, "alt_nfa__10_1356803022.20777", $P11)
    goto rx239_fail745
  alt242_0755:
    add $I11, rx239_pos, 2
    gt $I11, rx239_eos, rx239_fail745
    substr $S10, rx239_tgt, rx239_pos, 2
    ne $S10, ucs4:"<<", rx239_fail745
    add rx239_pos, 2
    goto alt242_end754
  alt242_1756:
    add $I11, rx239_pos, 1
    gt $I11, rx239_eos, rx239_fail745
    substr $S10, rx239_tgt, rx239_pos, 1
    ne $S10, ucs4:"\x{ab}", rx239_fail745
    add rx239_pos, 1
    goto alt242_end754
  alt242_end754:
    nqp_rxcommit rx239_bstack, alt242_end754
    nqp_rxpeek $I19, rx239_bstack, rxcap241_fail753
    inc $I19
    set $I11, rx239_bstack[$I19]
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx239_pos)
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "sym")
    goto rxcap241_done752
  rxcap241_fail753:
    goto rx239_fail745
  rxcap241_done752:
    rx239_cur."!cursor_pass"(rx239_pos, "metachar:sym<lwb>", 'backtrack'=>1)
    .return (rx239_cur)
  rx239_restart744:
    repr_get_attr_obj rx239_cstack, rx239_cur, rx239_curclass, "$!cstack"
  rx239_fail745:
    unless rx239_bstack, rx239_done743
    pop $I19, rx239_bstack
    if_null rx239_cstack, rx239_cstack_done748
    unless rx239_cstack, rx239_cstack_done748
    dec $I19
    set $P11, rx239_cstack[$I19]
  rx239_cstack_done748:
    pop rx239_rep, rx239_bstack
    pop rx239_pos, rx239_bstack
    pop $I19, rx239_bstack
    lt rx239_pos, -1, rx239_done743
    lt rx239_pos, 0, rx239_fail745
    eq $I19, 0, rx239_fail745
    nqp_islist $I20, rx239_cstack
    unless $I20, rx239_jump746
    elements $I18, rx239_bstack
    le $I18, 0, rx239_cut747
    dec $I18
    set $I18, rx239_bstack[$I18]
  rx239_cut747:
    assign rx239_cstack, $I18
  rx239_jump746:
    jump $I19
  rx239_done743:
    rx239_cur."!cursor_fail"()
    .return (rx239_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_58_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 195
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx243_tgt
    .local int rx243_pos
    .local int rx243_off
    .local int rx243_eos
    .local int rx243_rep
    .local pmc rx243_cur
    .local pmc rx243_curclass
    .local pmc rx243_bstack
    .local pmc rx243_cstack
    (rx243_cur, rx243_tgt, rx243_pos, rx243_curclass, rx243_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx243_cur
    length rx243_eos, rx243_tgt
    eq $I19, 1, rx243_restart759
    gt rx243_pos, rx243_eos, rx243_fail760
    repr_get_attr_int $I11, self, rx243_curclass, "$!from"
    ne $I11, -1, rxscan244_done766
    goto rxscan244_scan765
  rxscan244_loop764:
    inc rx243_pos
    gt rx243_pos, rx243_eos, rx243_fail760
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!from", rx243_pos
  rxscan244_scan765:
    nqp_rxmark rx243_bstack, rxscan244_loop764, rx243_pos, 0
  rxscan244_done766:
    nqp_rxmark rx243_bstack, rxcap245_fail768, rx243_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt246_0770
    nqp_push_label $P11, alt246_1771
    nqp_rxmark rx243_bstack, alt246_end769, -1, 0
    rx243_cur."!alt"(rx243_pos, "alt_nfa__11_1356803022.2157", $P11)
    goto rx243_fail760
  alt246_0770:
    add $I11, rx243_pos, 2
    gt $I11, rx243_eos, rx243_fail760
    substr $S10, rx243_tgt, rx243_pos, 2
    ne $S10, ucs4:">>", rx243_fail760
    add rx243_pos, 2
    goto alt246_end769
  alt246_1771:
    add $I11, rx243_pos, 1
    gt $I11, rx243_eos, rx243_fail760
    substr $S10, rx243_tgt, rx243_pos, 1
    ne $S10, ucs4:"\x{bb}", rx243_fail760
    add rx243_pos, 1
    goto alt246_end769
  alt246_end769:
    nqp_rxcommit rx243_bstack, alt246_end769
    nqp_rxpeek $I19, rx243_bstack, rxcap245_fail768
    inc $I19
    set $I11, rx243_bstack[$I19]
    repr_bind_attr_int rx243_cur, rx243_curclass, "$!pos", rx243_pos
    $P11 = rx243_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx243_pos)
    rx243_cstack = rx243_cur."!cursor_capture"($P11, "sym")
    goto rxcap245_done767
  rxcap245_fail768:
    goto rx243_fail760
  rxcap245_done767:
    rx243_cur."!cursor_pass"(rx243_pos, "metachar:sym<rwb>", 'backtrack'=>1)
    .return (rx243_cur)
  rx243_restart759:
    repr_get_attr_obj rx243_cstack, rx243_cur, rx243_curclass, "$!cstack"
  rx243_fail760:
    unless rx243_bstack, rx243_done758
    pop $I19, rx243_bstack
    if_null rx243_cstack, rx243_cstack_done763
    unless rx243_cstack, rx243_cstack_done763
    dec $I19
    set $P11, rx243_cstack[$I19]
  rx243_cstack_done763:
    pop rx243_rep, rx243_bstack
    pop rx243_pos, rx243_bstack
    pop $I19, rx243_bstack
    lt rx243_pos, -1, rx243_done758
    lt rx243_pos, 0, rx243_fail760
    eq $I19, 0, rx243_fail760
    nqp_islist $I20, rx243_cstack
    unless $I20, rx243_jump761
    elements $I18, rx243_bstack
    le $I18, 0, rx243_cut762
    dec $I18
    set $I18, rx243_bstack[$I18]
  rx243_cut762:
    assign rx243_cstack, $I18
  rx243_jump761:
    jump $I19
  rx243_done758:
    rx243_cur."!cursor_fail"()
    .return (rx243_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_59_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 196
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx247_tgt
    .local int rx247_pos
    .local int rx247_off
    .local int rx247_eos
    .local int rx247_rep
    .local pmc rx247_cur
    .local pmc rx247_curclass
    .local pmc rx247_bstack
    .local pmc rx247_cstack
    (rx247_cur, rx247_tgt, rx247_pos, rx247_curclass, rx247_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx247_cur
    length rx247_eos, rx247_tgt
    eq $I19, 1, rx247_restart774
    gt rx247_pos, rx247_eos, rx247_fail775
    repr_get_attr_int $I11, self, rx247_curclass, "$!from"
    ne $I11, -1, rxscan248_done781
    goto rxscan248_scan780
  rxscan248_loop779:
    inc rx247_pos
    gt rx247_pos, rx247_eos, rx247_fail775
    repr_bind_attr_int rx247_cur, rx247_curclass, "$!from", rx247_pos
  rxscan248_scan780:
    nqp_rxmark rx247_bstack, rxscan248_loop779, rx247_pos, 0
  rxscan248_done781:
    add $I11, rx247_pos, 2
    gt $I11, rx247_eos, rx247_fail775
    substr $S10, rx247_tgt, rx247_pos, 2
    ne $S10, ucs4:"<(", rx247_fail775
    add rx247_pos, 2
    rx247_cur."!cursor_pass"(rx247_pos, "metachar:sym<from>", 'backtrack'=>1)
    .return (rx247_cur)
  rx247_restart774:
    repr_get_attr_obj rx247_cstack, rx247_cur, rx247_curclass, "$!cstack"
  rx247_fail775:
    unless rx247_bstack, rx247_done773
    pop $I19, rx247_bstack
    if_null rx247_cstack, rx247_cstack_done778
    unless rx247_cstack, rx247_cstack_done778
    dec $I19
    set $P11, rx247_cstack[$I19]
  rx247_cstack_done778:
    pop rx247_rep, rx247_bstack
    pop rx247_pos, rx247_bstack
    pop $I19, rx247_bstack
    lt rx247_pos, -1, rx247_done773
    lt rx247_pos, 0, rx247_fail775
    eq $I19, 0, rx247_fail775
    nqp_islist $I20, rx247_cstack
    unless $I20, rx247_jump776
    elements $I18, rx247_bstack
    le $I18, 0, rx247_cut777
    dec $I18
    set $I18, rx247_bstack[$I18]
  rx247_cut777:
    assign rx247_cstack, $I18
  rx247_jump776:
    jump $I19
  rx247_done773:
    rx247_cur."!cursor_fail"()
    .return (rx247_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_60_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 197
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx249_tgt
    .local int rx249_pos
    .local int rx249_off
    .local int rx249_eos
    .local int rx249_rep
    .local pmc rx249_cur
    .local pmc rx249_curclass
    .local pmc rx249_bstack
    .local pmc rx249_cstack
    (rx249_cur, rx249_tgt, rx249_pos, rx249_curclass, rx249_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx249_cur
    length rx249_eos, rx249_tgt
    eq $I19, 1, rx249_restart784
    gt rx249_pos, rx249_eos, rx249_fail785
    repr_get_attr_int $I11, self, rx249_curclass, "$!from"
    ne $I11, -1, rxscan250_done791
    goto rxscan250_scan790
  rxscan250_loop789:
    inc rx249_pos
    gt rx249_pos, rx249_eos, rx249_fail785
    repr_bind_attr_int rx249_cur, rx249_curclass, "$!from", rx249_pos
  rxscan250_scan790:
    nqp_rxmark rx249_bstack, rxscan250_loop789, rx249_pos, 0
  rxscan250_done791:
    add $I11, rx249_pos, 2
    gt $I11, rx249_eos, rx249_fail785
    substr $S10, rx249_tgt, rx249_pos, 2
    ne $S10, ucs4:")>", rx249_fail785
    add rx249_pos, 2
    rx249_cur."!cursor_pass"(rx249_pos, "metachar:sym<to>", 'backtrack'=>1)
    .return (rx249_cur)
  rx249_restart784:
    repr_get_attr_obj rx249_cstack, rx249_cur, rx249_curclass, "$!cstack"
  rx249_fail785:
    unless rx249_bstack, rx249_done783
    pop $I19, rx249_bstack
    if_null rx249_cstack, rx249_cstack_done788
    unless rx249_cstack, rx249_cstack_done788
    dec $I19
    set $P11, rx249_cstack[$I19]
  rx249_cstack_done788:
    pop rx249_rep, rx249_bstack
    pop rx249_pos, rx249_bstack
    pop $I19, rx249_bstack
    lt rx249_pos, -1, rx249_done783
    lt rx249_pos, 0, rx249_fail785
    eq $I19, 0, rx249_fail785
    nqp_islist $I20, rx249_cstack
    unless $I20, rx249_jump786
    elements $I18, rx249_bstack
    le $I18, 0, rx249_cut787
    dec $I18
    set $I18, rx249_bstack[$I18]
  rx249_cut787:
    assign rx249_cstack, $I18
  rx249_jump786:
    jump $I19
  rx249_done783:
    rx249_cur."!cursor_fail"()
    .return (rx249_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_61_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx251_tgt
    .local int rx251_pos
    .local int rx251_off
    .local int rx251_eos
    .local int rx251_rep
    .local pmc rx251_cur
    .local pmc rx251_curclass
    .local pmc rx251_bstack
    .local pmc rx251_cstack
    (rx251_cur, rx251_tgt, rx251_pos, rx251_curclass, rx251_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx251_cur
    length rx251_eos, rx251_tgt
    eq $I19, 1, rx251_restart794
    gt rx251_pos, rx251_eos, rx251_fail795
    repr_get_attr_int $I11, self, rx251_curclass, "$!from"
    ne $I11, -1, rxscan252_done801
    goto rxscan252_scan800
  rxscan252_loop799:
    inc rx251_pos
    gt rx251_pos, rx251_eos, rx251_fail795
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!from", rx251_pos
  rxscan252_scan800:
    nqp_rxmark rx251_bstack, rxscan252_loop799, rx251_pos, 0
  rxscan252_done801:
    add $I11, rx251_pos, 1
    gt $I11, rx251_eos, rx251_fail795
    substr $S10, rx251_tgt, rx251_pos, 1
    ne $S10, ucs4:"\\", rx251_fail795
    add rx251_pos, 1
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail795
    nqp_rxmark rx251_bstack, rxsubrule253_pass802, -1, 0
  rxsubrule253_pass802:
    rx251_cstack = rx251_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
    rx251_cur."!cursor_pass"(rx251_pos, "metachar:sym<bs>", 'backtrack'=>1)
    .return (rx251_cur)
  rx251_restart794:
    repr_get_attr_obj rx251_cstack, rx251_cur, rx251_curclass, "$!cstack"
  rx251_fail795:
    unless rx251_bstack, rx251_done793
    pop $I19, rx251_bstack
    if_null rx251_cstack, rx251_cstack_done798
    unless rx251_cstack, rx251_cstack_done798
    dec $I19
    set $P11, rx251_cstack[$I19]
  rx251_cstack_done798:
    pop rx251_rep, rx251_bstack
    pop rx251_pos, rx251_bstack
    pop $I19, rx251_bstack
    lt rx251_pos, -1, rx251_done793
    lt rx251_pos, 0, rx251_fail795
    eq $I19, 0, rx251_fail795
    nqp_islist $I20, rx251_cstack
    unless $I20, rx251_jump796
    elements $I18, rx251_bstack
    le $I18, 0, rx251_cut797
    dec $I18
    set $I18, rx251_bstack[$I18]
  rx251_cut797:
    assign rx251_cstack, $I18
  rx251_jump796:
    jump $I19
  rx251_done793:
    rx251_cur."!cursor_fail"()
    .return (rx251_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_62_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx254_tgt
    .local int rx254_pos
    .local int rx254_off
    .local int rx254_eos
    .local int rx254_rep
    .local pmc rx254_cur
    .local pmc rx254_curclass
    .local pmc rx254_bstack
    .local pmc rx254_cstack
    (rx254_cur, rx254_tgt, rx254_pos, rx254_curclass, rx254_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx254_cur
    length rx254_eos, rx254_tgt
    eq $I19, 1, rx254_restart805
    gt rx254_pos, rx254_eos, rx254_fail806
    repr_get_attr_int $I11, self, rx254_curclass, "$!from"
    ne $I11, -1, rxscan255_done812
    goto rxscan255_scan811
  rxscan255_loop810:
    inc rx254_pos
    gt rx254_pos, rx254_eos, rx254_fail806
    repr_bind_attr_int rx254_cur, rx254_curclass, "$!from", rx254_pos
  rxscan255_scan811:
    nqp_rxmark rx254_bstack, rxscan255_loop810, rx254_pos, 0
  rxscan255_done812:
    repr_bind_attr_int rx254_cur, rx254_curclass, "$!pos", rx254_pos
    $P11 = rx254_cur."mod_internal"()
    repr_get_attr_int $I11, $P11, rx254_curclass, "$!pos"
    lt $I11, 0, rx254_fail806
    nqp_rxmark rx254_bstack, rxsubrule256_pass813, -1, 0
  rxsubrule256_pass813:
    rx254_cstack = rx254_cur."!cursor_capture"($P11, "mod_internal")
    repr_get_attr_int rx254_pos, $P11, rx254_curclass, "$!pos"
    rx254_cur."!cursor_pass"(rx254_pos, "metachar:sym<mod>", 'backtrack'=>1)
    .return (rx254_cur)
  rx254_restart805:
    repr_get_attr_obj rx254_cstack, rx254_cur, rx254_curclass, "$!cstack"
  rx254_fail806:
    unless rx254_bstack, rx254_done804
    pop $I19, rx254_bstack
    if_null rx254_cstack, rx254_cstack_done809
    unless rx254_cstack, rx254_cstack_done809
    dec $I19
    set $P11, rx254_cstack[$I19]
  rx254_cstack_done809:
    pop rx254_rep, rx254_bstack
    pop rx254_pos, rx254_bstack
    pop $I19, rx254_bstack
    lt rx254_pos, -1, rx254_done804
    lt rx254_pos, 0, rx254_fail806
    eq $I19, 0, rx254_fail806
    nqp_islist $I20, rx254_cstack
    unless $I20, rx254_jump807
    elements $I18, rx254_bstack
    le $I18, 0, rx254_cut808
    dec $I18
    set $I18, rx254_bstack[$I18]
  rx254_cut808:
    assign rx254_cstack, $I18
  rx254_jump807:
    jump $I19
  rx254_done804:
    rx254_cur."!cursor_fail"()
    .return (rx254_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<quantifier>" :subid("cuid_63_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx257_tgt
    .local int rx257_pos
    .local int rx257_off
    .local int rx257_eos
    .local int rx257_rep
    .local pmc rx257_cur
    .local pmc rx257_curclass
    .local pmc rx257_bstack
    .local pmc rx257_cstack
    (rx257_cur, rx257_tgt, rx257_pos, rx257_curclass, rx257_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx257_cur
    length rx257_eos, rx257_tgt
    eq $I19, 1, rx257_restart816
    gt rx257_pos, rx257_eos, rx257_fail817
    repr_get_attr_int $I11, self, rx257_curclass, "$!from"
    ne $I11, -1, rxscan258_done823
    goto rxscan258_scan822
  rxscan258_loop821:
    inc rx257_pos
    gt rx257_pos, rx257_eos, rx257_fail817
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!from", rx257_pos
  rxscan258_scan822:
    nqp_rxmark rx257_bstack, rxscan258_loop821, rx257_pos, 0
  rxscan258_done823:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail817
    nqp_rxmark rx257_bstack, rxsubrule259_pass824, -1, 0
  rxsubrule259_pass824:
    rx257_cstack = rx257_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."panic"("Quantifier quantifies nothing")
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail817
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
    rx257_cur."!cursor_pass"(rx257_pos, "metachar:sym<quantifier>", 'backtrack'=>1)
    .return (rx257_cur)
  rx257_restart816:
    repr_get_attr_obj rx257_cstack, rx257_cur, rx257_curclass, "$!cstack"
  rx257_fail817:
    unless rx257_bstack, rx257_done815
    pop $I19, rx257_bstack
    if_null rx257_cstack, rx257_cstack_done820
    unless rx257_cstack, rx257_cstack_done820
    dec $I19
    set $P11, rx257_cstack[$I19]
  rx257_cstack_done820:
    pop rx257_rep, rx257_bstack
    pop rx257_pos, rx257_bstack
    pop $I19, rx257_bstack
    lt rx257_pos, -1, rx257_done815
    lt rx257_pos, 0, rx257_fail817
    eq $I19, 0, rx257_fail817
    nqp_islist $I20, rx257_cstack
    unless $I20, rx257_jump818
    elements $I18, rx257_bstack
    le $I18, 0, rx257_cut819
    dec $I18
    set $I18, rx257_bstack[$I18]
  rx257_cut819:
    assign rx257_cstack, $I18
  rx257_jump818:
    jump $I19
  rx257_done815:
    rx257_cur."!cursor_fail"()
    .return (rx257_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_64_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart828
    gt rx261_pos, rx261_eos, rx261_fail829
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done835
    goto rxscan262_scan834
  rxscan262_loop833:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail829
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan834:
    nqp_rxmark rx261_bstack, rxscan262_loop833, rx261_pos, 0
  rxscan262_done835:
    nqp_rxmark rx261_bstack, rxcap263_fail837, rx261_pos, 0
    add $I11, rx261_pos, 1
    gt $I11, rx261_eos, rx261_fail829
    substr $S10, rx261_tgt, rx261_pos, 1
    ne $S10, ucs4:"~", rx261_fail829
    add rx261_pos, 1
    nqp_rxpeek $I19, rx261_bstack, rxcap263_fail837
    inc $I19
    set $I11, rx261_bstack[$I19]
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx261_pos)
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "sym")
    goto rxcap263_done836
  rxcap263_fail837:
    goto rx261_fail829
  rxcap263_done836:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."ws"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail829
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail829
    nqp_rxmark rx261_bstack, rxsubrule265_pass839, -1, 0
  rxsubrule265_pass839:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "GOAL")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."ws"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail829
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail829
    nqp_rxmark rx261_bstack, rxsubrule267_pass841, -1, 0
  rxsubrule267_pass841:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    rx261_cur."!cursor_pass"(rx261_pos, "metachar:sym<~>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart828:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail829:
    unless rx261_bstack, rx261_done827
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done832
    unless rx261_cstack, rx261_cstack_done832
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done832:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done827
    lt rx261_pos, 0, rx261_fail829
    eq $I19, 0, rx261_fail829
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump830
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut831
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut831:
    assign rx261_cstack, $I18
  rx261_jump830:
    jump $I19
  rx261_done827:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{*}>" :subid("cuid_65_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 211
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx268_tgt
    .local int rx268_pos
    .local int rx268_off
    .local int rx268_eos
    .local int rx268_rep
    .local pmc rx268_cur
    .local pmc rx268_curclass
    .local pmc rx268_bstack
    .local pmc rx268_cstack
    (rx268_cur, rx268_tgt, rx268_pos, rx268_curclass, rx268_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx268_cur
    length rx268_eos, rx268_tgt
    eq $I19, 1, rx268_restart844
    gt rx268_pos, rx268_eos, rx268_fail845
    repr_get_attr_int $I11, self, rx268_curclass, "$!from"
    ne $I11, -1, rxscan269_done851
    goto rxscan269_scan850
  rxscan269_loop849:
    inc rx268_pos
    gt rx268_pos, rx268_eos, rx268_fail845
    repr_bind_attr_int rx268_cur, rx268_curclass, "$!from", rx268_pos
  rxscan269_scan850:
    nqp_rxmark rx268_bstack, rxscan269_loop849, rx268_pos, 0
  rxscan269_done851:
    nqp_rxmark rx268_bstack, rxcap270_fail853, rx268_pos, 0
    add $I11, rx268_pos, 3
    gt $I11, rx268_eos, rx268_fail845
    substr $S10, rx268_tgt, rx268_pos, 3
    ne $S10, ucs4:"{*}", rx268_fail845
    add rx268_pos, 3
    nqp_rxpeek $I19, rx268_bstack, rxcap270_fail853
    inc $I19
    set $I11, rx268_bstack[$I19]
    repr_bind_attr_int rx268_cur, rx268_curclass, "$!pos", rx268_pos
    $P11 = rx268_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx268_pos)
    rx268_cstack = rx268_cur."!cursor_capture"($P11, "sym")
    goto rxcap270_done852
  rxcap270_fail853:
    goto rx268_fail845
  rxcap270_done852:
    nqp_rxmark rx268_bstack, rxquantr271_done855, rx268_pos, 0
  rxquantr271_loop854:
    nqp_rxmark rx268_bstack, rxquantr272_done857, rx268_pos, 0
  rxquantr272_loop856:
    ge rx268_pos, rx268_eos, rx268_fail845
    substr $S11, rx268_tgt, rx268_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx268_fail845
    inc rx268_pos
    nqp_rxpeek $I19, rx268_bstack, rxquantr272_done857
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr272_done857
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr272_done857, rx268_pos, rx268_rep
    goto rxquantr272_loop856
  rxquantr272_done857:
    add $I11, rx268_pos, 3
    gt $I11, rx268_eos, rx268_fail845
    substr $S10, rx268_tgt, rx268_pos, 3
    ne $S10, ucs4:"#= ", rx268_fail845
    add rx268_pos, 3
    nqp_rxmark rx268_bstack, rxquantr273_done859, rx268_pos, 0
  rxquantr273_loop858:
    ge rx268_pos, rx268_eos, rx268_fail845
    substr $S11, rx268_tgt, rx268_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx268_fail845
    inc rx268_pos
    nqp_rxpeek $I19, rx268_bstack, rxquantr273_done859
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr273_done859
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr273_done859, rx268_pos, rx268_rep
    goto rxquantr273_loop858
  rxquantr273_done859:
    nqp_rxmark rx268_bstack, rxcap274_fail861, rx268_pos, 0
    nqp_rxmark rx268_bstack, rxquantr275_done863, -1, 0
  rxquantr275_loop862:
    ge rx268_pos, rx268_eos, rx268_fail845
    is_cclass $I11, .CCLASS_WHITESPACE, rx268_tgt, rx268_pos
    if $I11, rx268_fail845
    add rx268_pos, 1
    nqp_rxpeek $I19, rx268_bstack, rxquantr275_done863
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr275_done863
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr275_done863, rx268_pos, rx268_rep
    goto rxquantr275_loop862
  rxquantr275_done863:
    nqp_rxmark rx268_bstack, rxquantr276_done865, rx268_pos, 0
  rxquantr276_loop864:
    nqp_rxmark rx268_bstack, rxquantr277_done867, -1, 0
  rxquantr277_loop866:
    ge rx268_pos, rx268_eos, rx268_fail845
    substr $S11, rx268_tgt, rx268_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx268_fail845
    inc rx268_pos
    nqp_rxpeek $I19, rx268_bstack, rxquantr277_done867
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr277_done867
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr277_done867, rx268_pos, rx268_rep
    goto rxquantr277_loop866
  rxquantr277_done867:
    nqp_rxmark rx268_bstack, rxquantr278_done869, -1, 0
  rxquantr278_loop868:
    ge rx268_pos, rx268_eos, rx268_fail845
    is_cclass $I11, .CCLASS_WHITESPACE, rx268_tgt, rx268_pos
    if $I11, rx268_fail845
    add rx268_pos, 1
    nqp_rxpeek $I19, rx268_bstack, rxquantr278_done869
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr278_done869
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr278_done869, rx268_pos, rx268_rep
    goto rxquantr278_loop868
  rxquantr278_done869:
    nqp_rxpeek $I19, rx268_bstack, rxquantr276_done865
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr276_done865
    inc rx268_rep
    nqp_rxmark rx268_bstack, rxquantr276_done865, rx268_pos, rx268_rep
    goto rxquantr276_loop864
  rxquantr276_done865:
    nqp_rxpeek $I19, rx268_bstack, rxcap274_fail861
    inc $I19
    set $I11, rx268_bstack[$I19]
    repr_bind_attr_int rx268_cur, rx268_curclass, "$!pos", rx268_pos
    $P11 = rx268_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx268_pos)
    rx268_cstack = rx268_cur."!cursor_capture"($P11, "key")
    goto rxcap274_done860
  rxcap274_fail861:
    goto rx268_fail845
  rxcap274_done860:
    nqp_rxpeek $I19, rx268_bstack, rxquantr271_done855
    inc $I19
    inc $I19
    set rx268_rep, rx268_bstack[$I19]
    nqp_rxcommit rx268_bstack, rxquantr271_done855
    inc rx268_rep
  rxquantr271_done855:
    rx268_cur."!cursor_pass"(rx268_pos, "metachar:sym<{*}>", 'backtrack'=>1)
    .return (rx268_cur)
  rx268_restart844:
    repr_get_attr_obj rx268_cstack, rx268_cur, rx268_curclass, "$!cstack"
  rx268_fail845:
    unless rx268_bstack, rx268_done843
    pop $I19, rx268_bstack
    if_null rx268_cstack, rx268_cstack_done848
    unless rx268_cstack, rx268_cstack_done848
    dec $I19
    set $P11, rx268_cstack[$I19]
  rx268_cstack_done848:
    pop rx268_rep, rx268_bstack
    pop rx268_pos, rx268_bstack
    pop $I19, rx268_bstack
    lt rx268_pos, -1, rx268_done843
    lt rx268_pos, 0, rx268_fail845
    eq $I19, 0, rx268_fail845
    nqp_islist $I20, rx268_cstack
    unless $I20, rx268_jump846
    elements $I18, rx268_bstack
    le $I18, 0, rx268_cut847
    dec $I18
    set $I18, rx268_bstack[$I18]
  rx268_cut847:
    assign rx268_cstack, $I18
  rx268_jump846:
    jump $I19
  rx268_done843:
    rx268_cur."!cursor_fail"()
    .return (rx268_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_66_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 215
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx279_tgt
    .local int rx279_pos
    .local int rx279_off
    .local int rx279_eos
    .local int rx279_rep
    .local pmc rx279_cur
    .local pmc rx279_curclass
    .local pmc rx279_bstack
    .local pmc rx279_cstack
    (rx279_cur, rx279_tgt, rx279_pos, rx279_curclass, rx279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx279_cur
    length rx279_eos, rx279_tgt
    eq $I19, 1, rx279_restart872
    gt rx279_pos, rx279_eos, rx279_fail873
    repr_get_attr_int $I11, self, rx279_curclass, "$!from"
    ne $I11, -1, rxscan280_done879
    goto rxscan280_scan878
  rxscan280_loop877:
    inc rx279_pos
    gt rx279_pos, rx279_eos, rx279_fail873
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!from", rx279_pos
  rxscan280_scan878:
    nqp_rxmark rx279_bstack, rxscan280_loop877, rx279_pos, 0
  rxscan280_done879:
    add $I11, rx279_pos, 1
    gt $I11, rx279_eos, rx279_fail873
    substr $S10, rx279_tgt, rx279_pos, 1
    ne $S10, ucs4:"<", rx279_fail873
    add rx279_pos, 1
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!pos", rx279_pos
    $P11 = rx279_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx279_curclass, "$!pos"
    lt $I11, 0, rx279_fail873
    nqp_rxmark rx279_bstack, rxsubrule281_pass880, -1, 0
  rxsubrule281_pass880:
    rx279_cstack = rx279_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx279_pos, $P11, rx279_curclass, "$!pos"
  alt282_0882:
    nqp_rxmark rx279_bstack, alt282_1883, rx279_pos, 0
    add $I11, rx279_pos, 1
    gt $I11, rx279_eos, rx279_fail873
    substr $S10, rx279_tgt, rx279_pos, 1
    ne $S10, ucs4:">", rx279_fail873
    add rx279_pos, 1
    goto alt282_end881
  alt282_1883:
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!pos", rx279_pos
    $P11 = rx279_cur."panic"("regex assertion not terminated by angle bracket")
    repr_get_attr_int $I11, $P11, rx279_curclass, "$!pos"
    lt $I11, 0, rx279_fail873
    repr_get_attr_int rx279_pos, $P11, rx279_curclass, "$!pos"
  alt282_end881:
    rx279_cur."!cursor_pass"(rx279_pos, "metachar:sym<assert>", 'backtrack'=>1)
    .return (rx279_cur)
  rx279_restart872:
    repr_get_attr_obj rx279_cstack, rx279_cur, rx279_curclass, "$!cstack"
  rx279_fail873:
    unless rx279_bstack, rx279_done871
    pop $I19, rx279_bstack
    if_null rx279_cstack, rx279_cstack_done876
    unless rx279_cstack, rx279_cstack_done876
    dec $I19
    set $P11, rx279_cstack[$I19]
  rx279_cstack_done876:
    pop rx279_rep, rx279_bstack
    pop rx279_pos, rx279_bstack
    pop $I19, rx279_bstack
    lt rx279_pos, -1, rx279_done871
    lt rx279_pos, 0, rx279_fail873
    eq $I19, 0, rx279_fail873
    nqp_islist $I20, rx279_cstack
    unless $I20, rx279_jump874
    elements $I18, rx279_bstack
    le $I18, 0, rx279_cut875
    dec $I18
    set $I18, rx279_bstack[$I18]
  rx279_cut875:
    assign rx279_cstack, $I18
  rx279_jump874:
    jump $I19
  rx279_done871:
    rx279_cur."!cursor_fail"()
    .return (rx279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_67_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 220
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart887
    gt rx284_pos, rx284_eos, rx284_fail888
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done894
    goto rxscan285_scan893
  rxscan285_loop892:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail888
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan893:
    nqp_rxmark rx284_bstack, rxscan285_loop892, rx284_pos, 0
  rxscan285_done894:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt286_0896
    nqp_push_label $P11, alt286_1901
    nqp_rxmark rx284_bstack, alt286_end895, -1, 0
    rx284_cur."!alt"(rx284_pos, "alt_nfa__12_1356803022.32353", $P11)
    goto rx284_fail888
  alt286_0896:
    add $I11, rx284_pos, 2
    gt $I11, rx284_eos, rx284_fail888
    substr $S10, rx284_tgt, rx284_pos, 2
    ne $S10, ucs4:"$<", rx284_fail888
    add rx284_pos, 2
    nqp_rxmark rx284_bstack, rxcap287_fail898, rx284_pos, 0
    nqp_rxmark rx284_bstack, rxquantr288_done900, -1, 0
  rxquantr288_loop899:
    ge rx284_pos, rx284_eos, rx284_fail888
    substr $S11, rx284_tgt, rx284_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx284_fail888
    inc rx284_pos
    nqp_rxpeek $I19, rx284_bstack, rxquantr288_done900
    inc $I19
    inc $I19
    set rx284_rep, rx284_bstack[$I19]
    nqp_rxcommit rx284_bstack, rxquantr288_done900
    inc rx284_rep
    nqp_rxmark rx284_bstack, rxquantr288_done900, rx284_pos, rx284_rep
    goto rxquantr288_loop899
  rxquantr288_done900:
    nqp_rxpeek $I19, rx284_bstack, rxcap287_fail898
    inc $I19
    set $I11, rx284_bstack[$I19]
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx284_pos)
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "name")
    goto rxcap287_done897
  rxcap287_fail898:
    goto rx284_fail888
  rxcap287_done897:
    add $I11, rx284_pos, 1
    gt $I11, rx284_eos, rx284_fail888
    substr $S10, rx284_tgt, rx284_pos, 1
    ne $S10, ucs4:">", rx284_fail888
    add rx284_pos, 1
    goto alt286_end895
  alt286_1901:
    add $I11, rx284_pos, 1
    gt $I11, rx284_eos, rx284_fail888
    substr $S10, rx284_tgt, rx284_pos, 1
    ne $S10, ucs4:"$", rx284_fail888
    add rx284_pos, 1
    nqp_rxmark rx284_bstack, rxcap289_fail903, rx284_pos, 0
    nqp_rxmark rx284_bstack, rxquantr290_done905, -1, 0
  rxquantr290_loop904:
    ge rx284_pos, rx284_eos, rx284_fail888
    is_cclass $I11, .CCLASS_NUMERIC, rx284_tgt, rx284_pos
    unless $I11, rx284_fail888
    add rx284_pos, 1
    nqp_rxpeek $I19, rx284_bstack, rxquantr290_done905
    inc $I19
    inc $I19
    set rx284_rep, rx284_bstack[$I19]
    nqp_rxcommit rx284_bstack, rxquantr290_done905
    inc rx284_rep
    nqp_rxmark rx284_bstack, rxquantr290_done905, rx284_pos, rx284_rep
    goto rxquantr290_loop904
  rxquantr290_done905:
    nqp_rxpeek $I19, rx284_bstack, rxcap289_fail903
    inc $I19
    set $I11, rx284_bstack[$I19]
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx284_pos)
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "pos")
    goto rxcap289_done902
  rxcap289_fail903:
    goto rx284_fail888
  rxcap289_done902:
    goto alt286_end895
  alt286_end895:
    nqp_rxcommit rx284_bstack, alt286_end895
    nqp_rxmark rx284_bstack, rxquantr291_done907, rx284_pos, 0
  rxquantr291_loop906:
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."ws"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail888
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    add $I11, rx284_pos, 1
    gt $I11, rx284_eos, rx284_fail888
    substr $S10, rx284_tgt, rx284_pos, 1
    ne $S10, ucs4:"=", rx284_fail888
    add rx284_pos, 1
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."ws"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail888
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail888
    nqp_rxmark rx284_bstack, rxsubrule294_pass910, -1, 0
  rxsubrule294_pass910:
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    nqp_rxpeek $I19, rx284_bstack, rxquantr291_done907
    inc $I19
    inc $I19
    set rx284_rep, rx284_bstack[$I19]
    nqp_rxcommit rx284_bstack, rxquantr291_done907
    inc rx284_rep
  rxquantr291_done907:
    rx284_cur."!cursor_pass"(rx284_pos, "metachar:sym<var>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart887:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail888:
    unless rx284_bstack, rx284_done886
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done891
    unless rx284_cstack, rx284_cstack_done891
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done891:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done886
    lt rx284_pos, 0, rx284_fail888
    eq $I19, 0, rx284_fail888
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump889
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut890
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut890:
    assign rx284_cstack, $I18
  rx284_jump889:
    jump $I19
  rx284_done886:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash" :subid("cuid_68_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 229
    .param pmc self 
    $P5001 = self."!protoregex"("backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_69_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 230
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx295_tgt
    .local int rx295_pos
    .local int rx295_off
    .local int rx295_eos
    .local int rx295_rep
    .local pmc rx295_cur
    .local pmc rx295_curclass
    .local pmc rx295_bstack
    .local pmc rx295_cstack
    (rx295_cur, rx295_tgt, rx295_pos, rx295_curclass, rx295_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx295_cur
    length rx295_eos, rx295_tgt
    eq $I19, 1, rx295_restart913
    gt rx295_pos, rx295_eos, rx295_fail914
    repr_get_attr_int $I11, self, rx295_curclass, "$!from"
    ne $I11, -1, rxscan296_done920
    goto rxscan296_scan919
  rxscan296_loop918:
    inc rx295_pos
    gt rx295_pos, rx295_eos, rx295_fail914
    repr_bind_attr_int rx295_cur, rx295_curclass, "$!from", rx295_pos
  rxscan296_scan919:
    nqp_rxmark rx295_bstack, rxscan296_loop918, rx295_pos, 0
  rxscan296_done920:
    nqp_rxmark rx295_bstack, rxcap297_fail922, rx295_pos, 0
    ge rx295_pos, rx295_eos, rx295_fail914
    substr $S11, rx295_tgt, rx295_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx295_fail914
    inc rx295_pos
    nqp_rxpeek $I19, rx295_bstack, rxcap297_fail922
    inc $I19
    set $I11, rx295_bstack[$I19]
    repr_bind_attr_int rx295_cur, rx295_curclass, "$!pos", rx295_pos
    $P11 = rx295_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx295_pos)
    rx295_cstack = rx295_cur."!cursor_capture"($P11, "sym")
    goto rxcap297_done921
  rxcap297_fail922:
    goto rx295_fail914
  rxcap297_done921:
    rx295_cur."!cursor_pass"(rx295_pos, "backslash:sym<s>", 'backtrack'=>1)
    .return (rx295_cur)
  rx295_restart913:
    repr_get_attr_obj rx295_cstack, rx295_cur, rx295_curclass, "$!cstack"
  rx295_fail914:
    unless rx295_bstack, rx295_done912
    pop $I19, rx295_bstack
    if_null rx295_cstack, rx295_cstack_done917
    unless rx295_cstack, rx295_cstack_done917
    dec $I19
    set $P11, rx295_cstack[$I19]
  rx295_cstack_done917:
    pop rx295_rep, rx295_bstack
    pop rx295_pos, rx295_bstack
    pop $I19, rx295_bstack
    lt rx295_pos, -1, rx295_done912
    lt rx295_pos, 0, rx295_fail914
    eq $I19, 0, rx295_fail914
    nqp_islist $I20, rx295_cstack
    unless $I20, rx295_jump915
    elements $I18, rx295_bstack
    le $I18, 0, rx295_cut916
    dec $I18
    set $I18, rx295_bstack[$I18]
  rx295_cut916:
    assign rx295_cstack, $I18
  rx295_jump915:
    jump $I19
  rx295_done912:
    rx295_cur."!cursor_fail"()
    .return (rx295_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_70_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 231
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx298_tgt
    .local int rx298_pos
    .local int rx298_off
    .local int rx298_eos
    .local int rx298_rep
    .local pmc rx298_cur
    .local pmc rx298_curclass
    .local pmc rx298_bstack
    .local pmc rx298_cstack
    (rx298_cur, rx298_tgt, rx298_pos, rx298_curclass, rx298_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx298_cur
    length rx298_eos, rx298_tgt
    eq $I19, 1, rx298_restart925
    gt rx298_pos, rx298_eos, rx298_fail926
    repr_get_attr_int $I11, self, rx298_curclass, "$!from"
    ne $I11, -1, rxscan299_done932
    goto rxscan299_scan931
  rxscan299_loop930:
    inc rx298_pos
    gt rx298_pos, rx298_eos, rx298_fail926
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!from", rx298_pos
  rxscan299_scan931:
    nqp_rxmark rx298_bstack, rxscan299_loop930, rx298_pos, 0
  rxscan299_done932:
    nqp_rxmark rx298_bstack, rxcap300_fail934, rx298_pos, 0
    ge rx298_pos, rx298_eos, rx298_fail926
    substr $S11, rx298_tgt, rx298_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx298_fail926
    inc rx298_pos
    nqp_rxpeek $I19, rx298_bstack, rxcap300_fail934
    inc $I19
    set $I11, rx298_bstack[$I19]
    repr_bind_attr_int rx298_cur, rx298_curclass, "$!pos", rx298_pos
    $P11 = rx298_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx298_pos)
    rx298_cstack = rx298_cur."!cursor_capture"($P11, "sym")
    goto rxcap300_done933
  rxcap300_fail934:
    goto rx298_fail926
  rxcap300_done933:
    rx298_cur."!cursor_pass"(rx298_pos, "backslash:sym<b>", 'backtrack'=>1)
    .return (rx298_cur)
  rx298_restart925:
    repr_get_attr_obj rx298_cstack, rx298_cur, rx298_curclass, "$!cstack"
  rx298_fail926:
    unless rx298_bstack, rx298_done924
    pop $I19, rx298_bstack
    if_null rx298_cstack, rx298_cstack_done929
    unless rx298_cstack, rx298_cstack_done929
    dec $I19
    set $P11, rx298_cstack[$I19]
  rx298_cstack_done929:
    pop rx298_rep, rx298_bstack
    pop rx298_pos, rx298_bstack
    pop $I19, rx298_bstack
    lt rx298_pos, -1, rx298_done924
    lt rx298_pos, 0, rx298_fail926
    eq $I19, 0, rx298_fail926
    nqp_islist $I20, rx298_cstack
    unless $I20, rx298_jump927
    elements $I18, rx298_bstack
    le $I18, 0, rx298_cut928
    dec $I18
    set $I18, rx298_bstack[$I18]
  rx298_cut928:
    assign rx298_cstack, $I18
  rx298_jump927:
    jump $I19
  rx298_done924:
    rx298_cur."!cursor_fail"()
    .return (rx298_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_71_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 232
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx301_tgt
    .local int rx301_pos
    .local int rx301_off
    .local int rx301_eos
    .local int rx301_rep
    .local pmc rx301_cur
    .local pmc rx301_curclass
    .local pmc rx301_bstack
    .local pmc rx301_cstack
    (rx301_cur, rx301_tgt, rx301_pos, rx301_curclass, rx301_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx301_cur
    length rx301_eos, rx301_tgt
    eq $I19, 1, rx301_restart937
    gt rx301_pos, rx301_eos, rx301_fail938
    repr_get_attr_int $I11, self, rx301_curclass, "$!from"
    ne $I11, -1, rxscan302_done944
    goto rxscan302_scan943
  rxscan302_loop942:
    inc rx301_pos
    gt rx301_pos, rx301_eos, rx301_fail938
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!from", rx301_pos
  rxscan302_scan943:
    nqp_rxmark rx301_bstack, rxscan302_loop942, rx301_pos, 0
  rxscan302_done944:
    nqp_rxmark rx301_bstack, rxcap303_fail946, rx301_pos, 0
    ge rx301_pos, rx301_eos, rx301_fail938
    substr $S11, rx301_tgt, rx301_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx301_fail938
    inc rx301_pos
    nqp_rxpeek $I19, rx301_bstack, rxcap303_fail946
    inc $I19
    set $I11, rx301_bstack[$I19]
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!pos", rx301_pos
    $P11 = rx301_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx301_pos)
    rx301_cstack = rx301_cur."!cursor_capture"($P11, "sym")
    goto rxcap303_done945
  rxcap303_fail946:
    goto rx301_fail938
  rxcap303_done945:
    rx301_cur."!cursor_pass"(rx301_pos, "backslash:sym<e>", 'backtrack'=>1)
    .return (rx301_cur)
  rx301_restart937:
    repr_get_attr_obj rx301_cstack, rx301_cur, rx301_curclass, "$!cstack"
  rx301_fail938:
    unless rx301_bstack, rx301_done936
    pop $I19, rx301_bstack
    if_null rx301_cstack, rx301_cstack_done941
    unless rx301_cstack, rx301_cstack_done941
    dec $I19
    set $P11, rx301_cstack[$I19]
  rx301_cstack_done941:
    pop rx301_rep, rx301_bstack
    pop rx301_pos, rx301_bstack
    pop $I19, rx301_bstack
    lt rx301_pos, -1, rx301_done936
    lt rx301_pos, 0, rx301_fail938
    eq $I19, 0, rx301_fail938
    nqp_islist $I20, rx301_cstack
    unless $I20, rx301_jump939
    elements $I18, rx301_bstack
    le $I18, 0, rx301_cut940
    dec $I18
    set $I18, rx301_bstack[$I18]
  rx301_cut940:
    assign rx301_cstack, $I18
  rx301_jump939:
    jump $I19
  rx301_done936:
    rx301_cur."!cursor_fail"()
    .return (rx301_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_72_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 233
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx304_tgt
    .local int rx304_pos
    .local int rx304_off
    .local int rx304_eos
    .local int rx304_rep
    .local pmc rx304_cur
    .local pmc rx304_curclass
    .local pmc rx304_bstack
    .local pmc rx304_cstack
    (rx304_cur, rx304_tgt, rx304_pos, rx304_curclass, rx304_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx304_cur
    length rx304_eos, rx304_tgt
    eq $I19, 1, rx304_restart949
    gt rx304_pos, rx304_eos, rx304_fail950
    repr_get_attr_int $I11, self, rx304_curclass, "$!from"
    ne $I11, -1, rxscan305_done956
    goto rxscan305_scan955
  rxscan305_loop954:
    inc rx304_pos
    gt rx304_pos, rx304_eos, rx304_fail950
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!from", rx304_pos
  rxscan305_scan955:
    nqp_rxmark rx304_bstack, rxscan305_loop954, rx304_pos, 0
  rxscan305_done956:
    nqp_rxmark rx304_bstack, rxcap306_fail958, rx304_pos, 0
    ge rx304_pos, rx304_eos, rx304_fail950
    substr $S11, rx304_tgt, rx304_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx304_fail950
    inc rx304_pos
    nqp_rxpeek $I19, rx304_bstack, rxcap306_fail958
    inc $I19
    set $I11, rx304_bstack[$I19]
    repr_bind_attr_int rx304_cur, rx304_curclass, "$!pos", rx304_pos
    $P11 = rx304_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx304_pos)
    rx304_cstack = rx304_cur."!cursor_capture"($P11, "sym")
    goto rxcap306_done957
  rxcap306_fail958:
    goto rx304_fail950
  rxcap306_done957:
    rx304_cur."!cursor_pass"(rx304_pos, "backslash:sym<f>", 'backtrack'=>1)
    .return (rx304_cur)
  rx304_restart949:
    repr_get_attr_obj rx304_cstack, rx304_cur, rx304_curclass, "$!cstack"
  rx304_fail950:
    unless rx304_bstack, rx304_done948
    pop $I19, rx304_bstack
    if_null rx304_cstack, rx304_cstack_done953
    unless rx304_cstack, rx304_cstack_done953
    dec $I19
    set $P11, rx304_cstack[$I19]
  rx304_cstack_done953:
    pop rx304_rep, rx304_bstack
    pop rx304_pos, rx304_bstack
    pop $I19, rx304_bstack
    lt rx304_pos, -1, rx304_done948
    lt rx304_pos, 0, rx304_fail950
    eq $I19, 0, rx304_fail950
    nqp_islist $I20, rx304_cstack
    unless $I20, rx304_jump951
    elements $I18, rx304_bstack
    le $I18, 0, rx304_cut952
    dec $I18
    set $I18, rx304_bstack[$I18]
  rx304_cut952:
    assign rx304_cstack, $I18
  rx304_jump951:
    jump $I19
  rx304_done948:
    rx304_cur."!cursor_fail"()
    .return (rx304_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_73_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 234
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx307_tgt
    .local int rx307_pos
    .local int rx307_off
    .local int rx307_eos
    .local int rx307_rep
    .local pmc rx307_cur
    .local pmc rx307_curclass
    .local pmc rx307_bstack
    .local pmc rx307_cstack
    (rx307_cur, rx307_tgt, rx307_pos, rx307_curclass, rx307_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx307_cur
    length rx307_eos, rx307_tgt
    eq $I19, 1, rx307_restart961
    gt rx307_pos, rx307_eos, rx307_fail962
    repr_get_attr_int $I11, self, rx307_curclass, "$!from"
    ne $I11, -1, rxscan308_done968
    goto rxscan308_scan967
  rxscan308_loop966:
    inc rx307_pos
    gt rx307_pos, rx307_eos, rx307_fail962
    repr_bind_attr_int rx307_cur, rx307_curclass, "$!from", rx307_pos
  rxscan308_scan967:
    nqp_rxmark rx307_bstack, rxscan308_loop966, rx307_pos, 0
  rxscan308_done968:
    nqp_rxmark rx307_bstack, rxcap309_fail970, rx307_pos, 0
    ge rx307_pos, rx307_eos, rx307_fail962
    substr $S11, rx307_tgt, rx307_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx307_fail962
    inc rx307_pos
    nqp_rxpeek $I19, rx307_bstack, rxcap309_fail970
    inc $I19
    set $I11, rx307_bstack[$I19]
    repr_bind_attr_int rx307_cur, rx307_curclass, "$!pos", rx307_pos
    $P11 = rx307_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx307_pos)
    rx307_cstack = rx307_cur."!cursor_capture"($P11, "sym")
    goto rxcap309_done969
  rxcap309_fail970:
    goto rx307_fail962
  rxcap309_done969:
    rx307_cur."!cursor_pass"(rx307_pos, "backslash:sym<h>", 'backtrack'=>1)
    .return (rx307_cur)
  rx307_restart961:
    repr_get_attr_obj rx307_cstack, rx307_cur, rx307_curclass, "$!cstack"
  rx307_fail962:
    unless rx307_bstack, rx307_done960
    pop $I19, rx307_bstack
    if_null rx307_cstack, rx307_cstack_done965
    unless rx307_cstack, rx307_cstack_done965
    dec $I19
    set $P11, rx307_cstack[$I19]
  rx307_cstack_done965:
    pop rx307_rep, rx307_bstack
    pop rx307_pos, rx307_bstack
    pop $I19, rx307_bstack
    lt rx307_pos, -1, rx307_done960
    lt rx307_pos, 0, rx307_fail962
    eq $I19, 0, rx307_fail962
    nqp_islist $I20, rx307_cstack
    unless $I20, rx307_jump963
    elements $I18, rx307_bstack
    le $I18, 0, rx307_cut964
    dec $I18
    set $I18, rx307_bstack[$I18]
  rx307_cut964:
    assign rx307_cstack, $I18
  rx307_jump963:
    jump $I19
  rx307_done960:
    rx307_cur."!cursor_fail"()
    .return (rx307_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_74_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx310_tgt
    .local int rx310_pos
    .local int rx310_off
    .local int rx310_eos
    .local int rx310_rep
    .local pmc rx310_cur
    .local pmc rx310_curclass
    .local pmc rx310_bstack
    .local pmc rx310_cstack
    (rx310_cur, rx310_tgt, rx310_pos, rx310_curclass, rx310_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx310_cur
    length rx310_eos, rx310_tgt
    eq $I19, 1, rx310_restart973
    gt rx310_pos, rx310_eos, rx310_fail974
    repr_get_attr_int $I11, self, rx310_curclass, "$!from"
    ne $I11, -1, rxscan311_done980
    goto rxscan311_scan979
  rxscan311_loop978:
    inc rx310_pos
    gt rx310_pos, rx310_eos, rx310_fail974
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!from", rx310_pos
  rxscan311_scan979:
    nqp_rxmark rx310_bstack, rxscan311_loop978, rx310_pos, 0
  rxscan311_done980:
    nqp_rxmark rx310_bstack, rxcap312_fail982, rx310_pos, 0
    ge rx310_pos, rx310_eos, rx310_fail974
    substr $S11, rx310_tgt, rx310_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx310_fail974
    inc rx310_pos
    nqp_rxpeek $I19, rx310_bstack, rxcap312_fail982
    inc $I19
    set $I11, rx310_bstack[$I19]
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx310_pos)
    rx310_cstack = rx310_cur."!cursor_capture"($P11, "sym")
    goto rxcap312_done981
  rxcap312_fail982:
    goto rx310_fail974
  rxcap312_done981:
    rx310_cur."!cursor_pass"(rx310_pos, "backslash:sym<r>", 'backtrack'=>1)
    .return (rx310_cur)
  rx310_restart973:
    repr_get_attr_obj rx310_cstack, rx310_cur, rx310_curclass, "$!cstack"
  rx310_fail974:
    unless rx310_bstack, rx310_done972
    pop $I19, rx310_bstack
    if_null rx310_cstack, rx310_cstack_done977
    unless rx310_cstack, rx310_cstack_done977
    dec $I19
    set $P11, rx310_cstack[$I19]
  rx310_cstack_done977:
    pop rx310_rep, rx310_bstack
    pop rx310_pos, rx310_bstack
    pop $I19, rx310_bstack
    lt rx310_pos, -1, rx310_done972
    lt rx310_pos, 0, rx310_fail974
    eq $I19, 0, rx310_fail974
    nqp_islist $I20, rx310_cstack
    unless $I20, rx310_jump975
    elements $I18, rx310_bstack
    le $I18, 0, rx310_cut976
    dec $I18
    set $I18, rx310_bstack[$I18]
  rx310_cut976:
    assign rx310_cstack, $I18
  rx310_jump975:
    jump $I19
  rx310_done972:
    rx310_cur."!cursor_fail"()
    .return (rx310_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_75_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 236
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx313_tgt
    .local int rx313_pos
    .local int rx313_off
    .local int rx313_eos
    .local int rx313_rep
    .local pmc rx313_cur
    .local pmc rx313_curclass
    .local pmc rx313_bstack
    .local pmc rx313_cstack
    (rx313_cur, rx313_tgt, rx313_pos, rx313_curclass, rx313_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx313_cur
    length rx313_eos, rx313_tgt
    eq $I19, 1, rx313_restart985
    gt rx313_pos, rx313_eos, rx313_fail986
    repr_get_attr_int $I11, self, rx313_curclass, "$!from"
    ne $I11, -1, rxscan314_done992
    goto rxscan314_scan991
  rxscan314_loop990:
    inc rx313_pos
    gt rx313_pos, rx313_eos, rx313_fail986
    repr_bind_attr_int rx313_cur, rx313_curclass, "$!from", rx313_pos
  rxscan314_scan991:
    nqp_rxmark rx313_bstack, rxscan314_loop990, rx313_pos, 0
  rxscan314_done992:
    nqp_rxmark rx313_bstack, rxcap315_fail994, rx313_pos, 0
    ge rx313_pos, rx313_eos, rx313_fail986
    substr $S11, rx313_tgt, rx313_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx313_fail986
    inc rx313_pos
    nqp_rxpeek $I19, rx313_bstack, rxcap315_fail994
    inc $I19
    set $I11, rx313_bstack[$I19]
    repr_bind_attr_int rx313_cur, rx313_curclass, "$!pos", rx313_pos
    $P11 = rx313_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx313_pos)
    rx313_cstack = rx313_cur."!cursor_capture"($P11, "sym")
    goto rxcap315_done993
  rxcap315_fail994:
    goto rx313_fail986
  rxcap315_done993:
    rx313_cur."!cursor_pass"(rx313_pos, "backslash:sym<t>", 'backtrack'=>1)
    .return (rx313_cur)
  rx313_restart985:
    repr_get_attr_obj rx313_cstack, rx313_cur, rx313_curclass, "$!cstack"
  rx313_fail986:
    unless rx313_bstack, rx313_done984
    pop $I19, rx313_bstack
    if_null rx313_cstack, rx313_cstack_done989
    unless rx313_cstack, rx313_cstack_done989
    dec $I19
    set $P11, rx313_cstack[$I19]
  rx313_cstack_done989:
    pop rx313_rep, rx313_bstack
    pop rx313_pos, rx313_bstack
    pop $I19, rx313_bstack
    lt rx313_pos, -1, rx313_done984
    lt rx313_pos, 0, rx313_fail986
    eq $I19, 0, rx313_fail986
    nqp_islist $I20, rx313_cstack
    unless $I20, rx313_jump987
    elements $I18, rx313_bstack
    le $I18, 0, rx313_cut988
    dec $I18
    set $I18, rx313_bstack[$I18]
  rx313_cut988:
    assign rx313_cstack, $I18
  rx313_jump987:
    jump $I19
  rx313_done984:
    rx313_cur."!cursor_fail"()
    .return (rx313_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_76_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 237
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx316_tgt
    .local int rx316_pos
    .local int rx316_off
    .local int rx316_eos
    .local int rx316_rep
    .local pmc rx316_cur
    .local pmc rx316_curclass
    .local pmc rx316_bstack
    .local pmc rx316_cstack
    (rx316_cur, rx316_tgt, rx316_pos, rx316_curclass, rx316_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx316_cur
    length rx316_eos, rx316_tgt
    eq $I19, 1, rx316_restart997
    gt rx316_pos, rx316_eos, rx316_fail998
    repr_get_attr_int $I11, self, rx316_curclass, "$!from"
    ne $I11, -1, rxscan317_done1004
    goto rxscan317_scan1003
  rxscan317_loop1002:
    inc rx316_pos
    gt rx316_pos, rx316_eos, rx316_fail998
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!from", rx316_pos
  rxscan317_scan1003:
    nqp_rxmark rx316_bstack, rxscan317_loop1002, rx316_pos, 0
  rxscan317_done1004:
    nqp_rxmark rx316_bstack, rxcap318_fail1006, rx316_pos, 0
    ge rx316_pos, rx316_eos, rx316_fail998
    substr $S11, rx316_tgt, rx316_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx316_fail998
    inc rx316_pos
    nqp_rxpeek $I19, rx316_bstack, rxcap318_fail1006
    inc $I19
    set $I11, rx316_bstack[$I19]
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!pos", rx316_pos
    $P11 = rx316_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx316_pos)
    rx316_cstack = rx316_cur."!cursor_capture"($P11, "sym")
    goto rxcap318_done1005
  rxcap318_fail1006:
    goto rx316_fail998
  rxcap318_done1005:
    rx316_cur."!cursor_pass"(rx316_pos, "backslash:sym<v>", 'backtrack'=>1)
    .return (rx316_cur)
  rx316_restart997:
    repr_get_attr_obj rx316_cstack, rx316_cur, rx316_curclass, "$!cstack"
  rx316_fail998:
    unless rx316_bstack, rx316_done996
    pop $I19, rx316_bstack
    if_null rx316_cstack, rx316_cstack_done1001
    unless rx316_cstack, rx316_cstack_done1001
    dec $I19
    set $P11, rx316_cstack[$I19]
  rx316_cstack_done1001:
    pop rx316_rep, rx316_bstack
    pop rx316_pos, rx316_bstack
    pop $I19, rx316_bstack
    lt rx316_pos, -1, rx316_done996
    lt rx316_pos, 0, rx316_fail998
    eq $I19, 0, rx316_fail998
    nqp_islist $I20, rx316_cstack
    unless $I20, rx316_jump999
    elements $I18, rx316_bstack
    le $I18, 0, rx316_cut1000
    dec $I18
    set $I18, rx316_bstack[$I18]
  rx316_cut1000:
    assign rx316_cstack, $I18
  rx316_jump999:
    jump $I19
  rx316_done996:
    rx316_cur."!cursor_fail"()
    .return (rx316_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_77_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx319_tgt
    .local int rx319_pos
    .local int rx319_off
    .local int rx319_eos
    .local int rx319_rep
    .local pmc rx319_cur
    .local pmc rx319_curclass
    .local pmc rx319_bstack
    .local pmc rx319_cstack
    (rx319_cur, rx319_tgt, rx319_pos, rx319_curclass, rx319_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx319_cur
    length rx319_eos, rx319_tgt
    eq $I19, 1, rx319_restart1009
    gt rx319_pos, rx319_eos, rx319_fail1010
    repr_get_attr_int $I11, self, rx319_curclass, "$!from"
    ne $I11, -1, rxscan320_done1016
    goto rxscan320_scan1015
  rxscan320_loop1014:
    inc rx319_pos
    gt rx319_pos, rx319_eos, rx319_fail1010
    repr_bind_attr_int rx319_cur, rx319_curclass, "$!from", rx319_pos
  rxscan320_scan1015:
    nqp_rxmark rx319_bstack, rxscan320_loop1014, rx319_pos, 0
  rxscan320_done1016:
    nqp_rxmark rx319_bstack, rxcap321_fail1018, rx319_pos, 0
    ge rx319_pos, rx319_eos, rx319_fail1010
    substr $S11, rx319_tgt, rx319_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx319_fail1010
    inc rx319_pos
    nqp_rxpeek $I19, rx319_bstack, rxcap321_fail1018
    inc $I19
    set $I11, rx319_bstack[$I19]
    repr_bind_attr_int rx319_cur, rx319_curclass, "$!pos", rx319_pos
    $P11 = rx319_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx319_pos)
    rx319_cstack = rx319_cur."!cursor_capture"($P11, "sym")
    goto rxcap321_done1017
  rxcap321_fail1018:
    goto rx319_fail1010
  rxcap321_done1017:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt322_01020
    nqp_push_label $P11, alt322_11022
    nqp_rxmark rx319_bstack, alt322_end1019, -1, 0
    rx319_cur."!alt"(rx319_pos, "alt_nfa__13_1356803022.38806", $P11)
    goto rx319_fail1010
  alt322_01020:
    repr_bind_attr_int rx319_cur, rx319_curclass, "$!pos", rx319_pos
    $P11 = rx319_cur."octint"()
    repr_get_attr_int $I11, $P11, rx319_curclass, "$!pos"
    lt $I11, 0, rx319_fail1010
    nqp_rxmark rx319_bstack, rxsubrule323_pass1021, -1, 0
  rxsubrule323_pass1021:
    rx319_cstack = rx319_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx319_pos, $P11, rx319_curclass, "$!pos"
    goto alt322_end1019
  alt322_11022:
    add $I11, rx319_pos, 1
    gt $I11, rx319_eos, rx319_fail1010
    substr $S10, rx319_tgt, rx319_pos, 1
    ne $S10, ucs4:"[", rx319_fail1010
    add rx319_pos, 1
    repr_bind_attr_int rx319_cur, rx319_curclass, "$!pos", rx319_pos
    $P11 = rx319_cur."octints"()
    repr_get_attr_int $I11, $P11, rx319_curclass, "$!pos"
    lt $I11, 0, rx319_fail1010
    nqp_rxmark rx319_bstack, rxsubrule324_pass1023, -1, 0
  rxsubrule324_pass1023:
    rx319_cstack = rx319_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx319_pos, $P11, rx319_curclass, "$!pos"
    add $I11, rx319_pos, 1
    gt $I11, rx319_eos, rx319_fail1010
    substr $S10, rx319_tgt, rx319_pos, 1
    ne $S10, ucs4:"]", rx319_fail1010
    add rx319_pos, 1
    goto alt322_end1019
  alt322_end1019:
    nqp_rxcommit rx319_bstack, alt322_end1019
    rx319_cur."!cursor_pass"(rx319_pos, "backslash:sym<o>", 'backtrack'=>1)
    .return (rx319_cur)
  rx319_restart1009:
    repr_get_attr_obj rx319_cstack, rx319_cur, rx319_curclass, "$!cstack"
  rx319_fail1010:
    unless rx319_bstack, rx319_done1008
    pop $I19, rx319_bstack
    if_null rx319_cstack, rx319_cstack_done1013
    unless rx319_cstack, rx319_cstack_done1013
    dec $I19
    set $P11, rx319_cstack[$I19]
  rx319_cstack_done1013:
    pop rx319_rep, rx319_bstack
    pop rx319_pos, rx319_bstack
    pop $I19, rx319_bstack
    lt rx319_pos, -1, rx319_done1008
    lt rx319_pos, 0, rx319_fail1010
    eq $I19, 0, rx319_fail1010
    nqp_islist $I20, rx319_cstack
    unless $I20, rx319_jump1011
    elements $I18, rx319_bstack
    le $I18, 0, rx319_cut1012
    dec $I18
    set $I18, rx319_bstack[$I18]
  rx319_cut1012:
    assign rx319_cstack, $I18
  rx319_jump1011:
    jump $I19
  rx319_done1008:
    rx319_cur."!cursor_fail"()
    .return (rx319_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_78_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 239
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx325_tgt
    .local int rx325_pos
    .local int rx325_off
    .local int rx325_eos
    .local int rx325_rep
    .local pmc rx325_cur
    .local pmc rx325_curclass
    .local pmc rx325_bstack
    .local pmc rx325_cstack
    (rx325_cur, rx325_tgt, rx325_pos, rx325_curclass, rx325_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx325_cur
    length rx325_eos, rx325_tgt
    eq $I19, 1, rx325_restart1026
    gt rx325_pos, rx325_eos, rx325_fail1027
    repr_get_attr_int $I11, self, rx325_curclass, "$!from"
    ne $I11, -1, rxscan326_done1033
    goto rxscan326_scan1032
  rxscan326_loop1031:
    inc rx325_pos
    gt rx325_pos, rx325_eos, rx325_fail1027
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!from", rx325_pos
  rxscan326_scan1032:
    nqp_rxmark rx325_bstack, rxscan326_loop1031, rx325_pos, 0
  rxscan326_done1033:
    nqp_rxmark rx325_bstack, rxcap327_fail1035, rx325_pos, 0
    ge rx325_pos, rx325_eos, rx325_fail1027
    substr $S11, rx325_tgt, rx325_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx325_fail1027
    inc rx325_pos
    nqp_rxpeek $I19, rx325_bstack, rxcap327_fail1035
    inc $I19
    set $I11, rx325_bstack[$I19]
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx325_pos)
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "sym")
    goto rxcap327_done1034
  rxcap327_fail1035:
    goto rx325_fail1027
  rxcap327_done1034:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt328_01037
    nqp_push_label $P11, alt328_11039
    nqp_rxmark rx325_bstack, alt328_end1036, -1, 0
    rx325_cur."!alt"(rx325_pos, "alt_nfa__14_1356803022.40005", $P11)
    goto rx325_fail1027
  alt328_01037:
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1027
    nqp_rxmark rx325_bstack, rxsubrule329_pass1038, -1, 0
  rxsubrule329_pass1038:
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    goto alt328_end1036
  alt328_11039:
    add $I11, rx325_pos, 1
    gt $I11, rx325_eos, rx325_fail1027
    substr $S10, rx325_tgt, rx325_pos, 1
    ne $S10, ucs4:"[", rx325_fail1027
    add rx325_pos, 1
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1027
    nqp_rxmark rx325_bstack, rxsubrule330_pass1040, -1, 0
  rxsubrule330_pass1040:
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    add $I11, rx325_pos, 1
    gt $I11, rx325_eos, rx325_fail1027
    substr $S10, rx325_tgt, rx325_pos, 1
    ne $S10, ucs4:"]", rx325_fail1027
    add rx325_pos, 1
    goto alt328_end1036
  alt328_end1036:
    nqp_rxcommit rx325_bstack, alt328_end1036
    rx325_cur."!cursor_pass"(rx325_pos, "backslash:sym<x>", 'backtrack'=>1)
    .return (rx325_cur)
  rx325_restart1026:
    repr_get_attr_obj rx325_cstack, rx325_cur, rx325_curclass, "$!cstack"
  rx325_fail1027:
    unless rx325_bstack, rx325_done1025
    pop $I19, rx325_bstack
    if_null rx325_cstack, rx325_cstack_done1030
    unless rx325_cstack, rx325_cstack_done1030
    dec $I19
    set $P11, rx325_cstack[$I19]
  rx325_cstack_done1030:
    pop rx325_rep, rx325_bstack
    pop rx325_pos, rx325_bstack
    pop $I19, rx325_bstack
    lt rx325_pos, -1, rx325_done1025
    lt rx325_pos, 0, rx325_fail1027
    eq $I19, 0, rx325_fail1027
    nqp_islist $I20, rx325_cstack
    unless $I20, rx325_jump1028
    elements $I18, rx325_bstack
    le $I18, 0, rx325_cut1029
    dec $I18
    set $I18, rx325_bstack[$I18]
  rx325_cut1029:
    assign rx325_cstack, $I18
  rx325_jump1028:
    jump $I19
  rx325_done1025:
    rx325_cur."!cursor_fail"()
    .return (rx325_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_79_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx331_tgt
    .local int rx331_pos
    .local int rx331_off
    .local int rx331_eos
    .local int rx331_rep
    .local pmc rx331_cur
    .local pmc rx331_curclass
    .local pmc rx331_bstack
    .local pmc rx331_cstack
    (rx331_cur, rx331_tgt, rx331_pos, rx331_curclass, rx331_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx331_cur
    length rx331_eos, rx331_tgt
    eq $I19, 1, rx331_restart1043
    gt rx331_pos, rx331_eos, rx331_fail1044
    repr_get_attr_int $I11, self, rx331_curclass, "$!from"
    ne $I11, -1, rxscan332_done1050
    goto rxscan332_scan1049
  rxscan332_loop1048:
    inc rx331_pos
    gt rx331_pos, rx331_eos, rx331_fail1044
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!from", rx331_pos
  rxscan332_scan1049:
    nqp_rxmark rx331_bstack, rxscan332_loop1048, rx331_pos, 0
  rxscan332_done1050:
    nqp_rxmark rx331_bstack, rxcap333_fail1052, rx331_pos, 0
    ge rx331_pos, rx331_eos, rx331_fail1044
    substr $S11, rx331_tgt, rx331_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx331_fail1044
    inc rx331_pos
    nqp_rxpeek $I19, rx331_bstack, rxcap333_fail1052
    inc $I19
    set $I11, rx331_bstack[$I19]
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx331_pos)
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "sym")
    goto rxcap333_done1051
  rxcap333_fail1052:
    goto rx331_fail1044
  rxcap333_done1051:
    repr_bind_attr_int rx331_cur, rx331_curclass, "$!pos", rx331_pos
    $P11 = rx331_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx331_curclass, "$!pos"
    lt $I11, 0, rx331_fail1044
    nqp_rxmark rx331_bstack, rxsubrule334_pass1053, -1, 0
  rxsubrule334_pass1053:
    rx331_cstack = rx331_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx331_pos, $P11, rx331_curclass, "$!pos"
    rx331_cur."!cursor_pass"(rx331_pos, "backslash:sym<c>", 'backtrack'=>1)
    .return (rx331_cur)
  rx331_restart1043:
    repr_get_attr_obj rx331_cstack, rx331_cur, rx331_curclass, "$!cstack"
  rx331_fail1044:
    unless rx331_bstack, rx331_done1042
    pop $I19, rx331_bstack
    if_null rx331_cstack, rx331_cstack_done1047
    unless rx331_cstack, rx331_cstack_done1047
    dec $I19
    set $P11, rx331_cstack[$I19]
  rx331_cstack_done1047:
    pop rx331_rep, rx331_bstack
    pop rx331_pos, rx331_bstack
    pop $I19, rx331_bstack
    lt rx331_pos, -1, rx331_done1042
    lt rx331_pos, 0, rx331_fail1044
    eq $I19, 0, rx331_fail1044
    nqp_islist $I20, rx331_cstack
    unless $I20, rx331_jump1045
    elements $I18, rx331_bstack
    le $I18, 0, rx331_cut1046
    dec $I18
    set $I18, rx331_bstack[$I18]
  rx331_cut1046:
    assign rx331_cstack, $I18
  rx331_jump1045:
    jump $I19
  rx331_done1042:
    rx331_cur."!cursor_fail"()
    .return (rx331_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<A>" :subid("cuid_80_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 241
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx335_tgt
    .local int rx335_pos
    .local int rx335_off
    .local int rx335_eos
    .local int rx335_rep
    .local pmc rx335_cur
    .local pmc rx335_curclass
    .local pmc rx335_bstack
    .local pmc rx335_cstack
    (rx335_cur, rx335_tgt, rx335_pos, rx335_curclass, rx335_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx335_cur
    length rx335_eos, rx335_tgt
    eq $I19, 1, rx335_restart1056
    gt rx335_pos, rx335_eos, rx335_fail1057
    repr_get_attr_int $I11, self, rx335_curclass, "$!from"
    ne $I11, -1, rxscan336_done1063
    goto rxscan336_scan1062
  rxscan336_loop1061:
    inc rx335_pos
    gt rx335_pos, rx335_eos, rx335_fail1057
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!from", rx335_pos
  rxscan336_scan1062:
    nqp_rxmark rx335_bstack, rxscan336_loop1061, rx335_pos, 0
  rxscan336_done1063:
    add $I11, rx335_pos, 1
    gt $I11, rx335_eos, rx335_fail1057
    substr $S10, rx335_tgt, rx335_pos, 1
    ne $S10, ucs4:"A", rx335_fail1057
    add rx335_pos, 1
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!pos", rx335_pos
    $P11 = rx335_cur."obs"("\\\\A as beginning-of-string matcher", "^")
    repr_get_attr_int $I11, $P11, rx335_curclass, "$!pos"
    lt $I11, 0, rx335_fail1057
    repr_get_attr_int rx335_pos, $P11, rx335_curclass, "$!pos"
    rx335_cur."!cursor_pass"(rx335_pos, "backslash:sym<A>", 'backtrack'=>1)
    .return (rx335_cur)
  rx335_restart1056:
    repr_get_attr_obj rx335_cstack, rx335_cur, rx335_curclass, "$!cstack"
  rx335_fail1057:
    unless rx335_bstack, rx335_done1055
    pop $I19, rx335_bstack
    if_null rx335_cstack, rx335_cstack_done1060
    unless rx335_cstack, rx335_cstack_done1060
    dec $I19
    set $P11, rx335_cstack[$I19]
  rx335_cstack_done1060:
    pop rx335_rep, rx335_bstack
    pop rx335_pos, rx335_bstack
    pop $I19, rx335_bstack
    lt rx335_pos, -1, rx335_done1055
    lt rx335_pos, 0, rx335_fail1057
    eq $I19, 0, rx335_fail1057
    nqp_islist $I20, rx335_cstack
    unless $I20, rx335_jump1058
    elements $I18, rx335_bstack
    le $I18, 0, rx335_cut1059
    dec $I18
    set $I18, rx335_bstack[$I18]
  rx335_cut1059:
    assign rx335_cstack, $I18
  rx335_jump1058:
    jump $I19
  rx335_done1055:
    rx335_cur."!cursor_fail"()
    .return (rx335_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<z>" :subid("cuid_81_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx338_tgt
    .local int rx338_pos
    .local int rx338_off
    .local int rx338_eos
    .local int rx338_rep
    .local pmc rx338_cur
    .local pmc rx338_curclass
    .local pmc rx338_bstack
    .local pmc rx338_cstack
    (rx338_cur, rx338_tgt, rx338_pos, rx338_curclass, rx338_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx338_cur
    length rx338_eos, rx338_tgt
    eq $I19, 1, rx338_restart1067
    gt rx338_pos, rx338_eos, rx338_fail1068
    repr_get_attr_int $I11, self, rx338_curclass, "$!from"
    ne $I11, -1, rxscan339_done1074
    goto rxscan339_scan1073
  rxscan339_loop1072:
    inc rx338_pos
    gt rx338_pos, rx338_eos, rx338_fail1068
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!from", rx338_pos
  rxscan339_scan1073:
    nqp_rxmark rx338_bstack, rxscan339_loop1072, rx338_pos, 0
  rxscan339_done1074:
    add $I11, rx338_pos, 1
    gt $I11, rx338_eos, rx338_fail1068
    substr $S10, rx338_tgt, rx338_pos, 1
    ne $S10, ucs4:"z", rx338_fail1068
    add rx338_pos, 1
    repr_bind_attr_int rx338_cur, rx338_curclass, "$!pos", rx338_pos
    $P11 = rx338_cur."obs"("\\\\z as end-of-string matcher", "$")
    repr_get_attr_int $I11, $P11, rx338_curclass, "$!pos"
    lt $I11, 0, rx338_fail1068
    repr_get_attr_int rx338_pos, $P11, rx338_curclass, "$!pos"
    rx338_cur."!cursor_pass"(rx338_pos, "backslash:sym<z>", 'backtrack'=>1)
    .return (rx338_cur)
  rx338_restart1067:
    repr_get_attr_obj rx338_cstack, rx338_cur, rx338_curclass, "$!cstack"
  rx338_fail1068:
    unless rx338_bstack, rx338_done1066
    pop $I19, rx338_bstack
    if_null rx338_cstack, rx338_cstack_done1071
    unless rx338_cstack, rx338_cstack_done1071
    dec $I19
    set $P11, rx338_cstack[$I19]
  rx338_cstack_done1071:
    pop rx338_rep, rx338_bstack
    pop rx338_pos, rx338_bstack
    pop $I19, rx338_bstack
    lt rx338_pos, -1, rx338_done1066
    lt rx338_pos, 0, rx338_fail1068
    eq $I19, 0, rx338_fail1068
    nqp_islist $I20, rx338_cstack
    unless $I20, rx338_jump1069
    elements $I18, rx338_bstack
    le $I18, 0, rx338_cut1070
    dec $I18
    set $I18, rx338_bstack[$I18]
  rx338_cut1070:
    assign rx338_cstack, $I18
  rx338_jump1069:
    jump $I19
  rx338_done1066:
    rx338_cur."!cursor_fail"()
    .return (rx338_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Z>" :subid("cuid_82_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx341_tgt
    .local int rx341_pos
    .local int rx341_off
    .local int rx341_eos
    .local int rx341_rep
    .local pmc rx341_cur
    .local pmc rx341_curclass
    .local pmc rx341_bstack
    .local pmc rx341_cstack
    (rx341_cur, rx341_tgt, rx341_pos, rx341_curclass, rx341_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx341_cur
    length rx341_eos, rx341_tgt
    eq $I19, 1, rx341_restart1078
    gt rx341_pos, rx341_eos, rx341_fail1079
    repr_get_attr_int $I11, self, rx341_curclass, "$!from"
    ne $I11, -1, rxscan342_done1085
    goto rxscan342_scan1084
  rxscan342_loop1083:
    inc rx341_pos
    gt rx341_pos, rx341_eos, rx341_fail1079
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!from", rx341_pos
  rxscan342_scan1084:
    nqp_rxmark rx341_bstack, rxscan342_loop1083, rx341_pos, 0
  rxscan342_done1085:
    add $I11, rx341_pos, 1
    gt $I11, rx341_eos, rx341_fail1079
    substr $S10, rx341_tgt, rx341_pos, 1
    ne $S10, ucs4:"Z", rx341_fail1079
    add rx341_pos, 1
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!pos", rx341_pos
    $P11 = rx341_cur."obs"("\\\\Z as end-of-string matcher", "\\\\n?$")
    repr_get_attr_int $I11, $P11, rx341_curclass, "$!pos"
    lt $I11, 0, rx341_fail1079
    repr_get_attr_int rx341_pos, $P11, rx341_curclass, "$!pos"
    rx341_cur."!cursor_pass"(rx341_pos, "backslash:sym<Z>", 'backtrack'=>1)
    .return (rx341_cur)
  rx341_restart1078:
    repr_get_attr_obj rx341_cstack, rx341_cur, rx341_curclass, "$!cstack"
  rx341_fail1079:
    unless rx341_bstack, rx341_done1077
    pop $I19, rx341_bstack
    if_null rx341_cstack, rx341_cstack_done1082
    unless rx341_cstack, rx341_cstack_done1082
    dec $I19
    set $P11, rx341_cstack[$I19]
  rx341_cstack_done1082:
    pop rx341_rep, rx341_bstack
    pop rx341_pos, rx341_bstack
    pop $I19, rx341_bstack
    lt rx341_pos, -1, rx341_done1077
    lt rx341_pos, 0, rx341_fail1079
    eq $I19, 0, rx341_fail1079
    nqp_islist $I20, rx341_cstack
    unless $I20, rx341_jump1080
    elements $I18, rx341_bstack
    le $I18, 0, rx341_cut1081
    dec $I18
    set $I18, rx341_bstack[$I18]
  rx341_cut1081:
    assign rx341_cstack, $I18
  rx341_jump1080:
    jump $I19
  rx341_done1077:
    rx341_cur."!cursor_fail"()
    .return (rx341_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Q>" :subid("cuid_83_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx344_tgt
    .local int rx344_pos
    .local int rx344_off
    .local int rx344_eos
    .local int rx344_rep
    .local pmc rx344_cur
    .local pmc rx344_curclass
    .local pmc rx344_bstack
    .local pmc rx344_cstack
    (rx344_cur, rx344_tgt, rx344_pos, rx344_curclass, rx344_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx344_cur
    length rx344_eos, rx344_tgt
    eq $I19, 1, rx344_restart1089
    gt rx344_pos, rx344_eos, rx344_fail1090
    repr_get_attr_int $I11, self, rx344_curclass, "$!from"
    ne $I11, -1, rxscan345_done1096
    goto rxscan345_scan1095
  rxscan345_loop1094:
    inc rx344_pos
    gt rx344_pos, rx344_eos, rx344_fail1090
    repr_bind_attr_int rx344_cur, rx344_curclass, "$!from", rx344_pos
  rxscan345_scan1095:
    nqp_rxmark rx344_bstack, rxscan345_loop1094, rx344_pos, 0
  rxscan345_done1096:
    add $I11, rx344_pos, 1
    gt $I11, rx344_eos, rx344_fail1090
    substr $S10, rx344_tgt, rx344_pos, 1
    ne $S10, ucs4:"Q", rx344_fail1090
    add rx344_pos, 1
    repr_bind_attr_int rx344_cur, rx344_curclass, "$!pos", rx344_pos
    $P11 = rx344_cur."obs"("\\\\Q as quotemeta", "quotes or literal variable match")
    repr_get_attr_int $I11, $P11, rx344_curclass, "$!pos"
    lt $I11, 0, rx344_fail1090
    repr_get_attr_int rx344_pos, $P11, rx344_curclass, "$!pos"
    rx344_cur."!cursor_pass"(rx344_pos, "backslash:sym<Q>", 'backtrack'=>1)
    .return (rx344_cur)
  rx344_restart1089:
    repr_get_attr_obj rx344_cstack, rx344_cur, rx344_curclass, "$!cstack"
  rx344_fail1090:
    unless rx344_bstack, rx344_done1088
    pop $I19, rx344_bstack
    if_null rx344_cstack, rx344_cstack_done1093
    unless rx344_cstack, rx344_cstack_done1093
    dec $I19
    set $P11, rx344_cstack[$I19]
  rx344_cstack_done1093:
    pop rx344_rep, rx344_bstack
    pop rx344_pos, rx344_bstack
    pop $I19, rx344_bstack
    lt rx344_pos, -1, rx344_done1088
    lt rx344_pos, 0, rx344_fail1090
    eq $I19, 0, rx344_fail1090
    nqp_islist $I20, rx344_cstack
    unless $I20, rx344_jump1091
    elements $I18, rx344_bstack
    le $I18, 0, rx344_cut1092
    dec $I18
    set $I18, rx344_bstack[$I18]
  rx344_cut1092:
    assign rx344_cstack, $I18
  rx344_jump1091:
    jump $I19
  rx344_done1088:
    rx344_cur."!cursor_fail"()
    .return (rx344_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unrec>" :subid("cuid_84_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 245
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_187_1356803021.47401' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_85_1356803021.47401' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_188_1356803021.47401' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx347_tgt
    .local int rx347_pos
    .local int rx347_off
    .local int rx347_eos
    .local int rx347_rep
    .local pmc rx347_cur
    .local pmc rx347_curclass
    .local pmc rx347_bstack
    .local pmc rx347_cstack
    (rx347_cur, rx347_tgt, rx347_pos, rx347_curclass, rx347_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx347_cur
    length rx347_eos, rx347_tgt
    eq $I19, 1, rx347_restart1100
    gt rx347_pos, rx347_eos, rx347_fail1101
    repr_get_attr_int $I11, self, rx347_curclass, "$!from"
    ne $I11, -1, rxscan348_done1107
    goto rxscan348_scan1106
  rxscan348_loop1105:
    inc rx347_pos
    gt rx347_pos, rx347_eos, rx347_fail1101
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!from", rx347_pos
  rxscan348_scan1106:
    nqp_rxmark rx347_bstack, rxscan348_loop1105, rx347_pos, 0
  rxscan348_done1107:
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!pos", rx347_pos
    store_lex unicode:"$\x{a2}", rx347_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_187_1356803021.47401' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_85_1356803021.47401' 
    capture_lex $P5004
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!pos", rx347_pos
    $P11 = rx347_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx347_curclass, "$!pos"
    lt $I11, 0, rx347_fail1101
    nqp_rxmark rx347_bstack, rxsubrule351_pass1118, -1, 0
  rxsubrule351_pass1118:
    rx347_cstack = rx347_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx347_pos, $P11, rx347_curclass, "$!pos"
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!pos", rx347_pos
    store_lex unicode:"$\x{a2}", rx347_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_188_1356803021.47401' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx347_cur."!cursor_pass"(rx347_pos, "backslash:sym<unrec>", 'backtrack'=>1)
    .return (rx347_cur)
  rx347_restart1100:
    repr_get_attr_obj rx347_cstack, rx347_cur, rx347_curclass, "$!cstack"
  rx347_fail1101:
    unless rx347_bstack, rx347_done1099
    pop $I19, rx347_bstack
    if_null rx347_cstack, rx347_cstack_done1104
    unless rx347_cstack, rx347_cstack_done1104
    dec $I19
    set $P11, rx347_cstack[$I19]
  rx347_cstack_done1104:
    pop rx347_rep, rx347_bstack
    pop rx347_pos, rx347_bstack
    pop $I19, rx347_bstack
    lt rx347_pos, -1, rx347_done1099
    lt rx347_pos, 0, rx347_fail1101
    eq $I19, 0, rx347_fail1101
    nqp_islist $I20, rx347_cstack
    unless $I20, rx347_jump1102
    elements $I18, rx347_bstack
    le $I18, 0, rx347_cut1103
    dec $I18
    set $I18, rx347_bstack[$I18]
  rx347_cut1103:
    assign rx347_cstack, $I18
  rx347_jump1102:
    jump $I19
  rx347_done1099:
    rx347_cur."!cursor_fail"()
    .return (rx347_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_187_1356803021.47401") :anon :lex :outer("cuid_84_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 245

    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_85_1356803021.47401") :anon :lex :outer("cuid_84_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx349_tgt
    .local int rx349_pos
    .local int rx349_off
    .local int rx349_eos
    .local int rx349_rep
    .local pmc rx349_cur
    .local pmc rx349_curclass
    .local pmc rx349_bstack
    .local pmc rx349_cstack
    (rx349_cur, rx349_tgt, rx349_pos, rx349_curclass, rx349_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx349_cur
    length rx349_eos, rx349_tgt
    eq $I19, 1, rx349_restart1110
    gt rx349_pos, rx349_eos, rx349_fail1111
    repr_get_attr_int $I11, self, rx349_curclass, "$!from"
    ne $I11, -1, rxscan350_done1117
    goto rxscan350_scan1116
  rxscan350_loop1115:
    inc rx349_pos
    gt rx349_pos, rx349_eos, rx349_fail1111
    repr_bind_attr_int rx349_cur, rx349_curclass, "$!from", rx349_pos
  rxscan350_scan1116:
    nqp_rxmark rx349_bstack, rxscan350_loop1115, rx349_pos, 0
  rxscan350_done1117:
    ge rx349_pos, rx349_eos, rx349_fail1111
    is_cclass $I11, .CCLASS_WORD, rx349_tgt, rx349_pos
    unless $I11, rx349_fail1111
    add rx349_pos, 1
    rx349_cur."!cursor_pass"(rx349_pos, 'backtrack'=>1)
    .return (rx349_cur)
  rx349_restart1110:
    repr_get_attr_obj rx349_cstack, rx349_cur, rx349_curclass, "$!cstack"
  rx349_fail1111:
    unless rx349_bstack, rx349_done1109
    pop $I19, rx349_bstack
    if_null rx349_cstack, rx349_cstack_done1114
    unless rx349_cstack, rx349_cstack_done1114
    dec $I19
    set $P11, rx349_cstack[$I19]
  rx349_cstack_done1114:
    pop rx349_rep, rx349_bstack
    pop rx349_pos, rx349_bstack
    pop $I19, rx349_bstack
    lt rx349_pos, -1, rx349_done1109
    lt rx349_pos, 0, rx349_fail1111
    eq $I19, 0, rx349_fail1111
    nqp_islist $I20, rx349_cstack
    unless $I20, rx349_jump1112
    elements $I18, rx349_bstack
    le $I18, 0, rx349_cut1113
    dec $I18
    set $I18, rx349_bstack[$I18]
  rx349_cut1113:
    assign rx349_cstack, $I18
  rx349_jump1112:
    jump $I19
  rx349_done1109:
    rx349_cur."!cursor_fail"()
    .return (rx349_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_188_1356803021.47401") :anon :lex :outer("cuid_84_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 245

    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5004, "$/"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback1119
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1119:
    $P5006 = $P5003."Str"()
    $P5007 = $P5001."throw_unrecog_backslash_seq"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_86_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx352_tgt
    .local int rx352_pos
    .local int rx352_off
    .local int rx352_eos
    .local int rx352_rep
    .local pmc rx352_cur
    .local pmc rx352_curclass
    .local pmc rx352_bstack
    .local pmc rx352_cstack
    (rx352_cur, rx352_tgt, rx352_pos, rx352_curclass, rx352_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx352_cur
    length rx352_eos, rx352_tgt
    eq $I19, 1, rx352_restart1122
    gt rx352_pos, rx352_eos, rx352_fail1123
    repr_get_attr_int $I11, self, rx352_curclass, "$!from"
    ne $I11, -1, rxscan353_done1129
    goto rxscan353_scan1128
  rxscan353_loop1127:
    inc rx352_pos
    gt rx352_pos, rx352_eos, rx352_fail1123
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!from", rx352_pos
  rxscan353_scan1128:
    nqp_rxmark rx352_bstack, rxscan353_loop1127, rx352_pos, 0
  rxscan353_done1129:
    ge rx352_pos, rx352_eos, rx352_fail1123
    is_cclass $I11, .CCLASS_WORD, rx352_tgt, rx352_pos
    if $I11, rx352_fail1123
    add rx352_pos, 1
    rx352_cur."!cursor_pass"(rx352_pos, "backslash:sym<misc>", 'backtrack'=>1)
    .return (rx352_cur)
  rx352_restart1122:
    repr_get_attr_obj rx352_cstack, rx352_cur, rx352_curclass, "$!cstack"
  rx352_fail1123:
    unless rx352_bstack, rx352_done1121
    pop $I19, rx352_bstack
    if_null rx352_cstack, rx352_cstack_done1126
    unless rx352_cstack, rx352_cstack_done1126
    dec $I19
    set $P11, rx352_cstack[$I19]
  rx352_cstack_done1126:
    pop rx352_rep, rx352_bstack
    pop rx352_pos, rx352_bstack
    pop $I19, rx352_bstack
    lt rx352_pos, -1, rx352_done1121
    lt rx352_pos, 0, rx352_fail1123
    eq $I19, 0, rx352_fail1123
    nqp_islist $I20, rx352_cstack
    unless $I20, rx352_jump1124
    elements $I18, rx352_bstack
    le $I18, 0, rx352_cut1125
    dec $I18
    set $I18, rx352_bstack[$I18]
  rx352_cut1125:
    assign rx352_cstack, $I18
  rx352_jump1124:
    jump $I19
  rx352_done1121:
    rx352_cur."!cursor_fail"()
    .return (rx352_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion" :subid("cuid_87_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 248
    .param pmc self 
    $P5001 = self."!protoregex"("assertion")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_88_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 250
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_89_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx354_tgt
    .local int rx354_pos
    .local int rx354_off
    .local int rx354_eos
    .local int rx354_rep
    .local pmc rx354_cur
    .local pmc rx354_curclass
    .local pmc rx354_bstack
    .local pmc rx354_cstack
    (rx354_cur, rx354_tgt, rx354_pos, rx354_curclass, rx354_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx354_cur
    length rx354_eos, rx354_tgt
    eq $I19, 1, rx354_restart1132
    gt rx354_pos, rx354_eos, rx354_fail1133
    repr_get_attr_int $I11, self, rx354_curclass, "$!from"
    ne $I11, -1, rxscan355_done1139
    goto rxscan355_scan1138
  rxscan355_loop1137:
    inc rx354_pos
    gt rx354_pos, rx354_eos, rx354_fail1133
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!from", rx354_pos
  rxscan355_scan1138:
    nqp_rxmark rx354_bstack, rxscan355_loop1137, rx354_pos, 0
  rxscan355_done1139:
    add $I11, rx354_pos, 1
    gt $I11, rx354_eos, rx354_fail1133
    substr $S10, rx354_tgt, rx354_pos, 1
    ne $S10, ucs4:"?", rx354_fail1133
    add rx354_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt356_01141
    nqp_push_label $P11, alt356_11152
    nqp_rxmark rx354_bstack, alt356_end1140, -1, 0
    rx354_cur."!alt"(rx354_pos, "alt_nfa__15_1356803022.50272", $P11)
    goto rx354_fail1133
  alt356_01141:
    .const 'Sub' $P5001 = 'cuid_89_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1133
    goto alt356_end1140
  alt356_11152:
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1133
    nqp_rxmark rx354_bstack, rxsubrule359_pass1153, -1, 0
  rxsubrule359_pass1153:
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    goto alt356_end1140
  alt356_end1140:
    nqp_rxcommit rx354_bstack, alt356_end1140
    rx354_cur."!cursor_pass"(rx354_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx354_cur)
  rx354_restart1132:
    repr_get_attr_obj rx354_cstack, rx354_cur, rx354_curclass, "$!cstack"
  rx354_fail1133:
    unless rx354_bstack, rx354_done1131
    pop $I19, rx354_bstack
    if_null rx354_cstack, rx354_cstack_done1136
    unless rx354_cstack, rx354_cstack_done1136
    dec $I19
    set $P11, rx354_cstack[$I19]
  rx354_cstack_done1136:
    pop rx354_rep, rx354_bstack
    pop rx354_pos, rx354_bstack
    pop $I19, rx354_bstack
    lt rx354_pos, -1, rx354_done1131
    lt rx354_pos, 0, rx354_fail1133
    eq $I19, 0, rx354_fail1133
    nqp_islist $I20, rx354_cstack
    unless $I20, rx354_jump1134
    elements $I18, rx354_bstack
    le $I18, 0, rx354_cut1135
    dec $I18
    set $I18, rx354_bstack[$I18]
  rx354_cut1135:
    assign rx354_cstack, $I18
  rx354_jump1134:
    jump $I19
  rx354_done1131:
    rx354_cur."!cursor_fail"()
    .return (rx354_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1356803021.47401") :anon :lex :outer("cuid_88_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx357_tgt
    .local int rx357_pos
    .local int rx357_off
    .local int rx357_eos
    .local int rx357_rep
    .local pmc rx357_cur
    .local pmc rx357_curclass
    .local pmc rx357_bstack
    .local pmc rx357_cstack
    (rx357_cur, rx357_tgt, rx357_pos, rx357_curclass, rx357_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx357_cur
    length rx357_eos, rx357_tgt
    eq $I19, 1, rx357_restart1144
    gt rx357_pos, rx357_eos, rx357_fail1145
    repr_get_attr_int $I11, self, rx357_curclass, "$!from"
    ne $I11, -1, rxscan358_done1151
    goto rxscan358_scan1150
  rxscan358_loop1149:
    inc rx357_pos
    gt rx357_pos, rx357_eos, rx357_fail1145
    repr_bind_attr_int rx357_cur, rx357_curclass, "$!from", rx357_pos
  rxscan358_scan1150:
    nqp_rxmark rx357_bstack, rxscan358_loop1149, rx357_pos, 0
  rxscan358_done1151:
    add $I11, rx357_pos, 1
    gt $I11, rx357_eos, rx357_fail1145
    substr $S10, rx357_tgt, rx357_pos, 1
    ne $S10, ucs4:">", rx357_fail1145
    add rx357_pos, 1
    rx357_cur."!cursor_pass"(rx357_pos, 'backtrack'=>1)
    .return (rx357_cur)
  rx357_restart1144:
    repr_get_attr_obj rx357_cstack, rx357_cur, rx357_curclass, "$!cstack"
  rx357_fail1145:
    unless rx357_bstack, rx357_done1143
    pop $I19, rx357_bstack
    if_null rx357_cstack, rx357_cstack_done1148
    unless rx357_cstack, rx357_cstack_done1148
    dec $I19
    set $P11, rx357_cstack[$I19]
  rx357_cstack_done1148:
    pop rx357_rep, rx357_bstack
    pop rx357_pos, rx357_bstack
    pop $I19, rx357_bstack
    lt rx357_pos, -1, rx357_done1143
    lt rx357_pos, 0, rx357_fail1145
    eq $I19, 0, rx357_fail1145
    nqp_islist $I20, rx357_cstack
    unless $I20, rx357_jump1146
    elements $I18, rx357_bstack
    le $I18, 0, rx357_cut1147
    dec $I18
    set $I18, rx357_bstack[$I18]
  rx357_cut1147:
    assign rx357_cstack, $I18
  rx357_jump1146:
    jump $I19
  rx357_done1143:
    rx357_cur."!cursor_fail"()
    .return (rx357_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_90_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 251
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_91_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx360_tgt
    .local int rx360_pos
    .local int rx360_off
    .local int rx360_eos
    .local int rx360_rep
    .local pmc rx360_cur
    .local pmc rx360_curclass
    .local pmc rx360_bstack
    .local pmc rx360_cstack
    (rx360_cur, rx360_tgt, rx360_pos, rx360_curclass, rx360_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx360_cur
    length rx360_eos, rx360_tgt
    eq $I19, 1, rx360_restart1156
    gt rx360_pos, rx360_eos, rx360_fail1157
    repr_get_attr_int $I11, self, rx360_curclass, "$!from"
    ne $I11, -1, rxscan361_done1163
    goto rxscan361_scan1162
  rxscan361_loop1161:
    inc rx360_pos
    gt rx360_pos, rx360_eos, rx360_fail1157
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!from", rx360_pos
  rxscan361_scan1162:
    nqp_rxmark rx360_bstack, rxscan361_loop1161, rx360_pos, 0
  rxscan361_done1163:
    add $I11, rx360_pos, 1
    gt $I11, rx360_eos, rx360_fail1157
    substr $S10, rx360_tgt, rx360_pos, 1
    ne $S10, ucs4:"!", rx360_fail1157
    add rx360_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt362_01165
    nqp_push_label $P11, alt362_11176
    nqp_rxmark rx360_bstack, alt362_end1164, -1, 0
    rx360_cur."!alt"(rx360_pos, "alt_nfa__16_1356803022.51388", $P11)
    goto rx360_fail1157
  alt362_01165:
    .const 'Sub' $P5001 = 'cuid_91_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1157
    goto alt362_end1164
  alt362_11176:
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1157
    nqp_rxmark rx360_bstack, rxsubrule365_pass1177, -1, 0
  rxsubrule365_pass1177:
    rx360_cstack = rx360_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    goto alt362_end1164
  alt362_end1164:
    nqp_rxcommit rx360_bstack, alt362_end1164
    rx360_cur."!cursor_pass"(rx360_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx360_cur)
  rx360_restart1156:
    repr_get_attr_obj rx360_cstack, rx360_cur, rx360_curclass, "$!cstack"
  rx360_fail1157:
    unless rx360_bstack, rx360_done1155
    pop $I19, rx360_bstack
    if_null rx360_cstack, rx360_cstack_done1160
    unless rx360_cstack, rx360_cstack_done1160
    dec $I19
    set $P11, rx360_cstack[$I19]
  rx360_cstack_done1160:
    pop rx360_rep, rx360_bstack
    pop rx360_pos, rx360_bstack
    pop $I19, rx360_bstack
    lt rx360_pos, -1, rx360_done1155
    lt rx360_pos, 0, rx360_fail1157
    eq $I19, 0, rx360_fail1157
    nqp_islist $I20, rx360_cstack
    unless $I20, rx360_jump1158
    elements $I18, rx360_bstack
    le $I18, 0, rx360_cut1159
    dec $I18
    set $I18, rx360_bstack[$I18]
  rx360_cut1159:
    assign rx360_cstack, $I18
  rx360_jump1158:
    jump $I19
  rx360_done1155:
    rx360_cur."!cursor_fail"()
    .return (rx360_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_91_1356803021.47401") :anon :lex :outer("cuid_90_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx363_tgt
    .local int rx363_pos
    .local int rx363_off
    .local int rx363_eos
    .local int rx363_rep
    .local pmc rx363_cur
    .local pmc rx363_curclass
    .local pmc rx363_bstack
    .local pmc rx363_cstack
    (rx363_cur, rx363_tgt, rx363_pos, rx363_curclass, rx363_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx363_cur
    length rx363_eos, rx363_tgt
    eq $I19, 1, rx363_restart1168
    gt rx363_pos, rx363_eos, rx363_fail1169
    repr_get_attr_int $I11, self, rx363_curclass, "$!from"
    ne $I11, -1, rxscan364_done1175
    goto rxscan364_scan1174
  rxscan364_loop1173:
    inc rx363_pos
    gt rx363_pos, rx363_eos, rx363_fail1169
    repr_bind_attr_int rx363_cur, rx363_curclass, "$!from", rx363_pos
  rxscan364_scan1174:
    nqp_rxmark rx363_bstack, rxscan364_loop1173, rx363_pos, 0
  rxscan364_done1175:
    add $I11, rx363_pos, 1
    gt $I11, rx363_eos, rx363_fail1169
    substr $S10, rx363_tgt, rx363_pos, 1
    ne $S10, ucs4:">", rx363_fail1169
    add rx363_pos, 1
    rx363_cur."!cursor_pass"(rx363_pos, 'backtrack'=>1)
    .return (rx363_cur)
  rx363_restart1168:
    repr_get_attr_obj rx363_cstack, rx363_cur, rx363_curclass, "$!cstack"
  rx363_fail1169:
    unless rx363_bstack, rx363_done1167
    pop $I19, rx363_bstack
    if_null rx363_cstack, rx363_cstack_done1172
    unless rx363_cstack, rx363_cstack_done1172
    dec $I19
    set $P11, rx363_cstack[$I19]
  rx363_cstack_done1172:
    pop rx363_rep, rx363_bstack
    pop rx363_pos, rx363_bstack
    pop $I19, rx363_bstack
    lt rx363_pos, -1, rx363_done1167
    lt rx363_pos, 0, rx363_fail1169
    eq $I19, 0, rx363_fail1169
    nqp_islist $I20, rx363_cstack
    unless $I20, rx363_jump1170
    elements $I18, rx363_bstack
    le $I18, 0, rx363_cut1171
    dec $I18
    set $I18, rx363_bstack[$I18]
  rx363_cut1171:
    assign rx363_cstack, $I18
  rx363_jump1170:
    jump $I19
  rx363_done1167:
    rx363_cur."!cursor_fail"()
    .return (rx363_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_92_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 252
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx366_tgt
    .local int rx366_pos
    .local int rx366_off
    .local int rx366_eos
    .local int rx366_rep
    .local pmc rx366_cur
    .local pmc rx366_curclass
    .local pmc rx366_bstack
    .local pmc rx366_cstack
    (rx366_cur, rx366_tgt, rx366_pos, rx366_curclass, rx366_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx366_cur
    length rx366_eos, rx366_tgt
    eq $I19, 1, rx366_restart1180
    gt rx366_pos, rx366_eos, rx366_fail1181
    repr_get_attr_int $I11, self, rx366_curclass, "$!from"
    ne $I11, -1, rxscan367_done1187
    goto rxscan367_scan1186
  rxscan367_loop1185:
    inc rx366_pos
    gt rx366_pos, rx366_eos, rx366_fail1181
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!from", rx366_pos
  rxscan367_scan1186:
    nqp_rxmark rx366_bstack, rxscan367_loop1185, rx366_pos, 0
  rxscan367_done1187:
    add $I11, rx366_pos, 1
    gt $I11, rx366_eos, rx366_fail1181
    substr $S10, rx366_tgt, rx366_pos, 1
    ne $S10, ucs4:"|", rx366_fail1181
    add rx366_pos, 1
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    lt $I11, 0, rx366_fail1181
    nqp_rxmark rx366_bstack, rxsubrule368_pass1188, -1, 0
  rxsubrule368_pass1188:
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx366_pos, $P11, rx366_curclass, "$!pos"
    rx366_cur."!cursor_pass"(rx366_pos, "assertion:sym<|>", 'backtrack'=>1)
    .return (rx366_cur)
  rx366_restart1180:
    repr_get_attr_obj rx366_cstack, rx366_cur, rx366_curclass, "$!cstack"
  rx366_fail1181:
    unless rx366_bstack, rx366_done1179
    pop $I19, rx366_bstack
    if_null rx366_cstack, rx366_cstack_done1184
    unless rx366_cstack, rx366_cstack_done1184
    dec $I19
    set $P11, rx366_cstack[$I19]
  rx366_cstack_done1184:
    pop rx366_rep, rx366_bstack
    pop rx366_pos, rx366_bstack
    pop $I19, rx366_bstack
    lt rx366_pos, -1, rx366_done1179
    lt rx366_pos, 0, rx366_fail1181
    eq $I19, 0, rx366_fail1181
    nqp_islist $I20, rx366_cstack
    unless $I20, rx366_jump1182
    elements $I18, rx366_bstack
    le $I18, 0, rx366_cut1183
    dec $I18
    set $I18, rx366_bstack[$I18]
  rx366_cut1183:
    assign rx366_cstack, $I18
  rx366_jump1182:
    jump $I19
  rx366_done1179:
    rx366_cur."!cursor_fail"()
    .return (rx366_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_93_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx369_tgt
    .local int rx369_pos
    .local int rx369_off
    .local int rx369_eos
    .local int rx369_rep
    .local pmc rx369_cur
    .local pmc rx369_curclass
    .local pmc rx369_bstack
    .local pmc rx369_cstack
    (rx369_cur, rx369_tgt, rx369_pos, rx369_curclass, rx369_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx369_cur
    length rx369_eos, rx369_tgt
    eq $I19, 1, rx369_restart1191
    gt rx369_pos, rx369_eos, rx369_fail1192
    repr_get_attr_int $I11, self, rx369_curclass, "$!from"
    ne $I11, -1, rxscan370_done1198
    goto rxscan370_scan1197
  rxscan370_loop1196:
    inc rx369_pos
    gt rx369_pos, rx369_eos, rx369_fail1192
    repr_bind_attr_int rx369_cur, rx369_curclass, "$!from", rx369_pos
  rxscan370_scan1197:
    nqp_rxmark rx369_bstack, rxscan370_loop1196, rx369_pos, 0
  rxscan370_done1198:
    add $I11, rx369_pos, 1
    gt $I11, rx369_eos, rx369_fail1192
    substr $S10, rx369_tgt, rx369_pos, 1
    ne $S10, ucs4:".", rx369_fail1192
    add rx369_pos, 1
    repr_bind_attr_int rx369_cur, rx369_curclass, "$!pos", rx369_pos
    $P11 = rx369_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx369_curclass, "$!pos"
    lt $I11, 0, rx369_fail1192
    nqp_rxmark rx369_bstack, rxsubrule371_pass1199, -1, 0
  rxsubrule371_pass1199:
    rx369_cstack = rx369_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx369_pos, $P11, rx369_curclass, "$!pos"
    rx369_cur."!cursor_pass"(rx369_pos, "assertion:sym<method>", 'backtrack'=>1)
    .return (rx369_cur)
  rx369_restart1191:
    repr_get_attr_obj rx369_cstack, rx369_cur, rx369_curclass, "$!cstack"
  rx369_fail1192:
    unless rx369_bstack, rx369_done1190
    pop $I19, rx369_bstack
    if_null rx369_cstack, rx369_cstack_done1195
    unless rx369_cstack, rx369_cstack_done1195
    dec $I19
    set $P11, rx369_cstack[$I19]
  rx369_cstack_done1195:
    pop rx369_rep, rx369_bstack
    pop rx369_pos, rx369_bstack
    pop $I19, rx369_bstack
    lt rx369_pos, -1, rx369_done1190
    lt rx369_pos, 0, rx369_fail1192
    eq $I19, 0, rx369_fail1192
    nqp_islist $I20, rx369_cstack
    unless $I20, rx369_jump1193
    elements $I18, rx369_bstack
    le $I18, 0, rx369_cut1194
    dec $I18
    set $I18, rx369_bstack[$I18]
  rx369_cut1194:
    assign rx369_cstack, $I18
  rx369_jump1193:
    jump $I19
  rx369_done1190:
    rx369_cur."!cursor_fail"()
    .return (rx369_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_94_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 258
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_95_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx372_tgt
    .local int rx372_pos
    .local int rx372_off
    .local int rx372_eos
    .local int rx372_rep
    .local pmc rx372_cur
    .local pmc rx372_curclass
    .local pmc rx372_bstack
    .local pmc rx372_cstack
    (rx372_cur, rx372_tgt, rx372_pos, rx372_curclass, rx372_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx372_cur
    length rx372_eos, rx372_tgt
    eq $I19, 1, rx372_restart1202
    gt rx372_pos, rx372_eos, rx372_fail1203
    repr_get_attr_int $I11, self, rx372_curclass, "$!from"
    ne $I11, -1, rxscan373_done1209
    goto rxscan373_scan1208
  rxscan373_loop1207:
    inc rx372_pos
    gt rx372_pos, rx372_eos, rx372_fail1203
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!from", rx372_pos
  rxscan373_scan1208:
    nqp_rxmark rx372_bstack, rxscan373_loop1207, rx372_pos, 0
  rxscan373_done1209:
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1203
    nqp_rxmark rx372_bstack, rxsubrule374_pass1210, -1, 0
  rxsubrule374_pass1210:
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx372_pos, $P11, rx372_curclass, "$!pos"
    nqp_rxmark rx372_bstack, rxquantr375_done1212, rx372_pos, 0
  rxquantr375_loop1211:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt376_01214
    nqp_push_label $P11, alt376_11225
    nqp_push_label $P11, alt376_21227
    nqp_push_label $P11, alt376_31229
    nqp_push_label $P11, alt376_41231
    nqp_rxmark rx372_bstack, alt376_end1213, -1, 0
    rx372_cur."!alt"(rx372_pos, "alt_nfa__17_1356803022.54646", $P11)
    goto rx372_fail1203
  alt376_01214:
    .const 'Sub' $P5001 = 'cuid_95_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1203
    goto alt376_end1213
  alt376_11225:
    add $I11, rx372_pos, 1
    gt $I11, rx372_eos, rx372_fail1203
    substr $S10, rx372_tgt, rx372_pos, 1
    ne $S10, ucs4:"=", rx372_fail1203
    add rx372_pos, 1
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1203
    nqp_rxmark rx372_bstack, rxsubrule379_pass1226, -1, 0
  rxsubrule379_pass1226:
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx372_pos, $P11, rx372_curclass, "$!pos"
    goto alt376_end1213
  alt376_21227:
    add $I11, rx372_pos, 1
    gt $I11, rx372_eos, rx372_fail1203
    substr $S10, rx372_tgt, rx372_pos, 1
    ne $S10, ucs4:":", rx372_fail1203
    add rx372_pos, 1
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1203
    nqp_rxmark rx372_bstack, rxsubrule380_pass1228, -1, 0
  rxsubrule380_pass1228:
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx372_pos, $P11, rx372_curclass, "$!pos"
    goto alt376_end1213
  alt376_31229:
    add $I11, rx372_pos, 1
    gt $I11, rx372_eos, rx372_fail1203
    substr $S10, rx372_tgt, rx372_pos, 1
    ne $S10, ucs4:"(", rx372_fail1203
    add rx372_pos, 1
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1203
    nqp_rxmark rx372_bstack, rxsubrule381_pass1230, -1, 0
  rxsubrule381_pass1230:
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx372_pos, $P11, rx372_curclass, "$!pos"
    add $I11, rx372_pos, 1
    gt $I11, rx372_eos, rx372_fail1203
    substr $S10, rx372_tgt, rx372_pos, 1
    ne $S10, ucs4:")", rx372_fail1203
    add rx372_pos, 1
    goto alt376_end1213
  alt376_41231:
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1203
    repr_get_attr_int rx372_pos, $P11, rx372_curclass, "$!pos"
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1203
    nqp_rxmark rx372_bstack, rxsubrule383_pass1233, -1, 0
  rxsubrule383_pass1233:
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx372_pos, $P11, rx372_curclass, "$!pos"
    goto alt376_end1213
  alt376_end1213:
    nqp_rxpeek $I19, rx372_bstack, rxquantr375_done1212
    inc $I19
    inc $I19
    set rx372_rep, rx372_bstack[$I19]
    nqp_rxcommit rx372_bstack, rxquantr375_done1212
    inc rx372_rep
  rxquantr375_done1212:
    rx372_cur."!cursor_pass"(rx372_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx372_cur)
  rx372_restart1202:
    repr_get_attr_obj rx372_cstack, rx372_cur, rx372_curclass, "$!cstack"
  rx372_fail1203:
    unless rx372_bstack, rx372_done1201
    pop $I19, rx372_bstack
    if_null rx372_cstack, rx372_cstack_done1206
    unless rx372_cstack, rx372_cstack_done1206
    dec $I19
    set $P11, rx372_cstack[$I19]
  rx372_cstack_done1206:
    pop rx372_rep, rx372_bstack
    pop rx372_pos, rx372_bstack
    pop $I19, rx372_bstack
    lt rx372_pos, -1, rx372_done1201
    lt rx372_pos, 0, rx372_fail1203
    eq $I19, 0, rx372_fail1203
    nqp_islist $I20, rx372_cstack
    unless $I20, rx372_jump1204
    elements $I18, rx372_bstack
    le $I18, 0, rx372_cut1205
    dec $I18
    set $I18, rx372_bstack[$I18]
  rx372_cut1205:
    assign rx372_cstack, $I18
  rx372_jump1204:
    jump $I19
  rx372_done1201:
    rx372_cur."!cursor_fail"()
    .return (rx372_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_95_1356803021.47401") :anon :lex :outer("cuid_94_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx377_tgt
    .local int rx377_pos
    .local int rx377_off
    .local int rx377_eos
    .local int rx377_rep
    .local pmc rx377_cur
    .local pmc rx377_curclass
    .local pmc rx377_bstack
    .local pmc rx377_cstack
    (rx377_cur, rx377_tgt, rx377_pos, rx377_curclass, rx377_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx377_cur
    length rx377_eos, rx377_tgt
    eq $I19, 1, rx377_restart1217
    gt rx377_pos, rx377_eos, rx377_fail1218
    repr_get_attr_int $I11, self, rx377_curclass, "$!from"
    ne $I11, -1, rxscan378_done1224
    goto rxscan378_scan1223
  rxscan378_loop1222:
    inc rx377_pos
    gt rx377_pos, rx377_eos, rx377_fail1218
    repr_bind_attr_int rx377_cur, rx377_curclass, "$!from", rx377_pos
  rxscan378_scan1223:
    nqp_rxmark rx377_bstack, rxscan378_loop1222, rx377_pos, 0
  rxscan378_done1224:
    add $I11, rx377_pos, 1
    gt $I11, rx377_eos, rx377_fail1218
    substr $S10, rx377_tgt, rx377_pos, 1
    ne $S10, ucs4:">", rx377_fail1218
    add rx377_pos, 1
    rx377_cur."!cursor_pass"(rx377_pos, 'backtrack'=>1)
    .return (rx377_cur)
  rx377_restart1217:
    repr_get_attr_obj rx377_cstack, rx377_cur, rx377_curclass, "$!cstack"
  rx377_fail1218:
    unless rx377_bstack, rx377_done1216
    pop $I19, rx377_bstack
    if_null rx377_cstack, rx377_cstack_done1221
    unless rx377_cstack, rx377_cstack_done1221
    dec $I19
    set $P11, rx377_cstack[$I19]
  rx377_cstack_done1221:
    pop rx377_rep, rx377_bstack
    pop rx377_pos, rx377_bstack
    pop $I19, rx377_bstack
    lt rx377_pos, -1, rx377_done1216
    lt rx377_pos, 0, rx377_fail1218
    eq $I19, 0, rx377_fail1218
    nqp_islist $I20, rx377_cstack
    unless $I20, rx377_jump1219
    elements $I18, rx377_bstack
    le $I18, 0, rx377_cut1220
    dec $I18
    set $I18, rx377_bstack[$I18]
  rx377_cut1220:
    assign rx377_cstack, $I18
  rx377_jump1219:
    jump $I19
  rx377_done1216:
    rx377_cur."!cursor_fail"()
    .return (rx377_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_96_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 269
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_97_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx384_tgt
    .local int rx384_pos
    .local int rx384_off
    .local int rx384_eos
    .local int rx384_rep
    .local pmc rx384_cur
    .local pmc rx384_curclass
    .local pmc rx384_bstack
    .local pmc rx384_cstack
    (rx384_cur, rx384_tgt, rx384_pos, rx384_curclass, rx384_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx384_cur
    length rx384_eos, rx384_tgt
    eq $I19, 1, rx384_restart1236
    gt rx384_pos, rx384_eos, rx384_fail1237
    repr_get_attr_int $I11, self, rx384_curclass, "$!from"
    ne $I11, -1, rxscan385_done1243
    goto rxscan385_scan1242
  rxscan385_loop1241:
    inc rx384_pos
    gt rx384_pos, rx384_eos, rx384_fail1237
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!from", rx384_pos
  rxscan385_scan1242:
    nqp_rxmark rx384_bstack, rxscan385_loop1241, rx384_pos, 0
  rxscan385_done1243:
    .const 'Sub' $P5001 = 'cuid_97_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1237
    nqp_rxmark rx384_bstack, rxquantr389_done1260, -1, 0
  rxquantr389_loop1259:
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."cclass_elem"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1237
    goto rxsubrule390_pass1261
  rxsubrule390_back1262:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1237
  rxsubrule390_pass1261:
    rx384_cstack = rx384_cur."!cursor_capture"($P11, "cclass_elem")
    set_addr $I11, rxsubrule390_back1262
    push rx384_bstack, $I11
    push rx384_bstack, 0
    push rx384_bstack, rx384_pos
    elements $I11, rx384_cstack
    push rx384_bstack, $I11
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    nqp_rxpeek $I19, rx384_bstack, rxquantr389_done1260
    inc $I19
    inc $I19
    set rx384_rep, rx384_bstack[$I19]
    nqp_rxcommit rx384_bstack, rxquantr389_done1260
    inc rx384_rep
    nqp_rxmark rx384_bstack, rxquantr389_done1260, rx384_pos, rx384_rep
    goto rxquantr389_loop1259
  rxquantr389_done1260:
    rx384_cur."!cursor_pass"(rx384_pos, "assertion:sym<[>", 'backtrack'=>1)
    .return (rx384_cur)
  rx384_restart1236:
    repr_get_attr_obj rx384_cstack, rx384_cur, rx384_curclass, "$!cstack"
  rx384_fail1237:
    unless rx384_bstack, rx384_done1235
    pop $I19, rx384_bstack
    if_null rx384_cstack, rx384_cstack_done1240
    unless rx384_cstack, rx384_cstack_done1240
    dec $I19
    set $P11, rx384_cstack[$I19]
  rx384_cstack_done1240:
    pop rx384_rep, rx384_bstack
    pop rx384_pos, rx384_bstack
    pop $I19, rx384_bstack
    lt rx384_pos, -1, rx384_done1235
    lt rx384_pos, 0, rx384_fail1237
    eq $I19, 0, rx384_fail1237
    nqp_islist $I20, rx384_cstack
    unless $I20, rx384_jump1238
    elements $I18, rx384_bstack
    le $I18, 0, rx384_cut1239
    dec $I18
    set $I18, rx384_bstack[$I18]
  rx384_cut1239:
    assign rx384_cstack, $I18
  rx384_jump1238:
    jump $I19
  rx384_done1235:
    rx384_cur."!cursor_fail"()
    .return (rx384_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_97_1356803021.47401") :anon :lex :outer("cuid_96_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx386_tgt
    .local int rx386_pos
    .local int rx386_off
    .local int rx386_eos
    .local int rx386_rep
    .local pmc rx386_cur
    .local pmc rx386_curclass
    .local pmc rx386_bstack
    .local pmc rx386_cstack
    (rx386_cur, rx386_tgt, rx386_pos, rx386_curclass, rx386_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx386_cur
    length rx386_eos, rx386_tgt
    eq $I19, 1, rx386_restart1246
    gt rx386_pos, rx386_eos, rx386_fail1247
    repr_get_attr_int $I11, self, rx386_curclass, "$!from"
    ne $I11, -1, rxscan387_done1253
    goto rxscan387_scan1252
  rxscan387_loop1251:
    inc rx386_pos
    gt rx386_pos, rx386_eos, rx386_fail1247
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!from", rx386_pos
  rxscan387_scan1252:
    nqp_rxmark rx386_bstack, rxscan387_loop1251, rx386_pos, 0
  rxscan387_done1253:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt388_01255
    nqp_push_label $P11, alt388_11256
    nqp_push_label $P11, alt388_21257
    nqp_push_label $P11, alt388_31258
    nqp_rxmark rx386_bstack, alt388_end1254, -1, 0
    rx386_cur."!alt"(rx386_pos, "alt_nfa__18_1356803022.5546", $P11)
    goto rx386_fail1247
  alt388_01255:
    add $I11, rx386_pos, 1
    gt $I11, rx386_eos, rx386_fail1247
    substr $S10, rx386_tgt, rx386_pos, 1
    ne $S10, ucs4:"[", rx386_fail1247
    add rx386_pos, 1
    goto alt388_end1254
  alt388_11256:
    add $I11, rx386_pos, 1
    gt $I11, rx386_eos, rx386_fail1247
    substr $S10, rx386_tgt, rx386_pos, 1
    ne $S10, ucs4:"+", rx386_fail1247
    add rx386_pos, 1
    goto alt388_end1254
  alt388_21257:
    add $I11, rx386_pos, 1
    gt $I11, rx386_eos, rx386_fail1247
    substr $S10, rx386_tgt, rx386_pos, 1
    ne $S10, ucs4:"-", rx386_fail1247
    add rx386_pos, 1
    goto alt388_end1254
  alt388_31258:
    add $I11, rx386_pos, 1
    gt $I11, rx386_eos, rx386_fail1247
    substr $S10, rx386_tgt, rx386_pos, 1
    ne $S10, ucs4:":", rx386_fail1247
    add rx386_pos, 1
    goto alt388_end1254
  alt388_end1254:
    rx386_cur."!cursor_pass"(rx386_pos, 'backtrack'=>1)
    .return (rx386_cur)
  rx386_restart1246:
    repr_get_attr_obj rx386_cstack, rx386_cur, rx386_curclass, "$!cstack"
  rx386_fail1247:
    unless rx386_bstack, rx386_done1245
    pop $I19, rx386_bstack
    if_null rx386_cstack, rx386_cstack_done1250
    unless rx386_cstack, rx386_cstack_done1250
    dec $I19
    set $P11, rx386_cstack[$I19]
  rx386_cstack_done1250:
    pop rx386_rep, rx386_bstack
    pop rx386_pos, rx386_bstack
    pop $I19, rx386_bstack
    lt rx386_pos, -1, rx386_done1245
    lt rx386_pos, 0, rx386_fail1247
    eq $I19, 0, rx386_fail1247
    nqp_islist $I20, rx386_cstack
    unless $I20, rx386_jump1248
    elements $I18, rx386_bstack
    le $I18, 0, rx386_cut1249
    dec $I18
    set $I18, rx386_bstack[$I18]
  rx386_cut1249:
    assign rx386_cstack, $I18
  rx386_jump1248:
    jump $I19
  rx386_done1245:
    rx386_cur."!cursor_fail"()
    .return (rx386_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_98_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 271
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_104_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx391_tgt
    .local int rx391_pos
    .local int rx391_off
    .local int rx391_eos
    .local int rx391_rep
    .local pmc rx391_cur
    .local pmc rx391_curclass
    .local pmc rx391_bstack
    .local pmc rx391_cstack
    (rx391_cur, rx391_tgt, rx391_pos, rx391_curclass, rx391_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx391_cur
    length rx391_eos, rx391_tgt
    eq $I19, 1, rx391_restart1265
    gt rx391_pos, rx391_eos, rx391_fail1266
    repr_get_attr_int $I11, self, rx391_curclass, "$!from"
    ne $I11, -1, rxscan392_done1272
    goto rxscan392_scan1271
  rxscan392_loop1270:
    inc rx391_pos
    gt rx391_pos, rx391_eos, rx391_fail1266
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!from", rx391_pos
  rxscan392_scan1271:
    nqp_rxmark rx391_bstack, rxscan392_loop1270, rx391_pos, 0
  rxscan392_done1272:
    nqp_rxmark rx391_bstack, rxcap393_fail1274, rx391_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt394_01276
    nqp_push_label $P11, alt394_11277
    nqp_push_label $P11, alt394_21278
    nqp_rxmark rx391_bstack, alt394_end1275, -1, 0
    rx391_cur."!alt"(rx391_pos, "alt_nfa__19_1356803022.61783", $P11)
    goto rx391_fail1266
  alt394_01276:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1266
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:"+", rx391_fail1266
    add rx391_pos, 1
    goto alt394_end1275
  alt394_11277:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1266
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:"-", rx391_fail1266
    add rx391_pos, 1
    goto alt394_end1275
  alt394_21278:
    goto alt394_end1275
  alt394_end1275:
    nqp_rxcommit rx391_bstack, alt394_end1275
    nqp_rxpeek $I19, rx391_bstack, rxcap393_fail1274
    inc $I19
    set $I11, rx391_bstack[$I19]
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx391_pos)
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "sign")
    goto rxcap393_done1273
  rxcap393_fail1274:
    goto rx391_fail1266
  rxcap393_done1273:
    nqp_rxmark rx391_bstack, rxquantr396_done1281, rx391_pos, 0
  rxquantr396_loop1280:
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1266
    goto rxsubrule397_pass1282
  rxsubrule397_back1283:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1266
  rxsubrule397_pass1282:
    rx391_cstack = rx391_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule397_back1283
    push rx391_bstack, $I11
    push rx391_bstack, 0
    push rx391_bstack, rx391_pos
    elements $I11, rx391_cstack
    push rx391_bstack, $I11
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    nqp_rxpeek $I19, rx391_bstack, rxquantr396_done1281
    inc $I19
    inc $I19
    set rx391_rep, rx391_bstack[$I19]
    nqp_rxcommit rx391_bstack, rxquantr396_done1281
    inc rx391_rep
  rxquantr396_done1281:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt398_01285
    nqp_push_label $P11, alt398_11384
    nqp_push_label $P11, alt398_21389
    nqp_rxmark rx391_bstack, alt398_end1284, -1, 0
    rx391_cur."!alt"(rx391_pos, "alt_nfa__21_1356803022.61857", $P11)
    goto rx391_fail1266
  alt398_01285:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1266
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:"[", rx391_fail1266
    add rx391_pos, 1
    nqp_rxmark rx391_bstack, rxquantr399_done1287, rx391_pos, 0
  rxquantr399_loop1286:
    .const 'Sub' $P5001 = 'cuid_104_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1266
    goto rxsubrule430_pass1380
  rxsubrule430_back1381:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1266
  rxsubrule430_pass1380:
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "charspec")
    set_addr $I11, rxsubrule430_back1381
    push rx391_bstack, $I11
    push rx391_bstack, 0
    push rx391_bstack, rx391_pos
    elements $I11, rx391_cstack
    push rx391_bstack, $I11
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    nqp_rxpeek $I19, rx391_bstack, rxquantr399_done1287
    inc $I19
    inc $I19
    set rx391_rep, rx391_bstack[$I19]
    nqp_rxcommit rx391_bstack, rxquantr399_done1287
    inc rx391_rep
    nqp_rxmark rx391_bstack, rxquantr399_done1287, rx391_pos, rx391_rep
    goto rxquantr399_loop1286
  rxquantr399_done1287:
    nqp_rxmark rx391_bstack, rxquantr431_done1383, rx391_pos, 0
  rxquantr431_loop1382:
    ge rx391_pos, rx391_eos, rx391_fail1266
    is_cclass $I11, .CCLASS_WHITESPACE, rx391_tgt, rx391_pos
    unless $I11, rx391_fail1266
    add rx391_pos, 1
    nqp_rxpeek $I19, rx391_bstack, rxquantr431_done1383
    inc $I19
    inc $I19
    set rx391_rep, rx391_bstack[$I19]
    nqp_rxcommit rx391_bstack, rxquantr431_done1383
    inc rx391_rep
    nqp_rxmark rx391_bstack, rxquantr431_done1383, rx391_pos, rx391_rep
    goto rxquantr431_loop1382
  rxquantr431_done1383:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1266
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:"]", rx391_fail1266
    add rx391_pos, 1
    goto alt398_end1284
  alt398_11384:
    nqp_rxmark rx391_bstack, rxcap432_fail1386, rx391_pos, 0
    nqp_rxmark rx391_bstack, rxquantr433_done1388, -1, 0
  rxquantr433_loop1387:
    ge rx391_pos, rx391_eos, rx391_fail1266
    is_cclass $I11, .CCLASS_WORD, rx391_tgt, rx391_pos
    unless $I11, rx391_fail1266
    add rx391_pos, 1
    nqp_rxpeek $I19, rx391_bstack, rxquantr433_done1388
    inc $I19
    inc $I19
    set rx391_rep, rx391_bstack[$I19]
    nqp_rxcommit rx391_bstack, rxquantr433_done1388
    inc rx391_rep
    nqp_rxmark rx391_bstack, rxquantr433_done1388, rx391_pos, rx391_rep
    goto rxquantr433_loop1387
  rxquantr433_done1388:
    nqp_rxpeek $I19, rx391_bstack, rxcap432_fail1386
    inc $I19
    set $I11, rx391_bstack[$I19]
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx391_pos)
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "name")
    goto rxcap432_done1385
  rxcap432_fail1386:
    goto rx391_fail1266
  rxcap432_done1385:
    goto alt398_end1284
  alt398_21389:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1266
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:":", rx391_fail1266
    add rx391_pos, 1
    nqp_rxmark rx391_bstack, rxcap434_fail1391, rx391_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt435_01393
    nqp_push_label $P11, alt435_11394
    nqp_rxmark rx391_bstack, alt435_end1392, -1, 0
    rx391_cur."!alt"(rx391_pos, "alt_nfa__20_1356803022.61833", $P11)
    goto rx391_fail1266
  alt435_01393:
    add $I11, rx391_pos, 1
    gt $I11, rx391_eos, rx391_fail1266
    substr $S10, rx391_tgt, rx391_pos, 1
    ne $S10, ucs4:"!", rx391_fail1266
    add rx391_pos, 1
    goto alt435_end1392
  alt435_11394:
    goto alt435_end1392
  alt435_end1392:
    nqp_rxcommit rx391_bstack, alt435_end1392
    nqp_rxpeek $I19, rx391_bstack, rxcap434_fail1391
    inc $I19
    set $I11, rx391_bstack[$I19]
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx391_pos)
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "invert")
    goto rxcap434_done1390
  rxcap434_fail1391:
    goto rx391_fail1266
  rxcap434_done1390:
    nqp_rxmark rx391_bstack, rxcap437_fail1397, rx391_pos, 0
    nqp_rxmark rx391_bstack, rxquantr438_done1399, -1, 0
  rxquantr438_loop1398:
    ge rx391_pos, rx391_eos, rx391_fail1266
    is_cclass $I11, .CCLASS_WORD, rx391_tgt, rx391_pos
    unless $I11, rx391_fail1266
    add rx391_pos, 1
    nqp_rxpeek $I19, rx391_bstack, rxquantr438_done1399
    inc $I19
    inc $I19
    set rx391_rep, rx391_bstack[$I19]
    nqp_rxcommit rx391_bstack, rxquantr438_done1399
    inc rx391_rep
    nqp_rxmark rx391_bstack, rxquantr438_done1399, rx391_pos, rx391_rep
    goto rxquantr438_loop1398
  rxquantr438_done1399:
    nqp_rxpeek $I19, rx391_bstack, rxcap437_fail1397
    inc $I19
    set $I11, rx391_bstack[$I19]
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx391_pos)
    rx391_cstack = rx391_cur."!cursor_capture"($P11, "uniprop")
    goto rxcap437_done1396
  rxcap437_fail1397:
    goto rx391_fail1266
  rxcap437_done1396:
    goto alt398_end1284
  alt398_end1284:
    nqp_rxcommit rx391_bstack, alt398_end1284
    nqp_rxmark rx391_bstack, rxquantr439_done1401, rx391_pos, 0
  rxquantr439_loop1400:
    repr_bind_attr_int rx391_cur, rx391_curclass, "$!pos", rx391_pos
    $P11 = rx391_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1266
    goto rxsubrule440_pass1402
  rxsubrule440_back1403:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx391_curclass, "$!pos"
    lt $I11, 0, rx391_fail1266
  rxsubrule440_pass1402:
    rx391_cstack = rx391_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule440_back1403
    push rx391_bstack, $I11
    push rx391_bstack, 0
    push rx391_bstack, rx391_pos
    elements $I11, rx391_cstack
    push rx391_bstack, $I11
    repr_get_attr_int rx391_pos, $P11, rx391_curclass, "$!pos"
    nqp_rxpeek $I19, rx391_bstack, rxquantr439_done1401
    inc $I19
    inc $I19
    set rx391_rep, rx391_bstack[$I19]
    nqp_rxcommit rx391_bstack, rxquantr439_done1401
    inc rx391_rep
  rxquantr439_done1401:
    rx391_cur."!cursor_pass"(rx391_pos, "cclass_elem", 'backtrack'=>1)
    .return (rx391_cur)
  rx391_restart1265:
    repr_get_attr_obj rx391_cstack, rx391_cur, rx391_curclass, "$!cstack"
  rx391_fail1266:
    unless rx391_bstack, rx391_done1264
    pop $I19, rx391_bstack
    if_null rx391_cstack, rx391_cstack_done1269
    unless rx391_cstack, rx391_cstack_done1269
    dec $I19
    set $P11, rx391_cstack[$I19]
  rx391_cstack_done1269:
    pop rx391_rep, rx391_bstack
    pop rx391_pos, rx391_bstack
    pop $I19, rx391_bstack
    lt rx391_pos, -1, rx391_done1264
    lt rx391_pos, 0, rx391_fail1266
    eq $I19, 0, rx391_fail1266
    nqp_islist $I20, rx391_cstack
    unless $I20, rx391_jump1267
    elements $I18, rx391_bstack
    le $I18, 0, rx391_cut1268
    dec $I18
    set $I18, rx391_bstack[$I18]
  rx391_cut1268:
    assign rx391_cstack, $I18
  rx391_jump1267:
    jump $I19
  rx391_done1264:
    rx391_cur."!cursor_fail"()
    .return (rx391_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_104_1356803021.47401") :anon :lex :outer("cuid_98_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5004 = 'cuid_99_1356803021.47401' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_101_1356803021.47401' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_103_1356803021.47401' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    (rx400_cur, rx400_tgt, rx400_pos, rx400_curclass, rx400_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart1290
    gt rx400_pos, rx400_eos, rx400_fail1291
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done1297
    goto rxscan401_scan1296
  rxscan401_loop1295:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail1291
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan1296:
    nqp_rxmark rx400_bstack, rxscan401_loop1295, rx400_pos, 0
  rxscan401_done1297:
  alt402_01299:
    nqp_rxmark rx400_bstack, alt402_11315, rx400_pos, 0
    nqp_rxmark rx400_bstack, rxquantr403_done1301, rx400_pos, 0
  rxquantr403_loop1300:
    ge rx400_pos, rx400_eos, rx400_fail1291
    is_cclass $I11, .CCLASS_WHITESPACE, rx400_tgt, rx400_pos
    unless $I11, rx400_fail1291
    add rx400_pos, 1
    nqp_rxpeek $I19, rx400_bstack, rxquantr403_done1301
    inc $I19
    inc $I19
    set rx400_rep, rx400_bstack[$I19]
    nqp_rxcommit rx400_bstack, rxquantr403_done1301
    inc rx400_rep
    nqp_rxmark rx400_bstack, rxquantr403_done1301, rx400_pos, rx400_rep
    goto rxquantr403_loop1300
  rxquantr403_done1301:
    add $I11, rx400_pos, 1
    gt $I11, rx400_eos, rx400_fail1291
    substr $S10, rx400_tgt, rx400_pos, 1
    ne $S10, ucs4:"-", rx400_fail1291
    add rx400_pos, 1
    .const 'Sub' $P5001 = 'cuid_99_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    ge $I11, 0, rx400_fail1291
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."obs"("- as character range", ".. for range, for explicit - in character class, escape it or place as last thing")
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1291
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    goto alt402_end1298
  alt402_11315:
    nqp_rxmark rx400_bstack, rxquantr408_done1317, rx400_pos, 0
  rxquantr408_loop1316:
    ge rx400_pos, rx400_eos, rx400_fail1291
    is_cclass $I11, .CCLASS_WHITESPACE, rx400_tgt, rx400_pos
    unless $I11, rx400_fail1291
    add rx400_pos, 1
    nqp_rxpeek $I19, rx400_bstack, rxquantr408_done1317
    inc $I19
    inc $I19
    set rx400_rep, rx400_bstack[$I19]
    nqp_rxcommit rx400_bstack, rxquantr408_done1317
    inc rx400_rep
    nqp_rxmark rx400_bstack, rxquantr408_done1317, rx400_pos, rx400_rep
    goto rxquantr408_loop1316
  rxquantr408_done1317:
    .const 'Sub' $P5002 = 'cuid_101_1356803021.47401' 
    capture_lex $P5002
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1291
    nqp_rxmark rx400_bstack, rxsubrule417_pass1345, -1, 0
  rxsubrule417_pass1345:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    nqp_rxmark rx400_bstack, rxquantr418_done1347, rx400_pos, 0
  rxquantr418_loop1346:
    nqp_rxmark rx400_bstack, rxquantr419_done1349, rx400_pos, 0
  rxquantr419_loop1348:
    ge rx400_pos, rx400_eos, rx400_fail1291
    is_cclass $I11, .CCLASS_WHITESPACE, rx400_tgt, rx400_pos
    unless $I11, rx400_fail1291
    add rx400_pos, 1
    nqp_rxpeek $I19, rx400_bstack, rxquantr419_done1349
    inc $I19
    inc $I19
    set rx400_rep, rx400_bstack[$I19]
    nqp_rxcommit rx400_bstack, rxquantr419_done1349
    inc rx400_rep
    nqp_rxmark rx400_bstack, rxquantr419_done1349, rx400_pos, rx400_rep
    goto rxquantr419_loop1348
  rxquantr419_done1349:
    add $I11, rx400_pos, 2
    gt $I11, rx400_eos, rx400_fail1291
    substr $S10, rx400_tgt, rx400_pos, 2
    ne $S10, ucs4:"..", rx400_fail1291
    add rx400_pos, 2
    nqp_rxmark rx400_bstack, rxquantr420_done1351, rx400_pos, 0
  rxquantr420_loop1350:
    ge rx400_pos, rx400_eos, rx400_fail1291
    is_cclass $I11, .CCLASS_WHITESPACE, rx400_tgt, rx400_pos
    unless $I11, rx400_fail1291
    add rx400_pos, 1
    nqp_rxpeek $I19, rx400_bstack, rxquantr420_done1351
    inc $I19
    inc $I19
    set rx400_rep, rx400_bstack[$I19]
    nqp_rxcommit rx400_bstack, rxquantr420_done1351
    inc rx400_rep
    nqp_rxmark rx400_bstack, rxquantr420_done1351, rx400_pos, rx400_rep
    goto rxquantr420_loop1350
  rxquantr420_done1351:
    .const 'Sub' $P5003 = 'cuid_103_1356803021.47401' 
    capture_lex $P5003
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur.$P5003()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1291
    nqp_rxmark rx400_bstack, rxsubrule429_pass1379, -1, 0
  rxsubrule429_pass1379:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    nqp_rxpeek $I19, rx400_bstack, rxquantr418_done1347
    inc $I19
    inc $I19
    set rx400_rep, rx400_bstack[$I19]
    nqp_rxcommit rx400_bstack, rxquantr418_done1347
    inc rx400_rep
  rxquantr418_done1347:
  alt402_end1298:
    rx400_cur."!cursor_pass"(rx400_pos, 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart1290:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail1291:
    unless rx400_bstack, rx400_done1289
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done1294
    unless rx400_cstack, rx400_cstack_done1294
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done1294:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done1289
    lt rx400_pos, 0, rx400_fail1291
    eq $I19, 0, rx400_fail1291
    nqp_islist $I20, rx400_cstack
    unless $I20, rx400_jump1292
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut1293
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut1293:
    assign rx400_cstack, $I18
  rx400_jump1292:
    jump $I19
  rx400_done1289:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_99_1356803021.47401") :anon :lex :outer("cuid_104_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx404_tgt
    .local int rx404_pos
    .local int rx404_off
    .local int rx404_eos
    .local int rx404_rep
    .local pmc rx404_cur
    .local pmc rx404_curclass
    .local pmc rx404_bstack
    .local pmc rx404_cstack
    (rx404_cur, rx404_tgt, rx404_pos, rx404_curclass, rx404_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx404_cur
    length rx404_eos, rx404_tgt
    eq $I19, 1, rx404_restart1304
    gt rx404_pos, rx404_eos, rx404_fail1305
    repr_get_attr_int $I11, self, rx404_curclass, "$!from"
    ne $I11, -1, rxscan405_done1311
    goto rxscan405_scan1310
  rxscan405_loop1309:
    inc rx404_pos
    gt rx404_pos, rx404_eos, rx404_fail1305
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!from", rx404_pos
  rxscan405_scan1310:
    nqp_rxmark rx404_bstack, rxscan405_loop1309, rx404_pos, 0
  rxscan405_done1311:
    nqp_rxmark rx404_bstack, rxquantr406_done1313, rx404_pos, 0
  rxquantr406_loop1312:
    ge rx404_pos, rx404_eos, rx404_fail1305
    is_cclass $I11, .CCLASS_WHITESPACE, rx404_tgt, rx404_pos
    unless $I11, rx404_fail1305
    add rx404_pos, 1
    nqp_rxpeek $I19, rx404_bstack, rxquantr406_done1313
    inc $I19
    inc $I19
    set rx404_rep, rx404_bstack[$I19]
    nqp_rxcommit rx404_bstack, rxquantr406_done1313
    inc rx404_rep
    nqp_rxmark rx404_bstack, rxquantr406_done1313, rx404_pos, rx404_rep
    goto rxquantr406_loop1312
  rxquantr406_done1313:
    add $I11, rx404_pos, 1
    gt $I11, rx404_eos, rx404_fail1305
    substr $S10, rx404_tgt, rx404_pos, 1
    ne $S10, ucs4:"]", rx404_fail1305
    add rx404_pos, 1
    rx404_cur."!cursor_pass"(rx404_pos, 'backtrack'=>1)
    .return (rx404_cur)
  rx404_restart1304:
    repr_get_attr_obj rx404_cstack, rx404_cur, rx404_curclass, "$!cstack"
  rx404_fail1305:
    unless rx404_bstack, rx404_done1303
    pop $I19, rx404_bstack
    if_null rx404_cstack, rx404_cstack_done1308
    unless rx404_cstack, rx404_cstack_done1308
    dec $I19
    set $P11, rx404_cstack[$I19]
  rx404_cstack_done1308:
    pop rx404_rep, rx404_bstack
    pop rx404_pos, rx404_bstack
    pop $I19, rx404_bstack
    lt rx404_pos, -1, rx404_done1303
    lt rx404_pos, 0, rx404_fail1305
    eq $I19, 0, rx404_fail1305
    nqp_islist $I20, rx404_cstack
    unless $I20, rx404_jump1306
    elements $I18, rx404_bstack
    le $I18, 0, rx404_cut1307
    dec $I18
    set $I18, rx404_bstack[$I18]
  rx404_cut1307:
    assign rx404_cstack, $I18
  rx404_jump1306:
    jump $I19
  rx404_done1303:
    rx404_cur."!cursor_fail"()
    .return (rx404_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_101_1356803021.47401") :anon :lex :outer("cuid_104_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_100_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx409_tgt
    .local int rx409_pos
    .local int rx409_off
    .local int rx409_eos
    .local int rx409_rep
    .local pmc rx409_cur
    .local pmc rx409_curclass
    .local pmc rx409_bstack
    .local pmc rx409_cstack
    (rx409_cur, rx409_tgt, rx409_pos, rx409_curclass, rx409_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx409_cur
    length rx409_eos, rx409_tgt
    eq $I19, 1, rx409_restart1320
    gt rx409_pos, rx409_eos, rx409_fail1321
    repr_get_attr_int $I11, self, rx409_curclass, "$!from"
    ne $I11, -1, rxscan410_done1327
    goto rxscan410_scan1326
  rxscan410_loop1325:
    inc rx409_pos
    gt rx409_pos, rx409_eos, rx409_fail1321
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!from", rx409_pos
  rxscan410_scan1326:
    nqp_rxmark rx409_bstack, rxscan410_loop1325, rx409_pos, 0
  rxscan410_done1327:
  alt411_01329:
    nqp_rxmark rx409_bstack, alt411_11331, rx409_pos, 0
    add $I11, rx409_pos, 1
    gt $I11, rx409_eos, rx409_fail1321
    substr $S10, rx409_tgt, rx409_pos, 1
    ne $S10, ucs4:"\\", rx409_fail1321
    add rx409_pos, 1
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!pos", rx409_pos
    $P11 = rx409_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx409_curclass, "$!pos"
    lt $I11, 0, rx409_fail1321
    nqp_rxmark rx409_bstack, rxsubrule412_pass1330, -1, 0
  rxsubrule412_pass1330:
    rx409_cstack = rx409_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx409_pos, $P11, rx409_curclass, "$!pos"
    goto alt411_end1328
  alt411_11331:
    .const 'Sub' $P5001 = 'cuid_100_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!pos", rx409_pos
    $P11 = rx409_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx409_curclass, "$!pos"
    lt $I11, 0, rx409_fail1321
    nqp_rxmark rx409_bstack, rxsubrule416_pass1344, -1, 0
  rxsubrule416_pass1344:
    rx409_cstack = rx409_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx409_pos, $P11, rx409_curclass, "$!pos"
  alt411_end1328:
    rx409_cur."!cursor_pass"(rx409_pos, 'backtrack'=>1)
    .return (rx409_cur)
  rx409_restart1320:
    repr_get_attr_obj rx409_cstack, rx409_cur, rx409_curclass, "$!cstack"
  rx409_fail1321:
    unless rx409_bstack, rx409_done1319
    pop $I19, rx409_bstack
    if_null rx409_cstack, rx409_cstack_done1324
    unless rx409_cstack, rx409_cstack_done1324
    dec $I19
    set $P11, rx409_cstack[$I19]
  rx409_cstack_done1324:
    pop rx409_rep, rx409_bstack
    pop rx409_pos, rx409_bstack
    pop $I19, rx409_bstack
    lt rx409_pos, -1, rx409_done1319
    lt rx409_pos, 0, rx409_fail1321
    eq $I19, 0, rx409_fail1321
    nqp_islist $I20, rx409_cstack
    unless $I20, rx409_jump1322
    elements $I18, rx409_bstack
    le $I18, 0, rx409_cut1323
    dec $I18
    set $I18, rx409_bstack[$I18]
  rx409_cut1323:
    assign rx409_cstack, $I18
  rx409_jump1322:
    jump $I19
  rx409_done1319:
    rx409_cur."!cursor_fail"()
    .return (rx409_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_100_1356803021.47401") :anon :lex :outer("cuid_101_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx413_tgt
    .local int rx413_pos
    .local int rx413_off
    .local int rx413_eos
    .local int rx413_rep
    .local pmc rx413_cur
    .local pmc rx413_curclass
    .local pmc rx413_bstack
    .local pmc rx413_cstack
    (rx413_cur, rx413_tgt, rx413_pos, rx413_curclass, rx413_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx413_cur
    length rx413_eos, rx413_tgt
    eq $I19, 1, rx413_restart1334
    gt rx413_pos, rx413_eos, rx413_fail1335
    repr_get_attr_int $I11, self, rx413_curclass, "$!from"
    ne $I11, -1, rxscan414_done1341
    goto rxscan414_scan1340
  rxscan414_loop1339:
    inc rx413_pos
    gt rx413_pos, rx413_eos, rx413_fail1335
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!from", rx413_pos
  rxscan414_scan1340:
    nqp_rxmark rx413_bstack, rxscan414_loop1339, rx413_pos, 0
  rxscan414_done1341:
    nqp_rxmark rx413_bstack, rxconj415_fail1342, rx413_pos, 0
    goto rxconj415_first1343
  rxconj415_fail1342:
    goto rx413_fail1335
  rxconj415_first1343:
    add $I11, rx413_pos, 1
    gt $I11, rx413_eos, rx413_fail1335
    substr $S10, rx413_tgt, rx413_pos, 1
    eq $S10, ucs4:"]", rx413_fail1335
    add rx413_pos, 1
    nqp_rxpeek $I19, rx413_bstack, rxconj415_fail1342
    inc $I19
    set $I11, rx413_bstack[$I19]
    nqp_rxmark rx413_bstack, rxconj415_fail1342, $I11, rx413_pos
    set rx413_pos, $I11
    add $I11, rx413_pos, 1
    gt $I11, rx413_eos, rx413_fail1335
    substr $S10, rx413_tgt, rx413_pos, 1
    eq $S10, ucs4:"\\", rx413_fail1335
    add rx413_pos, 1
    nqp_rxpeek $I19, rx413_bstack, rxconj415_fail1342
    inc $I19
    set $I11, rx413_bstack[$I19]
    inc $I19
    set $I12, rx413_bstack[$I19]
    ne rx413_pos, $I12, rx413_fail1335
    set rx413_pos, $I11
    ge rx413_pos, rx413_eos, rx413_fail1335
    add rx413_pos, 1
    rx413_cur."!cursor_pass"(rx413_pos, 'backtrack'=>1)
    .return (rx413_cur)
  rx413_restart1334:
    repr_get_attr_obj rx413_cstack, rx413_cur, rx413_curclass, "$!cstack"
  rx413_fail1335:
    unless rx413_bstack, rx413_done1333
    pop $I19, rx413_bstack
    if_null rx413_cstack, rx413_cstack_done1338
    unless rx413_cstack, rx413_cstack_done1338
    dec $I19
    set $P11, rx413_cstack[$I19]
  rx413_cstack_done1338:
    pop rx413_rep, rx413_bstack
    pop rx413_pos, rx413_bstack
    pop $I19, rx413_bstack
    lt rx413_pos, -1, rx413_done1333
    lt rx413_pos, 0, rx413_fail1335
    eq $I19, 0, rx413_fail1335
    nqp_islist $I20, rx413_cstack
    unless $I20, rx413_jump1336
    elements $I18, rx413_bstack
    le $I18, 0, rx413_cut1337
    dec $I18
    set $I18, rx413_bstack[$I18]
  rx413_cut1337:
    assign rx413_cstack, $I18
  rx413_jump1336:
    jump $I19
  rx413_done1333:
    rx413_cur."!cursor_fail"()
    .return (rx413_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_103_1356803021.47401") :anon :lex :outer("cuid_104_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_102_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx421_tgt
    .local int rx421_pos
    .local int rx421_off
    .local int rx421_eos
    .local int rx421_rep
    .local pmc rx421_cur
    .local pmc rx421_curclass
    .local pmc rx421_bstack
    .local pmc rx421_cstack
    (rx421_cur, rx421_tgt, rx421_pos, rx421_curclass, rx421_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx421_cur
    length rx421_eos, rx421_tgt
    eq $I19, 1, rx421_restart1354
    gt rx421_pos, rx421_eos, rx421_fail1355
    repr_get_attr_int $I11, self, rx421_curclass, "$!from"
    ne $I11, -1, rxscan422_done1361
    goto rxscan422_scan1360
  rxscan422_loop1359:
    inc rx421_pos
    gt rx421_pos, rx421_eos, rx421_fail1355
    repr_bind_attr_int rx421_cur, rx421_curclass, "$!from", rx421_pos
  rxscan422_scan1360:
    nqp_rxmark rx421_bstack, rxscan422_loop1359, rx421_pos, 0
  rxscan422_done1361:
  alt423_01363:
    nqp_rxmark rx421_bstack, alt423_11365, rx421_pos, 0
    add $I11, rx421_pos, 1
    gt $I11, rx421_eos, rx421_fail1355
    substr $S10, rx421_tgt, rx421_pos, 1
    ne $S10, ucs4:"\\", rx421_fail1355
    add rx421_pos, 1
    repr_bind_attr_int rx421_cur, rx421_curclass, "$!pos", rx421_pos
    $P11 = rx421_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx421_curclass, "$!pos"
    lt $I11, 0, rx421_fail1355
    nqp_rxmark rx421_bstack, rxsubrule424_pass1364, -1, 0
  rxsubrule424_pass1364:
    rx421_cstack = rx421_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx421_pos, $P11, rx421_curclass, "$!pos"
    goto alt423_end1362
  alt423_11365:
    .const 'Sub' $P5001 = 'cuid_102_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx421_cur, rx421_curclass, "$!pos", rx421_pos
    $P11 = rx421_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx421_curclass, "$!pos"
    lt $I11, 0, rx421_fail1355
    nqp_rxmark rx421_bstack, rxsubrule428_pass1378, -1, 0
  rxsubrule428_pass1378:
    rx421_cstack = rx421_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx421_pos, $P11, rx421_curclass, "$!pos"
  alt423_end1362:
    rx421_cur."!cursor_pass"(rx421_pos, 'backtrack'=>1)
    .return (rx421_cur)
  rx421_restart1354:
    repr_get_attr_obj rx421_cstack, rx421_cur, rx421_curclass, "$!cstack"
  rx421_fail1355:
    unless rx421_bstack, rx421_done1353
    pop $I19, rx421_bstack
    if_null rx421_cstack, rx421_cstack_done1358
    unless rx421_cstack, rx421_cstack_done1358
    dec $I19
    set $P11, rx421_cstack[$I19]
  rx421_cstack_done1358:
    pop rx421_rep, rx421_bstack
    pop rx421_pos, rx421_bstack
    pop $I19, rx421_bstack
    lt rx421_pos, -1, rx421_done1353
    lt rx421_pos, 0, rx421_fail1355
    eq $I19, 0, rx421_fail1355
    nqp_islist $I20, rx421_cstack
    unless $I20, rx421_jump1356
    elements $I18, rx421_bstack
    le $I18, 0, rx421_cut1357
    dec $I18
    set $I18, rx421_bstack[$I18]
  rx421_cut1357:
    assign rx421_cstack, $I18
  rx421_jump1356:
    jump $I19
  rx421_done1353:
    rx421_cur."!cursor_fail"()
    .return (rx421_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_102_1356803021.47401") :anon :lex :outer("cuid_103_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    (rx425_cur, rx425_tgt, rx425_pos, rx425_curclass, rx425_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1368
    gt rx425_pos, rx425_eos, rx425_fail1369
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1375
    goto rxscan426_scan1374
  rxscan426_loop1373:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1369
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1374:
    nqp_rxmark rx425_bstack, rxscan426_loop1373, rx425_pos, 0
  rxscan426_done1375:
    nqp_rxmark rx425_bstack, rxconj427_fail1376, rx425_pos, 0
    goto rxconj427_first1377
  rxconj427_fail1376:
    goto rx425_fail1369
  rxconj427_first1377:
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1369
    substr $S10, rx425_tgt, rx425_pos, 1
    eq $S10, ucs4:"]", rx425_fail1369
    add rx425_pos, 1
    nqp_rxpeek $I19, rx425_bstack, rxconj427_fail1376
    inc $I19
    set $I11, rx425_bstack[$I19]
    nqp_rxmark rx425_bstack, rxconj427_fail1376, $I11, rx425_pos
    set rx425_pos, $I11
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1369
    substr $S10, rx425_tgt, rx425_pos, 1
    eq $S10, ucs4:"\\", rx425_fail1369
    add rx425_pos, 1
    nqp_rxpeek $I19, rx425_bstack, rxconj427_fail1376
    inc $I19
    set $I11, rx425_bstack[$I19]
    inc $I19
    set $I12, rx425_bstack[$I19]
    ne rx425_pos, $I12, rx425_fail1369
    set rx425_pos, $I11
    ge rx425_pos, rx425_eos, rx425_fail1369
    add rx425_pos, 1
    rx425_cur."!cursor_pass"(rx425_pos, 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1368:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1369:
    unless rx425_bstack, rx425_done1367
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1372
    unless rx425_cstack, rx425_cstack_done1372
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1372:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1367
    lt rx425_pos, 0, rx425_fail1369
    eq $I19, 0, rx425_fail1369
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1370
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1371
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1371:
    assign rx425_cstack, $I18
  rx425_jump1370:
    jump $I19
  rx425_done1367:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_105_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 290
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_106_1356803021.47401' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx441_tgt
    .local int rx441_pos
    .local int rx441_off
    .local int rx441_eos
    .local int rx441_rep
    .local pmc rx441_cur
    .local pmc rx441_curclass
    .local pmc rx441_bstack
    .local pmc rx441_cstack
    (rx441_cur, rx441_tgt, rx441_pos, rx441_curclass, rx441_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx441_cur
    length rx441_eos, rx441_tgt
    eq $I19, 1, rx441_restart1406
    gt rx441_pos, rx441_eos, rx441_fail1407
    repr_get_attr_int $I11, self, rx441_curclass, "$!from"
    ne $I11, -1, rxscan442_done1413
    goto rxscan442_scan1412
  rxscan442_loop1411:
    inc rx441_pos
    gt rx441_pos, rx441_eos, rx441_fail1407
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!from", rx441_pos
  rxscan442_scan1412:
    nqp_rxmark rx441_bstack, rxscan442_loop1411, rx441_pos, 0
  rxscan442_done1413:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt443_01415
    nqp_push_label $P11, alt443_11437
    nqp_rxmark rx441_bstack, alt443_end1414, -1, 0
    rx441_cur."!alt"(rx441_pos, "alt_nfa__24_1356803022.64869", $P11)
    goto rx441_fail1407
  alt443_01415:
    add $I11, rx441_pos, 1
    gt $I11, rx441_eos, rx441_fail1407
    substr $S10, rx441_tgt, rx441_pos, 1
    ne $S10, ucs4:":", rx441_fail1407
    add rx441_pos, 1
    nqp_rxmark rx441_bstack, rxquantr444_done1417, -1, 0
  rxquantr444_loop1416:
    .const 'Sub' $P5001 = 'cuid_106_1356803021.47401' 
    capture_lex $P5001
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!pos", rx441_pos
    $P11 = rx441_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx441_curclass, "$!pos"
    lt $I11, 0, rx441_fail1407
    goto rxsubrule449_pass1433
  rxsubrule449_back1434:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx441_curclass, "$!pos"
    lt $I11, 0, rx441_fail1407
  rxsubrule449_pass1433:
    rx441_cstack = rx441_cur."!cursor_capture"($P11, "n")
    set_addr $I11, rxsubrule449_back1434
    push rx441_bstack, $I11
    push rx441_bstack, 0
    push rx441_bstack, rx441_pos
    elements $I11, rx441_cstack
    push rx441_bstack, $I11
    repr_get_attr_int rx441_pos, $P11, rx441_curclass, "$!pos"
    nqp_rxpeek $I19, rx441_bstack, rxquantr444_done1417
    inc $I19
    inc $I19
    set rx441_rep, rx441_bstack[$I19]
    nqp_rxcommit rx441_bstack, rxquantr444_done1417
    inc rx441_rep
  rxquantr444_done1417:
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!pos", rx441_pos
    $P11 = rx441_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx441_curclass, "$!pos"
    lt $I11, 0, rx441_fail1407
    nqp_rxmark rx441_bstack, rxsubrule450_pass1435, -1, 0
  rxsubrule450_pass1435:
    rx441_cstack = rx441_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx441_pos, $P11, rx441_curclass, "$!pos"
    le rx441_pos, 0, rx441_fail1407
    is_cclass $I11, .CCLASS_WORD, rx441_tgt, rx441_pos
    if $I11, rx441_fail1407
    sub $I11, rx441_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx441_tgt, $I11
    unless $I11, rx441_fail1407
    goto alt443_end1414
  alt443_11437:
    add $I11, rx441_pos, 1
    gt $I11, rx441_eos, rx441_fail1407
    substr $S10, rx441_tgt, rx441_pos, 1
    ne $S10, ucs4:":", rx441_fail1407
    add rx441_pos, 1
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!pos", rx441_pos
    $P11 = rx441_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx441_curclass, "$!pos"
    lt $I11, 0, rx441_fail1407
    nqp_rxmark rx441_bstack, rxsubrule452_pass1438, -1, 0
  rxsubrule452_pass1438:
    rx441_cstack = rx441_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx441_pos, $P11, rx441_curclass, "$!pos"
    nqp_rxmark rx441_bstack, rxquantr453_done1440, rx441_pos, 0
  rxquantr453_loop1439:
    add $I11, rx441_pos, 1
    gt $I11, rx441_eos, rx441_fail1407
    substr $S10, rx441_tgt, rx441_pos, 1
    ne $S10, ucs4:"(", rx441_fail1407
    add rx441_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt454_01442
    nqp_push_label $P11, alt454_11447
    nqp_push_label $P11, alt454_21449
    nqp_rxmark rx441_bstack, alt454_end1441, -1, 0
    rx441_cur."!alt"(rx441_pos, "alt_nfa__23_1356803022.64835", $P11)
    goto rx441_fail1407
  alt454_01442:
    nqp_rxmark rx441_bstack, rxcap455_fail1444, rx441_pos, 0
    nqp_rxmark rx441_bstack, rxquantr456_done1446, -1, 0
  rxquantr456_loop1445:
    ge rx441_pos, rx441_eos, rx441_fail1407
    is_cclass $I11, .CCLASS_NUMERIC, rx441_tgt, rx441_pos
    unless $I11, rx441_fail1407
    add rx441_pos, 1
    nqp_rxpeek $I19, rx441_bstack, rxquantr456_done1446
    inc $I19
    inc $I19
    set rx441_rep, rx441_bstack[$I19]
    nqp_rxcommit rx441_bstack, rxquantr456_done1446
    inc rx441_rep
    nqp_rxmark rx441_bstack, rxquantr456_done1446, rx441_pos, rx441_rep
    goto rxquantr456_loop1445
  rxquantr456_done1446:
    nqp_rxpeek $I19, rx441_bstack, rxcap455_fail1444
    inc $I19
    set $I11, rx441_bstack[$I19]
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!pos", rx441_pos
    $P11 = rx441_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx441_pos)
    rx441_cstack = rx441_cur."!cursor_capture"($P11, "n")
    goto rxcap455_done1443
  rxcap455_fail1444:
    goto rx441_fail1407
  rxcap455_done1443:
    goto alt454_end1441
  alt454_11447:
    ge rx441_pos, rx441_eos, rx441_fail1407
    substr $S11, rx441_tgt, rx441_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx441_fail1407
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!pos", rx441_pos
    $P11 = rx441_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx441_curclass, "$!pos"
    lt $I11, 0, rx441_fail1407
    nqp_rxmark rx441_bstack, rxsubrule457_pass1448, -1, 0
  rxsubrule457_pass1448:
    rx441_cstack = rx441_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx441_pos, $P11, rx441_curclass, "$!pos"
    goto alt454_end1441
  alt454_21449:
    ge rx441_pos, rx441_eos, rx441_fail1407
    substr $S11, rx441_tgt, rx441_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx441_fail1407
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!pos", rx441_pos
    $P11 = rx441_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx441_curclass, "$!pos"
    lt $I11, 0, rx441_fail1407
    nqp_rxmark rx441_bstack, rxsubrule458_pass1450, -1, 0
  rxsubrule458_pass1450:
    rx441_cstack = rx441_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx441_pos, $P11, rx441_curclass, "$!pos"
    goto alt454_end1441
  alt454_end1441:
    nqp_rxcommit rx441_bstack, alt454_end1441
    add $I11, rx441_pos, 1
    gt $I11, rx441_eos, rx441_fail1407
    substr $S10, rx441_tgt, rx441_pos, 1
    ne $S10, ucs4:")", rx441_fail1407
    add rx441_pos, 1
    nqp_rxpeek $I19, rx441_bstack, rxquantr453_done1440
    inc $I19
    inc $I19
    set rx441_rep, rx441_bstack[$I19]
    nqp_rxcommit rx441_bstack, rxquantr453_done1440
    inc rx441_rep
  rxquantr453_done1440:
    goto alt443_end1414
  alt443_end1414:
    nqp_rxcommit rx441_bstack, alt443_end1414
    rx441_cur."!cursor_pass"(rx441_pos, "mod_internal", 'backtrack'=>1)
    .return (rx441_cur)
  rx441_restart1406:
    repr_get_attr_obj rx441_cstack, rx441_cur, rx441_curclass, "$!cstack"
  rx441_fail1407:
    unless rx441_bstack, rx441_done1405
    pop $I19, rx441_bstack
    if_null rx441_cstack, rx441_cstack_done1410
    unless rx441_cstack, rx441_cstack_done1410
    dec $I19
    set $P11, rx441_cstack[$I19]
  rx441_cstack_done1410:
    pop rx441_rep, rx441_bstack
    pop rx441_pos, rx441_bstack
    pop $I19, rx441_bstack
    lt rx441_pos, -1, rx441_done1405
    lt rx441_pos, 0, rx441_fail1407
    eq $I19, 0, rx441_fail1407
    nqp_islist $I20, rx441_cstack
    unless $I20, rx441_jump1408
    elements $I18, rx441_bstack
    le $I18, 0, rx441_cut1409
    dec $I18
    set $I18, rx441_bstack[$I18]
  rx441_cut1409:
    assign rx441_cstack, $I18
  rx441_jump1408:
    jump $I19
  rx441_done1405:
    rx441_cur."!cursor_fail"()
    .return (rx441_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_106_1356803021.47401") :anon :lex :outer("cuid_105_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx445_tgt
    .local int rx445_pos
    .local int rx445_off
    .local int rx445_eos
    .local int rx445_rep
    .local pmc rx445_cur
    .local pmc rx445_curclass
    .local pmc rx445_bstack
    .local pmc rx445_cstack
    (rx445_cur, rx445_tgt, rx445_pos, rx445_curclass, rx445_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx445_cur
    length rx445_eos, rx445_tgt
    eq $I19, 1, rx445_restart1420
    gt rx445_pos, rx445_eos, rx445_fail1421
    repr_get_attr_int $I11, self, rx445_curclass, "$!from"
    ne $I11, -1, rxscan446_done1427
    goto rxscan446_scan1426
  rxscan446_loop1425:
    inc rx445_pos
    gt rx445_pos, rx445_eos, rx445_fail1421
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!from", rx445_pos
  rxscan446_scan1426:
    nqp_rxmark rx445_bstack, rxscan446_loop1425, rx445_pos, 0
  rxscan446_done1427:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt447_01429
    nqp_push_label $P11, alt447_11430
    nqp_rxmark rx445_bstack, alt447_end1428, -1, 0
    rx445_cur."!alt"(rx445_pos, "alt_nfa__22_1356803022.62606", $P11)
    goto rx445_fail1421
  alt447_01429:
    add $I11, rx445_pos, 1
    gt $I11, rx445_eos, rx445_fail1421
    substr $S10, rx445_tgt, rx445_pos, 1
    ne $S10, ucs4:"!", rx445_fail1421
    add rx445_pos, 1
    goto alt447_end1428
  alt447_11430:
    nqp_rxmark rx445_bstack, rxquantr448_done1432, -1, 0
  rxquantr448_loop1431:
    ge rx445_pos, rx445_eos, rx445_fail1421
    is_cclass $I11, .CCLASS_NUMERIC, rx445_tgt, rx445_pos
    unless $I11, rx445_fail1421
    add rx445_pos, 1
    nqp_rxpeek $I19, rx445_bstack, rxquantr448_done1432
    inc $I19
    inc $I19
    set rx445_rep, rx445_bstack[$I19]
    nqp_rxcommit rx445_bstack, rxquantr448_done1432
    inc rx445_rep
    nqp_rxmark rx445_bstack, rxquantr448_done1432, rx445_pos, rx445_rep
    goto rxquantr448_loop1431
  rxquantr448_done1432:
    goto alt447_end1428
  alt447_end1428:
    rx445_cur."!cursor_pass"(rx445_pos, 'backtrack'=>1)
    .return (rx445_cur)
  rx445_restart1420:
    repr_get_attr_obj rx445_cstack, rx445_cur, rx445_curclass, "$!cstack"
  rx445_fail1421:
    unless rx445_bstack, rx445_done1419
    pop $I19, rx445_bstack
    if_null rx445_cstack, rx445_cstack_done1424
    unless rx445_cstack, rx445_cstack_done1424
    dec $I19
    set $P11, rx445_cstack[$I19]
  rx445_cstack_done1424:
    pop rx445_rep, rx445_bstack
    pop rx445_pos, rx445_bstack
    pop $I19, rx445_bstack
    lt rx445_pos, -1, rx445_done1419
    lt rx445_pos, 0, rx445_fail1421
    eq $I19, 0, rx445_fail1421
    nqp_islist $I20, rx445_cstack
    unless $I20, rx445_jump1422
    elements $I18, rx445_bstack
    le $I18, 0, rx445_cut1423
    dec $I18
    set $I18, rx445_bstack[$I18]
  rx445_cut1423:
    assign rx445_cstack, $I18
  rx445_jump1422:
    jump $I19
  rx445_done1419:
    rx445_cur."!cursor_fail"()
    .return (rx445_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident" :subid("cuid_107_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 306
    .param pmc self 
    $P5001 = self."!protoregex"("mod_ident")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ignorecase>" :subid("cuid_108_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 307
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx459_tgt
    .local int rx459_pos
    .local int rx459_off
    .local int rx459_eos
    .local int rx459_rep
    .local pmc rx459_cur
    .local pmc rx459_curclass
    .local pmc rx459_bstack
    .local pmc rx459_cstack
    (rx459_cur, rx459_tgt, rx459_pos, rx459_curclass, rx459_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx459_cur
    length rx459_eos, rx459_tgt
    eq $I19, 1, rx459_restart1453
    gt rx459_pos, rx459_eos, rx459_fail1454
    repr_get_attr_int $I11, self, rx459_curclass, "$!from"
    ne $I11, -1, rxscan460_done1460
    goto rxscan460_scan1459
  rxscan460_loop1458:
    inc rx459_pos
    gt rx459_pos, rx459_eos, rx459_fail1454
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!from", rx459_pos
  rxscan460_scan1459:
    nqp_rxmark rx459_bstack, rxscan460_loop1458, rx459_pos, 0
  rxscan460_done1460:
    nqp_rxmark rx459_bstack, rxcap461_fail1462, rx459_pos, 0
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1454
    substr $S10, rx459_tgt, rx459_pos, 1
    ne $S10, ucs4:"i", rx459_fail1454
    add rx459_pos, 1
    nqp_rxpeek $I19, rx459_bstack, rxcap461_fail1462
    inc $I19
    set $I11, rx459_bstack[$I19]
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx459_pos)
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "sym")
    goto rxcap461_done1461
  rxcap461_fail1462:
    goto rx459_fail1454
  rxcap461_done1461:
    nqp_rxmark rx459_bstack, rxquantr462_done1464, rx459_pos, 0
  rxquantr462_loop1463:
    add $I11, rx459_pos, 9
    gt $I11, rx459_eos, rx459_fail1454
    substr $S10, rx459_tgt, rx459_pos, 9
    ne $S10, ucs4:"gnorecase", rx459_fail1454
    add rx459_pos, 9
    nqp_rxpeek $I19, rx459_bstack, rxquantr462_done1464
    inc $I19
    inc $I19
    set rx459_rep, rx459_bstack[$I19]
    nqp_rxcommit rx459_bstack, rxquantr462_done1464
    inc rx459_rep
  rxquantr462_done1464:
    le rx459_pos, 0, rx459_fail1454
    is_cclass $I11, .CCLASS_WORD, rx459_tgt, rx459_pos
    if $I11, rx459_fail1454
    sub $I11, rx459_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx459_tgt, $I11
    unless $I11, rx459_fail1454
    rx459_cur."!cursor_pass"(rx459_pos, "mod_ident:sym<ignorecase>", 'backtrack'=>1)
    .return (rx459_cur)
  rx459_restart1453:
    repr_get_attr_obj rx459_cstack, rx459_cur, rx459_curclass, "$!cstack"
  rx459_fail1454:
    unless rx459_bstack, rx459_done1452
    pop $I19, rx459_bstack
    if_null rx459_cstack, rx459_cstack_done1457
    unless rx459_cstack, rx459_cstack_done1457
    dec $I19
    set $P11, rx459_cstack[$I19]
  rx459_cstack_done1457:
    pop rx459_rep, rx459_bstack
    pop rx459_pos, rx459_bstack
    pop $I19, rx459_bstack
    lt rx459_pos, -1, rx459_done1452
    lt rx459_pos, 0, rx459_fail1454
    eq $I19, 0, rx459_fail1454
    nqp_islist $I20, rx459_cstack
    unless $I20, rx459_jump1455
    elements $I18, rx459_bstack
    le $I18, 0, rx459_cut1456
    dec $I18
    set $I18, rx459_bstack[$I18]
  rx459_cut1456:
    assign rx459_cstack, $I18
  rx459_jump1455:
    jump $I19
  rx459_done1452:
    rx459_cur."!cursor_fail"()
    .return (rx459_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ratchet>" :subid("cuid_109_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 308
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx464_tgt
    .local int rx464_pos
    .local int rx464_off
    .local int rx464_eos
    .local int rx464_rep
    .local pmc rx464_cur
    .local pmc rx464_curclass
    .local pmc rx464_bstack
    .local pmc rx464_cstack
    (rx464_cur, rx464_tgt, rx464_pos, rx464_curclass, rx464_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx464_cur
    length rx464_eos, rx464_tgt
    eq $I19, 1, rx464_restart1468
    gt rx464_pos, rx464_eos, rx464_fail1469
    repr_get_attr_int $I11, self, rx464_curclass, "$!from"
    ne $I11, -1, rxscan465_done1475
    goto rxscan465_scan1474
  rxscan465_loop1473:
    inc rx464_pos
    gt rx464_pos, rx464_eos, rx464_fail1469
    repr_bind_attr_int rx464_cur, rx464_curclass, "$!from", rx464_pos
  rxscan465_scan1474:
    nqp_rxmark rx464_bstack, rxscan465_loop1473, rx464_pos, 0
  rxscan465_done1475:
    nqp_rxmark rx464_bstack, rxcap466_fail1477, rx464_pos, 0
    add $I11, rx464_pos, 1
    gt $I11, rx464_eos, rx464_fail1469
    substr $S10, rx464_tgt, rx464_pos, 1
    ne $S10, ucs4:"r", rx464_fail1469
    add rx464_pos, 1
    nqp_rxpeek $I19, rx464_bstack, rxcap466_fail1477
    inc $I19
    set $I11, rx464_bstack[$I19]
    repr_bind_attr_int rx464_cur, rx464_curclass, "$!pos", rx464_pos
    $P11 = rx464_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx464_pos)
    rx464_cstack = rx464_cur."!cursor_capture"($P11, "sym")
    goto rxcap466_done1476
  rxcap466_fail1477:
    goto rx464_fail1469
  rxcap466_done1476:
    nqp_rxmark rx464_bstack, rxquantr467_done1479, rx464_pos, 0
  rxquantr467_loop1478:
    add $I11, rx464_pos, 6
    gt $I11, rx464_eos, rx464_fail1469
    substr $S10, rx464_tgt, rx464_pos, 6
    ne $S10, ucs4:"atchet", rx464_fail1469
    add rx464_pos, 6
    nqp_rxpeek $I19, rx464_bstack, rxquantr467_done1479
    inc $I19
    inc $I19
    set rx464_rep, rx464_bstack[$I19]
    nqp_rxcommit rx464_bstack, rxquantr467_done1479
    inc rx464_rep
  rxquantr467_done1479:
    le rx464_pos, 0, rx464_fail1469
    is_cclass $I11, .CCLASS_WORD, rx464_tgt, rx464_pos
    if $I11, rx464_fail1469
    sub $I11, rx464_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx464_tgt, $I11
    unless $I11, rx464_fail1469
    rx464_cur."!cursor_pass"(rx464_pos, "mod_ident:sym<ratchet>", 'backtrack'=>1)
    .return (rx464_cur)
  rx464_restart1468:
    repr_get_attr_obj rx464_cstack, rx464_cur, rx464_curclass, "$!cstack"
  rx464_fail1469:
    unless rx464_bstack, rx464_done1467
    pop $I19, rx464_bstack
    if_null rx464_cstack, rx464_cstack_done1472
    unless rx464_cstack, rx464_cstack_done1472
    dec $I19
    set $P11, rx464_cstack[$I19]
  rx464_cstack_done1472:
    pop rx464_rep, rx464_bstack
    pop rx464_pos, rx464_bstack
    pop $I19, rx464_bstack
    lt rx464_pos, -1, rx464_done1467
    lt rx464_pos, 0, rx464_fail1469
    eq $I19, 0, rx464_fail1469
    nqp_islist $I20, rx464_cstack
    unless $I20, rx464_jump1470
    elements $I18, rx464_bstack
    le $I18, 0, rx464_cut1471
    dec $I18
    set $I18, rx464_bstack[$I18]
  rx464_cut1471:
    assign rx464_cstack, $I18
  rx464_jump1470:
    jump $I19
  rx464_done1467:
    rx464_cur."!cursor_fail"()
    .return (rx464_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<sigspace>" :subid("cuid_110_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 309
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx469_tgt
    .local int rx469_pos
    .local int rx469_off
    .local int rx469_eos
    .local int rx469_rep
    .local pmc rx469_cur
    .local pmc rx469_curclass
    .local pmc rx469_bstack
    .local pmc rx469_cstack
    (rx469_cur, rx469_tgt, rx469_pos, rx469_curclass, rx469_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx469_cur
    length rx469_eos, rx469_tgt
    eq $I19, 1, rx469_restart1483
    gt rx469_pos, rx469_eos, rx469_fail1484
    repr_get_attr_int $I11, self, rx469_curclass, "$!from"
    ne $I11, -1, rxscan470_done1490
    goto rxscan470_scan1489
  rxscan470_loop1488:
    inc rx469_pos
    gt rx469_pos, rx469_eos, rx469_fail1484
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!from", rx469_pos
  rxscan470_scan1489:
    nqp_rxmark rx469_bstack, rxscan470_loop1488, rx469_pos, 0
  rxscan470_done1490:
    nqp_rxmark rx469_bstack, rxcap471_fail1492, rx469_pos, 0
    add $I11, rx469_pos, 1
    gt $I11, rx469_eos, rx469_fail1484
    substr $S10, rx469_tgt, rx469_pos, 1
    ne $S10, ucs4:"s", rx469_fail1484
    add rx469_pos, 1
    nqp_rxpeek $I19, rx469_bstack, rxcap471_fail1492
    inc $I19
    set $I11, rx469_bstack[$I19]
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx469_pos)
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sym")
    goto rxcap471_done1491
  rxcap471_fail1492:
    goto rx469_fail1484
  rxcap471_done1491:
    nqp_rxmark rx469_bstack, rxquantr472_done1494, rx469_pos, 0
  rxquantr472_loop1493:
    add $I11, rx469_pos, 7
    gt $I11, rx469_eos, rx469_fail1484
    substr $S10, rx469_tgt, rx469_pos, 7
    ne $S10, ucs4:"igspace", rx469_fail1484
    add rx469_pos, 7
    nqp_rxpeek $I19, rx469_bstack, rxquantr472_done1494
    inc $I19
    inc $I19
    set rx469_rep, rx469_bstack[$I19]
    nqp_rxcommit rx469_bstack, rxquantr472_done1494
    inc rx469_rep
  rxquantr472_done1494:
    le rx469_pos, 0, rx469_fail1484
    is_cclass $I11, .CCLASS_WORD, rx469_tgt, rx469_pos
    if $I11, rx469_fail1484
    sub $I11, rx469_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx469_tgt, $I11
    unless $I11, rx469_fail1484
    rx469_cur."!cursor_pass"(rx469_pos, "mod_ident:sym<sigspace>", 'backtrack'=>1)
    .return (rx469_cur)
  rx469_restart1483:
    repr_get_attr_obj rx469_cstack, rx469_cur, rx469_curclass, "$!cstack"
  rx469_fail1484:
    unless rx469_bstack, rx469_done1482
    pop $I19, rx469_bstack
    if_null rx469_cstack, rx469_cstack_done1487
    unless rx469_cstack, rx469_cstack_done1487
    dec $I19
    set $P11, rx469_cstack[$I19]
  rx469_cstack_done1487:
    pop rx469_rep, rx469_bstack
    pop rx469_pos, rx469_bstack
    pop $I19, rx469_bstack
    lt rx469_pos, -1, rx469_done1482
    lt rx469_pos, 0, rx469_fail1484
    eq $I19, 0, rx469_fail1484
    nqp_islist $I20, rx469_cstack
    unless $I20, rx469_jump1485
    elements $I18, rx469_bstack
    le $I18, 0, rx469_cut1486
    dec $I18
    set $I18, rx469_bstack[$I18]
  rx469_cut1486:
    assign rx469_cstack, $I18
  rx469_jump1485:
    jump $I19
  rx469_done1482:
    rx469_cur."!cursor_fail"()
    .return (rx469_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<dba>" :subid("cuid_111_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 310
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx474_tgt
    .local int rx474_pos
    .local int rx474_off
    .local int rx474_eos
    .local int rx474_rep
    .local pmc rx474_cur
    .local pmc rx474_curclass
    .local pmc rx474_bstack
    .local pmc rx474_cstack
    (rx474_cur, rx474_tgt, rx474_pos, rx474_curclass, rx474_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx474_cur
    length rx474_eos, rx474_tgt
    eq $I19, 1, rx474_restart1498
    gt rx474_pos, rx474_eos, rx474_fail1499
    repr_get_attr_int $I11, self, rx474_curclass, "$!from"
    ne $I11, -1, rxscan475_done1505
    goto rxscan475_scan1504
  rxscan475_loop1503:
    inc rx474_pos
    gt rx474_pos, rx474_eos, rx474_fail1499
    repr_bind_attr_int rx474_cur, rx474_curclass, "$!from", rx474_pos
  rxscan475_scan1504:
    nqp_rxmark rx474_bstack, rxscan475_loop1503, rx474_pos, 0
  rxscan475_done1505:
    nqp_rxmark rx474_bstack, rxcap476_fail1507, rx474_pos, 0
    add $I11, rx474_pos, 3
    gt $I11, rx474_eos, rx474_fail1499
    substr $S10, rx474_tgt, rx474_pos, 3
    ne $S10, ucs4:"dba", rx474_fail1499
    add rx474_pos, 3
    nqp_rxpeek $I19, rx474_bstack, rxcap476_fail1507
    inc $I19
    set $I11, rx474_bstack[$I19]
    repr_bind_attr_int rx474_cur, rx474_curclass, "$!pos", rx474_pos
    $P11 = rx474_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx474_pos)
    rx474_cstack = rx474_cur."!cursor_capture"($P11, "sym")
    goto rxcap476_done1506
  rxcap476_fail1507:
    goto rx474_fail1499
  rxcap476_done1506:
    le rx474_pos, 0, rx474_fail1499
    is_cclass $I11, .CCLASS_WORD, rx474_tgt, rx474_pos
    if $I11, rx474_fail1499
    sub $I11, rx474_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx474_tgt, $I11
    unless $I11, rx474_fail1499
    rx474_cur."!cursor_pass"(rx474_pos, "mod_ident:sym<dba>", 'backtrack'=>1)
    .return (rx474_cur)
  rx474_restart1498:
    repr_get_attr_obj rx474_cstack, rx474_cur, rx474_curclass, "$!cstack"
  rx474_fail1499:
    unless rx474_bstack, rx474_done1497
    pop $I19, rx474_bstack
    if_null rx474_cstack, rx474_cstack_done1502
    unless rx474_cstack, rx474_cstack_done1502
    dec $I19
    set $P11, rx474_cstack[$I19]
  rx474_cstack_done1502:
    pop rx474_rep, rx474_bstack
    pop rx474_pos, rx474_bstack
    pop $I19, rx474_bstack
    lt rx474_pos, -1, rx474_done1497
    lt rx474_pos, 0, rx474_fail1499
    eq $I19, 0, rx474_fail1499
    nqp_islist $I20, rx474_cstack
    unless $I20, rx474_jump1500
    elements $I18, rx474_bstack
    le $I18, 0, rx474_cut1501
    dec $I18
    set $I18, rx474_bstack[$I18]
  rx474_cut1501:
    assign rx474_cstack, $I18
  rx474_jump1500:
    jump $I19
  rx474_done1497:
    rx474_cur."!cursor_fail"()
    .return (rx474_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<oops>" :subid("cuid_112_1356803021.47401") :anon :lex :outer("cuid_114_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 311
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_189_1356803021.47401' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_113_1356803021.47401' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_190_1356803021.47401' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx478_tgt
    .local int rx478_pos
    .local int rx478_off
    .local int rx478_eos
    .local int rx478_rep
    .local pmc rx478_cur
    .local pmc rx478_curclass
    .local pmc rx478_bstack
    .local pmc rx478_cstack
    (rx478_cur, rx478_tgt, rx478_pos, rx478_curclass, rx478_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx478_cur
    length rx478_eos, rx478_tgt
    eq $I19, 1, rx478_restart1511
    gt rx478_pos, rx478_eos, rx478_fail1512
    repr_get_attr_int $I11, self, rx478_curclass, "$!from"
    ne $I11, -1, rxscan479_done1518
    goto rxscan479_scan1517
  rxscan479_loop1516:
    inc rx478_pos
    gt rx478_pos, rx478_eos, rx478_fail1512
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!from", rx478_pos
  rxscan479_scan1517:
    nqp_rxmark rx478_bstack, rxscan479_loop1516, rx478_pos, 0
  rxscan479_done1518:
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!pos", rx478_pos
    store_lex unicode:"$\x{a2}", rx478_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_189_1356803021.47401' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_113_1356803021.47401' 
    capture_lex $P5004
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!pos", rx478_pos
    $P11 = rx478_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx478_curclass, "$!pos"
    lt $I11, 0, rx478_fail1512
    nqp_rxmark rx478_bstack, rxsubrule483_pass1531, -1, 0
  rxsubrule483_pass1531:
    rx478_cstack = rx478_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx478_pos, $P11, rx478_curclass, "$!pos"
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!pos", rx478_pos
    store_lex unicode:"$\x{a2}", rx478_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_190_1356803021.47401' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx478_cur."!cursor_pass"(rx478_pos, "mod_ident:sym<oops>", 'backtrack'=>1)
    .return (rx478_cur)
  rx478_restart1511:
    repr_get_attr_obj rx478_cstack, rx478_cur, rx478_curclass, "$!cstack"
  rx478_fail1512:
    unless rx478_bstack, rx478_done1510
    pop $I19, rx478_bstack
    if_null rx478_cstack, rx478_cstack_done1515
    unless rx478_cstack, rx478_cstack_done1515
    dec $I19
    set $P11, rx478_cstack[$I19]
  rx478_cstack_done1515:
    pop rx478_rep, rx478_bstack
    pop rx478_pos, rx478_bstack
    pop $I19, rx478_bstack
    lt rx478_pos, -1, rx478_done1510
    lt rx478_pos, 0, rx478_fail1512
    eq $I19, 0, rx478_fail1512
    nqp_islist $I20, rx478_cstack
    unless $I20, rx478_jump1513
    elements $I18, rx478_bstack
    le $I18, 0, rx478_cut1514
    dec $I18
    set $I18, rx478_bstack[$I18]
  rx478_cut1514:
    assign rx478_cstack, $I18
  rx478_jump1513:
    jump $I19
  rx478_done1510:
    rx478_cur."!cursor_fail"()
    .return (rx478_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_189_1356803021.47401") :anon :lex :outer("cuid_112_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 311

    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_113_1356803021.47401") :anon :lex :outer("cuid_112_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1521
    gt rx480_pos, rx480_eos, rx480_fail1522
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1528
    goto rxscan481_scan1527
  rxscan481_loop1526:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1522
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1527:
    nqp_rxmark rx480_bstack, rxscan481_loop1526, rx480_pos, 0
  rxscan481_done1528:
    nqp_rxmark rx480_bstack, rxquantr482_done1530, -1, 0
  rxquantr482_loop1529:
    ge rx480_pos, rx480_eos, rx480_fail1522
    is_cclass $I11, .CCLASS_WORD, rx480_tgt, rx480_pos
    unless $I11, rx480_fail1522
    add rx480_pos, 1
    nqp_rxpeek $I19, rx480_bstack, rxquantr482_done1530
    inc $I19
    inc $I19
    set rx480_rep, rx480_bstack[$I19]
    nqp_rxcommit rx480_bstack, rxquantr482_done1530
    inc rx480_rep
    nqp_rxmark rx480_bstack, rxquantr482_done1530, rx480_pos, rx480_rep
    goto rxquantr482_loop1529
  rxquantr482_done1530:
    rx480_cur."!cursor_pass"(rx480_pos, 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1521:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1522:
    unless rx480_bstack, rx480_done1520
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1525
    unless rx480_cstack, rx480_cstack_done1525
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1525:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1520
    lt rx480_pos, 0, rx480_fail1522
    eq $I19, 0, rx480_fail1522
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1523
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1524
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1524:
    assign rx480_cstack, $I18
  rx480_jump1523:
    jump $I19
  rx480_done1520:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_190_1356803021.47401") :anon :lex :outer("cuid_112_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 311

    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    find_lex $P5004, "$/"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback1532
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1532:
    $P5006 = $P5003."Str"()
    set $S5002, $P5006
    concat $S5001, "Unrecognized regex modifier :", $S5002
    $P5007 = $P5002."panic"($S5001)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_178_1356803021.47401") :anon :lex :outer("cuid_1_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 315
    .const 'Sub' $P5066 = 'cuid_191_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_194_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_115_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_116_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_117_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_118_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_119_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_120_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_121_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_122_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_123_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_124_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_125_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_126_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_127_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_128_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_129_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_130_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_131_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_132_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_133_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_134_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_135_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_136_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_137_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_138_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_139_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_140_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_141_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_142_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_143_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_144_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_145_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_146_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_147_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_148_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_149_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_150_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_151_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_152_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_153_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_154_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_155_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_156_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_157_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_158_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_159_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_160_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_161_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_162_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_163_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_164_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_165_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_166_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_167_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_168_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_169_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_170_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_171_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_172_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_173_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_174_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_175_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_176_1356803021.47401' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_177_1356803021.47401' 
    capture_lex $P5066 
    .lex "&backmod", $P101 
    .lex "&capnames", $P102 
    .lex "$?PACKAGE", $P103 
    .lex "$?CLASS", $P104 
    .const 'Sub' $P5001 = 'cuid_191_1356803021.47401' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_194_1356803021.47401' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_115_1356803021.47401' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_116_1356803021.47401' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_117_1356803021.47401' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_118_1356803021.47401' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_119_1356803021.47401' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_120_1356803021.47401' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_121_1356803021.47401' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_122_1356803021.47401' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_123_1356803021.47401' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_124_1356803021.47401' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_125_1356803021.47401' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_126_1356803021.47401' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_127_1356803021.47401' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_128_1356803021.47401' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_129_1356803021.47401' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_130_1356803021.47401' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_131_1356803021.47401' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_132_1356803021.47401' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_133_1356803021.47401' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_134_1356803021.47401' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_135_1356803021.47401' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_136_1356803021.47401' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_137_1356803021.47401' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_138_1356803021.47401' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_139_1356803021.47401' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_140_1356803021.47401' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_141_1356803021.47401' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_142_1356803021.47401' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_143_1356803021.47401' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_144_1356803021.47401' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_145_1356803021.47401' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_146_1356803021.47401' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_147_1356803021.47401' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_148_1356803021.47401' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_149_1356803021.47401' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_150_1356803021.47401' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_151_1356803021.47401' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_152_1356803021.47401' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_153_1356803021.47401' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_154_1356803021.47401' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_155_1356803021.47401' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_156_1356803021.47401' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_157_1356803021.47401' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_158_1356803021.47401' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_159_1356803021.47401' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_160_1356803021.47401' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_161_1356803021.47401' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_162_1356803021.47401' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_163_1356803021.47401' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_164_1356803021.47401' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_165_1356803021.47401' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_166_1356803021.47401' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_167_1356803021.47401' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_168_1356803021.47401' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_169_1356803021.47401' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_170_1356803021.47401' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_171_1356803021.47401' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_172_1356803021.47401' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_173_1356803021.47401' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_174_1356803021.47401' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_175_1356803021.47401' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_176_1356803021.47401' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_177_1356803021.47401' 
    capture_lex $P5065
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_191_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 861
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ast", _lex_param_0 
    .lex "$backmod", _lex_param_1 
    set $S5001, _lex_param_1
    iseq $I5001, $S5001, ":"
    unless $I5001 goto if484_else1533 
.annotate 'line', 862
    $P5001 = _lex_param_0."backtrack"("r")
    goto if484_end1534
  if484_else1533:
    set $S5002, _lex_param_1
    iseq $I5002, $S5002, ":?"
    set $I5004, $I5002
    if $I5002 goto unless486_end1538 
    set $S5003, _lex_param_1
    iseq $I5003, $S5003, "?"
    set $I5004, $I5003
  unless486_end1538:
    unless $I5004 goto if485_else1535 
.annotate 'line', 863
    $P5002 = _lex_param_0."backtrack"("f")
    set $P5006, $P5002
    goto if485_end1536
  if485_else1535:
    set $S5004, _lex_param_1
    iseq $I5005, $S5004, ":!"
    set $I5007, $I5005
    if $I5005 goto unless488_end1542 
    set $S5005, _lex_param_1
    iseq $I5006, $S5005, "!"
    set $I5007, $I5006
  unless488_end1542:
    box $P5005, $I5007
    set $P5004, $P5005
    unless $I5007 goto if487_end1540 
.annotate 'line', 864
    $P5003 = _lex_param_0."backtrack"("g")
    set $P5004, $P5003
  if487_end1540:
    set $P5006, $P5004
  if485_end1536:
  if484_end1534:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "capnames" :subid("cuid_194_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 905
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_193_1356803021.47401' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_197_1356803021.47401' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_199_1356803021.47401' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_201_1356803021.47401' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_204_1356803021.47401' 
    capture_lex $P5024 
    .lex "%capnames", $P101 
    .lex "$rxtype", $P102 
    .lex "$ast", _lex_param_0 
    .lex "$count", _lex_param_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 907
    $P5003 = _lex_param_0."rxtype"()
    set $P102, $P5003
    set $S5001, $P102
    iseq $I5001, $S5001, "concat"
    unless $I5001 goto if489_else1543 
.annotate 'line', 908
.annotate 'line', 909
    $P5007 = _lex_param_0."list"()
    set $P5004, $P5007
    iter $P5006, $P5007
  for_next1550:
    unless $P5006, for_done1552
    shift $P5009, $P5006
  for_redo1551:
    .const 'Sub' $P5008 = 'cuid_193_1356803021.47401' 
    capture_lex $P5008
    $P5004 = $P5008($P5009)
    goto for_next1550
  for_done1552:
    goto if489_end1544
  if489_else1543:
    set $S5002, $P102
    iseq $I5002, $S5002, "altseq"
    set $I5004, $I5002
    if $I5002 goto unless491_end1556 
    set $S5003, $P102
    iseq $I5003, $S5003, "alt"
    set $I5004, $I5003
  unless491_end1556:
    unless $I5004 goto if490_else1553 
    .const 'Sub' $P5010 = 'cuid_197_1356803021.47401' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5023, $P5011
    goto if490_end1554
  if490_else1553:
    set $S5004, $P102
    iseq $I5005, $S5004, "subrule"
    set $I5007, $I5005
    unless $I5005 goto if496_end1576 
.annotate 'line', 926
    $P5012 = _lex_param_0."subtype"()
    set $S5005, $P5012
    iseq $I5006, $S5005, "capture"
    set $I5007, $I5006
  if496_end1576:
    unless $I5007 goto if495_else1573 
    .const 'Sub' $P5013 = 'cuid_199_1356803021.47401' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5022, $P5014
    goto if495_end1574
  if495_else1573:
    set $S5006, $P102
    iseq $I5008, $S5006, "subcapture"
    unless $I5008 goto if500_else1586 
    .const 'Sub' $P5015 = 'cuid_201_1356803021.47401' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5021, $P5016
    goto if500_end1587
  if500_else1586:
    set $S5007, $P102
    iseq $I5009, $S5007, "quant"
    box $P5020, $I5009
    set $P5019, $P5020
    unless $I5009 goto if503_end1603 
    .const 'Sub' $P5017 = 'cuid_204_1356803021.47401' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if503_end1603:
    set $P5021, $P5019
  if500_end1587:
    set $P5022, $P5021
  if495_end1574:
    set $P5023, $P5022
  if490_end1554:
  if489_end1544:
    set $P101[""], _lex_param_1
    delete $P101["$!from"]
    delete $P101["$!to"]
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_193_1356803021.47401") :anon :lex :outer("cuid_194_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 909
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_192_1356803021.47401' 
    capture_lex $P5011 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 910
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1546:
    unless $P5006, for_done1548
    shift $P5008, $P5006
  for_redo1547:
    .const 'Sub' $P5007 = 'cuid_192_1356803021.47401' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1546
  for_done1548:
    set $P5009, $P101[""]
    unless_null $P5009, fallback1549
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5010
  fallback1549:
    store_lex "$count", $P5009
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_192_1356803021.47401") :anon :lex :outer("cuid_193_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 911
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5004, "%capnames"
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback1545
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback1545:
    set $N5002, $P5003
    $P5007 = _lex_param_0."value"()
    set $N5003, $P5007
    add $N5001, $N5002, $N5003
    box $P5008, $N5001
    set $P5001[$S5001], $P5008
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_197_1356803021.47401") :anon :lex :outer("cuid_194_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 915
    .const 'Sub' $P5010 = 'cuid_196_1356803021.47401' 
    capture_lex $P5010 
    .lex "$max", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_lex $P5002, "$count"
    set $P101, $P5002
.annotate 'line', 917
    find_lex $P5006, "$ast"
    $P5007 = $P5006."list"()
    set $P5003, $P5007
    iter $P5005, $P5007
  for_next1570:
    unless $P5005, for_done1572
    shift $P5009, $P5005
  for_redo1571:
    .const 'Sub' $P5008 = 'cuid_196_1356803021.47401' 
    capture_lex $P5008
    $P5003 = $P5008($P5009)
    goto for_next1570
  for_done1572:
    store_lex "$count", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_196_1356803021.47401") :anon :lex :outer("cuid_197_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 917
    .param pmc _lex_param_0 
    .const 'Sub' $P5016 = 'cuid_195_1356803021.47401' 
    capture_lex $P5016 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 918
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1563:
    unless $P5006, for_done1565
    shift $P5008, $P5006
  for_redo1564:
    .const 'Sub' $P5007 = 'cuid_195_1356803021.47401' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1563
  for_done1565:
    set $P5009, $P101[""]
    unless_null $P5009, fallback1568
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5010
  fallback1568:
    set $N5001, $P5009
    find_lex $P5011, "$max"
    set $N5002, $P5011
    isgt $I5001, $N5001, $N5002
    box $P5015, $I5001
    set $P5014, $P5015
    unless $I5001 goto if494_end1567 
    set $P5012, $P101[""]
    unless_null $P5012, fallback1569
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5013
  fallback1569:
    store_lex "$max", $P5012
    set $P5014, $P5012
  if494_end1567:
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_195_1356803021.47401") :anon :lex :outer("cuid_196_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 919
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
.annotate 'line', 920
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5004, "%capnames"
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback1561
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback1561:
    set $N5001, $P5003
    set $N5002, 2
    islt $I5001, $N5001, $N5002
    set $I5003, $I5001
    unless $I5001 goto if493_end1560 
    find_lex $P5008, "%x"
    $P5009 = _lex_param_0."key"()
    set $S5003, $P5009
    set $P5007, $P5008[$S5003]
    unless_null $P5007, fallback1562
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5010
  fallback1562:
    set $N5003, $P5007
    set $N5004, 1
    iseq $I5002, $N5003, $N5004
    set $I5003, $I5002
  if493_end1560:
    unless $I5003 goto if492_else1557 
    set $I5004, 1
    goto if492_end1558
  if492_else1557:
    set $I5004, 2
  if492_end1558:
    box $P5011, $I5004
    set $P5001[$S5001], $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_199_1356803021.47401") :anon :lex :outer("cuid_194_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 926
    .const 'Sub' $P5014 = 'cuid_198_1356803021.47401' 
    capture_lex $P5014 
    .lex "$name", $P101 
    .lex "@names", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 927
    find_lex $P5003, "$ast"
    $P5004 = $P5003."name"()
    set $P101, $P5004
    set $S5001, $P101
    iseq $I5001, $S5001, ""
    unless $I5001 goto if497_end1578 
.annotate 'line', 928
    find_lex $P5005, "$count"
    set $P101, $P5005
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"($P101)
  if497_end1578:
    set $S5002, $P101
    split $P5008, "=", $S5002
    set $P102, $P5008
    set $P5009, $P102
    iter $P5011, $P102
  for_next1583:
    unless $P5011, for_done1585
    shift $P5013, $P5011
  for_redo1584:
    .const 'Sub' $P5012 = 'cuid_198_1356803021.47401' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1583
  for_done1585:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_198_1356803021.47401") :anon :lex :outer("cuid_199_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 930
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless499_end1582 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless499_end1582:
    unless $I5003 goto if498_end1580 
.annotate 'line', 931
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if498_end1580:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_201_1356803021.47401") :anon :lex :outer("cuid_194_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 935
    .const 'Sub' $P5022 = 'cuid_200_1356803021.47401' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_202_1356803021.47401' 
    capture_lex $P5022 
    .lex "%x", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 936
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"()
    set $S5001, $P5007
    split $P5005, " ", $S5001
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next1592:
    unless $P5004, for_done1594
    shift $P5009, $P5004
  for_redo1593:
    .const 'Sub' $P5008 = 'cuid_200_1356803021.47401' 
    capture_lex $P5008
    $P5002 = $P5008($P5009)
    goto for_next1592
  for_done1594:
.annotate 'line', 940
    find_lex $P5011, "$ast"
    set $P5010, $P5011[0]
    unless_null $P5010, fallback1595
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback1595:
    find_lex $P5013, "$count"
    $P5014 = "&capnames"($P5010, $P5013)
    set $P101, $P5014
    set $P5015, $P101
    iter $P5017, $P101
  for_next1598:
    unless $P5017, for_done1600
    shift $P5019, $P5017
  for_redo1599:
    .const 'Sub' $P5018 = 'cuid_202_1356803021.47401' 
    capture_lex $P5018
    $P5015 = $P5018($P5019)
    goto for_next1598
  for_done1600:
    set $P5020, $P101[""]
    unless_null $P5020, fallback1601
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5021
  fallback1601:
    store_lex "$count", $P5020
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_200_1356803021.47401") :anon :lex :outer("cuid_201_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 936
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless502_end1591 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless502_end1591:
    unless $I5003 goto if501_end1589 
.annotate 'line', 937
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if501_end1589:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_202_1356803021.47401") :anon :lex :outer("cuid_201_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 941
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5004, "%capnames"
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback1596
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback1596:
    set $N5002, $P5003
    find_lex $P5008, "%x"
    $P5009 = _lex_param_0."key"()
    set $S5003, $P5009
    set $P5007, $P5008[$S5003]
    unless_null $P5007, fallback1597
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5010
  fallback1597:
    set $N5003, $P5007
    add $N5001, $N5002, $N5003
    box $P5011, $N5001
    set $P5001[$S5001], $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_204_1356803021.47401") :anon :lex :outer("cuid_194_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 944
    .const 'Sub' $P5014 = 'cuid_203_1356803021.47401' 
    capture_lex $P5014 
    .lex "%astcap", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 945
    find_lex $P5003, "$ast"
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1604
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback1604:
    find_lex $P5005, "$count"
    $P5006 = "&capnames"($P5002, $P5005)
    set $P101, $P5006
    set $P5007, $P101
    iter $P5009, $P101
  for_next1605:
    unless $P5009, for_done1607
    shift $P5011, $P5009
  for_redo1606:
    .const 'Sub' $P5010 = 'cuid_203_1356803021.47401' 
    capture_lex $P5010
    $P5007 = $P5010($P5011)
    goto for_next1605
  for_done1607:
    set $P5012, $P101[""]
    unless_null $P5012, fallback1608
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5013
  fallback1608:
    store_lex "$count", $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_203_1356803021.47401") :anon :lex :outer("cuid_204_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 946
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    set $S5001, _lex_param_0
    box $P5002, 2
    set $P5001[$S5001], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_115_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 316
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 317
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["CompUnit"]
    unless_null $P5001, fallback1609
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1609:
.annotate 'line', 319
    find_dynamic_lex $P5006, "$*W"
    unless_null $P5006, fallback1610
    nqp_get_sc_object $P5009, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$W"]
    unless_null $P5007, fallback1611
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5010
  fallback1611:
    unless_null $P5007, vivi_5041612
    die "Contextual $*W not found"
    box $P5011, "Contextual $*W not found"
    set $P5007, $P5011
  vivi_5041612:
    set $P5006, $P5007
  fallback1610:
    $P5012 = $P5006."sc"()
.annotate 'line', 320
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback1613
    nqp_get_sc_object $P5016, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback1614
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5017
  fallback1614:
    unless_null $P5014, vivi_5051615
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_5051615:
    set $P5013, $P5014
  fallback1613:
    $P5019 = $P5013."code_ref_blocks"()
.annotate 'line', 322
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback1616
    nqp_get_sc_object $P5023, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback1617
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5024
  fallback1617:
    unless_null $P5021, vivi_5061618
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_5061618:
    set $P5020, $P5021
  fallback1616:
    $P5026 = $P5020."load_dependency_tasks"()
.annotate 'line', 323
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback1619
    nqp_get_sc_object $P5030, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback1620
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5031
  fallback1620:
    unless_null $P5028, vivi_5071621
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_5071621:
    set $P5027, $P5028
  fallback1619:
    $P5033 = $P5027."fixup_tasks"()
.annotate 'line', 324
    nqp_decontainerize $P5034, _lex_param_0
    unless_null _lex_param_1, fallback1622
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5036
  fallback1622:
    set $P5035, _lex_param_1["nibbler"]
    unless_null $P5035, fallback1623
    nqp_get_sc_object $P5037, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5037
  fallback1623:
    $P5038 = $P5035."ast"()
    $P5039 = $P5034."qbuildsub"($P5038, 1 :named("anon"), 1 :named("addself"))
    $P5040 = $P5001."new"($P5039, "P6Regex" :named("hll"), $P5012 :named("sc"), $P5019 :named("code_ref_blocks"), 0 :named("compilation_mode"), $P5026 :named("pre_deserialize"), $P5033 :named("post_deserialize"))
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_116_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 328
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback1624
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback1624:
    set $P5001, _lex_param_1["termaltseq"]
    unless_null $P5001, fallback1625
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback1625:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_117_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 330
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_205_1356803021.47401' 
    capture_lex $P5026 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 331
    unless_null _lex_param_1, fallback1626
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback1626:
    set $P5003, _lex_param_1["termconjseq"]
    unless_null $P5003, fallback1627
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1627:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1628
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1628:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1631
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback1631:
    set $P5008, _lex_param_1["termconjseq"]
    unless_null $P5008, fallback1632
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback1632:
    set $N5001, $P5008
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if508_end1630 
.annotate 'line', 332
.annotate 'line', 333
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1633
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback1633:
    $P5016 = $P5011."new"("altseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
    unless_null _lex_param_1, fallback1634
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5021
  fallback1634:
    set $P5020, _lex_param_1["termconjseq"]
    unless_null $P5020, fallback1635
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5022
  fallback1635:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next1636:
    unless $P5019, for_done1638
    shift $P5024, $P5019
  for_redo1637:
    .const 'Sub' $P5023 = 'cuid_205_1356803021.47401' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next1636
  for_done1638:
  if508_end1630:
.annotate 'line', 336
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_205_1356803021.47401") :anon :lex :outer("cuid_117_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 334
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_118_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 339
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_206_1356803021.47401' 
    capture_lex $P5026 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 340
    unless_null _lex_param_1, fallback1639
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback1639:
    set $P5003, _lex_param_1["termalt"]
    unless_null $P5003, fallback1640
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1640:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1641
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1641:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1644
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback1644:
    set $P5008, _lex_param_1["termalt"]
    unless_null $P5008, fallback1645
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback1645:
    set $N5001, $P5008
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if509_end1643 
.annotate 'line', 341
.annotate 'line', 342
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1646
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback1646:
    $P5016 = $P5011."new"("conjseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
    unless_null _lex_param_1, fallback1647
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5021
  fallback1647:
    set $P5020, _lex_param_1["termalt"]
    unless_null $P5020, fallback1648
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5022
  fallback1648:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next1649:
    unless $P5019, for_done1651
    shift $P5024, $P5019
  for_redo1650:
    .const 'Sub' $P5023 = 'cuid_206_1356803021.47401' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next1649
  for_done1651:
  if509_end1643:
.annotate 'line', 345
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_206_1356803021.47401") :anon :lex :outer("cuid_118_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 343
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_119_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 348
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_207_1356803021.47401' 
    capture_lex $P5026 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 349
    unless_null _lex_param_1, fallback1652
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback1652:
    set $P5003, _lex_param_1["termconj"]
    unless_null $P5003, fallback1653
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1653:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1654
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1654:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1657
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback1657:
    set $P5008, _lex_param_1["termconj"]
    unless_null $P5008, fallback1658
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback1658:
    set $N5001, $P5008
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if510_end1656 
.annotate 'line', 350
.annotate 'line', 351
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1659
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback1659:
    $P5016 = $P5011."new"("alt" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
    unless_null _lex_param_1, fallback1660
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5021
  fallback1660:
    set $P5020, _lex_param_1["termconj"]
    unless_null $P5020, fallback1661
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5022
  fallback1661:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next1662:
    unless $P5019, for_done1664
    shift $P5024, $P5019
  for_redo1663:
    .const 'Sub' $P5023 = 'cuid_207_1356803021.47401' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next1662
  for_done1664:
  if510_end1656:
.annotate 'line', 354
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_207_1356803021.47401") :anon :lex :outer("cuid_119_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 352
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_120_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 357
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_208_1356803021.47401' 
    capture_lex $P5026 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 358
    unless_null _lex_param_1, fallback1665
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback1665:
    set $P5003, _lex_param_1["termish"]
    unless_null $P5003, fallback1666
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1666:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1667
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1667:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    unless_null _lex_param_1, fallback1670
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback1670:
    set $P5008, _lex_param_1["termish"]
    unless_null $P5008, fallback1671
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback1671:
    set $N5001, $P5008
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if511_end1669 
.annotate 'line', 359
.annotate 'line', 360
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1672
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback1672:
    $P5016 = $P5011."new"("conj" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
    unless_null _lex_param_1, fallback1673
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5021
  fallback1673:
    set $P5020, _lex_param_1["termish"]
    unless_null $P5020, fallback1674
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5022
  fallback1674:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next1675:
    unless $P5019, for_done1677
    shift $P5024, $P5019
  for_redo1676:
    .const 'Sub' $P5023 = 'cuid_208_1356803021.47401' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next1675
  for_done1677:
  if511_end1669:
.annotate 'line', 363
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_208_1356803021.47401") :anon :lex :outer("cuid_120_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 361
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_121_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 366
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5019 = 'cuid_209_1356803021.47401' 
    capture_lex $P5019 
    .lex "$qast", $P101 
    .lex "$lastlit", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 367
    nqp_get_sc_object $P5006, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Regex"]
    unless_null $P5003, fallback1678
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5007
  fallback1678:
    $P5008 = $P5003."new"("concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    unless_null _lex_param_1, fallback1679
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5014
  fallback1679:
    set $P5013, _lex_param_1["noun"]
    unless_null $P5013, fallback1680
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5015
  fallback1680:
    set $P5010, $P5013
    iter $P5012, $P5013
  for_next1699:
    unless $P5012, for_done1701
    shift $P5017, $P5012
  for_redo1700:
    .const 'Sub' $P5016 = 'cuid_209_1356803021.47401' 
    capture_lex $P5016
    $P5010 = $P5016($P5017)
    goto for_next1699
  for_done1701:
.annotate 'line', 384
    $P5018 = _lex_param_1."!make"($P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_209_1356803021.47401") :anon :lex :outer("cuid_121_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 369
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 370
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5038, $P101
    unless $P101 goto if512_end1682 
.annotate 'line', 371
    find_lex $P5003, "$lastlit"
    set $P5005, $P5003
    unless $P5003 goto if515_end1688 
.annotate 'line', 372
    $P5004 = $P101."rxtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "literal"
    box $P5006, $I5001
    set $P5005, $P5006
  if515_end1688:
    set $P5015, $P5005
    unless $P5005 goto if514_end1686 
.annotate 'line', 373
    nqp_get_sc_object $P5010, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Node"]
    unless_null $P5007, fallback1689
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback1689:
    set $P5012, $P101[0]
    unless_null $P5012, fallback1690
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5013
  fallback1690:
    $P5014 = $P5007."ACCEPTS"($P5012)
    isfalse $I5002, $P5014
    box $P5016, $I5002
    set $P5015, $P5016
  if514_end1686:
    unless $P5015 goto if513_else1683 
    find_lex $P5017, "$lastlit"
    find_lex $P5019, "$lastlit"
    set $P5018, $P5019[0]
    unless_null $P5018, fallback1691
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5020
  fallback1691:
    set $S5003, $P5018
    set $P5021, $P101[0]
    unless_null $P5021, fallback1692
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5022
  fallback1692:
    set $S5004, $P5021
    concat $S5002, $S5003, $S5004
    box $P5023, $S5002
    set $P5017[0], $P5023
    set $P5037, $P5023
    goto if513_end1684
  if513_else1683:
.annotate 'line', 376
.annotate 'line', 377
    find_lex $P5024, "$qast"
    $P5025 = _lex_param_0."ast"()
    $P5024."push"($P5025)
.annotate 'line', 378
    $P5026 = $P101."rxtype"()
    set $S5005, $P5026
    iseq $I5003, $S5005, "literal"
    set $I5005, $I5003
    unless $I5003 goto if517_end1696 
.annotate 'line', 379
    nqp_get_sc_object $P5030, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Node"]
    unless_null $P5027, fallback1697
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5031
  fallback1697:
    set $P5032, $P101[0]
    unless_null $P5032, fallback1698
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5033
  fallback1698:
    $P5034 = $P5027."ACCEPTS"($P5032)
    isfalse $I5004, $P5034
    set $I5005, $I5004
  if517_end1696:
    unless $I5005 goto if516_else1693 
    set $P5035, $P101
    goto if516_end1694
  if516_else1693:
    box $P5036, 0
    set $P5035, $P5036
  if516_end1694:
    store_lex "$lastlit", $P5035
    set $P5037, $P5035
  if513_end1684:
    set $P5038, $P5037
  if512_end1682:
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_122_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 387
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5084 = 'cuid_210_1356803021.47401' 
    capture_lex $P5084 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 388
    unless_null _lex_param_1, fallback1702
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback1702:
    set $P5002, _lex_param_1["atom"]
    unless_null $P5002, fallback1703
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback1703:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    unless_null _lex_param_1, fallback1706
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback1706:
    set $P5006, _lex_param_1["quantifier"]
    unless_null $P5006, fallback1707
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback1707:
    unless $P5006 goto if518_end1705 
    .const 'Sub' $P5009 = 'cuid_210_1356803021.47401' 
    capture_lex $P5009
    $P5010 = $P5009()
  if518_end1705:
    unless_null _lex_param_1, fallback1713
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5012
  fallback1713:
    set $P5011, _lex_param_1["separator"]
    unless_null $P5011, fallback1714
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5013
  fallback1714:
    unless $P5011 goto if519_end1712 
.annotate 'line', 394
.annotate 'line', 395
    $P5014 = $P101."rxtype"()
    set $S5001, $P5014
    iseq $I5001, $S5001, "quant"
    if $I5001 goto unless520_end1716 
.annotate 'line', 396
    $P5015 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback1717
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5019
  fallback1717:
    set $P5018, _lex_param_1["separator"]
    unless_null $P5018, fallback1718
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5020
  fallback1718:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback1719
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback1719:
    set $P5016, $P5017["septype"]
    unless_null $P5016, fallback1720
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5022
  fallback1720:
    set $S5004, $P5016
    concat $S5003, "'", $S5004
    concat $S5002, $S5003, "' many only be used immediately following a quantifier"
    $P5023 = $P5015."panic"($S5002)
  unless520_end1716:
.annotate 'line', 399
    unless_null _lex_param_1, fallback1721
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5026
  fallback1721:
    set $P5025, _lex_param_1["separator"]
    unless_null $P5025, fallback1722
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5027
  fallback1722:
    set $P5024, $P5025[0]
    unless_null $P5024, fallback1723
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5028
  fallback1723:
    $P5029 = $P5024."ast"()
    $P101."push"($P5029)
    unless_null _lex_param_1, fallback1726
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5033
  fallback1726:
    set $P5032, _lex_param_1["separator"]
    unless_null $P5032, fallback1727
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5034
  fallback1727:
    set $P5031, $P5032[0]
    unless_null $P5031, fallback1728
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5031, $P5035
  fallback1728:
    set $P5030, $P5031["septype"]
    unless_null $P5030, fallback1729
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5036
  fallback1729:
    set $S5005, $P5030
    iseq $I5002, $S5005, "%%"
    box $P5056, $I5002
    set $P5055, $P5056
    unless $I5002 goto if521_end1725 
.annotate 'line', 400
.annotate 'line', 401
    nqp_get_sc_object $P5040, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Regex"]
    unless_null $P5037, fallback1730
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5037, $P5041
  fallback1730:
.annotate 'line', 402
    nqp_get_sc_object $P5045, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback1731
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5042, $P5046
  fallback1731:
    unless_null _lex_param_1, fallback1732
    nqp_get_sc_object $P5049, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5049
  fallback1732:
    set $P5048, _lex_param_1["separator"]
    unless_null $P5048, fallback1733
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5050
  fallback1733:
    set $P5047, $P5048[0]
    unless_null $P5047, fallback1734
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5047, $P5051
  fallback1734:
    $P5052 = $P5047."ast"()
    $P5053 = $P5042."new"($P5052, "quant" :named("rxtype"), 0 :named("min"), 1 :named("max"))
    $P5054 = $P5037."new"($P101, $P5053, "concat" :named("rxtype"))
    set $P101, $P5054
    set $P5055, $P101
  if521_end1725:
  if519_end1712:
    set $P5058, $P101
    unless $P101 goto if524_end1740 
.annotate 'line', 405
    $P5057 = $P101."backtrack"()
    isfalse $I5003, $P5057
    box $P5059, $I5003
    set $P5058, $P5059
  if524_end1740:
    set $P5081, $P5058
    unless $P5058 goto if523_end1738 
    find_dynamic_lex $P5061, "%*RX"
    unless_null $P5061, fallback1743
    nqp_get_sc_object $P5064, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["%RX"]
    unless_null $P5062, fallback1744
    nqp_get_sc_object $P5066, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5065, $P5066
    new $P5067, 'Hash'
    set $P5065["%RX"], $P5067
    set $P5062, $P5067
  fallback1744:
    unless_null $P5062, vivi_5261745
    die "Contextual %*RX not found"
    box $P5068, "Contextual %*RX not found"
    set $P5062, $P5068
  vivi_5261745:
    set $P5061, $P5062
  fallback1743:
    set $P5060, $P5061["r"]
    unless_null $P5060, fallback1746
    nqp_get_sc_object $P5069, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5060, $P5069
  fallback1746:
    set $P5080, $P5060
    if $P5060 goto unless525_end1742 
    unless_null _lex_param_1, fallback1749
    nqp_get_sc_object $P5071, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5071
  fallback1749:
    set $P5070, _lex_param_1["backmod"]
    unless_null $P5070, fallback1750
    nqp_get_sc_object $P5072, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5070, $P5072
  fallback1750:
    set $P5078, $P5070
    unless $P5070 goto if527_end1748 
    unless_null _lex_param_1, fallback1751
    nqp_get_sc_object $P5075, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5075
  fallback1751:
    set $P5074, _lex_param_1["backmod"]
    unless_null $P5074, fallback1752
    nqp_get_sc_object $P5076, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5074, $P5076
  fallback1752:
    set $P5073, $P5074[0]
    unless_null $P5073, fallback1753
    nqp_get_sc_object $P5077, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5073, $P5077
  fallback1753:
    set $S5006, $P5073
    iseq $I5004, $S5006, ":"
    box $P5079, $I5004
    set $P5078, $P5079
  if527_end1748:
    set $P5080, $P5078
  unless525_end1742:
    set $P5081, $P5080
  if523_end1738:
    unless $P5081 goto if522_end1736 
    $P5082 = $P101."backtrack"("r")
  if522_end1736:
.annotate 'line', 407
    $P5083 = _lex_param_1."!make"($P101)
    .return ($P5083) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_210_1356803021.47401") :anon :lex :outer("cuid_122_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 389
    .lex "$ast", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 390
    find_lex $P5004, "$/"
    unless_null $P5004, fallback1708
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5005
  fallback1708:
    set $P5003, $P5004["quantifier"]
    unless_null $P5003, fallback1709
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback1709:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback1710
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5007
  fallback1710:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 391
    find_lex $P5009, "$qast"
    $P101."unshift"($P5009)
    store_lex "$qast", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_123_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 410
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 411
    unless_null _lex_param_1, fallback1754
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback1754:
    set $P5001, _lex_param_1["quantified_atom"]
    unless_null $P5001, fallback1755
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback1755:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_124_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 414
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5012 = 'cuid_211_1356803021.47401' 
    capture_lex $P5012 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback1758
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback1758:
    set $P5001, _lex_param_1["metachar"]
    unless_null $P5001, fallback1759
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback1759:
    unless $P5001 goto if528_else1756 
.annotate 'line', 415
.annotate 'line', 416
    unless_null _lex_param_1, fallback1760
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback1760:
    set $P5004, _lex_param_1["metachar"]
    unless_null $P5004, fallback1761
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback1761:
    $P5007 = $P5004."ast"()
    $P5008 = _lex_param_1."!make"($P5007)
    set $P5011, $P5008
    goto if528_end1757
  if528_else1756:
    .const 'Sub' $P5009 = 'cuid_211_1356803021.47401' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5011, $P5010
  if528_end1757:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_211_1356803021.47401") :anon :lex :outer("cuid_124_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 418
    .lex "$qast", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 419
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1762
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1762:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    find_lex $P5008, "$/"
    $P5009 = $P5002."new"($S5001, "literal" :named("rxtype"), $P5008 :named("node"))
    set $P101, $P5009
    find_dynamic_lex $P5011, "%*RX"
    unless_null $P5011, fallback1765
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%RX"]
    unless_null $P5012, fallback1766
    nqp_get_sc_object $P5016, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%RX"], $P5017
    set $P5012, $P5017
  fallback1766:
    unless_null $P5012, vivi_5301767
    die "Contextual %*RX not found"
    box $P5018, "Contextual %*RX not found"
    set $P5012, $P5018
  vivi_5301767:
    set $P5011, $P5012
  fallback1765:
    set $P5010, $P5011["i"]
    unless_null $P5010, fallback1768
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5019
  fallback1768:
    unless $P5010 goto if529_end1764 
.annotate 'line', 420
    $P5020 = $P101."subtype"("ignorecase")
  if529_end1764:
.annotate 'line', 421
    find_dynamic_lex $P5021, "$/"
    $P5022 = $P5021."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_125_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 425
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 426
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1769
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1769:
    $P5007 = $P5002."new"("quant" :named("rxtype"), 0 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5007
.annotate 'line', 427
    unless_null _lex_param_1, fallback1770
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback1770:
    set $P5008, _lex_param_1["backmod"]
    unless_null $P5008, fallback1771
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback1771:
    $P5011 = "&backmod"($P101, $P5008)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_126_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 430
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 431
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1772
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1772:
    $P5007 = $P5002."new"("quant" :named("rxtype"), 1 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5007
.annotate 'line', 432
    unless_null _lex_param_1, fallback1773
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback1773:
    set $P5008, _lex_param_1["backmod"]
    unless_null $P5008, fallback1774
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback1774:
    $P5011 = "&backmod"($P101, $P5008)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_127_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 435
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 436
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1775
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1775:
    $P5007 = $P5002."new"("quant" :named("rxtype"), 0 :named("min"), 1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5007
.annotate 'line', 437
    unless_null _lex_param_1, fallback1776
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5009
  fallback1776:
    set $P5008, _lex_param_1["backmod"]
    unless_null $P5008, fallback1777
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5010
  fallback1777:
    $P5011 = "&backmod"($P101, $P5008)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_128_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 440
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 442
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1778
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1778:
    unless_null _lex_param_1, fallback1779
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1779:
    set $P5007, _lex_param_1["min"]
    unless_null $P5007, fallback1780
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1780:
    set $N5001, $P5007
    $P5010 = $P5002."new"("quant" :named("rxtype"), $N5001 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5010
    unless_null _lex_param_1, fallback1783
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5012
  fallback1783:
    set $P5011, _lex_param_1["max"]
    unless_null $P5011, fallback1784
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5013
  fallback1784:
    isfalse $I5001, $P5011
    unless $I5001 goto if531_else1781 
.annotate 'line', 443
    unless_null _lex_param_1, fallback1785
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5015
  fallback1785:
    set $P5014, _lex_param_1["min"]
    unless_null $P5014, fallback1786
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5016
  fallback1786:
    set $N5002, $P5014
    $P5017 = $P101."max"($N5002)
    goto if531_end1782
  if531_else1781:
    unless_null _lex_param_1, fallback1789
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5020
  fallback1789:
    set $P5019, _lex_param_1["max"]
    unless_null $P5019, fallback1790
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5021
  fallback1790:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback1791
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5022
  fallback1791:
    set $S5001, $P5018
    isne $I5002, $S5001, "*"
    box $P5030, $I5002
    set $P5029, $P5030
    unless $I5002 goto if532_end1788 
.annotate 'line', 444
    unless_null _lex_param_1, fallback1792
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5025
  fallback1792:
    set $P5024, _lex_param_1["max"]
    unless_null $P5024, fallback1793
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5026
  fallback1793:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback1794
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5023, $P5027
  fallback1794:
    set $N5003, $P5023
    $P5028 = $P101."max"($N5003)
    set $P5029, $P5028
  if532_end1788:
  if531_end1782:
.annotate 'line', 445
    unless_null _lex_param_1, fallback1795
    nqp_get_sc_object $P5032, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5032
  fallback1795:
    set $P5031, _lex_param_1["backmod"]
    unless_null $P5031, fallback1796
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5031, $P5033
  fallback1796:
    $P5034 = "&backmod"($P101, $P5031)
    $P5035 = _lex_param_1."!make"($P5034)
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<ws>" :subid("cuid_129_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 448
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*RX"
    unless_null $P5003, fallback1799
    nqp_get_sc_object $P5006, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%RX"]
    unless_null $P5004, fallback1800
    nqp_get_sc_object $P5008, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%RX"], $P5009
    set $P5004, $P5009
  fallback1800:
    unless_null $P5004, vivi_5341801
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5004, $P5010
  vivi_5341801:
    set $P5003, $P5004
  fallback1799:
    set $P5002, $P5003["s"]
    unless_null $P5002, fallback1802
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5011
  fallback1802:
    unless $P5002 goto if533_else1797 
.annotate 'line', 450
    nqp_get_sc_object $P5015, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Regex"]
    unless_null $P5012, fallback1803
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback1803:
.annotate 'line', 451
    nqp_get_sc_object $P5020, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Node"]
    unless_null $P5017, fallback1804
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback1804:
    nqp_get_sc_object $P5025, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback1805
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5026
  fallback1805:
    $P5027 = $P5022."new"("ws" :named("value"))
    $P5028 = $P5017."new"($P5027)
    $P5029 = $P5012."new"($P5028, "ws" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P5030, $P5029
    goto if533_end1798
  if533_else1797:
    box $P5031, 0
    set $P5030, $P5031
  if533_end1798:
    set $P101, $P5030
.annotate 'line', 453
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_130_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 456
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 457
    unless_null _lex_param_1, fallback1806
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback1806:
    set $P5001, _lex_param_1["nibbler"]
    unless_null $P5001, fallback1807
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback1807:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_131_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 460
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 461
    nqp_get_sc_object $P5006, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Node"]
    unless_null $P5003, fallback1808
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5007
  fallback1808:
    nqp_decontainerize $P5008, _lex_param_0
    unless_null _lex_param_1, fallback1809
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback1809:
    set $P5009, _lex_param_1["nibbler"]
    unless_null $P5009, fallback1810
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback1810:
    $P5012 = $P5009."ast"()
    $P5013 = $P5008."qbuildsub"($P5012, 1 :named("anon"), 1 :named("addself"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
.annotate 'line', 462
    nqp_get_sc_object $P5018, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Regex"]
    unless_null $P5015, fallback1811
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback1811:
    unless_null _lex_param_1, fallback1812
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5021
  fallback1812:
    set $P5020, _lex_param_1["nibbler"]
    unless_null $P5020, fallback1813
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5022
  fallback1813:
    $P5023 = $P5020."ast"()
    $P5024 = $P5015."new"($P101, $P5023, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5024
.annotate 'line', 464
    $P5025 = _lex_param_1."!make"($P102)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_132_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 467
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 468
    unless_null _lex_param_1, fallback1814
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback1814:
    set $P5003, _lex_param_1["quote_EXPR"]
    unless_null $P5003, fallback1815
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1815:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 469
    nqp_get_sc_object $P5010, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback1818
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback1818:
    $P5012 = $P5007."ACCEPTS"($P101)
    unless $P5012 goto if535_end1817 
    $P5013 = $P101."value"()
    set $P101, $P5013
  if535_end1817:
.annotate 'line', 470
    nqp_get_sc_object $P5017, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Regex"]
    unless_null $P5014, fallback1819
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5018
  fallback1819:
    $P5019 = $P5014."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5019
    find_dynamic_lex $P5021, "%*RX"
    unless_null $P5021, fallback1822
    nqp_get_sc_object $P5024, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["%RX"]
    unless_null $P5022, fallback1823
    nqp_get_sc_object $P5026, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5025, $P5026
    new $P5027, 'Hash'
    set $P5025["%RX"], $P5027
    set $P5022, $P5027
  fallback1823:
    unless_null $P5022, vivi_5371824
    die "Contextual %*RX not found"
    box $P5028, "Contextual %*RX not found"
    set $P5022, $P5028
  vivi_5371824:
    set $P5021, $P5022
  fallback1822:
    set $P5020, $P5021["i"]
    unless_null $P5020, fallback1825
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5029
  fallback1825:
    unless $P5020 goto if536_end1821 
.annotate 'line', 471
    $P5030 = $P102."subtype"("ignorecase")
  if536_end1821:
.annotate 'line', 472
    $P5031 = _lex_param_1."!make"($P102)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_133_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 475
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
.annotate 'line', 476
    unless_null _lex_param_1, fallback1826
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback1826:
    set $P5003, _lex_param_1["quote_EXPR"]
    unless_null $P5003, fallback1827
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1827:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 477
    nqp_get_sc_object $P5010, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback1830
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback1830:
    $P5012 = $P5007."ACCEPTS"($P101)
    unless $P5012 goto if538_end1829 
    $P5013 = $P101."value"()
    set $P101, $P5013
  if538_end1829:
.annotate 'line', 478
    nqp_get_sc_object $P5017, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Regex"]
    unless_null $P5014, fallback1831
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5018
  fallback1831:
    $P5019 = $P5014."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5019
    find_dynamic_lex $P5021, "%*RX"
    unless_null $P5021, fallback1834
    nqp_get_sc_object $P5024, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["%RX"]
    unless_null $P5022, fallback1835
    nqp_get_sc_object $P5026, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5025, $P5026
    new $P5027, 'Hash'
    set $P5025["%RX"], $P5027
    set $P5022, $P5027
  fallback1835:
    unless_null $P5022, vivi_5401836
    die "Contextual %*RX not found"
    box $P5028, "Contextual %*RX not found"
    set $P5022, $P5028
  vivi_5401836:
    set $P5021, $P5022
  fallback1834:
    set $P5020, $P5021["i"]
    unless_null $P5020, fallback1837
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5029
  fallback1837:
    unless $P5020 goto if539_end1833 
.annotate 'line', 479
    $P5030 = $P102."subtype"("ignorecase")
  if539_end1833:
.annotate 'line', 480
    $P5031 = _lex_param_1."!make"($P102)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_134_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 483
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 484
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1838
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1838:
    $P5006 = $P5001."new"("cclass" :named("rxtype"), "." :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_135_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 487
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 488
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1839
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1839:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "bos" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_136_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 491
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 492
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1840
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1840:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "bol" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_137_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 495
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 496
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1841
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1841:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "eos" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_138_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 499
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 500
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1842
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1842:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "eol" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_139_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 503
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 504
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1843
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1843:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "lwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_140_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 507
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 508
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1844
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1844:
    $P5006 = $P5001."new"("anchor" :named("rxtype"), "rwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_141_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 511
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 512
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1845
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1845:
.annotate 'line', 514
    nqp_get_sc_object $P5009, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback1846
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback1846:
.annotate 'line', 515
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback1847
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback1847:
    $P5016 = $P5011."new"("!LITERAL" :named("value"))
.annotate 'line', 516
    nqp_get_sc_object $P5020, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback1848
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback1848:
    $P5022 = $P5017."new"("" :named("value"))
    $P5023 = $P5006."new"($P5016, $P5022)
    $P5024 = $P5001."new"($P5023, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!from" :named("name"), _lex_param_1 :named("node"))
    $P5025 = _lex_param_1."!make"($P5024)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_142_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 519
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 520
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1849
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1849:
.annotate 'line', 522
    nqp_get_sc_object $P5009, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback1850
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback1850:
.annotate 'line', 523
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback1851
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback1851:
    $P5016 = $P5011."new"("!LITERAL" :named("value"))
.annotate 'line', 524
    nqp_get_sc_object $P5020, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback1852
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback1852:
    $P5022 = $P5017."new"("" :named("value"))
    $P5023 = $P5006."new"($P5016, $P5022)
    $P5024 = $P5001."new"($P5023, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!to" :named("name"), _lex_param_1 :named("node"))
    $P5025 = _lex_param_1."!make"($P5024)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_143_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 527
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 528
    unless_null _lex_param_1, fallback1853
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback1853:
    set $P5001, _lex_param_1["backslash"]
    unless_null $P5001, fallback1854
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback1854:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_144_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 531
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 532
    unless_null _lex_param_1, fallback1855
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback1855:
    set $P5001, _lex_param_1["assertion"]
    unless_null $P5001, fallback1856
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback1856:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_145_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 535
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback1859
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback1859:
    set $P5003, _lex_param_1["pos"]
    unless_null $P5003, fallback1860
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1860:
    unless $P5003 goto if541_else1857 
    unless_null _lex_param_1, fallback1861
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback1861:
    set $P5006, _lex_param_1["pos"]
    unless_null $P5006, fallback1862
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback1862:
    set $N5001, $P5006
    box $P5013, $N5001
    set $P5012, $P5013
    goto if541_end1858
  if541_else1857:
    unless_null _lex_param_1, fallback1863
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback1863:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback1864
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback1864:
    set $S5001, $P5009
    box $P5014, $S5001
    set $P5012, $P5014
  if541_end1858:
    set $P102, $P5012
    unless_null _lex_param_1, fallback1867
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5016
  fallback1867:
    set $P5015, _lex_param_1["quantified_atom"]
    unless_null $P5015, fallback1868
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5017
  fallback1868:
    unless $P5015 goto if542_else1865 
.annotate 'line', 538
.annotate 'line', 539
    unless_null _lex_param_1, fallback1869
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5020
  fallback1869:
    set $P5019, _lex_param_1["quantified_atom"]
    unless_null $P5019, fallback1870
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5021
  fallback1870:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback1871
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5022
  fallback1871:
    $P5023 = $P5018."ast"()
    set $P101, $P5023
.annotate 'line', 540
    $P5024 = $P101."rxtype"()
    set $S5002, $P5024
    iseq $I5001, $S5002, "quant"
    set $I5003, $I5001
    unless $I5001 goto if544_end1875 
    set $P5025, $P101[0]
    unless_null $P5025, fallback1876
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5026
  fallback1876:
    $P5027 = $P5025."rxtype"()
    set $S5003, $P5027
    iseq $I5002, $S5003, "subrule"
    set $I5003, $I5002
  if544_end1875:
    unless $I5003 goto if543_else1872 
.annotate 'line', 541
    nqp_decontainerize $P5028, _lex_param_0
    set $P5029, $P101[0]
    unless_null $P5029, fallback1877
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5029, $P5030
  fallback1877:
    $P5031 = $P5028."subrule_alias"($P5029, $P102)
    set $P5042, $P5031
    goto if543_end1873
  if543_else1872:
.annotate 'line', 543
    $P5032 = $P101."rxtype"()
    set $S5004, $P5032
    iseq $I5004, $S5004, "subrule"
    unless $I5004 goto if545_else1878 
.annotate 'line', 544
    nqp_decontainerize $P5033, _lex_param_0
    $P5034 = $P5033."subrule_alias"($P101, $P102)
    set $P5041, $P5034
    goto if545_end1879
  if545_else1878:
.annotate 'line', 546
.annotate 'line', 547
    nqp_get_sc_object $P5038, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Regex"]
    unless_null $P5035, fallback1880
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5035, $P5039
  fallback1880:
    $P5040 = $P5035."new"($P101, $P102 :named("name"), "subcapture" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5040
    set $P5041, $P101
  if545_end1879:
    set $P5042, $P5041
  if543_end1873:
    goto if542_end1866
  if542_else1865:
.annotate 'line', 551
.annotate 'line', 552
    nqp_get_sc_object $P5046, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Regex"]
    unless_null $P5043, fallback1881
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5043, $P5047
  fallback1881:
.annotate 'line', 553
    nqp_get_sc_object $P5051, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Node"]
    unless_null $P5048, fallback1882
    nqp_get_sc_object $P5052, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5048, $P5052
  fallback1882:
.annotate 'line', 554
    nqp_get_sc_object $P5056, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback1883
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5053, $P5057
  fallback1883:
    $P5058 = $P5053."new"("!BACKREF" :named("value"))
.annotate 'line', 555
    nqp_get_sc_object $P5062, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["SVal"]
    unless_null $P5059, fallback1884
    nqp_get_sc_object $P5063, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5059, $P5063
  fallback1884:
    $P5064 = $P5059."new"($P102 :named("value"))
    $P5065 = $P5048."new"($P5058, $P5064)
    $P5066 = $P5043."new"($P5065, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5066
  if542_end1866:
.annotate 'line', 557
    $P5067 = _lex_param_1."!make"($P101)
    .return ($P5067) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_146_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 560
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@dba", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback1887
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["%RX"]
    unless_null $P5003, fallback1888
    nqp_get_sc_object $P5007, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5006, $P5007
    new $P5008, 'Hash'
    set $P5006["%RX"], $P5008
    set $P5003, $P5008
  fallback1888:
    unless_null $P5003, vivi_5471889
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5003, $P5009
  vivi_5471889:
    set $P5002, $P5003
  fallback1887:
    exists $I5001, $P5002["dba"]
    unless $I5001 goto if546_end1886 
    new $P5010, 'ResizablePMCArray'
.annotate 'line', 561
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback1890
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback1890:
    find_dynamic_lex $P5017, "%*RX"
    unless_null $P5017, fallback1891
    nqp_get_sc_object $P5020, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["%RX"]
    unless_null $P5018, fallback1892
    nqp_get_sc_object $P5022, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5021, $P5022
    new $P5023, 'Hash'
    set $P5021["%RX"], $P5023
    set $P5018, $P5023
  fallback1892:
    unless_null $P5018, vivi_5481893
    die "Contextual %*RX not found"
    box $P5024, "Contextual %*RX not found"
    set $P5018, $P5024
  vivi_5481893:
    set $P5017, $P5018
  fallback1891:
    set $P5016, $P5017["dba"]
    unless_null $P5016, fallback1894
    nqp_get_sc_object $P5025, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5025
  fallback1894:
    $P5026 = $P5011."new"($P5016 :named("value"))
    push $P5010, $P5026
    set $P101, $P5010
  if546_end1886:
.annotate 'line', 562
    nqp_get_sc_object $P5030, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback1895
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5031
  fallback1895:
.annotate 'line', 563
    unless_null _lex_param_1, fallback1896
    nqp_get_sc_object $P5033, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5033
  fallback1896:
    set $P5032, _lex_param_1["EXPR"]
    unless_null $P5032, fallback1897
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5034
  fallback1897:
    $P5035 = $P5032."ast"()
.annotate 'line', 564
    nqp_get_sc_object $P5039, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback1898
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5036, $P5040
  fallback1898:
.annotate 'line', 565
    unless_null _lex_param_1, fallback1899
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5042
  fallback1899:
    set $P5041, _lex_param_1["GOAL"]
    unless_null $P5041, fallback1900
    nqp_get_sc_object $P5043, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5041, $P5043
  fallback1900:
    $P5044 = $P5041."ast"()
.annotate 'line', 566
    nqp_get_sc_object $P5048, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Regex"]
    unless_null $P5045, fallback1901
    nqp_get_sc_object $P5049, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5045, $P5049
  fallback1901:
.annotate 'line', 567
    nqp_get_sc_object $P5053, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Node"]
    unless_null $P5050, fallback1902
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5050, $P5054
  fallback1902:
.annotate 'line', 568
    nqp_get_sc_object $P5058, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback1903
    nqp_get_sc_object $P5059, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5055, $P5059
  fallback1903:
    $P5060 = $P5055."new"("FAILGOAL" :named("value"))
.annotate 'line', 569
    nqp_get_sc_object $P5064, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["SVal"]
    unless_null $P5061, fallback1904
    nqp_get_sc_object $P5065, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5061, $P5065
  fallback1904:
    unless_null _lex_param_1, fallback1905
    nqp_get_sc_object $P5067, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5067
  fallback1905:
    set $P5066, _lex_param_1["GOAL"]
    unless_null $P5066, fallback1906
    nqp_get_sc_object $P5068, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5066, $P5068
  fallback1906:
    set $S5001, $P5066
    $P5069 = $P5061."new"($S5001 :named("value"))
    $P5070 = $P5050."new"($P5060, $P5069, $P101 :flat)
    $P5071 = $P5045."new"($P5070, "subrule" :named("rxtype"), "method" :named("subtype"))
    $P5072 = $P5036."new"($P5044, $P5071, "altseq" :named("rxtype"))
    $P5073 = $P5027."new"($P5035, $P5072, "concat" :named("rxtype"))
    $P5074 = _lex_param_1."!make"($P5073)
    .return ($P5074) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_147_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 577
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback1907
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback1907:
    set $P5001, _lex_param_1["mod_internal"]
    unless_null $P5001, fallback1908
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback1908:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_148_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 579
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 580
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1909
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1909:
    unless_null _lex_param_1, fallback1912
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback1912:
    set $P5006, _lex_param_1["sym"]
    unless_null $P5006, fallback1913
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback1913:
    set $S5001, $P5006
    iseq $I5001, $S5001, "n"
    unless $I5001 goto if549_else1910 
    set $S5003, "nl"
    goto if549_end1911
  if549_else1910:
    unless_null _lex_param_1, fallback1914
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback1914:
    set $P5009, _lex_param_1["sym"]
    unless_null $P5009, fallback1915
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback1915:
    set $S5002, $P5009
    set $S5003, $S5002
  if549_end1911:
    unless_null _lex_param_1, fallback1916
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5013
  fallback1916:
    set $P5012, _lex_param_1["sym"]
    unless_null $P5012, fallback1917
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5014
  fallback1917:
    set $S5004, $P5012
    isle $I5002, $S5004, "Z"
    $P5015 = $P5001."new"(".CCLASS_WHITESPACE", "cclass" :named("rxtype"), $S5003 :named("subtype"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    $P5016 = _lex_param_1."!make"($P5015)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_149_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 585
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 586
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1918
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1918:
    unless_null _lex_param_1, fallback1919
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1919:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1920
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1920:
    set $S5001, $P5007
    iseq $I5001, $S5001, "B"
    $P5010 = $P5002."new"("\b", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 588
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_150_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 591
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 592
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1921
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1921:
    unless_null _lex_param_1, fallback1922
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1922:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1923
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1923:
    set $S5001, $P5007
    iseq $I5001, $S5001, "E"
    $P5010 = $P5002."new"("\e", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 594
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_151_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 597
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 598
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1924
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1924:
    unless_null _lex_param_1, fallback1925
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1925:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1926
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1926:
    set $S5001, $P5007
    iseq $I5001, $S5001, "F"
    $P5010 = $P5002."new"("\f", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 600
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_152_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 603
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 604
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1927
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1927:
    unless_null _lex_param_1, fallback1928
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1928:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1929
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1929:
    set $S5001, $P5007
    iseq $I5001, $S5001, "H"
    $P5010 = $P5002."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 606
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_153_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 609
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 610
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1930
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1930:
    unless_null _lex_param_1, fallback1931
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1931:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1932
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1932:
    set $S5001, $P5007
    iseq $I5001, $S5001, "R"
    $P5010 = $P5002."new"("\r", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 612
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_154_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 615
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 616
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1933
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1933:
    unless_null _lex_param_1, fallback1934
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1934:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1935
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1935:
    set $S5001, $P5007
    iseq $I5001, $S5001, "T"
    $P5010 = $P5002."new"("\t", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 618
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_155_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 621
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 622
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1936
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1936:
    unless_null _lex_param_1, fallback1937
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1937:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback1938
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1938:
    set $S5001, $P5007
    iseq $I5001, $S5001, "V"
    $P5010 = $P5002."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5010
.annotate 'line', 625
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_156_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 628
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 630
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "HLL"
    get_who $P5003, $P5004
    set $P5002, $P5003["Actions"]
    unless_null $P5002, fallback1939
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1939:
    unless_null _lex_param_1, fallback1942
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1942:
    set $P5007, _lex_param_1["octint"]
    unless_null $P5007, fallback1943
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1943:
    set $P5015, $P5007
    if $P5007 goto unless550_end1941 
    unless_null _lex_param_1, fallback1944
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5012
  fallback1944:
    set $P5011, _lex_param_1["octints"]
    unless_null $P5011, fallback1945
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5013
  fallback1945:
    set $P5010, $P5011["octint"]
    unless_null $P5010, fallback1946
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback1946:
    set $P5015, $P5010
  unless550_end1941:
    $P5016 = $P5002."ints_to_string"($P5015)
    set $P101, $P5016
.annotate 'line', 631
    unless_null _lex_param_1, fallback1949
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5018
  fallback1949:
    set $P5017, _lex_param_1["sym"]
    unless_null $P5017, fallback1950
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5019
  fallback1950:
    set $S5001, $P5017
    iseq $I5001, $S5001, "O"
    unless $I5001 goto if551_else1947 
.annotate 'line', 632
    nqp_get_sc_object $P5023, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback1951
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback1951:
    $P5025 = $P5020."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5032, $P5025
    goto if551_end1948
  if551_else1947:
.annotate 'line', 634
    nqp_get_sc_object $P5029, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Regex"]
    unless_null $P5026, fallback1952
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5030
  fallback1952:
    $P5031 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5032, $P5031
  if551_end1948:
    $P5033 = _lex_param_1."!make"($P5032)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_157_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 637
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 639
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "HLL"
    get_who $P5003, $P5004
    set $P5002, $P5003["Actions"]
    unless_null $P5002, fallback1953
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1953:
    unless_null _lex_param_1, fallback1956
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback1956:
    set $P5007, _lex_param_1["hexint"]
    unless_null $P5007, fallback1957
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback1957:
    set $P5015, $P5007
    if $P5007 goto unless552_end1955 
    unless_null _lex_param_1, fallback1958
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5012
  fallback1958:
    set $P5011, _lex_param_1["hexints"]
    unless_null $P5011, fallback1959
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5013
  fallback1959:
    set $P5010, $P5011["hexint"]
    unless_null $P5010, fallback1960
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback1960:
    set $P5015, $P5010
  unless552_end1955:
    $P5016 = $P5002."ints_to_string"($P5015)
    set $P101, $P5016
.annotate 'line', 640
    unless_null _lex_param_1, fallback1963
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5018
  fallback1963:
    set $P5017, _lex_param_1["sym"]
    unless_null $P5017, fallback1964
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5019
  fallback1964:
    set $S5001, $P5017
    iseq $I5001, $S5001, "X"
    unless $I5001 goto if553_else1961 
.annotate 'line', 641
    nqp_get_sc_object $P5023, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback1965
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback1965:
    $P5025 = $P5020."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5032, $P5025
    goto if553_end1962
  if553_else1961:
.annotate 'line', 643
    nqp_get_sc_object $P5029, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Regex"]
    unless_null $P5026, fallback1966
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5030
  fallback1966:
    $P5031 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5032, $P5031
  if553_end1962:
    $P5033 = _lex_param_1."!make"($P5032)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_158_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 646
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 647
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback1967
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback1967:
    unless_null _lex_param_1, fallback1968
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5007
  fallback1968:
    set $P5006, _lex_param_1["charspec"]
    unless_null $P5006, fallback1969
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5008
  fallback1969:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_159_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 650
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 651
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Regex"]
    unless_null $P5002, fallback1970
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback1970:
    set $S5001, _lex_param_1
    $P5007 = $P5002."new"($S5001, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5007
.annotate 'line', 652
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_160_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 655
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback1973
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback1973:
    set $P5002, _lex_param_1["assertion"]
    unless_null $P5002, fallback1974
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback1974:
    unless $P5002 goto if554_else1971 
.annotate 'line', 657
.annotate 'line', 658
    unless_null _lex_param_1, fallback1975
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5006
  fallback1975:
    set $P5005, _lex_param_1["assertion"]
    unless_null $P5005, fallback1976
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5007
  fallback1976:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 659
    $P5009 = $P101."subtype"("zerowidth")
    goto if554_end1972
  if554_else1971:
.annotate 'line', 661
.annotate 'line', 662
    nqp_get_sc_object $P5013, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Regex"]
    unless_null $P5010, fallback1977
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback1977:
    $P5015 = $P5010."new"("anchor" :named("rxtype"), "pass" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5015
  if554_end1972:
.annotate 'line', 664
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_161_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 667
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback1980
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback1980:
    set $P5002, _lex_param_1["assertion"]
    unless_null $P5002, fallback1981
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback1981:
    unless $P5002 goto if555_else1978 
.annotate 'line', 669
.annotate 'line', 670
    unless_null _lex_param_1, fallback1982
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5006
  fallback1982:
    set $P5005, _lex_param_1["assertion"]
    unless_null $P5005, fallback1983
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5007
  fallback1983:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 671
    $P5009 = $P101."negate"()
    isfalse $I5001, $P5009
    $P101."negate"($I5001)
.annotate 'line', 672
    $P5010 = $P101."subtype"("zerowidth")
    goto if555_end1979
  if555_else1978:
.annotate 'line', 674
.annotate 'line', 675
    nqp_get_sc_object $P5014, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Regex"]
    unless_null $P5011, fallback1984
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback1984:
    $P5016 = $P5011."new"("anchor" :named("rxtype"), "fail" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
  if555_end1979:
.annotate 'line', 677
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_162_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 680
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback1985
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback1985:
    set $P5003, _lex_param_1["identifier"]
    unless_null $P5003, fallback1986
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1986:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P102, $P5006
    set $S5002, $P102
    iseq $I5001, $S5002, "c"
    unless $I5001 goto if556_else1987 
.annotate 'line', 683
    box $P5007, 0
    set $P101, $P5007
    goto if556_end1988
  if556_else1987:
    set $S5003, $P102
    iseq $I5002, $S5003, "w"
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto if557_end1990 
.annotate 'line', 688
.annotate 'line', 689
    nqp_get_sc_object $P5011, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Regex"]
    unless_null $P5008, fallback1991
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5012
  fallback1991:
.annotate 'line', 691
    nqp_get_sc_object $P5016, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Node"]
    unless_null $P5013, fallback1992
    nqp_get_sc_object $P5017, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5017
  fallback1992:
    nqp_get_sc_object $P5021, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["SVal"]
    unless_null $P5018, fallback1993
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5018, $P5022
  fallback1993:
    $P5023 = $P5018."new"("wb" :named("value"))
    $P5024 = $P5013."new"($P5023)
    $P5025 = $P5008."new"($P5024, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"), "" :named("name"))
    set $P101, $P5025
    set $P5026, $P101
  if557_end1990:
  if556_end1988:
.annotate 'line', 693
    $P5028 = _lex_param_1."!make"($P101)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_163_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 696
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 697
    unless_null _lex_param_1, fallback1994
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5003
  fallback1994:
    set $P5002, _lex_param_1["assertion"]
    unless_null $P5002, fallback1995
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5004
  fallback1995:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 698
    $P101."subtype"("method")
.annotate 'line', 699
    $P101."name"("")
.annotate 'line', 700
    $P5006 = _lex_param_1."!make"($P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_164_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 703
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_212_1356803021.47401' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_213_1356803021.47401' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback1996
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5004
  fallback1996:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback1997
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback1997:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback2000
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5008
  fallback2000:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback2001
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback2001:
    unless $P5007 goto if558_else1998 
.annotate 'line', 706
.annotate 'line', 707
    unless_null _lex_param_1, fallback2002
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5012
  fallback2002:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback2003
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5013
  fallback2003:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback2004
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback2004:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 708
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if558_end1999
  if558_else1998:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if559_else2005 
    .const 'Sub' $P5018 = 'cuid_212_1356803021.47401' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if559_end2006
  if559_else2005:
.annotate 'line', 719
.annotate 'line', 720
    nqp_get_sc_object $P5023, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback2023
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback2023:
.annotate 'line', 722
    nqp_get_sc_object $P5028, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback2024
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback2024:
    nqp_get_sc_object $P5033, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback2025
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5034
  fallback2025:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback2028
    nqp_get_sc_object $P5039, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5039
  fallback2028:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback2029
    nqp_get_sc_object $P5040, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5040
  fallback2029:
    unless $P5038 goto if564_else2026 
.annotate 'line', 723
.annotate 'line', 724
    unless_null _lex_param_1, fallback2030
    nqp_get_sc_object $P5046, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5046
  fallback2030:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback2031
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5045, $P5047
  fallback2031:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback2032
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5048
  fallback2032:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next2034:
    unless $P5043, for_done2036
    shift $P5052, $P5043
  for_redo2035:
    .const 'Sub' $P5051 = 'cuid_213_1356803021.47401' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next2034
  for_done2036:
    set $P5082, $P5041
    goto if564_end2027
  if564_else2026:
    unless_null _lex_param_1, fallback2039
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5054
  fallback2039:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback2040
    nqp_get_sc_object $P5055, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5053, $P5055
  fallback2040:
    set $P5081, $P5053
    unless $P5053 goto if565_end2038 
.annotate 'line', 726
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if566_else2041 
.annotate 'line', 728
    set $P5056, $P102[0]
    unless_null $P5056, fallback2043
    nqp_get_sc_object $P5057, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5056, $P5057
  fallback2043:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback2044
    nqp_get_sc_object $P5062, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5062
  fallback2044:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback2045
    nqp_get_sc_object $P5063, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5061, $P5063
  fallback2045:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback2046
    nqp_get_sc_object $P5064, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5060, $P5064
  fallback2046:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if566_end2042
  if566_else2041:
.annotate 'line', 729
    set $P5069, $P102[0]
    unless_null $P5069, fallback2047
    nqp_get_sc_object $P5070, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5069, $P5070
  fallback2047:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback2048
    nqp_get_sc_object $P5074, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5074
  fallback2048:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback2049
    nqp_get_sc_object $P5075, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5073, $P5075
  fallback2049:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback2050
    nqp_get_sc_object $P5076, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5072, $P5076
  fallback2050:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if566_end2042:
    set $P5081, $P5080
  if565_end2038:
    set $P5082, $P5081
  if564_end2027:
    set $P5083, $P5082
  if559_end2006:
  if558_end1999:
.annotate 'line', 732
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_212_1356803021.47401") :anon :lex :outer("cuid_164_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 710
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback2007
    nqp_get_sc_object $P5007, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback2008
    nqp_get_sc_object $P5009, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback2008:
    unless_null $P5005, vivi_5602009
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_5602009:
    set $P5004, $P5005
  fallback2007:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback2010
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5012
  fallback2010:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if561_end2012 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback2013
    nqp_get_sc_object $P5018, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback2014
    nqp_get_sc_object $P5020, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback2014:
    unless_null $P5016, vivi_5622015
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_5622015:
    set $P5015, $P5016
  fallback2013:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback2016
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5014, $P5023
  fallback2016:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if561_end2012:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback2017
    nqp_get_sc_object $P5029, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback2018
    nqp_get_sc_object $P5031, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback2018:
    unless_null $P5027, vivi_5632019
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_5632019:
    set $P5026, $P5027
  fallback2017:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback2020
    nqp_get_sc_object $P5034, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5034
  fallback2020:
    set $S5004, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5003, $S5004, $I5004
    box $P5035, $S5003
    set $P102, $P5035
    set $S5006, $P102
    set $S5007, $P102
    length $I5005, $S5007
    set $N5007, $I5005
    set $N5008, 1
    sub $N5006, $N5007, $N5008
    set $I5006, $N5006
    substr $S5005, $S5006, 0, $I5006
    box $P5036, $S5005
    set $P102, $P5036
.annotate 'line', 716
    nqp_get_sc_object $P5040, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Regex"]
    unless_null $P5037, fallback2021
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5037, $P5041
  fallback2021:
    find_lex $P5042, "$/"
.annotate 'line', 717
    nqp_get_sc_object $P5046, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Regex"]
    unless_null $P5043, fallback2022
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5043, $P5047
  fallback2022:
    find_lex $P5048, "$/"
    $P5049 = $P5043."new"($P102, "literal" :named("rxtype"), $P5048 :named("node"))
    $P5050 = $P5037."new"($P5049, "sym" :named("name"), "subcapture" :named("rxtype"), $P5042 :named("node"))
    store_lex "$qast", $P5050
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_213_1356803021.47401") :anon :lex :outer("cuid_164_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 724
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback2033
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback2033:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_165_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 735
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5034 = 'cuid_214_1356803021.47401' 
    capture_lex $P5034 
    .lex "$clist", $P101 
    .lex "$qast", $P102 
    .lex "$i", $P103 
    .lex "$n", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    unless_null _lex_param_1, fallback2051
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5006
  fallback2051:
    set $P5005, _lex_param_1["cclass_elem"]
    unless_null $P5005, fallback2052
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5007
  fallback2052:
    set $P101, $P5005
.annotate 'line', 737
    set $P5008, $P101[0]
    unless_null $P5008, fallback2053
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5009
  fallback2053:
    $P5010 = $P5008."ast"()
    set $P102, $P5010
.annotate 'line', 738
    $P5011 = $P102."negate"()
    set $P5013, $P5011
    unless $P5011 goto if568_end2057 
    $P5012 = $P102."rxtype"()
    set $S5001, $P5012
    iseq $I5001, $S5001, "subrule"
    box $P5014, $I5001
    set $P5013, $P5014
  if568_end2057:
    unless $P5013 goto if567_end2055 
.annotate 'line', 739
    $P102."subtype"("zerowidth")
.annotate 'line', 740
    nqp_get_sc_object $P5018, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Regex"]
    unless_null $P5015, fallback2058
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback2058:
.annotate 'line', 742
    nqp_get_sc_object $P5023, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback2059
    nqp_get_sc_object $P5024, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5024
  fallback2059:
    $P5025 = $P5020."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5026 = $P5015."new"($P102, $P5025, "concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5026
  if567_end2055:
    box $P5027, 1
    set $P103, $P5027
    set $N5001, $P101
    box $P5028, $N5001
    set $P104, $P5028
  while569_test2060:
    set $N5002, $P103
    set $N5003, $P104
    islt $I5002, $N5002, $N5003
    box $P5032, $I5002
    set $P5031, $P5032
    unless $I5002 goto while569_done2064 
  while569_redo2062:
    .const 'Sub' $P5029 = 'cuid_214_1356803021.47401' 
    capture_lex $P5029
    $P5030 = $P5029()
    set $P5031, $P5030
    goto while569_test2060 
  while569_done2064:
.annotate 'line', 757
    $P5033 = _lex_param_1."!make"($P102)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_214_1356803021.47401") :anon :lex :outer("cuid_165_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 746
    .lex "$ast", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 747
    find_lex $P5003, "$clist"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback2065
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback2065:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
.annotate 'line', 748
    $P5007 = $P101."negate"()
    unless $P5007 goto if570_else2066 
.annotate 'line', 749
    $P101."subtype"("zerowidth")
.annotate 'line', 750
    nqp_get_sc_object $P5011, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Regex"]
    unless_null $P5008, fallback2068
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5012
  fallback2068:
    find_lex $P5013, "$qast"
    find_lex $P5014, "$/"
    $P5015 = $P5008."new"($P101, $P5013, "concat" :named("rxtype"), $P5014 :named("node"))
    store_lex "$qast", $P5015
    goto if570_end2067
  if570_else2066:
.annotate 'line', 752
.annotate 'line', 753
    nqp_get_sc_object $P5019, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Regex"]
    unless_null $P5016, fallback2069
    nqp_get_sc_object $P5020, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5020
  fallback2069:
    find_lex $P5021, "$qast"
    find_lex $P5022, "$/"
    $P5023 = $P5016."new"($P5021, $P101, "altseq" :named("rxtype"), $P5022 :named("node"))
    store_lex "$qast", $P5023
  if570_end2067:
    find_lex $P5024, "$i"
    set tmp_1, $P5024
    set $N5002, tmp_1
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5025, $N5001
    store_lex "$i", $P5025
    .return (tmp_1) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_166_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 760
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 761
    unless_null _lex_param_1, fallback2072
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback2072:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback2073
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback2073:
    unless $P5001 goto if571_else2070 
.annotate 'line', 762
    unless_null _lex_param_1, fallback2074
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback2074:
    set $P5004, _lex_param_1["quote_EXPR"]
    unless_null $P5004, fallback2075
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback2075:
    $P5007 = $P5004."ast"()
    set $P5017, $P5007
    goto if571_end2071
  if571_else2070:
.annotate 'line', 763
    nqp_get_sc_object $P5011, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["NVal"]
    unless_null $P5008, fallback2076
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5012
  fallback2076:
    unless_null _lex_param_1, fallback2077
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5014
  fallback2077:
    set $P5013, _lex_param_1["val"]
    unless_null $P5013, fallback2078
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5015
  fallback2078:
    set $N5001, $P5013
    $P5016 = $P5008."new"($N5001 :named("value"))
    set $P5017, $P5016
  if571_end2071:
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_167_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 766
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_215_1356803021.47401' 
    capture_lex $P5017 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 767
    nqp_get_sc_object $P5005, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback2079
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback2079:
    $P5007 = $P5002."new"("list" :named("op"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback2080
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5012
  fallback2080:
    set $P5011, _lex_param_1["arg"]
    unless_null $P5011, fallback2081
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5013
  fallback2081:
    set $P5008, $P5011
    iter $P5010, $P5011
  for_next2082:
    unless $P5010, for_done2084
    shift $P5015, $P5010
  for_redo2083:
    .const 'Sub' $P5014 = 'cuid_215_1356803021.47401' 
    capture_lex $P5014
    $P5008 = $P5014($P5015)
    goto for_next2082
  for_done2084:
.annotate 'line', 769
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_215_1356803021.47401") :anon :lex :outer("cuid_167_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 768
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_168_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 772
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_216_1356803021.47401' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_217_1356803021.47401' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_221_1356803021.47401' 
    capture_lex $P5018 
    .lex "$str", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    box $P5003, ""
    set $P101, $P5003
    unless_null _lex_param_1, fallback2087
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5005
  fallback2087:
    set $P5004, _lex_param_1["name"]
    unless_null $P5004, fallback2088
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5006
  fallback2088:
    unless $P5004 goto if572_else2085 
    .const 'Sub' $P5007 = 'cuid_216_1356803021.47401' 
    capture_lex $P5007
    $P5008 = $P5007()
    goto if572_end2086
  if572_else2085:
    unless_null _lex_param_1, fallback2098
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5010
  fallback2098:
    set $P5009, _lex_param_1["uniprop"]
    unless_null $P5009, fallback2099
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5011
  fallback2099:
    unless $P5009 goto if573_else2096 
    .const 'Sub' $P5012 = 'cuid_217_1356803021.47401' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5016, $P5013
    goto if573_end2097
  if573_else2096:
    .const 'Sub' $P5014 = 'cuid_221_1356803021.47401' 
    capture_lex $P5014
    $P5015 = $P5014()
    set $P5016, $P5015
  if573_end2097:
  if572_end2086:
.annotate 'line', 837
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1356803021.47401") :anon :lex :outer("cuid_168_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 775
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback2089
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5004
  fallback2089:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback2090
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback2090:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101, $P5006
.annotate 'line', 777
    nqp_get_sc_object $P5010, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Regex"]
    unless_null $P5007, fallback2091
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback2091:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback2092
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5014
  fallback2092:
    set $P5012, $P5013["sign"]
    unless_null $P5012, fallback2093
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5015
  fallback2093:
    set $S5002, $P5012
    iseq $I5001, $S5002, "-"
    find_lex $P5016, "$/"
.annotate 'line', 779
    nqp_get_sc_object $P5020, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Node"]
    unless_null $P5017, fallback2094
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5021
  fallback2094:
    nqp_get_sc_object $P5025, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback2095
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5026
  fallback2095:
    $P5027 = $P5022."new"($P101 :named("value"))
    $P5028 = $P5017."new"($P5027)
    $P5029 = $P5007."new"($P5028, "subrule" :named("rxtype"), "method" :named("subtype"), $I5001 :named("negate"), $P5016 :named("node"))
    store_lex "$qast", $P5029
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_217_1356803021.47401") :anon :lex :outer("cuid_168_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 781
    .lex "$uniprop", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback2100
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5004
  fallback2100:
    set $P5002, $P5003["uniprop"]
    unless_null $P5002, fallback2101
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback2101:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101, $P5006
.annotate 'line', 783
    nqp_get_sc_object $P5010, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Regex"]
    unless_null $P5007, fallback2102
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback2102:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback2107
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5013, $P5014
  fallback2107:
    set $P5012, $P5013["sign"]
    unless_null $P5012, fallback2108
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5015
  fallback2108:
    set $S5002, $P5012
    iseq $I5001, $S5002, "-"
    set $I5003, $I5001
    unless $I5001 goto if575_end2106 
    find_lex $P5017, "$/"
    unless_null $P5017, fallback2109
    nqp_get_sc_object $P5018, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5017, $P5018
  fallback2109:
    set $P5016, $P5017["invert"]
    unless_null $P5016, fallback2110
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5016, $P5019
  fallback2110:
    set $S5003, $P5016
    isne $I5002, $S5003, "!"
    set $I5003, $I5002
  if575_end2106:
    set $I5007, $I5003
    if $I5003 goto unless574_end2104 
    find_lex $P5021, "$/"
    unless_null $P5021, fallback2113
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5021, $P5022
  fallback2113:
    set $P5020, $P5021["sign"]
    unless_null $P5020, fallback2114
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5023
  fallback2114:
    set $S5004, $P5020
    isne $I5004, $S5004, "-"
    set $I5006, $I5004
    unless $I5004 goto if576_end2112 
    find_lex $P5025, "$/"
    unless_null $P5025, fallback2115
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5026
  fallback2115:
    set $P5024, $P5025["invert"]
    unless_null $P5024, fallback2116
    nqp_get_sc_object $P5027, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5024, $P5027
  fallback2116:
    set $S5005, $P5024
    iseq $I5005, $S5005, "!"
    set $I5006, $I5005
  if576_end2112:
    set $I5007, $I5006
  unless574_end2104:
    find_lex $P5028, "$/"
    $P5029 = $P5007."new"($P101, "uniprop" :named("rxtype"), $I5007 :named("negate"), $P5028 :named("node"))
    store_lex "$qast", $P5029
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1356803021.47401") :anon :lex :outer("cuid_168_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 787
    .const 'Sub' $P5058 = 'cuid_219_1356803021.47401' 
    capture_lex $P5058 
    .lex "@alts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5006, "$/"
    unless_null $P5006, fallback2117
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5007
  fallback2117:
    set $P5005, $P5006["charspec"]
    unless_null $P5005, fallback2118
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5008
  fallback2118:
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next2179:
    unless $P5004, for_done2181
    shift $P5010, $P5004
  for_redo2180:
    .const 'Sub' $P5009 = 'cuid_219_1356803021.47401' 
    capture_lex $P5009
    $P5002 = $P5009($P5010)
    goto for_next2179
  for_done2181:
    find_lex $P5011, "$str"
    set $S5001, $P5011
    length $I5001, $S5001
    unless $I5001 goto if592_end2183 
.annotate 'line', 827
    nqp_get_sc_object $P5015, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Regex"]
    unless_null $P5012, fallback2184
    nqp_get_sc_object $P5016, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5016
  fallback2184:
    find_lex $P5017, "$str"
    find_lex $P5018, "$/"
    find_lex $P5020, "$/"
    unless_null $P5020, fallback2185
    nqp_get_sc_object $P5021, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5020, $P5021
  fallback2185:
    set $P5019, $P5020["sign"]
    unless_null $P5019, fallback2186
    nqp_get_sc_object $P5022, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5019, $P5022
  fallback2186:
    set $S5002, $P5019
    iseq $I5002, $S5002, "-"
    $P5023 = $P5012."new"($P5017, "enumcharlist" :named("rxtype"), $P5018 :named("node"), $I5002 :named("negate"))
    $P5024 = $P101."push"($P5023)
  if592_end2183:
    set $N5001, $P101
    set $N5002, 1
    iseq $I5003, $N5001, $N5002
    unless $I5003 goto if593_else2187 
    set $P5025, $P101[0]
    unless_null $P5025, fallback2189
    nqp_get_sc_object $P5026, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5026
  fallback2189:
    set $P5057, $P5025
    goto if593_end2188
  if593_else2187:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback2192
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5028, $P5029
  fallback2192:
    set $P5027, $P5028["sign"]
    unless_null $P5027, fallback2193
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5030
  fallback2193:
    set $S5003, $P5027
    iseq $I5004, $S5003, "-"
    unless $I5004 goto if594_else2190 
.annotate 'line', 831
    nqp_get_sc_object $P5034, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Regex"]
    unless_null $P5031, fallback2194
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5031, $P5035
  fallback2194:
    find_lex $P5036, "$/"
.annotate 'line', 832
    nqp_get_sc_object $P5040, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Regex"]
    unless_null $P5037, fallback2195
    nqp_get_sc_object $P5041, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5037, $P5041
  fallback2195:
    $P5042 = $P5037."new"($P101 :flat, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
.annotate 'line', 833
    nqp_get_sc_object $P5046, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Regex"]
    unless_null $P5043, fallback2196
    nqp_get_sc_object $P5047, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5043, $P5047
  fallback2196:
    $P5048 = $P5043."new"("cclass" :named("rxtype"), "." :named("subtype"))
    $P5049 = $P5031."new"($P5042, $P5048, "concat" :named("rxtype"), $P5036 :named("node"))
    set $P5056, $P5049
    goto if594_end2191
  if594_else2190:
.annotate 'line', 834
    nqp_get_sc_object $P5053, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Regex"]
    unless_null $P5050, fallback2197
    nqp_get_sc_object $P5054, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5050, $P5054
  fallback2197:
    $P5055 = $P5050."new"($P101 :flat, "altseq" :named("rxtype"))
    set $P5056, $P5055
  if594_end2191:
    set $P5057, $P5056
  if593_end2188:
    store_lex "$qast", $P5057
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1356803021.47401") :anon :lex :outer("cuid_221_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 789
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_218_1356803021.47401' 
    capture_lex $P5017 
    .const 'Sub' $P5017 = 'cuid_220_1356803021.47401' 
    capture_lex $P5017 
    .lex "$_", _lex_param_0 
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback2121
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5002
  fallback2121:
    unless $P5001 goto if577_else2119 
    .const 'Sub' $P5003 = 'cuid_218_1356803021.47401' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5016, $P5004
    goto if577_end2120
  if577_else2119:
    set $P5006, _lex_param_0[0]
    unless_null $P5006, fallback2170
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5007
  fallback2170:
    set $P5005, $P5006["backslash"]
    unless_null $P5005, fallback2171
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5008
  fallback2171:
    unless $P5005 goto if590_else2168 
    .const 'Sub' $P5009 = 'cuid_220_1356803021.47401' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5015, $P5010
    goto if590_end2169
  if590_else2168:
.annotate 'line', 825
    find_lex $P5011, "$str"
    set $S5002, $P5011
    set $P5012, _lex_param_0[0]
    unless_null $P5012, fallback2178
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5013
  fallback2178:
    set $S5003, $P5012
    concat $S5001, $S5002, $S5003
    box $P5014, $S5001
    store_lex "$str", $P5014
    set $P5015, $P5014
  if590_end2169:
    set $P5016, $P5015
  if577_end2120:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1356803021.47401") :anon :lex :outer("cuid_219_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 790
    .lex "$node", $P101 
    .lex "$lhs", $P102 
    .lex "$rhs", $P103 
    .lex "$ord0", $P104 
    .lex "$ord1", $P105 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P105, $P5005
    find_lex $P5008, "$_"
    set $P5007, $P5008[0]
    unless_null $P5007, fallback2124
    nqp_get_sc_object $P5009, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5009
  fallback2124:
    set $P5006, $P5007["backslash"]
    unless_null $P5006, fallback2125
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback2125:
    unless $P5006 goto if578_else2122 
.annotate 'line', 794
.annotate 'line', 795
    find_lex $P5013, "$_"
    set $P5012, $P5013[0]
    unless_null $P5012, fallback2126
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5014
  fallback2126:
    set $P5011, $P5012["backslash"]
    unless_null $P5011, fallback2127
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5015
  fallback2127:
    $P5016 = $P5011."ast"()
    set $P101, $P5016
.annotate 'line', 797
    $P5017 = $P101."rxtype"()
    set $S5001, $P5017
    isne $I5001, $S5001, "literal"
    set $I5003, $I5001
    unless $I5001 goto if582_end2135 
    $P5018 = $P101."rxtype"()
    set $S5002, $P5018
    isne $I5002, $S5002, "enumcharlist"
    set $I5003, $I5002
  if582_end2135:
    box $P5021, $I5003
    set $P5020, $P5021
    if $I5003 goto unless581_end2133 
.annotate 'line', 798
    $P5019 = $P101."negate"()
    set $P5020, $P5019
  unless581_end2133:
    set $P5024, $P5020
    if $P5020 goto unless580_end2131 
    set $P5022, $P101[0]
    unless_null $P5022, fallback2136
    nqp_get_sc_object $P5023, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5022, $P5023
  fallback2136:
    set $S5003, $P5022
    length $I5005, $S5003
    set $N5001, $I5005
    set $N5002, 1
    isne $I5004, $N5001, $N5002
    box $P5025, $I5004
    set $P5024, $P5025
  unless580_end2131:
    unless $P5024 goto if579_end2129 
.annotate 'line', 796
    find_lex $P5026, "$/"
    $P5027 = $P5026."CURSOR"()
    find_lex $P5028, "$_"
    set $S5005, $P5028
    concat $S5004, "Illegal range endpoint in regex: ", $S5005
    $P5029 = $P5027."panic"($S5004)
  if579_end2129:
    set $P5030, $P101[0]
    unless_null $P5030, fallback2137
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5030, $P5031
  fallback2137:
    set $P102, $P5030
    goto if578_end2123
  if578_else2122:
.annotate 'line', 801
    find_lex $P5034, "$_"
    set $P5033, $P5034[0]
    unless_null $P5033, fallback2138
    nqp_get_sc_object $P5035, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5033, $P5035
  fallback2138:
    set $P5032, $P5033[0]
    unless_null $P5032, fallback2139
    nqp_get_sc_object $P5036, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5032, $P5036
  fallback2139:
    set $S5006, $P5032
    box $P5037, $S5006
    set $P102, $P5037
  if578_end2123:
    find_lex $P5041, "$_"
    set $P5040, $P5041[1]
    unless_null $P5040, fallback2142
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5040, $P5042
  fallback2142:
    set $P5039, $P5040[0]
    unless_null $P5039, fallback2143
    nqp_get_sc_object $P5043, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5039, $P5043
  fallback2143:
    set $P5038, $P5039["backslash"]
    unless_null $P5038, fallback2144
    nqp_get_sc_object $P5044, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5044
  fallback2144:
    unless $P5038 goto if583_else2140 
.annotate 'line', 804
.annotate 'line', 805
    find_lex $P5048, "$_"
    set $P5047, $P5048[1]
    unless_null $P5047, fallback2145
    nqp_get_sc_object $P5049, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5047, $P5049
  fallback2145:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback2146
    nqp_get_sc_object $P5050, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5046, $P5050
  fallback2146:
    set $P5045, $P5046["backslash"]
    unless_null $P5045, fallback2147
    nqp_get_sc_object $P5051, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5045, $P5051
  fallback2147:
    $P5052 = $P5045."ast"()
    set $P101, $P5052
.annotate 'line', 807
    $P5053 = $P101."rxtype"()
    set $S5007, $P5053
    isne $I5006, $S5007, "literal"
    set $I5008, $I5006
    unless $I5006 goto if587_end2155 
    $P5054 = $P101."rxtype"()
    set $S5008, $P5054
    isne $I5007, $S5008, "enumcharlist"
    set $I5008, $I5007
  if587_end2155:
    box $P5057, $I5008
    set $P5056, $P5057
    if $I5008 goto unless586_end2153 
.annotate 'line', 808
    $P5055 = $P101."negate"()
    set $P5056, $P5055
  unless586_end2153:
    set $P5060, $P5056
    if $P5056 goto unless585_end2151 
    set $P5058, $P101[0]
    unless_null $P5058, fallback2156
    nqp_get_sc_object $P5059, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5058, $P5059
  fallback2156:
    set $S5009, $P5058
    length $I5010, $S5009
    set $N5003, $I5010
    set $N5004, 1
    isne $I5009, $N5003, $N5004
    box $P5061, $I5009
    set $P5060, $P5061
  unless585_end2151:
    unless $P5060 goto if584_end2149 
.annotate 'line', 806
    find_lex $P5062, "$/"
    $P5063 = $P5062."CURSOR"()
    find_lex $P5064, "$_"
    set $S5011, $P5064
    concat $S5010, "Illegal range endpoint in regex: ", $S5011
    $P5065 = $P5063."panic"($S5010)
  if584_end2149:
    set $P5066, $P101[0]
    unless_null $P5066, fallback2157
    nqp_get_sc_object $P5067, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5066, $P5067
  fallback2157:
    set $P103, $P5066
    goto if583_end2141
  if583_else2140:
.annotate 'line', 811
    find_lex $P5071, "$_"
    set $P5070, $P5071[1]
    unless_null $P5070, fallback2158
    nqp_get_sc_object $P5072, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5070, $P5072
  fallback2158:
    set $P5069, $P5070[0]
    unless_null $P5069, fallback2159
    nqp_get_sc_object $P5073, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5069, $P5073
  fallback2159:
    set $P5068, $P5069[0]
    unless_null $P5068, fallback2160
    nqp_get_sc_object $P5074, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5068, $P5074
  fallback2160:
    set $S5012, $P5068
    box $P5075, $S5012
    set $P103, $P5075
  if583_end2141:
    set $S5013, $P102
    ord $I5011, $S5013
    box $P5076, $I5011
    set $P104, $P5076
    set $S5014, $P103
    ord $I5012, $S5014
    box $P5077, $I5012
    set $P105, $P5077
    set $N5005, $P104
    set $N5006, $P105
    isgt $I5013, $N5005, $N5006
    unless $I5013 goto if588_end2162 
.annotate 'line', 816
    find_lex $P5078, "$/"
    $P5079 = $P5078."CURSOR"()
    find_lex $P5080, "$_"
    set $S5016, $P5080
    concat $S5015, "Illegal reversed character range in regex: ", $S5016
    $P5081 = $P5079."panic"($S5015)
  if588_end2162:
    new $P5085, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5085, while589_handlers2166
    push_eh $P5085
  while589_test2163:
    set $N5007, $P104
    set $N5008, $P105
    isle $I5014, $N5007, $N5008
    box $P5086, $I5014
    set $P5084, $P5086
    unless $I5014 goto while589_done2167 
  while589_redo2165:
    find_lex $P5082, "$str"
    set $S5018, $P5082
    set tmp_2, $P104
    set $N5010, tmp_2
    set $N5011, 1
    add $N5009, $N5010, $N5011
    box $P5083, $N5009
    set $P104, $P5083
    set $I5015, tmp_2
    chr $S5019, $I5015
    concat $S5017, $S5018, $S5019
    box $P5083, $S5017
    store_lex "$str", $P5083
    set $P5084, $P5083
    goto while589_test2163 
  while589_handlers2166:
    .get_results ($P5085)
    pop_upto_eh $P5085
    getattribute $P5085, $P5085, 'type'
    eq $P5085, .CONTROL_LOOP_NEXT, while589_test2163
    eq $P5085, .CONTROL_LOOP_REDO, while589_redo2165
  while589_done2167:
    pop_eh 
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1356803021.47401") :anon :lex :outer("cuid_219_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 820
    .lex "$bs", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 821
    find_lex $P5004, "$_"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback2172
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5005
  fallback2172:
    set $P5002, $P5003["backslash"]
    unless_null $P5002, fallback2173
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5006
  fallback2173:
    $P5007 = $P5002."ast"()
    set $P101, $P5007
    find_lex $P5009, "$/"
    unless_null $P5009, fallback2176
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5010
  fallback2176:
    set $P5008, $P5009["sign"]
    unless_null $P5008, fallback2177
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5011
  fallback2177:
    set $S5001, $P5008
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if591_end2175 
.annotate 'line', 822
    $P5012 = $P101."negate"()
    isfalse $I5002, $P5012
    $P5013 = $P101."negate"($I5002)
  if591_end2175:
.annotate 'line', 823
    find_lex $P5014, "@alts"
    $P5015 = $P5014."push"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_169_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 840
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_222_1356803021.47401' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_223_1356803021.47401' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback2200
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5002
  fallback2200:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback2201
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5003
  fallback2201:
    unless $P5001 goto if595_else2198 
.annotate 'line', 841
.annotate 'line', 842
    nqp_get_sc_object $P5007, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["SVal"]
    unless_null $P5004, fallback2204
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5008
  fallback2204:
    unless_null _lex_param_1, fallback2205
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_1, $P5011
  fallback2205:
    set $P5010, _lex_param_1["quote_EXPR"]
    unless_null $P5010, fallback2206
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5012
  fallback2206:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback2207
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5013
  fallback2207:
    $P5014 = $P5009."ast"()
    $P5015 = $P5004."ACCEPTS"($P5014)
    unless $P5015 goto if596_else2202 
    .const 'Sub' $P5016 = 'cuid_222_1356803021.47401' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5020, $P5017
    goto if596_end2203
  if596_else2202:
.annotate 'line', 850
.annotate 'line', 851
    $P5018 = _lex_param_1."CURSOR"()
    $P5019 = $P5018."panic"("Internal modifier strings must be literals")
    set $P5020, $P5019
  if596_end2203:
    set $P5023, $P5020
    goto if595_end2199
  if595_else2198:
    .const 'Sub' $P5021 = 'cuid_223_1356803021.47401' 
    capture_lex $P5021
    $P5022 = $P5021()
    set $P5023, $P5022
  if595_end2199:
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1356803021.47401") :anon :lex :outer("cuid_169_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 842
    .lex "$key", $P101 
    .lex "$val", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback2208
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5005, $P5006
  fallback2208:
    set $P5004, $P5005["mod_ident"]
    unless_null $P5004, fallback2209
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5007
  fallback2209:
    set $P5003, $P5004["sym"]
    unless_null $P5003, fallback2210
    nqp_get_sc_object $P5008, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5008
  fallback2210:
    set $S5001, $P5003
    box $P5009, $S5001
    set $P101, $P5009
.annotate 'line', 844
    find_lex $P5012, "$/"
    unless_null $P5012, fallback2211
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5012, $P5013
  fallback2211:
    set $P5011, $P5012["quote_EXPR"]
    unless_null $P5011, fallback2212
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5011, $P5014
  fallback2212:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback2213
    nqp_get_sc_object $P5015, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5015
  fallback2213:
    $P5016 = $P5010."ast"()
    $P5017 = $P5016."value"()
    set $P102, $P5017
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback2214
    nqp_get_sc_object $P5021, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback2215
    nqp_get_sc_object $P5023, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback2215:
    unless_null $P5019, vivi_5972216
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_5972216:
    set $P5018, $P5019
  fallback2214:
    set $S5002, $P101
    set $P5018[$S5002], $P102
.annotate 'line', 846
    find_dynamic_lex $P5026, "$/"
    set $S5003, $P101
    iseq $I5001, $S5003, "dba"
    unless $I5001 goto if598_else2217 
.annotate 'line', 847
    nqp_get_sc_object $P5030, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback2219
    nqp_get_sc_object $P5031, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5031
  fallback2219:
    $P5032 = $P5027."new"("dba" :named("rxtype"), $P102 :named("name"))
    set $P5033, $P5032
    goto if598_end2218
  if598_else2217:
    box $P5034, 0
    set $P5033, $P5034
  if598_end2218:
    $P5035 = $P5026."!make"($P5033)
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1356803021.47401") :anon :lex :outer("cuid_169_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 854
    .lex "$n", $P101 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback2222
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5004, $P5005
  fallback2222:
    set $P5003, $P5004["n"]
    unless_null $P5003, fallback2223
    nqp_get_sc_object $P5006, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5003, $P5006
  fallback2223:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback2224
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5007
  fallback2224:
    set $S5001, $P5002
    isgt $I5001, $S5001, ""
    unless $I5001 goto if599_else2220 
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2225
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5011
  fallback2225:
    set $P5009, $P5010["n"]
    unless_null $P5009, fallback2226
    nqp_get_sc_object $P5012, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5012
  fallback2226:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback2227
    nqp_get_sc_object $P5013, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5008, $P5013
  fallback2227:
    set $N5001, $P5008
    box $P5015, $N5001
    set $P5014, $P5015
    goto if599_end2221
  if599_else2220:
    box $P5016, 1
    set $P5014, $P5016
  if599_end2221:
    set $P101, $P5014
    find_dynamic_lex $P5017, "%*RX"
    unless_null $P5017, fallback2228
    nqp_get_sc_object $P5020, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["%RX"]
    unless_null $P5018, fallback2229
    nqp_get_sc_object $P5022, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5021, $P5022
    new $P5023, 'Hash'
    set $P5021["%RX"], $P5023
    set $P5018, $P5023
  fallback2229:
    unless_null $P5018, vivi_6002230
    die "Contextual %*RX not found"
    box $P5024, "Contextual %*RX not found"
    set $P5018, $P5024
  vivi_6002230:
    set $P5017, $P5018
  fallback2228:
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2231
    nqp_get_sc_object $P5028, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5027, $P5028
  fallback2231:
    set $P5026, $P5027["mod_ident"]
    unless_null $P5026, fallback2232
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5026, $P5029
  fallback2232:
    set $P5025, $P5026["sym"]
    unless_null $P5025, fallback2233
    nqp_get_sc_object $P5030, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5030
  fallback2233:
    set $S5002, $P5025
    set $P5017[$S5002], $P101
.annotate 'line', 857
    find_dynamic_lex $P5031, "$/"
    $P5032 = $P5031."!make"(0)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "qbuildsub" :subid("cuid_170_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 868
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("anon") :optional 
    .param int haz_param_3 :opt_flag 
    .param pmc _lex_param_4 :named("addself") :optional 
    .param int haz_param_4 :opt_flag 
    .param pmc _lex_param_5 :slurpy :named 
    if haz_param_2, default2266
    nqp_get_sc_object $P5104, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Block"]
    unless_null $P5101, fallback2267
    nqp_get_sc_object $P5105, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5101, $P5105
  fallback2267:
    $P5106 = $P5101."new"()
    set _lex_param_2, $P5106
  default2266:
    if haz_param_3, default2268
    nqp_get_sc_object $P5107, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_3, $P5107
  default2268:
    if haz_param_4, default2269
    nqp_get_sc_object $P5108, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set _lex_param_4, $P5108
  default2269:
    .lex "$code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$anon", _lex_param_3 
    .lex "$addself", _lex_param_4 
    .lex "%rest", _lex_param_5 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
    exists $I5001, _lex_param_5["code_obj"]
    unless $I5001 goto if601_else2234 
    set $P5002, _lex_param_5["code_obj"]
    unless_null $P5002, fallback2236
    nqp_get_sc_object $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5003
  fallback2236:
    set $P5006, $P5002
    goto if601_end2235
  if601_else2234:
.annotate 'line', 871
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."create_regex_code_object"(_lex_param_2)
    set $P5006, $P5005
  if601_end2235:
    set $P101, $P5006
    unless _lex_param_4 goto if602_end2238 
.annotate 'line', 873
.annotate 'line', 874
    nqp_get_sc_object $P5010, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Var"]
    unless_null $P5007, fallback2239
    nqp_get_sc_object $P5011, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5007, $P5011
  fallback2239:
    $P5012 = $P5007."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
    $P5013 = _lex_param_2."push"($P5012)
  if602_end2238:
.annotate 'line', 876
    $P5014 = _lex_param_2."symbol"(utf8:"$\x{a2}")
    if $P5014 goto unless603_end2241 
.annotate 'line', 877
    nqp_get_sc_object $P5018, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Var"]
    unless_null $P5015, fallback2242
    nqp_get_sc_object $P5019, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5015, $P5019
  fallback2242:
    $P5020 = $P5015."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    _lex_param_2."push"($P5020)
.annotate 'line', 878
    $P5021 = _lex_param_2."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
  unless603_end2241:
.annotate 'line', 881
    nqp_decontainerize $P5022, _lex_param_0
    $P5023 = "&capnames"(_lex_param_1, 0)
    $P5022."store_regex_caps"($P101, _lex_param_2, $P5023)
.annotate 'line', 882
    nqp_decontainerize $P5024, _lex_param_0
    nqp_get_sc_object $P5028, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5027, $P5028, "QRegex"
    get_who $P5026, $P5027
    set $P5025, $P5026["NFA"]
    unless_null $P5025, fallback2243
    nqp_get_sc_object $P5029, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5025, $P5029
  fallback2243:
    $P5030 = $P5025."new"()
    $P5031 = $P5030."addnode"(_lex_param_1)
    $P5024."store_regex_nfa"($P101, _lex_param_2, $P5031)
.annotate 'line', 883
    nqp_decontainerize $P5032, _lex_param_0
    $P5032."alt_nfas"($P101, _lex_param_2, _lex_param_1)
    set _lex_param_2["orig_qast"], _lex_param_1
.annotate 'line', 886
    nqp_get_sc_object $P5036, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Regex"]
    unless_null $P5033, fallback2244
    nqp_get_sc_object $P5037, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5033, $P5037
  fallback2244:
.annotate 'line', 887
    nqp_get_sc_object $P5041, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Regex"]
    unless_null $P5038, fallback2245
    nqp_get_sc_object $P5042, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5038, $P5042
  fallback2245:
    $P5043 = $P5038."new"("scan" :named("rxtype"))
    unless _lex_param_3 goto if604_else2246 
.annotate 'line', 890
    nqp_get_sc_object $P5047, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Regex"]
    unless_null $P5044, fallback2248
    nqp_get_sc_object $P5048, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5044, $P5048
  fallback2248:
    $P5049 = $P5044."new"("pass" :named("rxtype"))
    set $P5099, $P5049
    goto if604_end2247
  if604_else2246:
    find_dynamic_lex $P5051, "%*RX"
    unless_null $P5051, fallback2251
    nqp_get_sc_object $P5054, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["%RX"]
    unless_null $P5052, fallback2252
    nqp_get_sc_object $P5056, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5055, $P5056
    new $P5057, 'Hash'
    set $P5055["%RX"], $P5057
    set $P5052, $P5057
  fallback2252:
    unless_null $P5052, vivi_6062253
    die "Contextual %*RX not found"
    box $P5058, "Contextual %*RX not found"
    set $P5052, $P5058
  vivi_6062253:
    set $P5051, $P5052
  fallback2251:
    set $P5050, $P5051["name"]
    unless_null $P5050, fallback2254
    nqp_get_sc_object $P5059, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5050, $P5059
  fallback2254:
    set $S5002, $P5050
    substr $S5001, $S5002, 0, 12
    isne $I5002, $S5001, "!!LATENAME!!"
    unless $I5002 goto if605_else2249 
.annotate 'line', 892
    nqp_get_sc_object $P5063, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set $P5060, $P5061["Regex"]
    unless_null $P5060, fallback2255
    nqp_get_sc_object $P5064, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5060, $P5064
  fallback2255:
    find_dynamic_lex $P5066, "%*RX"
    unless_null $P5066, fallback2256
    nqp_get_sc_object $P5069, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%RX"]
    unless_null $P5067, fallback2257
    nqp_get_sc_object $P5071, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%RX"], $P5072
    set $P5067, $P5072
  fallback2257:
    unless_null $P5067, vivi_6072258
    die "Contextual %*RX not found"
    box $P5073, "Contextual %*RX not found"
    set $P5067, $P5073
  vivi_6072258:
    set $P5066, $P5067
  fallback2256:
    set $P5065, $P5066["name"]
    unless_null $P5065, fallback2259
    nqp_get_sc_object $P5074, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5065, $P5074
  fallback2259:
    $P5075 = $P5060."new"("pass" :named("rxtype"), $P5065 :named("name"))
    set $P5098, $P5075
    goto if605_end2250
  if605_else2249:
.annotate 'line', 893
    nqp_get_sc_object $P5079, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5078, $P5079, "QAST"
    get_who $P5077, $P5078
    set $P5076, $P5077["Regex"]
    unless_null $P5076, fallback2260
    nqp_get_sc_object $P5080, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5076, $P5080
  fallback2260:
.annotate 'line', 894
    nqp_get_sc_object $P5084, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5083, $P5084, "QAST"
    get_who $P5082, $P5083
    set $P5081, $P5082["Var"]
    unless_null $P5081, fallback2261
    nqp_get_sc_object $P5085, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5081, $P5085
  fallback2261:
    find_dynamic_lex $P5087, "%*RX"
    unless_null $P5087, fallback2262
    nqp_get_sc_object $P5090, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["%RX"]
    unless_null $P5088, fallback2263
    nqp_get_sc_object $P5092, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5091, $P5092
    new $P5093, 'Hash'
    set $P5091["%RX"], $P5093
    set $P5088, $P5093
  fallback2263:
    unless_null $P5088, vivi_6082264
    die "Contextual %*RX not found"
    box $P5094, "Contextual %*RX not found"
    set $P5088, $P5094
  vivi_6082264:
    set $P5087, $P5088
  fallback2262:
    set $P5086, $P5087["name"]
    unless_null $P5086, fallback2265
    nqp_get_sc_object $P5095, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5086, $P5095
  fallback2265:
    set $S5004, $P5086
    substr $S5003, $S5004, 12
    $P5096 = $P5081."new"($S5003 :named("name"), "lexical" :named("scope"))
    $P5097 = $P5076."new"($P5096, "pass" :named("rxtype"))
    set $P5098, $P5097
  if605_end2250:
    set $P5099, $P5098
  if604_end2247:
    $P5100 = $P5033."new"($P5043, _lex_param_1, $P5099, "concat" :named("rxtype"))
    set _lex_param_1, $P5100
.annotate 'line', 900
    _lex_param_2."push"(_lex_param_1)
    .return (_lex_param_2) 
.end
.HLL "nqp"
.namespace []
.sub "alt_nfas" :subid("cuid_171_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 955
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5019 = 'cuid_225_1356803021.47401' 
    capture_lex $P5019 
    .const 'Sub' $P5019 = 'cuid_226_1356803021.47401' 
    capture_lex $P5019 
    .lex "$rxtype", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$ast", _lex_param_3 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P101, $P5001
.annotate 'line', 956
    $P5002 = _lex_param_3."rxtype"()
    set $P101, $P5002
    set $S5001, $P101
    iseq $I5001, $S5001, "alt"
    unless $I5001 goto if609_else2270 
    .const 'Sub' $P5003 = 'cuid_225_1356803021.47401' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5018, $P5004
    goto if609_end2271
  if609_else2270:
    set $S5002, $P101
    iseq $I5002, $S5002, "subcapture"
    set $I5004, $I5002
    if $I5002 goto unless611_end2280 
    set $S5003, $P101
    iseq $I5003, $S5003, "quant"
    set $I5004, $I5003
  unless611_end2280:
    unless $I5004 goto if610_else2277 
.annotate 'line', 966
.annotate 'line', 967
    nqp_decontainerize $P5005, _lex_param_0
    set $P5006, _lex_param_3[0]
    unless_null $P5006, fallback2281
    nqp_get_sc_object $P5007, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5007
  fallback2281:
    $P5008 = $P5005."alt_nfas"(_lex_param_1, _lex_param_2, $P5006)
    set $P5017, $P5008
    goto if610_end2278
  if610_else2277:
    set $S5004, $P101
    iseq $I5005, $S5004, "concat"
    set $I5007, $I5005
    if $I5005 goto unless615_end2289 
    set $S5005, $P101
    iseq $I5006, $S5005, "altseq"
    set $I5007, $I5006
  unless615_end2289:
    set $I5009, $I5007
    if $I5007 goto unless614_end2287 
    set $S5006, $P101
    iseq $I5008, $S5006, "conj"
    set $I5009, $I5008
  unless614_end2287:
    set $I5011, $I5009
    if $I5009 goto unless613_end2285 
    set $S5007, $P101
    iseq $I5010, $S5007, "conjseq"
    set $I5011, $I5010
  unless613_end2285:
    box $P5016, $I5011
    set $P5015, $P5016
    unless $I5011 goto if612_end2283 
.annotate 'line', 969
.annotate 'line', 970
    $P5012 = _lex_param_3."list"()
    set $P5009, $P5012
    iter $P5011, $P5012
  for_next2290:
    unless $P5011, for_done2292
    shift $P5014, $P5011
  for_redo2291:
    .const 'Sub' $P5013 = 'cuid_226_1356803021.47401' 
    capture_lex $P5013
    $P5009 = $P5013($P5014)
    goto for_next2290
  for_done2292:
    set $P5015, $P5009
  if612_end2283:
    set $P5017, $P5015
  if610_end2278:
    set $P5018, $P5017
  if609_end2271:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1356803021.47401") :anon :lex :outer("cuid_171_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 957
    .const 'Sub' $P5023 = 'cuid_224_1356803021.47401' 
    capture_lex $P5023 
    .lex "@alternatives", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 959
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next2273:
    unless $P5004, for_done2275
    shift $P5008, $P5004
  for_redo2274:
    .const 'Sub' $P5007 = 'cuid_224_1356803021.47401' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next2273
  for_done2275:
.annotate 'line', 963
    find_lex $P5009, "$ast"
    nqp_get_sc_object $P5013, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Node"]
    unless_null $P5010, fallback2276
    nqp_get_sc_object $P5014, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5010, $P5014
  fallback2276:
    $P5015 = $P5010."unique"("alt_nfa_")
    set $S5003, $P5015
    concat $S5002, $S5003, "_"
    time $N5001
    set $S5004, $N5001
    concat $S5001, $S5002, $S5004
    $P5009."name"($S5001)
.annotate 'line', 964
    find_lex $P5017, "self"
    nqp_decontainerize $P5016, $P5017
    find_lex $P5018, "$code_obj"
    find_lex $P5019, "$block"
    find_lex $P5020, "$ast"
    $P5021 = $P5020."name"()
    $P5022 = $P5016."store_regex_alt_nfa"($P5018, $P5019, $P5021, $P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1356803021.47401") :anon :lex :outer("cuid_225_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 959
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 960
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    find_lex $P5005, "@alternatives"
.annotate 'line', 961
    nqp_get_sc_object $P5009, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5008, $P5009, "QRegex"
    get_who $P5007, $P5008
    set $P5006, $P5007["NFA"]
    unless_null $P5006, fallback2272
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5006, $P5010
  fallback2272:
    $P5011 = $P5006."new"()
    $P5012 = $P5011."addnode"(_lex_param_0)
    push $P5005, $P5012
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1356803021.47401") :anon :lex :outer("cuid_171_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 970
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5005 = $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "subrule_alias" :subid("cuid_172_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 974
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$ast", _lex_param_1 
    .lex "$name", _lex_param_2 
.annotate 'line', 975
    $P5001 = _lex_param_1."name"()
    set $S5001, $P5001
    isgt $I5001, $S5001, ""
    unless $I5001 goto if616_else2293 
    set $S5004, _lex_param_2
    concat $S5003, $S5004, "="
    $P5002 = _lex_param_1."name"()
    set $S5005, $P5002
    concat $S5002, $S5003, $S5005
    $P5003 = _lex_param_1."name"($S5002)
    goto if616_end2294
  if616_else2293:
.annotate 'line', 976
    $P5004 = _lex_param_1."name"(_lex_param_2)
  if616_end2294:
.annotate 'line', 977
    $P5005 = _lex_param_1."subtype"("capture")
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "flip_ast" :subid("cuid_173_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_227_1356803021.47401' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_228_1356803021.47401' 
    capture_lex $P5022 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_2295
    .lex "RETURN", $P101
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback2299
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5001, $P5005
  fallback2299:
    type_check $I5001, _lex_param_1, $P5001
    if $I5001 goto unless617_end2298 
    find_lex $P5006, "RETURN"
    $P5007 = $P5006(_lex_param_1)
  unless617_end2298:
.annotate 'line', 982
    $P5008 = _lex_param_1."rxtype"()
    set $S5001, $P5008
    iseq $I5002, $S5001, "literal"
    unless $I5002 goto if618_else2300 
.annotate 'line', 983
    set $P5009, _lex_param_1[0]
    unless_null $P5009, fallback2302
    nqp_get_sc_object $P5010, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5009, $P5010
  fallback2302:
    $P5011 = $P5009."reverse"()
    set _lex_param_1[0], $P5011
    goto if618_end2301
  if618_else2300:
.annotate 'line', 985
    $P5012 = _lex_param_1."rxtype"()
    set $S5002, $P5012
    iseq $I5003, $S5002, "concat"
    unless $I5003 goto if619_else2303 
    .const 'Sub' $P5013 = 'cuid_227_1356803021.47401' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5021, $P5014
    goto if619_end2304
  if619_else2303:
.annotate 'line', 990
    $P5018 = _lex_param_1."list"()
    set $P5015, $P5018
    iter $P5017, $P5018
  for_next2315:
    unless $P5017, for_done2317
    shift $P5020, $P5017
  for_redo2316:
    .const 'Sub' $P5019 = 'cuid_228_1356803021.47401' 
    capture_lex $P5019
    $P5015 = $P5019($P5020)
    goto for_next2315
  for_done2317:
    set $P5021, $P5015
  if619_end2304:
  if618_end2301:
    goto lexotic_2296
  lexotic_2295:
    .get_results (_lex_param_1)
  lexotic_2296:
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1356803021.47401") :anon :lex :outer("cuid_173_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 985
    .lex "@tmp", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
  while620_test2305:
    find_lex $P5002, "$qast"
    $P5003 = $P5002."list"()
    set $N5001, $P5003
    box $P5009, $N5001
    set $P5008, $P5009
    unless $N5001 goto while620_done2309 
  while620_redo2307:
.annotate 'line', 987
    find_lex $P5004, "$qast"
    $P5005 = $P5004."list"()
    $P5006 = $P5005."shift"()
    $P5007 = $P101."push"($P5006)
    set $P5008, $P5007
    goto while620_test2305 
  while620_done2309:
  while621_test2310:
    set $P5017, $P101
    unless $P101 goto while621_done2314 
  while621_redo2312:
.annotate 'line', 988
    find_lex $P5010, "$qast"
    $P5011 = $P5010."list"()
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    $P5014 = $P101."pop"()
    $P5015 = $P5012."flip_ast"($P5014)
    $P5016 = $P5011."push"($P5015)
    set $P5017, $P5016
    goto while621_test2310 
  while621_done2314:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_228_1356803021.47401") :anon :lex :outer("cuid_173_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 991
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."flip_ast"(_lex_param_0)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_174_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 998
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
.annotate 'line', 999
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback2318
    nqp_get_sc_object $P5004, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback2319
    nqp_get_sc_object $P5005, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    set $P5002, $P5005
  fallback2319:
    unless_null $P5002, vivi_6222320
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6222320:
    set $P5001, $P5002
  fallback2318:
    $P5007 = _lex_param_1."name"()
    $P5008 = $P5001."create_code"(_lex_param_1, $P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_175_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1003
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 1004
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_176_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1008
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 1009
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_177_1356803021.47401") :anon :lex :outer("cuid_178_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1013
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_229_1356803021.47401' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next2321:
    unless $P5004, for_done2323
    shift $P5006, $P5004
  for_redo2322:
    .const 'Sub' $P5005 = 'cuid_229_1356803021.47401' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next2321
  for_done2323:
.annotate 'line', 1018
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1356803021.47401") :anon :lex :outer("cuid_177_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1015
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1016
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_179_1356803021.47401") :anon :lex :outer("cuid_1_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
.annotate 'line', 1023
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733", 22
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1356803021.47401") :load :init
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .const 'Sub' $P5001 = 'cuid_230_1356803021.47401' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_1_1356803021.47401" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPHLL")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163"
    set cur_sc, $P5001
    cur_sc."set_description"("src/stage2/gen/NQPP6QRegex.pm")
    new $P5002, 'ResizablePMCArray'
    set conflicts, $P5002
    new $P5003, 'ResizableStringArray'
    null $S5001
    push $P5003, $S5001
    push $P5003, "P6opaque"
    push $P5003, "QAST"
    push $P5003, "QRegex"
    push $P5003, "NQPCursorRole"
    push $P5003, "5AC43FAF892FF5DAA29F5960E2BD4FECAD5285F9-1356802996.80852"
    push $P5003, "src/stage2/QRegex.nqp"
    push $P5003, "NQPMatch"
    push $P5003, "NQPCursor"
    push $P5003, "NQPRegexMethod"
    push $P5003, "NQPRegex"
    push $P5003, "HLL"
    push $P5003, "PIRT"
    push $P5003, "DEFAULT"
    push $P5003, "CREATE"
    push $P5003, "28FAC381EB59BA79DA1D75F70404C20E0548F4F5-1356802992.64733"
    push $P5003, "src/stage2/NQPCORE.setting"
    push $P5003, "bless"
    push $P5003, "BUILDALL"
    push $P5003, "new"
    push $P5003, "Str"
    push $P5003, "Numeric"
    push $P5003, "Int"
    push $P5003, "at_pos"
    push $P5003, "at_key"
    push $P5003, "defined"
    push $P5003, "ACCEPTS"
    push $P5003, "isa"
    push $P5003, "__dump"
    push $P5003, "BUILD"
    push $P5003, "16CA0704286B861CA68CF47DE2ED31030BAAEB36-1356803001.77605"
    push $P5003, "src/stage2/gen/NQPHLL.pm"
    push $P5003, "slot_for_object"
    push $P5003, "add_object"
    push $P5003, "add_root_code_ref"
    push $P5003, "update_root_code_ref"
    push $P5003, "is_precompilation_mode"
    push $P5003, "add_load_dependency_task"
    push $P5003, "add_fixup_task"
    push $P5003, "sc"
    push $P5003, "handle"
    push $P5003, "code_ref_blocks"
    push $P5003, "load_dependency_tasks"
    push $P5003, "fixup_tasks"
    push $P5003, "create_code"
    push $P5003, "$!sc"
    push $P5003, "$!handle"
    push $P5003, "$!precomp_mode"
    push $P5003, "$!num_code_refs"
    push $P5003, "$!code_ref_blocks"
    push $P5003, "@!load_dependency_tasks"
    push $P5003, "@!fixup_tasks"
    push $P5003, "%!addr_to_slot"
    push $P5003, "MATCH"
    push $P5003, "Bool"
    push $P5003, "parse"
    push $P5003, "!INTERPOLATE"
    push $P5003, "!INTERPOLATE_REGEX"
    push $P5003, "orig"
    push $P5003, "target"
    push $P5003, "from"
    push $P5003, "pos"
    push $P5003, "CAPHASH"
    push $P5003, "!cursor_init"
    push $P5003, "!cursor_start"
    push $P5003, "!cursor_start_subcapture"
    push $P5003, "!cursor_capture"
    push $P5003, "!cursor_push_cstack"
    push $P5003, "!cursor_pass"
    push $P5003, "!cursor_fail"
    push $P5003, "!cursor_pos"
    push $P5003, "!cursor_next"
    push $P5003, "!cursor_more"
    push $P5003, "!reduce"
    push $P5003, "!reduce_with_match"
    push $P5003, "!shared"
    push $P5003, "!protoregex"
    push $P5003, "!protoregex_nfa"
    push $P5003, "!protoregex_table"
    push $P5003, "!alt"
    push $P5003, "!alt_nfa"
    push $P5003, "!precompute_nfas"
    push $P5003, "!dba"
    push $P5003, "!highwater"
    push $P5003, "!highexpect"
    push $P5003, "!fresh_highexpect"
    push $P5003, "!set_highexpect"
    push $P5003, "!clear_highwater"
    push $P5003, "!BACKREF"
    push $P5003, "!LITERAL"
    push $P5003, "at"
    push $P5003, "before"
    push $P5003, "after"
    push $P5003, "ws"
    push $P5003, "ww"
    push $P5003, "wb"
    push $P5003, "ident"
    push $P5003, "alpha"
    push $P5003, "alnum"
    push $P5003, "upper"
    push $P5003, "lower"
    push $P5003, "digit"
    push $P5003, "xdigit"
    push $P5003, "space"
    push $P5003, "blank"
    push $P5003, "cntrl"
    push $P5003, "punct"
    push $P5003, "FAILGOAL"
    push $P5003, "throw_unrecog_backslash_seq"
    push $P5003, "termish"
    push $P5003, "term"
    push $P5003, "infix"
    push $P5003, "prefix"
    push $P5003, "postfix"
    push $P5003, "circumfix"
    push $P5003, "postcircumfix"
    push $P5003, "term:sym<circumfix>"
    push $P5003, "infixish"
    push $P5003, "prefixish"
    push $P5003, "postfixish"
    push $P5003, "nullterm"
    push $P5003, "nullterm_alt"
    push $P5003, "nulltermish"
    push $P5003, "quote_delimited"
    push $P5003, "quote_atom"
    push $P5003, "decint"
    push $P5003, "decints"
    push $P5003, "hexint"
    push $P5003, "hexints"
    push $P5003, "octint"
    push $P5003, "octints"
    push $P5003, "binint"
    push $P5003, "binints"
    push $P5003, "integer"
    push $P5003, "dec_number"
    push $P5003, "escale"
    push $P5003, "quote_escape"
    push $P5003, "quote_escape:sym<backslash>"
    push $P5003, "quote_escape:sym<stopper>"
    push $P5003, "quote_escape:sym<bs>"
    push $P5003, "quote_escape:sym<nl>"
    push $P5003, "quote_escape:sym<cr>"
    push $P5003, "quote_escape:sym<tab>"
    push $P5003, "quote_escape:sym<ff>"
    push $P5003, "quote_escape:sym<esc>"
    push $P5003, "quote_escape:sym<hex>"
    push $P5003, "quote_escape:sym<oct>"
    push $P5003, "quote_escape:sym<chr>"
    push $P5003, "quote_escape:sym<0>"
    push $P5003, "quote_escape:sym<misc>"
    push $P5003, "charname"
    push $P5003, "charnames"
    push $P5003, "charspec"
    push $P5003, "O"
    push $P5003, "panic"
    push $P5003, "peek_delimiters"
    push $P5003, "quote_EXPR"
    push $P5003, "quotemod_check"
    push $P5003, "starter"
    push $P5003, "stopper"
    push $P5003, "split_words"
    push $P5003, "EXPR"
    push $P5003, "EXPR_reduce"
    push $P5003, "ternary"
    push $P5003, "MARKER"
    push $P5003, "MARKED"
    push $P5003, "LANG"
    push $P5003, "obs"
    push $P5003, "throw_unrecognized_metachar"
    push $P5003, "throw_null_pattern"
    push $P5003, "normspace"
    push $P5003, "identifier"
    push $P5003, "arg"
    push $P5003, "arglist"
    push $P5003, "TOP"
    push $P5003, "nibbler"
    push $P5003, "infixstopper"
    push $P5003, "rxstopper"
    push $P5003, "termaltseq"
    push $P5003, "termconjseq"
    push $P5003, "termalt"
    push $P5003, "termconj"
    push $P5003, "quantified_atom"
    push $P5003, "separator"
    push $P5003, "atom"
    push $P5003, "quantifier"
    push $P5003, "quantifier:sym<*>"
    push $P5003, "quantifier:sym<+>"
    push $P5003, "quantifier:sym<?>"
    push $P5003, "quantifier:sym<{N,M}>"
    push $P5003, "quantifier:sym<**>"
    push $P5003, "backmod"
    push $P5003, "metachar"
    push $P5003, "metachar:sym<ws>"
    push $P5003, "metachar:sym<[ ]>"
    push $P5003, "metachar:sym<( )>"
    push $P5003, "metachar:sym<'>"
    push $P5003, "metachar:sym<\">"
    push $P5003, "metachar:sym<.>"
    push $P5003, "metachar:sym<^>"
    push $P5003, "metachar:sym<^^>"
    push $P5003, "metachar:sym<$>"
    push $P5003, "metachar:sym<$$>"
    push $P5003, "metachar:sym<:::>"
    push $P5003, "metachar:sym<::>"
    push $P5003, "metachar:sym<lwb>"
    push $P5003, "metachar:sym<rwb>"
    push $P5003, "metachar:sym<from>"
    push $P5003, "metachar:sym<to>"
    push $P5003, "metachar:sym<bs>"
    push $P5003, "metachar:sym<mod>"
    push $P5003, "metachar:sym<quantifier>"
    push $P5003, "metachar:sym<~>"
    push $P5003, "metachar:sym<{*}>"
    push $P5003, "metachar:sym<assert>"
    push $P5003, "metachar:sym<var>"
    push $P5003, "backslash"
    push $P5003, "backslash:sym<s>"
    push $P5003, "backslash:sym<b>"
    push $P5003, "backslash:sym<e>"
    push $P5003, "backslash:sym<f>"
    push $P5003, "backslash:sym<h>"
    push $P5003, "backslash:sym<r>"
    push $P5003, "backslash:sym<t>"
    push $P5003, "backslash:sym<v>"
    push $P5003, "backslash:sym<o>"
    push $P5003, "backslash:sym<x>"
    push $P5003, "backslash:sym<c>"
    push $P5003, "backslash:sym<A>"
    push $P5003, "backslash:sym<z>"
    push $P5003, "backslash:sym<Z>"
    push $P5003, "backslash:sym<Q>"
    push $P5003, "backslash:sym<unrec>"
    push $P5003, "backslash:sym<misc>"
    push $P5003, "assertion"
    push $P5003, "assertion:sym<?>"
    push $P5003, "assertion:sym<!>"
    push $P5003, "assertion:sym<|>"
    push $P5003, "assertion:sym<method>"
    push $P5003, "assertion:sym<name>"
    push $P5003, "assertion:sym<[>"
    push $P5003, "cclass_elem"
    push $P5003, "mod_internal"
    push $P5003, "mod_ident"
    push $P5003, "mod_ident:sym<ignorecase>"
    push $P5003, "mod_ident:sym<ratchet>"
    push $P5003, "mod_ident:sym<sigspace>"
    push $P5003, "mod_ident:sym<dba>"
    push $P5003, "mod_ident:sym<oops>"
    push $P5003, "$!shared"
    push $P5003, "$!from"
    push $P5003, "$!pos"
    push $P5003, "$!match"
    push $P5003, "$!name"
    push $P5003, "$!bstack"
    push $P5003, "$!cstack"
    push $P5003, "$!regexsub"
    push $P5003, "$!restart"
    push $P5003, "ints_to_string"
    push $P5003, "CTXSAVE"
    push $P5003, "SET_BLOCK_OUTER_CTX"
    push $P5003, "qbuildsub"
    push $P5003, "alt_nfas"
    push $P5003, "subrule_alias"
    push $P5003, "flip_ast"
    push $P5003, "create_regex_code_object"
    push $P5003, "store_regex_caps"
    push $P5003, "store_regex_nfa"
    push $P5003, "store_regex_alt_nfa"
    push $P5003, "language"
    push $P5003, "compiler"
    push $P5003, "config"
    push $P5003, "load_module"
    push $P5003, "autoprint"
    push $P5003, "interactive"
    push $P5003, "eval"
    push $P5003, "ctxsave"
    push $P5003, "stages"
    push $P5003, "parsegrammar"
    push $P5003, "parseactions"
    push $P5003, "interactive_banner"
    push $P5003, "interactive_prompt"
    push $P5003, "compiler_progname"
    push $P5003, "commandline_options"
    push $P5003, "command_line"
    push $P5003, "command_eval"
    push $P5003, "process_args"
    push $P5003, "evalfiles"
    push $P5003, "compile"
    push $P5003, "start"
    push $P5003, "past"
    push $P5003, "post"
    push $P5003, "pirbegin"
    push $P5003, "pir"
    push $P5003, "evalpmc"
    push $P5003, "dumper"
    push $P5003, "usage"
    push $P5003, "version"
    push $P5003, "show-config"
    push $P5003, "verbose-config"
    push $P5003, "vmstat"
    push $P5003, "nqpevent"
    push $P5003, "removestage"
    push $P5003, "addstage"
    push $P5003, "parse_name"
    push $P5003, "lineof"
    push $P5003, "user-progname"
    push $P5003, "cli-options"
    push $P5003, "cli-arguments"
    push $P5003, "@!stages"
    push $P5003, "$!parsegrammar"
    push $P5003, "$!parseactions"
    push $P5003, "@!cmdoptions"
    push $P5003, "$!usage"
    push $P5003, "$!compiler_progname"
    push $P5003, "$!language"
    push $P5003, "%!config"
    push $P5003, "$!user_progname"
    push $P5003, "@!cli-arguments"
    push $P5003, "%!cli-options"
    push $P5003, ""
    push $P5003, "alt_nfa__1_1356803021.73087"
    push $P5003, "alt_nfa__2_1356803021.73767"
    push $P5003, "val"
    push $P5003, "'"
    push $P5003, "\""
    push $P5003, "alt_nfa__3_1356803021.76411"
    push $P5003, "0"
    push $P5003, "alt_nfa__4_1356803021.87678"
    push $P5003, ">"
    push $P5003, "alt_nfa__5_1356803021.90024"
    push $P5003, "|"
    push $P5003, "&"
    push $P5003, "noun"
    push $P5003, "&|~"
    push $P5003, "alt_nfa__6_1356803021.96272"
    push $P5003, "alt_nfa__7_1356803021.98947"
    push $P5003, "septype"
    push $P5003, "alt_nfa__8_1356803022.01056"
    push $P5003, "sym"
    push $P5003, "1"
    push $P5003, "2"
    push $P5003, "min"
    push $P5003, "max"
    push $P5003, "alt_nfa__9_1356803022.08499"
    push $P5003, "alt_nfa__10_1356803022.20777"
    push $P5003, "alt_nfa__11_1356803022.2157"
    push $P5003, "GOAL"
    push $P5003, "key"
    push $P5003, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, "name"
    push $P5003, "alt_nfa__12_1356803022.32353"
    push $P5003, "dDnNsSwW"
    push $P5003, "bB"
    push $P5003, "eE"
    push $P5003, "fF"
    push $P5003, "hH"
    push $P5003, "rR"
    push $P5003, "tT"
    push $P5003, "vV"
    push $P5003, "oO"
    push $P5003, "alt_nfa__13_1356803022.38806"
    push $P5003, "xX"
    push $P5003, "alt_nfa__14_1356803022.40005"
    push $P5003, "cC"
    push $P5003, "alt_nfa__15_1356803022.50272"
    push $P5003, "alt_nfa__16_1356803022.51388"
    push $P5003, "longname"
    push $P5003, "alt_nfa__17_1356803022.54646"
    push $P5003, "alt_nfa__18_1356803022.5546"
    push $P5003, "sign"
    push $P5003, "invert"
    push $P5003, "uniprop"
    push $P5003, "alt_nfa__19_1356803022.61783"
    push $P5003, "alt_nfa__20_1356803022.61833"
    push $P5003, "alt_nfa__21_1356803022.61857"
    push $P5003, "n"
    push $P5003, "alt_nfa__23_1356803022.64835"
    push $P5003, "alt_nfa__24_1356803022.64869"
    push $P5003, "alt_nfa__22_1356803022.62606"
    push $P5003, "__6MODEL_CORE__"
    push $P5003, "GLOBALish"
    push $P5003, "EXPORT"
    push $P5003, "B27170BB1F9774DD835DEDBDD20EF3A48AB4CAFF-1356802988.14084"
    push $P5003, "src/stage2/gen/nqp-mo.pm"
    push $P5003, "QRegex::P6Regex::World"
    push $P5003, "QRegex::P6Regex::Grammar"
    push $P5003, "alt_nfa__1_1356803001.91009"
    push $P5003, "alt_nfa__2_1356803001.9453"
    push $P5003, "alt_nfa__3_1356803002.06166"
    push $P5003, "alt_nfa__4_1356803002.06205"
    push $P5003, "alt_nfa__5_1356803002.09611"
    push $P5003, "alt_nfa__6_1356803002.17598"
    push $P5003, "alt_nfa__7_1356803002.18903"
    push $P5003, "alt_nfa__8_1356803002.22746"
    push $P5003, "alt_nfa__9_1356803002.26755"
    push $P5003, "shared"
    push $P5003, "match"
    push $P5003, "bstack"
    push $P5003, "cstack"
    push $P5003, "regexsub"
    push $P5003, "restart"
    push $P5003, "QRegex::P6Regex::Actions"
    push $P5003, "QRegex::P6Regex::Compiler"
    push $P5003, "CompileTimeValue"
    push $P5003, "3B5823CF115D2D332A76E16C0814B4A030A2FFA1-1356802994.51822"
    push $P5003, "src/stage2/QASTNode.nqp"
    push $P5003, "SpecialArg"
    push $P5003, "Node"
    push $P5003, "Regex"
    push $P5003, "IVal"
    push $P5003, "NVal"
    push $P5003, "SVal"
    push $P5003, "BVal"
    push $P5003, "WVal"
    push $P5003, "Want"
    push $P5003, "Var"
    push $P5003, "VarWithFallback"
    push $P5003, "Op"
    push $P5003, "VM"
    push $P5003, "Stmts"
    push $P5003, "Stmt"
    push $P5003, "Block"
    push $P5003, "Unquote"
    push $P5003, "CompUnit"
    push $P5003, "InlinePlaceholder"
    push $P5003, "Operations"
    push $P5003, "6D5363FE382C81D39B87FF3F759F46DDC14C118A-1356803007.62094"
    push $P5003, "src/stage2/QAST.nqp"
    push $P5003, "Compiler"
    push $P5003, "NFA"
    push $P5003, "P6Regex"
    push $P5003, "Grammar"
    push $P5003, "Actions"
    push $P5003, "CommandLine"
    push $P5003, "World"
    push $P5003, "CallResult"
    push $P5003, "Sub"
    push $P5003, "Ops"
    push $P5003, "Label"
    push $P5003, "01234567"
    push $P5003, "0123456789abcdefABCDEF"
    push $P5003, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5003, "01"
    push $P5003, "Ee"
    .const 'Sub' $P5004 = 'cuid_230_1356803021.47401' 
    capture_lex $P5004
    $P5005 = $P5004()
    nqp_deserialize_sc "", cur_sc, $P5003, $P5005, conflicts
    unless conflicts goto if624_end2330 
    die "Repossession conflicts occurred during deserialization"
  if624_end2330:
    .const "LexInfo" $P5001 = "cuid_1_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1356803021.47401"
    nqp_get_sc_object $P5002, "5AC43FAF892FF5DAA29F5960E2BD4FECAD5285F9-1356802996.80852", 32
    $P5001."set_static_lexpad_value"("NQPCursorRole", $P5002)
    .const "LexInfo" $P5003 = "cuid_1_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 4
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_3_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_3_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_3_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_3_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_4_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 115
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_114_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 5
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_114_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_114_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 5
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_114_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_115_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1356803021.47401" 
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 179
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_178_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 116
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_178_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_178_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 116
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_178_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_179_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 180
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1356803021.47401"
    $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_179_1356803021.47401"
    nqp_get_sc_object $P5002, "91DD60B786BA01FB2DCD197F8E2C52B82EAFBA4E-1356803021.58163", 180
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_179_1356803021.47401"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1356803021.47401") :anon :lex :outer("cuid_231_1356803021.47401")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_2_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1356803021.47401" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1356803021.47401" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1356803021.47401") :load
.annotate 'file', "src/stage2/gen/NQPP6QRegex.pm"
    .const 'Sub' $P5001 = "cuid_1_1356803021.47401" 
    $P5002 = $P5001()
    .return ($P5002) 
.end