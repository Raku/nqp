.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.include 'nqp_const.pir'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_205_1382484119.90237") :anon :lex
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5020 = 'cuid_206_1382484119.90237' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_207_1382484119.90237' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_209_1382484119.90237' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_236_1382484119.90237' 
    capture_lex $P5020 
    .const 'Sub' $P5020 = 'cuid_280_1382484119.90237' 
    capture_lex $P5020 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "ParseShared", $P104 
    .lex "NQPCursorRole", $P105 
    .lex "$p6regex", $P106 
    .lex "&MAIN", $P107 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P106, $P5001
    .const 'Sub' $P5002 = 'cuid_206_1382484119.90237' 
    capture_lex $P5002
    set $P107, $P5002
    find_dynamic_lex $P5003, "$*CTXSAVE"
    set ctxsave, $P5003
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if11_end13 
    $P5004 = ctxsave."ctxsave"()
    set $P5005, $P5004
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5007 = 'cuid_207_1382484119.90237' 
    capture_lex $P5007
    $P5008 = $P5007()
    .const 'Sub' $P5009 = 'cuid_209_1382484119.90237' 
    capture_lex $P5009
    $P5010 = $P5009()
    .const 'Sub' $P5011 = 'cuid_236_1382484119.90237' 
    capture_lex $P5011
    $P5012 = $P5011()
    .const 'Sub' $P5013 = 'cuid_280_1382484119.90237' 
    capture_lex $P5013
    $P5014 = $P5013()
.annotate 'line', 1230
    nqp_get_sc_object $P5015, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 210
    $P5016 = $P5015."new"()
    set $P106, $P5016
.annotate 'line', 1231
    $P106."language"("QRegex::P6Regex")
.annotate 'line', 1232
    nqp_get_sc_object $P5017, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 5
    $P106."parsegrammar"($P5017)
.annotate 'line', 1233
    nqp_get_sc_object $P5018, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 133
    $P106."parseactions"($P5018)
    unless _lex_param_0 goto if1256_end3076 
    $P5019 = "&MAIN"(_lex_param_0 :flat)
  if1256_end3076:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_206_1382484119.90237") :anon :lex :outer("cuid_205_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1235
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 1236
    find_lex $P5001, "$p6regex"
    $P5002 = $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ucs4" :named("transcode"))
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_207_1382484119.90237") :anon :lex :outer("cuid_205_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 9
    .const 'Sub' $P5002 = 'cuid_1_1382484119.90237' 
    capture_lex $P5002 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_1_1382484119.90237' 
    capture_lex $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_1_1382484119.90237") :anon :lex :outer("cuid_207_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 10
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5034 = 'cuid_208_1382484119.90237' 
    capture_lex $P5034 
    .lex "$dummy", $P101 
    .lex "$code_obj", $P102 
    .lex "$slot", $P103 
    .lex "$fixups", $P104 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P104, $P5004
    .const 'Sub' $P5007 = 'cuid_208_1382484119.90237' 
    capture_lex $P5007
    newclosure $P5006, $P5007
    nqp_fresh_stub $P5005, $P5006
    set $P101, $P5005
    set $S5001, _lex_param_2
    assign $P101, $S5001
    setprop $P101, 'STATIC_CODE_REF', $P101
.annotate 'line', 17
    nqp_decontainerize $P5008, _lex_param_0
    $P5008."add_root_code_ref"($P101, _lex_param_1)
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 9
    repr_instance_of $P5009, $P5010
    set $P102, $P5009
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 9
    setattribute $P102, $P5011, "$!do", $P101
.annotate 'line', 22
    nqp_decontainerize $P5012, _lex_param_0
    $P5013 = $P5012."add_object"($P102)
    set $P103, $P5013
.annotate 'line', 25
    nqp_get_sc_object $P5014, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 103
    $P5015 = $P5014."new"()
    set $P104, $P5015
.annotate 'line', 26
    nqp_get_sc_object $P5016, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 86
.annotate 'line', 28
    nqp_get_sc_object $P5017, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 64
    $P5018 = $P5017."new"($P102 :named("value"))
.annotate 'line', 29
    nqp_get_sc_object $P5019, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 64
    nqp_get_sc_object $P5020, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 9
    $P5021 = $P5019."new"($P5020 :named("value"))
.annotate 'line', 30
    nqp_get_sc_object $P5022, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5023 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 31
    nqp_get_sc_object $P5024, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 60
    $P5025 = $P5024."new"(_lex_param_1 :named("value"))
    $P5026 = $P5016."new"($P5018, $P5021, $P5023, $P5025, "bindattr" :named("op"))
    $P104."push"($P5026)
.annotate 'line', 33
    nqp_get_sc_object $P5027, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 86
.annotate 'line', 35
    nqp_get_sc_object $P5028, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 60
    $P5029 = $P5028."new"(_lex_param_1 :named("value"))
.annotate 'line', 36
    nqp_get_sc_object $P5030, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 64
    $P5031 = $P5030."new"($P102 :named("value"))
    $P5032 = $P5027."new"($P5029, $P5031, "setcodeobj" :named("op"))
    $P104."push"($P5032)
.annotate 'line', 38
    nqp_decontainerize $P5033, _lex_param_0
    $P5033."add_fixup_task"($P104 :named("fixup_past"))
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_208_1382484119.90237") :anon :lex :outer("cuid_1_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 12

    box $P5001, "Uncompiled code executed"
    die $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_209_1382484119.90237") :anon :lex :outer("cuid_205_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 44
    .const 'Sub' $P5106 = 'cuid_2_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_3_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_4_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_5_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_6_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_7_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_8_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_9_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_10_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_11_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_13_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_16_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_17_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_21_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_22_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_23_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_24_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_25_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_26_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_27_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_28_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_29_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_31_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_32_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_33_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_34_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_35_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_36_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_37_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_38_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_42_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_43_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_45_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_46_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_47_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_48_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_49_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_50_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_51_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_52_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_53_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_54_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_55_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_56_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_57_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_58_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_59_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_60_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_61_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_62_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_63_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_64_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_65_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_66_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_67_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_68_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_69_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_70_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_71_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_72_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_73_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_74_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_75_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_76_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_77_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_78_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_79_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_80_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_81_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_82_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_83_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_84_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_85_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_87_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_88_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_89_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_90_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_91_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_92_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_93_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_94_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_95_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_96_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_97_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_98_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_99_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_100_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_101_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_102_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_103_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_105_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_107_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_108_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_109_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_111_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_113_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_120_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_122_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_123_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_124_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_125_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_126_1382484119.90237' 
    capture_lex $P5106 
    .const 'Sub' $P5106 = 'cuid_127_1382484119.90237' 
    capture_lex $P5106 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .lex "$cur_handle", $P103 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P103, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1382484119.90237' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1382484119.90237' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1382484119.90237' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1382484119.90237' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1382484119.90237' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_7_1382484119.90237' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_8_1382484119.90237' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_9_1382484119.90237' 
    capture_lex $P5009
    box $P5010, 0
    set $P103, $P5010
    .const 'Sub' $P5011 = 'cuid_10_1382484119.90237' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1382484119.90237' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_13_1382484119.90237' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1382484119.90237' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1382484119.90237' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_21_1382484119.90237' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_22_1382484119.90237' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_23_1382484119.90237' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_24_1382484119.90237' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_25_1382484119.90237' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_26_1382484119.90237' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_27_1382484119.90237' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_28_1382484119.90237' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_29_1382484119.90237' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_31_1382484119.90237' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_32_1382484119.90237' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_33_1382484119.90237' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_34_1382484119.90237' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_35_1382484119.90237' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_36_1382484119.90237' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_37_1382484119.90237' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_38_1382484119.90237' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_42_1382484119.90237' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_43_1382484119.90237' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_45_1382484119.90237' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_46_1382484119.90237' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_47_1382484119.90237' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_48_1382484119.90237' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_49_1382484119.90237' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_50_1382484119.90237' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_51_1382484119.90237' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_52_1382484119.90237' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_53_1382484119.90237' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_54_1382484119.90237' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_55_1382484119.90237' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_56_1382484119.90237' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_57_1382484119.90237' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_58_1382484119.90237' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_59_1382484119.90237' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_60_1382484119.90237' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_61_1382484119.90237' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_62_1382484119.90237' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_63_1382484119.90237' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_64_1382484119.90237' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_65_1382484119.90237' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_66_1382484119.90237' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_67_1382484119.90237' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_68_1382484119.90237' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_69_1382484119.90237' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_70_1382484119.90237' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_71_1382484119.90237' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_72_1382484119.90237' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_73_1382484119.90237' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_74_1382484119.90237' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_75_1382484119.90237' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_76_1382484119.90237' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_77_1382484119.90237' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_78_1382484119.90237' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_79_1382484119.90237' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_80_1382484119.90237' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_81_1382484119.90237' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_82_1382484119.90237' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_83_1382484119.90237' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_84_1382484119.90237' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_85_1382484119.90237' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_87_1382484119.90237' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_88_1382484119.90237' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_89_1382484119.90237' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_90_1382484119.90237' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_91_1382484119.90237' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_92_1382484119.90237' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_93_1382484119.90237' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_94_1382484119.90237' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_95_1382484119.90237' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_96_1382484119.90237' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_97_1382484119.90237' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_98_1382484119.90237' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_99_1382484119.90237' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_100_1382484119.90237' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_101_1382484119.90237' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_102_1382484119.90237' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_103_1382484119.90237' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_105_1382484119.90237' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_107_1382484119.90237' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_108_1382484119.90237' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_109_1382484119.90237' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_111_1382484119.90237' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_113_1382484119.90237' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_120_1382484119.90237' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_122_1382484119.90237' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_123_1382484119.90237' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_124_1382484119.90237' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_125_1382484119.90237' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_126_1382484119.90237' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_127_1382484119.90237' 
    capture_lex $P5105
    .return ($P5105) 
.end
.HLL "nqp"
.namespace []
.sub "obs" :subid("cuid_2_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 :optional 
    .param int haz_param_1 :opt_flag 
    .lex "self", _lex_param_0 
    .lex "$old", _lex_param_1 
    .lex "$new", _lex_param_2 
    .lex "$when", _lex_param_3 
    if haz_param_1, default14
    box $P5003, " in Perl 6"
    set _lex_param_3, $P5003
  default14:
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    set $S5006, _lex_param_1
    concat $S5005, "Unsupported use of ", $S5006
    concat $S5004, $S5005, ";"
    set $S5007, _lex_param_3
    concat $S5003, $S5004, $S5007
    concat $S5002, $S5003, " please use "
    set $S5008, _lex_param_2
    concat $S5001, $S5002, $S5008
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_unrecognized_metachar" :subid("cuid_3_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 54
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$char", _lex_param_1 
.annotate 'line', 55
    nqp_decontainerize $P5001, _lex_param_0
    set $S5003, _lex_param_1
    concat $S5002, "Unrecognized regex metacharacter ", $S5003
    concat $S5001, $S5002, " (must be quoted to match literally)"
    $P5002 = $P5001."panic"($S5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "throw_null_pattern" :subid("cuid_4_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 58
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 59
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."panic"("Null regex not allowed")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_5_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx12_start
    .local string rx12_tgt
    .local int rx12_pos
    .local int rx12_off
    .local int rx12_eos
    .local int rx12_rep
    .local pmc rx12_cur
    .local pmc rx12_curclass
    .local pmc rx12_bstack
    .local pmc rx12_cstack
    rx12_start = self."!cursor_start_all"()
    set rx12_cur, rx12_start[0]
    set rx12_tgt, rx12_start[1]
    set rx12_pos, rx12_start[2]
    set rx12_curclass, rx12_start[3]
    set rx12_bstack, rx12_start[4]
    set $I19, rx12_start[5]
    store_lex unicode:"$\x{a2}", rx12_cur
    length rx12_eos, rx12_tgt
    eq $I19, 1, rx12_restart17
    gt rx12_pos, rx12_eos, rx12_fail18
    repr_get_attr_int $I11, self, rx12_curclass, "$!from"
    ne $I11, -1, rxscan13_done24
    goto rxscan13_scan23
  rxscan13_loop22:
    inc rx12_pos
    gt rx12_pos, rx12_eos, rx12_fail18
    repr_bind_attr_int rx12_cur, rx12_curclass, "$!from", rx12_pos
  rxscan13_scan23:
    nqp_rxmark rx12_bstack, rxscan13_loop22, rx12_pos, 0
  rxscan13_done24:
    nqp_rxmark rx12_bstack, rxquantr14_done26, rx12_pos, 0
  rxquantr14_loop25:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt15_028
    nqp_push_label $P11, alt15_131
    nqp_rxmark rx12_bstack, alt15_end27, -1, 0
    rx12_cur."!alt"(rx12_pos, "alt_nfa__1_1382484120.1679", $P11)
    goto rx12_fail18
  alt15_028:
    nqp_rxmark rx12_bstack, rxquantr16_done30, -1, 0
  rxquantr16_loop29:
    ge rx12_pos, rx12_eos, rx12_fail18
    is_cclass $I11, .CCLASS_WHITESPACE, rx12_tgt, rx12_pos
    unless $I11, rx12_fail18
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr16_done30
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr16_done30
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr16_done30, rx12_pos, rx12_rep
    goto rxquantr16_loop29
  rxquantr16_done30:
    goto alt15_end27
  alt15_131:
    add $I11, rx12_pos, 1
    gt $I11, rx12_eos, rx12_fail18
    substr $S10, rx12_tgt, rx12_pos, 1
    ne $S10, ucs4:"#", rx12_fail18
    add rx12_pos, 1
    nqp_rxmark rx12_bstack, rxquantr17_done33, rx12_pos, 0
  rxquantr17_loop32:
    ge rx12_pos, rx12_eos, rx12_fail18
    is_cclass $I11, .CCLASS_NEWLINE, rx12_tgt, rx12_pos
    if $I11, rx12_fail18
    substr $S10, rx12_tgt, rx12_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx12_pos, $I11
    add rx12_pos, 1
    nqp_rxpeek $I19, rx12_bstack, rxquantr17_done33
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr17_done33
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr17_done33, rx12_pos, rx12_rep
    goto rxquantr17_loop32
  rxquantr17_done33:
    goto alt15_end27
  alt15_end27:
    nqp_rxpeek $I19, rx12_bstack, rxquantr14_done26
    inc $I19
    inc $I19
    set rx12_rep, rx12_bstack[$I19]
    nqp_rxcommit rx12_bstack, rxquantr14_done26
    inc rx12_rep
    nqp_rxmark rx12_bstack, rxquantr14_done26, rx12_pos, rx12_rep
    goto rxquantr14_loop25
  rxquantr14_done26:
    rx12_cur."!cursor_pass"(rx12_pos, "ws", 'backtrack'=>1)
    .return (rx12_cur)
  rx12_restart17:
    repr_get_attr_obj rx12_cstack, rx12_cur, rx12_curclass, "$!cstack"
  rx12_fail18:
    unless rx12_bstack, rx12_done16
    pop $I19, rx12_bstack
    if_null rx12_cstack, rx12_cstack_done21
    unless rx12_cstack, rx12_cstack_done21
    dec $I19
    set $P11, rx12_cstack[$I19]
  rx12_cstack_done21:
    pop rx12_rep, rx12_bstack
    pop rx12_pos, rx12_bstack
    pop $I19, rx12_bstack
    lt rx12_pos, -1, rx12_done16
    lt rx12_pos, 0, rx12_fail18
    eq $I19, 0, rx12_fail18
    nqp_islist $I20, rx12_cstack
    unless $I20, rx12_jump19
    elements $I18, rx12_bstack
    le $I18, 0, rx12_cut20
    dec $I18
    set $I18, rx12_bstack[$I18]
  rx12_cut20:
    assign rx12_cstack, $I18
  rx12_jump19:
    jump $I19
  rx12_done16:
    rx12_cur."!cursor_fail"()
    .return (rx12_cur) 
.end
.HLL "nqp"
.namespace []
.sub "normspace" :subid("cuid_6_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 64
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx18_start
    .local string rx18_tgt
    .local int rx18_pos
    .local int rx18_off
    .local int rx18_eos
    .local int rx18_rep
    .local pmc rx18_cur
    .local pmc rx18_curclass
    .local pmc rx18_bstack
    .local pmc rx18_cstack
    rx18_start = self."!cursor_start_all"()
    set rx18_cur, rx18_start[0]
    set rx18_tgt, rx18_start[1]
    set rx18_pos, rx18_start[2]
    set rx18_curclass, rx18_start[3]
    set rx18_bstack, rx18_start[4]
    set $I19, rx18_start[5]
    store_lex unicode:"$\x{a2}", rx18_cur
    length rx18_eos, rx18_tgt
    eq $I19, 1, rx18_restart36
    gt rx18_pos, rx18_eos, rx18_fail37
    repr_get_attr_int $I11, self, rx18_curclass, "$!from"
    ne $I11, -1, rxscan19_done43
    goto rxscan19_scan42
  rxscan19_loop41:
    inc rx18_pos
    gt rx18_pos, rx18_eos, rx18_fail37
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!from", rx18_pos
  rxscan19_scan42:
    nqp_rxmark rx18_bstack, rxscan19_loop41, rx18_pos, 0
  rxscan19_done43:
  alt20_045:
    nqp_rxmark rx18_bstack, alt20_146, rx18_pos, 0
    ge rx18_pos, rx18_eos, rx18_fail37
    is_cclass $I11, .CCLASS_WHITESPACE, rx18_tgt, rx18_pos
    unless $I11, rx18_fail37
    add rx18_pos, 1
    goto alt20_end44
  alt20_146:
    ge rx18_pos, rx18_eos, rx18_fail37
    substr $S11, rx18_tgt, rx18_pos, 1
    index $I11, ucs4:"#", $S11
    lt $I11, 0, rx18_fail37
    inc rx18_pos
  alt20_end44:
    repr_bind_attr_int rx18_cur, rx18_curclass, "$!pos", rx18_pos
    $P11 = rx18_cur."ws"()
    repr_get_attr_int $I11, $P11, rx18_curclass, "$!pos"
    lt $I11, 0, rx18_fail37
    repr_get_attr_int rx18_pos, $P11, rx18_curclass, "$!pos"
    rx18_cur."!cursor_pass"(rx18_pos, "normspace", 'backtrack'=>1)
    .return (rx18_cur)
  rx18_restart36:
    repr_get_attr_obj rx18_cstack, rx18_cur, rx18_curclass, "$!cstack"
  rx18_fail37:
    unless rx18_bstack, rx18_done35
    pop $I19, rx18_bstack
    if_null rx18_cstack, rx18_cstack_done40
    unless rx18_cstack, rx18_cstack_done40
    dec $I19
    set $P11, rx18_cstack[$I19]
  rx18_cstack_done40:
    pop rx18_rep, rx18_bstack
    pop rx18_pos, rx18_bstack
    pop $I19, rx18_bstack
    lt rx18_pos, -1, rx18_done35
    lt rx18_pos, 0, rx18_fail37
    eq $I19, 0, rx18_fail37
    nqp_islist $I20, rx18_cstack
    unless $I20, rx18_jump38
    elements $I18, rx18_bstack
    le $I18, 0, rx18_cut39
    dec $I18
    set $I18, rx18_bstack[$I18]
  rx18_cut39:
    assign rx18_cstack, $I18
  rx18_jump38:
    jump $I19
  rx18_done35:
    rx18_cur."!cursor_fail"()
    .return (rx18_cur) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_7_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 66
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx22_start
    .local string rx22_tgt
    .local int rx22_pos
    .local int rx22_off
    .local int rx22_eos
    .local int rx22_rep
    .local pmc rx22_cur
    .local pmc rx22_curclass
    .local pmc rx22_bstack
    .local pmc rx22_cstack
    rx22_start = self."!cursor_start_all"()
    set rx22_cur, rx22_start[0]
    set rx22_tgt, rx22_start[1]
    set rx22_pos, rx22_start[2]
    set rx22_curclass, rx22_start[3]
    set rx22_bstack, rx22_start[4]
    set $I19, rx22_start[5]
    store_lex unicode:"$\x{a2}", rx22_cur
    length rx22_eos, rx22_tgt
    eq $I19, 1, rx22_restart50
    gt rx22_pos, rx22_eos, rx22_fail51
    repr_get_attr_int $I11, self, rx22_curclass, "$!from"
    ne $I11, -1, rxscan23_done57
    goto rxscan23_scan56
  rxscan23_loop55:
    inc rx22_pos
    gt rx22_pos, rx22_eos, rx22_fail51
    repr_bind_attr_int rx22_cur, rx22_curclass, "$!from", rx22_pos
  rxscan23_scan56:
    nqp_rxmark rx22_bstack, rxscan23_loop55, rx22_pos, 0
  rxscan23_done57:
    repr_bind_attr_int rx22_cur, rx22_curclass, "$!pos", rx22_pos
    $P11 = rx22_cur."ident"()
    repr_get_attr_int $I11, $P11, rx22_curclass, "$!pos"
    lt $I11, 0, rx22_fail51
    repr_get_attr_int rx22_pos, $P11, rx22_curclass, "$!pos"
    nqp_rxmark rx22_bstack, rxquantr25_done60, rx22_pos, 0
  rxquantr25_loop59:
    ge rx22_pos, rx22_eos, rx22_fail51
    substr $S11, rx22_tgt, rx22_pos, 1
    index $I11, ucs4:"-'", $S11
    lt $I11, 0, rx22_fail51
    inc rx22_pos
    repr_bind_attr_int rx22_cur, rx22_curclass, "$!pos", rx22_pos
    $P11 = rx22_cur."ident"()
    repr_get_attr_int $I11, $P11, rx22_curclass, "$!pos"
    lt $I11, 0, rx22_fail51
    repr_get_attr_int rx22_pos, $P11, rx22_curclass, "$!pos"
    nqp_rxpeek $I19, rx22_bstack, rxquantr25_done60
    inc $I19
    inc $I19
    set rx22_rep, rx22_bstack[$I19]
    nqp_rxcommit rx22_bstack, rxquantr25_done60
    inc rx22_rep
    nqp_rxmark rx22_bstack, rxquantr25_done60, rx22_pos, rx22_rep
    goto rxquantr25_loop59
  rxquantr25_done60:
    rx22_cur."!cursor_pass"(rx22_pos, "identifier", 'backtrack'=>1)
    .return (rx22_cur)
  rx22_restart50:
    repr_get_attr_obj rx22_cstack, rx22_cur, rx22_curclass, "$!cstack"
  rx22_fail51:
    unless rx22_bstack, rx22_done49
    pop $I19, rx22_bstack
    if_null rx22_cstack, rx22_cstack_done54
    unless rx22_cstack, rx22_cstack_done54
    dec $I19
    set $P11, rx22_cstack[$I19]
  rx22_cstack_done54:
    pop rx22_rep, rx22_bstack
    pop rx22_pos, rx22_bstack
    pop $I19, rx22_bstack
    lt rx22_pos, -1, rx22_done49
    lt rx22_pos, 0, rx22_fail51
    eq $I19, 0, rx22_fail51
    nqp_islist $I20, rx22_cstack
    unless $I20, rx22_jump52
    elements $I18, rx22_bstack
    le $I18, 0, rx22_cut53
    dec $I18
    set $I18, rx22_bstack[$I18]
  rx22_cut53:
    assign rx22_cstack, $I18
  rx22_jump52:
    jump $I19
  rx22_done49:
    rx22_cur."!cursor_fail"()
    .return (rx22_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_8_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 68
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx27_start
    .local string rx27_tgt
    .local int rx27_pos
    .local int rx27_off
    .local int rx27_eos
    .local int rx27_rep
    .local pmc rx27_cur
    .local pmc rx27_curclass
    .local pmc rx27_bstack
    .local pmc rx27_cstack
    rx27_start = self."!cursor_start_all"()
    set rx27_cur, rx27_start[0]
    set rx27_tgt, rx27_start[1]
    set rx27_pos, rx27_start[2]
    set rx27_curclass, rx27_start[3]
    set rx27_bstack, rx27_start[4]
    set $I19, rx27_start[5]
    store_lex unicode:"$\x{a2}", rx27_cur
    length rx27_eos, rx27_tgt
    eq $I19, 1, rx27_restart64
    gt rx27_pos, rx27_eos, rx27_fail65
    repr_get_attr_int $I11, self, rx27_curclass, "$!from"
    ne $I11, -1, rxscan28_done71
    goto rxscan28_scan70
  rxscan28_loop69:
    inc rx27_pos
    gt rx27_pos, rx27_eos, rx27_fail65
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!from", rx27_pos
  rxscan28_scan70:
    nqp_rxmark rx27_bstack, rxscan28_loop69, rx27_pos, 0
  rxscan28_done71:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt29_073
    nqp_push_label $P11, alt29_175
    nqp_push_label $P11, alt29_277
    nqp_rxmark rx27_bstack, alt29_end72, -1, 0
    rx27_cur."!alt"(rx27_pos, "alt_nfa__2_1382484120.20199", $P11)
    goto rx27_fail65
  alt29_073:
    ge rx27_pos, rx27_eos, rx27_fail65
    substr $S11, rx27_tgt, rx27_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx27_fail65
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail65
    nqp_rxmark rx27_bstack, rxsubrule30_pass74, -1, 0
  rxsubrule30_pass74:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
    goto alt29_end72
  alt29_175:
    ge rx27_pos, rx27_eos, rx27_fail65
    substr $S11, rx27_tgt, rx27_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx27_fail65
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx27_curclass, "$!pos"
    lt $I11, 0, rx27_fail65
    nqp_rxmark rx27_bstack, rxsubrule31_pass76, -1, 0
  rxsubrule31_pass76:
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx27_pos, $P11, rx27_curclass, "$!pos"
    goto alt29_end72
  alt29_277:
    nqp_rxmark rx27_bstack, rxcap32_fail79, rx27_pos, 0
    nqp_rxmark rx27_bstack, rxquantr33_done81, -1, 0
  rxquantr33_loop80:
    ge rx27_pos, rx27_eos, rx27_fail65
    is_cclass $I11, .CCLASS_NUMERIC, rx27_tgt, rx27_pos
    unless $I11, rx27_fail65
    add rx27_pos, 1
    nqp_rxpeek $I19, rx27_bstack, rxquantr33_done81
    inc $I19
    inc $I19
    set rx27_rep, rx27_bstack[$I19]
    nqp_rxcommit rx27_bstack, rxquantr33_done81
    inc rx27_rep
    nqp_rxmark rx27_bstack, rxquantr33_done81, rx27_pos, rx27_rep
    goto rxquantr33_loop80
  rxquantr33_done81:
    nqp_rxpeek $I19, rx27_bstack, rxcap32_fail79
    inc $I19
    set $I11, rx27_bstack[$I19]
    repr_bind_attr_int rx27_cur, rx27_curclass, "$!pos", rx27_pos
    $P11 = rx27_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx27_pos)
    rx27_cstack = rx27_cur."!cursor_capture"($P11, "val")
    goto rxcap32_done78
  rxcap32_fail79:
    goto rx27_fail65
  rxcap32_done78:
    goto alt29_end72
  alt29_end72:
    nqp_rxcommit rx27_bstack, alt29_end72
    rx27_cur."!cursor_pass"(rx27_pos, "arg", 'backtrack'=>1)
    .return (rx27_cur)
  rx27_restart64:
    repr_get_attr_obj rx27_cstack, rx27_cur, rx27_curclass, "$!cstack"
  rx27_fail65:
    unless rx27_bstack, rx27_done63
    pop $I19, rx27_bstack
    if_null rx27_cstack, rx27_cstack_done68
    unless rx27_cstack, rx27_cstack_done68
    dec $I19
    set $P11, rx27_cstack[$I19]
  rx27_cstack_done68:
    pop rx27_rep, rx27_bstack
    pop rx27_pos, rx27_bstack
    pop $I19, rx27_bstack
    lt rx27_pos, -1, rx27_done63
    lt rx27_pos, 0, rx27_fail65
    eq $I19, 0, rx27_fail65
    nqp_islist $I20, rx27_cstack
    unless $I20, rx27_jump66
    elements $I18, rx27_bstack
    le $I18, 0, rx27_cut67
    dec $I18
    set $I18, rx27_bstack[$I18]
  rx27_cut67:
    assign rx27_cstack, $I18
  rx27_jump66:
    jump $I19
  rx27_done63:
    rx27_cur."!cursor_fail"()
    .return (rx27_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_9_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 76
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx34_start
    .local string rx34_tgt
    .local int rx34_pos
    .local int rx34_off
    .local int rx34_eos
    .local int rx34_rep
    .local pmc rx34_cur
    .local pmc rx34_curclass
    .local pmc rx34_bstack
    .local pmc rx34_cstack
    rx34_start = self."!cursor_start_all"()
    set rx34_cur, rx34_start[0]
    set rx34_tgt, rx34_start[1]
    set rx34_pos, rx34_start[2]
    set rx34_curclass, rx34_start[3]
    set rx34_bstack, rx34_start[4]
    set $I19, rx34_start[5]
    store_lex unicode:"$\x{a2}", rx34_cur
    length rx34_eos, rx34_tgt
    eq $I19, 1, rx34_restart84
    gt rx34_pos, rx34_eos, rx34_fail85
    repr_get_attr_int $I11, self, rx34_curclass, "$!from"
    ne $I11, -1, rxscan35_done91
    goto rxscan35_scan90
  rxscan35_loop89:
    inc rx34_pos
    gt rx34_pos, rx34_eos, rx34_fail85
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!from", rx34_pos
  rxscan35_scan90:
    nqp_rxmark rx34_bstack, rxscan35_loop89, rx34_pos, 0
  rxscan35_done91:
    add $I11, rx34_pos, 0
    gt $I11, rx34_eos, rx34_fail85
    substr $S10, rx34_tgt, rx34_pos, 0
    ne $S10, ucs4:"", rx34_fail85
    add rx34_pos, 0
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."ws"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    goto rxsubrule36_pass92
  rxsubrule36_back93:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
  rxsubrule36_pass92:
    rx34_cstack = rx34_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule36_back93
    push rx34_bstack, $I11
    push rx34_bstack, 0
    push rx34_bstack, rx34_pos
    elements $I11, rx34_cstack
    push rx34_bstack, $I11
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    nqp_rxmark rx34_bstack, rxquantr37_done95, -1, 0
  rxquantr37_loop94:
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."arg"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    goto rxsubrule38_pass96
  rxsubrule38_back97:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
  rxsubrule38_pass96:
    rx34_cstack = rx34_cur."!cursor_capture"($P11, "arg")
    set_addr $I11, rxsubrule38_back97
    push rx34_bstack, $I11
    push rx34_bstack, 0
    push rx34_bstack, rx34_pos
    elements $I11, rx34_cstack
    push rx34_bstack, $I11
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."ws"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    goto rxsubrule39_pass98
  rxsubrule39_back99:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
  rxsubrule39_pass98:
    rx34_cstack = rx34_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule39_back99
    push rx34_bstack, $I11
    push rx34_bstack, 0
    push rx34_bstack, rx34_pos
    elements $I11, rx34_cstack
    push rx34_bstack, $I11
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    nqp_rxpeek $I19, rx34_bstack, rxquantr37_done95
    inc $I19
    inc $I19
    set rx34_rep, rx34_bstack[$I19]
    nqp_rxcommit rx34_bstack, rxquantr37_done95
    inc rx34_rep
    nqp_rxmark rx34_bstack, rxquantr37_done95, rx34_pos, rx34_rep
    add $I11, rx34_pos, 1
    gt $I11, rx34_eos, rx34_fail85
    substr $S10, rx34_tgt, rx34_pos, 1
    ne $S10, ucs4:",", rx34_fail85
    add rx34_pos, 1
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."ws"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    goto rxsubrule40_pass100
  rxsubrule40_back101:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
  rxsubrule40_pass100:
    rx34_cstack = rx34_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule40_back101
    push rx34_bstack, $I11
    push rx34_bstack, 0
    push rx34_bstack, rx34_pos
    elements $I11, rx34_cstack
    push rx34_bstack, $I11
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    repr_bind_attr_int rx34_cur, rx34_curclass, "$!pos", rx34_pos
    $P11 = rx34_cur."ws"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
    goto rxsubrule41_pass102
  rxsubrule41_back103:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx34_curclass, "$!pos"
    lt $I11, 0, rx34_fail85
  rxsubrule41_pass102:
    rx34_cstack = rx34_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule41_back103
    push rx34_bstack, $I11
    push rx34_bstack, 0
    push rx34_bstack, rx34_pos
    elements $I11, rx34_cstack
    push rx34_bstack, $I11
    repr_get_attr_int rx34_pos, $P11, rx34_curclass, "$!pos"
    goto rxquantr37_loop94
  rxquantr37_done95:
    rx34_cur."!cursor_pass"(rx34_pos, "arglist", 'backtrack'=>1)
    .return (rx34_cur)
  rx34_restart84:
    repr_get_attr_obj rx34_cstack, rx34_cur, rx34_curclass, "$!cstack"
  rx34_fail85:
    unless rx34_bstack, rx34_done83
    pop $I19, rx34_bstack
    if_null rx34_cstack, rx34_cstack_done88
    unless rx34_cstack, rx34_cstack_done88
    dec $I19
    set $P11, rx34_cstack[$I19]
  rx34_cstack_done88:
    pop rx34_rep, rx34_bstack
    pop rx34_pos, rx34_bstack
    pop $I19, rx34_bstack
    lt rx34_pos, -1, rx34_done83
    lt rx34_pos, 0, rx34_fail85
    eq $I19, 0, rx34_fail85
    nqp_islist $I20, rx34_cstack
    unless $I20, rx34_jump86
    elements $I18, rx34_bstack
    le $I18, 0, rx34_cut87
    dec $I18
    set $I18, rx34_bstack[$I18]
  rx34_cut87:
    assign rx34_cstack, $I18
  rx34_jump86:
    jump $I19
  rx34_done83:
    rx34_cur."!cursor_fail"()
    .return (rx34_cur) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_10_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 79
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex "$handle", $P102 
    .lex "$*W", $P103 
    .lex utf8:"$\x{a2}", $P104 
    .lex "$/", $P105 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_1 
    .local pmc pkg_viv_tmp_1 
    .local pmc tmp_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P103, $P5003
    set self, _lex_param_0
    .local pmc rx42_start
    .local string rx42_tgt
    .local int rx42_pos
    .local int rx42_off
    .local int rx42_eos
    .local int rx42_rep
    .local pmc rx42_cur
    .local pmc rx42_curclass
    .local pmc rx42_bstack
    .local pmc rx42_cstack
    rx42_start = self."!cursor_start_all"()
    set rx42_cur, rx42_start[0]
    set rx42_tgt, rx42_start[1]
    set rx42_pos, rx42_start[2]
    set rx42_curclass, rx42_start[3]
    set rx42_bstack, rx42_start[4]
    set $I19, rx42_start[5]
    store_lex unicode:"$\x{a2}", rx42_cur
    length rx42_eos, rx42_tgt
    eq $I19, 1, rx42_restart106
    gt rx42_pos, rx42_eos, rx42_fail107
    repr_get_attr_int $I11, self, rx42_curclass, "$!from"
    ne $I11, -1, rxscan43_done113
    goto rxscan43_scan112
  rxscan43_loop111:
    inc rx42_pos
    gt rx42_pos, rx42_eos, rx42_fail107
    repr_bind_attr_int rx42_cur, rx42_curclass, "$!from", rx42_pos
  rxscan43_scan112:
    nqp_rxmark rx42_bstack, rxscan43_loop111, rx42_pos, 0
  rxscan43_done113:
    repr_bind_attr_int rx42_cur, rx42_curclass, "$!pos", rx42_pos
    store_lex unicode:"$\x{a2}", rx42_cur
    unless_null $P101, fallback114
    nqp_get_sc_object $P5005, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5004, $P5005
    set pkg_viv_tmp_1, $P5004
    set fb_tmp_1, pkg_viv_tmp_1
    repr_defined $I5001, fb_tmp_1
    unless $I5001 goto if44_else115 
    set $P5006, fb_tmp_1["%RX"]
    set $P5008, $P5006
    goto if44_end116
  if44_else115:
    null $P5007
    set $P5008, $P5007
  if44_end116:
    unless_null $P5008, vivi_45117
    new $P5009, 'Hash'
    set pkg_viv_tmp_1["%RX"], $P5009
    set $P5008, $P5009
  vivi_45117:
    unless_null $P5008, vivi_46118
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5008, $P5010
  vivi_46118:
    set $P101, $P5008
  fallback114:
    repr_bind_attr_int rx42_cur, rx42_curclass, "$!pos", rx42_pos
    store_lex unicode:"$\x{a2}", rx42_cur
    find_lex $P5011, "$cur_handle"
    set tmp_1, $P5011
    set $N5002, tmp_1
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5012, $N5001
    store_lex "$cur_handle", $P5012
    set $S5002, tmp_1
    concat $S5001, "__QREGEX_P6REGEX__", $S5002
    box $P5011, $S5001
    set $P102, $P5011
    repr_bind_attr_int rx42_cur, rx42_curclass, "$!pos", rx42_pos
    store_lex unicode:"$\x{a2}", rx42_cur
.annotate 'line', 82
    nqp_get_sc_object $P5012, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 3
    $P5013 = $P5012."new"($P102 :named("handle"))
    set $P103, $P5013
    repr_bind_attr_int rx42_cur, rx42_curclass, "$!pos", rx42_pos
    $P11 = rx42_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx42_curclass, "$!pos"
    lt $I11, 0, rx42_fail107
    nqp_rxmark rx42_bstack, rxsubrule47_pass119, -1, 0
  rxsubrule47_pass119:
    rx42_cstack = rx42_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx42_pos, $P11, rx42_curclass, "$!pos"
  alt48_0121:
    nqp_rxmark rx42_bstack, alt48_1123, rx42_pos, 0
    lt rx42_pos, rx42_eos, rx42_fail107
    goto alt48_end120
  alt48_1123:
    repr_bind_attr_int rx42_cur, rx42_curclass, "$!pos", rx42_pos
    $P11 = rx42_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx42_curclass, "$!pos"
    lt $I11, 0, rx42_fail107
    repr_get_attr_int rx42_pos, $P11, rx42_curclass, "$!pos"
  alt48_end120:
    rx42_cur."!cursor_pass"(rx42_pos, "TOP", 'backtrack'=>1)
    .return (rx42_cur)
  rx42_restart106:
    repr_get_attr_obj rx42_cstack, rx42_cur, rx42_curclass, "$!cstack"
  rx42_fail107:
    unless rx42_bstack, rx42_done105
    pop $I19, rx42_bstack
    if_null rx42_cstack, rx42_cstack_done110
    unless rx42_cstack, rx42_cstack_done110
    dec $I19
    set $P11, rx42_cstack[$I19]
  rx42_cstack_done110:
    pop rx42_rep, rx42_bstack
    pop rx42_pos, rx42_bstack
    pop $I19, rx42_bstack
    lt rx42_pos, -1, rx42_done105
    lt rx42_pos, 0, rx42_fail107
    eq $I19, 0, rx42_fail107
    nqp_islist $I20, rx42_cstack
    unless $I20, rx42_jump108
    elements $I18, rx42_bstack
    le $I18, 0, rx42_cut109
    dec $I18
    set $I18, rx42_bstack[$I18]
  rx42_cut109:
    assign rx42_cstack, $I18
  rx42_jump108:
    jump $I19
  rx42_done105:
    rx42_cur."!cursor_fail"()
    .return (rx42_cur) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_11_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 87
    .param pmc _lex_param_0 
    .const 'Sub' $P5023 = 'cuid_211_1382484119.90237' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_212_1382484119.90237' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_12_1382484119.90237' 
    capture_lex $P5023 
    .const 'Sub' $P5023 = 'cuid_213_1382484119.90237' 
    capture_lex $P5023 
    .lex "$OLDRX", $P101 
    .lex "%*RX", $P102 
    .lex "$*SEQ", $P103 
    .lex utf8:"$\x{a2}", $P104 
    .lex "$/", $P105 
    .lex "self", _lex_param_0 
    .local pmc self 
    .local pmc fb_tmp_2 
    .local pmc pkg_viv_tmp_2 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P103, $P5003
    set self, _lex_param_0
    .local pmc rx51_start
    .local string rx51_tgt
    .local int rx51_pos
    .local int rx51_off
    .local int rx51_eos
    .local int rx51_rep
    .local pmc rx51_cur
    .local pmc rx51_curclass
    .local pmc rx51_bstack
    .local pmc rx51_cstack
    rx51_start = self."!cursor_start_all"()
    set rx51_cur, rx51_start[0]
    set rx51_tgt, rx51_start[1]
    set rx51_pos, rx51_start[2]
    set rx51_curclass, rx51_start[3]
    set rx51_bstack, rx51_start[4]
    set $I19, rx51_start[5]
    store_lex unicode:"$\x{a2}", rx51_cur
    length rx51_eos, rx51_tgt
    eq $I19, 1, rx51_restart127
    gt rx51_pos, rx51_eos, rx51_fail128
    repr_get_attr_int $I11, self, rx51_curclass, "$!from"
    ne $I11, -1, rxscan52_done134
    goto rxscan52_scan133
  rxscan52_loop132:
    inc rx51_pos
    gt rx51_pos, rx51_eos, rx51_fail128
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!from", rx51_pos
  rxscan52_scan133:
    nqp_rxmark rx51_bstack, rxscan52_loop132, rx51_pos, 0
  rxscan52_done134:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    store_lex unicode:"$\x{a2}", rx51_cur
    find_dynamic_lex $P5004, "%*RX"
    set $P101, $P5004
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    store_lex unicode:"$\x{a2}", rx51_cur
    unless_null $P102, fallback135
    nqp_get_sc_object $P5006, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5005, $P5006
    set pkg_viv_tmp_2, $P5005
    set fb_tmp_2, pkg_viv_tmp_2
    repr_defined $I5001, fb_tmp_2
    unless $I5001 goto if53_else136 
    set $P5007, fb_tmp_2["%RX"]
    set $P5009, $P5007
    goto if53_end137
  if53_else136:
    null $P5008
    set $P5009, $P5008
  if53_end137:
    unless_null $P5009, vivi_54138
    new $P5010, 'Hash'
    set pkg_viv_tmp_2["%RX"], $P5010
    set $P5009, $P5010
  vivi_54138:
    unless_null $P5009, vivi_55139
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5009, $P5011
  vivi_55139:
    set $P102, $P5009
  fallback135:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    store_lex unicode:"$\x{a2}", rx51_cur
    box $P5012, 0
    set $P103, $P5012
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    store_lex unicode:"$\x{a2}", rx51_cur
    $P5013 = $P104."MATCH"()
    set $P105, $P5013
    .const 'Sub' $P5014 = 'cuid_211_1382484119.90237' 
    capture_lex $P5014
    $P5015 = $P5014()
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."ws"()
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail128
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
    nqp_rxmark rx51_bstack, rxquantr60_done150, rx51_pos, 0
  rxquantr60_loop149:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt61_0152
    nqp_push_label $P11, alt61_1153
    nqp_push_label $P11, alt61_2154
    nqp_push_label $P11, alt61_3155
    nqp_rxmark rx51_bstack, alt61_end151, -1, 0
    rx51_cur."!alt"(rx51_pos, "alt_nfa__3_1382484120.32858", $P11)
    goto rx51_fail128
  alt61_0152:
    add $I11, rx51_pos, 2
    gt $I11, rx51_eos, rx51_fail128
    substr $S10, rx51_tgt, rx51_pos, 2
    ne $S10, ucs4:"||", rx51_fail128
    add rx51_pos, 2
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    store_lex unicode:"$\x{a2}", rx51_cur
    $P5016 = $P104."MATCH"()
    set $P105, $P5016
    .const 'Sub' $P5017 = 'cuid_212_1382484119.90237' 
    capture_lex $P5017
    $P5018 = $P5017()
    goto alt61_end151
  alt61_1153:
    add $I11, rx51_pos, 1
    gt $I11, rx51_eos, rx51_fail128
    substr $S10, rx51_tgt, rx51_pos, 1
    ne $S10, ucs4:"|", rx51_fail128
    add rx51_pos, 1
    goto alt61_end151
  alt61_2154:
    add $I11, rx51_pos, 2
    gt $I11, rx51_eos, rx51_fail128
    substr $S10, rx51_tgt, rx51_pos, 2
    ne $S10, ucs4:"&&", rx51_fail128
    add rx51_pos, 2
    goto alt61_end151
  alt61_3155:
    add $I11, rx51_pos, 1
    gt $I11, rx51_eos, rx51_fail128
    substr $S10, rx51_tgt, rx51_pos, 1
    ne $S10, ucs4:"&", rx51_fail128
    add rx51_pos, 1
    goto alt61_end151
  alt61_end151:
    nqp_rxcommit rx51_bstack, alt61_end151
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."ws"()
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail128
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
    nqp_rxpeek $I19, rx51_bstack, rxquantr60_done150
    inc $I19
    inc $I19
    set rx51_rep, rx51_bstack[$I19]
    nqp_rxcommit rx51_bstack, rxquantr60_done150
    inc rx51_rep
  rxquantr60_done150:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."termseq"()
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail128
    nqp_rxmark rx51_bstack, rxsubrule63_pass157, -1, 0
  rxsubrule63_pass157:
    rx51_cstack = rx51_cur."!cursor_capture"($P11, "termseq")
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
  alt64_0159:
    nqp_rxmark rx51_bstack, alt64_1160, rx51_pos, 0
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail128
    goto alt64_end158
  alt64_1160:
    nqp_rxmark rx51_bstack, alt64_2163, rx51_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx51_tgt, rx51_pos
    if $I11, rxanchor65_done161
    ne rx51_pos, rx51_eos, rx51_fail128
    eq rx51_pos, 0, rxanchor65_done161
    sub $I11, rx51_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx51_tgt, $I11
    if $I11, rx51_fail128
  rxanchor65_done161:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail128
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
    goto alt64_end158
  alt64_2163:
    nqp_rxmark rx51_bstack, alt64_3178, rx51_pos, 0
    .const 'Sub' $P5019 = 'cuid_12_1382484119.90237' 
    capture_lex $P5019
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur.$P5019()
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail128
    nqp_rxmark rx51_bstack, rxsubrule69_pass174, -1, 0
  rxsubrule69_pass174:
    rx51_cstack = rx51_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    store_lex unicode:"$\x{a2}", rx51_cur
    $P5020 = $P104."MATCH"()
    set $P105, $P5020
    .const 'Sub' $P5021 = 'cuid_213_1382484119.90237' 
    capture_lex $P5021
    $P5022 = $P5021()
    goto alt64_end158
  alt64_3178:
    repr_bind_attr_int rx51_cur, rx51_curclass, "$!pos", rx51_pos
    $P11 = rx51_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx51_curclass, "$!pos"
    lt $I11, 0, rx51_fail128
    repr_get_attr_int rx51_pos, $P11, rx51_curclass, "$!pos"
  alt64_end158:
    rx51_cur."!cursor_pass"(rx51_pos, "nibbler", 'backtrack'=>1)
    .return (rx51_cur)
  rx51_restart127:
    repr_get_attr_obj rx51_cstack, rx51_cur, rx51_curclass, "$!cstack"
  rx51_fail128:
    unless rx51_bstack, rx51_done126
    pop $I19, rx51_bstack
    if_null rx51_cstack, rx51_cstack_done131
    unless rx51_cstack, rx51_cstack_done131
    dec $I19
    set $P11, rx51_cstack[$I19]
  rx51_cstack_done131:
    pop rx51_rep, rx51_bstack
    pop rx51_pos, rx51_bstack
    pop $I19, rx51_bstack
    lt rx51_pos, -1, rx51_done126
    lt rx51_pos, 0, rx51_fail128
    eq $I19, 0, rx51_fail128
    nqp_islist $I20, rx51_cstack
    unless $I20, rx51_jump129
    elements $I18, rx51_bstack
    le $I18, 0, rx51_cut130
    dec $I18
    set $I18, rx51_bstack[$I18]
  rx51_cut130:
    assign rx51_cstack, $I18
  rx51_jump129:
    jump $I19
  rx51_done126:
    rx51_cur."!cursor_fail"()
    .return (rx51_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_211_1382484119.90237") :anon :lex :outer("cuid_11_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 91
    .const 'Sub' $P5007 = 'cuid_210_1382484119.90237' 
    capture_lex $P5007 
    find_lex $P5004, "$OLDRX"
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next145:
    unless $P5003, for_done147
    shift $P5006, $P5003
  for_redo146:
    .const 'Sub' $P5005 = 'cuid_210_1382484119.90237' 
    capture_lex $P5005
    $P5001 = $P5005($P5006)
    goto for_next145
  for_done147:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_210_1382484119.90237") :anon :lex :outer("cuid_211_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 92
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_3 
    .local pmc pkg_viv_tmp_3 
    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback140
    nqp_get_sc_object $P5003, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5002, $P5003
    set pkg_viv_tmp_3, $P5002
    set fb_tmp_3, pkg_viv_tmp_3
    repr_defined $I5001, fb_tmp_3
    unless $I5001 goto if56_else141 
    set $P5004, fb_tmp_3["%RX"]
    set $P5006, $P5004
    goto if56_end142
  if56_else141:
    null $P5005
    set $P5006, $P5005
  if56_end142:
    unless_null $P5006, vivi_57143
    new $P5007, 'Hash'
    set pkg_viv_tmp_3["%RX"], $P5007
    set $P5006, $P5007
  vivi_57143:
    unless_null $P5006, vivi_58144
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5006, $P5008
  vivi_58144:
    set $P5001, $P5006
  fallback140:
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_212_1382484119.90237") :anon :lex :outer("cuid_11_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 97

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1382484119.90237") :anon :lex :outer("cuid_11_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx67_start
    .local string rx67_tgt
    .local int rx67_pos
    .local int rx67_off
    .local int rx67_eos
    .local int rx67_rep
    .local pmc rx67_cur
    .local pmc rx67_curclass
    .local pmc rx67_bstack
    .local pmc rx67_cstack
    rx67_start = self."!cursor_start_all"()
    set rx67_cur, rx67_start[0]
    set rx67_tgt, rx67_start[1]
    set rx67_pos, rx67_start[2]
    set rx67_curclass, rx67_start[3]
    set rx67_bstack, rx67_start[4]
    set $I19, rx67_start[5]
    store_lex unicode:"$\x{a2}", rx67_cur
    length rx67_eos, rx67_tgt
    eq $I19, 1, rx67_restart166
    gt rx67_pos, rx67_eos, rx67_fail167
    repr_get_attr_int $I11, self, rx67_curclass, "$!from"
    ne $I11, -1, rxscan68_done173
    goto rxscan68_scan172
  rxscan68_loop171:
    inc rx67_pos
    gt rx67_pos, rx67_eos, rx67_fail167
    repr_bind_attr_int rx67_cur, rx67_curclass, "$!from", rx67_pos
  rxscan68_scan172:
    nqp_rxmark rx67_bstack, rxscan68_loop171, rx67_pos, 0
  rxscan68_done173:
    ge rx67_pos, rx67_eos, rx67_fail167
    is_cclass $I11, .CCLASS_WORD, rx67_tgt, rx67_pos
    if $I11, rx67_fail167
    add rx67_pos, 1
    rx67_cur."!cursor_pass"(rx67_pos, 'backtrack'=>1)
    .return (rx67_cur)
  rx67_restart166:
    repr_get_attr_obj rx67_cstack, rx67_cur, rx67_curclass, "$!cstack"
  rx67_fail167:
    unless rx67_bstack, rx67_done165
    pop $I19, rx67_bstack
    if_null rx67_cstack, rx67_cstack_done170
    unless rx67_cstack, rx67_cstack_done170
    dec $I19
    set $P11, rx67_cstack[$I19]
  rx67_cstack_done170:
    pop rx67_rep, rx67_bstack
    pop rx67_pos, rx67_bstack
    pop $I19, rx67_bstack
    lt rx67_pos, -1, rx67_done165
    lt rx67_pos, 0, rx67_fail167
    eq $I19, 0, rx67_fail167
    nqp_islist $I20, rx67_cstack
    unless $I20, rx67_jump168
    elements $I18, rx67_bstack
    le $I18, 0, rx67_cut169
    dec $I18
    set $I18, rx67_bstack[$I18]
  rx67_cut169:
    assign rx67_cstack, $I18
  rx67_jump168:
    jump $I19
  rx67_done165:
    rx67_cur."!cursor_fail"()
    .return (rx67_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_213_1382484119.90237") :anon :lex :outer("cuid_11_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 107
    .local pmc fb_tmp_4 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_4, $P5003
    repr_defined $I5001, fb_tmp_4
    unless $I5001 goto if70_else175 
    set $P5004, fb_tmp_4[0]
    set $P5006, $P5004
    goto if70_end176
  if70_else175:
    null $P5005
    set $P5006, $P5005
  if70_end176:
    unless_null $P5006, vivi_71177
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_71177:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_13_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 112
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_14_1382484119.90237' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_15_1382484119.90237' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx73_start
    .local string rx73_tgt
    .local int rx73_pos
    .local int rx73_off
    .local int rx73_eos
    .local int rx73_rep
    .local pmc rx73_cur
    .local pmc rx73_curclass
    .local pmc rx73_bstack
    .local pmc rx73_cstack
    rx73_start = self."!cursor_start_all"()
    set rx73_cur, rx73_start[0]
    set rx73_tgt, rx73_start[1]
    set rx73_pos, rx73_start[2]
    set rx73_curclass, rx73_start[3]
    set rx73_bstack, rx73_start[4]
    set $I19, rx73_start[5]
    store_lex unicode:"$\x{a2}", rx73_cur
    length rx73_eos, rx73_tgt
    eq $I19, 1, rx73_restart182
    gt rx73_pos, rx73_eos, rx73_fail183
    repr_get_attr_int $I11, self, rx73_curclass, "$!from"
    ne $I11, -1, rxscan74_done189
    goto rxscan74_scan188
  rxscan74_loop187:
    inc rx73_pos
    gt rx73_pos, rx73_eos, rx73_fail183
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!from", rx73_pos
  rxscan74_scan188:
    nqp_rxmark rx73_bstack, rxscan74_loop187, rx73_pos, 0
  rxscan74_done189:
    rx73_cur."!dba"(rx73_pos, "infix stopper")
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt75_0191
    nqp_push_label $P11, alt75_1202
    nqp_push_label $P11, alt75_2213
    nqp_rxmark rx73_bstack, alt75_end190, -1, 0
    rx73_cur."!alt"(rx73_pos, "alt_nfa__4_1382484120.3484", $P11)
    goto rx73_fail183
  alt75_0191:
    .const 'Sub' $P5001 = 'cuid_14_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail183
    goto alt75_end190
  alt75_1202:
    .const 'Sub' $P5002 = 'cuid_15_1382484119.90237' 
    capture_lex $P5002
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail183
    goto alt75_end190
  alt75_2213:
    repr_bind_attr_int rx73_cur, rx73_curclass, "$!pos", rx73_pos
    $P11 = rx73_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx73_curclass, "$!pos"
    lt $I11, 0, rx73_fail183
    goto alt75_end190
  alt75_end190:
    rx73_cur."!cursor_pass"(rx73_pos, "infixstopper", 'backtrack'=>1)
    .return (rx73_cur)
  rx73_restart182:
    repr_get_attr_obj rx73_cstack, rx73_cur, rx73_curclass, "$!cstack"
  rx73_fail183:
    unless rx73_bstack, rx73_done181
    pop $I19, rx73_bstack
    if_null rx73_cstack, rx73_cstack_done186
    unless rx73_cstack, rx73_cstack_done186
    dec $I19
    set $P11, rx73_cstack[$I19]
  rx73_cstack_done186:
    pop rx73_rep, rx73_bstack
    pop rx73_pos, rx73_bstack
    pop $I19, rx73_bstack
    lt rx73_pos, -1, rx73_done181
    lt rx73_pos, 0, rx73_fail183
    eq $I19, 0, rx73_fail183
    nqp_islist $I20, rx73_cstack
    unless $I20, rx73_jump184
    elements $I18, rx73_bstack
    le $I18, 0, rx73_cut185
    dec $I18
    set $I18, rx73_bstack[$I18]
  rx73_cut185:
    assign rx73_cstack, $I18
  rx73_jump184:
    jump $I19
  rx73_done181:
    rx73_cur."!cursor_fail"()
    .return (rx73_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1382484119.90237") :anon :lex :outer("cuid_13_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx76_start
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    rx76_start = self."!cursor_start_all"()
    set rx76_cur, rx76_start[0]
    set rx76_tgt, rx76_start[1]
    set rx76_pos, rx76_start[2]
    set rx76_curclass, rx76_start[3]
    set rx76_bstack, rx76_start[4]
    set $I19, rx76_start[5]
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart194
    gt rx76_pos, rx76_eos, rx76_fail195
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done201
    goto rxscan77_scan200
  rxscan77_loop199:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail195
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan200:
    nqp_rxmark rx76_bstack, rxscan77_loop199, rx76_pos, 0
  rxscan77_done201:
    ge rx76_pos, rx76_eos, rx76_fail195
    substr $S11, rx76_tgt, rx76_pos, 1
    index $I11, ucs4:")}]", $S11
    lt $I11, 0, rx76_fail195
    inc rx76_pos
    rx76_cur."!cursor_pass"(rx76_pos, 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart194:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail195:
    unless rx76_bstack, rx76_done193
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done198
    unless rx76_cstack, rx76_cstack_done198
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done198:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done193
    lt rx76_pos, 0, rx76_fail195
    eq $I19, 0, rx76_fail195
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump196
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut197
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut197:
    assign rx76_cstack, $I18
  rx76_jump196:
    jump $I19
  rx76_done193:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_15_1382484119.90237") :anon :lex :outer("cuid_13_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx78_start
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    rx78_start = self."!cursor_start_all"()
    set rx78_cur, rx78_start[0]
    set rx78_tgt, rx78_start[1]
    set rx78_pos, rx78_start[2]
    set rx78_curclass, rx78_start[3]
    set rx78_bstack, rx78_start[4]
    set $I19, rx78_start[5]
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart205
    gt rx78_pos, rx78_eos, rx78_fail206
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done212
    goto rxscan79_scan211
  rxscan79_loop210:
    inc rx78_pos
    index rx78_pos, rx78_tgt, ucs4:">", rx78_pos
    eq rx78_pos, -1, rx78_fail206
    gt rx78_pos, rx78_eos, rx78_fail206
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan211:
    nqp_rxmark rx78_bstack, rxscan79_loop210, rx78_pos, 0
  rxscan79_done212:
    add $I11, rx78_pos, 1
    gt $I11, rx78_eos, rx78_fail206
    substr $S10, rx78_tgt, rx78_pos, 1
    ne $S10, ucs4:">", rx78_fail206
    add rx78_pos, 1
    ge rx78_pos, rx78_eos, rx78_fail206
    substr $S11, rx78_tgt, rx78_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx78_fail206
    inc rx78_pos
    rx78_cur."!cursor_pass"(rx78_pos, 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart205:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail206:
    unless rx78_bstack, rx78_done204
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done209
    unless rx78_cstack, rx78_cstack_done209
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done209:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done204
    lt rx78_pos, 0, rx78_fail206
    eq $I19, 0, rx78_fail206
    nqp_islist $I20, rx78_cstack
    unless $I20, rx78_jump207
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut208
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut208:
    assign rx78_cstack, $I18
  rx78_jump207:
    jump $I19
  rx78_done204:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_16_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 121
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx80_start
    .local string rx80_tgt
    .local int rx80_pos
    .local int rx80_off
    .local int rx80_eos
    .local int rx80_rep
    .local pmc rx80_cur
    .local pmc rx80_curclass
    .local pmc rx80_bstack
    .local pmc rx80_cstack
    rx80_start = self."!cursor_start_all"()
    set rx80_cur, rx80_start[0]
    set rx80_tgt, rx80_start[1]
    set rx80_pos, rx80_start[2]
    set rx80_curclass, rx80_start[3]
    set rx80_bstack, rx80_start[4]
    set $I19, rx80_start[5]
    store_lex unicode:"$\x{a2}", rx80_cur
    length rx80_eos, rx80_tgt
    eq $I19, 1, rx80_restart216
    gt rx80_pos, rx80_eos, rx80_fail217
    repr_get_attr_int $I11, self, rx80_curclass, "$!from"
    ne $I11, -1, rxscan81_done223
    goto rxscan81_scan222
  rxscan81_loop221:
    inc rx80_pos
    gt rx80_pos, rx80_eos, rx80_fail217
    repr_bind_attr_int rx80_cur, rx80_curclass, "$!from", rx80_pos
  rxscan81_scan222:
    nqp_rxmark rx80_bstack, rxscan81_loop221, rx80_pos, 0
  rxscan81_done223:
    lt rx80_pos, rx80_eos, rx80_fail217
    rx80_cur."!cursor_pass"(rx80_pos, "rxstopper", 'backtrack'=>1)
    .return (rx80_cur)
  rx80_restart216:
    repr_get_attr_obj rx80_cstack, rx80_cur, rx80_curclass, "$!cstack"
  rx80_fail217:
    unless rx80_bstack, rx80_done215
    pop $I19, rx80_bstack
    if_null rx80_cstack, rx80_cstack_done220
    unless rx80_cstack, rx80_cstack_done220
    dec $I19
    set $P11, rx80_cstack[$I19]
  rx80_cstack_done220:
    pop rx80_rep, rx80_bstack
    pop rx80_pos, rx80_bstack
    pop $I19, rx80_bstack
    lt rx80_pos, -1, rx80_done215
    lt rx80_pos, 0, rx80_fail217
    eq $I19, 0, rx80_fail217
    nqp_islist $I20, rx80_cstack
    unless $I20, rx80_jump218
    elements $I18, rx80_bstack
    le $I18, 0, rx80_cut219
    dec $I18
    set $I18, rx80_bstack[$I18]
  rx80_cut219:
    assign rx80_cstack, $I18
  rx80_jump218:
    jump $I19
  rx80_done215:
    rx80_cur."!cursor_fail"()
    .return (rx80_cur) 
.end
.HLL "nqp"
.namespace []
.sub "termseq" :subid("cuid_17_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 125
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_18_1382484119.90237' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_19_1382484119.90237' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_20_1382484119.90237' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_214_1382484119.90237' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx83_start
    .local string rx83_tgt
    .local int rx83_pos
    .local int rx83_off
    .local int rx83_eos
    .local int rx83_rep
    .local pmc rx83_cur
    .local pmc rx83_curclass
    .local pmc rx83_bstack
    .local pmc rx83_cstack
    rx83_start = self."!cursor_start_all"()
    set rx83_cur, rx83_start[0]
    set rx83_tgt, rx83_start[1]
    set rx83_pos, rx83_start[2]
    set rx83_curclass, rx83_start[3]
    set rx83_bstack, rx83_start[4]
    set $I19, rx83_start[5]
    store_lex unicode:"$\x{a2}", rx83_cur
    length rx83_eos, rx83_tgt
    eq $I19, 1, rx83_restart227
    gt rx83_pos, rx83_eos, rx83_fail228
    repr_get_attr_int $I11, self, rx83_curclass, "$!from"
    ne $I11, -1, rxscan84_done234
    goto rxscan84_scan233
  rxscan84_loop232:
    inc rx83_pos
    gt rx83_pos, rx83_eos, rx83_fail228
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!from", rx83_pos
  rxscan84_scan233:
    nqp_rxmark rx83_bstack, rxscan84_loop232, rx83_pos, 0
  rxscan84_done234:
  alt85_0236:
    nqp_rxmark rx83_bstack, alt85_1238, rx83_pos, 0
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."termaltseq"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail228
    nqp_rxmark rx83_bstack, rxsubrule86_pass237, -1, 0
  rxsubrule86_pass237:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "termaltseq")
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    goto alt85_end235
  alt85_1238:
    nqp_rxmark rx83_bstack, alt85_2254, rx83_pos, 0
    .const 'Sub' $P5001 = 'cuid_18_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail228
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail228
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    goto alt85_end235
  alt85_2254:
    nqp_rxmark rx83_bstack, alt85_3267, rx83_pos, 0
    .const 'Sub' $P5002 = 'cuid_19_1382484119.90237' 
    capture_lex $P5002
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail228
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail228
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    goto alt85_end235
  alt85_3267:
    nqp_rxmark rx83_bstack, alt85_4270, rx83_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx83_tgt, rx83_pos
    if $I11, rxanchor96_done268
    ne rx83_pos, rx83_eos, rx83_fail228
    eq rx83_pos, 0, rxanchor96_done268
    sub $I11, rx83_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx83_tgt, $I11
    if $I11, rx83_fail228
  rxanchor96_done268:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail228
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    goto alt85_end235
  alt85_4270:
    nqp_rxmark rx83_bstack, alt85_5285, rx83_pos, 0
    .const 'Sub' $P5003 = 'cuid_20_1382484119.90237' 
    capture_lex $P5003
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur.$P5003()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail228
    nqp_rxmark rx83_bstack, rxsubrule100_pass281, -1, 0
  rxsubrule100_pass281:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    store_lex unicode:"$\x{a2}", rx83_cur
    $P5004 = $P101."MATCH"()
    set $P102, $P5004
    .const 'Sub' $P5005 = 'cuid_214_1382484119.90237' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto alt85_end235
  alt85_5285:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."panic"("Regex not terminated")
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail228
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
  alt85_end235:
    rx83_cur."!cursor_pass"(rx83_pos, "termseq", 'backtrack'=>1)
    .return (rx83_cur)
  rx83_restart227:
    repr_get_attr_obj rx83_cstack, rx83_cur, rx83_curclass, "$!cstack"
  rx83_fail228:
    unless rx83_bstack, rx83_done226
    pop $I19, rx83_bstack
    if_null rx83_cstack, rx83_cstack_done231
    unless rx83_cstack, rx83_cstack_done231
    dec $I19
    set $P11, rx83_cstack[$I19]
  rx83_cstack_done231:
    pop rx83_rep, rx83_bstack
    pop rx83_pos, rx83_bstack
    pop $I19, rx83_bstack
    lt rx83_pos, -1, rx83_done226
    lt rx83_pos, 0, rx83_fail228
    eq $I19, 0, rx83_fail228
    nqp_islist $I20, rx83_cstack
    unless $I20, rx83_jump229
    elements $I18, rx83_bstack
    le $I18, 0, rx83_cut230
    dec $I18
    set $I18, rx83_bstack[$I18]
  rx83_cut230:
    assign rx83_cstack, $I18
  rx83_jump229:
    jump $I19
  rx83_done226:
    rx83_cur."!cursor_fail"()
    .return (rx83_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_18_1382484119.90237") :anon :lex :outer("cuid_17_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx87_start
    .local string rx87_tgt
    .local int rx87_pos
    .local int rx87_off
    .local int rx87_eos
    .local int rx87_rep
    .local pmc rx87_cur
    .local pmc rx87_curclass
    .local pmc rx87_bstack
    .local pmc rx87_cstack
    rx87_start = self."!cursor_start_all"()
    set rx87_cur, rx87_start[0]
    set rx87_tgt, rx87_start[1]
    set rx87_pos, rx87_start[2]
    set rx87_curclass, rx87_start[3]
    set rx87_bstack, rx87_start[4]
    set $I19, rx87_start[5]
    store_lex unicode:"$\x{a2}", rx87_cur
    length rx87_eos, rx87_tgt
    eq $I19, 1, rx87_restart241
    gt rx87_pos, rx87_eos, rx87_fail242
    repr_get_attr_int $I11, self, rx87_curclass, "$!from"
    ne $I11, -1, rxscan88_done248
    goto rxscan88_scan247
  rxscan88_loop246:
    inc rx87_pos
    gt rx87_pos, rx87_eos, rx87_fail242
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!from", rx87_pos
  rxscan88_scan247:
    nqp_rxmark rx87_bstack, rxscan88_loop246, rx87_pos, 0
  rxscan88_done248:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt89_0250
    nqp_push_label $P11, alt89_1252
    nqp_rxmark rx87_bstack, alt89_end249, -1, 0
    rx87_cur."!alt"(rx87_pos, "alt_nfa__5_1382484120.36235", $P11)
    goto rx87_fail242
  alt89_0250:
    repr_bind_attr_int rx87_cur, rx87_curclass, "$!pos", rx87_pos
    $P11 = rx87_cur."stopper"()
    repr_get_attr_int $I11, $P11, rx87_curclass, "$!pos"
    lt $I11, 0, rx87_fail242
    nqp_rxmark rx87_bstack, rxsubrule90_pass251, -1, 0
  rxsubrule90_pass251:
    rx87_cstack = rx87_cur."!cursor_capture"($P11, "stopper")
    repr_get_attr_int rx87_pos, $P11, rx87_curclass, "$!pos"
    goto alt89_end249
  alt89_1252:
    ge rx87_pos, rx87_eos, rx87_fail242
    substr $S11, rx87_tgt, rx87_pos, 1
    index $I11, ucs4:"&|~", $S11
    lt $I11, 0, rx87_fail242
    inc rx87_pos
    goto alt89_end249
  alt89_end249:
    rx87_cur."!cursor_pass"(rx87_pos, 'backtrack'=>1)
    .return (rx87_cur)
  rx87_restart241:
    repr_get_attr_obj rx87_cstack, rx87_cur, rx87_curclass, "$!cstack"
  rx87_fail242:
    unless rx87_bstack, rx87_done240
    pop $I19, rx87_bstack
    if_null rx87_cstack, rx87_cstack_done245
    unless rx87_cstack, rx87_cstack_done245
    dec $I19
    set $P11, rx87_cstack[$I19]
  rx87_cstack_done245:
    pop rx87_rep, rx87_bstack
    pop rx87_pos, rx87_bstack
    pop $I19, rx87_bstack
    lt rx87_pos, -1, rx87_done240
    lt rx87_pos, 0, rx87_fail242
    eq $I19, 0, rx87_fail242
    nqp_islist $I20, rx87_cstack
    unless $I20, rx87_jump243
    elements $I18, rx87_bstack
    le $I18, 0, rx87_cut244
    dec $I18
    set $I18, rx87_bstack[$I18]
  rx87_cut244:
    assign rx87_cstack, $I18
  rx87_jump243:
    jump $I19
  rx87_done240:
    rx87_cur."!cursor_fail"()
    .return (rx87_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_19_1382484119.90237") :anon :lex :outer("cuid_17_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx92_start
    .local string rx92_tgt
    .local int rx92_pos
    .local int rx92_off
    .local int rx92_eos
    .local int rx92_rep
    .local pmc rx92_cur
    .local pmc rx92_curclass
    .local pmc rx92_bstack
    .local pmc rx92_cstack
    rx92_start = self."!cursor_start_all"()
    set rx92_cur, rx92_start[0]
    set rx92_tgt, rx92_start[1]
    set rx92_pos, rx92_start[2]
    set rx92_curclass, rx92_start[3]
    set rx92_bstack, rx92_start[4]
    set $I19, rx92_start[5]
    store_lex unicode:"$\x{a2}", rx92_cur
    length rx92_eos, rx92_tgt
    eq $I19, 1, rx92_restart257
    gt rx92_pos, rx92_eos, rx92_fail258
    repr_get_attr_int $I11, self, rx92_curclass, "$!from"
    ne $I11, -1, rxscan93_done264
    goto rxscan93_scan263
  rxscan93_loop262:
    inc rx92_pos
    gt rx92_pos, rx92_eos, rx92_fail258
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!from", rx92_pos
  rxscan93_scan263:
    nqp_rxmark rx92_bstack, rxscan93_loop262, rx92_pos, 0
  rxscan93_done264:
    repr_bind_attr_int rx92_cur, rx92_curclass, "$!pos", rx92_pos
    $P11 = rx92_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx92_curclass, "$!pos"
    lt $I11, 0, rx92_fail258
    nqp_rxmark rx92_bstack, rxsubrule94_pass265, -1, 0
  rxsubrule94_pass265:
    rx92_cstack = rx92_cur."!cursor_capture"($P11, "infixstopper")
    repr_get_attr_int rx92_pos, $P11, rx92_curclass, "$!pos"
    rx92_cur."!cursor_pass"(rx92_pos, 'backtrack'=>1)
    .return (rx92_cur)
  rx92_restart257:
    repr_get_attr_obj rx92_cstack, rx92_cur, rx92_curclass, "$!cstack"
  rx92_fail258:
    unless rx92_bstack, rx92_done256
    pop $I19, rx92_bstack
    if_null rx92_cstack, rx92_cstack_done261
    unless rx92_cstack, rx92_cstack_done261
    dec $I19
    set $P11, rx92_cstack[$I19]
  rx92_cstack_done261:
    pop rx92_rep, rx92_bstack
    pop rx92_pos, rx92_bstack
    pop $I19, rx92_bstack
    lt rx92_pos, -1, rx92_done256
    lt rx92_pos, 0, rx92_fail258
    eq $I19, 0, rx92_fail258
    nqp_islist $I20, rx92_cstack
    unless $I20, rx92_jump259
    elements $I18, rx92_bstack
    le $I18, 0, rx92_cut260
    dec $I18
    set $I18, rx92_bstack[$I18]
  rx92_cut260:
    assign rx92_cstack, $I18
  rx92_jump259:
    jump $I19
  rx92_done256:
    rx92_cur."!cursor_fail"()
    .return (rx92_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_20_1382484119.90237") :anon :lex :outer("cuid_17_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx98_start
    .local string rx98_tgt
    .local int rx98_pos
    .local int rx98_off
    .local int rx98_eos
    .local int rx98_rep
    .local pmc rx98_cur
    .local pmc rx98_curclass
    .local pmc rx98_bstack
    .local pmc rx98_cstack
    rx98_start = self."!cursor_start_all"()
    set rx98_cur, rx98_start[0]
    set rx98_tgt, rx98_start[1]
    set rx98_pos, rx98_start[2]
    set rx98_curclass, rx98_start[3]
    set rx98_bstack, rx98_start[4]
    set $I19, rx98_start[5]
    store_lex unicode:"$\x{a2}", rx98_cur
    length rx98_eos, rx98_tgt
    eq $I19, 1, rx98_restart273
    gt rx98_pos, rx98_eos, rx98_fail274
    repr_get_attr_int $I11, self, rx98_curclass, "$!from"
    ne $I11, -1, rxscan99_done280
    goto rxscan99_scan279
  rxscan99_loop278:
    inc rx98_pos
    gt rx98_pos, rx98_eos, rx98_fail274
    repr_bind_attr_int rx98_cur, rx98_curclass, "$!from", rx98_pos
  rxscan99_scan279:
    nqp_rxmark rx98_bstack, rxscan99_loop278, rx98_pos, 0
  rxscan99_done280:
    ge rx98_pos, rx98_eos, rx98_fail274
    is_cclass $I11, .CCLASS_WORD, rx98_tgt, rx98_pos
    if $I11, rx98_fail274
    add rx98_pos, 1
    rx98_cur."!cursor_pass"(rx98_pos, 'backtrack'=>1)
    .return (rx98_cur)
  rx98_restart273:
    repr_get_attr_obj rx98_cstack, rx98_cur, rx98_curclass, "$!cstack"
  rx98_fail274:
    unless rx98_bstack, rx98_done272
    pop $I19, rx98_bstack
    if_null rx98_cstack, rx98_cstack_done277
    unless rx98_cstack, rx98_cstack_done277
    dec $I19
    set $P11, rx98_cstack[$I19]
  rx98_cstack_done277:
    pop rx98_rep, rx98_bstack
    pop rx98_pos, rx98_bstack
    pop $I19, rx98_bstack
    lt rx98_pos, -1, rx98_done272
    lt rx98_pos, 0, rx98_fail274
    eq $I19, 0, rx98_fail274
    nqp_islist $I20, rx98_cstack
    unless $I20, rx98_jump275
    elements $I18, rx98_bstack
    le $I18, 0, rx98_cut276
    dec $I18
    set $I18, rx98_bstack[$I18]
  rx98_cut276:
    assign rx98_cstack, $I18
  rx98_jump275:
    jump $I19
  rx98_done272:
    rx98_cur."!cursor_fail"()
    .return (rx98_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_214_1382484119.90237") :anon :lex :outer("cuid_17_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 130
    .local pmc fb_tmp_5 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_5, $P5003
    repr_defined $I5001, fb_tmp_5
    unless $I5001 goto if101_else282 
    set $P5004, fb_tmp_5[0]
    set $P5006, $P5004
    goto if101_end283
  if101_else282:
    null $P5005
    set $P5006, $P5005
  if101_end283:
    unless_null $P5006, vivi_102284
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_102284:
    set $S5001, $P5006
    $P5008 = $P5001."throw_unrecognized_metachar"($S5001)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_21_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 134
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_215_1382484119.90237' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx104_start
    .local string rx104_tgt
    .local int rx104_pos
    .local int rx104_off
    .local int rx104_eos
    .local int rx104_rep
    .local pmc rx104_cur
    .local pmc rx104_curclass
    .local pmc rx104_bstack
    .local pmc rx104_cstack
    rx104_start = self."!cursor_start_all"()
    set rx104_cur, rx104_start[0]
    set rx104_tgt, rx104_start[1]
    set rx104_pos, rx104_start[2]
    set rx104_curclass, rx104_start[3]
    set rx104_bstack, rx104_start[4]
    set $I19, rx104_start[5]
    store_lex unicode:"$\x{a2}", rx104_cur
    length rx104_eos, rx104_tgt
    eq $I19, 1, rx104_restart289
    gt rx104_pos, rx104_eos, rx104_fail290
    repr_get_attr_int $I11, self, rx104_curclass, "$!from"
    ne $I11, -1, rxscan105_done296
    goto rxscan105_scan295
  rxscan105_loop294:
    inc rx104_pos
    gt rx104_pos, rx104_eos, rx104_fail290
    repr_bind_attr_int rx104_cur, rx104_curclass, "$!from", rx104_pos
  rxscan105_scan295:
    nqp_rxmark rx104_bstack, rxscan105_loop294, rx104_pos, 0
  rxscan105_done296:
    repr_bind_attr_int rx104_cur, rx104_curclass, "$!pos", rx104_pos
    $P11 = rx104_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx104_curclass, "$!pos"
    lt $I11, 0, rx104_fail290
    nqp_rxmark rx104_bstack, rxsubrule106_pass297, -1, 0
  rxsubrule106_pass297:
    rx104_cstack = rx104_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx104_pos, $P11, rx104_curclass, "$!pos"
    nqp_rxmark rx104_bstack, rxquantr107_done299, rx104_pos, 0
  rxquantr107_loop298:
    add $I11, rx104_pos, 2
    gt $I11, rx104_eos, rx104_fail290
    substr $S10, rx104_tgt, rx104_pos, 2
    ne $S10, ucs4:"||", rx104_fail290
    add rx104_pos, 2
    repr_bind_attr_int rx104_cur, rx104_curclass, "$!pos", rx104_pos
    $P11 = rx104_cur."ws"()
    repr_get_attr_int $I11, $P11, rx104_curclass, "$!pos"
    lt $I11, 0, rx104_fail290
    repr_get_attr_int rx104_pos, $P11, rx104_curclass, "$!pos"
  alt109_0302:
    nqp_rxmark rx104_bstack, alt109_1304, rx104_pos, 0
    repr_bind_attr_int rx104_cur, rx104_curclass, "$!pos", rx104_pos
    store_lex unicode:"$\x{a2}", rx104_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_215_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx104_cur, rx104_curclass, "$!pos", rx104_pos
    $P11 = rx104_cur."termconjseq"()
    repr_get_attr_int $I11, $P11, rx104_curclass, "$!pos"
    lt $I11, 0, rx104_fail290
    nqp_rxmark rx104_bstack, rxsubrule110_pass303, -1, 0
  rxsubrule110_pass303:
    rx104_cstack = rx104_cur."!cursor_capture"($P11, "termconjseq")
    repr_get_attr_int rx104_pos, $P11, rx104_curclass, "$!pos"
    goto alt109_end301
  alt109_1304:
    repr_bind_attr_int rx104_cur, rx104_curclass, "$!pos", rx104_pos
    $P11 = rx104_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx104_curclass, "$!pos"
    lt $I11, 0, rx104_fail290
    repr_get_attr_int rx104_pos, $P11, rx104_curclass, "$!pos"
  alt109_end301:
    nqp_rxpeek $I19, rx104_bstack, rxquantr107_done299
    inc $I19
    inc $I19
    set rx104_rep, rx104_bstack[$I19]
    nqp_rxcommit rx104_bstack, rxquantr107_done299
    inc rx104_rep
    nqp_rxmark rx104_bstack, rxquantr107_done299, rx104_pos, rx104_rep
    goto rxquantr107_loop298
  rxquantr107_done299:
    rx104_cur."!cursor_pass"(rx104_pos, "termaltseq", 'backtrack'=>1)
    .return (rx104_cur)
  rx104_restart289:
    repr_get_attr_obj rx104_cstack, rx104_cur, rx104_curclass, "$!cstack"
  rx104_fail290:
    unless rx104_bstack, rx104_done288
    pop $I19, rx104_bstack
    if_null rx104_cstack, rx104_cstack_done293
    unless rx104_cstack, rx104_cstack_done293
    dec $I19
    set $P11, rx104_cstack[$I19]
  rx104_cstack_done293:
    pop rx104_rep, rx104_bstack
    pop rx104_pos, rx104_bstack
    pop $I19, rx104_bstack
    lt rx104_pos, -1, rx104_done288
    lt rx104_pos, 0, rx104_fail290
    eq $I19, 0, rx104_fail290
    nqp_islist $I20, rx104_cstack
    unless $I20, rx104_jump291
    elements $I18, rx104_bstack
    le $I18, 0, rx104_cut292
    dec $I18
    set $I18, rx104_bstack[$I18]
  rx104_cut292:
    assign rx104_cstack, $I18
  rx104_jump291:
    jump $I19
  rx104_done288:
    rx104_cur."!cursor_fail"()
    .return (rx104_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_215_1382484119.90237") :anon :lex :outer("cuid_21_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 136

    box $P5001, 1
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_22_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 139
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_216_1382484119.90237' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx112_start
    .local string rx112_tgt
    .local int rx112_pos
    .local int rx112_off
    .local int rx112_eos
    .local int rx112_rep
    .local pmc rx112_cur
    .local pmc rx112_curclass
    .local pmc rx112_bstack
    .local pmc rx112_cstack
    rx112_start = self."!cursor_start_all"()
    set rx112_cur, rx112_start[0]
    set rx112_tgt, rx112_start[1]
    set rx112_pos, rx112_start[2]
    set rx112_curclass, rx112_start[3]
    set rx112_bstack, rx112_start[4]
    set $I19, rx112_start[5]
    store_lex unicode:"$\x{a2}", rx112_cur
    length rx112_eos, rx112_tgt
    eq $I19, 1, rx112_restart308
    gt rx112_pos, rx112_eos, rx112_fail309
    repr_get_attr_int $I11, self, rx112_curclass, "$!from"
    ne $I11, -1, rxscan113_done315
    goto rxscan113_scan314
  rxscan113_loop313:
    inc rx112_pos
    gt rx112_pos, rx112_eos, rx112_fail309
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!from", rx112_pos
  rxscan113_scan314:
    nqp_rxmark rx112_bstack, rxscan113_loop313, rx112_pos, 0
  rxscan113_done315:
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail309
    nqp_rxmark rx112_bstack, rxsubrule114_pass316, -1, 0
  rxsubrule114_pass316:
    rx112_cstack = rx112_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    nqp_rxmark rx112_bstack, rxquantr115_done318, rx112_pos, 0
  rxquantr115_loop317:
    add $I11, rx112_pos, 2
    gt $I11, rx112_eos, rx112_fail309
    substr $S10, rx112_tgt, rx112_pos, 2
    ne $S10, ucs4:"&&", rx112_fail309
    add rx112_pos, 2
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."ws"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail309
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
  alt117_0321:
    nqp_rxmark rx112_bstack, alt117_1323, rx112_pos, 0
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    store_lex unicode:"$\x{a2}", rx112_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_216_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."termalt"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail309
    nqp_rxmark rx112_bstack, rxsubrule118_pass322, -1, 0
  rxsubrule118_pass322:
    rx112_cstack = rx112_cur."!cursor_capture"($P11, "termalt")
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
    goto alt117_end320
  alt117_1323:
    repr_bind_attr_int rx112_cur, rx112_curclass, "$!pos", rx112_pos
    $P11 = rx112_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx112_curclass, "$!pos"
    lt $I11, 0, rx112_fail309
    repr_get_attr_int rx112_pos, $P11, rx112_curclass, "$!pos"
  alt117_end320:
    nqp_rxpeek $I19, rx112_bstack, rxquantr115_done318
    inc $I19
    inc $I19
    set rx112_rep, rx112_bstack[$I19]
    nqp_rxcommit rx112_bstack, rxquantr115_done318
    inc rx112_rep
    nqp_rxmark rx112_bstack, rxquantr115_done318, rx112_pos, rx112_rep
    goto rxquantr115_loop317
  rxquantr115_done318:
    rx112_cur."!cursor_pass"(rx112_pos, "termconjseq", 'backtrack'=>1)
    .return (rx112_cur)
  rx112_restart308:
    repr_get_attr_obj rx112_cstack, rx112_cur, rx112_curclass, "$!cstack"
  rx112_fail309:
    unless rx112_bstack, rx112_done307
    pop $I19, rx112_bstack
    if_null rx112_cstack, rx112_cstack_done312
    unless rx112_cstack, rx112_cstack_done312
    dec $I19
    set $P11, rx112_cstack[$I19]
  rx112_cstack_done312:
    pop rx112_rep, rx112_bstack
    pop rx112_pos, rx112_bstack
    pop $I19, rx112_bstack
    lt rx112_pos, -1, rx112_done307
    lt rx112_pos, 0, rx112_fail309
    eq $I19, 0, rx112_fail309
    nqp_islist $I20, rx112_cstack
    unless $I20, rx112_jump310
    elements $I18, rx112_bstack
    le $I18, 0, rx112_cut311
    dec $I18
    set $I18, rx112_bstack[$I18]
  rx112_cut311:
    assign rx112_cstack, $I18
  rx112_jump310:
    jump $I19
  rx112_done307:
    rx112_cur."!cursor_fail"()
    .return (rx112_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_216_1382484119.90237") :anon :lex :outer("cuid_22_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 141

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_23_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 144
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_217_1382484119.90237' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx120_start
    .local string rx120_tgt
    .local int rx120_pos
    .local int rx120_off
    .local int rx120_eos
    .local int rx120_rep
    .local pmc rx120_cur
    .local pmc rx120_curclass
    .local pmc rx120_bstack
    .local pmc rx120_cstack
    rx120_start = self."!cursor_start_all"()
    set rx120_cur, rx120_start[0]
    set rx120_tgt, rx120_start[1]
    set rx120_pos, rx120_start[2]
    set rx120_curclass, rx120_start[3]
    set rx120_bstack, rx120_start[4]
    set $I19, rx120_start[5]
    store_lex unicode:"$\x{a2}", rx120_cur
    length rx120_eos, rx120_tgt
    eq $I19, 1, rx120_restart327
    gt rx120_pos, rx120_eos, rx120_fail328
    repr_get_attr_int $I11, self, rx120_curclass, "$!from"
    ne $I11, -1, rxscan121_done334
    goto rxscan121_scan333
  rxscan121_loop332:
    inc rx120_pos
    gt rx120_pos, rx120_eos, rx120_fail328
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!from", rx120_pos
  rxscan121_scan333:
    nqp_rxmark rx120_bstack, rxscan121_loop332, rx120_pos, 0
  rxscan121_done334:
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail328
    nqp_rxmark rx120_bstack, rxsubrule122_pass335, -1, 0
  rxsubrule122_pass335:
    rx120_cstack = rx120_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    nqp_rxmark rx120_bstack, rxquantr123_done337, rx120_pos, 0
  rxquantr123_loop336:
    add $I11, rx120_pos, 1
    gt $I11, rx120_eos, rx120_fail328
    substr $S10, rx120_tgt, rx120_pos, 1
    ne $S10, ucs4:"|", rx120_fail328
    add rx120_pos, 1
    ge rx120_pos, rx120_eos, rx120_fail328
    substr $S11, rx120_tgt, rx120_pos, 1
    index $I11, ucs4:"|", $S11
    ge $I11, 0, rx120_fail328
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."ws"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail328
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
  alt125_0340:
    nqp_rxmark rx120_bstack, alt125_1342, rx120_pos, 0
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    store_lex unicode:"$\x{a2}", rx120_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_217_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."termconj"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail328
    nqp_rxmark rx120_bstack, rxsubrule126_pass341, -1, 0
  rxsubrule126_pass341:
    rx120_cstack = rx120_cur."!cursor_capture"($P11, "termconj")
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
    goto alt125_end339
  alt125_1342:
    repr_bind_attr_int rx120_cur, rx120_curclass, "$!pos", rx120_pos
    $P11 = rx120_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx120_curclass, "$!pos"
    lt $I11, 0, rx120_fail328
    repr_get_attr_int rx120_pos, $P11, rx120_curclass, "$!pos"
  alt125_end339:
    nqp_rxpeek $I19, rx120_bstack, rxquantr123_done337
    inc $I19
    inc $I19
    set rx120_rep, rx120_bstack[$I19]
    nqp_rxcommit rx120_bstack, rxquantr123_done337
    inc rx120_rep
    nqp_rxmark rx120_bstack, rxquantr123_done337, rx120_pos, rx120_rep
    goto rxquantr123_loop336
  rxquantr123_done337:
    rx120_cur."!cursor_pass"(rx120_pos, "termalt", 'backtrack'=>1)
    .return (rx120_cur)
  rx120_restart327:
    repr_get_attr_obj rx120_cstack, rx120_cur, rx120_curclass, "$!cstack"
  rx120_fail328:
    unless rx120_bstack, rx120_done326
    pop $I19, rx120_bstack
    if_null rx120_cstack, rx120_cstack_done331
    unless rx120_cstack, rx120_cstack_done331
    dec $I19
    set $P11, rx120_cstack[$I19]
  rx120_cstack_done331:
    pop rx120_rep, rx120_bstack
    pop rx120_pos, rx120_bstack
    pop $I19, rx120_bstack
    lt rx120_pos, -1, rx120_done326
    lt rx120_pos, 0, rx120_fail328
    eq $I19, 0, rx120_fail328
    nqp_islist $I20, rx120_cstack
    unless $I20, rx120_jump329
    elements $I18, rx120_bstack
    le $I18, 0, rx120_cut330
    dec $I18
    set $I18, rx120_bstack[$I18]
  rx120_cut330:
    assign rx120_cstack, $I18
  rx120_jump329:
    jump $I19
  rx120_done326:
    rx120_cur."!cursor_fail"()
    .return (rx120_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_217_1382484119.90237") :anon :lex :outer("cuid_23_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 146

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_24_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 149
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_218_1382484119.90237' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx128_start
    .local string rx128_tgt
    .local int rx128_pos
    .local int rx128_off
    .local int rx128_eos
    .local int rx128_rep
    .local pmc rx128_cur
    .local pmc rx128_curclass
    .local pmc rx128_bstack
    .local pmc rx128_cstack
    rx128_start = self."!cursor_start_all"()
    set rx128_cur, rx128_start[0]
    set rx128_tgt, rx128_start[1]
    set rx128_pos, rx128_start[2]
    set rx128_curclass, rx128_start[3]
    set rx128_bstack, rx128_start[4]
    set $I19, rx128_start[5]
    store_lex unicode:"$\x{a2}", rx128_cur
    length rx128_eos, rx128_tgt
    eq $I19, 1, rx128_restart346
    gt rx128_pos, rx128_eos, rx128_fail347
    repr_get_attr_int $I11, self, rx128_curclass, "$!from"
    ne $I11, -1, rxscan129_done353
    goto rxscan129_scan352
  rxscan129_loop351:
    inc rx128_pos
    gt rx128_pos, rx128_eos, rx128_fail347
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!from", rx128_pos
  rxscan129_scan352:
    nqp_rxmark rx128_bstack, rxscan129_loop351, rx128_pos, 0
  rxscan129_done353:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."termish"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail347
    nqp_rxmark rx128_bstack, rxsubrule130_pass354, -1, 0
  rxsubrule130_pass354:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    nqp_rxmark rx128_bstack, rxquantr131_done356, rx128_pos, 0
  rxquantr131_loop355:
    add $I11, rx128_pos, 1
    gt $I11, rx128_eos, rx128_fail347
    substr $S10, rx128_tgt, rx128_pos, 1
    ne $S10, ucs4:"&", rx128_fail347
    add rx128_pos, 1
    ge rx128_pos, rx128_eos, rx128_fail347
    substr $S11, rx128_tgt, rx128_pos, 1
    index $I11, ucs4:"&", $S11
    ge $I11, 0, rx128_fail347
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."ws"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail347
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
  alt133_0359:
    nqp_rxmark rx128_bstack, alt133_1361, rx128_pos, 0
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    store_lex unicode:"$\x{a2}", rx128_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_218_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."termish"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail347
    nqp_rxmark rx128_bstack, rxsubrule134_pass360, -1, 0
  rxsubrule134_pass360:
    rx128_cstack = rx128_cur."!cursor_capture"($P11, "termish")
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
    goto alt133_end358
  alt133_1361:
    repr_bind_attr_int rx128_cur, rx128_curclass, "$!pos", rx128_pos
    $P11 = rx128_cur."throw_null_pattern"()
    repr_get_attr_int $I11, $P11, rx128_curclass, "$!pos"
    lt $I11, 0, rx128_fail347
    repr_get_attr_int rx128_pos, $P11, rx128_curclass, "$!pos"
  alt133_end358:
    nqp_rxpeek $I19, rx128_bstack, rxquantr131_done356
    inc $I19
    inc $I19
    set rx128_rep, rx128_bstack[$I19]
    nqp_rxcommit rx128_bstack, rxquantr131_done356
    inc rx128_rep
    nqp_rxmark rx128_bstack, rxquantr131_done356, rx128_pos, rx128_rep
    goto rxquantr131_loop355
  rxquantr131_done356:
    rx128_cur."!cursor_pass"(rx128_pos, "termconj", 'backtrack'=>1)
    .return (rx128_cur)
  rx128_restart346:
    repr_get_attr_obj rx128_cstack, rx128_cur, rx128_curclass, "$!cstack"
  rx128_fail347:
    unless rx128_bstack, rx128_done345
    pop $I19, rx128_bstack
    if_null rx128_cstack, rx128_cstack_done350
    unless rx128_cstack, rx128_cstack_done350
    dec $I19
    set $P11, rx128_cstack[$I19]
  rx128_cstack_done350:
    pop rx128_rep, rx128_bstack
    pop rx128_pos, rx128_bstack
    pop $I19, rx128_bstack
    lt rx128_pos, -1, rx128_done345
    lt rx128_pos, 0, rx128_fail347
    eq $I19, 0, rx128_fail347
    nqp_islist $I20, rx128_cstack
    unless $I20, rx128_jump348
    elements $I18, rx128_bstack
    le $I18, 0, rx128_cut349
    dec $I18
    set $I18, rx128_bstack[$I18]
  rx128_cut349:
    assign rx128_cstack, $I18
  rx128_jump348:
    jump $I19
  rx128_done345:
    rx128_cur."!cursor_fail"()
    .return (rx128_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1382484119.90237") :anon :lex :outer("cuid_24_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 151

    box $P5001, 0
    store_dynamic_lex "$*SEQ", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_25_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 154
    .param pmc _lex_param_0 
    .lex "$*SIGOK", $P101 
    .lex "$*VARDEF", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    set self, _lex_param_0
    .local pmc rx136_start
    .local string rx136_tgt
    .local int rx136_pos
    .local int rx136_off
    .local int rx136_eos
    .local int rx136_rep
    .local pmc rx136_cur
    .local pmc rx136_curclass
    .local pmc rx136_bstack
    .local pmc rx136_cstack
    rx136_start = self."!cursor_start_all"()
    set rx136_cur, rx136_start[0]
    set rx136_tgt, rx136_start[1]
    set rx136_pos, rx136_start[2]
    set rx136_curclass, rx136_start[3]
    set rx136_bstack, rx136_start[4]
    set $I19, rx136_start[5]
    store_lex unicode:"$\x{a2}", rx136_cur
    length rx136_eos, rx136_tgt
    eq $I19, 1, rx136_restart365
    gt rx136_pos, rx136_eos, rx136_fail366
    repr_get_attr_int $I11, self, rx136_curclass, "$!from"
    ne $I11, -1, rxscan137_done372
    goto rxscan137_scan371
  rxscan137_loop370:
    inc rx136_pos
    gt rx136_pos, rx136_eos, rx136_fail366
    repr_bind_attr_int rx136_cur, rx136_curclass, "$!from", rx136_pos
  rxscan137_scan371:
    nqp_rxmark rx136_bstack, rxscan137_loop370, rx136_pos, 0
  rxscan137_done372:
    repr_bind_attr_int rx136_cur, rx136_curclass, "$!pos", rx136_pos
    store_lex unicode:"$\x{a2}", rx136_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx136_cur, rx136_curclass, "$!pos", rx136_pos
    store_lex unicode:"$\x{a2}", rx136_cur
    box $P5004, 0
    set $P102, $P5004
    nqp_rxmark rx136_bstack, rxquantr138_done374, -1, 0
  rxquantr138_loop373:
    repr_bind_attr_int rx136_cur, rx136_curclass, "$!pos", rx136_pos
    $P11 = rx136_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx136_curclass, "$!pos"
    lt $I11, 0, rx136_fail366
    goto rxsubrule139_pass375
  rxsubrule139_back376:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx136_curclass, "$!pos"
    lt $I11, 0, rx136_fail366
  rxsubrule139_pass375:
    rx136_cstack = rx136_cur."!cursor_capture"($P11, "noun")
    set_addr $I11, rxsubrule139_back376
    push rx136_bstack, $I11
    push rx136_bstack, 0
    push rx136_bstack, rx136_pos
    elements $I11, rx136_cstack
    push rx136_bstack, $I11
    repr_get_attr_int rx136_pos, $P11, rx136_curclass, "$!pos"
    nqp_rxpeek $I19, rx136_bstack, rxquantr138_done374
    inc $I19
    inc $I19
    set rx136_rep, rx136_bstack[$I19]
    nqp_rxcommit rx136_bstack, rxquantr138_done374
    inc rx136_rep
    nqp_rxmark rx136_bstack, rxquantr138_done374, rx136_pos, rx136_rep
    goto rxquantr138_loop373
  rxquantr138_done374:
    rx136_cur."!cursor_pass"(rx136_pos, "termish", 'backtrack'=>1)
    .return (rx136_cur)
  rx136_restart365:
    repr_get_attr_obj rx136_cstack, rx136_cur, rx136_curclass, "$!cstack"
  rx136_fail366:
    unless rx136_bstack, rx136_done364
    pop $I19, rx136_bstack
    if_null rx136_cstack, rx136_cstack_done369
    unless rx136_cstack, rx136_cstack_done369
    dec $I19
    set $P11, rx136_cstack[$I19]
  rx136_cstack_done369:
    pop rx136_rep, rx136_bstack
    pop rx136_pos, rx136_bstack
    pop $I19, rx136_bstack
    lt rx136_pos, -1, rx136_done364
    lt rx136_pos, 0, rx136_fail366
    eq $I19, 0, rx136_fail366
    nqp_islist $I20, rx136_cstack
    unless $I20, rx136_jump367
    elements $I18, rx136_bstack
    le $I18, 0, rx136_cut368
    dec $I18
    set $I18, rx136_bstack[$I18]
  rx136_cut368:
    assign rx136_cstack, $I18
  rx136_jump367:
    jump $I19
  rx136_done364:
    rx136_cur."!cursor_fail"()
    .return (rx136_cur) 
.end
.HLL "nqp"
.namespace []
.sub "SIGOK" :subid("cuid_26_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 160
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    .local pmc fb_tmp_6 
    .local pmc fb_tmp_7 
    .local pmc pkg_viv_tmp_4 
    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback379
    nqp_get_sc_object $P5003, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5002, $P5003
    set pkg_viv_tmp_4, $P5002
    set fb_tmp_7, pkg_viv_tmp_4
    repr_defined $I5002, fb_tmp_7
    unless $I5002 goto if141_else380 
    set $P5004, fb_tmp_7["%RX"]
    set $P5006, $P5004
    goto if141_end381
  if141_else380:
    null $P5005
    set $P5006, $P5005
  if141_end381:
    unless_null $P5006, vivi_142382
    new $P5007, 'Hash'
    set pkg_viv_tmp_4["%RX"], $P5007
    set $P5006, $P5007
  vivi_142382:
    unless_null $P5006, vivi_143383
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5006, $P5008
  vivi_143383:
    set $P5001, $P5006
  fallback379:
    set fb_tmp_6, $P5001
    repr_defined $I5001, fb_tmp_6
    unless $I5001 goto if140_else377 
    set $P5009, fb_tmp_6["s"]
    set $P5011, $P5009
    goto if140_end378
  if140_else377:
    null $P5010
    set $P5011, $P5010
  if140_end378:
    unless_null $P5011, vivi_144384
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5011, $P5012
  vivi_144384:
    store_dynamic_lex "$*SIGOK", $P5011
    nqp_decontainerize $P5013, _lex_param_0
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_27_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 162
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_219_1382484119.90237' 
    capture_lex $P5010 
    .const 'Sub' $P5010 = 'cuid_220_1382484119.90237' 
    capture_lex $P5010 
    .const 'Sub' $P5010 = 'cuid_221_1382484119.90237' 
    capture_lex $P5010 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx145_start
    .local string rx145_tgt
    .local int rx145_pos
    .local int rx145_off
    .local int rx145_eos
    .local int rx145_rep
    .local pmc rx145_cur
    .local pmc rx145_curclass
    .local pmc rx145_bstack
    .local pmc rx145_cstack
    rx145_start = self."!cursor_start_all"()
    set rx145_cur, rx145_start[0]
    set rx145_tgt, rx145_start[1]
    set rx145_pos, rx145_start[2]
    set rx145_curclass, rx145_start[3]
    set rx145_bstack, rx145_start[4]
    set $I19, rx145_start[5]
    store_lex unicode:"$\x{a2}", rx145_cur
    length rx145_eos, rx145_tgt
    eq $I19, 1, rx145_restart387
    gt rx145_pos, rx145_eos, rx145_fail388
    repr_get_attr_int $I11, self, rx145_curclass, "$!from"
    ne $I11, -1, rxscan146_done394
    goto rxscan146_scan393
  rxscan146_loop392:
    inc rx145_pos
    gt rx145_pos, rx145_eos, rx145_fail388
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!from", rx145_pos
  rxscan146_scan393:
    nqp_rxmark rx145_bstack, rxscan146_loop392, rx145_pos, 0
  rxscan146_done394:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    ge $I11, 0, rx145_fail388
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."atom"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
    nqp_rxmark rx145_bstack, rxsubrule147_pass395, -1, 0
  rxsubrule147_pass395:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "atom")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
  alt148_0397:
    nqp_rxmark rx145_bstack, alt148_1420, rx145_pos, 0
    nqp_rxmark rx145_bstack, rxquantr149_done399, rx145_pos, 0
  rxquantr149_loop398:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."sigmaybe"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
    goto rxsubrule150_pass400
  rxsubrule150_back401:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
  rxsubrule150_pass400:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "sigmaybe")
    set_addr $I11, rxsubrule150_back401
    push rx145_bstack, $I11
    push rx145_bstack, 0
    push rx145_bstack, rx145_pos
    elements $I11, rx145_cstack
    push rx145_bstack, $I11
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    nqp_rxpeek $I19, rx145_bstack, rxquantr149_done399
    inc $I19
    inc $I19
    set rx145_rep, rx145_bstack[$I19]
    nqp_rxcommit rx145_bstack, rxquantr149_done399
    inc rx145_rep
  rxquantr149_done399:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt151_0403
    nqp_push_label $P11, alt151_1405
    nqp_rxmark rx145_bstack, alt151_end402, -1, 0
    rx145_cur."!alt"(rx145_pos, "alt_nfa__6_1382484120.54811", $P11)
    goto rx145_fail388
  alt151_0403:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    ge $I11, 0, rx145_fail388
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
    nqp_rxmark rx145_bstack, rxsubrule152_pass404, -1, 0
  rxsubrule152_pass404:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    goto alt151_end402
  alt151_1405:
    ge rx145_pos, rx145_eos, rx145_fail388
    substr $S11, rx145_tgt, rx145_pos, 1
    index $I11, ucs4:":", $S11
    lt $I11, 0, rx145_fail388
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
    nqp_rxmark rx145_bstack, rxsubrule153_pass406, -1, 0
  rxsubrule153_pass406:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."alpha"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    ge $I11, 0, rx145_fail388
    goto alt151_end402
  alt151_end402:
    nqp_rxcommit rx145_bstack, alt151_end402
    nqp_rxmark rx145_bstack, rxquantr154_done408, rx145_pos, 0
  rxquantr154_loop407:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    store_lex unicode:"$\x{a2}", rx145_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_219_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    if $P5003, rx145_fail388
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."sigmaybe"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
    nqp_rxmark rx145_bstack, rxsubrule159_pass415, -1, 0
  rxsubrule159_pass415:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "sigfinal")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    nqp_rxpeek $I19, rx145_bstack, rxquantr154_done408
    inc $I19
    inc $I19
    set rx145_rep, rx145_bstack[$I19]
    nqp_rxcommit rx145_bstack, rxquantr154_done408
    inc rx145_rep
  rxquantr154_done408:
    nqp_rxmark rx145_bstack, rxquantr160_done417, rx145_pos, 0
  rxquantr160_loop416:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."ws"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."separator"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
    nqp_rxmark rx145_bstack, rxsubrule162_pass419, -1, 0
  rxsubrule162_pass419:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "separator")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    nqp_rxpeek $I19, rx145_bstack, rxquantr160_done417
    inc $I19
    inc $I19
    set rx145_rep, rx145_bstack[$I19]
    nqp_rxcommit rx145_bstack, rxquantr160_done417
    inc rx145_rep
  rxquantr160_done417:
    goto alt148_end396
  alt148_1420:
    nqp_rxmark rx145_bstack, rxquantr163_done422, rx145_pos, 0
  rxquantr163_loop421:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    store_lex unicode:"$\x{a2}", rx145_cur
    $P5004 = $P101."MATCH"()
    set $P102, $P5004
    .const 'Sub' $P5005 = 'cuid_220_1382484119.90237' 
    capture_lex $P5005
    $P5006 = $P5005()
    if $P5006, rx145_fail388
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    $P11 = rx145_cur."sigmaybe"()
    repr_get_attr_int $I11, $P11, rx145_curclass, "$!pos"
    lt $I11, 0, rx145_fail388
    nqp_rxmark rx145_bstack, rxsubrule167_pass428, -1, 0
  rxsubrule167_pass428:
    rx145_cstack = rx145_cur."!cursor_capture"($P11, "sigfinal")
    repr_get_attr_int rx145_pos, $P11, rx145_curclass, "$!pos"
    nqp_rxpeek $I19, rx145_bstack, rxquantr163_done422
    inc $I19
    inc $I19
    set rx145_rep, rx145_bstack[$I19]
    nqp_rxcommit rx145_bstack, rxquantr163_done422
    inc rx145_rep
  rxquantr163_done422:
  alt148_end396:
    repr_bind_attr_int rx145_cur, rx145_curclass, "$!pos", rx145_pos
    store_lex unicode:"$\x{a2}", rx145_cur
    $P5007 = $P101."MATCH"()
    set $P102, $P5007
    .const 'Sub' $P5008 = 'cuid_221_1382484119.90237' 
    capture_lex $P5008
    $P5009 = $P5008()
    rx145_cur."!cursor_pass"(rx145_pos, "quantified_atom", 'backtrack'=>1)
    .return (rx145_cur)
  rx145_restart387:
    repr_get_attr_obj rx145_cstack, rx145_cur, rx145_curclass, "$!cstack"
  rx145_fail388:
    unless rx145_bstack, rx145_done386
    pop $I19, rx145_bstack
    if_null rx145_cstack, rx145_cstack_done391
    unless rx145_cstack, rx145_cstack_done391
    dec $I19
    set $P11, rx145_cstack[$I19]
  rx145_cstack_done391:
    pop rx145_rep, rx145_bstack
    pop rx145_pos, rx145_bstack
    pop $I19, rx145_bstack
    lt rx145_pos, -1, rx145_done386
    lt rx145_pos, 0, rx145_fail388
    eq $I19, 0, rx145_fail388
    nqp_islist $I20, rx145_cstack
    unless $I20, rx145_jump389
    elements $I18, rx145_bstack
    le $I18, 0, rx145_cut390
    dec $I18
    set $I18, rx145_bstack[$I18]
  rx145_cut390:
    assign rx145_cstack, $I18
  rx145_jump389:
    jump $I19
  rx145_done386:
    rx145_cur."!cursor_fail"()
    .return (rx145_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1382484119.90237") :anon :lex :outer("cuid_27_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 171
    .local pmc fb_tmp_8 
    find_dynamic_lex $P5001, "$*VARDEF"
    unless_null $P5001, fallback409
    nqp_get_sc_object $P5003, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5002, $P5003
    set fb_tmp_8, $P5002
    repr_defined $I5001, fb_tmp_8
    unless $I5001 goto if155_else410 
    set $P5004, fb_tmp_8["$VARDEF"]
    set $P5006, $P5004
    goto if155_end411
  if155_else410:
    null $P5005
    set $P5006, $P5005
  if155_end411:
    unless_null $P5006, vivi_156412
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_156412:
    unless_null $P5006, vivi_157413
    die "Contextual $*VARDEF not found"
    box $P5008, "Contextual $*VARDEF not found"
    set $P5006, $P5008
  vivi_157413:
    set $P5001, $P5006
  fallback409:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1382484119.90237") :anon :lex :outer("cuid_27_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 173
    .local pmc fb_tmp_9 
    find_dynamic_lex $P5001, "$*VARDEF"
    unless_null $P5001, fallback423
    nqp_get_sc_object $P5003, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5002, $P5003
    set fb_tmp_9, $P5002
    repr_defined $I5001, fb_tmp_9
    unless $I5001 goto if164_else424 
    set $P5004, fb_tmp_9["$VARDEF"]
    set $P5006, $P5004
    goto if164_end425
  if164_else424:
    null $P5005
    set $P5006, $P5005
  if164_end425:
    unless_null $P5006, vivi_165426
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_165426:
    unless_null $P5006, vivi_166427
    die "Contextual $*VARDEF not found"
    box $P5008, "Contextual $*VARDEF not found"
    set $P5006, $P5008
  vivi_166427:
    set $P5001, $P5006
  fallback423:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1382484119.90237") :anon :lex :outer("cuid_27_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 175

    box $P5001, 0
    store_dynamic_lex "$*SIGOK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_28_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 178
    .param pmc _lex_param_0 
    .lex "$*VARDEF", $P101 
    .lex "$*SIGOK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    set self, _lex_param_0
    .local pmc rx168_start
    .local string rx168_tgt
    .local int rx168_pos
    .local int rx168_off
    .local int rx168_eos
    .local int rx168_rep
    .local pmc rx168_cur
    .local pmc rx168_curclass
    .local pmc rx168_bstack
    .local pmc rx168_cstack
    rx168_start = self."!cursor_start_all"()
    set rx168_cur, rx168_start[0]
    set rx168_tgt, rx168_start[1]
    set rx168_pos, rx168_start[2]
    set rx168_curclass, rx168_start[3]
    set rx168_bstack, rx168_start[4]
    set $I19, rx168_start[5]
    store_lex unicode:"$\x{a2}", rx168_cur
    length rx168_eos, rx168_tgt
    eq $I19, 1, rx168_restart431
    gt rx168_pos, rx168_eos, rx168_fail432
    repr_get_attr_int $I11, self, rx168_curclass, "$!from"
    ne $I11, -1, rxscan169_done438
    goto rxscan169_scan437
  rxscan169_loop436:
    inc rx168_pos
    gt rx168_pos, rx168_eos, rx168_fail432
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!from", rx168_pos
  rxscan169_scan437:
    nqp_rxmark rx168_bstack, rxscan169_loop436, rx168_pos, 0
  rxscan169_done438:
    nqp_rxmark rx168_bstack, rxcap170_fail440, rx168_pos, 0
    add $I11, rx168_pos, 1
    gt $I11, rx168_eos, rx168_fail432
    substr $S10, rx168_tgt, rx168_pos, 1
    ne $S10, ucs4:"%", rx168_fail432
    add rx168_pos, 1
    nqp_rxmark rx168_bstack, rxquantr171_done442, rx168_pos, 0
  rxquantr171_loop441:
    add $I11, rx168_pos, 1
    gt $I11, rx168_eos, rx168_fail432
    substr $S10, rx168_tgt, rx168_pos, 1
    ne $S10, ucs4:"%", rx168_fail432
    add rx168_pos, 1
    nqp_rxpeek $I19, rx168_bstack, rxquantr171_done442
    inc $I19
    inc $I19
    set rx168_rep, rx168_bstack[$I19]
    nqp_rxcommit rx168_bstack, rxquantr171_done442
    inc rx168_rep
  rxquantr171_done442:
    nqp_rxpeek $I19, rx168_bstack, rxcap170_fail440
    inc $I19
    set $I11, rx168_bstack[$I19]
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx168_pos)
    rx168_cstack = rx168_cur."!cursor_capture"($P11, "septype")
    goto rxcap170_done439
  rxcap170_fail440:
    goto rx168_fail432
  rxcap170_done439:
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur."ws"()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail432
    goto rxsubrule172_pass443
  rxsubrule172_back444:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail432
  rxsubrule172_pass443:
    rx168_cstack = rx168_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule172_back444
    push rx168_bstack, $I11
    push rx168_bstack, 0
    push rx168_bstack, rx168_pos
    elements $I11, rx168_cstack
    push rx168_bstack, $I11
    repr_get_attr_int rx168_pos, $P11, rx168_curclass, "$!pos"
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    store_lex unicode:"$\x{a2}", rx168_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    store_lex unicode:"$\x{a2}", rx168_cur
    box $P5004, 0
    set $P102, $P5004
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail432
    goto rxsubrule173_pass445
  rxsubrule173_back446:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail432
  rxsubrule173_pass445:
    rx168_cstack = rx168_cur."!cursor_capture"($P11, "quantified_atom")
    set_addr $I11, rxsubrule173_back446
    push rx168_bstack, $I11
    push rx168_bstack, 0
    push rx168_bstack, rx168_pos
    elements $I11, rx168_cstack
    push rx168_bstack, $I11
    repr_get_attr_int rx168_pos, $P11, rx168_curclass, "$!pos"
    repr_bind_attr_int rx168_cur, rx168_curclass, "$!pos", rx168_pos
    $P11 = rx168_cur."ws"()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail432
    goto rxsubrule174_pass447
  rxsubrule174_back448:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx168_curclass, "$!pos"
    lt $I11, 0, rx168_fail432
  rxsubrule174_pass447:
    rx168_cstack = rx168_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule174_back448
    push rx168_bstack, $I11
    push rx168_bstack, 0
    push rx168_bstack, rx168_pos
    elements $I11, rx168_cstack
    push rx168_bstack, $I11
    repr_get_attr_int rx168_pos, $P11, rx168_curclass, "$!pos"
    rx168_cur."!cursor_pass"(rx168_pos, "separator", 'backtrack'=>1)
    .return (rx168_cur)
  rx168_restart431:
    repr_get_attr_obj rx168_cstack, rx168_cur, rx168_curclass, "$!cstack"
  rx168_fail432:
    unless rx168_bstack, rx168_done430
    pop $I19, rx168_bstack
    if_null rx168_cstack, rx168_cstack_done435
    unless rx168_cstack, rx168_cstack_done435
    dec $I19
    set $P11, rx168_cstack[$I19]
  rx168_cstack_done435:
    pop rx168_rep, rx168_bstack
    pop rx168_pos, rx168_bstack
    pop $I19, rx168_bstack
    lt rx168_pos, -1, rx168_done430
    lt rx168_pos, 0, rx168_fail432
    eq $I19, 0, rx168_fail432
    nqp_islist $I20, rx168_cstack
    unless $I20, rx168_jump433
    elements $I18, rx168_bstack
    le $I18, 0, rx168_cut434
    dec $I18
    set $I18, rx168_bstack[$I18]
  rx168_cut434:
    assign rx168_cstack, $I18
  rx168_jump433:
    jump $I19
  rx168_done430:
    rx168_cur."!cursor_fail"()
    .return (rx168_cur) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_29_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 185
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_30_1382484119.90237' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx175_start
    .local string rx175_tgt
    .local int rx175_pos
    .local int rx175_off
    .local int rx175_eos
    .local int rx175_rep
    .local pmc rx175_cur
    .local pmc rx175_curclass
    .local pmc rx175_bstack
    .local pmc rx175_cstack
    rx175_start = self."!cursor_start_all"()
    set rx175_cur, rx175_start[0]
    set rx175_tgt, rx175_start[1]
    set rx175_pos, rx175_start[2]
    set rx175_curclass, rx175_start[3]
    set rx175_bstack, rx175_start[4]
    set $I19, rx175_start[5]
    store_lex unicode:"$\x{a2}", rx175_cur
    length rx175_eos, rx175_tgt
    eq $I19, 1, rx175_restart451
    gt rx175_pos, rx175_eos, rx175_fail452
    repr_get_attr_int $I11, self, rx175_curclass, "$!from"
    ne $I11, -1, rxscan176_done458
    goto rxscan176_scan457
  rxscan176_loop456:
    inc rx175_pos
    gt rx175_pos, rx175_eos, rx175_fail452
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!from", rx175_pos
  rxscan176_scan457:
    nqp_rxmark rx175_bstack, rxscan176_loop456, rx175_pos, 0
  rxscan176_done458:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt177_0460
    nqp_push_label $P11, alt177_1476
    nqp_rxmark rx175_bstack, alt177_end459, -1, 0
    rx175_cur."!alt"(rx175_pos, "alt_nfa__7_1382484120.58204", $P11)
    goto rx175_fail452
  alt177_0460:
    ge rx175_pos, rx175_eos, rx175_fail452
    is_cclass $I11, .CCLASS_WORD, rx175_tgt, rx175_pos
    unless $I11, rx175_fail452
    add rx175_pos, 1
    nqp_rxmark rx175_bstack, rxquantr178_done462, rx175_pos, 0
  rxquantr178_loop461:
  rxquantg179_loop463:
    ge rx175_pos, rx175_eos, rx175_fail452
    is_cclass $I11, .CCLASS_WORD, rx175_tgt, rx175_pos
    unless $I11, rx175_fail452
    add rx175_pos, 1
    nqp_rxmark rx175_bstack, rxquantg179_done464, rx175_pos, rx175_rep
    goto rxquantg179_loop463
  rxquantg179_done464:
    .const 'Sub' $P5001 = 'cuid_30_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail452
    nqp_rxpeek $I19, rx175_bstack, rxquantr178_done462
    inc $I19
    inc $I19
    set rx175_rep, rx175_bstack[$I19]
    nqp_rxcommit rx175_bstack, rxquantr178_done462
    inc rx175_rep
  rxquantr178_done462:
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail452
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    goto alt177_end459
  alt177_1476:
    repr_bind_attr_int rx175_cur, rx175_curclass, "$!pos", rx175_pos
    $P11 = rx175_cur."metachar"()
    repr_get_attr_int $I11, $P11, rx175_curclass, "$!pos"
    lt $I11, 0, rx175_fail452
    nqp_rxmark rx175_bstack, rxsubrule183_pass477, -1, 0
  rxsubrule183_pass477:
    rx175_cstack = rx175_cur."!cursor_capture"($P11, "metachar")
    repr_get_attr_int rx175_pos, $P11, rx175_curclass, "$!pos"
    goto alt177_end459
  alt177_end459:
    nqp_rxcommit rx175_bstack, alt177_end459
    rx175_cur."!cursor_pass"(rx175_pos, "atom", 'backtrack'=>1)
    .return (rx175_cur)
  rx175_restart451:
    repr_get_attr_obj rx175_cstack, rx175_cur, rx175_curclass, "$!cstack"
  rx175_fail452:
    unless rx175_bstack, rx175_done450
    pop $I19, rx175_bstack
    if_null rx175_cstack, rx175_cstack_done455
    unless rx175_cstack, rx175_cstack_done455
    dec $I19
    set $P11, rx175_cstack[$I19]
  rx175_cstack_done455:
    pop rx175_rep, rx175_bstack
    pop rx175_pos, rx175_bstack
    pop $I19, rx175_bstack
    lt rx175_pos, -1, rx175_done450
    lt rx175_pos, 0, rx175_fail452
    eq $I19, 0, rx175_fail452
    nqp_islist $I20, rx175_cstack
    unless $I20, rx175_jump453
    elements $I18, rx175_bstack
    le $I18, 0, rx175_cut454
    dec $I18
    set $I18, rx175_bstack[$I18]
  rx175_cut454:
    assign rx175_cstack, $I18
  rx175_jump453:
    jump $I19
  rx175_done450:
    rx175_cur."!cursor_fail"()
    .return (rx175_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_30_1382484119.90237") :anon :lex :outer("cuid_29_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx180_start
    .local string rx180_tgt
    .local int rx180_pos
    .local int rx180_off
    .local int rx180_eos
    .local int rx180_rep
    .local pmc rx180_cur
    .local pmc rx180_curclass
    .local pmc rx180_bstack
    .local pmc rx180_cstack
    rx180_start = self."!cursor_start_all"()
    set rx180_cur, rx180_start[0]
    set rx180_tgt, rx180_start[1]
    set rx180_pos, rx180_start[2]
    set rx180_curclass, rx180_start[3]
    set rx180_bstack, rx180_start[4]
    set $I19, rx180_start[5]
    store_lex unicode:"$\x{a2}", rx180_cur
    length rx180_eos, rx180_tgt
    eq $I19, 1, rx180_restart467
    gt rx180_pos, rx180_eos, rx180_fail468
    repr_get_attr_int $I11, self, rx180_curclass, "$!from"
    ne $I11, -1, rxscan181_done474
    goto rxscan181_scan473
  rxscan181_loop472:
    inc rx180_pos
    gt rx180_pos, rx180_eos, rx180_fail468
    repr_bind_attr_int rx180_cur, rx180_curclass, "$!from", rx180_pos
  rxscan181_scan473:
    nqp_rxmark rx180_bstack, rxscan181_loop472, rx180_pos, 0
  rxscan181_done474:
    ge rx180_pos, rx180_eos, rx180_fail468
    is_cclass $I11, .CCLASS_WORD, rx180_tgt, rx180_pos
    unless $I11, rx180_fail468
    add rx180_pos, 1
    rx180_cur."!cursor_pass"(rx180_pos, 'backtrack'=>1)
    .return (rx180_cur)
  rx180_restart467:
    repr_get_attr_obj rx180_cstack, rx180_cur, rx180_curclass, "$!cstack"
  rx180_fail468:
    unless rx180_bstack, rx180_done466
    pop $I19, rx180_bstack
    if_null rx180_cstack, rx180_cstack_done471
    unless rx180_cstack, rx180_cstack_done471
    dec $I19
    set $P11, rx180_cstack[$I19]
  rx180_cstack_done471:
    pop rx180_rep, rx180_bstack
    pop rx180_pos, rx180_bstack
    pop $I19, rx180_bstack
    lt rx180_pos, -1, rx180_done466
    lt rx180_pos, 0, rx180_fail468
    eq $I19, 0, rx180_fail468
    nqp_islist $I20, rx180_cstack
    unless $I20, rx180_jump469
    elements $I18, rx180_bstack
    le $I18, 0, rx180_cut470
    dec $I18
    set $I18, rx180_bstack[$I18]
  rx180_cut470:
    assign rx180_cstack, $I18
  rx180_jump469:
    jump $I19
  rx180_done466:
    rx180_cur."!cursor_fail"()
    .return (rx180_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigmaybe" :subid("cuid_31_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 193
    .param pmc self 
    $P5001 = self."!protoregex"("sigmaybe")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "sigmaybe:sym<normspace>" :subid("cuid_32_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 195
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_222_1382484119.90237' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx184_start
    .local string rx184_tgt
    .local int rx184_pos
    .local int rx184_off
    .local int rx184_eos
    .local int rx184_rep
    .local pmc rx184_cur
    .local pmc rx184_curclass
    .local pmc rx184_bstack
    .local pmc rx184_cstack
    rx184_start = self."!cursor_start_all"()
    set rx184_cur, rx184_start[0]
    set rx184_tgt, rx184_start[1]
    set rx184_pos, rx184_start[2]
    set rx184_curclass, rx184_start[3]
    set rx184_bstack, rx184_start[4]
    set $I19, rx184_start[5]
    store_lex unicode:"$\x{a2}", rx184_cur
    length rx184_eos, rx184_tgt
    eq $I19, 1, rx184_restart480
    gt rx184_pos, rx184_eos, rx184_fail481
    repr_get_attr_int $I11, self, rx184_curclass, "$!from"
    ne $I11, -1, rxscan185_done487
    goto rxscan185_scan486
  rxscan185_loop485:
    inc rx184_pos
    gt rx184_pos, rx184_eos, rx184_fail481
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!from", rx184_pos
  rxscan185_scan486:
    nqp_rxmark rx184_bstack, rxscan185_loop485, rx184_pos, 0
  rxscan185_done487:
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    store_lex unicode:"$\x{a2}", rx184_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_222_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    if $P5003, rx184_fail481
    repr_bind_attr_int rx184_cur, rx184_curclass, "$!pos", rx184_pos
    $P11 = rx184_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx184_curclass, "$!pos"
    lt $I11, 0, rx184_fail481
    nqp_rxmark rx184_bstack, rxsubrule189_pass493, -1, 0
  rxsubrule189_pass493:
    rx184_cstack = rx184_cur."!cursor_capture"($P11, "normspace")
    repr_get_attr_int rx184_pos, $P11, rx184_curclass, "$!pos"
    rx184_cur."!cursor_pass"(rx184_pos, "sigmaybe:sym<normspace>", 'backtrack'=>1)
    .return (rx184_cur)
  rx184_restart480:
    repr_get_attr_obj rx184_cstack, rx184_cur, rx184_curclass, "$!cstack"
  rx184_fail481:
    unless rx184_bstack, rx184_done479
    pop $I19, rx184_bstack
    if_null rx184_cstack, rx184_cstack_done484
    unless rx184_cstack, rx184_cstack_done484
    dec $I19
    set $P11, rx184_cstack[$I19]
  rx184_cstack_done484:
    pop rx184_rep, rx184_bstack
    pop rx184_pos, rx184_bstack
    pop $I19, rx184_bstack
    lt rx184_pos, -1, rx184_done479
    lt rx184_pos, 0, rx184_fail481
    eq $I19, 0, rx184_fail481
    nqp_islist $I20, rx184_cstack
    unless $I20, rx184_jump482
    elements $I18, rx184_bstack
    le $I18, 0, rx184_cut483
    dec $I18
    set $I18, rx184_bstack[$I18]
  rx184_cut483:
    assign rx184_cstack, $I18
  rx184_jump482:
    jump $I19
  rx184_done479:
    rx184_cur."!cursor_fail"()
    .return (rx184_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1382484119.90237") :anon :lex :outer("cuid_32_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 196
    .local pmc fb_tmp_10 
    find_dynamic_lex $P5001, "$*SIGOK"
    unless_null $P5001, fallback488
    nqp_get_sc_object $P5003, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5002, $P5003
    set fb_tmp_10, $P5002
    repr_defined $I5001, fb_tmp_10
    unless $I5001 goto if186_else489 
    set $P5004, fb_tmp_10["$SIGOK"]
    set $P5006, $P5004
    goto if186_end490
  if186_else489:
    null $P5005
    set $P5006, $P5005
  if186_end490:
    unless_null $P5006, vivi_187491
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_187491:
    unless_null $P5006, vivi_188492
    die "Contextual $*SIGOK not found"
    box $P5008, "Contextual $*SIGOK not found"
    set $P5006, $P5008
  vivi_188492:
    set $P5001, $P5006
  fallback488:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "sigmaybe:sym<sigwhite>" :subid("cuid_33_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 199
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_223_1382484119.90237' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx190_start
    .local string rx190_tgt
    .local int rx190_pos
    .local int rx190_off
    .local int rx190_eos
    .local int rx190_rep
    .local pmc rx190_cur
    .local pmc rx190_curclass
    .local pmc rx190_bstack
    .local pmc rx190_cstack
    rx190_start = self."!cursor_start_all"()
    set rx190_cur, rx190_start[0]
    set rx190_tgt, rx190_start[1]
    set rx190_pos, rx190_start[2]
    set rx190_curclass, rx190_start[3]
    set rx190_bstack, rx190_start[4]
    set $I19, rx190_start[5]
    store_lex unicode:"$\x{a2}", rx190_cur
    length rx190_eos, rx190_tgt
    eq $I19, 1, rx190_restart496
    gt rx190_pos, rx190_eos, rx190_fail497
    repr_get_attr_int $I11, self, rx190_curclass, "$!from"
    ne $I11, -1, rxscan191_done503
    goto rxscan191_scan502
  rxscan191_loop501:
    inc rx190_pos
    gt rx190_pos, rx190_eos, rx190_fail497
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!from", rx190_pos
  rxscan191_scan502:
    nqp_rxmark rx190_bstack, rxscan191_loop501, rx190_pos, 0
  rxscan191_done503:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    store_lex unicode:"$\x{a2}", rx190_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_223_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx190_fail497
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail497
    nqp_rxmark rx190_bstack, rxsubrule195_pass509, -1, 0
  rxsubrule195_pass509:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "normspace")
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    rx190_cur."!cursor_pass"(rx190_pos, "sigmaybe:sym<sigwhite>", 'backtrack'=>1)
    .return (rx190_cur)
  rx190_restart496:
    repr_get_attr_obj rx190_cstack, rx190_cur, rx190_curclass, "$!cstack"
  rx190_fail497:
    unless rx190_bstack, rx190_done495
    pop $I19, rx190_bstack
    if_null rx190_cstack, rx190_cstack_done500
    unless rx190_cstack, rx190_cstack_done500
    dec $I19
    set $P11, rx190_cstack[$I19]
  rx190_cstack_done500:
    pop rx190_rep, rx190_bstack
    pop rx190_pos, rx190_bstack
    pop $I19, rx190_bstack
    lt rx190_pos, -1, rx190_done495
    lt rx190_pos, 0, rx190_fail497
    eq $I19, 0, rx190_fail497
    nqp_islist $I20, rx190_cstack
    unless $I20, rx190_jump498
    elements $I18, rx190_bstack
    le $I18, 0, rx190_cut499
    dec $I18
    set $I18, rx190_bstack[$I18]
  rx190_cut499:
    assign rx190_cstack, $I18
  rx190_jump498:
    jump $I19
  rx190_done495:
    rx190_cur."!cursor_fail"()
    .return (rx190_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1382484119.90237") :anon :lex :outer("cuid_33_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 200
    .local pmc fb_tmp_11 
    find_dynamic_lex $P5001, "$*SIGOK"
    unless_null $P5001, fallback504
    nqp_get_sc_object $P5003, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5002, $P5003
    set fb_tmp_11, $P5002
    repr_defined $I5001, fb_tmp_11
    unless $I5001 goto if192_else505 
    set $P5004, fb_tmp_11["$SIGOK"]
    set $P5006, $P5004
    goto if192_end506
  if192_else505:
    null $P5005
    set $P5006, $P5005
  if192_end506:
    unless_null $P5006, vivi_193507
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_193507:
    unless_null $P5006, vivi_194508
    die "Contextual $*SIGOK not found"
    box $P5008, "Contextual $*SIGOK not found"
    set $P5006, $P5008
  vivi_194508:
    set $P5001, $P5006
  fallback504:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier" :subid("cuid_34_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 203
    .param pmc self 
    $P5001 = self."!protoregex"("quantifier")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_35_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx196_start
    .local string rx196_tgt
    .local int rx196_pos
    .local int rx196_off
    .local int rx196_eos
    .local int rx196_rep
    .local pmc rx196_cur
    .local pmc rx196_curclass
    .local pmc rx196_bstack
    .local pmc rx196_cstack
    rx196_start = self."!cursor_start_all"()
    set rx196_cur, rx196_start[0]
    set rx196_tgt, rx196_start[1]
    set rx196_pos, rx196_start[2]
    set rx196_curclass, rx196_start[3]
    set rx196_bstack, rx196_start[4]
    set $I19, rx196_start[5]
    store_lex unicode:"$\x{a2}", rx196_cur
    length rx196_eos, rx196_tgt
    eq $I19, 1, rx196_restart512
    gt rx196_pos, rx196_eos, rx196_fail513
    repr_get_attr_int $I11, self, rx196_curclass, "$!from"
    ne $I11, -1, rxscan197_done519
    goto rxscan197_scan518
  rxscan197_loop517:
    inc rx196_pos
    gt rx196_pos, rx196_eos, rx196_fail513
    repr_bind_attr_int rx196_cur, rx196_curclass, "$!from", rx196_pos
  rxscan197_scan518:
    nqp_rxmark rx196_bstack, rxscan197_loop517, rx196_pos, 0
  rxscan197_done519:
    nqp_rxmark rx196_bstack, rxcap198_fail521, rx196_pos, 0
    add $I11, rx196_pos, 1
    gt $I11, rx196_eos, rx196_fail513
    substr $S10, rx196_tgt, rx196_pos, 1
    ne $S10, ucs4:"*", rx196_fail513
    add rx196_pos, 1
    nqp_rxpeek $I19, rx196_bstack, rxcap198_fail521
    inc $I19
    set $I11, rx196_bstack[$I19]
    repr_bind_attr_int rx196_cur, rx196_curclass, "$!pos", rx196_pos
    $P11 = rx196_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx196_pos)
    rx196_cstack = rx196_cur."!cursor_capture"($P11, "sym")
    goto rxcap198_done520
  rxcap198_fail521:
    goto rx196_fail513
  rxcap198_done520:
    repr_bind_attr_int rx196_cur, rx196_curclass, "$!pos", rx196_pos
    $P11 = rx196_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx196_curclass, "$!pos"
    lt $I11, 0, rx196_fail513
    nqp_rxmark rx196_bstack, rxsubrule199_pass522, -1, 0
  rxsubrule199_pass522:
    rx196_cstack = rx196_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx196_pos, $P11, rx196_curclass, "$!pos"
    rx196_cur."!cursor_pass"(rx196_pos, "quantifier:sym<*>", 'backtrack'=>1)
    .return (rx196_cur)
  rx196_restart512:
    repr_get_attr_obj rx196_cstack, rx196_cur, rx196_curclass, "$!cstack"
  rx196_fail513:
    unless rx196_bstack, rx196_done511
    pop $I19, rx196_bstack
    if_null rx196_cstack, rx196_cstack_done516
    unless rx196_cstack, rx196_cstack_done516
    dec $I19
    set $P11, rx196_cstack[$I19]
  rx196_cstack_done516:
    pop rx196_rep, rx196_bstack
    pop rx196_pos, rx196_bstack
    pop $I19, rx196_bstack
    lt rx196_pos, -1, rx196_done511
    lt rx196_pos, 0, rx196_fail513
    eq $I19, 0, rx196_fail513
    nqp_islist $I20, rx196_cstack
    unless $I20, rx196_jump514
    elements $I18, rx196_bstack
    le $I18, 0, rx196_cut515
    dec $I18
    set $I18, rx196_bstack[$I18]
  rx196_cut515:
    assign rx196_cstack, $I18
  rx196_jump514:
    jump $I19
  rx196_done511:
    rx196_cur."!cursor_fail"()
    .return (rx196_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_36_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx200_start
    .local string rx200_tgt
    .local int rx200_pos
    .local int rx200_off
    .local int rx200_eos
    .local int rx200_rep
    .local pmc rx200_cur
    .local pmc rx200_curclass
    .local pmc rx200_bstack
    .local pmc rx200_cstack
    rx200_start = self."!cursor_start_all"()
    set rx200_cur, rx200_start[0]
    set rx200_tgt, rx200_start[1]
    set rx200_pos, rx200_start[2]
    set rx200_curclass, rx200_start[3]
    set rx200_bstack, rx200_start[4]
    set $I19, rx200_start[5]
    store_lex unicode:"$\x{a2}", rx200_cur
    length rx200_eos, rx200_tgt
    eq $I19, 1, rx200_restart525
    gt rx200_pos, rx200_eos, rx200_fail526
    repr_get_attr_int $I11, self, rx200_curclass, "$!from"
    ne $I11, -1, rxscan201_done532
    goto rxscan201_scan531
  rxscan201_loop530:
    inc rx200_pos
    gt rx200_pos, rx200_eos, rx200_fail526
    repr_bind_attr_int rx200_cur, rx200_curclass, "$!from", rx200_pos
  rxscan201_scan531:
    nqp_rxmark rx200_bstack, rxscan201_loop530, rx200_pos, 0
  rxscan201_done532:
    nqp_rxmark rx200_bstack, rxcap202_fail534, rx200_pos, 0
    add $I11, rx200_pos, 1
    gt $I11, rx200_eos, rx200_fail526
    substr $S10, rx200_tgt, rx200_pos, 1
    ne $S10, ucs4:"+", rx200_fail526
    add rx200_pos, 1
    nqp_rxpeek $I19, rx200_bstack, rxcap202_fail534
    inc $I19
    set $I11, rx200_bstack[$I19]
    repr_bind_attr_int rx200_cur, rx200_curclass, "$!pos", rx200_pos
    $P11 = rx200_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx200_pos)
    rx200_cstack = rx200_cur."!cursor_capture"($P11, "sym")
    goto rxcap202_done533
  rxcap202_fail534:
    goto rx200_fail526
  rxcap202_done533:
    repr_bind_attr_int rx200_cur, rx200_curclass, "$!pos", rx200_pos
    $P11 = rx200_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx200_curclass, "$!pos"
    lt $I11, 0, rx200_fail526
    nqp_rxmark rx200_bstack, rxsubrule203_pass535, -1, 0
  rxsubrule203_pass535:
    rx200_cstack = rx200_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx200_pos, $P11, rx200_curclass, "$!pos"
    rx200_cur."!cursor_pass"(rx200_pos, "quantifier:sym<+>", 'backtrack'=>1)
    .return (rx200_cur)
  rx200_restart525:
    repr_get_attr_obj rx200_cstack, rx200_cur, rx200_curclass, "$!cstack"
  rx200_fail526:
    unless rx200_bstack, rx200_done524
    pop $I19, rx200_bstack
    if_null rx200_cstack, rx200_cstack_done529
    unless rx200_cstack, rx200_cstack_done529
    dec $I19
    set $P11, rx200_cstack[$I19]
  rx200_cstack_done529:
    pop rx200_rep, rx200_bstack
    pop rx200_pos, rx200_bstack
    pop $I19, rx200_bstack
    lt rx200_pos, -1, rx200_done524
    lt rx200_pos, 0, rx200_fail526
    eq $I19, 0, rx200_fail526
    nqp_islist $I20, rx200_cstack
    unless $I20, rx200_jump527
    elements $I18, rx200_bstack
    le $I18, 0, rx200_cut528
    dec $I18
    set $I18, rx200_bstack[$I18]
  rx200_cut528:
    assign rx200_cstack, $I18
  rx200_jump527:
    jump $I19
  rx200_done524:
    rx200_cur."!cursor_fail"()
    .return (rx200_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_37_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx204_start
    .local string rx204_tgt
    .local int rx204_pos
    .local int rx204_off
    .local int rx204_eos
    .local int rx204_rep
    .local pmc rx204_cur
    .local pmc rx204_curclass
    .local pmc rx204_bstack
    .local pmc rx204_cstack
    rx204_start = self."!cursor_start_all"()
    set rx204_cur, rx204_start[0]
    set rx204_tgt, rx204_start[1]
    set rx204_pos, rx204_start[2]
    set rx204_curclass, rx204_start[3]
    set rx204_bstack, rx204_start[4]
    set $I19, rx204_start[5]
    store_lex unicode:"$\x{a2}", rx204_cur
    length rx204_eos, rx204_tgt
    eq $I19, 1, rx204_restart538
    gt rx204_pos, rx204_eos, rx204_fail539
    repr_get_attr_int $I11, self, rx204_curclass, "$!from"
    ne $I11, -1, rxscan205_done545
    goto rxscan205_scan544
  rxscan205_loop543:
    inc rx204_pos
    gt rx204_pos, rx204_eos, rx204_fail539
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!from", rx204_pos
  rxscan205_scan544:
    nqp_rxmark rx204_bstack, rxscan205_loop543, rx204_pos, 0
  rxscan205_done545:
    nqp_rxmark rx204_bstack, rxcap206_fail547, rx204_pos, 0
    add $I11, rx204_pos, 1
    gt $I11, rx204_eos, rx204_fail539
    substr $S10, rx204_tgt, rx204_pos, 1
    ne $S10, ucs4:"?", rx204_fail539
    add rx204_pos, 1
    nqp_rxpeek $I19, rx204_bstack, rxcap206_fail547
    inc $I19
    set $I11, rx204_bstack[$I19]
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx204_pos)
    rx204_cstack = rx204_cur."!cursor_capture"($P11, "sym")
    goto rxcap206_done546
  rxcap206_fail547:
    goto rx204_fail539
  rxcap206_done546:
    repr_bind_attr_int rx204_cur, rx204_curclass, "$!pos", rx204_pos
    $P11 = rx204_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx204_curclass, "$!pos"
    lt $I11, 0, rx204_fail539
    nqp_rxmark rx204_bstack, rxsubrule207_pass548, -1, 0
  rxsubrule207_pass548:
    rx204_cstack = rx204_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx204_pos, $P11, rx204_curclass, "$!pos"
    rx204_cur."!cursor_pass"(rx204_pos, "quantifier:sym<?>", 'backtrack'=>1)
    .return (rx204_cur)
  rx204_restart538:
    repr_get_attr_obj rx204_cstack, rx204_cur, rx204_curclass, "$!cstack"
  rx204_fail539:
    unless rx204_bstack, rx204_done537
    pop $I19, rx204_bstack
    if_null rx204_cstack, rx204_cstack_done542
    unless rx204_cstack, rx204_cstack_done542
    dec $I19
    set $P11, rx204_cstack[$I19]
  rx204_cstack_done542:
    pop rx204_rep, rx204_bstack
    pop rx204_pos, rx204_bstack
    pop $I19, rx204_bstack
    lt rx204_pos, -1, rx204_done537
    lt rx204_pos, 0, rx204_fail539
    eq $I19, 0, rx204_fail539
    nqp_islist $I20, rx204_cstack
    unless $I20, rx204_jump540
    elements $I18, rx204_bstack
    le $I18, 0, rx204_cut541
    dec $I18
    set $I18, rx204_bstack[$I18]
  rx204_cut541:
    assign rx204_cstack, $I18
  rx204_jump540:
    jump $I19
  rx204_done537:
    rx204_cur."!cursor_fail"()
    .return (rx204_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<{N,M}>" :subid("cuid_38_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 207
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_224_1382484119.90237' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_39_1382484119.90237' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_40_1382484119.90237' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_41_1382484119.90237' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx208_start
    .local string rx208_tgt
    .local int rx208_pos
    .local int rx208_off
    .local int rx208_eos
    .local int rx208_rep
    .local pmc rx208_cur
    .local pmc rx208_curclass
    .local pmc rx208_bstack
    .local pmc rx208_cstack
    rx208_start = self."!cursor_start_all"()
    set rx208_cur, rx208_start[0]
    set rx208_tgt, rx208_start[1]
    set rx208_pos, rx208_start[2]
    set rx208_curclass, rx208_start[3]
    set rx208_bstack, rx208_start[4]
    set $I19, rx208_start[5]
    store_lex unicode:"$\x{a2}", rx208_cur
    length rx208_eos, rx208_tgt
    eq $I19, 1, rx208_restart551
    gt rx208_pos, rx208_eos, rx208_fail552
    repr_get_attr_int $I11, self, rx208_curclass, "$!from"
    ne $I11, -1, rxscan209_done558
    goto rxscan209_scan557
  rxscan209_loop556:
    inc rx208_pos
    gt rx208_pos, rx208_eos, rx208_fail552
    repr_bind_attr_int rx208_cur, rx208_curclass, "$!from", rx208_pos
  rxscan209_scan557:
    nqp_rxmark rx208_bstack, rxscan209_loop556, rx208_pos, 0
  rxscan209_done558:
    repr_bind_attr_int rx208_cur, rx208_curclass, "$!pos", rx208_pos
    store_lex unicode:"$\x{a2}", rx208_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_224_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    add $I11, rx208_pos, 1
    gt $I11, rx208_eos, rx208_fail552
    substr $S10, rx208_tgt, rx208_pos, 1
    ne $S10, ucs4:"{", rx208_fail552
    add rx208_pos, 1
    .const 'Sub' $P5004 = 'cuid_39_1382484119.90237' 
    capture_lex $P5004
    repr_bind_attr_int rx208_cur, rx208_curclass, "$!pos", rx208_pos
    $P11 = rx208_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx208_curclass, "$!pos"
    lt $I11, 0, rx208_fail552
    nqp_rxmark rx208_bstack, rxsubrule213_pass571, -1, 0
  rxsubrule213_pass571:
    rx208_cstack = rx208_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx208_pos, $P11, rx208_curclass, "$!pos"
    .const 'Sub' $P5005 = 'cuid_40_1382484119.90237' 
    capture_lex $P5005
    repr_bind_attr_int rx208_cur, rx208_curclass, "$!pos", rx208_pos
    $P11 = rx208_cur.$P5005()
    repr_get_attr_int $I11, $P11, rx208_curclass, "$!pos"
    lt $I11, 0, rx208_fail552
    nqp_rxmark rx208_bstack, rxsubrule217_pass584, -1, 0
  rxsubrule217_pass584:
    rx208_cstack = rx208_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx208_pos, $P11, rx208_curclass, "$!pos"
    .const 'Sub' $P5006 = 'cuid_41_1382484119.90237' 
    capture_lex $P5006
    repr_bind_attr_int rx208_cur, rx208_curclass, "$!pos", rx208_pos
    $P11 = rx208_cur.$P5006()
    repr_get_attr_int $I11, $P11, rx208_curclass, "$!pos"
    lt $I11, 0, rx208_fail552
    nqp_rxmark rx208_bstack, rxsubrule221_pass597, -1, 0
  rxsubrule221_pass597:
    rx208_cstack = rx208_cur."!cursor_capture"($P11, "2")
    repr_get_attr_int rx208_pos, $P11, rx208_curclass, "$!pos"
    add $I11, rx208_pos, 1
    gt $I11, rx208_eos, rx208_fail552
    substr $S10, rx208_tgt, rx208_pos, 1
    ne $S10, ucs4:"}", rx208_fail552
    add rx208_pos, 1
    repr_bind_attr_int rx208_cur, rx208_curclass, "$!pos", rx208_pos
    $P11 = rx208_cur."obs"("{N,M} as general quantifier", "** N..M (or ** N..*)")
    repr_get_attr_int $I11, $P11, rx208_curclass, "$!pos"
    lt $I11, 0, rx208_fail552
    repr_get_attr_int rx208_pos, $P11, rx208_curclass, "$!pos"
    rx208_cur."!cursor_pass"(rx208_pos, "quantifier:sym<{N,M}>", 'backtrack'=>1)
    .return (rx208_cur)
  rx208_restart551:
    repr_get_attr_obj rx208_cstack, rx208_cur, rx208_curclass, "$!cstack"
  rx208_fail552:
    unless rx208_bstack, rx208_done550
    pop $I19, rx208_bstack
    if_null rx208_cstack, rx208_cstack_done555
    unless rx208_cstack, rx208_cstack_done555
    dec $I19
    set $P11, rx208_cstack[$I19]
  rx208_cstack_done555:
    pop rx208_rep, rx208_bstack
    pop rx208_pos, rx208_bstack
    pop $I19, rx208_bstack
    lt rx208_pos, -1, rx208_done550
    lt rx208_pos, 0, rx208_fail552
    eq $I19, 0, rx208_fail552
    nqp_islist $I20, rx208_cstack
    unless $I20, rx208_jump553
    elements $I18, rx208_bstack
    le $I18, 0, rx208_cut554
    dec $I18
    set $I18, rx208_bstack[$I18]
  rx208_cut554:
    assign rx208_cstack, $I18
  rx208_jump553:
    jump $I19
  rx208_done550:
    rx208_cur."!cursor_fail"()
    .return (rx208_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1382484119.90237") :anon :lex :outer("cuid_38_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 207

    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1382484119.90237") :anon :lex :outer("cuid_38_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx210_start
    .local string rx210_tgt
    .local int rx210_pos
    .local int rx210_off
    .local int rx210_eos
    .local int rx210_rep
    .local pmc rx210_cur
    .local pmc rx210_curclass
    .local pmc rx210_bstack
    .local pmc rx210_cstack
    rx210_start = self."!cursor_start_all"()
    set rx210_cur, rx210_start[0]
    set rx210_tgt, rx210_start[1]
    set rx210_pos, rx210_start[2]
    set rx210_curclass, rx210_start[3]
    set rx210_bstack, rx210_start[4]
    set $I19, rx210_start[5]
    store_lex unicode:"$\x{a2}", rx210_cur
    length rx210_eos, rx210_tgt
    eq $I19, 1, rx210_restart561
    gt rx210_pos, rx210_eos, rx210_fail562
    repr_get_attr_int $I11, self, rx210_curclass, "$!from"
    ne $I11, -1, rxscan211_done568
    goto rxscan211_scan567
  rxscan211_loop566:
    inc rx210_pos
    gt rx210_pos, rx210_eos, rx210_fail562
    repr_bind_attr_int rx210_cur, rx210_curclass, "$!from", rx210_pos
  rxscan211_scan567:
    nqp_rxmark rx210_bstack, rxscan211_loop566, rx210_pos, 0
  rxscan211_done568:
    nqp_rxmark rx210_bstack, rxquantr212_done570, -1, 0
  rxquantr212_loop569:
    ge rx210_pos, rx210_eos, rx210_fail562
    is_cclass $I11, .CCLASS_NUMERIC, rx210_tgt, rx210_pos
    unless $I11, rx210_fail562
    add rx210_pos, 1
    nqp_rxpeek $I19, rx210_bstack, rxquantr212_done570
    inc $I19
    inc $I19
    set rx210_rep, rx210_bstack[$I19]
    nqp_rxcommit rx210_bstack, rxquantr212_done570
    inc rx210_rep
    nqp_rxmark rx210_bstack, rxquantr212_done570, rx210_pos, rx210_rep
    goto rxquantr212_loop569
  rxquantr212_done570:
    rx210_cur."!cursor_pass"(rx210_pos, 'backtrack'=>1)
    .return (rx210_cur)
  rx210_restart561:
    repr_get_attr_obj rx210_cstack, rx210_cur, rx210_curclass, "$!cstack"
  rx210_fail562:
    unless rx210_bstack, rx210_done560
    pop $I19, rx210_bstack
    if_null rx210_cstack, rx210_cstack_done565
    unless rx210_cstack, rx210_cstack_done565
    dec $I19
    set $P11, rx210_cstack[$I19]
  rx210_cstack_done565:
    pop rx210_rep, rx210_bstack
    pop rx210_pos, rx210_bstack
    pop $I19, rx210_bstack
    lt rx210_pos, -1, rx210_done560
    lt rx210_pos, 0, rx210_fail562
    eq $I19, 0, rx210_fail562
    nqp_islist $I20, rx210_cstack
    unless $I20, rx210_jump563
    elements $I18, rx210_bstack
    le $I18, 0, rx210_cut564
    dec $I18
    set $I18, rx210_bstack[$I18]
  rx210_cut564:
    assign rx210_cstack, $I18
  rx210_jump563:
    jump $I19
  rx210_done560:
    rx210_cur."!cursor_fail"()
    .return (rx210_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_40_1382484119.90237") :anon :lex :outer("cuid_38_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx214_start
    .local string rx214_tgt
    .local int rx214_pos
    .local int rx214_off
    .local int rx214_eos
    .local int rx214_rep
    .local pmc rx214_cur
    .local pmc rx214_curclass
    .local pmc rx214_bstack
    .local pmc rx214_cstack
    rx214_start = self."!cursor_start_all"()
    set rx214_cur, rx214_start[0]
    set rx214_tgt, rx214_start[1]
    set rx214_pos, rx214_start[2]
    set rx214_curclass, rx214_start[3]
    set rx214_bstack, rx214_start[4]
    set $I19, rx214_start[5]
    store_lex unicode:"$\x{a2}", rx214_cur
    length rx214_eos, rx214_tgt
    eq $I19, 1, rx214_restart574
    gt rx214_pos, rx214_eos, rx214_fail575
    repr_get_attr_int $I11, self, rx214_curclass, "$!from"
    ne $I11, -1, rxscan215_done581
    goto rxscan215_scan580
  rxscan215_loop579:
    inc rx214_pos
    gt rx214_pos, rx214_eos, rx214_fail575
    repr_bind_attr_int rx214_cur, rx214_curclass, "$!from", rx214_pos
  rxscan215_scan580:
    nqp_rxmark rx214_bstack, rxscan215_loop579, rx214_pos, 0
  rxscan215_done581:
    nqp_rxmark rx214_bstack, rxquantr216_done583, rx214_pos, 0
  rxquantr216_loop582:
    add $I11, rx214_pos, 1
    gt $I11, rx214_eos, rx214_fail575
    substr $S10, rx214_tgt, rx214_pos, 1
    ne $S10, ucs4:",", rx214_fail575
    add rx214_pos, 1
    nqp_rxpeek $I19, rx214_bstack, rxquantr216_done583
    inc $I19
    inc $I19
    set rx214_rep, rx214_bstack[$I19]
    nqp_rxcommit rx214_bstack, rxquantr216_done583
    inc rx214_rep
  rxquantr216_done583:
    rx214_cur."!cursor_pass"(rx214_pos, 'backtrack'=>1)
    .return (rx214_cur)
  rx214_restart574:
    repr_get_attr_obj rx214_cstack, rx214_cur, rx214_curclass, "$!cstack"
  rx214_fail575:
    unless rx214_bstack, rx214_done573
    pop $I19, rx214_bstack
    if_null rx214_cstack, rx214_cstack_done578
    unless rx214_cstack, rx214_cstack_done578
    dec $I19
    set $P11, rx214_cstack[$I19]
  rx214_cstack_done578:
    pop rx214_rep, rx214_bstack
    pop rx214_pos, rx214_bstack
    pop $I19, rx214_bstack
    lt rx214_pos, -1, rx214_done573
    lt rx214_pos, 0, rx214_fail575
    eq $I19, 0, rx214_fail575
    nqp_islist $I20, rx214_cstack
    unless $I20, rx214_jump576
    elements $I18, rx214_bstack
    le $I18, 0, rx214_cut577
    dec $I18
    set $I18, rx214_bstack[$I18]
  rx214_cut577:
    assign rx214_cstack, $I18
  rx214_jump576:
    jump $I19
  rx214_done573:
    rx214_cur."!cursor_fail"()
    .return (rx214_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1382484119.90237") :anon :lex :outer("cuid_38_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx218_start
    .local string rx218_tgt
    .local int rx218_pos
    .local int rx218_off
    .local int rx218_eos
    .local int rx218_rep
    .local pmc rx218_cur
    .local pmc rx218_curclass
    .local pmc rx218_bstack
    .local pmc rx218_cstack
    rx218_start = self."!cursor_start_all"()
    set rx218_cur, rx218_start[0]
    set rx218_tgt, rx218_start[1]
    set rx218_pos, rx218_start[2]
    set rx218_curclass, rx218_start[3]
    set rx218_bstack, rx218_start[4]
    set $I19, rx218_start[5]
    store_lex unicode:"$\x{a2}", rx218_cur
    length rx218_eos, rx218_tgt
    eq $I19, 1, rx218_restart587
    gt rx218_pos, rx218_eos, rx218_fail588
    repr_get_attr_int $I11, self, rx218_curclass, "$!from"
    ne $I11, -1, rxscan219_done594
    goto rxscan219_scan593
  rxscan219_loop592:
    inc rx218_pos
    gt rx218_pos, rx218_eos, rx218_fail588
    repr_bind_attr_int rx218_cur, rx218_curclass, "$!from", rx218_pos
  rxscan219_scan593:
    nqp_rxmark rx218_bstack, rxscan219_loop592, rx218_pos, 0
  rxscan219_done594:
    nqp_rxmark rx218_bstack, rxquantr220_done596, rx218_pos, 0
  rxquantr220_loop595:
    ge rx218_pos, rx218_eos, rx218_fail588
    is_cclass $I11, .CCLASS_NUMERIC, rx218_tgt, rx218_pos
    unless $I11, rx218_fail588
    add rx218_pos, 1
    nqp_rxpeek $I19, rx218_bstack, rxquantr220_done596
    inc $I19
    inc $I19
    set rx218_rep, rx218_bstack[$I19]
    nqp_rxcommit rx218_bstack, rxquantr220_done596
    inc rx218_rep
    nqp_rxmark rx218_bstack, rxquantr220_done596, rx218_pos, rx218_rep
    goto rxquantr220_loop595
  rxquantr220_done596:
    rx218_cur."!cursor_pass"(rx218_pos, 'backtrack'=>1)
    .return (rx218_cur)
  rx218_restart587:
    repr_get_attr_obj rx218_cstack, rx218_cur, rx218_curclass, "$!cstack"
  rx218_fail588:
    unless rx218_bstack, rx218_done586
    pop $I19, rx218_bstack
    if_null rx218_cstack, rx218_cstack_done591
    unless rx218_cstack, rx218_cstack_done591
    dec $I19
    set $P11, rx218_cstack[$I19]
  rx218_cstack_done591:
    pop rx218_rep, rx218_bstack
    pop rx218_pos, rx218_bstack
    pop $I19, rx218_bstack
    lt rx218_pos, -1, rx218_done586
    lt rx218_pos, 0, rx218_fail588
    eq $I19, 0, rx218_fail588
    nqp_islist $I20, rx218_cstack
    unless $I20, rx218_jump589
    elements $I18, rx218_bstack
    le $I18, 0, rx218_cut590
    dec $I18
    set $I18, rx218_bstack[$I18]
  rx218_cut590:
    assign rx218_cstack, $I18
  rx218_jump589:
    jump $I19
  rx218_done586:
    rx218_cur."!cursor_fail"()
    .return (rx218_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_42_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 210
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_225_1382484119.90237' 
    capture_lex $P5010 
    .const 'Sub' $P5010 = 'cuid_226_1382484119.90237' 
    capture_lex $P5010 
    .const 'Sub' $P5010 = 'cuid_227_1382484119.90237' 
    capture_lex $P5010 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx223_start
    .local string rx223_tgt
    .local int rx223_pos
    .local int rx223_off
    .local int rx223_eos
    .local int rx223_rep
    .local pmc rx223_cur
    .local pmc rx223_curclass
    .local pmc rx223_bstack
    .local pmc rx223_cstack
    rx223_start = self."!cursor_start_all"()
    set rx223_cur, rx223_start[0]
    set rx223_tgt, rx223_start[1]
    set rx223_pos, rx223_start[2]
    set rx223_curclass, rx223_start[3]
    set rx223_bstack, rx223_start[4]
    set $I19, rx223_start[5]
    store_lex unicode:"$\x{a2}", rx223_cur
    length rx223_eos, rx223_tgt
    eq $I19, 1, rx223_restart601
    gt rx223_pos, rx223_eos, rx223_fail602
    repr_get_attr_int $I11, self, rx223_curclass, "$!from"
    ne $I11, -1, rxscan224_done608
    goto rxscan224_scan607
  rxscan224_loop606:
    inc rx223_pos
    gt rx223_pos, rx223_eos, rx223_fail602
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!from", rx223_pos
  rxscan224_scan607:
    nqp_rxmark rx223_bstack, rxscan224_loop606, rx223_pos, 0
  rxscan224_done608:
    nqp_rxmark rx223_bstack, rxcap225_fail610, rx223_pos, 0
    add $I11, rx223_pos, 2
    gt $I11, rx223_eos, rx223_fail602
    substr $S10, rx223_tgt, rx223_pos, 2
    ne $S10, ucs4:"**", rx223_fail602
    add rx223_pos, 2
    nqp_rxpeek $I19, rx223_bstack, rxcap225_fail610
    inc $I19
    set $I11, rx223_bstack[$I19]
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx223_pos)
    rx223_cstack = rx223_cur."!cursor_capture"($P11, "sym")
    goto rxcap225_done609
  rxcap225_fail610:
    goto rx223_fail602
  rxcap225_done609:
    nqp_rxmark rx223_bstack, rxquantr226_done612, rx223_pos, 0
  rxquantr226_loop611:
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
    goto rxsubrule227_pass613
  rxsubrule227_back614:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
  rxsubrule227_pass613:
    rx223_cstack = rx223_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule227_back614
    push rx223_bstack, $I11
    push rx223_bstack, 0
    push rx223_bstack, rx223_pos
    elements $I11, rx223_cstack
    push rx223_bstack, $I11
    repr_get_attr_int rx223_pos, $P11, rx223_curclass, "$!pos"
    nqp_rxpeek $I19, rx223_bstack, rxquantr226_done612
    inc $I19
    inc $I19
    set rx223_rep, rx223_bstack[$I19]
    nqp_rxcommit rx223_bstack, rxquantr226_done612
    inc rx223_rep
  rxquantr226_done612:
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."backmod"()
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
    nqp_rxmark rx223_bstack, rxsubrule228_pass615, -1, 0
  rxsubrule228_pass615:
    rx223_cstack = rx223_cur."!cursor_capture"($P11, "backmod")
    repr_get_attr_int rx223_pos, $P11, rx223_curclass, "$!pos"
    nqp_rxmark rx223_bstack, rxquantr229_done617, rx223_pos, 0
  rxquantr229_loop616:
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
    goto rxsubrule230_pass618
  rxsubrule230_back619:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
  rxsubrule230_pass618:
    rx223_cstack = rx223_cur."!cursor_capture"($P11, "normspace")
    set_addr $I11, rxsubrule230_back619
    push rx223_bstack, $I11
    push rx223_bstack, 0
    push rx223_bstack, rx223_pos
    elements $I11, rx223_cstack
    push rx223_bstack, $I11
    repr_get_attr_int rx223_pos, $P11, rx223_curclass, "$!pos"
    nqp_rxpeek $I19, rx223_bstack, rxquantr229_done617
    inc $I19
    inc $I19
    set rx223_rep, rx223_bstack[$I19]
    nqp_rxcommit rx223_bstack, rxquantr229_done617
    inc rx223_rep
  rxquantr229_done617:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt231_0621
    nqp_push_label $P11, alt231_1626
    nqp_push_label $P11, alt231_2650
    nqp_rxmark rx223_bstack, alt231_end620, -1, 0
    rx223_cur."!alt"(rx223_pos, "alt_nfa__9_1382484120.7305", $P11)
    goto rx223_fail602
  alt231_0621:
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."decint"()
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
    repr_get_attr_int rx223_pos, $P11, rx223_curclass, "$!pos"
    nqp_rxmark rx223_bstack, rxquantr233_done624, -1, 0
  rxquantr233_loop623:
    ge rx223_pos, rx223_eos, rx223_fail602
    is_cclass $I11, .CCLASS_WHITESPACE, rx223_tgt, rx223_pos
    unless $I11, rx223_fail602
    add rx223_pos, 1
    nqp_rxpeek $I19, rx223_bstack, rxquantr233_done624
    inc $I19
    inc $I19
    set rx223_rep, rx223_bstack[$I19]
    nqp_rxcommit rx223_bstack, rxquantr233_done624
    inc rx223_rep
    nqp_rxmark rx223_bstack, rxquantr233_done624, rx223_pos, rx223_rep
    goto rxquantr233_loop623
  rxquantr233_done624:
    add $I11, rx223_pos, 2
    gt $I11, rx223_eos, rx223_fail602
    substr $S10, rx223_tgt, rx223_pos, 2
    ne $S10, ucs4:"..", rx223_fail602
    add rx223_pos, 2
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."panic"("Spaces not allowed in bare range")
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
    repr_get_attr_int rx223_pos, $P11, rx223_curclass, "$!pos"
    goto alt231_end620
  alt231_1626:
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."decint"()
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
    nqp_rxmark rx223_bstack, rxsubrule235_pass627, -1, 0
  rxsubrule235_pass627:
    rx223_cstack = rx223_cur."!cursor_capture"($P11, "min")
    repr_get_attr_int rx223_pos, $P11, rx223_curclass, "$!pos"
    nqp_rxmark rx223_bstack, rxquantr236_done629, rx223_pos, 0
  rxquantr236_loop628:
    add $I11, rx223_pos, 2
    gt $I11, rx223_eos, rx223_fail602
    substr $S10, rx223_tgt, rx223_pos, 2
    ne $S10, ucs4:"..", rx223_fail602
    add rx223_pos, 2
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt237_0631
    nqp_push_label $P11, alt237_1639
    nqp_push_label $P11, alt237_2642
    nqp_rxmark rx223_bstack, alt237_end630, -1, 0
    rx223_cur."!alt"(rx223_pos, "alt_nfa__8_1382484120.72998", $P11)
    goto rx223_fail602
  alt237_0631:
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."decint"()
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
    nqp_rxmark rx223_bstack, rxsubrule238_pass632, -1, 0
  rxsubrule238_pass632:
    rx223_cstack = rx223_cur."!cursor_capture"($P11, "max")
    repr_get_attr_int rx223_pos, $P11, rx223_curclass, "$!pos"
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    store_lex unicode:"$\x{a2}", rx223_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_225_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    goto alt237_end630
  alt237_1639:
    nqp_rxmark rx223_bstack, rxcap242_fail641, rx223_pos, 0
    add $I11, rx223_pos, 1
    gt $I11, rx223_eos, rx223_fail602
    substr $S10, rx223_tgt, rx223_pos, 1
    ne $S10, ucs4:"*", rx223_fail602
    add rx223_pos, 1
    nqp_rxpeek $I19, rx223_bstack, rxcap242_fail641
    inc $I19
    set $I11, rx223_bstack[$I19]
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx223_pos)
    rx223_cstack = rx223_cur."!cursor_capture"($P11, "max")
    goto rxcap242_done640
  rxcap242_fail641:
    goto rx223_fail602
  rxcap242_done640:
    goto alt237_end630
  alt237_2642:
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    $P11 = rx223_cur."panic"("Malformed range")
    repr_get_attr_int $I11, $P11, rx223_curclass, "$!pos"
    lt $I11, 0, rx223_fail602
    repr_get_attr_int rx223_pos, $P11, rx223_curclass, "$!pos"
    goto alt237_end630
  alt237_end630:
    nqp_rxcommit rx223_bstack, alt237_end630
    nqp_rxpeek $I19, rx223_bstack, rxquantr236_done629
    inc $I19
    inc $I19
    set rx223_rep, rx223_bstack[$I19]
    nqp_rxcommit rx223_bstack, rxquantr236_done629
    inc rx223_rep
  rxquantr236_done629:
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    store_lex unicode:"$\x{a2}", rx223_cur
    $P5004 = $P101."MATCH"()
    set $P102, $P5004
    .const 'Sub' $P5005 = 'cuid_226_1382484119.90237' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto alt231_end620
  alt231_2650:
    ge rx223_pos, rx223_eos, rx223_fail602
    substr $S11, rx223_tgt, rx223_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx223_fail602
    repr_bind_attr_int rx223_cur, rx223_curclass, "$!pos", rx223_pos
    store_lex unicode:"$\x{a2}", rx223_cur
    $P5007 = $P101."MATCH"()
    set $P102, $P5007
    .const 'Sub' $P5008 = 'cuid_227_1382484119.90237' 
    capture_lex $P5008
    $P5009 = $P5008()
    goto alt231_end620
  alt231_end620:
    nqp_rxcommit rx223_bstack, alt231_end620
    rx223_cur."!cursor_pass"(rx223_pos, "quantifier:sym<**>", 'backtrack'=>1)
    .return (rx223_cur)
  rx223_restart601:
    repr_get_attr_obj rx223_cstack, rx223_cur, rx223_curclass, "$!cstack"
  rx223_fail602:
    unless rx223_bstack, rx223_done600
    pop $I19, rx223_bstack
    if_null rx223_cstack, rx223_cstack_done605
    unless rx223_cstack, rx223_cstack_done605
    dec $I19
    set $P11, rx223_cstack[$I19]
  rx223_cstack_done605:
    pop rx223_rep, rx223_bstack
    pop rx223_pos, rx223_bstack
    pop $I19, rx223_bstack
    lt rx223_pos, -1, rx223_done600
    lt rx223_pos, 0, rx223_fail602
    eq $I19, 0, rx223_fail602
    nqp_islist $I20, rx223_cstack
    unless $I20, rx223_jump603
    elements $I18, rx223_bstack
    le $I18, 0, rx223_cut604
    dec $I18
    set $I18, rx223_bstack[$I18]
  rx223_cut604:
    assign rx223_cstack, $I18
  rx223_jump603:
    jump $I19
  rx223_done600:
    rx223_cur."!cursor_fail"()
    .return (rx223_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_225_1382484119.90237") :anon :lex :outer("cuid_42_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 217
    .local pmc fb_tmp_12 
.annotate 'line', 218
    find_lex $P5001, "$/"
    unless_null $P5001, fallback637
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5001, $P5002
  fallback637:
    set fb_tmp_12, $P5001
    repr_defined $I5002, fb_tmp_12
    unless $I5002 goto if240_else635 
    set $P5003, fb_tmp_12["max"]
    set $P5005, $P5003
    goto if240_end636
  if240_else635:
    null $P5004
    set $P5005, $P5004
  if240_end636:
    unless_null $P5005, vivi_241638
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_241638:
    $P5007 = $P5005."Str"()
    set $N5001, $P5007
    set $N5002, 0
    islt $I5001, $N5001, $N5002
    box $P5012, $I5001
    set $P5011, $P5012
    unless $I5001 goto if239_end634 
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Negative numbers are not allowed as quantifiers")
    set $P5011, $P5010
  if239_end634:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1382484119.90237") :anon :lex :outer("cuid_42_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 224
    .local pmc fb_tmp_13 
    find_lex $P5001, "$/"
    unless_null $P5001, fallback648
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5001, $P5002
  fallback648:
    set fb_tmp_13, $P5001
    repr_defined $I5002, fb_tmp_13
    unless $I5002 goto if245_else646 
    set $P5003, fb_tmp_13["min"]
    set $P5005, $P5003
    goto if245_end647
  if245_else646:
    null $P5004
    set $P5005, $P5004
  if245_end647:
    unless_null $P5005, vivi_246649
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_246649:
    $P5007 = $P5005."Str"()
    set $N5001, $P5007
    set $N5002, 0
    islt $I5001, $N5001, $N5002
    box $P5012, $I5001
    set $P5011, $P5012
    unless $I5001 goto if244_end645 
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Negative numbers are not allowed as quantifiers")
    set $P5011, $P5010
  if244_end645:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1382484119.90237") :anon :lex :outer("cuid_42_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 225

    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    $P5003 = $P5002."panic"("Block case of ** quantifier not yet implemented")
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_43_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 229
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_44_1382484119.90237' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx247_start
    .local string rx247_tgt
    .local int rx247_pos
    .local int rx247_off
    .local int rx247_eos
    .local int rx247_rep
    .local pmc rx247_cur
    .local pmc rx247_curclass
    .local pmc rx247_bstack
    .local pmc rx247_cstack
    rx247_start = self."!cursor_start_all"()
    set rx247_cur, rx247_start[0]
    set rx247_tgt, rx247_start[1]
    set rx247_pos, rx247_start[2]
    set rx247_curclass, rx247_start[3]
    set rx247_bstack, rx247_start[4]
    set $I19, rx247_start[5]
    store_lex unicode:"$\x{a2}", rx247_cur
    length rx247_eos, rx247_tgt
    eq $I19, 1, rx247_restart653
    gt rx247_pos, rx247_eos, rx247_fail654
    repr_get_attr_int $I11, self, rx247_curclass, "$!from"
    ne $I11, -1, rxscan248_done660
    goto rxscan248_scan659
  rxscan248_loop658:
    inc rx247_pos
    gt rx247_pos, rx247_eos, rx247_fail654
    repr_bind_attr_int rx247_cur, rx247_curclass, "$!from", rx247_pos
  rxscan248_scan659:
    nqp_rxmark rx247_bstack, rxscan248_loop658, rx247_pos, 0
  rxscan248_done660:
    nqp_rxmark rx247_bstack, rxquantr249_done662, rx247_pos, 0
  rxquantr249_loop661:
    add $I11, rx247_pos, 1
    gt $I11, rx247_eos, rx247_fail654
    substr $S10, rx247_tgt, rx247_pos, 1
    ne $S10, ucs4:":", rx247_fail654
    add rx247_pos, 1
    nqp_rxpeek $I19, rx247_bstack, rxquantr249_done662
    inc $I19
    inc $I19
    set rx247_rep, rx247_bstack[$I19]
    nqp_rxcommit rx247_bstack, rxquantr249_done662
    inc rx247_rep
  rxquantr249_done662:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt250_0664
    nqp_push_label $P11, alt250_1665
    nqp_push_label $P11, alt250_2666
    nqp_rxmark rx247_bstack, alt250_end663, -1, 0
    rx247_cur."!alt"(rx247_pos, "alt_nfa__10_1382484120.74412", $P11)
    goto rx247_fail654
  alt250_0664:
    add $I11, rx247_pos, 1
    gt $I11, rx247_eos, rx247_fail654
    substr $S10, rx247_tgt, rx247_pos, 1
    ne $S10, ucs4:"?", rx247_fail654
    add rx247_pos, 1
    goto alt250_end663
  alt250_1665:
    add $I11, rx247_pos, 1
    gt $I11, rx247_eos, rx247_fail654
    substr $S10, rx247_tgt, rx247_pos, 1
    ne $S10, ucs4:"!", rx247_fail654
    add rx247_pos, 1
    goto alt250_end663
  alt250_2666:
    .const 'Sub' $P5001 = 'cuid_44_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx247_cur, rx247_curclass, "$!pos", rx247_pos
    $P11 = rx247_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx247_curclass, "$!pos"
    ge $I11, 0, rx247_fail654
    goto alt250_end663
  alt250_end663:
    nqp_rxcommit rx247_bstack, alt250_end663
    rx247_cur."!cursor_pass"(rx247_pos, "backmod", 'backtrack'=>1)
    .return (rx247_cur)
  rx247_restart653:
    repr_get_attr_obj rx247_cstack, rx247_cur, rx247_curclass, "$!cstack"
  rx247_fail654:
    unless rx247_bstack, rx247_done652
    pop $I19, rx247_bstack
    if_null rx247_cstack, rx247_cstack_done657
    unless rx247_cstack, rx247_cstack_done657
    dec $I19
    set $P11, rx247_cstack[$I19]
  rx247_cstack_done657:
    pop rx247_rep, rx247_bstack
    pop rx247_pos, rx247_bstack
    pop $I19, rx247_bstack
    lt rx247_pos, -1, rx247_done652
    lt rx247_pos, 0, rx247_fail654
    eq $I19, 0, rx247_fail654
    nqp_islist $I20, rx247_cstack
    unless $I20, rx247_jump655
    elements $I18, rx247_bstack
    le $I18, 0, rx247_cut656
    dec $I18
    set $I18, rx247_bstack[$I18]
  rx247_cut656:
    assign rx247_cstack, $I18
  rx247_jump655:
    jump $I19
  rx247_done652:
    rx247_cur."!cursor_fail"()
    .return (rx247_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_44_1382484119.90237") :anon :lex :outer("cuid_43_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx251_start
    .local string rx251_tgt
    .local int rx251_pos
    .local int rx251_off
    .local int rx251_eos
    .local int rx251_rep
    .local pmc rx251_cur
    .local pmc rx251_curclass
    .local pmc rx251_bstack
    .local pmc rx251_cstack
    rx251_start = self."!cursor_start_all"()
    set rx251_cur, rx251_start[0]
    set rx251_tgt, rx251_start[1]
    set rx251_pos, rx251_start[2]
    set rx251_curclass, rx251_start[3]
    set rx251_bstack, rx251_start[4]
    set $I19, rx251_start[5]
    store_lex unicode:"$\x{a2}", rx251_cur
    length rx251_eos, rx251_tgt
    eq $I19, 1, rx251_restart669
    gt rx251_pos, rx251_eos, rx251_fail670
    repr_get_attr_int $I11, self, rx251_curclass, "$!from"
    ne $I11, -1, rxscan252_done676
    goto rxscan252_scan675
  rxscan252_loop674:
    inc rx251_pos
    index rx251_pos, rx251_tgt, ucs4:":", rx251_pos
    eq rx251_pos, -1, rx251_fail670
    gt rx251_pos, rx251_eos, rx251_fail670
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!from", rx251_pos
  rxscan252_scan675:
    nqp_rxmark rx251_bstack, rxscan252_loop674, rx251_pos, 0
  rxscan252_done676:
    add $I11, rx251_pos, 1
    gt $I11, rx251_eos, rx251_fail670
    substr $S10, rx251_tgt, rx251_pos, 1
    ne $S10, ucs4:":", rx251_fail670
    add rx251_pos, 1
    rx251_cur."!cursor_pass"(rx251_pos, 'backtrack'=>1)
    .return (rx251_cur)
  rx251_restart669:
    repr_get_attr_obj rx251_cstack, rx251_cur, rx251_curclass, "$!cstack"
  rx251_fail670:
    unless rx251_bstack, rx251_done668
    pop $I19, rx251_bstack
    if_null rx251_cstack, rx251_cstack_done673
    unless rx251_cstack, rx251_cstack_done673
    dec $I19
    set $P11, rx251_cstack[$I19]
  rx251_cstack_done673:
    pop rx251_rep, rx251_bstack
    pop rx251_pos, rx251_bstack
    pop $I19, rx251_bstack
    lt rx251_pos, -1, rx251_done668
    lt rx251_pos, 0, rx251_fail670
    eq $I19, 0, rx251_fail670
    nqp_islist $I20, rx251_cstack
    unless $I20, rx251_jump671
    elements $I18, rx251_bstack
    le $I18, 0, rx251_cut672
    dec $I18
    set $I18, rx251_bstack[$I18]
  rx251_cut672:
    assign rx251_cstack, $I18
  rx251_jump671:
    jump $I19
  rx251_done668:
    rx251_cur."!cursor_fail"()
    .return (rx251_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar" :subid("cuid_45_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 231
    .param pmc self 
    $P5001 = self."!protoregex"("metachar")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_46_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 232
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx253_start
    .local string rx253_tgt
    .local int rx253_pos
    .local int rx253_off
    .local int rx253_eos
    .local int rx253_rep
    .local pmc rx253_cur
    .local pmc rx253_curclass
    .local pmc rx253_bstack
    .local pmc rx253_cstack
    rx253_start = self."!cursor_start_all"()
    set rx253_cur, rx253_start[0]
    set rx253_tgt, rx253_start[1]
    set rx253_pos, rx253_start[2]
    set rx253_curclass, rx253_start[3]
    set rx253_bstack, rx253_start[4]
    set $I19, rx253_start[5]
    store_lex unicode:"$\x{a2}", rx253_cur
    length rx253_eos, rx253_tgt
    eq $I19, 1, rx253_restart679
    gt rx253_pos, rx253_eos, rx253_fail680
    repr_get_attr_int $I11, self, rx253_curclass, "$!from"
    ne $I11, -1, rxscan254_done686
    goto rxscan254_scan685
  rxscan254_loop684:
    inc rx253_pos
    index rx253_pos, rx253_tgt, ucs4:"[", rx253_pos
    eq rx253_pos, -1, rx253_fail680
    gt rx253_pos, rx253_eos, rx253_fail680
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!from", rx253_pos
  rxscan254_scan685:
    nqp_rxmark rx253_bstack, rxscan254_loop684, rx253_pos, 0
  rxscan254_done686:
    add $I11, rx253_pos, 1
    gt $I11, rx253_eos, rx253_fail680
    substr $S10, rx253_tgt, rx253_pos, 1
    ne $S10, ucs4:"[", rx253_fail680
    add rx253_pos, 1
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail680
    nqp_rxmark rx253_bstack, rxsubrule255_pass687, -1, 0
  rxsubrule255_pass687:
    rx253_cstack = rx253_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
  alt256_0689:
    nqp_rxmark rx253_bstack, alt256_1690, rx253_pos, 0
    add $I11, rx253_pos, 1
    gt $I11, rx253_eos, rx253_fail680
    substr $S10, rx253_tgt, rx253_pos, 1
    ne $S10, ucs4:"]", rx253_fail680
    add rx253_pos, 1
    goto alt256_end688
  alt256_1690:
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."FAILGOAL"("']' ")
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail680
    goto rxsubrule257_pass691
  rxsubrule257_back692:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail680
  rxsubrule257_pass691:
    rx253_cstack = rx253_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule257_back692
    push rx253_bstack, $I11
    push rx253_bstack, 0
    push rx253_bstack, rx253_pos
    elements $I11, rx253_cstack
    push rx253_bstack, $I11
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
  alt256_end688:
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail680
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
    rx253_cur."!cursor_pass"(rx253_pos, "metachar:sym<[ ]>", 'backtrack'=>1)
    .return (rx253_cur)
  rx253_restart679:
    repr_get_attr_obj rx253_cstack, rx253_cur, rx253_curclass, "$!cstack"
  rx253_fail680:
    unless rx253_bstack, rx253_done678
    pop $I19, rx253_bstack
    if_null rx253_cstack, rx253_cstack_done683
    unless rx253_cstack, rx253_cstack_done683
    dec $I19
    set $P11, rx253_cstack[$I19]
  rx253_cstack_done683:
    pop rx253_rep, rx253_bstack
    pop rx253_pos, rx253_bstack
    pop $I19, rx253_bstack
    lt rx253_pos, -1, rx253_done678
    lt rx253_pos, 0, rx253_fail680
    eq $I19, 0, rx253_fail680
    nqp_islist $I20, rx253_cstack
    unless $I20, rx253_jump681
    elements $I18, rx253_bstack
    le $I18, 0, rx253_cut682
    dec $I18
    set $I18, rx253_bstack[$I18]
  rx253_cut682:
    assign rx253_cstack, $I18
  rx253_jump681:
    jump $I19
  rx253_done678:
    rx253_cur."!cursor_fail"()
    .return (rx253_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_47_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 233
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx259_start
    .local string rx259_tgt
    .local int rx259_pos
    .local int rx259_off
    .local int rx259_eos
    .local int rx259_rep
    .local pmc rx259_cur
    .local pmc rx259_curclass
    .local pmc rx259_bstack
    .local pmc rx259_cstack
    rx259_start = self."!cursor_start_all"()
    set rx259_cur, rx259_start[0]
    set rx259_tgt, rx259_start[1]
    set rx259_pos, rx259_start[2]
    set rx259_curclass, rx259_start[3]
    set rx259_bstack, rx259_start[4]
    set $I19, rx259_start[5]
    store_lex unicode:"$\x{a2}", rx259_cur
    length rx259_eos, rx259_tgt
    eq $I19, 1, rx259_restart696
    gt rx259_pos, rx259_eos, rx259_fail697
    repr_get_attr_int $I11, self, rx259_curclass, "$!from"
    ne $I11, -1, rxscan260_done703
    goto rxscan260_scan702
  rxscan260_loop701:
    inc rx259_pos
    index rx259_pos, rx259_tgt, ucs4:"(", rx259_pos
    eq rx259_pos, -1, rx259_fail697
    gt rx259_pos, rx259_eos, rx259_fail697
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!from", rx259_pos
  rxscan260_scan702:
    nqp_rxmark rx259_bstack, rxscan260_loop701, rx259_pos, 0
  rxscan260_done703:
    add $I11, rx259_pos, 1
    gt $I11, rx259_eos, rx259_fail697
    substr $S10, rx259_tgt, rx259_pos, 1
    ne $S10, ucs4:"(", rx259_fail697
    add rx259_pos, 1
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail697
    nqp_rxmark rx259_bstack, rxsubrule261_pass704, -1, 0
  rxsubrule261_pass704:
    rx259_cstack = rx259_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt262_0706:
    nqp_rxmark rx259_bstack, alt262_1707, rx259_pos, 0
    add $I11, rx259_pos, 1
    gt $I11, rx259_eos, rx259_fail697
    substr $S10, rx259_tgt, rx259_pos, 1
    ne $S10, ucs4:")", rx259_fail697
    add rx259_pos, 1
    goto alt262_end705
  alt262_1707:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."FAILGOAL"("')' ")
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail697
    goto rxsubrule263_pass708
  rxsubrule263_back709:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail697
  rxsubrule263_pass708:
    rx259_cstack = rx259_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule263_back709
    push rx259_bstack, $I11
    push rx259_bstack, 0
    push rx259_bstack, rx259_pos
    elements $I11, rx259_cstack
    push rx259_bstack, $I11
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt262_end705:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail697
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
    rx259_cur."!cursor_pass"(rx259_pos, "metachar:sym<( )>", 'backtrack'=>1)
    .return (rx259_cur)
  rx259_restart696:
    repr_get_attr_obj rx259_cstack, rx259_cur, rx259_curclass, "$!cstack"
  rx259_fail697:
    unless rx259_bstack, rx259_done695
    pop $I19, rx259_bstack
    if_null rx259_cstack, rx259_cstack_done700
    unless rx259_cstack, rx259_cstack_done700
    dec $I19
    set $P11, rx259_cstack[$I19]
  rx259_cstack_done700:
    pop rx259_rep, rx259_bstack
    pop rx259_pos, rx259_bstack
    pop $I19, rx259_bstack
    lt rx259_pos, -1, rx259_done695
    lt rx259_pos, 0, rx259_fail697
    eq $I19, 0, rx259_fail697
    nqp_islist $I20, rx259_cstack
    unless $I20, rx259_jump698
    elements $I18, rx259_bstack
    le $I18, 0, rx259_cut699
    dec $I18
    set $I18, rx259_bstack[$I18]
  rx259_cut699:
    assign rx259_cstack, $I18
  rx259_jump698:
    jump $I19
  rx259_done695:
    rx259_cur."!cursor_fail"()
    .return (rx259_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_48_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 234
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx265_start
    .local string rx265_tgt
    .local int rx265_pos
    .local int rx265_off
    .local int rx265_eos
    .local int rx265_rep
    .local pmc rx265_cur
    .local pmc rx265_curclass
    .local pmc rx265_bstack
    .local pmc rx265_cstack
    rx265_start = self."!cursor_start_all"()
    set rx265_cur, rx265_start[0]
    set rx265_tgt, rx265_start[1]
    set rx265_pos, rx265_start[2]
    set rx265_curclass, rx265_start[3]
    set rx265_bstack, rx265_start[4]
    set $I19, rx265_start[5]
    store_lex unicode:"$\x{a2}", rx265_cur
    length rx265_eos, rx265_tgt
    eq $I19, 1, rx265_restart713
    gt rx265_pos, rx265_eos, rx265_fail714
    repr_get_attr_int $I11, self, rx265_curclass, "$!from"
    ne $I11, -1, rxscan266_done720
    goto rxscan266_scan719
  rxscan266_loop718:
    inc rx265_pos
    gt rx265_pos, rx265_eos, rx265_fail714
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!from", rx265_pos
  rxscan266_scan719:
    nqp_rxmark rx265_bstack, rxscan266_loop718, rx265_pos, 0
  rxscan266_done720:
    ge rx265_pos, rx265_eos, rx265_fail714
    substr $S11, rx265_tgt, rx265_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx265_fail714
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail714
    nqp_rxmark rx265_bstack, rxsubrule267_pass721, -1, 0
  rxsubrule267_pass721:
    rx265_cstack = rx265_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    repr_bind_attr_int rx265_cur, rx265_curclass, "$!pos", rx265_pos
    $P11 = rx265_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx265_curclass, "$!pos"
    lt $I11, 0, rx265_fail714
    repr_get_attr_int rx265_pos, $P11, rx265_curclass, "$!pos"
    rx265_cur."!cursor_pass"(rx265_pos, "metachar:sym<'>", 'backtrack'=>1)
    .return (rx265_cur)
  rx265_restart713:
    repr_get_attr_obj rx265_cstack, rx265_cur, rx265_curclass, "$!cstack"
  rx265_fail714:
    unless rx265_bstack, rx265_done712
    pop $I19, rx265_bstack
    if_null rx265_cstack, rx265_cstack_done717
    unless rx265_cstack, rx265_cstack_done717
    dec $I19
    set $P11, rx265_cstack[$I19]
  rx265_cstack_done717:
    pop rx265_rep, rx265_bstack
    pop rx265_pos, rx265_bstack
    pop $I19, rx265_bstack
    lt rx265_pos, -1, rx265_done712
    lt rx265_pos, 0, rx265_fail714
    eq $I19, 0, rx265_fail714
    nqp_islist $I20, rx265_cstack
    unless $I20, rx265_jump715
    elements $I18, rx265_bstack
    le $I18, 0, rx265_cut716
    dec $I18
    set $I18, rx265_bstack[$I18]
  rx265_cut716:
    assign rx265_cstack, $I18
  rx265_jump715:
    jump $I19
  rx265_done712:
    rx265_cur."!cursor_fail"()
    .return (rx265_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_49_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx269_start
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    rx269_start = self."!cursor_start_all"()
    set rx269_cur, rx269_start[0]
    set rx269_tgt, rx269_start[1]
    set rx269_pos, rx269_start[2]
    set rx269_curclass, rx269_start[3]
    set rx269_bstack, rx269_start[4]
    set $I19, rx269_start[5]
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart725
    gt rx269_pos, rx269_eos, rx269_fail726
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done732
    goto rxscan270_scan731
  rxscan270_loop730:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail726
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan731:
    nqp_rxmark rx269_bstack, rxscan270_loop730, rx269_pos, 0
  rxscan270_done732:
    ge rx269_pos, rx269_eos, rx269_fail726
    substr $S11, rx269_tgt, rx269_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx269_fail726
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail726
    nqp_rxmark rx269_bstack, rxsubrule271_pass733, -1, 0
  rxsubrule271_pass733:
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail726
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    rx269_cur."!cursor_pass"(rx269_pos, "metachar:sym<\">", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart725:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail726:
    unless rx269_bstack, rx269_done724
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done729
    unless rx269_cstack, rx269_cstack_done729
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done729:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done724
    lt rx269_pos, 0, rx269_fail726
    eq $I19, 0, rx269_fail726
    nqp_islist $I20, rx269_cstack
    unless $I20, rx269_jump727
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut728
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut728:
    assign rx269_cstack, $I18
  rx269_jump727:
    jump $I19
  rx269_done724:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_50_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 236
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx273_start
    .local string rx273_tgt
    .local int rx273_pos
    .local int rx273_off
    .local int rx273_eos
    .local int rx273_rep
    .local pmc rx273_cur
    .local pmc rx273_curclass
    .local pmc rx273_bstack
    .local pmc rx273_cstack
    rx273_start = self."!cursor_start_all"()
    set rx273_cur, rx273_start[0]
    set rx273_tgt, rx273_start[1]
    set rx273_pos, rx273_start[2]
    set rx273_curclass, rx273_start[3]
    set rx273_bstack, rx273_start[4]
    set $I19, rx273_start[5]
    store_lex unicode:"$\x{a2}", rx273_cur
    length rx273_eos, rx273_tgt
    eq $I19, 1, rx273_restart737
    gt rx273_pos, rx273_eos, rx273_fail738
    repr_get_attr_int $I11, self, rx273_curclass, "$!from"
    ne $I11, -1, rxscan274_done744
    goto rxscan274_scan743
  rxscan274_loop742:
    inc rx273_pos
    gt rx273_pos, rx273_eos, rx273_fail738
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!from", rx273_pos
  rxscan274_scan743:
    nqp_rxmark rx273_bstack, rxscan274_loop742, rx273_pos, 0
  rxscan274_done744:
    nqp_rxmark rx273_bstack, rxcap275_fail746, rx273_pos, 0
    add $I11, rx273_pos, 1
    gt $I11, rx273_eos, rx273_fail738
    substr $S10, rx273_tgt, rx273_pos, 1
    ne $S10, ucs4:".", rx273_fail738
    add rx273_pos, 1
    nqp_rxpeek $I19, rx273_bstack, rxcap275_fail746
    inc $I19
    set $I11, rx273_bstack[$I19]
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx273_pos)
    rx273_cstack = rx273_cur."!cursor_capture"($P11, "sym")
    goto rxcap275_done745
  rxcap275_fail746:
    goto rx273_fail738
  rxcap275_done745:
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!pos", rx273_pos
    $P11 = rx273_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx273_curclass, "$!pos"
    lt $I11, 0, rx273_fail738
    repr_get_attr_int rx273_pos, $P11, rx273_curclass, "$!pos"
    rx273_cur."!cursor_pass"(rx273_pos, "metachar:sym<.>", 'backtrack'=>1)
    .return (rx273_cur)
  rx273_restart737:
    repr_get_attr_obj rx273_cstack, rx273_cur, rx273_curclass, "$!cstack"
  rx273_fail738:
    unless rx273_bstack, rx273_done736
    pop $I19, rx273_bstack
    if_null rx273_cstack, rx273_cstack_done741
    unless rx273_cstack, rx273_cstack_done741
    dec $I19
    set $P11, rx273_cstack[$I19]
  rx273_cstack_done741:
    pop rx273_rep, rx273_bstack
    pop rx273_pos, rx273_bstack
    pop $I19, rx273_bstack
    lt rx273_pos, -1, rx273_done736
    lt rx273_pos, 0, rx273_fail738
    eq $I19, 0, rx273_fail738
    nqp_islist $I20, rx273_cstack
    unless $I20, rx273_jump739
    elements $I18, rx273_bstack
    le $I18, 0, rx273_cut740
    dec $I18
    set $I18, rx273_bstack[$I18]
  rx273_cut740:
    assign rx273_cstack, $I18
  rx273_jump739:
    jump $I19
  rx273_done736:
    rx273_cur."!cursor_fail"()
    .return (rx273_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_51_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 237
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx277_start
    .local string rx277_tgt
    .local int rx277_pos
    .local int rx277_off
    .local int rx277_eos
    .local int rx277_rep
    .local pmc rx277_cur
    .local pmc rx277_curclass
    .local pmc rx277_bstack
    .local pmc rx277_cstack
    rx277_start = self."!cursor_start_all"()
    set rx277_cur, rx277_start[0]
    set rx277_tgt, rx277_start[1]
    set rx277_pos, rx277_start[2]
    set rx277_curclass, rx277_start[3]
    set rx277_bstack, rx277_start[4]
    set $I19, rx277_start[5]
    store_lex unicode:"$\x{a2}", rx277_cur
    length rx277_eos, rx277_tgt
    eq $I19, 1, rx277_restart750
    gt rx277_pos, rx277_eos, rx277_fail751
    repr_get_attr_int $I11, self, rx277_curclass, "$!from"
    ne $I11, -1, rxscan278_done757
    goto rxscan278_scan756
  rxscan278_loop755:
    inc rx277_pos
    gt rx277_pos, rx277_eos, rx277_fail751
    repr_bind_attr_int rx277_cur, rx277_curclass, "$!from", rx277_pos
  rxscan278_scan756:
    nqp_rxmark rx277_bstack, rxscan278_loop755, rx277_pos, 0
  rxscan278_done757:
    nqp_rxmark rx277_bstack, rxcap279_fail759, rx277_pos, 0
    add $I11, rx277_pos, 1
    gt $I11, rx277_eos, rx277_fail751
    substr $S10, rx277_tgt, rx277_pos, 1
    ne $S10, ucs4:"^", rx277_fail751
    add rx277_pos, 1
    nqp_rxpeek $I19, rx277_bstack, rxcap279_fail759
    inc $I19
    set $I11, rx277_bstack[$I19]
    repr_bind_attr_int rx277_cur, rx277_curclass, "$!pos", rx277_pos
    $P11 = rx277_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx277_pos)
    rx277_cstack = rx277_cur."!cursor_capture"($P11, "sym")
    goto rxcap279_done758
  rxcap279_fail759:
    goto rx277_fail751
  rxcap279_done758:
    repr_bind_attr_int rx277_cur, rx277_curclass, "$!pos", rx277_pos
    $P11 = rx277_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx277_curclass, "$!pos"
    lt $I11, 0, rx277_fail751
    repr_get_attr_int rx277_pos, $P11, rx277_curclass, "$!pos"
    rx277_cur."!cursor_pass"(rx277_pos, "metachar:sym<^>", 'backtrack'=>1)
    .return (rx277_cur)
  rx277_restart750:
    repr_get_attr_obj rx277_cstack, rx277_cur, rx277_curclass, "$!cstack"
  rx277_fail751:
    unless rx277_bstack, rx277_done749
    pop $I19, rx277_bstack
    if_null rx277_cstack, rx277_cstack_done754
    unless rx277_cstack, rx277_cstack_done754
    dec $I19
    set $P11, rx277_cstack[$I19]
  rx277_cstack_done754:
    pop rx277_rep, rx277_bstack
    pop rx277_pos, rx277_bstack
    pop $I19, rx277_bstack
    lt rx277_pos, -1, rx277_done749
    lt rx277_pos, 0, rx277_fail751
    eq $I19, 0, rx277_fail751
    nqp_islist $I20, rx277_cstack
    unless $I20, rx277_jump752
    elements $I18, rx277_bstack
    le $I18, 0, rx277_cut753
    dec $I18
    set $I18, rx277_bstack[$I18]
  rx277_cut753:
    assign rx277_cstack, $I18
  rx277_jump752:
    jump $I19
  rx277_done749:
    rx277_cur."!cursor_fail"()
    .return (rx277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_52_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx281_start
    .local string rx281_tgt
    .local int rx281_pos
    .local int rx281_off
    .local int rx281_eos
    .local int rx281_rep
    .local pmc rx281_cur
    .local pmc rx281_curclass
    .local pmc rx281_bstack
    .local pmc rx281_cstack
    rx281_start = self."!cursor_start_all"()
    set rx281_cur, rx281_start[0]
    set rx281_tgt, rx281_start[1]
    set rx281_pos, rx281_start[2]
    set rx281_curclass, rx281_start[3]
    set rx281_bstack, rx281_start[4]
    set $I19, rx281_start[5]
    store_lex unicode:"$\x{a2}", rx281_cur
    length rx281_eos, rx281_tgt
    eq $I19, 1, rx281_restart763
    gt rx281_pos, rx281_eos, rx281_fail764
    repr_get_attr_int $I11, self, rx281_curclass, "$!from"
    ne $I11, -1, rxscan282_done770
    goto rxscan282_scan769
  rxscan282_loop768:
    inc rx281_pos
    gt rx281_pos, rx281_eos, rx281_fail764
    repr_bind_attr_int rx281_cur, rx281_curclass, "$!from", rx281_pos
  rxscan282_scan769:
    nqp_rxmark rx281_bstack, rxscan282_loop768, rx281_pos, 0
  rxscan282_done770:
    nqp_rxmark rx281_bstack, rxcap283_fail772, rx281_pos, 0
    add $I11, rx281_pos, 2
    gt $I11, rx281_eos, rx281_fail764
    substr $S10, rx281_tgt, rx281_pos, 2
    ne $S10, ucs4:"^^", rx281_fail764
    add rx281_pos, 2
    nqp_rxpeek $I19, rx281_bstack, rxcap283_fail772
    inc $I19
    set $I11, rx281_bstack[$I19]
    repr_bind_attr_int rx281_cur, rx281_curclass, "$!pos", rx281_pos
    $P11 = rx281_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx281_pos)
    rx281_cstack = rx281_cur."!cursor_capture"($P11, "sym")
    goto rxcap283_done771
  rxcap283_fail772:
    goto rx281_fail764
  rxcap283_done771:
    repr_bind_attr_int rx281_cur, rx281_curclass, "$!pos", rx281_pos
    $P11 = rx281_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx281_curclass, "$!pos"
    lt $I11, 0, rx281_fail764
    repr_get_attr_int rx281_pos, $P11, rx281_curclass, "$!pos"
    rx281_cur."!cursor_pass"(rx281_pos, "metachar:sym<^^>", 'backtrack'=>1)
    .return (rx281_cur)
  rx281_restart763:
    repr_get_attr_obj rx281_cstack, rx281_cur, rx281_curclass, "$!cstack"
  rx281_fail764:
    unless rx281_bstack, rx281_done762
    pop $I19, rx281_bstack
    if_null rx281_cstack, rx281_cstack_done767
    unless rx281_cstack, rx281_cstack_done767
    dec $I19
    set $P11, rx281_cstack[$I19]
  rx281_cstack_done767:
    pop rx281_rep, rx281_bstack
    pop rx281_pos, rx281_bstack
    pop $I19, rx281_bstack
    lt rx281_pos, -1, rx281_done762
    lt rx281_pos, 0, rx281_fail764
    eq $I19, 0, rx281_fail764
    nqp_islist $I20, rx281_cstack
    unless $I20, rx281_jump765
    elements $I18, rx281_bstack
    le $I18, 0, rx281_cut766
    dec $I18
    set $I18, rx281_bstack[$I18]
  rx281_cut766:
    assign rx281_cstack, $I18
  rx281_jump765:
    jump $I19
  rx281_done762:
    rx281_cur."!cursor_fail"()
    .return (rx281_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_53_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 239
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx285_start
    .local string rx285_tgt
    .local int rx285_pos
    .local int rx285_off
    .local int rx285_eos
    .local int rx285_rep
    .local pmc rx285_cur
    .local pmc rx285_curclass
    .local pmc rx285_bstack
    .local pmc rx285_cstack
    rx285_start = self."!cursor_start_all"()
    set rx285_cur, rx285_start[0]
    set rx285_tgt, rx285_start[1]
    set rx285_pos, rx285_start[2]
    set rx285_curclass, rx285_start[3]
    set rx285_bstack, rx285_start[4]
    set $I19, rx285_start[5]
    store_lex unicode:"$\x{a2}", rx285_cur
    length rx285_eos, rx285_tgt
    eq $I19, 1, rx285_restart776
    gt rx285_pos, rx285_eos, rx285_fail777
    repr_get_attr_int $I11, self, rx285_curclass, "$!from"
    ne $I11, -1, rxscan286_done783
    goto rxscan286_scan782
  rxscan286_loop781:
    inc rx285_pos
    gt rx285_pos, rx285_eos, rx285_fail777
    repr_bind_attr_int rx285_cur, rx285_curclass, "$!from", rx285_pos
  rxscan286_scan782:
    nqp_rxmark rx285_bstack, rxscan286_loop781, rx285_pos, 0
  rxscan286_done783:
    nqp_rxmark rx285_bstack, rxcap287_fail785, rx285_pos, 0
    add $I11, rx285_pos, 1
    gt $I11, rx285_eos, rx285_fail777
    substr $S10, rx285_tgt, rx285_pos, 1
    ne $S10, ucs4:"$", rx285_fail777
    add rx285_pos, 1
    nqp_rxpeek $I19, rx285_bstack, rxcap287_fail785
    inc $I19
    set $I11, rx285_bstack[$I19]
    repr_bind_attr_int rx285_cur, rx285_curclass, "$!pos", rx285_pos
    $P11 = rx285_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx285_pos)
    rx285_cstack = rx285_cur."!cursor_capture"($P11, "sym")
    goto rxcap287_done784
  rxcap287_fail785:
    goto rx285_fail777
  rxcap287_done784:
    repr_bind_attr_int rx285_cur, rx285_curclass, "$!pos", rx285_pos
    $P11 = rx285_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx285_curclass, "$!pos"
    lt $I11, 0, rx285_fail777
    repr_get_attr_int rx285_pos, $P11, rx285_curclass, "$!pos"
    rx285_cur."!cursor_pass"(rx285_pos, "metachar:sym<$>", 'backtrack'=>1)
    .return (rx285_cur)
  rx285_restart776:
    repr_get_attr_obj rx285_cstack, rx285_cur, rx285_curclass, "$!cstack"
  rx285_fail777:
    unless rx285_bstack, rx285_done775
    pop $I19, rx285_bstack
    if_null rx285_cstack, rx285_cstack_done780
    unless rx285_cstack, rx285_cstack_done780
    dec $I19
    set $P11, rx285_cstack[$I19]
  rx285_cstack_done780:
    pop rx285_rep, rx285_bstack
    pop rx285_pos, rx285_bstack
    pop $I19, rx285_bstack
    lt rx285_pos, -1, rx285_done775
    lt rx285_pos, 0, rx285_fail777
    eq $I19, 0, rx285_fail777
    nqp_islist $I20, rx285_cstack
    unless $I20, rx285_jump778
    elements $I18, rx285_bstack
    le $I18, 0, rx285_cut779
    dec $I18
    set $I18, rx285_bstack[$I18]
  rx285_cut779:
    assign rx285_cstack, $I18
  rx285_jump778:
    jump $I19
  rx285_done775:
    rx285_cur."!cursor_fail"()
    .return (rx285_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_54_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx289_start
    .local string rx289_tgt
    .local int rx289_pos
    .local int rx289_off
    .local int rx289_eos
    .local int rx289_rep
    .local pmc rx289_cur
    .local pmc rx289_curclass
    .local pmc rx289_bstack
    .local pmc rx289_cstack
    rx289_start = self."!cursor_start_all"()
    set rx289_cur, rx289_start[0]
    set rx289_tgt, rx289_start[1]
    set rx289_pos, rx289_start[2]
    set rx289_curclass, rx289_start[3]
    set rx289_bstack, rx289_start[4]
    set $I19, rx289_start[5]
    store_lex unicode:"$\x{a2}", rx289_cur
    length rx289_eos, rx289_tgt
    eq $I19, 1, rx289_restart789
    gt rx289_pos, rx289_eos, rx289_fail790
    repr_get_attr_int $I11, self, rx289_curclass, "$!from"
    ne $I11, -1, rxscan290_done796
    goto rxscan290_scan795
  rxscan290_loop794:
    inc rx289_pos
    gt rx289_pos, rx289_eos, rx289_fail790
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!from", rx289_pos
  rxscan290_scan795:
    nqp_rxmark rx289_bstack, rxscan290_loop794, rx289_pos, 0
  rxscan290_done796:
    nqp_rxmark rx289_bstack, rxcap291_fail798, rx289_pos, 0
    add $I11, rx289_pos, 2
    gt $I11, rx289_eos, rx289_fail790
    substr $S10, rx289_tgt, rx289_pos, 2
    ne $S10, ucs4:"$$", rx289_fail790
    add rx289_pos, 2
    nqp_rxpeek $I19, rx289_bstack, rxcap291_fail798
    inc $I19
    set $I11, rx289_bstack[$I19]
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx289_pos)
    rx289_cstack = rx289_cur."!cursor_capture"($P11, "sym")
    goto rxcap291_done797
  rxcap291_fail798:
    goto rx289_fail790
  rxcap291_done797:
    repr_bind_attr_int rx289_cur, rx289_curclass, "$!pos", rx289_pos
    $P11 = rx289_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx289_curclass, "$!pos"
    lt $I11, 0, rx289_fail790
    repr_get_attr_int rx289_pos, $P11, rx289_curclass, "$!pos"
    rx289_cur."!cursor_pass"(rx289_pos, "metachar:sym<$$>", 'backtrack'=>1)
    .return (rx289_cur)
  rx289_restart789:
    repr_get_attr_obj rx289_cstack, rx289_cur, rx289_curclass, "$!cstack"
  rx289_fail790:
    unless rx289_bstack, rx289_done788
    pop $I19, rx289_bstack
    if_null rx289_cstack, rx289_cstack_done793
    unless rx289_cstack, rx289_cstack_done793
    dec $I19
    set $P11, rx289_cstack[$I19]
  rx289_cstack_done793:
    pop rx289_rep, rx289_bstack
    pop rx289_pos, rx289_bstack
    pop $I19, rx289_bstack
    lt rx289_pos, -1, rx289_done788
    lt rx289_pos, 0, rx289_fail790
    eq $I19, 0, rx289_fail790
    nqp_islist $I20, rx289_cstack
    unless $I20, rx289_jump791
    elements $I18, rx289_bstack
    le $I18, 0, rx289_cut792
    dec $I18
    set $I18, rx289_bstack[$I18]
  rx289_cut792:
    assign rx289_cstack, $I18
  rx289_jump791:
    jump $I19
  rx289_done788:
    rx289_cur."!cursor_fail"()
    .return (rx289_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:::>" :subid("cuid_55_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 241
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx293_start
    .local string rx293_tgt
    .local int rx293_pos
    .local int rx293_off
    .local int rx293_eos
    .local int rx293_rep
    .local pmc rx293_cur
    .local pmc rx293_curclass
    .local pmc rx293_bstack
    .local pmc rx293_cstack
    rx293_start = self."!cursor_start_all"()
    set rx293_cur, rx293_start[0]
    set rx293_tgt, rx293_start[1]
    set rx293_pos, rx293_start[2]
    set rx293_curclass, rx293_start[3]
    set rx293_bstack, rx293_start[4]
    set $I19, rx293_start[5]
    store_lex unicode:"$\x{a2}", rx293_cur
    length rx293_eos, rx293_tgt
    eq $I19, 1, rx293_restart802
    gt rx293_pos, rx293_eos, rx293_fail803
    repr_get_attr_int $I11, self, rx293_curclass, "$!from"
    ne $I11, -1, rxscan294_done809
    goto rxscan294_scan808
  rxscan294_loop807:
    inc rx293_pos
    gt rx293_pos, rx293_eos, rx293_fail803
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!from", rx293_pos
  rxscan294_scan808:
    nqp_rxmark rx293_bstack, rxscan294_loop807, rx293_pos, 0
  rxscan294_done809:
    nqp_rxmark rx293_bstack, rxcap295_fail811, rx293_pos, 0
    add $I11, rx293_pos, 3
    gt $I11, rx293_eos, rx293_fail803
    substr $S10, rx293_tgt, rx293_pos, 3
    ne $S10, ucs4:":::", rx293_fail803
    add rx293_pos, 3
    nqp_rxpeek $I19, rx293_bstack, rxcap295_fail811
    inc $I19
    set $I11, rx293_bstack[$I19]
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx293_pos)
    rx293_cstack = rx293_cur."!cursor_capture"($P11, "sym")
    goto rxcap295_done810
  rxcap295_fail811:
    goto rx293_fail803
  rxcap295_done810:
    repr_bind_attr_int rx293_cur, rx293_curclass, "$!pos", rx293_pos
    $P11 = rx293_cur."panic"("::: not yet implemented")
    repr_get_attr_int $I11, $P11, rx293_curclass, "$!pos"
    lt $I11, 0, rx293_fail803
    repr_get_attr_int rx293_pos, $P11, rx293_curclass, "$!pos"
    rx293_cur."!cursor_pass"(rx293_pos, "metachar:sym<:::>", 'backtrack'=>1)
    .return (rx293_cur)
  rx293_restart802:
    repr_get_attr_obj rx293_cstack, rx293_cur, rx293_curclass, "$!cstack"
  rx293_fail803:
    unless rx293_bstack, rx293_done801
    pop $I19, rx293_bstack
    if_null rx293_cstack, rx293_cstack_done806
    unless rx293_cstack, rx293_cstack_done806
    dec $I19
    set $P11, rx293_cstack[$I19]
  rx293_cstack_done806:
    pop rx293_rep, rx293_bstack
    pop rx293_pos, rx293_bstack
    pop $I19, rx293_bstack
    lt rx293_pos, -1, rx293_done801
    lt rx293_pos, 0, rx293_fail803
    eq $I19, 0, rx293_fail803
    nqp_islist $I20, rx293_cstack
    unless $I20, rx293_jump804
    elements $I18, rx293_bstack
    le $I18, 0, rx293_cut805
    dec $I18
    set $I18, rx293_bstack[$I18]
  rx293_cut805:
    assign rx293_cstack, $I18
  rx293_jump804:
    jump $I19
  rx293_done801:
    rx293_cur."!cursor_fail"()
    .return (rx293_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<::>" :subid("cuid_56_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx297_start
    .local string rx297_tgt
    .local int rx297_pos
    .local int rx297_off
    .local int rx297_eos
    .local int rx297_rep
    .local pmc rx297_cur
    .local pmc rx297_curclass
    .local pmc rx297_bstack
    .local pmc rx297_cstack
    rx297_start = self."!cursor_start_all"()
    set rx297_cur, rx297_start[0]
    set rx297_tgt, rx297_start[1]
    set rx297_pos, rx297_start[2]
    set rx297_curclass, rx297_start[3]
    set rx297_bstack, rx297_start[4]
    set $I19, rx297_start[5]
    store_lex unicode:"$\x{a2}", rx297_cur
    length rx297_eos, rx297_tgt
    eq $I19, 1, rx297_restart815
    gt rx297_pos, rx297_eos, rx297_fail816
    repr_get_attr_int $I11, self, rx297_curclass, "$!from"
    ne $I11, -1, rxscan298_done822
    goto rxscan298_scan821
  rxscan298_loop820:
    inc rx297_pos
    gt rx297_pos, rx297_eos, rx297_fail816
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!from", rx297_pos
  rxscan298_scan821:
    nqp_rxmark rx297_bstack, rxscan298_loop820, rx297_pos, 0
  rxscan298_done822:
    nqp_rxmark rx297_bstack, rxcap299_fail824, rx297_pos, 0
    add $I11, rx297_pos, 2
    gt $I11, rx297_eos, rx297_fail816
    substr $S10, rx297_tgt, rx297_pos, 2
    ne $S10, ucs4:"::", rx297_fail816
    add rx297_pos, 2
    nqp_rxpeek $I19, rx297_bstack, rxcap299_fail824
    inc $I19
    set $I11, rx297_bstack[$I19]
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!pos", rx297_pos
    $P11 = rx297_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx297_pos)
    rx297_cstack = rx297_cur."!cursor_capture"($P11, "sym")
    goto rxcap299_done823
  rxcap299_fail824:
    goto rx297_fail816
  rxcap299_done823:
    repr_bind_attr_int rx297_cur, rx297_curclass, "$!pos", rx297_pos
    $P11 = rx297_cur."panic"(":: not yet implemented")
    repr_get_attr_int $I11, $P11, rx297_curclass, "$!pos"
    lt $I11, 0, rx297_fail816
    repr_get_attr_int rx297_pos, $P11, rx297_curclass, "$!pos"
    rx297_cur."!cursor_pass"(rx297_pos, "metachar:sym<::>", 'backtrack'=>1)
    .return (rx297_cur)
  rx297_restart815:
    repr_get_attr_obj rx297_cstack, rx297_cur, rx297_curclass, "$!cstack"
  rx297_fail816:
    unless rx297_bstack, rx297_done814
    pop $I19, rx297_bstack
    if_null rx297_cstack, rx297_cstack_done819
    unless rx297_cstack, rx297_cstack_done819
    dec $I19
    set $P11, rx297_cstack[$I19]
  rx297_cstack_done819:
    pop rx297_rep, rx297_bstack
    pop rx297_pos, rx297_bstack
    pop $I19, rx297_bstack
    lt rx297_pos, -1, rx297_done814
    lt rx297_pos, 0, rx297_fail816
    eq $I19, 0, rx297_fail816
    nqp_islist $I20, rx297_cstack
    unless $I20, rx297_jump817
    elements $I18, rx297_bstack
    le $I18, 0, rx297_cut818
    dec $I18
    set $I18, rx297_bstack[$I18]
  rx297_cut818:
    assign rx297_cstack, $I18
  rx297_jump817:
    jump $I19
  rx297_done814:
    rx297_cur."!cursor_fail"()
    .return (rx297_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_57_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx301_start
    .local string rx301_tgt
    .local int rx301_pos
    .local int rx301_off
    .local int rx301_eos
    .local int rx301_rep
    .local pmc rx301_cur
    .local pmc rx301_curclass
    .local pmc rx301_bstack
    .local pmc rx301_cstack
    rx301_start = self."!cursor_start_all"()
    set rx301_cur, rx301_start[0]
    set rx301_tgt, rx301_start[1]
    set rx301_pos, rx301_start[2]
    set rx301_curclass, rx301_start[3]
    set rx301_bstack, rx301_start[4]
    set $I19, rx301_start[5]
    store_lex unicode:"$\x{a2}", rx301_cur
    length rx301_eos, rx301_tgt
    eq $I19, 1, rx301_restart828
    gt rx301_pos, rx301_eos, rx301_fail829
    repr_get_attr_int $I11, self, rx301_curclass, "$!from"
    ne $I11, -1, rxscan302_done835
    goto rxscan302_scan834
  rxscan302_loop833:
    inc rx301_pos
    gt rx301_pos, rx301_eos, rx301_fail829
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!from", rx301_pos
  rxscan302_scan834:
    nqp_rxmark rx301_bstack, rxscan302_loop833, rx301_pos, 0
  rxscan302_done835:
    nqp_rxmark rx301_bstack, rxcap303_fail837, rx301_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt304_0839
    nqp_push_label $P11, alt304_1840
    nqp_rxmark rx301_bstack, alt304_end838, -1, 0
    rx301_cur."!alt"(rx301_pos, "alt_nfa__11_1382484120.8633", $P11)
    goto rx301_fail829
  alt304_0839:
    add $I11, rx301_pos, 2
    gt $I11, rx301_eos, rx301_fail829
    substr $S10, rx301_tgt, rx301_pos, 2
    ne $S10, ucs4:"<<", rx301_fail829
    add rx301_pos, 2
    goto alt304_end838
  alt304_1840:
    add $I11, rx301_pos, 1
    gt $I11, rx301_eos, rx301_fail829
    substr $S10, rx301_tgt, rx301_pos, 1
    ne $S10, ucs4:"\x{ab}", rx301_fail829
    add rx301_pos, 1
    goto alt304_end838
  alt304_end838:
    nqp_rxcommit rx301_bstack, alt304_end838
    nqp_rxpeek $I19, rx301_bstack, rxcap303_fail837
    inc $I19
    set $I11, rx301_bstack[$I19]
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!pos", rx301_pos
    $P11 = rx301_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx301_pos)
    rx301_cstack = rx301_cur."!cursor_capture"($P11, "sym")
    goto rxcap303_done836
  rxcap303_fail837:
    goto rx301_fail829
  rxcap303_done836:
    repr_bind_attr_int rx301_cur, rx301_curclass, "$!pos", rx301_pos
    $P11 = rx301_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx301_curclass, "$!pos"
    lt $I11, 0, rx301_fail829
    repr_get_attr_int rx301_pos, $P11, rx301_curclass, "$!pos"
    rx301_cur."!cursor_pass"(rx301_pos, "metachar:sym<lwb>", 'backtrack'=>1)
    .return (rx301_cur)
  rx301_restart828:
    repr_get_attr_obj rx301_cstack, rx301_cur, rx301_curclass, "$!cstack"
  rx301_fail829:
    unless rx301_bstack, rx301_done827
    pop $I19, rx301_bstack
    if_null rx301_cstack, rx301_cstack_done832
    unless rx301_cstack, rx301_cstack_done832
    dec $I19
    set $P11, rx301_cstack[$I19]
  rx301_cstack_done832:
    pop rx301_rep, rx301_bstack
    pop rx301_pos, rx301_bstack
    pop $I19, rx301_bstack
    lt rx301_pos, -1, rx301_done827
    lt rx301_pos, 0, rx301_fail829
    eq $I19, 0, rx301_fail829
    nqp_islist $I20, rx301_cstack
    unless $I20, rx301_jump830
    elements $I18, rx301_bstack
    le $I18, 0, rx301_cut831
    dec $I18
    set $I18, rx301_bstack[$I18]
  rx301_cut831:
    assign rx301_cstack, $I18
  rx301_jump830:
    jump $I19
  rx301_done827:
    rx301_cur."!cursor_fail"()
    .return (rx301_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_58_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx306_start
    .local string rx306_tgt
    .local int rx306_pos
    .local int rx306_off
    .local int rx306_eos
    .local int rx306_rep
    .local pmc rx306_cur
    .local pmc rx306_curclass
    .local pmc rx306_bstack
    .local pmc rx306_cstack
    rx306_start = self."!cursor_start_all"()
    set rx306_cur, rx306_start[0]
    set rx306_tgt, rx306_start[1]
    set rx306_pos, rx306_start[2]
    set rx306_curclass, rx306_start[3]
    set rx306_bstack, rx306_start[4]
    set $I19, rx306_start[5]
    store_lex unicode:"$\x{a2}", rx306_cur
    length rx306_eos, rx306_tgt
    eq $I19, 1, rx306_restart844
    gt rx306_pos, rx306_eos, rx306_fail845
    repr_get_attr_int $I11, self, rx306_curclass, "$!from"
    ne $I11, -1, rxscan307_done851
    goto rxscan307_scan850
  rxscan307_loop849:
    inc rx306_pos
    gt rx306_pos, rx306_eos, rx306_fail845
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!from", rx306_pos
  rxscan307_scan850:
    nqp_rxmark rx306_bstack, rxscan307_loop849, rx306_pos, 0
  rxscan307_done851:
    nqp_rxmark rx306_bstack, rxcap308_fail853, rx306_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt309_0855
    nqp_push_label $P11, alt309_1856
    nqp_rxmark rx306_bstack, alt309_end854, -1, 0
    rx306_cur."!alt"(rx306_pos, "alt_nfa__12_1382484120.87476", $P11)
    goto rx306_fail845
  alt309_0855:
    add $I11, rx306_pos, 2
    gt $I11, rx306_eos, rx306_fail845
    substr $S10, rx306_tgt, rx306_pos, 2
    ne $S10, ucs4:">>", rx306_fail845
    add rx306_pos, 2
    goto alt309_end854
  alt309_1856:
    add $I11, rx306_pos, 1
    gt $I11, rx306_eos, rx306_fail845
    substr $S10, rx306_tgt, rx306_pos, 1
    ne $S10, ucs4:"\x{bb}", rx306_fail845
    add rx306_pos, 1
    goto alt309_end854
  alt309_end854:
    nqp_rxcommit rx306_bstack, alt309_end854
    nqp_rxpeek $I19, rx306_bstack, rxcap308_fail853
    inc $I19
    set $I11, rx306_bstack[$I19]
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx306_pos)
    rx306_cstack = rx306_cur."!cursor_capture"($P11, "sym")
    goto rxcap308_done852
  rxcap308_fail853:
    goto rx306_fail845
  rxcap308_done852:
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail845
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    rx306_cur."!cursor_pass"(rx306_pos, "metachar:sym<rwb>", 'backtrack'=>1)
    .return (rx306_cur)
  rx306_restart844:
    repr_get_attr_obj rx306_cstack, rx306_cur, rx306_curclass, "$!cstack"
  rx306_fail845:
    unless rx306_bstack, rx306_done843
    pop $I19, rx306_bstack
    if_null rx306_cstack, rx306_cstack_done848
    unless rx306_cstack, rx306_cstack_done848
    dec $I19
    set $P11, rx306_cstack[$I19]
  rx306_cstack_done848:
    pop rx306_rep, rx306_bstack
    pop rx306_pos, rx306_bstack
    pop $I19, rx306_bstack
    lt rx306_pos, -1, rx306_done843
    lt rx306_pos, 0, rx306_fail845
    eq $I19, 0, rx306_fail845
    nqp_islist $I20, rx306_cstack
    unless $I20, rx306_jump846
    elements $I18, rx306_bstack
    le $I18, 0, rx306_cut847
    dec $I18
    set $I18, rx306_bstack[$I18]
  rx306_cut847:
    assign rx306_cstack, $I18
  rx306_jump846:
    jump $I19
  rx306_done843:
    rx306_cur."!cursor_fail"()
    .return (rx306_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_59_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx311_start
    .local string rx311_tgt
    .local int rx311_pos
    .local int rx311_off
    .local int rx311_eos
    .local int rx311_rep
    .local pmc rx311_cur
    .local pmc rx311_curclass
    .local pmc rx311_bstack
    .local pmc rx311_cstack
    rx311_start = self."!cursor_start_all"()
    set rx311_cur, rx311_start[0]
    set rx311_tgt, rx311_start[1]
    set rx311_pos, rx311_start[2]
    set rx311_curclass, rx311_start[3]
    set rx311_bstack, rx311_start[4]
    set $I19, rx311_start[5]
    store_lex unicode:"$\x{a2}", rx311_cur
    length rx311_eos, rx311_tgt
    eq $I19, 1, rx311_restart860
    gt rx311_pos, rx311_eos, rx311_fail861
    repr_get_attr_int $I11, self, rx311_curclass, "$!from"
    ne $I11, -1, rxscan312_done867
    goto rxscan312_scan866
  rxscan312_loop865:
    inc rx311_pos
    index rx311_pos, rx311_tgt, ucs4:"<(", rx311_pos
    eq rx311_pos, -1, rx311_fail861
    gt rx311_pos, rx311_eos, rx311_fail861
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!from", rx311_pos
  rxscan312_scan866:
    nqp_rxmark rx311_bstack, rxscan312_loop865, rx311_pos, 0
  rxscan312_done867:
    add $I11, rx311_pos, 2
    gt $I11, rx311_eos, rx311_fail861
    substr $S10, rx311_tgt, rx311_pos, 2
    ne $S10, ucs4:"<(", rx311_fail861
    add rx311_pos, 2
    repr_bind_attr_int rx311_cur, rx311_curclass, "$!pos", rx311_pos
    $P11 = rx311_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx311_curclass, "$!pos"
    lt $I11, 0, rx311_fail861
    repr_get_attr_int rx311_pos, $P11, rx311_curclass, "$!pos"
    rx311_cur."!cursor_pass"(rx311_pos, "metachar:sym<from>", 'backtrack'=>1)
    .return (rx311_cur)
  rx311_restart860:
    repr_get_attr_obj rx311_cstack, rx311_cur, rx311_curclass, "$!cstack"
  rx311_fail861:
    unless rx311_bstack, rx311_done859
    pop $I19, rx311_bstack
    if_null rx311_cstack, rx311_cstack_done864
    unless rx311_cstack, rx311_cstack_done864
    dec $I19
    set $P11, rx311_cstack[$I19]
  rx311_cstack_done864:
    pop rx311_rep, rx311_bstack
    pop rx311_pos, rx311_bstack
    pop $I19, rx311_bstack
    lt rx311_pos, -1, rx311_done859
    lt rx311_pos, 0, rx311_fail861
    eq $I19, 0, rx311_fail861
    nqp_islist $I20, rx311_cstack
    unless $I20, rx311_jump862
    elements $I18, rx311_bstack
    le $I18, 0, rx311_cut863
    dec $I18
    set $I18, rx311_bstack[$I18]
  rx311_cut863:
    assign rx311_cstack, $I18
  rx311_jump862:
    jump $I19
  rx311_done859:
    rx311_cur."!cursor_fail"()
    .return (rx311_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_60_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx314_start
    .local string rx314_tgt
    .local int rx314_pos
    .local int rx314_off
    .local int rx314_eos
    .local int rx314_rep
    .local pmc rx314_cur
    .local pmc rx314_curclass
    .local pmc rx314_bstack
    .local pmc rx314_cstack
    rx314_start = self."!cursor_start_all"()
    set rx314_cur, rx314_start[0]
    set rx314_tgt, rx314_start[1]
    set rx314_pos, rx314_start[2]
    set rx314_curclass, rx314_start[3]
    set rx314_bstack, rx314_start[4]
    set $I19, rx314_start[5]
    store_lex unicode:"$\x{a2}", rx314_cur
    length rx314_eos, rx314_tgt
    eq $I19, 1, rx314_restart871
    gt rx314_pos, rx314_eos, rx314_fail872
    repr_get_attr_int $I11, self, rx314_curclass, "$!from"
    ne $I11, -1, rxscan315_done878
    goto rxscan315_scan877
  rxscan315_loop876:
    inc rx314_pos
    index rx314_pos, rx314_tgt, ucs4:")>", rx314_pos
    eq rx314_pos, -1, rx314_fail872
    gt rx314_pos, rx314_eos, rx314_fail872
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!from", rx314_pos
  rxscan315_scan877:
    nqp_rxmark rx314_bstack, rxscan315_loop876, rx314_pos, 0
  rxscan315_done878:
    add $I11, rx314_pos, 2
    gt $I11, rx314_eos, rx314_fail872
    substr $S10, rx314_tgt, rx314_pos, 2
    ne $S10, ucs4:")>", rx314_fail872
    add rx314_pos, 2
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!pos", rx314_pos
    $P11 = rx314_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx314_curclass, "$!pos"
    lt $I11, 0, rx314_fail872
    repr_get_attr_int rx314_pos, $P11, rx314_curclass, "$!pos"
    rx314_cur."!cursor_pass"(rx314_pos, "metachar:sym<to>", 'backtrack'=>1)
    .return (rx314_cur)
  rx314_restart871:
    repr_get_attr_obj rx314_cstack, rx314_cur, rx314_curclass, "$!cstack"
  rx314_fail872:
    unless rx314_bstack, rx314_done870
    pop $I19, rx314_bstack
    if_null rx314_cstack, rx314_cstack_done875
    unless rx314_cstack, rx314_cstack_done875
    dec $I19
    set $P11, rx314_cstack[$I19]
  rx314_cstack_done875:
    pop rx314_rep, rx314_bstack
    pop rx314_pos, rx314_bstack
    pop $I19, rx314_bstack
    lt rx314_pos, -1, rx314_done870
    lt rx314_pos, 0, rx314_fail872
    eq $I19, 0, rx314_fail872
    nqp_islist $I20, rx314_cstack
    unless $I20, rx314_jump873
    elements $I18, rx314_bstack
    le $I18, 0, rx314_cut874
    dec $I18
    set $I18, rx314_bstack[$I18]
  rx314_cut874:
    assign rx314_cstack, $I18
  rx314_jump873:
    jump $I19
  rx314_done870:
    rx314_cur."!cursor_fail"()
    .return (rx314_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_61_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx317_start
    .local string rx317_tgt
    .local int rx317_pos
    .local int rx317_off
    .local int rx317_eos
    .local int rx317_rep
    .local pmc rx317_cur
    .local pmc rx317_curclass
    .local pmc rx317_bstack
    .local pmc rx317_cstack
    rx317_start = self."!cursor_start_all"()
    set rx317_cur, rx317_start[0]
    set rx317_tgt, rx317_start[1]
    set rx317_pos, rx317_start[2]
    set rx317_curclass, rx317_start[3]
    set rx317_bstack, rx317_start[4]
    set $I19, rx317_start[5]
    store_lex unicode:"$\x{a2}", rx317_cur
    length rx317_eos, rx317_tgt
    eq $I19, 1, rx317_restart882
    gt rx317_pos, rx317_eos, rx317_fail883
    repr_get_attr_int $I11, self, rx317_curclass, "$!from"
    ne $I11, -1, rxscan318_done889
    goto rxscan318_scan888
  rxscan318_loop887:
    inc rx317_pos
    gt rx317_pos, rx317_eos, rx317_fail883
    repr_bind_attr_int rx317_cur, rx317_curclass, "$!from", rx317_pos
  rxscan318_scan888:
    nqp_rxmark rx317_bstack, rxscan318_loop887, rx317_pos, 0
  rxscan318_done889:
    ge rx317_pos, rx317_eos, rx317_fail883
    substr $S11, rx317_tgt, rx317_pos, 1
    index $I11, ucs4:"\\", $S11
    lt $I11, 0, rx317_fail883
    inc rx317_pos
    repr_bind_attr_int rx317_cur, rx317_curclass, "$!pos", rx317_pos
    $P11 = rx317_cur."backslash"()
    repr_get_attr_int $I11, $P11, rx317_curclass, "$!pos"
    lt $I11, 0, rx317_fail883
    nqp_rxmark rx317_bstack, rxsubrule319_pass890, -1, 0
  rxsubrule319_pass890:
    rx317_cstack = rx317_cur."!cursor_capture"($P11, "backslash")
    repr_get_attr_int rx317_pos, $P11, rx317_curclass, "$!pos"
    repr_bind_attr_int rx317_cur, rx317_curclass, "$!pos", rx317_pos
    $P11 = rx317_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx317_curclass, "$!pos"
    lt $I11, 0, rx317_fail883
    repr_get_attr_int rx317_pos, $P11, rx317_curclass, "$!pos"
    rx317_cur."!cursor_pass"(rx317_pos, "metachar:sym<bs>", 'backtrack'=>1)
    .return (rx317_cur)
  rx317_restart882:
    repr_get_attr_obj rx317_cstack, rx317_cur, rx317_curclass, "$!cstack"
  rx317_fail883:
    unless rx317_bstack, rx317_done881
    pop $I19, rx317_bstack
    if_null rx317_cstack, rx317_cstack_done886
    unless rx317_cstack, rx317_cstack_done886
    dec $I19
    set $P11, rx317_cstack[$I19]
  rx317_cstack_done886:
    pop rx317_rep, rx317_bstack
    pop rx317_pos, rx317_bstack
    pop $I19, rx317_bstack
    lt rx317_pos, -1, rx317_done881
    lt rx317_pos, 0, rx317_fail883
    eq $I19, 0, rx317_fail883
    nqp_islist $I20, rx317_cstack
    unless $I20, rx317_jump884
    elements $I18, rx317_bstack
    le $I18, 0, rx317_cut885
    dec $I18
    set $I18, rx317_bstack[$I18]
  rx317_cut885:
    assign rx317_cstack, $I18
  rx317_jump884:
    jump $I19
  rx317_done881:
    rx317_cur."!cursor_fail"()
    .return (rx317_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_62_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 248
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx321_start
    .local string rx321_tgt
    .local int rx321_pos
    .local int rx321_off
    .local int rx321_eos
    .local int rx321_rep
    .local pmc rx321_cur
    .local pmc rx321_curclass
    .local pmc rx321_bstack
    .local pmc rx321_cstack
    rx321_start = self."!cursor_start_all"()
    set rx321_cur, rx321_start[0]
    set rx321_tgt, rx321_start[1]
    set rx321_pos, rx321_start[2]
    set rx321_curclass, rx321_start[3]
    set rx321_bstack, rx321_start[4]
    set $I19, rx321_start[5]
    store_lex unicode:"$\x{a2}", rx321_cur
    length rx321_eos, rx321_tgt
    eq $I19, 1, rx321_restart894
    gt rx321_pos, rx321_eos, rx321_fail895
    repr_get_attr_int $I11, self, rx321_curclass, "$!from"
    ne $I11, -1, rxscan322_done901
    goto rxscan322_scan900
  rxscan322_loop899:
    inc rx321_pos
    gt rx321_pos, rx321_eos, rx321_fail895
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!from", rx321_pos
  rxscan322_scan900:
    nqp_rxmark rx321_bstack, rxscan322_loop899, rx321_pos, 0
  rxscan322_done901:
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."mod_internal"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail895
    nqp_rxmark rx321_bstack, rxsubrule323_pass902, -1, 0
  rxsubrule323_pass902:
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "mod_internal")
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    rx321_cur."!cursor_pass"(rx321_pos, "metachar:sym<mod>", 'backtrack'=>1)
    .return (rx321_cur)
  rx321_restart894:
    repr_get_attr_obj rx321_cstack, rx321_cur, rx321_curclass, "$!cstack"
  rx321_fail895:
    unless rx321_bstack, rx321_done893
    pop $I19, rx321_bstack
    if_null rx321_cstack, rx321_cstack_done898
    unless rx321_cstack, rx321_cstack_done898
    dec $I19
    set $P11, rx321_cstack[$I19]
  rx321_cstack_done898:
    pop rx321_rep, rx321_bstack
    pop rx321_pos, rx321_bstack
    pop $I19, rx321_bstack
    lt rx321_pos, -1, rx321_done893
    lt rx321_pos, 0, rx321_fail895
    eq $I19, 0, rx321_fail895
    nqp_islist $I20, rx321_cstack
    unless $I20, rx321_jump896
    elements $I18, rx321_bstack
    le $I18, 0, rx321_cut897
    dec $I18
    set $I18, rx321_bstack[$I18]
  rx321_cut897:
    assign rx321_cstack, $I18
  rx321_jump896:
    jump $I19
  rx321_done893:
    rx321_cur."!cursor_fail"()
    .return (rx321_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<quantifier>" :subid("cuid_63_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 249
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx324_start
    .local string rx324_tgt
    .local int rx324_pos
    .local int rx324_off
    .local int rx324_eos
    .local int rx324_rep
    .local pmc rx324_cur
    .local pmc rx324_curclass
    .local pmc rx324_bstack
    .local pmc rx324_cstack
    rx324_start = self."!cursor_start_all"()
    set rx324_cur, rx324_start[0]
    set rx324_tgt, rx324_start[1]
    set rx324_pos, rx324_start[2]
    set rx324_curclass, rx324_start[3]
    set rx324_bstack, rx324_start[4]
    set $I19, rx324_start[5]
    store_lex unicode:"$\x{a2}", rx324_cur
    length rx324_eos, rx324_tgt
    eq $I19, 1, rx324_restart905
    gt rx324_pos, rx324_eos, rx324_fail906
    repr_get_attr_int $I11, self, rx324_curclass, "$!from"
    ne $I11, -1, rxscan325_done912
    goto rxscan325_scan911
  rxscan325_loop910:
    inc rx324_pos
    gt rx324_pos, rx324_eos, rx324_fail906
    repr_bind_attr_int rx324_cur, rx324_curclass, "$!from", rx324_pos
  rxscan325_scan911:
    nqp_rxmark rx324_bstack, rxscan325_loop910, rx324_pos, 0
  rxscan325_done912:
    repr_bind_attr_int rx324_cur, rx324_curclass, "$!pos", rx324_pos
    $P11 = rx324_cur."rxstopper"()
    repr_get_attr_int $I11, $P11, rx324_curclass, "$!pos"
    ge $I11, 0, rx324_fail906
    repr_bind_attr_int rx324_cur, rx324_curclass, "$!pos", rx324_pos
    $P11 = rx324_cur."quantifier"()
    repr_get_attr_int $I11, $P11, rx324_curclass, "$!pos"
    lt $I11, 0, rx324_fail906
    nqp_rxmark rx324_bstack, rxsubrule326_pass913, -1, 0
  rxsubrule326_pass913:
    rx324_cstack = rx324_cur."!cursor_capture"($P11, "quantifier")
    repr_get_attr_int rx324_pos, $P11, rx324_curclass, "$!pos"
    repr_bind_attr_int rx324_cur, rx324_curclass, "$!pos", rx324_pos
    $P11 = rx324_cur."panic"("Quantifier quantifies nothing")
    repr_get_attr_int $I11, $P11, rx324_curclass, "$!pos"
    lt $I11, 0, rx324_fail906
    repr_get_attr_int rx324_pos, $P11, rx324_curclass, "$!pos"
    rx324_cur."!cursor_pass"(rx324_pos, "metachar:sym<quantifier>", 'backtrack'=>1)
    .return (rx324_cur)
  rx324_restart905:
    repr_get_attr_obj rx324_cstack, rx324_cur, rx324_curclass, "$!cstack"
  rx324_fail906:
    unless rx324_bstack, rx324_done904
    pop $I19, rx324_bstack
    if_null rx324_cstack, rx324_cstack_done909
    unless rx324_cstack, rx324_cstack_done909
    dec $I19
    set $P11, rx324_cstack[$I19]
  rx324_cstack_done909:
    pop rx324_rep, rx324_bstack
    pop rx324_pos, rx324_bstack
    pop $I19, rx324_bstack
    lt rx324_pos, -1, rx324_done904
    lt rx324_pos, 0, rx324_fail906
    eq $I19, 0, rx324_fail906
    nqp_islist $I20, rx324_cstack
    unless $I20, rx324_jump907
    elements $I18, rx324_bstack
    le $I18, 0, rx324_cut908
    dec $I18
    set $I18, rx324_bstack[$I18]
  rx324_cut908:
    assign rx324_cstack, $I18
  rx324_jump907:
    jump $I19
  rx324_done904:
    rx324_cur."!cursor_fail"()
    .return (rx324_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_64_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx328_start
    .local string rx328_tgt
    .local int rx328_pos
    .local int rx328_off
    .local int rx328_eos
    .local int rx328_rep
    .local pmc rx328_cur
    .local pmc rx328_curclass
    .local pmc rx328_bstack
    .local pmc rx328_cstack
    rx328_start = self."!cursor_start_all"()
    set rx328_cur, rx328_start[0]
    set rx328_tgt, rx328_start[1]
    set rx328_pos, rx328_start[2]
    set rx328_curclass, rx328_start[3]
    set rx328_bstack, rx328_start[4]
    set $I19, rx328_start[5]
    store_lex unicode:"$\x{a2}", rx328_cur
    length rx328_eos, rx328_tgt
    eq $I19, 1, rx328_restart917
    gt rx328_pos, rx328_eos, rx328_fail918
    repr_get_attr_int $I11, self, rx328_curclass, "$!from"
    ne $I11, -1, rxscan329_done924
    goto rxscan329_scan923
  rxscan329_loop922:
    inc rx328_pos
    gt rx328_pos, rx328_eos, rx328_fail918
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!from", rx328_pos
  rxscan329_scan923:
    nqp_rxmark rx328_bstack, rxscan329_loop922, rx328_pos, 0
  rxscan329_done924:
    nqp_rxmark rx328_bstack, rxcap330_fail926, rx328_pos, 0
    add $I11, rx328_pos, 1
    gt $I11, rx328_eos, rx328_fail918
    substr $S10, rx328_tgt, rx328_pos, 1
    ne $S10, ucs4:"~", rx328_fail918
    add rx328_pos, 1
    nqp_rxpeek $I19, rx328_bstack, rxcap330_fail926
    inc $I19
    set $I11, rx328_bstack[$I19]
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "sym")
    goto rxcap330_done925
  rxcap330_fail926:
    goto rx328_fail918
  rxcap330_done925:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail918
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail918
    nqp_rxmark rx328_bstack, rxsubrule332_pass928, -1, 0
  rxsubrule332_pass928:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "GOAL")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail918
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail918
    nqp_rxmark rx328_bstack, rxsubrule334_pass930, -1, 0
  rxsubrule334_pass930:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    rx328_cur."!cursor_pass"(rx328_pos, "metachar:sym<~>", 'backtrack'=>1)
    .return (rx328_cur)
  rx328_restart917:
    repr_get_attr_obj rx328_cstack, rx328_cur, rx328_curclass, "$!cstack"
  rx328_fail918:
    unless rx328_bstack, rx328_done916
    pop $I19, rx328_bstack
    if_null rx328_cstack, rx328_cstack_done921
    unless rx328_cstack, rx328_cstack_done921
    dec $I19
    set $P11, rx328_cstack[$I19]
  rx328_cstack_done921:
    pop rx328_rep, rx328_bstack
    pop rx328_pos, rx328_bstack
    pop $I19, rx328_bstack
    lt rx328_pos, -1, rx328_done916
    lt rx328_pos, 0, rx328_fail918
    eq $I19, 0, rx328_fail918
    nqp_islist $I20, rx328_cstack
    unless $I20, rx328_jump919
    elements $I18, rx328_bstack
    le $I18, 0, rx328_cut920
    dec $I18
    set $I18, rx328_bstack[$I18]
  rx328_cut920:
    assign rx328_cstack, $I18
  rx328_jump919:
    jump $I19
  rx328_done916:
    rx328_cur."!cursor_fail"()
    .return (rx328_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{*}>" :subid("cuid_65_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx335_start
    .local string rx335_tgt
    .local int rx335_pos
    .local int rx335_off
    .local int rx335_eos
    .local int rx335_rep
    .local pmc rx335_cur
    .local pmc rx335_curclass
    .local pmc rx335_bstack
    .local pmc rx335_cstack
    rx335_start = self."!cursor_start_all"()
    set rx335_cur, rx335_start[0]
    set rx335_tgt, rx335_start[1]
    set rx335_pos, rx335_start[2]
    set rx335_curclass, rx335_start[3]
    set rx335_bstack, rx335_start[4]
    set $I19, rx335_start[5]
    store_lex unicode:"$\x{a2}", rx335_cur
    length rx335_eos, rx335_tgt
    eq $I19, 1, rx335_restart933
    gt rx335_pos, rx335_eos, rx335_fail934
    repr_get_attr_int $I11, self, rx335_curclass, "$!from"
    ne $I11, -1, rxscan336_done940
    goto rxscan336_scan939
  rxscan336_loop938:
    inc rx335_pos
    gt rx335_pos, rx335_eos, rx335_fail934
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!from", rx335_pos
  rxscan336_scan939:
    nqp_rxmark rx335_bstack, rxscan336_loop938, rx335_pos, 0
  rxscan336_done940:
    nqp_rxmark rx335_bstack, rxcap337_fail942, rx335_pos, 0
    add $I11, rx335_pos, 3
    gt $I11, rx335_eos, rx335_fail934
    substr $S10, rx335_tgt, rx335_pos, 3
    ne $S10, ucs4:"{*}", rx335_fail934
    add rx335_pos, 3
    nqp_rxpeek $I19, rx335_bstack, rxcap337_fail942
    inc $I19
    set $I11, rx335_bstack[$I19]
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!pos", rx335_pos
    $P11 = rx335_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx335_pos)
    rx335_cstack = rx335_cur."!cursor_capture"($P11, "sym")
    goto rxcap337_done941
  rxcap337_fail942:
    goto rx335_fail934
  rxcap337_done941:
    nqp_rxmark rx335_bstack, rxquantr338_done944, rx335_pos, 0
  rxquantr338_loop943:
    nqp_rxmark rx335_bstack, rxquantr339_done946, rx335_pos, 0
  rxquantr339_loop945:
    ge rx335_pos, rx335_eos, rx335_fail934
    substr $S11, rx335_tgt, rx335_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx335_fail934
    inc rx335_pos
    nqp_rxpeek $I19, rx335_bstack, rxquantr339_done946
    inc $I19
    inc $I19
    set rx335_rep, rx335_bstack[$I19]
    nqp_rxcommit rx335_bstack, rxquantr339_done946
    inc rx335_rep
    nqp_rxmark rx335_bstack, rxquantr339_done946, rx335_pos, rx335_rep
    goto rxquantr339_loop945
  rxquantr339_done946:
    add $I11, rx335_pos, 3
    gt $I11, rx335_eos, rx335_fail934
    substr $S10, rx335_tgt, rx335_pos, 3
    ne $S10, ucs4:"#= ", rx335_fail934
    add rx335_pos, 3
    nqp_rxmark rx335_bstack, rxquantr340_done948, rx335_pos, 0
  rxquantr340_loop947:
    ge rx335_pos, rx335_eos, rx335_fail934
    substr $S11, rx335_tgt, rx335_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx335_fail934
    inc rx335_pos
    nqp_rxpeek $I19, rx335_bstack, rxquantr340_done948
    inc $I19
    inc $I19
    set rx335_rep, rx335_bstack[$I19]
    nqp_rxcommit rx335_bstack, rxquantr340_done948
    inc rx335_rep
    nqp_rxmark rx335_bstack, rxquantr340_done948, rx335_pos, rx335_rep
    goto rxquantr340_loop947
  rxquantr340_done948:
    nqp_rxmark rx335_bstack, rxcap341_fail950, rx335_pos, 0
    nqp_rxmark rx335_bstack, rxquantr342_done952, -1, 0
  rxquantr342_loop951:
    ge rx335_pos, rx335_eos, rx335_fail934
    is_cclass $I11, .CCLASS_WHITESPACE, rx335_tgt, rx335_pos
    if $I11, rx335_fail934
    add rx335_pos, 1
    nqp_rxpeek $I19, rx335_bstack, rxquantr342_done952
    inc $I19
    inc $I19
    set rx335_rep, rx335_bstack[$I19]
    nqp_rxcommit rx335_bstack, rxquantr342_done952
    inc rx335_rep
    nqp_rxmark rx335_bstack, rxquantr342_done952, rx335_pos, rx335_rep
    goto rxquantr342_loop951
  rxquantr342_done952:
    nqp_rxmark rx335_bstack, rxquantr343_done954, rx335_pos, 0
  rxquantr343_loop953:
    nqp_rxmark rx335_bstack, rxquantr344_done956, -1, 0
  rxquantr344_loop955:
    ge rx335_pos, rx335_eos, rx335_fail934
    substr $S11, rx335_tgt, rx335_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx335_fail934
    inc rx335_pos
    nqp_rxpeek $I19, rx335_bstack, rxquantr344_done956
    inc $I19
    inc $I19
    set rx335_rep, rx335_bstack[$I19]
    nqp_rxcommit rx335_bstack, rxquantr344_done956
    inc rx335_rep
    nqp_rxmark rx335_bstack, rxquantr344_done956, rx335_pos, rx335_rep
    goto rxquantr344_loop955
  rxquantr344_done956:
    nqp_rxmark rx335_bstack, rxquantr345_done958, -1, 0
  rxquantr345_loop957:
    ge rx335_pos, rx335_eos, rx335_fail934
    is_cclass $I11, .CCLASS_WHITESPACE, rx335_tgt, rx335_pos
    if $I11, rx335_fail934
    add rx335_pos, 1
    nqp_rxpeek $I19, rx335_bstack, rxquantr345_done958
    inc $I19
    inc $I19
    set rx335_rep, rx335_bstack[$I19]
    nqp_rxcommit rx335_bstack, rxquantr345_done958
    inc rx335_rep
    nqp_rxmark rx335_bstack, rxquantr345_done958, rx335_pos, rx335_rep
    goto rxquantr345_loop957
  rxquantr345_done958:
    nqp_rxpeek $I19, rx335_bstack, rxquantr343_done954
    inc $I19
    inc $I19
    set rx335_rep, rx335_bstack[$I19]
    nqp_rxcommit rx335_bstack, rxquantr343_done954
    inc rx335_rep
    nqp_rxmark rx335_bstack, rxquantr343_done954, rx335_pos, rx335_rep
    goto rxquantr343_loop953
  rxquantr343_done954:
    nqp_rxpeek $I19, rx335_bstack, rxcap341_fail950
    inc $I19
    set $I11, rx335_bstack[$I19]
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!pos", rx335_pos
    $P11 = rx335_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx335_pos)
    rx335_cstack = rx335_cur."!cursor_capture"($P11, "key")
    goto rxcap341_done949
  rxcap341_fail950:
    goto rx335_fail934
  rxcap341_done949:
    nqp_rxpeek $I19, rx335_bstack, rxquantr338_done944
    inc $I19
    inc $I19
    set rx335_rep, rx335_bstack[$I19]
    nqp_rxcommit rx335_bstack, rxquantr338_done944
    inc rx335_rep
  rxquantr338_done944:
    rx335_cur."!cursor_pass"(rx335_pos, "metachar:sym<{*}>", 'backtrack'=>1)
    .return (rx335_cur)
  rx335_restart933:
    repr_get_attr_obj rx335_cstack, rx335_cur, rx335_curclass, "$!cstack"
  rx335_fail934:
    unless rx335_bstack, rx335_done932
    pop $I19, rx335_bstack
    if_null rx335_cstack, rx335_cstack_done937
    unless rx335_cstack, rx335_cstack_done937
    dec $I19
    set $P11, rx335_cstack[$I19]
  rx335_cstack_done937:
    pop rx335_rep, rx335_bstack
    pop rx335_pos, rx335_bstack
    pop $I19, rx335_bstack
    lt rx335_pos, -1, rx335_done932
    lt rx335_pos, 0, rx335_fail934
    eq $I19, 0, rx335_fail934
    nqp_islist $I20, rx335_cstack
    unless $I20, rx335_jump935
    elements $I18, rx335_bstack
    le $I18, 0, rx335_cut936
    dec $I18
    set $I18, rx335_bstack[$I18]
  rx335_cut936:
    assign rx335_cstack, $I18
  rx335_jump935:
    jump $I19
  rx335_done932:
    rx335_cur."!cursor_fail"()
    .return (rx335_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_66_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 264
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx346_start
    .local string rx346_tgt
    .local int rx346_pos
    .local int rx346_off
    .local int rx346_eos
    .local int rx346_rep
    .local pmc rx346_cur
    .local pmc rx346_curclass
    .local pmc rx346_bstack
    .local pmc rx346_cstack
    rx346_start = self."!cursor_start_all"()
    set rx346_cur, rx346_start[0]
    set rx346_tgt, rx346_start[1]
    set rx346_pos, rx346_start[2]
    set rx346_curclass, rx346_start[3]
    set rx346_bstack, rx346_start[4]
    set $I19, rx346_start[5]
    store_lex unicode:"$\x{a2}", rx346_cur
    length rx346_eos, rx346_tgt
    eq $I19, 1, rx346_restart961
    gt rx346_pos, rx346_eos, rx346_fail962
    repr_get_attr_int $I11, self, rx346_curclass, "$!from"
    ne $I11, -1, rxscan347_done968
    goto rxscan347_scan967
  rxscan347_loop966:
    inc rx346_pos
    index rx346_pos, rx346_tgt, ucs4:"<", rx346_pos
    eq rx346_pos, -1, rx346_fail962
    gt rx346_pos, rx346_eos, rx346_fail962
    repr_bind_attr_int rx346_cur, rx346_curclass, "$!from", rx346_pos
  rxscan347_scan967:
    nqp_rxmark rx346_bstack, rxscan347_loop966, rx346_pos, 0
  rxscan347_done968:
    add $I11, rx346_pos, 1
    gt $I11, rx346_eos, rx346_fail962
    substr $S10, rx346_tgt, rx346_pos, 1
    ne $S10, ucs4:"<", rx346_fail962
    add rx346_pos, 1
    repr_bind_attr_int rx346_cur, rx346_curclass, "$!pos", rx346_pos
    $P11 = rx346_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx346_curclass, "$!pos"
    lt $I11, 0, rx346_fail962
    nqp_rxmark rx346_bstack, rxsubrule348_pass969, -1, 0
  rxsubrule348_pass969:
    rx346_cstack = rx346_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx346_pos, $P11, rx346_curclass, "$!pos"
  alt349_0971:
    nqp_rxmark rx346_bstack, alt349_1972, rx346_pos, 0
    add $I11, rx346_pos, 1
    gt $I11, rx346_eos, rx346_fail962
    substr $S10, rx346_tgt, rx346_pos, 1
    ne $S10, ucs4:">", rx346_fail962
    add rx346_pos, 1
    goto alt349_end970
  alt349_1972:
    repr_bind_attr_int rx346_cur, rx346_curclass, "$!pos", rx346_pos
    $P11 = rx346_cur."FAILGOAL"("'>' ")
    repr_get_attr_int $I11, $P11, rx346_curclass, "$!pos"
    lt $I11, 0, rx346_fail962
    goto rxsubrule350_pass973
  rxsubrule350_back974:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx346_curclass, "$!pos"
    lt $I11, 0, rx346_fail962
  rxsubrule350_pass973:
    rx346_cstack = rx346_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule350_back974
    push rx346_bstack, $I11
    push rx346_bstack, 0
    push rx346_bstack, rx346_pos
    elements $I11, rx346_cstack
    push rx346_bstack, $I11
    repr_get_attr_int rx346_pos, $P11, rx346_curclass, "$!pos"
  alt349_end970:
    repr_bind_attr_int rx346_cur, rx346_curclass, "$!pos", rx346_pos
    $P11 = rx346_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx346_curclass, "$!pos"
    lt $I11, 0, rx346_fail962
    repr_get_attr_int rx346_pos, $P11, rx346_curclass, "$!pos"
    rx346_cur."!cursor_pass"(rx346_pos, "metachar:sym<assert>", 'backtrack'=>1)
    .return (rx346_cur)
  rx346_restart961:
    repr_get_attr_obj rx346_cstack, rx346_cur, rx346_curclass, "$!cstack"
  rx346_fail962:
    unless rx346_bstack, rx346_done960
    pop $I19, rx346_bstack
    if_null rx346_cstack, rx346_cstack_done965
    unless rx346_cstack, rx346_cstack_done965
    dec $I19
    set $P11, rx346_cstack[$I19]
  rx346_cstack_done965:
    pop rx346_rep, rx346_bstack
    pop rx346_pos, rx346_bstack
    pop $I19, rx346_bstack
    lt rx346_pos, -1, rx346_done960
    lt rx346_pos, 0, rx346_fail962
    eq $I19, 0, rx346_fail962
    nqp_islist $I20, rx346_cstack
    unless $I20, rx346_jump963
    elements $I18, rx346_bstack
    le $I18, 0, rx346_cut964
    dec $I18
    set $I18, rx346_bstack[$I18]
  rx346_cut964:
    assign rx346_cstack, $I18
  rx346_jump963:
    jump $I19
  rx346_done960:
    rx346_cur."!cursor_fail"()
    .return (rx346_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_67_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 268
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx352_start
    .local string rx352_tgt
    .local int rx352_pos
    .local int rx352_off
    .local int rx352_eos
    .local int rx352_rep
    .local pmc rx352_cur
    .local pmc rx352_curclass
    .local pmc rx352_bstack
    .local pmc rx352_cstack
    rx352_start = self."!cursor_start_all"()
    set rx352_cur, rx352_start[0]
    set rx352_tgt, rx352_start[1]
    set rx352_pos, rx352_start[2]
    set rx352_curclass, rx352_start[3]
    set rx352_bstack, rx352_start[4]
    set $I19, rx352_start[5]
    store_lex unicode:"$\x{a2}", rx352_cur
    length rx352_eos, rx352_tgt
    eq $I19, 1, rx352_restart978
    gt rx352_pos, rx352_eos, rx352_fail979
    repr_get_attr_int $I11, self, rx352_curclass, "$!from"
    ne $I11, -1, rxscan353_done985
    goto rxscan353_scan984
  rxscan353_loop983:
    inc rx352_pos
    gt rx352_pos, rx352_eos, rx352_fail979
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!from", rx352_pos
  rxscan353_scan984:
    nqp_rxmark rx352_bstack, rxscan353_loop983, rx352_pos, 0
  rxscan353_done985:
    ge rx352_pos, rx352_eos, rx352_fail979
    substr $S11, rx352_tgt, rx352_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx352_fail979
    inc rx352_pos
    rx352_cur."!cursor_pass"(rx352_pos, "sigil", 'backtrack'=>1)
    .return (rx352_cur)
  rx352_restart978:
    repr_get_attr_obj rx352_cstack, rx352_cur, rx352_curclass, "$!cstack"
  rx352_fail979:
    unless rx352_bstack, rx352_done977
    pop $I19, rx352_bstack
    if_null rx352_cstack, rx352_cstack_done982
    unless rx352_cstack, rx352_cstack_done982
    dec $I19
    set $P11, rx352_cstack[$I19]
  rx352_cstack_done982:
    pop rx352_rep, rx352_bstack
    pop rx352_pos, rx352_bstack
    pop $I19, rx352_bstack
    lt rx352_pos, -1, rx352_done977
    lt rx352_pos, 0, rx352_fail979
    eq $I19, 0, rx352_fail979
    nqp_islist $I20, rx352_cstack
    unless $I20, rx352_jump980
    elements $I18, rx352_bstack
    le $I18, 0, rx352_cut981
    dec $I18
    set $I18, rx352_bstack[$I18]
  rx352_cut981:
    assign rx352_cstack, $I18
  rx352_jump980:
    jump $I19
  rx352_done977:
    rx352_cur."!cursor_fail"()
    .return (rx352_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_68_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 270
    .param pmc _lex_param_0 
    .const 'Sub' $P5007 = 'cuid_228_1382484119.90237' 
    capture_lex $P5007 
    .const 'Sub' $P5007 = 'cuid_229_1382484119.90237' 
    capture_lex $P5007 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx354_start
    .local string rx354_tgt
    .local int rx354_pos
    .local int rx354_off
    .local int rx354_eos
    .local int rx354_rep
    .local pmc rx354_cur
    .local pmc rx354_curclass
    .local pmc rx354_bstack
    .local pmc rx354_cstack
    rx354_start = self."!cursor_start_all"()
    set rx354_cur, rx354_start[0]
    set rx354_tgt, rx354_start[1]
    set rx354_pos, rx354_start[2]
    set rx354_curclass, rx354_start[3]
    set rx354_bstack, rx354_start[4]
    set $I19, rx354_start[5]
    store_lex unicode:"$\x{a2}", rx354_cur
    length rx354_eos, rx354_tgt
    eq $I19, 1, rx354_restart988
    gt rx354_pos, rx354_eos, rx354_fail989
    repr_get_attr_int $I11, self, rx354_curclass, "$!from"
    ne $I11, -1, rxscan355_done995
    goto rxscan355_scan994
  rxscan355_loop993:
    inc rx354_pos
    gt rx354_pos, rx354_eos, rx354_fail989
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!from", rx354_pos
  rxscan355_scan994:
    nqp_rxmark rx354_bstack, rxscan355_loop993, rx354_pos, 0
  rxscan355_done995:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt356_0997
    nqp_push_label $P11, alt356_11002
    nqp_rxmark rx354_bstack, alt356_end996, -1, 0
    rx354_cur."!alt"(rx354_pos, "alt_nfa__13_1382484121.00884", $P11)
    goto rx354_fail989
  alt356_0997:
    add $I11, rx354_pos, 2
    gt $I11, rx354_eos, rx354_fail989
    substr $S10, rx354_tgt, rx354_pos, 2
    ne $S10, ucs4:"$<", rx354_fail989
    add rx354_pos, 2
    nqp_rxmark rx354_bstack, rxcap357_fail999, rx354_pos, 0
    nqp_rxmark rx354_bstack, rxquantr358_done1001, -1, 0
  rxquantr358_loop1000:
    ge rx354_pos, rx354_eos, rx354_fail989
    substr $S11, rx354_tgt, rx354_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx354_fail989
    inc rx354_pos
    nqp_rxpeek $I19, rx354_bstack, rxquantr358_done1001
    inc $I19
    inc $I19
    set rx354_rep, rx354_bstack[$I19]
    nqp_rxcommit rx354_bstack, rxquantr358_done1001
    inc rx354_rep
    nqp_rxmark rx354_bstack, rxquantr358_done1001, rx354_pos, rx354_rep
    goto rxquantr358_loop1000
  rxquantr358_done1001:
    nqp_rxpeek $I19, rx354_bstack, rxcap357_fail999
    inc $I19
    set $I11, rx354_bstack[$I19]
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx354_pos)
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "name")
    goto rxcap357_done998
  rxcap357_fail999:
    goto rx354_fail989
  rxcap357_done998:
    add $I11, rx354_pos, 1
    gt $I11, rx354_eos, rx354_fail989
    substr $S10, rx354_tgt, rx354_pos, 1
    ne $S10, ucs4:">", rx354_fail989
    add rx354_pos, 1
    goto alt356_end996
  alt356_11002:
    add $I11, rx354_pos, 1
    gt $I11, rx354_eos, rx354_fail989
    substr $S10, rx354_tgt, rx354_pos, 1
    ne $S10, ucs4:"$", rx354_fail989
    add rx354_pos, 1
    nqp_rxmark rx354_bstack, rxcap359_fail1004, rx354_pos, 0
    nqp_rxmark rx354_bstack, rxquantr360_done1006, -1, 0
  rxquantr360_loop1005:
    ge rx354_pos, rx354_eos, rx354_fail989
    is_cclass $I11, .CCLASS_NUMERIC, rx354_tgt, rx354_pos
    unless $I11, rx354_fail989
    add rx354_pos, 1
    nqp_rxpeek $I19, rx354_bstack, rxquantr360_done1006
    inc $I19
    inc $I19
    set rx354_rep, rx354_bstack[$I19]
    nqp_rxcommit rx354_bstack, rxquantr360_done1006
    inc rx354_rep
    nqp_rxmark rx354_bstack, rxquantr360_done1006, rx354_pos, rx354_rep
    goto rxquantr360_loop1005
  rxquantr360_done1006:
    nqp_rxpeek $I19, rx354_bstack, rxcap359_fail1004
    inc $I19
    set $I11, rx354_bstack[$I19]
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx354_pos)
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "pos")
    goto rxcap359_done1003
  rxcap359_fail1004:
    goto rx354_fail989
  rxcap359_done1003:
    goto alt356_end996
  alt356_end996:
    nqp_rxcommit rx354_bstack, alt356_end996
    nqp_rxmark rx354_bstack, rxquantr361_done1008, rx354_pos, 0
  rxquantr361_loop1007:
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."ws"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail989
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    add $I11, rx354_pos, 1
    gt $I11, rx354_eos, rx354_fail989
    substr $S10, rx354_tgt, rx354_pos, 1
    ne $S10, ucs4:"=", rx354_fail989
    add rx354_pos, 1
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."ws"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail989
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    store_lex unicode:"$\x{a2}", rx354_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_228_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."quantified_atom"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail989
    nqp_rxmark rx354_bstack, rxsubrule364_pass1011, -1, 0
  rxsubrule364_pass1011:
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "quantified_atom")
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    store_lex unicode:"$\x{a2}", rx354_cur
    $P5004 = $P101."MATCH"()
    set $P102, $P5004
    .const 'Sub' $P5005 = 'cuid_229_1382484119.90237' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_rxpeek $I19, rx354_bstack, rxquantr361_done1008
    inc $I19
    inc $I19
    set rx354_rep, rx354_bstack[$I19]
    nqp_rxcommit rx354_bstack, rxquantr361_done1008
    inc rx354_rep
  rxquantr361_done1008:
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."SIGOK"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail989
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    rx354_cur."!cursor_pass"(rx354_pos, "metachar:sym<var>", 'backtrack'=>1)
    .return (rx354_cur)
  rx354_restart988:
    repr_get_attr_obj rx354_cstack, rx354_cur, rx354_curclass, "$!cstack"
  rx354_fail989:
    unless rx354_bstack, rx354_done987
    pop $I19, rx354_bstack
    if_null rx354_cstack, rx354_cstack_done992
    unless rx354_cstack, rx354_cstack_done992
    dec $I19
    set $P11, rx354_cstack[$I19]
  rx354_cstack_done992:
    pop rx354_rep, rx354_bstack
    pop rx354_pos, rx354_bstack
    pop $I19, rx354_bstack
    lt rx354_pos, -1, rx354_done987
    lt rx354_pos, 0, rx354_fail989
    eq $I19, 0, rx354_fail989
    nqp_islist $I20, rx354_cstack
    unless $I20, rx354_jump990
    elements $I18, rx354_bstack
    le $I18, 0, rx354_cut991
    dec $I18
    set $I18, rx354_bstack[$I18]
  rx354_cut991:
    assign rx354_cstack, $I18
  rx354_jump990:
    jump $I19
  rx354_done987:
    rx354_cur."!cursor_fail"()
    .return (rx354_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_228_1382484119.90237") :anon :lex :outer("cuid_68_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 278

    box $P5001, 1
    store_dynamic_lex "$*VARDEF", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1382484119.90237") :anon :lex :outer("cuid_68_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 280

    box $P5001, 0
    store_dynamic_lex "$*VARDEF", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "backslash" :subid("cuid_69_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 285
    .param pmc self 
    $P5001 = self."!protoregex"("backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_70_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 286
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx366_start
    .local string rx366_tgt
    .local int rx366_pos
    .local int rx366_off
    .local int rx366_eos
    .local int rx366_rep
    .local pmc rx366_cur
    .local pmc rx366_curclass
    .local pmc rx366_bstack
    .local pmc rx366_cstack
    rx366_start = self."!cursor_start_all"()
    set rx366_cur, rx366_start[0]
    set rx366_tgt, rx366_start[1]
    set rx366_pos, rx366_start[2]
    set rx366_curclass, rx366_start[3]
    set rx366_bstack, rx366_start[4]
    set $I19, rx366_start[5]
    store_lex unicode:"$\x{a2}", rx366_cur
    length rx366_eos, rx366_tgt
    eq $I19, 1, rx366_restart1015
    gt rx366_pos, rx366_eos, rx366_fail1016
    repr_get_attr_int $I11, self, rx366_curclass, "$!from"
    ne $I11, -1, rxscan367_done1022
    goto rxscan367_scan1021
  rxscan367_loop1020:
    inc rx366_pos
    gt rx366_pos, rx366_eos, rx366_fail1016
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!from", rx366_pos
  rxscan367_scan1021:
    nqp_rxmark rx366_bstack, rxscan367_loop1020, rx366_pos, 0
  rxscan367_done1022:
    nqp_rxmark rx366_bstack, rxcap368_fail1024, rx366_pos, 0
    ge rx366_pos, rx366_eos, rx366_fail1016
    substr $S11, rx366_tgt, rx366_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx366_fail1016
    inc rx366_pos
    nqp_rxpeek $I19, rx366_bstack, rxcap368_fail1024
    inc $I19
    set $I11, rx366_bstack[$I19]
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx366_pos)
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "sym")
    goto rxcap368_done1023
  rxcap368_fail1024:
    goto rx366_fail1016
  rxcap368_done1023:
    rx366_cur."!cursor_pass"(rx366_pos, "backslash:sym<s>", 'backtrack'=>1)
    .return (rx366_cur)
  rx366_restart1015:
    repr_get_attr_obj rx366_cstack, rx366_cur, rx366_curclass, "$!cstack"
  rx366_fail1016:
    unless rx366_bstack, rx366_done1014
    pop $I19, rx366_bstack
    if_null rx366_cstack, rx366_cstack_done1019
    unless rx366_cstack, rx366_cstack_done1019
    dec $I19
    set $P11, rx366_cstack[$I19]
  rx366_cstack_done1019:
    pop rx366_rep, rx366_bstack
    pop rx366_pos, rx366_bstack
    pop $I19, rx366_bstack
    lt rx366_pos, -1, rx366_done1014
    lt rx366_pos, 0, rx366_fail1016
    eq $I19, 0, rx366_fail1016
    nqp_islist $I20, rx366_cstack
    unless $I20, rx366_jump1017
    elements $I18, rx366_bstack
    le $I18, 0, rx366_cut1018
    dec $I18
    set $I18, rx366_bstack[$I18]
  rx366_cut1018:
    assign rx366_cstack, $I18
  rx366_jump1017:
    jump $I19
  rx366_done1014:
    rx366_cur."!cursor_fail"()
    .return (rx366_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_71_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 287
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx369_start
    .local string rx369_tgt
    .local int rx369_pos
    .local int rx369_off
    .local int rx369_eos
    .local int rx369_rep
    .local pmc rx369_cur
    .local pmc rx369_curclass
    .local pmc rx369_bstack
    .local pmc rx369_cstack
    rx369_start = self."!cursor_start_all"()
    set rx369_cur, rx369_start[0]
    set rx369_tgt, rx369_start[1]
    set rx369_pos, rx369_start[2]
    set rx369_curclass, rx369_start[3]
    set rx369_bstack, rx369_start[4]
    set $I19, rx369_start[5]
    store_lex unicode:"$\x{a2}", rx369_cur
    length rx369_eos, rx369_tgt
    eq $I19, 1, rx369_restart1027
    gt rx369_pos, rx369_eos, rx369_fail1028
    repr_get_attr_int $I11, self, rx369_curclass, "$!from"
    ne $I11, -1, rxscan370_done1034
    goto rxscan370_scan1033
  rxscan370_loop1032:
    inc rx369_pos
    gt rx369_pos, rx369_eos, rx369_fail1028
    repr_bind_attr_int rx369_cur, rx369_curclass, "$!from", rx369_pos
  rxscan370_scan1033:
    nqp_rxmark rx369_bstack, rxscan370_loop1032, rx369_pos, 0
  rxscan370_done1034:
    nqp_rxmark rx369_bstack, rxcap371_fail1036, rx369_pos, 0
    ge rx369_pos, rx369_eos, rx369_fail1028
    substr $S11, rx369_tgt, rx369_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx369_fail1028
    inc rx369_pos
    nqp_rxpeek $I19, rx369_bstack, rxcap371_fail1036
    inc $I19
    set $I11, rx369_bstack[$I19]
    repr_bind_attr_int rx369_cur, rx369_curclass, "$!pos", rx369_pos
    $P11 = rx369_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx369_pos)
    rx369_cstack = rx369_cur."!cursor_capture"($P11, "sym")
    goto rxcap371_done1035
  rxcap371_fail1036:
    goto rx369_fail1028
  rxcap371_done1035:
    rx369_cur."!cursor_pass"(rx369_pos, "backslash:sym<b>", 'backtrack'=>1)
    .return (rx369_cur)
  rx369_restart1027:
    repr_get_attr_obj rx369_cstack, rx369_cur, rx369_curclass, "$!cstack"
  rx369_fail1028:
    unless rx369_bstack, rx369_done1026
    pop $I19, rx369_bstack
    if_null rx369_cstack, rx369_cstack_done1031
    unless rx369_cstack, rx369_cstack_done1031
    dec $I19
    set $P11, rx369_cstack[$I19]
  rx369_cstack_done1031:
    pop rx369_rep, rx369_bstack
    pop rx369_pos, rx369_bstack
    pop $I19, rx369_bstack
    lt rx369_pos, -1, rx369_done1026
    lt rx369_pos, 0, rx369_fail1028
    eq $I19, 0, rx369_fail1028
    nqp_islist $I20, rx369_cstack
    unless $I20, rx369_jump1029
    elements $I18, rx369_bstack
    le $I18, 0, rx369_cut1030
    dec $I18
    set $I18, rx369_bstack[$I18]
  rx369_cut1030:
    assign rx369_cstack, $I18
  rx369_jump1029:
    jump $I19
  rx369_done1026:
    rx369_cur."!cursor_fail"()
    .return (rx369_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_72_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx372_start
    .local string rx372_tgt
    .local int rx372_pos
    .local int rx372_off
    .local int rx372_eos
    .local int rx372_rep
    .local pmc rx372_cur
    .local pmc rx372_curclass
    .local pmc rx372_bstack
    .local pmc rx372_cstack
    rx372_start = self."!cursor_start_all"()
    set rx372_cur, rx372_start[0]
    set rx372_tgt, rx372_start[1]
    set rx372_pos, rx372_start[2]
    set rx372_curclass, rx372_start[3]
    set rx372_bstack, rx372_start[4]
    set $I19, rx372_start[5]
    store_lex unicode:"$\x{a2}", rx372_cur
    length rx372_eos, rx372_tgt
    eq $I19, 1, rx372_restart1039
    gt rx372_pos, rx372_eos, rx372_fail1040
    repr_get_attr_int $I11, self, rx372_curclass, "$!from"
    ne $I11, -1, rxscan373_done1046
    goto rxscan373_scan1045
  rxscan373_loop1044:
    inc rx372_pos
    gt rx372_pos, rx372_eos, rx372_fail1040
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!from", rx372_pos
  rxscan373_scan1045:
    nqp_rxmark rx372_bstack, rxscan373_loop1044, rx372_pos, 0
  rxscan373_done1046:
    nqp_rxmark rx372_bstack, rxcap374_fail1048, rx372_pos, 0
    ge rx372_pos, rx372_eos, rx372_fail1040
    substr $S11, rx372_tgt, rx372_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx372_fail1040
    inc rx372_pos
    nqp_rxpeek $I19, rx372_bstack, rxcap374_fail1048
    inc $I19
    set $I11, rx372_bstack[$I19]
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx372_pos)
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "sym")
    goto rxcap374_done1047
  rxcap374_fail1048:
    goto rx372_fail1040
  rxcap374_done1047:
    rx372_cur."!cursor_pass"(rx372_pos, "backslash:sym<e>", 'backtrack'=>1)
    .return (rx372_cur)
  rx372_restart1039:
    repr_get_attr_obj rx372_cstack, rx372_cur, rx372_curclass, "$!cstack"
  rx372_fail1040:
    unless rx372_bstack, rx372_done1038
    pop $I19, rx372_bstack
    if_null rx372_cstack, rx372_cstack_done1043
    unless rx372_cstack, rx372_cstack_done1043
    dec $I19
    set $P11, rx372_cstack[$I19]
  rx372_cstack_done1043:
    pop rx372_rep, rx372_bstack
    pop rx372_pos, rx372_bstack
    pop $I19, rx372_bstack
    lt rx372_pos, -1, rx372_done1038
    lt rx372_pos, 0, rx372_fail1040
    eq $I19, 0, rx372_fail1040
    nqp_islist $I20, rx372_cstack
    unless $I20, rx372_jump1041
    elements $I18, rx372_bstack
    le $I18, 0, rx372_cut1042
    dec $I18
    set $I18, rx372_bstack[$I18]
  rx372_cut1042:
    assign rx372_cstack, $I18
  rx372_jump1041:
    jump $I19
  rx372_done1038:
    rx372_cur."!cursor_fail"()
    .return (rx372_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_73_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx375_start
    .local string rx375_tgt
    .local int rx375_pos
    .local int rx375_off
    .local int rx375_eos
    .local int rx375_rep
    .local pmc rx375_cur
    .local pmc rx375_curclass
    .local pmc rx375_bstack
    .local pmc rx375_cstack
    rx375_start = self."!cursor_start_all"()
    set rx375_cur, rx375_start[0]
    set rx375_tgt, rx375_start[1]
    set rx375_pos, rx375_start[2]
    set rx375_curclass, rx375_start[3]
    set rx375_bstack, rx375_start[4]
    set $I19, rx375_start[5]
    store_lex unicode:"$\x{a2}", rx375_cur
    length rx375_eos, rx375_tgt
    eq $I19, 1, rx375_restart1051
    gt rx375_pos, rx375_eos, rx375_fail1052
    repr_get_attr_int $I11, self, rx375_curclass, "$!from"
    ne $I11, -1, rxscan376_done1058
    goto rxscan376_scan1057
  rxscan376_loop1056:
    inc rx375_pos
    gt rx375_pos, rx375_eos, rx375_fail1052
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!from", rx375_pos
  rxscan376_scan1057:
    nqp_rxmark rx375_bstack, rxscan376_loop1056, rx375_pos, 0
  rxscan376_done1058:
    nqp_rxmark rx375_bstack, rxcap377_fail1060, rx375_pos, 0
    ge rx375_pos, rx375_eos, rx375_fail1052
    substr $S11, rx375_tgt, rx375_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx375_fail1052
    inc rx375_pos
    nqp_rxpeek $I19, rx375_bstack, rxcap377_fail1060
    inc $I19
    set $I11, rx375_bstack[$I19]
    repr_bind_attr_int rx375_cur, rx375_curclass, "$!pos", rx375_pos
    $P11 = rx375_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx375_pos)
    rx375_cstack = rx375_cur."!cursor_capture"($P11, "sym")
    goto rxcap377_done1059
  rxcap377_fail1060:
    goto rx375_fail1052
  rxcap377_done1059:
    rx375_cur."!cursor_pass"(rx375_pos, "backslash:sym<f>", 'backtrack'=>1)
    .return (rx375_cur)
  rx375_restart1051:
    repr_get_attr_obj rx375_cstack, rx375_cur, rx375_curclass, "$!cstack"
  rx375_fail1052:
    unless rx375_bstack, rx375_done1050
    pop $I19, rx375_bstack
    if_null rx375_cstack, rx375_cstack_done1055
    unless rx375_cstack, rx375_cstack_done1055
    dec $I19
    set $P11, rx375_cstack[$I19]
  rx375_cstack_done1055:
    pop rx375_rep, rx375_bstack
    pop rx375_pos, rx375_bstack
    pop $I19, rx375_bstack
    lt rx375_pos, -1, rx375_done1050
    lt rx375_pos, 0, rx375_fail1052
    eq $I19, 0, rx375_fail1052
    nqp_islist $I20, rx375_cstack
    unless $I20, rx375_jump1053
    elements $I18, rx375_bstack
    le $I18, 0, rx375_cut1054
    dec $I18
    set $I18, rx375_bstack[$I18]
  rx375_cut1054:
    assign rx375_cstack, $I18
  rx375_jump1053:
    jump $I19
  rx375_done1050:
    rx375_cur."!cursor_fail"()
    .return (rx375_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_74_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 290
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx378_start
    .local string rx378_tgt
    .local int rx378_pos
    .local int rx378_off
    .local int rx378_eos
    .local int rx378_rep
    .local pmc rx378_cur
    .local pmc rx378_curclass
    .local pmc rx378_bstack
    .local pmc rx378_cstack
    rx378_start = self."!cursor_start_all"()
    set rx378_cur, rx378_start[0]
    set rx378_tgt, rx378_start[1]
    set rx378_pos, rx378_start[2]
    set rx378_curclass, rx378_start[3]
    set rx378_bstack, rx378_start[4]
    set $I19, rx378_start[5]
    store_lex unicode:"$\x{a2}", rx378_cur
    length rx378_eos, rx378_tgt
    eq $I19, 1, rx378_restart1063
    gt rx378_pos, rx378_eos, rx378_fail1064
    repr_get_attr_int $I11, self, rx378_curclass, "$!from"
    ne $I11, -1, rxscan379_done1070
    goto rxscan379_scan1069
  rxscan379_loop1068:
    inc rx378_pos
    gt rx378_pos, rx378_eos, rx378_fail1064
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!from", rx378_pos
  rxscan379_scan1069:
    nqp_rxmark rx378_bstack, rxscan379_loop1068, rx378_pos, 0
  rxscan379_done1070:
    nqp_rxmark rx378_bstack, rxcap380_fail1072, rx378_pos, 0
    ge rx378_pos, rx378_eos, rx378_fail1064
    substr $S11, rx378_tgt, rx378_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx378_fail1064
    inc rx378_pos
    nqp_rxpeek $I19, rx378_bstack, rxcap380_fail1072
    inc $I19
    set $I11, rx378_bstack[$I19]
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx378_pos)
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "sym")
    goto rxcap380_done1071
  rxcap380_fail1072:
    goto rx378_fail1064
  rxcap380_done1071:
    rx378_cur."!cursor_pass"(rx378_pos, "backslash:sym<h>", 'backtrack'=>1)
    .return (rx378_cur)
  rx378_restart1063:
    repr_get_attr_obj rx378_cstack, rx378_cur, rx378_curclass, "$!cstack"
  rx378_fail1064:
    unless rx378_bstack, rx378_done1062
    pop $I19, rx378_bstack
    if_null rx378_cstack, rx378_cstack_done1067
    unless rx378_cstack, rx378_cstack_done1067
    dec $I19
    set $P11, rx378_cstack[$I19]
  rx378_cstack_done1067:
    pop rx378_rep, rx378_bstack
    pop rx378_pos, rx378_bstack
    pop $I19, rx378_bstack
    lt rx378_pos, -1, rx378_done1062
    lt rx378_pos, 0, rx378_fail1064
    eq $I19, 0, rx378_fail1064
    nqp_islist $I20, rx378_cstack
    unless $I20, rx378_jump1065
    elements $I18, rx378_bstack
    le $I18, 0, rx378_cut1066
    dec $I18
    set $I18, rx378_bstack[$I18]
  rx378_cut1066:
    assign rx378_cstack, $I18
  rx378_jump1065:
    jump $I19
  rx378_done1062:
    rx378_cur."!cursor_fail"()
    .return (rx378_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_75_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx381_start
    .local string rx381_tgt
    .local int rx381_pos
    .local int rx381_off
    .local int rx381_eos
    .local int rx381_rep
    .local pmc rx381_cur
    .local pmc rx381_curclass
    .local pmc rx381_bstack
    .local pmc rx381_cstack
    rx381_start = self."!cursor_start_all"()
    set rx381_cur, rx381_start[0]
    set rx381_tgt, rx381_start[1]
    set rx381_pos, rx381_start[2]
    set rx381_curclass, rx381_start[3]
    set rx381_bstack, rx381_start[4]
    set $I19, rx381_start[5]
    store_lex unicode:"$\x{a2}", rx381_cur
    length rx381_eos, rx381_tgt
    eq $I19, 1, rx381_restart1075
    gt rx381_pos, rx381_eos, rx381_fail1076
    repr_get_attr_int $I11, self, rx381_curclass, "$!from"
    ne $I11, -1, rxscan382_done1082
    goto rxscan382_scan1081
  rxscan382_loop1080:
    inc rx381_pos
    gt rx381_pos, rx381_eos, rx381_fail1076
    repr_bind_attr_int rx381_cur, rx381_curclass, "$!from", rx381_pos
  rxscan382_scan1081:
    nqp_rxmark rx381_bstack, rxscan382_loop1080, rx381_pos, 0
  rxscan382_done1082:
    nqp_rxmark rx381_bstack, rxcap383_fail1084, rx381_pos, 0
    ge rx381_pos, rx381_eos, rx381_fail1076
    substr $S11, rx381_tgt, rx381_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx381_fail1076
    inc rx381_pos
    nqp_rxpeek $I19, rx381_bstack, rxcap383_fail1084
    inc $I19
    set $I11, rx381_bstack[$I19]
    repr_bind_attr_int rx381_cur, rx381_curclass, "$!pos", rx381_pos
    $P11 = rx381_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx381_pos)
    rx381_cstack = rx381_cur."!cursor_capture"($P11, "sym")
    goto rxcap383_done1083
  rxcap383_fail1084:
    goto rx381_fail1076
  rxcap383_done1083:
    rx381_cur."!cursor_pass"(rx381_pos, "backslash:sym<r>", 'backtrack'=>1)
    .return (rx381_cur)
  rx381_restart1075:
    repr_get_attr_obj rx381_cstack, rx381_cur, rx381_curclass, "$!cstack"
  rx381_fail1076:
    unless rx381_bstack, rx381_done1074
    pop $I19, rx381_bstack
    if_null rx381_cstack, rx381_cstack_done1079
    unless rx381_cstack, rx381_cstack_done1079
    dec $I19
    set $P11, rx381_cstack[$I19]
  rx381_cstack_done1079:
    pop rx381_rep, rx381_bstack
    pop rx381_pos, rx381_bstack
    pop $I19, rx381_bstack
    lt rx381_pos, -1, rx381_done1074
    lt rx381_pos, 0, rx381_fail1076
    eq $I19, 0, rx381_fail1076
    nqp_islist $I20, rx381_cstack
    unless $I20, rx381_jump1077
    elements $I18, rx381_bstack
    le $I18, 0, rx381_cut1078
    dec $I18
    set $I18, rx381_bstack[$I18]
  rx381_cut1078:
    assign rx381_cstack, $I18
  rx381_jump1077:
    jump $I19
  rx381_done1074:
    rx381_cur."!cursor_fail"()
    .return (rx381_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_76_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 292
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx384_start
    .local string rx384_tgt
    .local int rx384_pos
    .local int rx384_off
    .local int rx384_eos
    .local int rx384_rep
    .local pmc rx384_cur
    .local pmc rx384_curclass
    .local pmc rx384_bstack
    .local pmc rx384_cstack
    rx384_start = self."!cursor_start_all"()
    set rx384_cur, rx384_start[0]
    set rx384_tgt, rx384_start[1]
    set rx384_pos, rx384_start[2]
    set rx384_curclass, rx384_start[3]
    set rx384_bstack, rx384_start[4]
    set $I19, rx384_start[5]
    store_lex unicode:"$\x{a2}", rx384_cur
    length rx384_eos, rx384_tgt
    eq $I19, 1, rx384_restart1087
    gt rx384_pos, rx384_eos, rx384_fail1088
    repr_get_attr_int $I11, self, rx384_curclass, "$!from"
    ne $I11, -1, rxscan385_done1094
    goto rxscan385_scan1093
  rxscan385_loop1092:
    inc rx384_pos
    gt rx384_pos, rx384_eos, rx384_fail1088
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!from", rx384_pos
  rxscan385_scan1093:
    nqp_rxmark rx384_bstack, rxscan385_loop1092, rx384_pos, 0
  rxscan385_done1094:
    nqp_rxmark rx384_bstack, rxcap386_fail1096, rx384_pos, 0
    ge rx384_pos, rx384_eos, rx384_fail1088
    substr $S11, rx384_tgt, rx384_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx384_fail1088
    inc rx384_pos
    nqp_rxpeek $I19, rx384_bstack, rxcap386_fail1096
    inc $I19
    set $I11, rx384_bstack[$I19]
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx384_pos)
    rx384_cstack = rx384_cur."!cursor_capture"($P11, "sym")
    goto rxcap386_done1095
  rxcap386_fail1096:
    goto rx384_fail1088
  rxcap386_done1095:
    rx384_cur."!cursor_pass"(rx384_pos, "backslash:sym<t>", 'backtrack'=>1)
    .return (rx384_cur)
  rx384_restart1087:
    repr_get_attr_obj rx384_cstack, rx384_cur, rx384_curclass, "$!cstack"
  rx384_fail1088:
    unless rx384_bstack, rx384_done1086
    pop $I19, rx384_bstack
    if_null rx384_cstack, rx384_cstack_done1091
    unless rx384_cstack, rx384_cstack_done1091
    dec $I19
    set $P11, rx384_cstack[$I19]
  rx384_cstack_done1091:
    pop rx384_rep, rx384_bstack
    pop rx384_pos, rx384_bstack
    pop $I19, rx384_bstack
    lt rx384_pos, -1, rx384_done1086
    lt rx384_pos, 0, rx384_fail1088
    eq $I19, 0, rx384_fail1088
    nqp_islist $I20, rx384_cstack
    unless $I20, rx384_jump1089
    elements $I18, rx384_bstack
    le $I18, 0, rx384_cut1090
    dec $I18
    set $I18, rx384_bstack[$I18]
  rx384_cut1090:
    assign rx384_cstack, $I18
  rx384_jump1089:
    jump $I19
  rx384_done1086:
    rx384_cur."!cursor_fail"()
    .return (rx384_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_77_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 293
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx387_start
    .local string rx387_tgt
    .local int rx387_pos
    .local int rx387_off
    .local int rx387_eos
    .local int rx387_rep
    .local pmc rx387_cur
    .local pmc rx387_curclass
    .local pmc rx387_bstack
    .local pmc rx387_cstack
    rx387_start = self."!cursor_start_all"()
    set rx387_cur, rx387_start[0]
    set rx387_tgt, rx387_start[1]
    set rx387_pos, rx387_start[2]
    set rx387_curclass, rx387_start[3]
    set rx387_bstack, rx387_start[4]
    set $I19, rx387_start[5]
    store_lex unicode:"$\x{a2}", rx387_cur
    length rx387_eos, rx387_tgt
    eq $I19, 1, rx387_restart1099
    gt rx387_pos, rx387_eos, rx387_fail1100
    repr_get_attr_int $I11, self, rx387_curclass, "$!from"
    ne $I11, -1, rxscan388_done1106
    goto rxscan388_scan1105
  rxscan388_loop1104:
    inc rx387_pos
    gt rx387_pos, rx387_eos, rx387_fail1100
    repr_bind_attr_int rx387_cur, rx387_curclass, "$!from", rx387_pos
  rxscan388_scan1105:
    nqp_rxmark rx387_bstack, rxscan388_loop1104, rx387_pos, 0
  rxscan388_done1106:
    nqp_rxmark rx387_bstack, rxcap389_fail1108, rx387_pos, 0
    ge rx387_pos, rx387_eos, rx387_fail1100
    substr $S11, rx387_tgt, rx387_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx387_fail1100
    inc rx387_pos
    nqp_rxpeek $I19, rx387_bstack, rxcap389_fail1108
    inc $I19
    set $I11, rx387_bstack[$I19]
    repr_bind_attr_int rx387_cur, rx387_curclass, "$!pos", rx387_pos
    $P11 = rx387_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx387_pos)
    rx387_cstack = rx387_cur."!cursor_capture"($P11, "sym")
    goto rxcap389_done1107
  rxcap389_fail1108:
    goto rx387_fail1100
  rxcap389_done1107:
    rx387_cur."!cursor_pass"(rx387_pos, "backslash:sym<v>", 'backtrack'=>1)
    .return (rx387_cur)
  rx387_restart1099:
    repr_get_attr_obj rx387_cstack, rx387_cur, rx387_curclass, "$!cstack"
  rx387_fail1100:
    unless rx387_bstack, rx387_done1098
    pop $I19, rx387_bstack
    if_null rx387_cstack, rx387_cstack_done1103
    unless rx387_cstack, rx387_cstack_done1103
    dec $I19
    set $P11, rx387_cstack[$I19]
  rx387_cstack_done1103:
    pop rx387_rep, rx387_bstack
    pop rx387_pos, rx387_bstack
    pop $I19, rx387_bstack
    lt rx387_pos, -1, rx387_done1098
    lt rx387_pos, 0, rx387_fail1100
    eq $I19, 0, rx387_fail1100
    nqp_islist $I20, rx387_cstack
    unless $I20, rx387_jump1101
    elements $I18, rx387_bstack
    le $I18, 0, rx387_cut1102
    dec $I18
    set $I18, rx387_bstack[$I18]
  rx387_cut1102:
    assign rx387_cstack, $I18
  rx387_jump1101:
    jump $I19
  rx387_done1098:
    rx387_cur."!cursor_fail"()
    .return (rx387_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_78_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 294
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx390_start
    .local string rx390_tgt
    .local int rx390_pos
    .local int rx390_off
    .local int rx390_eos
    .local int rx390_rep
    .local pmc rx390_cur
    .local pmc rx390_curclass
    .local pmc rx390_bstack
    .local pmc rx390_cstack
    rx390_start = self."!cursor_start_all"()
    set rx390_cur, rx390_start[0]
    set rx390_tgt, rx390_start[1]
    set rx390_pos, rx390_start[2]
    set rx390_curclass, rx390_start[3]
    set rx390_bstack, rx390_start[4]
    set $I19, rx390_start[5]
    store_lex unicode:"$\x{a2}", rx390_cur
    length rx390_eos, rx390_tgt
    eq $I19, 1, rx390_restart1111
    gt rx390_pos, rx390_eos, rx390_fail1112
    repr_get_attr_int $I11, self, rx390_curclass, "$!from"
    ne $I11, -1, rxscan391_done1118
    goto rxscan391_scan1117
  rxscan391_loop1116:
    inc rx390_pos
    gt rx390_pos, rx390_eos, rx390_fail1112
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!from", rx390_pos
  rxscan391_scan1117:
    nqp_rxmark rx390_bstack, rxscan391_loop1116, rx390_pos, 0
  rxscan391_done1118:
    nqp_rxmark rx390_bstack, rxcap392_fail1120, rx390_pos, 0
    ge rx390_pos, rx390_eos, rx390_fail1112
    substr $S11, rx390_tgt, rx390_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx390_fail1112
    inc rx390_pos
    nqp_rxpeek $I19, rx390_bstack, rxcap392_fail1120
    inc $I19
    set $I11, rx390_bstack[$I19]
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx390_pos)
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "sym")
    goto rxcap392_done1119
  rxcap392_fail1120:
    goto rx390_fail1112
  rxcap392_done1119:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt393_01122
    nqp_push_label $P11, alt393_11124
    nqp_rxmark rx390_bstack, alt393_end1121, -1, 0
    rx390_cur."!alt"(rx390_pos, "alt_nfa__14_1382484121.09159", $P11)
    goto rx390_fail1112
  alt393_01122:
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."octint"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1112
    nqp_rxmark rx390_bstack, rxsubrule394_pass1123, -1, 0
  rxsubrule394_pass1123:
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    goto alt393_end1121
  alt393_11124:
    add $I11, rx390_pos, 1
    gt $I11, rx390_eos, rx390_fail1112
    substr $S10, rx390_tgt, rx390_pos, 1
    ne $S10, ucs4:"[", rx390_fail1112
    add rx390_pos, 1
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."octints"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1112
    nqp_rxmark rx390_bstack, rxsubrule395_pass1125, -1, 0
  rxsubrule395_pass1125:
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    add $I11, rx390_pos, 1
    gt $I11, rx390_eos, rx390_fail1112
    substr $S10, rx390_tgt, rx390_pos, 1
    ne $S10, ucs4:"]", rx390_fail1112
    add rx390_pos, 1
    goto alt393_end1121
  alt393_end1121:
    nqp_rxcommit rx390_bstack, alt393_end1121
    rx390_cur."!cursor_pass"(rx390_pos, "backslash:sym<o>", 'backtrack'=>1)
    .return (rx390_cur)
  rx390_restart1111:
    repr_get_attr_obj rx390_cstack, rx390_cur, rx390_curclass, "$!cstack"
  rx390_fail1112:
    unless rx390_bstack, rx390_done1110
    pop $I19, rx390_bstack
    if_null rx390_cstack, rx390_cstack_done1115
    unless rx390_cstack, rx390_cstack_done1115
    dec $I19
    set $P11, rx390_cstack[$I19]
  rx390_cstack_done1115:
    pop rx390_rep, rx390_bstack
    pop rx390_pos, rx390_bstack
    pop $I19, rx390_bstack
    lt rx390_pos, -1, rx390_done1110
    lt rx390_pos, 0, rx390_fail1112
    eq $I19, 0, rx390_fail1112
    nqp_islist $I20, rx390_cstack
    unless $I20, rx390_jump1113
    elements $I18, rx390_bstack
    le $I18, 0, rx390_cut1114
    dec $I18
    set $I18, rx390_bstack[$I18]
  rx390_cut1114:
    assign rx390_cstack, $I18
  rx390_jump1113:
    jump $I19
  rx390_done1110:
    rx390_cur."!cursor_fail"()
    .return (rx390_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_79_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 295
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx396_start
    .local string rx396_tgt
    .local int rx396_pos
    .local int rx396_off
    .local int rx396_eos
    .local int rx396_rep
    .local pmc rx396_cur
    .local pmc rx396_curclass
    .local pmc rx396_bstack
    .local pmc rx396_cstack
    rx396_start = self."!cursor_start_all"()
    set rx396_cur, rx396_start[0]
    set rx396_tgt, rx396_start[1]
    set rx396_pos, rx396_start[2]
    set rx396_curclass, rx396_start[3]
    set rx396_bstack, rx396_start[4]
    set $I19, rx396_start[5]
    store_lex unicode:"$\x{a2}", rx396_cur
    length rx396_eos, rx396_tgt
    eq $I19, 1, rx396_restart1128
    gt rx396_pos, rx396_eos, rx396_fail1129
    repr_get_attr_int $I11, self, rx396_curclass, "$!from"
    ne $I11, -1, rxscan397_done1135
    goto rxscan397_scan1134
  rxscan397_loop1133:
    inc rx396_pos
    gt rx396_pos, rx396_eos, rx396_fail1129
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!from", rx396_pos
  rxscan397_scan1134:
    nqp_rxmark rx396_bstack, rxscan397_loop1133, rx396_pos, 0
  rxscan397_done1135:
    nqp_rxmark rx396_bstack, rxcap398_fail1137, rx396_pos, 0
    ge rx396_pos, rx396_eos, rx396_fail1129
    substr $S11, rx396_tgt, rx396_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx396_fail1129
    inc rx396_pos
    nqp_rxpeek $I19, rx396_bstack, rxcap398_fail1137
    inc $I19
    set $I11, rx396_bstack[$I19]
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx396_pos)
    rx396_cstack = rx396_cur."!cursor_capture"($P11, "sym")
    goto rxcap398_done1136
  rxcap398_fail1137:
    goto rx396_fail1129
  rxcap398_done1136:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt399_01139
    nqp_push_label $P11, alt399_11141
    nqp_rxmark rx396_bstack, alt399_end1138, -1, 0
    rx396_cur."!alt"(rx396_pos, "alt_nfa__15_1382484121.10623", $P11)
    goto rx396_fail1129
  alt399_01139:
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1129
    nqp_rxmark rx396_bstack, rxsubrule400_pass1140, -1, 0
  rxsubrule400_pass1140:
    rx396_cstack = rx396_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    goto alt399_end1138
  alt399_11141:
    add $I11, rx396_pos, 1
    gt $I11, rx396_eos, rx396_fail1129
    substr $S10, rx396_tgt, rx396_pos, 1
    ne $S10, ucs4:"[", rx396_fail1129
    add rx396_pos, 1
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1129
    nqp_rxmark rx396_bstack, rxsubrule401_pass1142, -1, 0
  rxsubrule401_pass1142:
    rx396_cstack = rx396_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    add $I11, rx396_pos, 1
    gt $I11, rx396_eos, rx396_fail1129
    substr $S10, rx396_tgt, rx396_pos, 1
    ne $S10, ucs4:"]", rx396_fail1129
    add rx396_pos, 1
    goto alt399_end1138
  alt399_end1138:
    nqp_rxcommit rx396_bstack, alt399_end1138
    rx396_cur."!cursor_pass"(rx396_pos, "backslash:sym<x>", 'backtrack'=>1)
    .return (rx396_cur)
  rx396_restart1128:
    repr_get_attr_obj rx396_cstack, rx396_cur, rx396_curclass, "$!cstack"
  rx396_fail1129:
    unless rx396_bstack, rx396_done1127
    pop $I19, rx396_bstack
    if_null rx396_cstack, rx396_cstack_done1132
    unless rx396_cstack, rx396_cstack_done1132
    dec $I19
    set $P11, rx396_cstack[$I19]
  rx396_cstack_done1132:
    pop rx396_rep, rx396_bstack
    pop rx396_pos, rx396_bstack
    pop $I19, rx396_bstack
    lt rx396_pos, -1, rx396_done1127
    lt rx396_pos, 0, rx396_fail1129
    eq $I19, 0, rx396_fail1129
    nqp_islist $I20, rx396_cstack
    unless $I20, rx396_jump1130
    elements $I18, rx396_bstack
    le $I18, 0, rx396_cut1131
    dec $I18
    set $I18, rx396_bstack[$I18]
  rx396_cut1131:
    assign rx396_cstack, $I18
  rx396_jump1130:
    jump $I19
  rx396_done1127:
    rx396_cur."!cursor_fail"()
    .return (rx396_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_80_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx402_start
    .local string rx402_tgt
    .local int rx402_pos
    .local int rx402_off
    .local int rx402_eos
    .local int rx402_rep
    .local pmc rx402_cur
    .local pmc rx402_curclass
    .local pmc rx402_bstack
    .local pmc rx402_cstack
    rx402_start = self."!cursor_start_all"()
    set rx402_cur, rx402_start[0]
    set rx402_tgt, rx402_start[1]
    set rx402_pos, rx402_start[2]
    set rx402_curclass, rx402_start[3]
    set rx402_bstack, rx402_start[4]
    set $I19, rx402_start[5]
    store_lex unicode:"$\x{a2}", rx402_cur
    length rx402_eos, rx402_tgt
    eq $I19, 1, rx402_restart1145
    gt rx402_pos, rx402_eos, rx402_fail1146
    repr_get_attr_int $I11, self, rx402_curclass, "$!from"
    ne $I11, -1, rxscan403_done1152
    goto rxscan403_scan1151
  rxscan403_loop1150:
    inc rx402_pos
    gt rx402_pos, rx402_eos, rx402_fail1146
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!from", rx402_pos
  rxscan403_scan1151:
    nqp_rxmark rx402_bstack, rxscan403_loop1150, rx402_pos, 0
  rxscan403_done1152:
    nqp_rxmark rx402_bstack, rxcap404_fail1154, rx402_pos, 0
    ge rx402_pos, rx402_eos, rx402_fail1146
    substr $S11, rx402_tgt, rx402_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx402_fail1146
    inc rx402_pos
    nqp_rxpeek $I19, rx402_bstack, rxcap404_fail1154
    inc $I19
    set $I11, rx402_bstack[$I19]
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx402_pos)
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "sym")
    goto rxcap404_done1153
  rxcap404_fail1154:
    goto rx402_fail1146
  rxcap404_done1153:
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1146
    nqp_rxmark rx402_bstack, rxsubrule405_pass1155, -1, 0
  rxsubrule405_pass1155:
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    rx402_cur."!cursor_pass"(rx402_pos, "backslash:sym<c>", 'backtrack'=>1)
    .return (rx402_cur)
  rx402_restart1145:
    repr_get_attr_obj rx402_cstack, rx402_cur, rx402_curclass, "$!cstack"
  rx402_fail1146:
    unless rx402_bstack, rx402_done1144
    pop $I19, rx402_bstack
    if_null rx402_cstack, rx402_cstack_done1149
    unless rx402_cstack, rx402_cstack_done1149
    dec $I19
    set $P11, rx402_cstack[$I19]
  rx402_cstack_done1149:
    pop rx402_rep, rx402_bstack
    pop rx402_pos, rx402_bstack
    pop $I19, rx402_bstack
    lt rx402_pos, -1, rx402_done1144
    lt rx402_pos, 0, rx402_fail1146
    eq $I19, 0, rx402_fail1146
    nqp_islist $I20, rx402_cstack
    unless $I20, rx402_jump1147
    elements $I18, rx402_bstack
    le $I18, 0, rx402_cut1148
    dec $I18
    set $I18, rx402_bstack[$I18]
  rx402_cut1148:
    assign rx402_cstack, $I18
  rx402_jump1147:
    jump $I19
  rx402_done1144:
    rx402_cur."!cursor_fail"()
    .return (rx402_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<A>" :subid("cuid_81_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 297
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx406_start
    .local string rx406_tgt
    .local int rx406_pos
    .local int rx406_off
    .local int rx406_eos
    .local int rx406_rep
    .local pmc rx406_cur
    .local pmc rx406_curclass
    .local pmc rx406_bstack
    .local pmc rx406_cstack
    rx406_start = self."!cursor_start_all"()
    set rx406_cur, rx406_start[0]
    set rx406_tgt, rx406_start[1]
    set rx406_pos, rx406_start[2]
    set rx406_curclass, rx406_start[3]
    set rx406_bstack, rx406_start[4]
    set $I19, rx406_start[5]
    store_lex unicode:"$\x{a2}", rx406_cur
    length rx406_eos, rx406_tgt
    eq $I19, 1, rx406_restart1158
    gt rx406_pos, rx406_eos, rx406_fail1159
    repr_get_attr_int $I11, self, rx406_curclass, "$!from"
    ne $I11, -1, rxscan407_done1165
    goto rxscan407_scan1164
  rxscan407_loop1163:
    inc rx406_pos
    index rx406_pos, rx406_tgt, ucs4:"A", rx406_pos
    eq rx406_pos, -1, rx406_fail1159
    gt rx406_pos, rx406_eos, rx406_fail1159
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!from", rx406_pos
  rxscan407_scan1164:
    nqp_rxmark rx406_bstack, rxscan407_loop1163, rx406_pos, 0
  rxscan407_done1165:
    add $I11, rx406_pos, 1
    gt $I11, rx406_eos, rx406_fail1159
    substr $S10, rx406_tgt, rx406_pos, 1
    ne $S10, ucs4:"A", rx406_fail1159
    add rx406_pos, 1
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."obs"("\\\\A as beginning-of-string matcher", "^")
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1159
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    rx406_cur."!cursor_pass"(rx406_pos, "backslash:sym<A>", 'backtrack'=>1)
    .return (rx406_cur)
  rx406_restart1158:
    repr_get_attr_obj rx406_cstack, rx406_cur, rx406_curclass, "$!cstack"
  rx406_fail1159:
    unless rx406_bstack, rx406_done1157
    pop $I19, rx406_bstack
    if_null rx406_cstack, rx406_cstack_done1162
    unless rx406_cstack, rx406_cstack_done1162
    dec $I19
    set $P11, rx406_cstack[$I19]
  rx406_cstack_done1162:
    pop rx406_rep, rx406_bstack
    pop rx406_pos, rx406_bstack
    pop $I19, rx406_bstack
    lt rx406_pos, -1, rx406_done1157
    lt rx406_pos, 0, rx406_fail1159
    eq $I19, 0, rx406_fail1159
    nqp_islist $I20, rx406_cstack
    unless $I20, rx406_jump1160
    elements $I18, rx406_bstack
    le $I18, 0, rx406_cut1161
    dec $I18
    set $I18, rx406_bstack[$I18]
  rx406_cut1161:
    assign rx406_cstack, $I18
  rx406_jump1160:
    jump $I19
  rx406_done1157:
    rx406_cur."!cursor_fail"()
    .return (rx406_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<z>" :subid("cuid_82_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 298
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx409_start
    .local string rx409_tgt
    .local int rx409_pos
    .local int rx409_off
    .local int rx409_eos
    .local int rx409_rep
    .local pmc rx409_cur
    .local pmc rx409_curclass
    .local pmc rx409_bstack
    .local pmc rx409_cstack
    rx409_start = self."!cursor_start_all"()
    set rx409_cur, rx409_start[0]
    set rx409_tgt, rx409_start[1]
    set rx409_pos, rx409_start[2]
    set rx409_curclass, rx409_start[3]
    set rx409_bstack, rx409_start[4]
    set $I19, rx409_start[5]
    store_lex unicode:"$\x{a2}", rx409_cur
    length rx409_eos, rx409_tgt
    eq $I19, 1, rx409_restart1169
    gt rx409_pos, rx409_eos, rx409_fail1170
    repr_get_attr_int $I11, self, rx409_curclass, "$!from"
    ne $I11, -1, rxscan410_done1176
    goto rxscan410_scan1175
  rxscan410_loop1174:
    inc rx409_pos
    index rx409_pos, rx409_tgt, ucs4:"z", rx409_pos
    eq rx409_pos, -1, rx409_fail1170
    gt rx409_pos, rx409_eos, rx409_fail1170
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!from", rx409_pos
  rxscan410_scan1175:
    nqp_rxmark rx409_bstack, rxscan410_loop1174, rx409_pos, 0
  rxscan410_done1176:
    add $I11, rx409_pos, 1
    gt $I11, rx409_eos, rx409_fail1170
    substr $S10, rx409_tgt, rx409_pos, 1
    ne $S10, ucs4:"z", rx409_fail1170
    add rx409_pos, 1
    repr_bind_attr_int rx409_cur, rx409_curclass, "$!pos", rx409_pos
    $P11 = rx409_cur."obs"("\\\\z as end-of-string matcher", "$")
    repr_get_attr_int $I11, $P11, rx409_curclass, "$!pos"
    lt $I11, 0, rx409_fail1170
    repr_get_attr_int rx409_pos, $P11, rx409_curclass, "$!pos"
    rx409_cur."!cursor_pass"(rx409_pos, "backslash:sym<z>", 'backtrack'=>1)
    .return (rx409_cur)
  rx409_restart1169:
    repr_get_attr_obj rx409_cstack, rx409_cur, rx409_curclass, "$!cstack"
  rx409_fail1170:
    unless rx409_bstack, rx409_done1168
    pop $I19, rx409_bstack
    if_null rx409_cstack, rx409_cstack_done1173
    unless rx409_cstack, rx409_cstack_done1173
    dec $I19
    set $P11, rx409_cstack[$I19]
  rx409_cstack_done1173:
    pop rx409_rep, rx409_bstack
    pop rx409_pos, rx409_bstack
    pop $I19, rx409_bstack
    lt rx409_pos, -1, rx409_done1168
    lt rx409_pos, 0, rx409_fail1170
    eq $I19, 0, rx409_fail1170
    nqp_islist $I20, rx409_cstack
    unless $I20, rx409_jump1171
    elements $I18, rx409_bstack
    le $I18, 0, rx409_cut1172
    dec $I18
    set $I18, rx409_bstack[$I18]
  rx409_cut1172:
    assign rx409_cstack, $I18
  rx409_jump1171:
    jump $I19
  rx409_done1168:
    rx409_cur."!cursor_fail"()
    .return (rx409_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Z>" :subid("cuid_83_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 299
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx412_start
    .local string rx412_tgt
    .local int rx412_pos
    .local int rx412_off
    .local int rx412_eos
    .local int rx412_rep
    .local pmc rx412_cur
    .local pmc rx412_curclass
    .local pmc rx412_bstack
    .local pmc rx412_cstack
    rx412_start = self."!cursor_start_all"()
    set rx412_cur, rx412_start[0]
    set rx412_tgt, rx412_start[1]
    set rx412_pos, rx412_start[2]
    set rx412_curclass, rx412_start[3]
    set rx412_bstack, rx412_start[4]
    set $I19, rx412_start[5]
    store_lex unicode:"$\x{a2}", rx412_cur
    length rx412_eos, rx412_tgt
    eq $I19, 1, rx412_restart1180
    gt rx412_pos, rx412_eos, rx412_fail1181
    repr_get_attr_int $I11, self, rx412_curclass, "$!from"
    ne $I11, -1, rxscan413_done1187
    goto rxscan413_scan1186
  rxscan413_loop1185:
    inc rx412_pos
    index rx412_pos, rx412_tgt, ucs4:"Z", rx412_pos
    eq rx412_pos, -1, rx412_fail1181
    gt rx412_pos, rx412_eos, rx412_fail1181
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!from", rx412_pos
  rxscan413_scan1186:
    nqp_rxmark rx412_bstack, rxscan413_loop1185, rx412_pos, 0
  rxscan413_done1187:
    add $I11, rx412_pos, 1
    gt $I11, rx412_eos, rx412_fail1181
    substr $S10, rx412_tgt, rx412_pos, 1
    ne $S10, ucs4:"Z", rx412_fail1181
    add rx412_pos, 1
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."obs"("\\\\Z as end-of-string matcher", "\\\\n?$")
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1181
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    rx412_cur."!cursor_pass"(rx412_pos, "backslash:sym<Z>", 'backtrack'=>1)
    .return (rx412_cur)
  rx412_restart1180:
    repr_get_attr_obj rx412_cstack, rx412_cur, rx412_curclass, "$!cstack"
  rx412_fail1181:
    unless rx412_bstack, rx412_done1179
    pop $I19, rx412_bstack
    if_null rx412_cstack, rx412_cstack_done1184
    unless rx412_cstack, rx412_cstack_done1184
    dec $I19
    set $P11, rx412_cstack[$I19]
  rx412_cstack_done1184:
    pop rx412_rep, rx412_bstack
    pop rx412_pos, rx412_bstack
    pop $I19, rx412_bstack
    lt rx412_pos, -1, rx412_done1179
    lt rx412_pos, 0, rx412_fail1181
    eq $I19, 0, rx412_fail1181
    nqp_islist $I20, rx412_cstack
    unless $I20, rx412_jump1182
    elements $I18, rx412_bstack
    le $I18, 0, rx412_cut1183
    dec $I18
    set $I18, rx412_bstack[$I18]
  rx412_cut1183:
    assign rx412_cstack, $I18
  rx412_jump1182:
    jump $I19
  rx412_done1179:
    rx412_cur."!cursor_fail"()
    .return (rx412_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<Q>" :subid("cuid_84_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 300
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx415_start
    .local string rx415_tgt
    .local int rx415_pos
    .local int rx415_off
    .local int rx415_eos
    .local int rx415_rep
    .local pmc rx415_cur
    .local pmc rx415_curclass
    .local pmc rx415_bstack
    .local pmc rx415_cstack
    rx415_start = self."!cursor_start_all"()
    set rx415_cur, rx415_start[0]
    set rx415_tgt, rx415_start[1]
    set rx415_pos, rx415_start[2]
    set rx415_curclass, rx415_start[3]
    set rx415_bstack, rx415_start[4]
    set $I19, rx415_start[5]
    store_lex unicode:"$\x{a2}", rx415_cur
    length rx415_eos, rx415_tgt
    eq $I19, 1, rx415_restart1191
    gt rx415_pos, rx415_eos, rx415_fail1192
    repr_get_attr_int $I11, self, rx415_curclass, "$!from"
    ne $I11, -1, rxscan416_done1198
    goto rxscan416_scan1197
  rxscan416_loop1196:
    inc rx415_pos
    index rx415_pos, rx415_tgt, ucs4:"Q", rx415_pos
    eq rx415_pos, -1, rx415_fail1192
    gt rx415_pos, rx415_eos, rx415_fail1192
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!from", rx415_pos
  rxscan416_scan1197:
    nqp_rxmark rx415_bstack, rxscan416_loop1196, rx415_pos, 0
  rxscan416_done1198:
    add $I11, rx415_pos, 1
    gt $I11, rx415_eos, rx415_fail1192
    substr $S10, rx415_tgt, rx415_pos, 1
    ne $S10, ucs4:"Q", rx415_fail1192
    add rx415_pos, 1
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!pos", rx415_pos
    $P11 = rx415_cur."obs"("\\\\Q as quotemeta", "quotes or literal variable match")
    repr_get_attr_int $I11, $P11, rx415_curclass, "$!pos"
    lt $I11, 0, rx415_fail1192
    repr_get_attr_int rx415_pos, $P11, rx415_curclass, "$!pos"
    rx415_cur."!cursor_pass"(rx415_pos, "backslash:sym<Q>", 'backtrack'=>1)
    .return (rx415_cur)
  rx415_restart1191:
    repr_get_attr_obj rx415_cstack, rx415_cur, rx415_curclass, "$!cstack"
  rx415_fail1192:
    unless rx415_bstack, rx415_done1190
    pop $I19, rx415_bstack
    if_null rx415_cstack, rx415_cstack_done1195
    unless rx415_cstack, rx415_cstack_done1195
    dec $I19
    set $P11, rx415_cstack[$I19]
  rx415_cstack_done1195:
    pop rx415_rep, rx415_bstack
    pop rx415_pos, rx415_bstack
    pop $I19, rx415_bstack
    lt rx415_pos, -1, rx415_done1190
    lt rx415_pos, 0, rx415_fail1192
    eq $I19, 0, rx415_fail1192
    nqp_islist $I20, rx415_cstack
    unless $I20, rx415_jump1193
    elements $I18, rx415_bstack
    le $I18, 0, rx415_cut1194
    dec $I18
    set $I18, rx415_bstack[$I18]
  rx415_cut1194:
    assign rx415_cstack, $I18
  rx415_jump1193:
    jump $I19
  rx415_done1190:
    rx415_cur."!cursor_fail"()
    .return (rx415_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unrec>" :subid("cuid_85_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 301
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_230_1382484119.90237' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_86_1382484119.90237' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_231_1382484119.90237' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx418_start
    .local string rx418_tgt
    .local int rx418_pos
    .local int rx418_off
    .local int rx418_eos
    .local int rx418_rep
    .local pmc rx418_cur
    .local pmc rx418_curclass
    .local pmc rx418_bstack
    .local pmc rx418_cstack
    rx418_start = self."!cursor_start_all"()
    set rx418_cur, rx418_start[0]
    set rx418_tgt, rx418_start[1]
    set rx418_pos, rx418_start[2]
    set rx418_curclass, rx418_start[3]
    set rx418_bstack, rx418_start[4]
    set $I19, rx418_start[5]
    store_lex unicode:"$\x{a2}", rx418_cur
    length rx418_eos, rx418_tgt
    eq $I19, 1, rx418_restart1202
    gt rx418_pos, rx418_eos, rx418_fail1203
    repr_get_attr_int $I11, self, rx418_curclass, "$!from"
    ne $I11, -1, rxscan419_done1209
    goto rxscan419_scan1208
  rxscan419_loop1207:
    inc rx418_pos
    gt rx418_pos, rx418_eos, rx418_fail1203
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!from", rx418_pos
  rxscan419_scan1208:
    nqp_rxmark rx418_bstack, rxscan419_loop1207, rx418_pos, 0
  rxscan419_done1209:
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!pos", rx418_pos
    store_lex unicode:"$\x{a2}", rx418_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_230_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_86_1382484119.90237' 
    capture_lex $P5004
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!pos", rx418_pos
    $P11 = rx418_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx418_curclass, "$!pos"
    lt $I11, 0, rx418_fail1203
    nqp_rxmark rx418_bstack, rxsubrule422_pass1220, -1, 0
  rxsubrule422_pass1220:
    rx418_cstack = rx418_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx418_pos, $P11, rx418_curclass, "$!pos"
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!pos", rx418_pos
    store_lex unicode:"$\x{a2}", rx418_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_231_1382484119.90237' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx418_cur."!cursor_pass"(rx418_pos, "backslash:sym<unrec>", 'backtrack'=>1)
    .return (rx418_cur)
  rx418_restart1202:
    repr_get_attr_obj rx418_cstack, rx418_cur, rx418_curclass, "$!cstack"
  rx418_fail1203:
    unless rx418_bstack, rx418_done1201
    pop $I19, rx418_bstack
    if_null rx418_cstack, rx418_cstack_done1206
    unless rx418_cstack, rx418_cstack_done1206
    dec $I19
    set $P11, rx418_cstack[$I19]
  rx418_cstack_done1206:
    pop rx418_rep, rx418_bstack
    pop rx418_pos, rx418_bstack
    pop $I19, rx418_bstack
    lt rx418_pos, -1, rx418_done1201
    lt rx418_pos, 0, rx418_fail1203
    eq $I19, 0, rx418_fail1203
    nqp_islist $I20, rx418_cstack
    unless $I20, rx418_jump1204
    elements $I18, rx418_bstack
    le $I18, 0, rx418_cut1205
    dec $I18
    set $I18, rx418_bstack[$I18]
  rx418_cut1205:
    assign rx418_cstack, $I18
  rx418_jump1204:
    jump $I19
  rx418_done1201:
    rx418_cur."!cursor_fail"()
    .return (rx418_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1382484119.90237") :anon :lex :outer("cuid_85_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 301

    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_86_1382484119.90237") :anon :lex :outer("cuid_85_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx420_start
    .local string rx420_tgt
    .local int rx420_pos
    .local int rx420_off
    .local int rx420_eos
    .local int rx420_rep
    .local pmc rx420_cur
    .local pmc rx420_curclass
    .local pmc rx420_bstack
    .local pmc rx420_cstack
    rx420_start = self."!cursor_start_all"()
    set rx420_cur, rx420_start[0]
    set rx420_tgt, rx420_start[1]
    set rx420_pos, rx420_start[2]
    set rx420_curclass, rx420_start[3]
    set rx420_bstack, rx420_start[4]
    set $I19, rx420_start[5]
    store_lex unicode:"$\x{a2}", rx420_cur
    length rx420_eos, rx420_tgt
    eq $I19, 1, rx420_restart1212
    gt rx420_pos, rx420_eos, rx420_fail1213
    repr_get_attr_int $I11, self, rx420_curclass, "$!from"
    ne $I11, -1, rxscan421_done1219
    goto rxscan421_scan1218
  rxscan421_loop1217:
    inc rx420_pos
    gt rx420_pos, rx420_eos, rx420_fail1213
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!from", rx420_pos
  rxscan421_scan1218:
    nqp_rxmark rx420_bstack, rxscan421_loop1217, rx420_pos, 0
  rxscan421_done1219:
    ge rx420_pos, rx420_eos, rx420_fail1213
    is_cclass $I11, .CCLASS_WORD, rx420_tgt, rx420_pos
    unless $I11, rx420_fail1213
    add rx420_pos, 1
    rx420_cur."!cursor_pass"(rx420_pos, 'backtrack'=>1)
    .return (rx420_cur)
  rx420_restart1212:
    repr_get_attr_obj rx420_cstack, rx420_cur, rx420_curclass, "$!cstack"
  rx420_fail1213:
    unless rx420_bstack, rx420_done1211
    pop $I19, rx420_bstack
    if_null rx420_cstack, rx420_cstack_done1216
    unless rx420_cstack, rx420_cstack_done1216
    dec $I19
    set $P11, rx420_cstack[$I19]
  rx420_cstack_done1216:
    pop rx420_rep, rx420_bstack
    pop rx420_pos, rx420_bstack
    pop $I19, rx420_bstack
    lt rx420_pos, -1, rx420_done1211
    lt rx420_pos, 0, rx420_fail1213
    eq $I19, 0, rx420_fail1213
    nqp_islist $I20, rx420_cstack
    unless $I20, rx420_jump1214
    elements $I18, rx420_bstack
    le $I18, 0, rx420_cut1215
    dec $I18
    set $I18, rx420_bstack[$I18]
  rx420_cut1215:
    assign rx420_cstack, $I18
  rx420_jump1214:
    jump $I19
  rx420_done1211:
    rx420_cur."!cursor_fail"()
    .return (rx420_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1382484119.90237") :anon :lex :outer("cuid_85_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 301
    .local pmc fb_tmp_14 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$/"
    set fb_tmp_14, $P5003
    repr_defined $I5001, fb_tmp_14
    unless $I5001 goto if423_else1221 
    set $P5004, fb_tmp_14[0]
    set $P5006, $P5004
    goto if423_end1222
  if423_else1221:
    null $P5005
    set $P5006, $P5005
  if423_end1222:
    unless_null $P5006, vivi_4241223
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_4241223:
    $P5008 = $P5006."Str"()
    $P5009 = $P5001."throw_unrecog_backslash_seq"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<unsp>" :subid("cuid_87_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 302
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx425_start
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    rx425_start = self."!cursor_start_all"()
    set rx425_cur, rx425_start[0]
    set rx425_tgt, rx425_start[1]
    set rx425_pos, rx425_start[2]
    set rx425_curclass, rx425_start[3]
    set rx425_bstack, rx425_start[4]
    set $I19, rx425_start[5]
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1226
    gt rx425_pos, rx425_eos, rx425_fail1227
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1233
    goto rxscan426_scan1232
  rxscan426_loop1231:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1227
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1232:
    nqp_rxmark rx425_bstack, rxscan426_loop1231, rx425_pos, 0
  rxscan426_done1233:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt427_01235
    nqp_push_label $P11, alt427_11236
    nqp_rxmark rx425_bstack, alt427_end1234, -1, 0
    rx425_cur."!alt"(rx425_pos, "alt_nfa__16_1382484121.20048", $P11)
    goto rx425_fail1227
  alt427_01235:
    ge rx425_pos, rx425_eos, rx425_fail1227
    is_cclass $I11, .CCLASS_WHITESPACE, rx425_tgt, rx425_pos
    unless $I11, rx425_fail1227
    add rx425_pos, 1
    goto alt427_end1234
  alt427_11236:
    add $I11, rx425_pos, 1
    gt $I11, rx425_eos, rx425_fail1227
    substr $S10, rx425_tgt, rx425_pos, 1
    ne $S10, ucs4:"#", rx425_fail1227
    add rx425_pos, 1
    goto alt427_end1234
  alt427_end1234:
    nqp_rxcommit rx425_bstack, alt427_end1234
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."panic"("Unspace not allowed in regex")
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1227
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    rx425_cur."!cursor_pass"(rx425_pos, "backslash:sym<unsp>", 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1226:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1227:
    unless rx425_bstack, rx425_done1225
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1230
    unless rx425_cstack, rx425_cstack_done1230
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1230:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1225
    lt rx425_pos, 0, rx425_fail1227
    eq $I19, 0, rx425_fail1227
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1228
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1229
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1229:
    assign rx425_cstack, $I18
  rx425_jump1228:
    jump $I19
  rx425_done1225:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_88_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 303
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx429_start
    .local string rx429_tgt
    .local int rx429_pos
    .local int rx429_off
    .local int rx429_eos
    .local int rx429_rep
    .local pmc rx429_cur
    .local pmc rx429_curclass
    .local pmc rx429_bstack
    .local pmc rx429_cstack
    rx429_start = self."!cursor_start_all"()
    set rx429_cur, rx429_start[0]
    set rx429_tgt, rx429_start[1]
    set rx429_pos, rx429_start[2]
    set rx429_curclass, rx429_start[3]
    set rx429_bstack, rx429_start[4]
    set $I19, rx429_start[5]
    store_lex unicode:"$\x{a2}", rx429_cur
    length rx429_eos, rx429_tgt
    eq $I19, 1, rx429_restart1240
    gt rx429_pos, rx429_eos, rx429_fail1241
    repr_get_attr_int $I11, self, rx429_curclass, "$!from"
    ne $I11, -1, rxscan430_done1247
    goto rxscan430_scan1246
  rxscan430_loop1245:
    inc rx429_pos
    gt rx429_pos, rx429_eos, rx429_fail1241
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!from", rx429_pos
  rxscan430_scan1246:
    nqp_rxmark rx429_bstack, rxscan430_loop1245, rx429_pos, 0
  rxscan430_done1247:
    ge rx429_pos, rx429_eos, rx429_fail1241
    is_cclass $I11, .CCLASS_WORD, rx429_tgt, rx429_pos
    if $I11, rx429_fail1241
    add rx429_pos, 1
    rx429_cur."!cursor_pass"(rx429_pos, "backslash:sym<misc>", 'backtrack'=>1)
    .return (rx429_cur)
  rx429_restart1240:
    repr_get_attr_obj rx429_cstack, rx429_cur, rx429_curclass, "$!cstack"
  rx429_fail1241:
    unless rx429_bstack, rx429_done1239
    pop $I19, rx429_bstack
    if_null rx429_cstack, rx429_cstack_done1244
    unless rx429_cstack, rx429_cstack_done1244
    dec $I19
    set $P11, rx429_cstack[$I19]
  rx429_cstack_done1244:
    pop rx429_rep, rx429_bstack
    pop rx429_pos, rx429_bstack
    pop $I19, rx429_bstack
    lt rx429_pos, -1, rx429_done1239
    lt rx429_pos, 0, rx429_fail1241
    eq $I19, 0, rx429_fail1241
    nqp_islist $I20, rx429_cstack
    unless $I20, rx429_jump1242
    elements $I18, rx429_bstack
    le $I18, 0, rx429_cut1243
    dec $I18
    set $I18, rx429_bstack[$I18]
  rx429_cut1243:
    assign rx429_cstack, $I18
  rx429_jump1242:
    jump $I19
  rx429_done1239:
    rx429_cur."!cursor_fail"()
    .return (rx429_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash" :subid("cuid_89_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 305
    .param pmc self 
    $P5001 = self."!protoregex"("cclass_backslash")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<s>" :subid("cuid_90_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 306
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx431_start
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    rx431_start = self."!cursor_start_all"()
    set rx431_cur, rx431_start[0]
    set rx431_tgt, rx431_start[1]
    set rx431_pos, rx431_start[2]
    set rx431_curclass, rx431_start[3]
    set rx431_bstack, rx431_start[4]
    set $I19, rx431_start[5]
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1250
    gt rx431_pos, rx431_eos, rx431_fail1251
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1257
    goto rxscan432_scan1256
  rxscan432_loop1255:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1251
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1256:
    nqp_rxmark rx431_bstack, rxscan432_loop1255, rx431_pos, 0
  rxscan432_done1257:
    nqp_rxmark rx431_bstack, rxcap433_fail1259, rx431_pos, 0
    ge rx431_pos, rx431_eos, rx431_fail1251
    substr $S11, rx431_tgt, rx431_pos, 1
    index $I11, ucs4:"dDnNsSwW", $S11
    lt $I11, 0, rx431_fail1251
    inc rx431_pos
    nqp_rxpeek $I19, rx431_bstack, rxcap433_fail1259
    inc $I19
    set $I11, rx431_bstack[$I19]
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx431_pos)
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "sym")
    goto rxcap433_done1258
  rxcap433_fail1259:
    goto rx431_fail1251
  rxcap433_done1258:
    rx431_cur."!cursor_pass"(rx431_pos, "cclass_backslash:sym<s>", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1250:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1251:
    unless rx431_bstack, rx431_done1249
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1254
    unless rx431_cstack, rx431_cstack_done1254
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1254:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1249
    lt rx431_pos, 0, rx431_fail1251
    eq $I19, 0, rx431_fail1251
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1252
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1253
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1253:
    assign rx431_cstack, $I18
  rx431_jump1252:
    jump $I19
  rx431_done1249:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<b>" :subid("cuid_91_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 307
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx434_start
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    rx434_start = self."!cursor_start_all"()
    set rx434_cur, rx434_start[0]
    set rx434_tgt, rx434_start[1]
    set rx434_pos, rx434_start[2]
    set rx434_curclass, rx434_start[3]
    set rx434_bstack, rx434_start[4]
    set $I19, rx434_start[5]
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1262
    gt rx434_pos, rx434_eos, rx434_fail1263
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1269
    goto rxscan435_scan1268
  rxscan435_loop1267:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1263
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1268:
    nqp_rxmark rx434_bstack, rxscan435_loop1267, rx434_pos, 0
  rxscan435_done1269:
    nqp_rxmark rx434_bstack, rxcap436_fail1271, rx434_pos, 0
    ge rx434_pos, rx434_eos, rx434_fail1263
    substr $S11, rx434_tgt, rx434_pos, 1
    index $I11, ucs4:"bB", $S11
    lt $I11, 0, rx434_fail1263
    inc rx434_pos
    nqp_rxpeek $I19, rx434_bstack, rxcap436_fail1271
    inc $I19
    set $I11, rx434_bstack[$I19]
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx434_pos)
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "sym")
    goto rxcap436_done1270
  rxcap436_fail1271:
    goto rx434_fail1263
  rxcap436_done1270:
    rx434_cur."!cursor_pass"(rx434_pos, "cclass_backslash:sym<b>", 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1262:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1263:
    unless rx434_bstack, rx434_done1261
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1266
    unless rx434_cstack, rx434_cstack_done1266
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1266:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1261
    lt rx434_pos, 0, rx434_fail1263
    eq $I19, 0, rx434_fail1263
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1264
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1265
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1265:
    assign rx434_cstack, $I18
  rx434_jump1264:
    jump $I19
  rx434_done1261:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<e>" :subid("cuid_92_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 308
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx437_start
    .local string rx437_tgt
    .local int rx437_pos
    .local int rx437_off
    .local int rx437_eos
    .local int rx437_rep
    .local pmc rx437_cur
    .local pmc rx437_curclass
    .local pmc rx437_bstack
    .local pmc rx437_cstack
    rx437_start = self."!cursor_start_all"()
    set rx437_cur, rx437_start[0]
    set rx437_tgt, rx437_start[1]
    set rx437_pos, rx437_start[2]
    set rx437_curclass, rx437_start[3]
    set rx437_bstack, rx437_start[4]
    set $I19, rx437_start[5]
    store_lex unicode:"$\x{a2}", rx437_cur
    length rx437_eos, rx437_tgt
    eq $I19, 1, rx437_restart1274
    gt rx437_pos, rx437_eos, rx437_fail1275
    repr_get_attr_int $I11, self, rx437_curclass, "$!from"
    ne $I11, -1, rxscan438_done1281
    goto rxscan438_scan1280
  rxscan438_loop1279:
    inc rx437_pos
    gt rx437_pos, rx437_eos, rx437_fail1275
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!from", rx437_pos
  rxscan438_scan1280:
    nqp_rxmark rx437_bstack, rxscan438_loop1279, rx437_pos, 0
  rxscan438_done1281:
    nqp_rxmark rx437_bstack, rxcap439_fail1283, rx437_pos, 0
    ge rx437_pos, rx437_eos, rx437_fail1275
    substr $S11, rx437_tgt, rx437_pos, 1
    index $I11, ucs4:"eE", $S11
    lt $I11, 0, rx437_fail1275
    inc rx437_pos
    nqp_rxpeek $I19, rx437_bstack, rxcap439_fail1283
    inc $I19
    set $I11, rx437_bstack[$I19]
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!pos", rx437_pos
    $P11 = rx437_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx437_pos)
    rx437_cstack = rx437_cur."!cursor_capture"($P11, "sym")
    goto rxcap439_done1282
  rxcap439_fail1283:
    goto rx437_fail1275
  rxcap439_done1282:
    rx437_cur."!cursor_pass"(rx437_pos, "cclass_backslash:sym<e>", 'backtrack'=>1)
    .return (rx437_cur)
  rx437_restart1274:
    repr_get_attr_obj rx437_cstack, rx437_cur, rx437_curclass, "$!cstack"
  rx437_fail1275:
    unless rx437_bstack, rx437_done1273
    pop $I19, rx437_bstack
    if_null rx437_cstack, rx437_cstack_done1278
    unless rx437_cstack, rx437_cstack_done1278
    dec $I19
    set $P11, rx437_cstack[$I19]
  rx437_cstack_done1278:
    pop rx437_rep, rx437_bstack
    pop rx437_pos, rx437_bstack
    pop $I19, rx437_bstack
    lt rx437_pos, -1, rx437_done1273
    lt rx437_pos, 0, rx437_fail1275
    eq $I19, 0, rx437_fail1275
    nqp_islist $I20, rx437_cstack
    unless $I20, rx437_jump1276
    elements $I18, rx437_bstack
    le $I18, 0, rx437_cut1277
    dec $I18
    set $I18, rx437_bstack[$I18]
  rx437_cut1277:
    assign rx437_cstack, $I18
  rx437_jump1276:
    jump $I19
  rx437_done1273:
    rx437_cur."!cursor_fail"()
    .return (rx437_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<f>" :subid("cuid_93_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 309
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx440_start
    .local string rx440_tgt
    .local int rx440_pos
    .local int rx440_off
    .local int rx440_eos
    .local int rx440_rep
    .local pmc rx440_cur
    .local pmc rx440_curclass
    .local pmc rx440_bstack
    .local pmc rx440_cstack
    rx440_start = self."!cursor_start_all"()
    set rx440_cur, rx440_start[0]
    set rx440_tgt, rx440_start[1]
    set rx440_pos, rx440_start[2]
    set rx440_curclass, rx440_start[3]
    set rx440_bstack, rx440_start[4]
    set $I19, rx440_start[5]
    store_lex unicode:"$\x{a2}", rx440_cur
    length rx440_eos, rx440_tgt
    eq $I19, 1, rx440_restart1286
    gt rx440_pos, rx440_eos, rx440_fail1287
    repr_get_attr_int $I11, self, rx440_curclass, "$!from"
    ne $I11, -1, rxscan441_done1293
    goto rxscan441_scan1292
  rxscan441_loop1291:
    inc rx440_pos
    gt rx440_pos, rx440_eos, rx440_fail1287
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!from", rx440_pos
  rxscan441_scan1292:
    nqp_rxmark rx440_bstack, rxscan441_loop1291, rx440_pos, 0
  rxscan441_done1293:
    nqp_rxmark rx440_bstack, rxcap442_fail1295, rx440_pos, 0
    ge rx440_pos, rx440_eos, rx440_fail1287
    substr $S11, rx440_tgt, rx440_pos, 1
    index $I11, ucs4:"fF", $S11
    lt $I11, 0, rx440_fail1287
    inc rx440_pos
    nqp_rxpeek $I19, rx440_bstack, rxcap442_fail1295
    inc $I19
    set $I11, rx440_bstack[$I19]
    repr_bind_attr_int rx440_cur, rx440_curclass, "$!pos", rx440_pos
    $P11 = rx440_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx440_pos)
    rx440_cstack = rx440_cur."!cursor_capture"($P11, "sym")
    goto rxcap442_done1294
  rxcap442_fail1295:
    goto rx440_fail1287
  rxcap442_done1294:
    rx440_cur."!cursor_pass"(rx440_pos, "cclass_backslash:sym<f>", 'backtrack'=>1)
    .return (rx440_cur)
  rx440_restart1286:
    repr_get_attr_obj rx440_cstack, rx440_cur, rx440_curclass, "$!cstack"
  rx440_fail1287:
    unless rx440_bstack, rx440_done1285
    pop $I19, rx440_bstack
    if_null rx440_cstack, rx440_cstack_done1290
    unless rx440_cstack, rx440_cstack_done1290
    dec $I19
    set $P11, rx440_cstack[$I19]
  rx440_cstack_done1290:
    pop rx440_rep, rx440_bstack
    pop rx440_pos, rx440_bstack
    pop $I19, rx440_bstack
    lt rx440_pos, -1, rx440_done1285
    lt rx440_pos, 0, rx440_fail1287
    eq $I19, 0, rx440_fail1287
    nqp_islist $I20, rx440_cstack
    unless $I20, rx440_jump1288
    elements $I18, rx440_bstack
    le $I18, 0, rx440_cut1289
    dec $I18
    set $I18, rx440_bstack[$I18]
  rx440_cut1289:
    assign rx440_cstack, $I18
  rx440_jump1288:
    jump $I19
  rx440_done1285:
    rx440_cur."!cursor_fail"()
    .return (rx440_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<h>" :subid("cuid_94_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 310
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx443_start
    .local string rx443_tgt
    .local int rx443_pos
    .local int rx443_off
    .local int rx443_eos
    .local int rx443_rep
    .local pmc rx443_cur
    .local pmc rx443_curclass
    .local pmc rx443_bstack
    .local pmc rx443_cstack
    rx443_start = self."!cursor_start_all"()
    set rx443_cur, rx443_start[0]
    set rx443_tgt, rx443_start[1]
    set rx443_pos, rx443_start[2]
    set rx443_curclass, rx443_start[3]
    set rx443_bstack, rx443_start[4]
    set $I19, rx443_start[5]
    store_lex unicode:"$\x{a2}", rx443_cur
    length rx443_eos, rx443_tgt
    eq $I19, 1, rx443_restart1298
    gt rx443_pos, rx443_eos, rx443_fail1299
    repr_get_attr_int $I11, self, rx443_curclass, "$!from"
    ne $I11, -1, rxscan444_done1305
    goto rxscan444_scan1304
  rxscan444_loop1303:
    inc rx443_pos
    gt rx443_pos, rx443_eos, rx443_fail1299
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!from", rx443_pos
  rxscan444_scan1304:
    nqp_rxmark rx443_bstack, rxscan444_loop1303, rx443_pos, 0
  rxscan444_done1305:
    nqp_rxmark rx443_bstack, rxcap445_fail1307, rx443_pos, 0
    ge rx443_pos, rx443_eos, rx443_fail1299
    substr $S11, rx443_tgt, rx443_pos, 1
    index $I11, ucs4:"hH", $S11
    lt $I11, 0, rx443_fail1299
    inc rx443_pos
    nqp_rxpeek $I19, rx443_bstack, rxcap445_fail1307
    inc $I19
    set $I11, rx443_bstack[$I19]
    repr_bind_attr_int rx443_cur, rx443_curclass, "$!pos", rx443_pos
    $P11 = rx443_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx443_pos)
    rx443_cstack = rx443_cur."!cursor_capture"($P11, "sym")
    goto rxcap445_done1306
  rxcap445_fail1307:
    goto rx443_fail1299
  rxcap445_done1306:
    rx443_cur."!cursor_pass"(rx443_pos, "cclass_backslash:sym<h>", 'backtrack'=>1)
    .return (rx443_cur)
  rx443_restart1298:
    repr_get_attr_obj rx443_cstack, rx443_cur, rx443_curclass, "$!cstack"
  rx443_fail1299:
    unless rx443_bstack, rx443_done1297
    pop $I19, rx443_bstack
    if_null rx443_cstack, rx443_cstack_done1302
    unless rx443_cstack, rx443_cstack_done1302
    dec $I19
    set $P11, rx443_cstack[$I19]
  rx443_cstack_done1302:
    pop rx443_rep, rx443_bstack
    pop rx443_pos, rx443_bstack
    pop $I19, rx443_bstack
    lt rx443_pos, -1, rx443_done1297
    lt rx443_pos, 0, rx443_fail1299
    eq $I19, 0, rx443_fail1299
    nqp_islist $I20, rx443_cstack
    unless $I20, rx443_jump1300
    elements $I18, rx443_bstack
    le $I18, 0, rx443_cut1301
    dec $I18
    set $I18, rx443_bstack[$I18]
  rx443_cut1301:
    assign rx443_cstack, $I18
  rx443_jump1300:
    jump $I19
  rx443_done1297:
    rx443_cur."!cursor_fail"()
    .return (rx443_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<r>" :subid("cuid_95_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 311
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx446_start
    .local string rx446_tgt
    .local int rx446_pos
    .local int rx446_off
    .local int rx446_eos
    .local int rx446_rep
    .local pmc rx446_cur
    .local pmc rx446_curclass
    .local pmc rx446_bstack
    .local pmc rx446_cstack
    rx446_start = self."!cursor_start_all"()
    set rx446_cur, rx446_start[0]
    set rx446_tgt, rx446_start[1]
    set rx446_pos, rx446_start[2]
    set rx446_curclass, rx446_start[3]
    set rx446_bstack, rx446_start[4]
    set $I19, rx446_start[5]
    store_lex unicode:"$\x{a2}", rx446_cur
    length rx446_eos, rx446_tgt
    eq $I19, 1, rx446_restart1310
    gt rx446_pos, rx446_eos, rx446_fail1311
    repr_get_attr_int $I11, self, rx446_curclass, "$!from"
    ne $I11, -1, rxscan447_done1317
    goto rxscan447_scan1316
  rxscan447_loop1315:
    inc rx446_pos
    gt rx446_pos, rx446_eos, rx446_fail1311
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!from", rx446_pos
  rxscan447_scan1316:
    nqp_rxmark rx446_bstack, rxscan447_loop1315, rx446_pos, 0
  rxscan447_done1317:
    nqp_rxmark rx446_bstack, rxcap448_fail1319, rx446_pos, 0
    ge rx446_pos, rx446_eos, rx446_fail1311
    substr $S11, rx446_tgt, rx446_pos, 1
    index $I11, ucs4:"rR", $S11
    lt $I11, 0, rx446_fail1311
    inc rx446_pos
    nqp_rxpeek $I19, rx446_bstack, rxcap448_fail1319
    inc $I19
    set $I11, rx446_bstack[$I19]
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!pos", rx446_pos
    $P11 = rx446_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx446_pos)
    rx446_cstack = rx446_cur."!cursor_capture"($P11, "sym")
    goto rxcap448_done1318
  rxcap448_fail1319:
    goto rx446_fail1311
  rxcap448_done1318:
    rx446_cur."!cursor_pass"(rx446_pos, "cclass_backslash:sym<r>", 'backtrack'=>1)
    .return (rx446_cur)
  rx446_restart1310:
    repr_get_attr_obj rx446_cstack, rx446_cur, rx446_curclass, "$!cstack"
  rx446_fail1311:
    unless rx446_bstack, rx446_done1309
    pop $I19, rx446_bstack
    if_null rx446_cstack, rx446_cstack_done1314
    unless rx446_cstack, rx446_cstack_done1314
    dec $I19
    set $P11, rx446_cstack[$I19]
  rx446_cstack_done1314:
    pop rx446_rep, rx446_bstack
    pop rx446_pos, rx446_bstack
    pop $I19, rx446_bstack
    lt rx446_pos, -1, rx446_done1309
    lt rx446_pos, 0, rx446_fail1311
    eq $I19, 0, rx446_fail1311
    nqp_islist $I20, rx446_cstack
    unless $I20, rx446_jump1312
    elements $I18, rx446_bstack
    le $I18, 0, rx446_cut1313
    dec $I18
    set $I18, rx446_bstack[$I18]
  rx446_cut1313:
    assign rx446_cstack, $I18
  rx446_jump1312:
    jump $I19
  rx446_done1309:
    rx446_cur."!cursor_fail"()
    .return (rx446_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<t>" :subid("cuid_96_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 312
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx449_start
    .local string rx449_tgt
    .local int rx449_pos
    .local int rx449_off
    .local int rx449_eos
    .local int rx449_rep
    .local pmc rx449_cur
    .local pmc rx449_curclass
    .local pmc rx449_bstack
    .local pmc rx449_cstack
    rx449_start = self."!cursor_start_all"()
    set rx449_cur, rx449_start[0]
    set rx449_tgt, rx449_start[1]
    set rx449_pos, rx449_start[2]
    set rx449_curclass, rx449_start[3]
    set rx449_bstack, rx449_start[4]
    set $I19, rx449_start[5]
    store_lex unicode:"$\x{a2}", rx449_cur
    length rx449_eos, rx449_tgt
    eq $I19, 1, rx449_restart1322
    gt rx449_pos, rx449_eos, rx449_fail1323
    repr_get_attr_int $I11, self, rx449_curclass, "$!from"
    ne $I11, -1, rxscan450_done1329
    goto rxscan450_scan1328
  rxscan450_loop1327:
    inc rx449_pos
    gt rx449_pos, rx449_eos, rx449_fail1323
    repr_bind_attr_int rx449_cur, rx449_curclass, "$!from", rx449_pos
  rxscan450_scan1328:
    nqp_rxmark rx449_bstack, rxscan450_loop1327, rx449_pos, 0
  rxscan450_done1329:
    nqp_rxmark rx449_bstack, rxcap451_fail1331, rx449_pos, 0
    ge rx449_pos, rx449_eos, rx449_fail1323
    substr $S11, rx449_tgt, rx449_pos, 1
    index $I11, ucs4:"tT", $S11
    lt $I11, 0, rx449_fail1323
    inc rx449_pos
    nqp_rxpeek $I19, rx449_bstack, rxcap451_fail1331
    inc $I19
    set $I11, rx449_bstack[$I19]
    repr_bind_attr_int rx449_cur, rx449_curclass, "$!pos", rx449_pos
    $P11 = rx449_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx449_pos)
    rx449_cstack = rx449_cur."!cursor_capture"($P11, "sym")
    goto rxcap451_done1330
  rxcap451_fail1331:
    goto rx449_fail1323
  rxcap451_done1330:
    rx449_cur."!cursor_pass"(rx449_pos, "cclass_backslash:sym<t>", 'backtrack'=>1)
    .return (rx449_cur)
  rx449_restart1322:
    repr_get_attr_obj rx449_cstack, rx449_cur, rx449_curclass, "$!cstack"
  rx449_fail1323:
    unless rx449_bstack, rx449_done1321
    pop $I19, rx449_bstack
    if_null rx449_cstack, rx449_cstack_done1326
    unless rx449_cstack, rx449_cstack_done1326
    dec $I19
    set $P11, rx449_cstack[$I19]
  rx449_cstack_done1326:
    pop rx449_rep, rx449_bstack
    pop rx449_pos, rx449_bstack
    pop $I19, rx449_bstack
    lt rx449_pos, -1, rx449_done1321
    lt rx449_pos, 0, rx449_fail1323
    eq $I19, 0, rx449_fail1323
    nqp_islist $I20, rx449_cstack
    unless $I20, rx449_jump1324
    elements $I18, rx449_bstack
    le $I18, 0, rx449_cut1325
    dec $I18
    set $I18, rx449_bstack[$I18]
  rx449_cut1325:
    assign rx449_cstack, $I18
  rx449_jump1324:
    jump $I19
  rx449_done1321:
    rx449_cur."!cursor_fail"()
    .return (rx449_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<v>" :subid("cuid_97_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 313
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx452_start
    .local string rx452_tgt
    .local int rx452_pos
    .local int rx452_off
    .local int rx452_eos
    .local int rx452_rep
    .local pmc rx452_cur
    .local pmc rx452_curclass
    .local pmc rx452_bstack
    .local pmc rx452_cstack
    rx452_start = self."!cursor_start_all"()
    set rx452_cur, rx452_start[0]
    set rx452_tgt, rx452_start[1]
    set rx452_pos, rx452_start[2]
    set rx452_curclass, rx452_start[3]
    set rx452_bstack, rx452_start[4]
    set $I19, rx452_start[5]
    store_lex unicode:"$\x{a2}", rx452_cur
    length rx452_eos, rx452_tgt
    eq $I19, 1, rx452_restart1334
    gt rx452_pos, rx452_eos, rx452_fail1335
    repr_get_attr_int $I11, self, rx452_curclass, "$!from"
    ne $I11, -1, rxscan453_done1341
    goto rxscan453_scan1340
  rxscan453_loop1339:
    inc rx452_pos
    gt rx452_pos, rx452_eos, rx452_fail1335
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!from", rx452_pos
  rxscan453_scan1340:
    nqp_rxmark rx452_bstack, rxscan453_loop1339, rx452_pos, 0
  rxscan453_done1341:
    nqp_rxmark rx452_bstack, rxcap454_fail1343, rx452_pos, 0
    ge rx452_pos, rx452_eos, rx452_fail1335
    substr $S11, rx452_tgt, rx452_pos, 1
    index $I11, ucs4:"vV", $S11
    lt $I11, 0, rx452_fail1335
    inc rx452_pos
    nqp_rxpeek $I19, rx452_bstack, rxcap454_fail1343
    inc $I19
    set $I11, rx452_bstack[$I19]
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!pos", rx452_pos
    $P11 = rx452_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx452_pos)
    rx452_cstack = rx452_cur."!cursor_capture"($P11, "sym")
    goto rxcap454_done1342
  rxcap454_fail1343:
    goto rx452_fail1335
  rxcap454_done1342:
    rx452_cur."!cursor_pass"(rx452_pos, "cclass_backslash:sym<v>", 'backtrack'=>1)
    .return (rx452_cur)
  rx452_restart1334:
    repr_get_attr_obj rx452_cstack, rx452_cur, rx452_curclass, "$!cstack"
  rx452_fail1335:
    unless rx452_bstack, rx452_done1333
    pop $I19, rx452_bstack
    if_null rx452_cstack, rx452_cstack_done1338
    unless rx452_cstack, rx452_cstack_done1338
    dec $I19
    set $P11, rx452_cstack[$I19]
  rx452_cstack_done1338:
    pop rx452_rep, rx452_bstack
    pop rx452_pos, rx452_bstack
    pop $I19, rx452_bstack
    lt rx452_pos, -1, rx452_done1333
    lt rx452_pos, 0, rx452_fail1335
    eq $I19, 0, rx452_fail1335
    nqp_islist $I20, rx452_cstack
    unless $I20, rx452_jump1336
    elements $I18, rx452_bstack
    le $I18, 0, rx452_cut1337
    dec $I18
    set $I18, rx452_bstack[$I18]
  rx452_cut1337:
    assign rx452_cstack, $I18
  rx452_jump1336:
    jump $I19
  rx452_done1333:
    rx452_cur."!cursor_fail"()
    .return (rx452_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<o>" :subid("cuid_98_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 314
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx455_start
    .local string rx455_tgt
    .local int rx455_pos
    .local int rx455_off
    .local int rx455_eos
    .local int rx455_rep
    .local pmc rx455_cur
    .local pmc rx455_curclass
    .local pmc rx455_bstack
    .local pmc rx455_cstack
    rx455_start = self."!cursor_start_all"()
    set rx455_cur, rx455_start[0]
    set rx455_tgt, rx455_start[1]
    set rx455_pos, rx455_start[2]
    set rx455_curclass, rx455_start[3]
    set rx455_bstack, rx455_start[4]
    set $I19, rx455_start[5]
    store_lex unicode:"$\x{a2}", rx455_cur
    length rx455_eos, rx455_tgt
    eq $I19, 1, rx455_restart1346
    gt rx455_pos, rx455_eos, rx455_fail1347
    repr_get_attr_int $I11, self, rx455_curclass, "$!from"
    ne $I11, -1, rxscan456_done1353
    goto rxscan456_scan1352
  rxscan456_loop1351:
    inc rx455_pos
    gt rx455_pos, rx455_eos, rx455_fail1347
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!from", rx455_pos
  rxscan456_scan1352:
    nqp_rxmark rx455_bstack, rxscan456_loop1351, rx455_pos, 0
  rxscan456_done1353:
    nqp_rxmark rx455_bstack, rxcap457_fail1355, rx455_pos, 0
    ge rx455_pos, rx455_eos, rx455_fail1347
    substr $S11, rx455_tgt, rx455_pos, 1
    index $I11, ucs4:"oO", $S11
    lt $I11, 0, rx455_fail1347
    inc rx455_pos
    nqp_rxpeek $I19, rx455_bstack, rxcap457_fail1355
    inc $I19
    set $I11, rx455_bstack[$I19]
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx455_pos)
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "sym")
    goto rxcap457_done1354
  rxcap457_fail1355:
    goto rx455_fail1347
  rxcap457_done1354:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt458_01357
    nqp_push_label $P11, alt458_11359
    nqp_rxmark rx455_bstack, alt458_end1356, -1, 0
    rx455_cur."!alt"(rx455_pos, "alt_nfa__17_1382484121.28619", $P11)
    goto rx455_fail1347
  alt458_01357:
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."octint"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1347
    nqp_rxmark rx455_bstack, rxsubrule459_pass1358, -1, 0
  rxsubrule459_pass1358:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "octint")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    goto alt458_end1356
  alt458_11359:
    add $I11, rx455_pos, 1
    gt $I11, rx455_eos, rx455_fail1347
    substr $S10, rx455_tgt, rx455_pos, 1
    ne $S10, ucs4:"[", rx455_fail1347
    add rx455_pos, 1
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."octints"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1347
    nqp_rxmark rx455_bstack, rxsubrule460_pass1360, -1, 0
  rxsubrule460_pass1360:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "octints")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    add $I11, rx455_pos, 1
    gt $I11, rx455_eos, rx455_fail1347
    substr $S10, rx455_tgt, rx455_pos, 1
    ne $S10, ucs4:"]", rx455_fail1347
    add rx455_pos, 1
    goto alt458_end1356
  alt458_end1356:
    nqp_rxcommit rx455_bstack, alt458_end1356
    rx455_cur."!cursor_pass"(rx455_pos, "cclass_backslash:sym<o>", 'backtrack'=>1)
    .return (rx455_cur)
  rx455_restart1346:
    repr_get_attr_obj rx455_cstack, rx455_cur, rx455_curclass, "$!cstack"
  rx455_fail1347:
    unless rx455_bstack, rx455_done1345
    pop $I19, rx455_bstack
    if_null rx455_cstack, rx455_cstack_done1350
    unless rx455_cstack, rx455_cstack_done1350
    dec $I19
    set $P11, rx455_cstack[$I19]
  rx455_cstack_done1350:
    pop rx455_rep, rx455_bstack
    pop rx455_pos, rx455_bstack
    pop $I19, rx455_bstack
    lt rx455_pos, -1, rx455_done1345
    lt rx455_pos, 0, rx455_fail1347
    eq $I19, 0, rx455_fail1347
    nqp_islist $I20, rx455_cstack
    unless $I20, rx455_jump1348
    elements $I18, rx455_bstack
    le $I18, 0, rx455_cut1349
    dec $I18
    set $I18, rx455_bstack[$I18]
  rx455_cut1349:
    assign rx455_cstack, $I18
  rx455_jump1348:
    jump $I19
  rx455_done1345:
    rx455_cur."!cursor_fail"()
    .return (rx455_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<x>" :subid("cuid_99_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx461_start
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_curclass
    .local pmc rx461_bstack
    .local pmc rx461_cstack
    rx461_start = self."!cursor_start_all"()
    set rx461_cur, rx461_start[0]
    set rx461_tgt, rx461_start[1]
    set rx461_pos, rx461_start[2]
    set rx461_curclass, rx461_start[3]
    set rx461_bstack, rx461_start[4]
    set $I19, rx461_start[5]
    store_lex unicode:"$\x{a2}", rx461_cur
    length rx461_eos, rx461_tgt
    eq $I19, 1, rx461_restart1363
    gt rx461_pos, rx461_eos, rx461_fail1364
    repr_get_attr_int $I11, self, rx461_curclass, "$!from"
    ne $I11, -1, rxscan462_done1370
    goto rxscan462_scan1369
  rxscan462_loop1368:
    inc rx461_pos
    gt rx461_pos, rx461_eos, rx461_fail1364
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!from", rx461_pos
  rxscan462_scan1369:
    nqp_rxmark rx461_bstack, rxscan462_loop1368, rx461_pos, 0
  rxscan462_done1370:
    nqp_rxmark rx461_bstack, rxcap463_fail1372, rx461_pos, 0
    ge rx461_pos, rx461_eos, rx461_fail1364
    substr $S11, rx461_tgt, rx461_pos, 1
    index $I11, ucs4:"xX", $S11
    lt $I11, 0, rx461_fail1364
    inc rx461_pos
    nqp_rxpeek $I19, rx461_bstack, rxcap463_fail1372
    inc $I19
    set $I11, rx461_bstack[$I19]
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx461_pos)
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "sym")
    goto rxcap463_done1371
  rxcap463_fail1372:
    goto rx461_fail1364
  rxcap463_done1371:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt464_01374
    nqp_push_label $P11, alt464_11376
    nqp_rxmark rx461_bstack, alt464_end1373, -1, 0
    rx461_cur."!alt"(rx461_pos, "alt_nfa__18_1382484121.30221", $P11)
    goto rx461_fail1364
  alt464_01374:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."hexint"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1364
    nqp_rxmark rx461_bstack, rxsubrule465_pass1375, -1, 0
  rxsubrule465_pass1375:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "hexint")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt464_end1373
  alt464_11376:
    add $I11, rx461_pos, 1
    gt $I11, rx461_eos, rx461_fail1364
    substr $S10, rx461_tgt, rx461_pos, 1
    ne $S10, ucs4:"[", rx461_fail1364
    add rx461_pos, 1
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."hexints"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1364
    nqp_rxmark rx461_bstack, rxsubrule466_pass1377, -1, 0
  rxsubrule466_pass1377:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "hexints")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    add $I11, rx461_pos, 1
    gt $I11, rx461_eos, rx461_fail1364
    substr $S10, rx461_tgt, rx461_pos, 1
    ne $S10, ucs4:"]", rx461_fail1364
    add rx461_pos, 1
    goto alt464_end1373
  alt464_end1373:
    nqp_rxcommit rx461_bstack, alt464_end1373
    rx461_cur."!cursor_pass"(rx461_pos, "cclass_backslash:sym<x>", 'backtrack'=>1)
    .return (rx461_cur)
  rx461_restart1363:
    repr_get_attr_obj rx461_cstack, rx461_cur, rx461_curclass, "$!cstack"
  rx461_fail1364:
    unless rx461_bstack, rx461_done1362
    pop $I19, rx461_bstack
    if_null rx461_cstack, rx461_cstack_done1367
    unless rx461_cstack, rx461_cstack_done1367
    dec $I19
    set $P11, rx461_cstack[$I19]
  rx461_cstack_done1367:
    pop rx461_rep, rx461_bstack
    pop rx461_pos, rx461_bstack
    pop $I19, rx461_bstack
    lt rx461_pos, -1, rx461_done1362
    lt rx461_pos, 0, rx461_fail1364
    eq $I19, 0, rx461_fail1364
    nqp_islist $I20, rx461_cstack
    unless $I20, rx461_jump1365
    elements $I18, rx461_bstack
    le $I18, 0, rx461_cut1366
    dec $I18
    set $I18, rx461_bstack[$I18]
  rx461_cut1366:
    assign rx461_cstack, $I18
  rx461_jump1365:
    jump $I19
  rx461_done1362:
    rx461_cur."!cursor_fail"()
    .return (rx461_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<c>" :subid("cuid_100_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx467_start
    .local string rx467_tgt
    .local int rx467_pos
    .local int rx467_off
    .local int rx467_eos
    .local int rx467_rep
    .local pmc rx467_cur
    .local pmc rx467_curclass
    .local pmc rx467_bstack
    .local pmc rx467_cstack
    rx467_start = self."!cursor_start_all"()
    set rx467_cur, rx467_start[0]
    set rx467_tgt, rx467_start[1]
    set rx467_pos, rx467_start[2]
    set rx467_curclass, rx467_start[3]
    set rx467_bstack, rx467_start[4]
    set $I19, rx467_start[5]
    store_lex unicode:"$\x{a2}", rx467_cur
    length rx467_eos, rx467_tgt
    eq $I19, 1, rx467_restart1380
    gt rx467_pos, rx467_eos, rx467_fail1381
    repr_get_attr_int $I11, self, rx467_curclass, "$!from"
    ne $I11, -1, rxscan468_done1387
    goto rxscan468_scan1386
  rxscan468_loop1385:
    inc rx467_pos
    gt rx467_pos, rx467_eos, rx467_fail1381
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!from", rx467_pos
  rxscan468_scan1386:
    nqp_rxmark rx467_bstack, rxscan468_loop1385, rx467_pos, 0
  rxscan468_done1387:
    nqp_rxmark rx467_bstack, rxcap469_fail1389, rx467_pos, 0
    ge rx467_pos, rx467_eos, rx467_fail1381
    substr $S11, rx467_tgt, rx467_pos, 1
    index $I11, ucs4:"cC", $S11
    lt $I11, 0, rx467_fail1381
    inc rx467_pos
    nqp_rxpeek $I19, rx467_bstack, rxcap469_fail1389
    inc $I19
    set $I11, rx467_bstack[$I19]
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx467_pos)
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sym")
    goto rxcap469_done1388
  rxcap469_fail1389:
    goto rx467_fail1381
  rxcap469_done1388:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."charspec"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1381
    nqp_rxmark rx467_bstack, rxsubrule470_pass1390, -1, 0
  rxsubrule470_pass1390:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "charspec")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    rx467_cur."!cursor_pass"(rx467_pos, "cclass_backslash:sym<c>", 'backtrack'=>1)
    .return (rx467_cur)
  rx467_restart1380:
    repr_get_attr_obj rx467_cstack, rx467_cur, rx467_curclass, "$!cstack"
  rx467_fail1381:
    unless rx467_bstack, rx467_done1379
    pop $I19, rx467_bstack
    if_null rx467_cstack, rx467_cstack_done1384
    unless rx467_cstack, rx467_cstack_done1384
    dec $I19
    set $P11, rx467_cstack[$I19]
  rx467_cstack_done1384:
    pop rx467_rep, rx467_bstack
    pop rx467_pos, rx467_bstack
    pop $I19, rx467_bstack
    lt rx467_pos, -1, rx467_done1379
    lt rx467_pos, 0, rx467_fail1381
    eq $I19, 0, rx467_fail1381
    nqp_islist $I20, rx467_cstack
    unless $I20, rx467_jump1382
    elements $I18, rx467_bstack
    le $I18, 0, rx467_cut1383
    dec $I18
    set $I18, rx467_bstack[$I18]
  rx467_cut1383:
    assign rx467_cstack, $I18
  rx467_jump1382:
    jump $I19
  rx467_done1379:
    rx467_cur."!cursor_fail"()
    .return (rx467_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<any>" :subid("cuid_101_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx471_start
    .local string rx471_tgt
    .local int rx471_pos
    .local int rx471_off
    .local int rx471_eos
    .local int rx471_rep
    .local pmc rx471_cur
    .local pmc rx471_curclass
    .local pmc rx471_bstack
    .local pmc rx471_cstack
    rx471_start = self."!cursor_start_all"()
    set rx471_cur, rx471_start[0]
    set rx471_tgt, rx471_start[1]
    set rx471_pos, rx471_start[2]
    set rx471_curclass, rx471_start[3]
    set rx471_bstack, rx471_start[4]
    set $I19, rx471_start[5]
    store_lex unicode:"$\x{a2}", rx471_cur
    length rx471_eos, rx471_tgt
    eq $I19, 1, rx471_restart1393
    gt rx471_pos, rx471_eos, rx471_fail1394
    repr_get_attr_int $I11, self, rx471_curclass, "$!from"
    ne $I11, -1, rxscan472_done1400
    goto rxscan472_scan1399
  rxscan472_loop1398:
    inc rx471_pos
    gt rx471_pos, rx471_eos, rx471_fail1394
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!from", rx471_pos
  rxscan472_scan1399:
    nqp_rxmark rx471_bstack, rxscan472_loop1398, rx471_pos, 0
  rxscan472_done1400:
    ge rx471_pos, rx471_eos, rx471_fail1394
    add rx471_pos, 1
    rx471_cur."!cursor_pass"(rx471_pos, "cclass_backslash:sym<any>", 'backtrack'=>1)
    .return (rx471_cur)
  rx471_restart1393:
    repr_get_attr_obj rx471_cstack, rx471_cur, rx471_curclass, "$!cstack"
  rx471_fail1394:
    unless rx471_bstack, rx471_done1392
    pop $I19, rx471_bstack
    if_null rx471_cstack, rx471_cstack_done1397
    unless rx471_cstack, rx471_cstack_done1397
    dec $I19
    set $P11, rx471_cstack[$I19]
  rx471_cstack_done1397:
    pop rx471_rep, rx471_bstack
    pop rx471_pos, rx471_bstack
    pop $I19, rx471_bstack
    lt rx471_pos, -1, rx471_done1392
    lt rx471_pos, 0, rx471_fail1394
    eq $I19, 0, rx471_fail1394
    nqp_islist $I20, rx471_cstack
    unless $I20, rx471_jump1395
    elements $I18, rx471_bstack
    le $I18, 0, rx471_cut1396
    dec $I18
    set $I18, rx471_bstack[$I18]
  rx471_cut1396:
    assign rx471_cstack, $I18
  rx471_jump1395:
    jump $I19
  rx471_done1392:
    rx471_cur."!cursor_fail"()
    .return (rx471_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion" :subid("cuid_102_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 319
    .param pmc self 
    $P5001 = self."!protoregex"("assertion")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_103_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 321
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_104_1382484119.90237' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx473_start
    .local string rx473_tgt
    .local int rx473_pos
    .local int rx473_off
    .local int rx473_eos
    .local int rx473_rep
    .local pmc rx473_cur
    .local pmc rx473_curclass
    .local pmc rx473_bstack
    .local pmc rx473_cstack
    rx473_start = self."!cursor_start_all"()
    set rx473_cur, rx473_start[0]
    set rx473_tgt, rx473_start[1]
    set rx473_pos, rx473_start[2]
    set rx473_curclass, rx473_start[3]
    set rx473_bstack, rx473_start[4]
    set $I19, rx473_start[5]
    store_lex unicode:"$\x{a2}", rx473_cur
    length rx473_eos, rx473_tgt
    eq $I19, 1, rx473_restart1403
    gt rx473_pos, rx473_eos, rx473_fail1404
    repr_get_attr_int $I11, self, rx473_curclass, "$!from"
    ne $I11, -1, rxscan474_done1410
    goto rxscan474_scan1409
  rxscan474_loop1408:
    inc rx473_pos
    index rx473_pos, rx473_tgt, ucs4:"?", rx473_pos
    eq rx473_pos, -1, rx473_fail1404
    gt rx473_pos, rx473_eos, rx473_fail1404
    repr_bind_attr_int rx473_cur, rx473_curclass, "$!from", rx473_pos
  rxscan474_scan1409:
    nqp_rxmark rx473_bstack, rxscan474_loop1408, rx473_pos, 0
  rxscan474_done1410:
    add $I11, rx473_pos, 1
    gt $I11, rx473_eos, rx473_fail1404
    substr $S10, rx473_tgt, rx473_pos, 1
    ne $S10, ucs4:"?", rx473_fail1404
    add rx473_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt475_01412
    nqp_push_label $P11, alt475_11423
    nqp_rxmark rx473_bstack, alt475_end1411, -1, 0
    rx473_cur."!alt"(rx473_pos, "alt_nfa__19_1382484121.35973", $P11)
    goto rx473_fail1404
  alt475_01412:
    .const 'Sub' $P5001 = 'cuid_104_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx473_cur, rx473_curclass, "$!pos", rx473_pos
    $P11 = rx473_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx473_curclass, "$!pos"
    lt $I11, 0, rx473_fail1404
    goto alt475_end1411
  alt475_11423:
    repr_bind_attr_int rx473_cur, rx473_curclass, "$!pos", rx473_pos
    $P11 = rx473_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx473_curclass, "$!pos"
    lt $I11, 0, rx473_fail1404
    nqp_rxmark rx473_bstack, rxsubrule478_pass1424, -1, 0
  rxsubrule478_pass1424:
    rx473_cstack = rx473_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx473_pos, $P11, rx473_curclass, "$!pos"
    goto alt475_end1411
  alt475_end1411:
    nqp_rxcommit rx473_bstack, alt475_end1411
    rx473_cur."!cursor_pass"(rx473_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx473_cur)
  rx473_restart1403:
    repr_get_attr_obj rx473_cstack, rx473_cur, rx473_curclass, "$!cstack"
  rx473_fail1404:
    unless rx473_bstack, rx473_done1402
    pop $I19, rx473_bstack
    if_null rx473_cstack, rx473_cstack_done1407
    unless rx473_cstack, rx473_cstack_done1407
    dec $I19
    set $P11, rx473_cstack[$I19]
  rx473_cstack_done1407:
    pop rx473_rep, rx473_bstack
    pop rx473_pos, rx473_bstack
    pop $I19, rx473_bstack
    lt rx473_pos, -1, rx473_done1402
    lt rx473_pos, 0, rx473_fail1404
    eq $I19, 0, rx473_fail1404
    nqp_islist $I20, rx473_cstack
    unless $I20, rx473_jump1405
    elements $I18, rx473_bstack
    le $I18, 0, rx473_cut1406
    dec $I18
    set $I18, rx473_bstack[$I18]
  rx473_cut1406:
    assign rx473_cstack, $I18
  rx473_jump1405:
    jump $I19
  rx473_done1402:
    rx473_cur."!cursor_fail"()
    .return (rx473_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_104_1382484119.90237") :anon :lex :outer("cuid_103_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx476_start
    .local string rx476_tgt
    .local int rx476_pos
    .local int rx476_off
    .local int rx476_eos
    .local int rx476_rep
    .local pmc rx476_cur
    .local pmc rx476_curclass
    .local pmc rx476_bstack
    .local pmc rx476_cstack
    rx476_start = self."!cursor_start_all"()
    set rx476_cur, rx476_start[0]
    set rx476_tgt, rx476_start[1]
    set rx476_pos, rx476_start[2]
    set rx476_curclass, rx476_start[3]
    set rx476_bstack, rx476_start[4]
    set $I19, rx476_start[5]
    store_lex unicode:"$\x{a2}", rx476_cur
    length rx476_eos, rx476_tgt
    eq $I19, 1, rx476_restart1415
    gt rx476_pos, rx476_eos, rx476_fail1416
    repr_get_attr_int $I11, self, rx476_curclass, "$!from"
    ne $I11, -1, rxscan477_done1422
    goto rxscan477_scan1421
  rxscan477_loop1420:
    inc rx476_pos
    index rx476_pos, rx476_tgt, ucs4:">", rx476_pos
    eq rx476_pos, -1, rx476_fail1416
    gt rx476_pos, rx476_eos, rx476_fail1416
    repr_bind_attr_int rx476_cur, rx476_curclass, "$!from", rx476_pos
  rxscan477_scan1421:
    nqp_rxmark rx476_bstack, rxscan477_loop1420, rx476_pos, 0
  rxscan477_done1422:
    add $I11, rx476_pos, 1
    gt $I11, rx476_eos, rx476_fail1416
    substr $S10, rx476_tgt, rx476_pos, 1
    ne $S10, ucs4:">", rx476_fail1416
    add rx476_pos, 1
    rx476_cur."!cursor_pass"(rx476_pos, 'backtrack'=>1)
    .return (rx476_cur)
  rx476_restart1415:
    repr_get_attr_obj rx476_cstack, rx476_cur, rx476_curclass, "$!cstack"
  rx476_fail1416:
    unless rx476_bstack, rx476_done1414
    pop $I19, rx476_bstack
    if_null rx476_cstack, rx476_cstack_done1419
    unless rx476_cstack, rx476_cstack_done1419
    dec $I19
    set $P11, rx476_cstack[$I19]
  rx476_cstack_done1419:
    pop rx476_rep, rx476_bstack
    pop rx476_pos, rx476_bstack
    pop $I19, rx476_bstack
    lt rx476_pos, -1, rx476_done1414
    lt rx476_pos, 0, rx476_fail1416
    eq $I19, 0, rx476_fail1416
    nqp_islist $I20, rx476_cstack
    unless $I20, rx476_jump1417
    elements $I18, rx476_bstack
    le $I18, 0, rx476_cut1418
    dec $I18
    set $I18, rx476_bstack[$I18]
  rx476_cut1418:
    assign rx476_cstack, $I18
  rx476_jump1417:
    jump $I19
  rx476_done1414:
    rx476_cur."!cursor_fail"()
    .return (rx476_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_105_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 322
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_106_1382484119.90237' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx479_start
    .local string rx479_tgt
    .local int rx479_pos
    .local int rx479_off
    .local int rx479_eos
    .local int rx479_rep
    .local pmc rx479_cur
    .local pmc rx479_curclass
    .local pmc rx479_bstack
    .local pmc rx479_cstack
    rx479_start = self."!cursor_start_all"()
    set rx479_cur, rx479_start[0]
    set rx479_tgt, rx479_start[1]
    set rx479_pos, rx479_start[2]
    set rx479_curclass, rx479_start[3]
    set rx479_bstack, rx479_start[4]
    set $I19, rx479_start[5]
    store_lex unicode:"$\x{a2}", rx479_cur
    length rx479_eos, rx479_tgt
    eq $I19, 1, rx479_restart1427
    gt rx479_pos, rx479_eos, rx479_fail1428
    repr_get_attr_int $I11, self, rx479_curclass, "$!from"
    ne $I11, -1, rxscan480_done1434
    goto rxscan480_scan1433
  rxscan480_loop1432:
    inc rx479_pos
    index rx479_pos, rx479_tgt, ucs4:"!", rx479_pos
    eq rx479_pos, -1, rx479_fail1428
    gt rx479_pos, rx479_eos, rx479_fail1428
    repr_bind_attr_int rx479_cur, rx479_curclass, "$!from", rx479_pos
  rxscan480_scan1433:
    nqp_rxmark rx479_bstack, rxscan480_loop1432, rx479_pos, 0
  rxscan480_done1434:
    add $I11, rx479_pos, 1
    gt $I11, rx479_eos, rx479_fail1428
    substr $S10, rx479_tgt, rx479_pos, 1
    ne $S10, ucs4:"!", rx479_fail1428
    add rx479_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt481_01436
    nqp_push_label $P11, alt481_11447
    nqp_rxmark rx479_bstack, alt481_end1435, -1, 0
    rx479_cur."!alt"(rx479_pos, "alt_nfa__20_1382484121.37272", $P11)
    goto rx479_fail1428
  alt481_01436:
    .const 'Sub' $P5001 = 'cuid_106_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx479_cur, rx479_curclass, "$!pos", rx479_pos
    $P11 = rx479_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx479_curclass, "$!pos"
    lt $I11, 0, rx479_fail1428
    goto alt481_end1435
  alt481_11447:
    repr_bind_attr_int rx479_cur, rx479_curclass, "$!pos", rx479_pos
    $P11 = rx479_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx479_curclass, "$!pos"
    lt $I11, 0, rx479_fail1428
    nqp_rxmark rx479_bstack, rxsubrule484_pass1448, -1, 0
  rxsubrule484_pass1448:
    rx479_cstack = rx479_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx479_pos, $P11, rx479_curclass, "$!pos"
    goto alt481_end1435
  alt481_end1435:
    nqp_rxcommit rx479_bstack, alt481_end1435
    rx479_cur."!cursor_pass"(rx479_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx479_cur)
  rx479_restart1427:
    repr_get_attr_obj rx479_cstack, rx479_cur, rx479_curclass, "$!cstack"
  rx479_fail1428:
    unless rx479_bstack, rx479_done1426
    pop $I19, rx479_bstack
    if_null rx479_cstack, rx479_cstack_done1431
    unless rx479_cstack, rx479_cstack_done1431
    dec $I19
    set $P11, rx479_cstack[$I19]
  rx479_cstack_done1431:
    pop rx479_rep, rx479_bstack
    pop rx479_pos, rx479_bstack
    pop $I19, rx479_bstack
    lt rx479_pos, -1, rx479_done1426
    lt rx479_pos, 0, rx479_fail1428
    eq $I19, 0, rx479_fail1428
    nqp_islist $I20, rx479_cstack
    unless $I20, rx479_jump1429
    elements $I18, rx479_bstack
    le $I18, 0, rx479_cut1430
    dec $I18
    set $I18, rx479_bstack[$I18]
  rx479_cut1430:
    assign rx479_cstack, $I18
  rx479_jump1429:
    jump $I19
  rx479_done1426:
    rx479_cur."!cursor_fail"()
    .return (rx479_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_106_1382484119.90237") :anon :lex :outer("cuid_105_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx482_start
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    rx482_start = self."!cursor_start_all"()
    set rx482_cur, rx482_start[0]
    set rx482_tgt, rx482_start[1]
    set rx482_pos, rx482_start[2]
    set rx482_curclass, rx482_start[3]
    set rx482_bstack, rx482_start[4]
    set $I19, rx482_start[5]
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1439
    gt rx482_pos, rx482_eos, rx482_fail1440
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1446
    goto rxscan483_scan1445
  rxscan483_loop1444:
    inc rx482_pos
    index rx482_pos, rx482_tgt, ucs4:">", rx482_pos
    eq rx482_pos, -1, rx482_fail1440
    gt rx482_pos, rx482_eos, rx482_fail1440
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1445:
    nqp_rxmark rx482_bstack, rxscan483_loop1444, rx482_pos, 0
  rxscan483_done1446:
    add $I11, rx482_pos, 1
    gt $I11, rx482_eos, rx482_fail1440
    substr $S10, rx482_tgt, rx482_pos, 1
    ne $S10, ucs4:">", rx482_fail1440
    add rx482_pos, 1
    rx482_cur."!cursor_pass"(rx482_pos, 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1439:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1440:
    unless rx482_bstack, rx482_done1438
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1443
    unless rx482_cstack, rx482_cstack_done1443
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1443:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1438
    lt rx482_pos, 0, rx482_fail1440
    eq $I19, 0, rx482_fail1440
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1441
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1442
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1442:
    assign rx482_cstack, $I18
  rx482_jump1441:
    jump $I19
  rx482_done1438:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_107_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx485_start
    .local string rx485_tgt
    .local int rx485_pos
    .local int rx485_off
    .local int rx485_eos
    .local int rx485_rep
    .local pmc rx485_cur
    .local pmc rx485_curclass
    .local pmc rx485_bstack
    .local pmc rx485_cstack
    rx485_start = self."!cursor_start_all"()
    set rx485_cur, rx485_start[0]
    set rx485_tgt, rx485_start[1]
    set rx485_pos, rx485_start[2]
    set rx485_curclass, rx485_start[3]
    set rx485_bstack, rx485_start[4]
    set $I19, rx485_start[5]
    store_lex unicode:"$\x{a2}", rx485_cur
    length rx485_eos, rx485_tgt
    eq $I19, 1, rx485_restart1451
    gt rx485_pos, rx485_eos, rx485_fail1452
    repr_get_attr_int $I11, self, rx485_curclass, "$!from"
    ne $I11, -1, rxscan486_done1458
    goto rxscan486_scan1457
  rxscan486_loop1456:
    inc rx485_pos
    index rx485_pos, rx485_tgt, ucs4:"|", rx485_pos
    eq rx485_pos, -1, rx485_fail1452
    gt rx485_pos, rx485_eos, rx485_fail1452
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!from", rx485_pos
  rxscan486_scan1457:
    nqp_rxmark rx485_bstack, rxscan486_loop1456, rx485_pos, 0
  rxscan486_done1458:
    add $I11, rx485_pos, 1
    gt $I11, rx485_eos, rx485_fail1452
    substr $S10, rx485_tgt, rx485_pos, 1
    ne $S10, ucs4:"|", rx485_fail1452
    add rx485_pos, 1
    repr_bind_attr_int rx485_cur, rx485_curclass, "$!pos", rx485_pos
    $P11 = rx485_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx485_curclass, "$!pos"
    lt $I11, 0, rx485_fail1452
    nqp_rxmark rx485_bstack, rxsubrule487_pass1459, -1, 0
  rxsubrule487_pass1459:
    rx485_cstack = rx485_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx485_pos, $P11, rx485_curclass, "$!pos"
    rx485_cur."!cursor_pass"(rx485_pos, "assertion:sym<|>", 'backtrack'=>1)
    .return (rx485_cur)
  rx485_restart1451:
    repr_get_attr_obj rx485_cstack, rx485_cur, rx485_curclass, "$!cstack"
  rx485_fail1452:
    unless rx485_bstack, rx485_done1450
    pop $I19, rx485_bstack
    if_null rx485_cstack, rx485_cstack_done1455
    unless rx485_cstack, rx485_cstack_done1455
    dec $I19
    set $P11, rx485_cstack[$I19]
  rx485_cstack_done1455:
    pop rx485_rep, rx485_bstack
    pop rx485_pos, rx485_bstack
    pop $I19, rx485_bstack
    lt rx485_pos, -1, rx485_done1450
    lt rx485_pos, 0, rx485_fail1452
    eq $I19, 0, rx485_fail1452
    nqp_islist $I20, rx485_cstack
    unless $I20, rx485_jump1453
    elements $I18, rx485_bstack
    le $I18, 0, rx485_cut1454
    dec $I18
    set $I18, rx485_bstack[$I18]
  rx485_cut1454:
    assign rx485_cstack, $I18
  rx485_jump1453:
    jump $I19
  rx485_done1450:
    rx485_cur."!cursor_fail"()
    .return (rx485_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_108_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx488_start
    .local string rx488_tgt
    .local int rx488_pos
    .local int rx488_off
    .local int rx488_eos
    .local int rx488_rep
    .local pmc rx488_cur
    .local pmc rx488_curclass
    .local pmc rx488_bstack
    .local pmc rx488_cstack
    rx488_start = self."!cursor_start_all"()
    set rx488_cur, rx488_start[0]
    set rx488_tgt, rx488_start[1]
    set rx488_pos, rx488_start[2]
    set rx488_curclass, rx488_start[3]
    set rx488_bstack, rx488_start[4]
    set $I19, rx488_start[5]
    store_lex unicode:"$\x{a2}", rx488_cur
    length rx488_eos, rx488_tgt
    eq $I19, 1, rx488_restart1462
    gt rx488_pos, rx488_eos, rx488_fail1463
    repr_get_attr_int $I11, self, rx488_curclass, "$!from"
    ne $I11, -1, rxscan489_done1469
    goto rxscan489_scan1468
  rxscan489_loop1467:
    inc rx488_pos
    index rx488_pos, rx488_tgt, ucs4:".", rx488_pos
    eq rx488_pos, -1, rx488_fail1463
    gt rx488_pos, rx488_eos, rx488_fail1463
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!from", rx488_pos
  rxscan489_scan1468:
    nqp_rxmark rx488_bstack, rxscan489_loop1467, rx488_pos, 0
  rxscan489_done1469:
    add $I11, rx488_pos, 1
    gt $I11, rx488_eos, rx488_fail1463
    substr $S10, rx488_tgt, rx488_pos, 1
    ne $S10, ucs4:".", rx488_fail1463
    add rx488_pos, 1
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail1463
    nqp_rxmark rx488_bstack, rxsubrule490_pass1470, -1, 0
  rxsubrule490_pass1470:
    rx488_cstack = rx488_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    rx488_cur."!cursor_pass"(rx488_pos, "assertion:sym<method>", 'backtrack'=>1)
    .return (rx488_cur)
  rx488_restart1462:
    repr_get_attr_obj rx488_cstack, rx488_cur, rx488_curclass, "$!cstack"
  rx488_fail1463:
    unless rx488_bstack, rx488_done1461
    pop $I19, rx488_bstack
    if_null rx488_cstack, rx488_cstack_done1466
    unless rx488_cstack, rx488_cstack_done1466
    dec $I19
    set $P11, rx488_cstack[$I19]
  rx488_cstack_done1466:
    pop rx488_rep, rx488_bstack
    pop rx488_pos, rx488_bstack
    pop $I19, rx488_bstack
    lt rx488_pos, -1, rx488_done1461
    lt rx488_pos, 0, rx488_fail1463
    eq $I19, 0, rx488_fail1463
    nqp_islist $I20, rx488_cstack
    unless $I20, rx488_jump1464
    elements $I18, rx488_bstack
    le $I18, 0, rx488_cut1465
    dec $I18
    set $I18, rx488_bstack[$I18]
  rx488_cut1465:
    assign rx488_cstack, $I18
  rx488_jump1464:
    jump $I19
  rx488_done1461:
    rx488_cur."!cursor_fail"()
    .return (rx488_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_109_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 329
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_110_1382484119.90237' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx491_start
    .local string rx491_tgt
    .local int rx491_pos
    .local int rx491_off
    .local int rx491_eos
    .local int rx491_rep
    .local pmc rx491_cur
    .local pmc rx491_curclass
    .local pmc rx491_bstack
    .local pmc rx491_cstack
    rx491_start = self."!cursor_start_all"()
    set rx491_cur, rx491_start[0]
    set rx491_tgt, rx491_start[1]
    set rx491_pos, rx491_start[2]
    set rx491_curclass, rx491_start[3]
    set rx491_bstack, rx491_start[4]
    set $I19, rx491_start[5]
    store_lex unicode:"$\x{a2}", rx491_cur
    length rx491_eos, rx491_tgt
    eq $I19, 1, rx491_restart1473
    gt rx491_pos, rx491_eos, rx491_fail1474
    repr_get_attr_int $I11, self, rx491_curclass, "$!from"
    ne $I11, -1, rxscan492_done1480
    goto rxscan492_scan1479
  rxscan492_loop1478:
    inc rx491_pos
    gt rx491_pos, rx491_eos, rx491_fail1474
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!from", rx491_pos
  rxscan492_scan1479:
    nqp_rxmark rx491_bstack, rxscan492_loop1478, rx491_pos, 0
  rxscan492_done1480:
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1474
    nqp_rxmark rx491_bstack, rxsubrule493_pass1481, -1, 0
  rxsubrule493_pass1481:
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx491_pos, $P11, rx491_curclass, "$!pos"
    nqp_rxmark rx491_bstack, rxquantr494_done1483, rx491_pos, 0
  rxquantr494_loop1482:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt495_01485
    nqp_push_label $P11, alt495_11496
    nqp_push_label $P11, alt495_21498
    nqp_push_label $P11, alt495_31500
    nqp_push_label $P11, alt495_41502
    nqp_rxmark rx491_bstack, alt495_end1484, -1, 0
    rx491_cur."!alt"(rx491_pos, "alt_nfa__21_1382484121.41187", $P11)
    goto rx491_fail1474
  alt495_01485:
    .const 'Sub' $P5001 = 'cuid_110_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1474
    goto alt495_end1484
  alt495_11496:
    add $I11, rx491_pos, 1
    gt $I11, rx491_eos, rx491_fail1474
    substr $S10, rx491_tgt, rx491_pos, 1
    ne $S10, ucs4:"=", rx491_fail1474
    add rx491_pos, 1
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1474
    nqp_rxmark rx491_bstack, rxsubrule498_pass1497, -1, 0
  rxsubrule498_pass1497:
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx491_pos, $P11, rx491_curclass, "$!pos"
    goto alt495_end1484
  alt495_21498:
    add $I11, rx491_pos, 1
    gt $I11, rx491_eos, rx491_fail1474
    substr $S10, rx491_tgt, rx491_pos, 1
    ne $S10, ucs4:":", rx491_fail1474
    add rx491_pos, 1
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1474
    nqp_rxmark rx491_bstack, rxsubrule499_pass1499, -1, 0
  rxsubrule499_pass1499:
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx491_pos, $P11, rx491_curclass, "$!pos"
    goto alt495_end1484
  alt495_31500:
    add $I11, rx491_pos, 1
    gt $I11, rx491_eos, rx491_fail1474
    substr $S10, rx491_tgt, rx491_pos, 1
    ne $S10, ucs4:"(", rx491_fail1474
    add rx491_pos, 1
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1474
    nqp_rxmark rx491_bstack, rxsubrule500_pass1501, -1, 0
  rxsubrule500_pass1501:
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx491_pos, $P11, rx491_curclass, "$!pos"
    add $I11, rx491_pos, 1
    gt $I11, rx491_eos, rx491_fail1474
    substr $S10, rx491_tgt, rx491_pos, 1
    ne $S10, ucs4:")", rx491_fail1474
    add rx491_pos, 1
    goto alt495_end1484
  alt495_41502:
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1474
    repr_get_attr_int rx491_pos, $P11, rx491_curclass, "$!pos"
    repr_bind_attr_int rx491_cur, rx491_curclass, "$!pos", rx491_pos
    $P11 = rx491_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx491_curclass, "$!pos"
    lt $I11, 0, rx491_fail1474
    nqp_rxmark rx491_bstack, rxsubrule502_pass1504, -1, 0
  rxsubrule502_pass1504:
    rx491_cstack = rx491_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx491_pos, $P11, rx491_curclass, "$!pos"
    goto alt495_end1484
  alt495_end1484:
    nqp_rxpeek $I19, rx491_bstack, rxquantr494_done1483
    inc $I19
    inc $I19
    set rx491_rep, rx491_bstack[$I19]
    nqp_rxcommit rx491_bstack, rxquantr494_done1483
    inc rx491_rep
  rxquantr494_done1483:
    rx491_cur."!cursor_pass"(rx491_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx491_cur)
  rx491_restart1473:
    repr_get_attr_obj rx491_cstack, rx491_cur, rx491_curclass, "$!cstack"
  rx491_fail1474:
    unless rx491_bstack, rx491_done1472
    pop $I19, rx491_bstack
    if_null rx491_cstack, rx491_cstack_done1477
    unless rx491_cstack, rx491_cstack_done1477
    dec $I19
    set $P11, rx491_cstack[$I19]
  rx491_cstack_done1477:
    pop rx491_rep, rx491_bstack
    pop rx491_pos, rx491_bstack
    pop $I19, rx491_bstack
    lt rx491_pos, -1, rx491_done1472
    lt rx491_pos, 0, rx491_fail1474
    eq $I19, 0, rx491_fail1474
    nqp_islist $I20, rx491_cstack
    unless $I20, rx491_jump1475
    elements $I18, rx491_bstack
    le $I18, 0, rx491_cut1476
    dec $I18
    set $I18, rx491_bstack[$I18]
  rx491_cut1476:
    assign rx491_cstack, $I18
  rx491_jump1475:
    jump $I19
  rx491_done1472:
    rx491_cur."!cursor_fail"()
    .return (rx491_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_110_1382484119.90237") :anon :lex :outer("cuid_109_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx496_start
    .local string rx496_tgt
    .local int rx496_pos
    .local int rx496_off
    .local int rx496_eos
    .local int rx496_rep
    .local pmc rx496_cur
    .local pmc rx496_curclass
    .local pmc rx496_bstack
    .local pmc rx496_cstack
    rx496_start = self."!cursor_start_all"()
    set rx496_cur, rx496_start[0]
    set rx496_tgt, rx496_start[1]
    set rx496_pos, rx496_start[2]
    set rx496_curclass, rx496_start[3]
    set rx496_bstack, rx496_start[4]
    set $I19, rx496_start[5]
    store_lex unicode:"$\x{a2}", rx496_cur
    length rx496_eos, rx496_tgt
    eq $I19, 1, rx496_restart1488
    gt rx496_pos, rx496_eos, rx496_fail1489
    repr_get_attr_int $I11, self, rx496_curclass, "$!from"
    ne $I11, -1, rxscan497_done1495
    goto rxscan497_scan1494
  rxscan497_loop1493:
    inc rx496_pos
    index rx496_pos, rx496_tgt, ucs4:">", rx496_pos
    eq rx496_pos, -1, rx496_fail1489
    gt rx496_pos, rx496_eos, rx496_fail1489
    repr_bind_attr_int rx496_cur, rx496_curclass, "$!from", rx496_pos
  rxscan497_scan1494:
    nqp_rxmark rx496_bstack, rxscan497_loop1493, rx496_pos, 0
  rxscan497_done1495:
    add $I11, rx496_pos, 1
    gt $I11, rx496_eos, rx496_fail1489
    substr $S10, rx496_tgt, rx496_pos, 1
    ne $S10, ucs4:">", rx496_fail1489
    add rx496_pos, 1
    rx496_cur."!cursor_pass"(rx496_pos, 'backtrack'=>1)
    .return (rx496_cur)
  rx496_restart1488:
    repr_get_attr_obj rx496_cstack, rx496_cur, rx496_curclass, "$!cstack"
  rx496_fail1489:
    unless rx496_bstack, rx496_done1487
    pop $I19, rx496_bstack
    if_null rx496_cstack, rx496_cstack_done1492
    unless rx496_cstack, rx496_cstack_done1492
    dec $I19
    set $P11, rx496_cstack[$I19]
  rx496_cstack_done1492:
    pop rx496_rep, rx496_bstack
    pop rx496_pos, rx496_bstack
    pop $I19, rx496_bstack
    lt rx496_pos, -1, rx496_done1487
    lt rx496_pos, 0, rx496_fail1489
    eq $I19, 0, rx496_fail1489
    nqp_islist $I20, rx496_cstack
    unless $I20, rx496_jump1490
    elements $I18, rx496_bstack
    le $I18, 0, rx496_cut1491
    dec $I18
    set $I18, rx496_bstack[$I18]
  rx496_cut1491:
    assign rx496_cstack, $I18
  rx496_jump1490:
    jump $I19
  rx496_done1487:
    rx496_cur."!cursor_fail"()
    .return (rx496_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_111_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 340
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_112_1382484119.90237' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx503_start
    .local string rx503_tgt
    .local int rx503_pos
    .local int rx503_off
    .local int rx503_eos
    .local int rx503_rep
    .local pmc rx503_cur
    .local pmc rx503_curclass
    .local pmc rx503_bstack
    .local pmc rx503_cstack
    rx503_start = self."!cursor_start_all"()
    set rx503_cur, rx503_start[0]
    set rx503_tgt, rx503_start[1]
    set rx503_pos, rx503_start[2]
    set rx503_curclass, rx503_start[3]
    set rx503_bstack, rx503_start[4]
    set $I19, rx503_start[5]
    store_lex unicode:"$\x{a2}", rx503_cur
    length rx503_eos, rx503_tgt
    eq $I19, 1, rx503_restart1507
    gt rx503_pos, rx503_eos, rx503_fail1508
    repr_get_attr_int $I11, self, rx503_curclass, "$!from"
    ne $I11, -1, rxscan504_done1514
    goto rxscan504_scan1513
  rxscan504_loop1512:
    inc rx503_pos
    gt rx503_pos, rx503_eos, rx503_fail1508
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!from", rx503_pos
  rxscan504_scan1513:
    nqp_rxmark rx503_bstack, rxscan504_loop1512, rx503_pos, 0
  rxscan504_done1514:
    .const 'Sub' $P5001 = 'cuid_112_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail1508
    nqp_rxmark rx503_bstack, rxquantr508_done1531, -1, 0
  rxquantr508_loop1530:
    repr_bind_attr_int rx503_cur, rx503_curclass, "$!pos", rx503_pos
    $P11 = rx503_cur."cclass_elem"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail1508
    goto rxsubrule509_pass1532
  rxsubrule509_back1533:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx503_curclass, "$!pos"
    lt $I11, 0, rx503_fail1508
  rxsubrule509_pass1532:
    rx503_cstack = rx503_cur."!cursor_capture"($P11, "cclass_elem")
    set_addr $I11, rxsubrule509_back1533
    push rx503_bstack, $I11
    push rx503_bstack, 0
    push rx503_bstack, rx503_pos
    elements $I11, rx503_cstack
    push rx503_bstack, $I11
    repr_get_attr_int rx503_pos, $P11, rx503_curclass, "$!pos"
    nqp_rxpeek $I19, rx503_bstack, rxquantr508_done1531
    inc $I19
    inc $I19
    set rx503_rep, rx503_bstack[$I19]
    nqp_rxcommit rx503_bstack, rxquantr508_done1531
    inc rx503_rep
    nqp_rxmark rx503_bstack, rxquantr508_done1531, rx503_pos, rx503_rep
    goto rxquantr508_loop1530
  rxquantr508_done1531:
    rx503_cur."!cursor_pass"(rx503_pos, "assertion:sym<[>", 'backtrack'=>1)
    .return (rx503_cur)
  rx503_restart1507:
    repr_get_attr_obj rx503_cstack, rx503_cur, rx503_curclass, "$!cstack"
  rx503_fail1508:
    unless rx503_bstack, rx503_done1506
    pop $I19, rx503_bstack
    if_null rx503_cstack, rx503_cstack_done1511
    unless rx503_cstack, rx503_cstack_done1511
    dec $I19
    set $P11, rx503_cstack[$I19]
  rx503_cstack_done1511:
    pop rx503_rep, rx503_bstack
    pop rx503_pos, rx503_bstack
    pop $I19, rx503_bstack
    lt rx503_pos, -1, rx503_done1506
    lt rx503_pos, 0, rx503_fail1508
    eq $I19, 0, rx503_fail1508
    nqp_islist $I20, rx503_cstack
    unless $I20, rx503_jump1509
    elements $I18, rx503_bstack
    le $I18, 0, rx503_cut1510
    dec $I18
    set $I18, rx503_bstack[$I18]
  rx503_cut1510:
    assign rx503_cstack, $I18
  rx503_jump1509:
    jump $I19
  rx503_done1506:
    rx503_cur."!cursor_fail"()
    .return (rx503_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_112_1382484119.90237") :anon :lex :outer("cuid_111_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx505_start
    .local string rx505_tgt
    .local int rx505_pos
    .local int rx505_off
    .local int rx505_eos
    .local int rx505_rep
    .local pmc rx505_cur
    .local pmc rx505_curclass
    .local pmc rx505_bstack
    .local pmc rx505_cstack
    rx505_start = self."!cursor_start_all"()
    set rx505_cur, rx505_start[0]
    set rx505_tgt, rx505_start[1]
    set rx505_pos, rx505_start[2]
    set rx505_curclass, rx505_start[3]
    set rx505_bstack, rx505_start[4]
    set $I19, rx505_start[5]
    store_lex unicode:"$\x{a2}", rx505_cur
    length rx505_eos, rx505_tgt
    eq $I19, 1, rx505_restart1517
    gt rx505_pos, rx505_eos, rx505_fail1518
    repr_get_attr_int $I11, self, rx505_curclass, "$!from"
    ne $I11, -1, rxscan506_done1524
    goto rxscan506_scan1523
  rxscan506_loop1522:
    inc rx505_pos
    gt rx505_pos, rx505_eos, rx505_fail1518
    repr_bind_attr_int rx505_cur, rx505_curclass, "$!from", rx505_pos
  rxscan506_scan1523:
    nqp_rxmark rx505_bstack, rxscan506_loop1522, rx505_pos, 0
  rxscan506_done1524:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt507_01526
    nqp_push_label $P11, alt507_11527
    nqp_push_label $P11, alt507_21528
    nqp_push_label $P11, alt507_31529
    nqp_rxmark rx505_bstack, alt507_end1525, -1, 0
    rx505_cur."!alt"(rx505_pos, "alt_nfa__22_1382484121.42326", $P11)
    goto rx505_fail1518
  alt507_01526:
    add $I11, rx505_pos, 1
    gt $I11, rx505_eos, rx505_fail1518
    substr $S10, rx505_tgt, rx505_pos, 1
    ne $S10, ucs4:"[", rx505_fail1518
    add rx505_pos, 1
    goto alt507_end1525
  alt507_11527:
    add $I11, rx505_pos, 1
    gt $I11, rx505_eos, rx505_fail1518
    substr $S10, rx505_tgt, rx505_pos, 1
    ne $S10, ucs4:"+", rx505_fail1518
    add rx505_pos, 1
    goto alt507_end1525
  alt507_21528:
    add $I11, rx505_pos, 1
    gt $I11, rx505_eos, rx505_fail1518
    substr $S10, rx505_tgt, rx505_pos, 1
    ne $S10, ucs4:"-", rx505_fail1518
    add rx505_pos, 1
    goto alt507_end1525
  alt507_31529:
    add $I11, rx505_pos, 1
    gt $I11, rx505_eos, rx505_fail1518
    substr $S10, rx505_tgt, rx505_pos, 1
    ne $S10, ucs4:":", rx505_fail1518
    add rx505_pos, 1
    goto alt507_end1525
  alt507_end1525:
    rx505_cur."!cursor_pass"(rx505_pos, 'backtrack'=>1)
    .return (rx505_cur)
  rx505_restart1517:
    repr_get_attr_obj rx505_cstack, rx505_cur, rx505_curclass, "$!cstack"
  rx505_fail1518:
    unless rx505_bstack, rx505_done1516
    pop $I19, rx505_bstack
    if_null rx505_cstack, rx505_cstack_done1521
    unless rx505_cstack, rx505_cstack_done1521
    dec $I19
    set $P11, rx505_cstack[$I19]
  rx505_cstack_done1521:
    pop rx505_rep, rx505_bstack
    pop rx505_pos, rx505_bstack
    pop $I19, rx505_bstack
    lt rx505_pos, -1, rx505_done1516
    lt rx505_pos, 0, rx505_fail1518
    eq $I19, 0, rx505_fail1518
    nqp_islist $I20, rx505_cstack
    unless $I20, rx505_jump1519
    elements $I18, rx505_bstack
    le $I18, 0, rx505_cut1520
    dec $I18
    set $I18, rx505_bstack[$I18]
  rx505_cut1520:
    assign rx505_cstack, $I18
  rx505_jump1519:
    jump $I19
  rx505_done1516:
    rx505_cur."!cursor_fail"()
    .return (rx505_cur) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_113_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 342
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_119_1382484119.90237' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx510_start
    .local string rx510_tgt
    .local int rx510_pos
    .local int rx510_off
    .local int rx510_eos
    .local int rx510_rep
    .local pmc rx510_cur
    .local pmc rx510_curclass
    .local pmc rx510_bstack
    .local pmc rx510_cstack
    rx510_start = self."!cursor_start_all"()
    set rx510_cur, rx510_start[0]
    set rx510_tgt, rx510_start[1]
    set rx510_pos, rx510_start[2]
    set rx510_curclass, rx510_start[3]
    set rx510_bstack, rx510_start[4]
    set $I19, rx510_start[5]
    store_lex unicode:"$\x{a2}", rx510_cur
    length rx510_eos, rx510_tgt
    eq $I19, 1, rx510_restart1536
    gt rx510_pos, rx510_eos, rx510_fail1537
    repr_get_attr_int $I11, self, rx510_curclass, "$!from"
    ne $I11, -1, rxscan511_done1543
    goto rxscan511_scan1542
  rxscan511_loop1541:
    inc rx510_pos
    gt rx510_pos, rx510_eos, rx510_fail1537
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!from", rx510_pos
  rxscan511_scan1542:
    nqp_rxmark rx510_bstack, rxscan511_loop1541, rx510_pos, 0
  rxscan511_done1543:
    nqp_rxmark rx510_bstack, rxcap512_fail1545, rx510_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt513_01547
    nqp_push_label $P11, alt513_11548
    nqp_push_label $P11, alt513_21549
    nqp_rxmark rx510_bstack, alt513_end1546, -1, 0
    rx510_cur."!alt"(rx510_pos, "alt_nfa__23_1382484121.52907", $P11)
    goto rx510_fail1537
  alt513_01547:
    add $I11, rx510_pos, 1
    gt $I11, rx510_eos, rx510_fail1537
    substr $S10, rx510_tgt, rx510_pos, 1
    ne $S10, ucs4:"+", rx510_fail1537
    add rx510_pos, 1
    goto alt513_end1546
  alt513_11548:
    add $I11, rx510_pos, 1
    gt $I11, rx510_eos, rx510_fail1537
    substr $S10, rx510_tgt, rx510_pos, 1
    ne $S10, ucs4:"-", rx510_fail1537
    add rx510_pos, 1
    goto alt513_end1546
  alt513_21549:
    goto alt513_end1546
  alt513_end1546:
    nqp_rxcommit rx510_bstack, alt513_end1546
    nqp_rxpeek $I19, rx510_bstack, rxcap512_fail1545
    inc $I19
    set $I11, rx510_bstack[$I19]
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    $P11 = rx510_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx510_pos)
    rx510_cstack = rx510_cur."!cursor_capture"($P11, "sign")
    goto rxcap512_done1544
  rxcap512_fail1545:
    goto rx510_fail1537
  rxcap512_done1544:
    nqp_rxmark rx510_bstack, rxquantr515_done1552, rx510_pos, 0
  rxquantr515_loop1551:
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    $P11 = rx510_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx510_curclass, "$!pos"
    lt $I11, 0, rx510_fail1537
    goto rxsubrule516_pass1553
  rxsubrule516_back1554:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx510_curclass, "$!pos"
    lt $I11, 0, rx510_fail1537
  rxsubrule516_pass1553:
    rx510_cstack = rx510_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule516_back1554
    push rx510_bstack, $I11
    push rx510_bstack, 0
    push rx510_bstack, rx510_pos
    elements $I11, rx510_cstack
    push rx510_bstack, $I11
    repr_get_attr_int rx510_pos, $P11, rx510_curclass, "$!pos"
    nqp_rxpeek $I19, rx510_bstack, rxquantr515_done1552
    inc $I19
    inc $I19
    set rx510_rep, rx510_bstack[$I19]
    nqp_rxcommit rx510_bstack, rxquantr515_done1552
    inc rx510_rep
  rxquantr515_done1552:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt517_01556
    nqp_push_label $P11, alt517_11651
    nqp_push_label $P11, alt517_21656
    nqp_rxmark rx510_bstack, alt517_end1555, -1, 0
    rx510_cur."!alt"(rx510_pos, "alt_nfa__25_1382484121.53019", $P11)
    goto rx510_fail1537
  alt517_01556:
    add $I11, rx510_pos, 1
    gt $I11, rx510_eos, rx510_fail1537
    substr $S10, rx510_tgt, rx510_pos, 1
    ne $S10, ucs4:"[", rx510_fail1537
    add rx510_pos, 1
    nqp_rxmark rx510_bstack, rxquantr518_done1558, rx510_pos, 0
  rxquantr518_loop1557:
    .const 'Sub' $P5001 = 'cuid_119_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    $P11 = rx510_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx510_curclass, "$!pos"
    lt $I11, 0, rx510_fail1537
    goto rxsubrule547_pass1647
  rxsubrule547_back1648:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx510_curclass, "$!pos"
    lt $I11, 0, rx510_fail1537
  rxsubrule547_pass1647:
    rx510_cstack = rx510_cur."!cursor_capture"($P11, "charspec")
    set_addr $I11, rxsubrule547_back1648
    push rx510_bstack, $I11
    push rx510_bstack, 0
    push rx510_bstack, rx510_pos
    elements $I11, rx510_cstack
    push rx510_bstack, $I11
    repr_get_attr_int rx510_pos, $P11, rx510_curclass, "$!pos"
    nqp_rxpeek $I19, rx510_bstack, rxquantr518_done1558
    inc $I19
    inc $I19
    set rx510_rep, rx510_bstack[$I19]
    nqp_rxcommit rx510_bstack, rxquantr518_done1558
    inc rx510_rep
    nqp_rxmark rx510_bstack, rxquantr518_done1558, rx510_pos, rx510_rep
    goto rxquantr518_loop1557
  rxquantr518_done1558:
    nqp_rxmark rx510_bstack, rxquantr548_done1650, rx510_pos, 0
  rxquantr548_loop1649:
    ge rx510_pos, rx510_eos, rx510_fail1537
    is_cclass $I11, .CCLASS_WHITESPACE, rx510_tgt, rx510_pos
    unless $I11, rx510_fail1537
    add rx510_pos, 1
    nqp_rxpeek $I19, rx510_bstack, rxquantr548_done1650
    inc $I19
    inc $I19
    set rx510_rep, rx510_bstack[$I19]
    nqp_rxcommit rx510_bstack, rxquantr548_done1650
    inc rx510_rep
    nqp_rxmark rx510_bstack, rxquantr548_done1650, rx510_pos, rx510_rep
    goto rxquantr548_loop1649
  rxquantr548_done1650:
    add $I11, rx510_pos, 1
    gt $I11, rx510_eos, rx510_fail1537
    substr $S10, rx510_tgt, rx510_pos, 1
    ne $S10, ucs4:"]", rx510_fail1537
    add rx510_pos, 1
    goto alt517_end1555
  alt517_11651:
    nqp_rxmark rx510_bstack, rxcap549_fail1653, rx510_pos, 0
    nqp_rxmark rx510_bstack, rxquantr550_done1655, -1, 0
  rxquantr550_loop1654:
    ge rx510_pos, rx510_eos, rx510_fail1537
    is_cclass $I11, .CCLASS_WORD, rx510_tgt, rx510_pos
    unless $I11, rx510_fail1537
    add rx510_pos, 1
    nqp_rxpeek $I19, rx510_bstack, rxquantr550_done1655
    inc $I19
    inc $I19
    set rx510_rep, rx510_bstack[$I19]
    nqp_rxcommit rx510_bstack, rxquantr550_done1655
    inc rx510_rep
    nqp_rxmark rx510_bstack, rxquantr550_done1655, rx510_pos, rx510_rep
    goto rxquantr550_loop1654
  rxquantr550_done1655:
    nqp_rxpeek $I19, rx510_bstack, rxcap549_fail1653
    inc $I19
    set $I11, rx510_bstack[$I19]
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    $P11 = rx510_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx510_pos)
    rx510_cstack = rx510_cur."!cursor_capture"($P11, "name")
    goto rxcap549_done1652
  rxcap549_fail1653:
    goto rx510_fail1537
  rxcap549_done1652:
    goto alt517_end1555
  alt517_21656:
    add $I11, rx510_pos, 1
    gt $I11, rx510_eos, rx510_fail1537
    substr $S10, rx510_tgt, rx510_pos, 1
    ne $S10, ucs4:":", rx510_fail1537
    add rx510_pos, 1
    nqp_rxmark rx510_bstack, rxcap551_fail1658, rx510_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt552_01660
    nqp_push_label $P11, alt552_11661
    nqp_rxmark rx510_bstack, alt552_end1659, -1, 0
    rx510_cur."!alt"(rx510_pos, "alt_nfa__24_1382484121.52983", $P11)
    goto rx510_fail1537
  alt552_01660:
    add $I11, rx510_pos, 1
    gt $I11, rx510_eos, rx510_fail1537
    substr $S10, rx510_tgt, rx510_pos, 1
    ne $S10, ucs4:"!", rx510_fail1537
    add rx510_pos, 1
    goto alt552_end1659
  alt552_11661:
    goto alt552_end1659
  alt552_end1659:
    nqp_rxcommit rx510_bstack, alt552_end1659
    nqp_rxpeek $I19, rx510_bstack, rxcap551_fail1658
    inc $I19
    set $I11, rx510_bstack[$I19]
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    $P11 = rx510_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx510_pos)
    rx510_cstack = rx510_cur."!cursor_capture"($P11, "invert")
    goto rxcap551_done1657
  rxcap551_fail1658:
    goto rx510_fail1537
  rxcap551_done1657:
    nqp_rxmark rx510_bstack, rxcap554_fail1664, rx510_pos, 0
    nqp_rxmark rx510_bstack, rxquantr555_done1666, -1, 0
  rxquantr555_loop1665:
    ge rx510_pos, rx510_eos, rx510_fail1537
    is_cclass $I11, .CCLASS_WORD, rx510_tgt, rx510_pos
    unless $I11, rx510_fail1537
    add rx510_pos, 1
    nqp_rxpeek $I19, rx510_bstack, rxquantr555_done1666
    inc $I19
    inc $I19
    set rx510_rep, rx510_bstack[$I19]
    nqp_rxcommit rx510_bstack, rxquantr555_done1666
    inc rx510_rep
    nqp_rxmark rx510_bstack, rxquantr555_done1666, rx510_pos, rx510_rep
    goto rxquantr555_loop1665
  rxquantr555_done1666:
    nqp_rxpeek $I19, rx510_bstack, rxcap554_fail1664
    inc $I19
    set $I11, rx510_bstack[$I19]
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    $P11 = rx510_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx510_pos)
    rx510_cstack = rx510_cur."!cursor_capture"($P11, "uniprop")
    goto rxcap554_done1663
  rxcap554_fail1664:
    goto rx510_fail1537
  rxcap554_done1663:
    goto alt517_end1555
  alt517_end1555:
    nqp_rxcommit rx510_bstack, alt517_end1555
    nqp_rxmark rx510_bstack, rxquantr556_done1668, rx510_pos, 0
  rxquantr556_loop1667:
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    $P11 = rx510_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx510_curclass, "$!pos"
    lt $I11, 0, rx510_fail1537
    goto rxsubrule557_pass1669
  rxsubrule557_back1670:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx510_curclass, "$!pos"
    lt $I11, 0, rx510_fail1537
  rxsubrule557_pass1669:
    rx510_cstack = rx510_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule557_back1670
    push rx510_bstack, $I11
    push rx510_bstack, 0
    push rx510_bstack, rx510_pos
    elements $I11, rx510_cstack
    push rx510_bstack, $I11
    repr_get_attr_int rx510_pos, $P11, rx510_curclass, "$!pos"
    nqp_rxpeek $I19, rx510_bstack, rxquantr556_done1668
    inc $I19
    inc $I19
    set rx510_rep, rx510_bstack[$I19]
    nqp_rxcommit rx510_bstack, rxquantr556_done1668
    inc rx510_rep
  rxquantr556_done1668:
    rx510_cur."!cursor_pass"(rx510_pos, "cclass_elem", 'backtrack'=>1)
    .return (rx510_cur)
  rx510_restart1536:
    repr_get_attr_obj rx510_cstack, rx510_cur, rx510_curclass, "$!cstack"
  rx510_fail1537:
    unless rx510_bstack, rx510_done1535
    pop $I19, rx510_bstack
    if_null rx510_cstack, rx510_cstack_done1540
    unless rx510_cstack, rx510_cstack_done1540
    dec $I19
    set $P11, rx510_cstack[$I19]
  rx510_cstack_done1540:
    pop rx510_rep, rx510_bstack
    pop rx510_pos, rx510_bstack
    pop $I19, rx510_bstack
    lt rx510_pos, -1, rx510_done1535
    lt rx510_pos, 0, rx510_fail1537
    eq $I19, 0, rx510_fail1537
    nqp_islist $I20, rx510_cstack
    unless $I20, rx510_jump1538
    elements $I18, rx510_bstack
    le $I18, 0, rx510_cut1539
    dec $I18
    set $I18, rx510_bstack[$I18]
  rx510_cut1539:
    assign rx510_cstack, $I18
  rx510_jump1538:
    jump $I19
  rx510_done1535:
    rx510_cur."!cursor_fail"()
    .return (rx510_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_119_1382484119.90237") :anon :lex :outer("cuid_113_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .const 'Sub' $P5004 = 'cuid_114_1382484119.90237' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_116_1382484119.90237' 
    capture_lex $P5004 
    .const 'Sub' $P5004 = 'cuid_118_1382484119.90237' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx519_start
    .local string rx519_tgt
    .local int rx519_pos
    .local int rx519_off
    .local int rx519_eos
    .local int rx519_rep
    .local pmc rx519_cur
    .local pmc rx519_curclass
    .local pmc rx519_bstack
    .local pmc rx519_cstack
    rx519_start = self."!cursor_start_all"()
    set rx519_cur, rx519_start[0]
    set rx519_tgt, rx519_start[1]
    set rx519_pos, rx519_start[2]
    set rx519_curclass, rx519_start[3]
    set rx519_bstack, rx519_start[4]
    set $I19, rx519_start[5]
    store_lex unicode:"$\x{a2}", rx519_cur
    length rx519_eos, rx519_tgt
    eq $I19, 1, rx519_restart1561
    gt rx519_pos, rx519_eos, rx519_fail1562
    repr_get_attr_int $I11, self, rx519_curclass, "$!from"
    ne $I11, -1, rxscan520_done1568
    goto rxscan520_scan1567
  rxscan520_loop1566:
    inc rx519_pos
    gt rx519_pos, rx519_eos, rx519_fail1562
    repr_bind_attr_int rx519_cur, rx519_curclass, "$!from", rx519_pos
  rxscan520_scan1567:
    nqp_rxmark rx519_bstack, rxscan520_loop1566, rx519_pos, 0
  rxscan520_done1568:
  alt521_01570:
    nqp_rxmark rx519_bstack, alt521_11586, rx519_pos, 0
    nqp_rxmark rx519_bstack, rxquantr522_done1572, rx519_pos, 0
  rxquantr522_loop1571:
    ge rx519_pos, rx519_eos, rx519_fail1562
    is_cclass $I11, .CCLASS_WHITESPACE, rx519_tgt, rx519_pos
    unless $I11, rx519_fail1562
    add rx519_pos, 1
    nqp_rxpeek $I19, rx519_bstack, rxquantr522_done1572
    inc $I19
    inc $I19
    set rx519_rep, rx519_bstack[$I19]
    nqp_rxcommit rx519_bstack, rxquantr522_done1572
    inc rx519_rep
    nqp_rxmark rx519_bstack, rxquantr522_done1572, rx519_pos, rx519_rep
    goto rxquantr522_loop1571
  rxquantr522_done1572:
    add $I11, rx519_pos, 1
    gt $I11, rx519_eos, rx519_fail1562
    substr $S10, rx519_tgt, rx519_pos, 1
    ne $S10, ucs4:"-", rx519_fail1562
    add rx519_pos, 1
    .const 'Sub' $P5001 = 'cuid_114_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx519_cur, rx519_curclass, "$!pos", rx519_pos
    $P11 = rx519_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx519_curclass, "$!pos"
    ge $I11, 0, rx519_fail1562
    repr_bind_attr_int rx519_cur, rx519_curclass, "$!pos", rx519_pos
    $P11 = rx519_cur."obs"("- as character range", ".. for range, for explicit - in character class, escape it or place as last thing")
    repr_get_attr_int $I11, $P11, rx519_curclass, "$!pos"
    lt $I11, 0, rx519_fail1562
    repr_get_attr_int rx519_pos, $P11, rx519_curclass, "$!pos"
    goto alt521_end1569
  alt521_11586:
    nqp_rxmark rx519_bstack, rxquantr527_done1588, rx519_pos, 0
  rxquantr527_loop1587:
    ge rx519_pos, rx519_eos, rx519_fail1562
    is_cclass $I11, .CCLASS_WHITESPACE, rx519_tgt, rx519_pos
    unless $I11, rx519_fail1562
    add rx519_pos, 1
    nqp_rxpeek $I19, rx519_bstack, rxquantr527_done1588
    inc $I19
    inc $I19
    set rx519_rep, rx519_bstack[$I19]
    nqp_rxcommit rx519_bstack, rxquantr527_done1588
    inc rx519_rep
    nqp_rxmark rx519_bstack, rxquantr527_done1588, rx519_pos, rx519_rep
    goto rxquantr527_loop1587
  rxquantr527_done1588:
    .const 'Sub' $P5002 = 'cuid_116_1382484119.90237' 
    capture_lex $P5002
    repr_bind_attr_int rx519_cur, rx519_curclass, "$!pos", rx519_pos
    $P11 = rx519_cur.$P5002()
    repr_get_attr_int $I11, $P11, rx519_curclass, "$!pos"
    lt $I11, 0, rx519_fail1562
    nqp_rxmark rx519_bstack, rxsubrule535_pass1614, -1, 0
  rxsubrule535_pass1614:
    rx519_cstack = rx519_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx519_pos, $P11, rx519_curclass, "$!pos"
    nqp_rxmark rx519_bstack, rxquantr536_done1616, rx519_pos, 0
  rxquantr536_loop1615:
    nqp_rxmark rx519_bstack, rxquantr537_done1618, rx519_pos, 0
  rxquantr537_loop1617:
    ge rx519_pos, rx519_eos, rx519_fail1562
    is_cclass $I11, .CCLASS_WHITESPACE, rx519_tgt, rx519_pos
    unless $I11, rx519_fail1562
    add rx519_pos, 1
    nqp_rxpeek $I19, rx519_bstack, rxquantr537_done1618
    inc $I19
    inc $I19
    set rx519_rep, rx519_bstack[$I19]
    nqp_rxcommit rx519_bstack, rxquantr537_done1618
    inc rx519_rep
    nqp_rxmark rx519_bstack, rxquantr537_done1618, rx519_pos, rx519_rep
    goto rxquantr537_loop1617
  rxquantr537_done1618:
    add $I11, rx519_pos, 2
    gt $I11, rx519_eos, rx519_fail1562
    substr $S10, rx519_tgt, rx519_pos, 2
    ne $S10, ucs4:"..", rx519_fail1562
    add rx519_pos, 2
    nqp_rxmark rx519_bstack, rxquantr538_done1620, rx519_pos, 0
  rxquantr538_loop1619:
    ge rx519_pos, rx519_eos, rx519_fail1562
    is_cclass $I11, .CCLASS_WHITESPACE, rx519_tgt, rx519_pos
    unless $I11, rx519_fail1562
    add rx519_pos, 1
    nqp_rxpeek $I19, rx519_bstack, rxquantr538_done1620
    inc $I19
    inc $I19
    set rx519_rep, rx519_bstack[$I19]
    nqp_rxcommit rx519_bstack, rxquantr538_done1620
    inc rx519_rep
    nqp_rxmark rx519_bstack, rxquantr538_done1620, rx519_pos, rx519_rep
    goto rxquantr538_loop1619
  rxquantr538_done1620:
    .const 'Sub' $P5003 = 'cuid_118_1382484119.90237' 
    capture_lex $P5003
    repr_bind_attr_int rx519_cur, rx519_curclass, "$!pos", rx519_pos
    $P11 = rx519_cur.$P5003()
    repr_get_attr_int $I11, $P11, rx519_curclass, "$!pos"
    lt $I11, 0, rx519_fail1562
    nqp_rxmark rx519_bstack, rxsubrule546_pass1646, -1, 0
  rxsubrule546_pass1646:
    rx519_cstack = rx519_cur."!cursor_capture"($P11, "1")
    repr_get_attr_int rx519_pos, $P11, rx519_curclass, "$!pos"
    nqp_rxpeek $I19, rx519_bstack, rxquantr536_done1616
    inc $I19
    inc $I19
    set rx519_rep, rx519_bstack[$I19]
    nqp_rxcommit rx519_bstack, rxquantr536_done1616
    inc rx519_rep
  rxquantr536_done1616:
  alt521_end1569:
    rx519_cur."!cursor_pass"(rx519_pos, 'backtrack'=>1)
    .return (rx519_cur)
  rx519_restart1561:
    repr_get_attr_obj rx519_cstack, rx519_cur, rx519_curclass, "$!cstack"
  rx519_fail1562:
    unless rx519_bstack, rx519_done1560
    pop $I19, rx519_bstack
    if_null rx519_cstack, rx519_cstack_done1565
    unless rx519_cstack, rx519_cstack_done1565
    dec $I19
    set $P11, rx519_cstack[$I19]
  rx519_cstack_done1565:
    pop rx519_rep, rx519_bstack
    pop rx519_pos, rx519_bstack
    pop $I19, rx519_bstack
    lt rx519_pos, -1, rx519_done1560
    lt rx519_pos, 0, rx519_fail1562
    eq $I19, 0, rx519_fail1562
    nqp_islist $I20, rx519_cstack
    unless $I20, rx519_jump1563
    elements $I18, rx519_bstack
    le $I18, 0, rx519_cut1564
    dec $I18
    set $I18, rx519_bstack[$I18]
  rx519_cut1564:
    assign rx519_cstack, $I18
  rx519_jump1563:
    jump $I19
  rx519_done1560:
    rx519_cur."!cursor_fail"()
    .return (rx519_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_114_1382484119.90237") :anon :lex :outer("cuid_119_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx523_start
    .local string rx523_tgt
    .local int rx523_pos
    .local int rx523_off
    .local int rx523_eos
    .local int rx523_rep
    .local pmc rx523_cur
    .local pmc rx523_curclass
    .local pmc rx523_bstack
    .local pmc rx523_cstack
    rx523_start = self."!cursor_start_all"()
    set rx523_cur, rx523_start[0]
    set rx523_tgt, rx523_start[1]
    set rx523_pos, rx523_start[2]
    set rx523_curclass, rx523_start[3]
    set rx523_bstack, rx523_start[4]
    set $I19, rx523_start[5]
    store_lex unicode:"$\x{a2}", rx523_cur
    length rx523_eos, rx523_tgt
    eq $I19, 1, rx523_restart1575
    gt rx523_pos, rx523_eos, rx523_fail1576
    repr_get_attr_int $I11, self, rx523_curclass, "$!from"
    ne $I11, -1, rxscan524_done1582
    goto rxscan524_scan1581
  rxscan524_loop1580:
    inc rx523_pos
    gt rx523_pos, rx523_eos, rx523_fail1576
    repr_bind_attr_int rx523_cur, rx523_curclass, "$!from", rx523_pos
  rxscan524_scan1581:
    nqp_rxmark rx523_bstack, rxscan524_loop1580, rx523_pos, 0
  rxscan524_done1582:
    nqp_rxmark rx523_bstack, rxquantr525_done1584, rx523_pos, 0
  rxquantr525_loop1583:
    ge rx523_pos, rx523_eos, rx523_fail1576
    is_cclass $I11, .CCLASS_WHITESPACE, rx523_tgt, rx523_pos
    unless $I11, rx523_fail1576
    add rx523_pos, 1
    nqp_rxpeek $I19, rx523_bstack, rxquantr525_done1584
    inc $I19
    inc $I19
    set rx523_rep, rx523_bstack[$I19]
    nqp_rxcommit rx523_bstack, rxquantr525_done1584
    inc rx523_rep
    nqp_rxmark rx523_bstack, rxquantr525_done1584, rx523_pos, rx523_rep
    goto rxquantr525_loop1583
  rxquantr525_done1584:
    add $I11, rx523_pos, 1
    gt $I11, rx523_eos, rx523_fail1576
    substr $S10, rx523_tgt, rx523_pos, 1
    ne $S10, ucs4:"]", rx523_fail1576
    add rx523_pos, 1
    rx523_cur."!cursor_pass"(rx523_pos, 'backtrack'=>1)
    .return (rx523_cur)
  rx523_restart1575:
    repr_get_attr_obj rx523_cstack, rx523_cur, rx523_curclass, "$!cstack"
  rx523_fail1576:
    unless rx523_bstack, rx523_done1574
    pop $I19, rx523_bstack
    if_null rx523_cstack, rx523_cstack_done1579
    unless rx523_cstack, rx523_cstack_done1579
    dec $I19
    set $P11, rx523_cstack[$I19]
  rx523_cstack_done1579:
    pop rx523_rep, rx523_bstack
    pop rx523_pos, rx523_bstack
    pop $I19, rx523_bstack
    lt rx523_pos, -1, rx523_done1574
    lt rx523_pos, 0, rx523_fail1576
    eq $I19, 0, rx523_fail1576
    nqp_islist $I20, rx523_cstack
    unless $I20, rx523_jump1577
    elements $I18, rx523_bstack
    le $I18, 0, rx523_cut1578
    dec $I18
    set $I18, rx523_bstack[$I18]
  rx523_cut1578:
    assign rx523_cstack, $I18
  rx523_jump1577:
    jump $I19
  rx523_done1574:
    rx523_cur."!cursor_fail"()
    .return (rx523_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_116_1382484119.90237") :anon :lex :outer("cuid_119_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_115_1382484119.90237' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx528_start
    .local string rx528_tgt
    .local int rx528_pos
    .local int rx528_off
    .local int rx528_eos
    .local int rx528_rep
    .local pmc rx528_cur
    .local pmc rx528_curclass
    .local pmc rx528_bstack
    .local pmc rx528_cstack
    rx528_start = self."!cursor_start_all"()
    set rx528_cur, rx528_start[0]
    set rx528_tgt, rx528_start[1]
    set rx528_pos, rx528_start[2]
    set rx528_curclass, rx528_start[3]
    set rx528_bstack, rx528_start[4]
    set $I19, rx528_start[5]
    store_lex unicode:"$\x{a2}", rx528_cur
    length rx528_eos, rx528_tgt
    eq $I19, 1, rx528_restart1591
    gt rx528_pos, rx528_eos, rx528_fail1592
    repr_get_attr_int $I11, self, rx528_curclass, "$!from"
    ne $I11, -1, rxscan529_done1598
    goto rxscan529_scan1597
  rxscan529_loop1596:
    inc rx528_pos
    gt rx528_pos, rx528_eos, rx528_fail1592
    repr_bind_attr_int rx528_cur, rx528_curclass, "$!from", rx528_pos
  rxscan529_scan1597:
    nqp_rxmark rx528_bstack, rxscan529_loop1596, rx528_pos, 0
  rxscan529_done1598:
  alt530_01600:
    nqp_rxmark rx528_bstack, alt530_11602, rx528_pos, 0
    add $I11, rx528_pos, 1
    gt $I11, rx528_eos, rx528_fail1592
    substr $S10, rx528_tgt, rx528_pos, 1
    ne $S10, ucs4:"\\", rx528_fail1592
    add rx528_pos, 1
    repr_bind_attr_int rx528_cur, rx528_curclass, "$!pos", rx528_pos
    $P11 = rx528_cur."cclass_backslash"()
    repr_get_attr_int $I11, $P11, rx528_curclass, "$!pos"
    lt $I11, 0, rx528_fail1592
    nqp_rxmark rx528_bstack, rxsubrule531_pass1601, -1, 0
  rxsubrule531_pass1601:
    rx528_cstack = rx528_cur."!cursor_capture"($P11, "cclass_backslash")
    repr_get_attr_int rx528_pos, $P11, rx528_curclass, "$!pos"
    goto alt530_end1599
  alt530_11602:
    .const 'Sub' $P5001 = 'cuid_115_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx528_cur, rx528_curclass, "$!pos", rx528_pos
    $P11 = rx528_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx528_curclass, "$!pos"
    lt $I11, 0, rx528_fail1592
    nqp_rxmark rx528_bstack, rxsubrule534_pass1613, -1, 0
  rxsubrule534_pass1613:
    rx528_cstack = rx528_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx528_pos, $P11, rx528_curclass, "$!pos"
  alt530_end1599:
    rx528_cur."!cursor_pass"(rx528_pos, 'backtrack'=>1)
    .return (rx528_cur)
  rx528_restart1591:
    repr_get_attr_obj rx528_cstack, rx528_cur, rx528_curclass, "$!cstack"
  rx528_fail1592:
    unless rx528_bstack, rx528_done1590
    pop $I19, rx528_bstack
    if_null rx528_cstack, rx528_cstack_done1595
    unless rx528_cstack, rx528_cstack_done1595
    dec $I19
    set $P11, rx528_cstack[$I19]
  rx528_cstack_done1595:
    pop rx528_rep, rx528_bstack
    pop rx528_pos, rx528_bstack
    pop $I19, rx528_bstack
    lt rx528_pos, -1, rx528_done1590
    lt rx528_pos, 0, rx528_fail1592
    eq $I19, 0, rx528_fail1592
    nqp_islist $I20, rx528_cstack
    unless $I20, rx528_jump1593
    elements $I18, rx528_bstack
    le $I18, 0, rx528_cut1594
    dec $I18
    set $I18, rx528_bstack[$I18]
  rx528_cut1594:
    assign rx528_cstack, $I18
  rx528_jump1593:
    jump $I19
  rx528_done1590:
    rx528_cur."!cursor_fail"()
    .return (rx528_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_115_1382484119.90237") :anon :lex :outer("cuid_116_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx532_start
    .local string rx532_tgt
    .local int rx532_pos
    .local int rx532_off
    .local int rx532_eos
    .local int rx532_rep
    .local pmc rx532_cur
    .local pmc rx532_curclass
    .local pmc rx532_bstack
    .local pmc rx532_cstack
    rx532_start = self."!cursor_start_all"()
    set rx532_cur, rx532_start[0]
    set rx532_tgt, rx532_start[1]
    set rx532_pos, rx532_start[2]
    set rx532_curclass, rx532_start[3]
    set rx532_bstack, rx532_start[4]
    set $I19, rx532_start[5]
    store_lex unicode:"$\x{a2}", rx532_cur
    length rx532_eos, rx532_tgt
    eq $I19, 1, rx532_restart1605
    gt rx532_pos, rx532_eos, rx532_fail1606
    repr_get_attr_int $I11, self, rx532_curclass, "$!from"
    ne $I11, -1, rxscan533_done1612
    goto rxscan533_scan1611
  rxscan533_loop1610:
    inc rx532_pos
    gt rx532_pos, rx532_eos, rx532_fail1606
    repr_bind_attr_int rx532_cur, rx532_curclass, "$!from", rx532_pos
  rxscan533_scan1611:
    nqp_rxmark rx532_bstack, rxscan533_loop1610, rx532_pos, 0
  rxscan533_done1612:
    ge rx532_pos, rx532_eos, rx532_fail1606
    substr $S11, rx532_tgt, rx532_pos, 1
    index $I11, ucs4:"]\\", $S11
    ge $I11, 0, rx532_fail1606
    inc rx532_pos
    rx532_cur."!cursor_pass"(rx532_pos, 'backtrack'=>1)
    .return (rx532_cur)
  rx532_restart1605:
    repr_get_attr_obj rx532_cstack, rx532_cur, rx532_curclass, "$!cstack"
  rx532_fail1606:
    unless rx532_bstack, rx532_done1604
    pop $I19, rx532_bstack
    if_null rx532_cstack, rx532_cstack_done1609
    unless rx532_cstack, rx532_cstack_done1609
    dec $I19
    set $P11, rx532_cstack[$I19]
  rx532_cstack_done1609:
    pop rx532_rep, rx532_bstack
    pop rx532_pos, rx532_bstack
    pop $I19, rx532_bstack
    lt rx532_pos, -1, rx532_done1604
    lt rx532_pos, 0, rx532_fail1606
    eq $I19, 0, rx532_fail1606
    nqp_islist $I20, rx532_cstack
    unless $I20, rx532_jump1607
    elements $I18, rx532_bstack
    le $I18, 0, rx532_cut1608
    dec $I18
    set $I18, rx532_bstack[$I18]
  rx532_cut1608:
    assign rx532_cstack, $I18
  rx532_jump1607:
    jump $I19
  rx532_done1604:
    rx532_cur."!cursor_fail"()
    .return (rx532_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_118_1382484119.90237") :anon :lex :outer("cuid_119_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .const 'Sub' $P5002 = 'cuid_117_1382484119.90237' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx539_start
    .local string rx539_tgt
    .local int rx539_pos
    .local int rx539_off
    .local int rx539_eos
    .local int rx539_rep
    .local pmc rx539_cur
    .local pmc rx539_curclass
    .local pmc rx539_bstack
    .local pmc rx539_cstack
    rx539_start = self."!cursor_start_all"()
    set rx539_cur, rx539_start[0]
    set rx539_tgt, rx539_start[1]
    set rx539_pos, rx539_start[2]
    set rx539_curclass, rx539_start[3]
    set rx539_bstack, rx539_start[4]
    set $I19, rx539_start[5]
    store_lex unicode:"$\x{a2}", rx539_cur
    length rx539_eos, rx539_tgt
    eq $I19, 1, rx539_restart1623
    gt rx539_pos, rx539_eos, rx539_fail1624
    repr_get_attr_int $I11, self, rx539_curclass, "$!from"
    ne $I11, -1, rxscan540_done1630
    goto rxscan540_scan1629
  rxscan540_loop1628:
    inc rx539_pos
    gt rx539_pos, rx539_eos, rx539_fail1624
    repr_bind_attr_int rx539_cur, rx539_curclass, "$!from", rx539_pos
  rxscan540_scan1629:
    nqp_rxmark rx539_bstack, rxscan540_loop1628, rx539_pos, 0
  rxscan540_done1630:
  alt541_01632:
    nqp_rxmark rx539_bstack, alt541_11634, rx539_pos, 0
    add $I11, rx539_pos, 1
    gt $I11, rx539_eos, rx539_fail1624
    substr $S10, rx539_tgt, rx539_pos, 1
    ne $S10, ucs4:"\\", rx539_fail1624
    add rx539_pos, 1
    repr_bind_attr_int rx539_cur, rx539_curclass, "$!pos", rx539_pos
    $P11 = rx539_cur."cclass_backslash"()
    repr_get_attr_int $I11, $P11, rx539_curclass, "$!pos"
    lt $I11, 0, rx539_fail1624
    nqp_rxmark rx539_bstack, rxsubrule542_pass1633, -1, 0
  rxsubrule542_pass1633:
    rx539_cstack = rx539_cur."!cursor_capture"($P11, "cclass_backslash")
    repr_get_attr_int rx539_pos, $P11, rx539_curclass, "$!pos"
    goto alt541_end1631
  alt541_11634:
    .const 'Sub' $P5001 = 'cuid_117_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx539_cur, rx539_curclass, "$!pos", rx539_pos
    $P11 = rx539_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx539_curclass, "$!pos"
    lt $I11, 0, rx539_fail1624
    nqp_rxmark rx539_bstack, rxsubrule545_pass1645, -1, 0
  rxsubrule545_pass1645:
    rx539_cstack = rx539_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx539_pos, $P11, rx539_curclass, "$!pos"
  alt541_end1631:
    rx539_cur."!cursor_pass"(rx539_pos, 'backtrack'=>1)
    .return (rx539_cur)
  rx539_restart1623:
    repr_get_attr_obj rx539_cstack, rx539_cur, rx539_curclass, "$!cstack"
  rx539_fail1624:
    unless rx539_bstack, rx539_done1622
    pop $I19, rx539_bstack
    if_null rx539_cstack, rx539_cstack_done1627
    unless rx539_cstack, rx539_cstack_done1627
    dec $I19
    set $P11, rx539_cstack[$I19]
  rx539_cstack_done1627:
    pop rx539_rep, rx539_bstack
    pop rx539_pos, rx539_bstack
    pop $I19, rx539_bstack
    lt rx539_pos, -1, rx539_done1622
    lt rx539_pos, 0, rx539_fail1624
    eq $I19, 0, rx539_fail1624
    nqp_islist $I20, rx539_cstack
    unless $I20, rx539_jump1625
    elements $I18, rx539_bstack
    le $I18, 0, rx539_cut1626
    dec $I18
    set $I18, rx539_bstack[$I18]
  rx539_cut1626:
    assign rx539_cstack, $I18
  rx539_jump1625:
    jump $I19
  rx539_done1622:
    rx539_cur."!cursor_fail"()
    .return (rx539_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_117_1382484119.90237") :anon :lex :outer("cuid_118_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx543_start
    .local string rx543_tgt
    .local int rx543_pos
    .local int rx543_off
    .local int rx543_eos
    .local int rx543_rep
    .local pmc rx543_cur
    .local pmc rx543_curclass
    .local pmc rx543_bstack
    .local pmc rx543_cstack
    rx543_start = self."!cursor_start_all"()
    set rx543_cur, rx543_start[0]
    set rx543_tgt, rx543_start[1]
    set rx543_pos, rx543_start[2]
    set rx543_curclass, rx543_start[3]
    set rx543_bstack, rx543_start[4]
    set $I19, rx543_start[5]
    store_lex unicode:"$\x{a2}", rx543_cur
    length rx543_eos, rx543_tgt
    eq $I19, 1, rx543_restart1637
    gt rx543_pos, rx543_eos, rx543_fail1638
    repr_get_attr_int $I11, self, rx543_curclass, "$!from"
    ne $I11, -1, rxscan544_done1644
    goto rxscan544_scan1643
  rxscan544_loop1642:
    inc rx543_pos
    gt rx543_pos, rx543_eos, rx543_fail1638
    repr_bind_attr_int rx543_cur, rx543_curclass, "$!from", rx543_pos
  rxscan544_scan1643:
    nqp_rxmark rx543_bstack, rxscan544_loop1642, rx543_pos, 0
  rxscan544_done1644:
    ge rx543_pos, rx543_eos, rx543_fail1638
    substr $S11, rx543_tgt, rx543_pos, 1
    index $I11, ucs4:"]\\", $S11
    ge $I11, 0, rx543_fail1638
    inc rx543_pos
    rx543_cur."!cursor_pass"(rx543_pos, 'backtrack'=>1)
    .return (rx543_cur)
  rx543_restart1637:
    repr_get_attr_obj rx543_cstack, rx543_cur, rx543_curclass, "$!cstack"
  rx543_fail1638:
    unless rx543_bstack, rx543_done1636
    pop $I19, rx543_bstack
    if_null rx543_cstack, rx543_cstack_done1641
    unless rx543_cstack, rx543_cstack_done1641
    dec $I19
    set $P11, rx543_cstack[$I19]
  rx543_cstack_done1641:
    pop rx543_rep, rx543_bstack
    pop rx543_pos, rx543_bstack
    pop $I19, rx543_bstack
    lt rx543_pos, -1, rx543_done1636
    lt rx543_pos, 0, rx543_fail1638
    eq $I19, 0, rx543_fail1638
    nqp_islist $I20, rx543_cstack
    unless $I20, rx543_jump1639
    elements $I18, rx543_bstack
    le $I18, 0, rx543_cut1640
    dec $I18
    set $I18, rx543_bstack[$I18]
  rx543_cut1640:
    assign rx543_cstack, $I18
  rx543_jump1639:
    jump $I19
  rx543_done1636:
    rx543_cur."!cursor_fail"()
    .return (rx543_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_120_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 361
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_121_1382484119.90237' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_233_1382484119.90237' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx558_start
    .local string rx558_tgt
    .local int rx558_pos
    .local int rx558_off
    .local int rx558_eos
    .local int rx558_rep
    .local pmc rx558_cur
    .local pmc rx558_curclass
    .local pmc rx558_bstack
    .local pmc rx558_cstack
    rx558_start = self."!cursor_start_all"()
    set rx558_cur, rx558_start[0]
    set rx558_tgt, rx558_start[1]
    set rx558_pos, rx558_start[2]
    set rx558_curclass, rx558_start[3]
    set rx558_bstack, rx558_start[4]
    set $I19, rx558_start[5]
    store_lex unicode:"$\x{a2}", rx558_cur
    length rx558_eos, rx558_tgt
    eq $I19, 1, rx558_restart1673
    gt rx558_pos, rx558_eos, rx558_fail1674
    repr_get_attr_int $I11, self, rx558_curclass, "$!from"
    ne $I11, -1, rxscan559_done1680
    goto rxscan559_scan1679
  rxscan559_loop1678:
    inc rx558_pos
    gt rx558_pos, rx558_eos, rx558_fail1674
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!from", rx558_pos
  rxscan559_scan1679:
    nqp_rxmark rx558_bstack, rxscan559_loop1678, rx558_pos, 0
  rxscan559_done1680:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt560_01682
    nqp_push_label $P11, alt560_11704
    nqp_rxmark rx558_bstack, alt560_end1681, -1, 0
    rx558_cur."!alt"(rx558_pos, "alt_nfa__28_1382484121.60165", $P11)
    goto rx558_fail1674
  alt560_01682:
    add $I11, rx558_pos, 1
    gt $I11, rx558_eos, rx558_fail1674
    substr $S10, rx558_tgt, rx558_pos, 1
    ne $S10, ucs4:":", rx558_fail1674
    add rx558_pos, 1
    nqp_rxmark rx558_bstack, rxquantr561_done1684, -1, 0
  rxquantr561_loop1683:
    .const 'Sub' $P5001 = 'cuid_121_1382484119.90237' 
    capture_lex $P5001
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur.$P5001()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail1674
    goto rxsubrule566_pass1700
  rxsubrule566_back1701:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail1674
  rxsubrule566_pass1700:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "n")
    set_addr $I11, rxsubrule566_back1701
    push rx558_bstack, $I11
    push rx558_bstack, 0
    push rx558_bstack, rx558_pos
    elements $I11, rx558_cstack
    push rx558_bstack, $I11
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    nqp_rxpeek $I19, rx558_bstack, rxquantr561_done1684
    inc $I19
    inc $I19
    set rx558_rep, rx558_bstack[$I19]
    nqp_rxcommit rx558_bstack, rxquantr561_done1684
    inc rx558_rep
  rxquantr561_done1684:
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail1674
    nqp_rxmark rx558_bstack, rxsubrule567_pass1702, -1, 0
  rxsubrule567_pass1702:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    le rx558_pos, 0, rx558_fail1674
    is_cclass $I11, .CCLASS_WORD, rx558_tgt, rx558_pos
    if $I11, rx558_fail1674
    sub $I11, rx558_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx558_tgt, $I11
    unless $I11, rx558_fail1674
    goto alt560_end1681
  alt560_11704:
    add $I11, rx558_pos, 1
    gt $I11, rx558_eos, rx558_fail1674
    substr $S10, rx558_tgt, rx558_pos, 1
    ne $S10, ucs4:":", rx558_fail1674
    add rx558_pos, 1
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."mod_ident"()
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail1674
    nqp_rxmark rx558_bstack, rxsubrule569_pass1705, -1, 0
  rxsubrule569_pass1705:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "mod_ident")
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    nqp_rxmark rx558_bstack, rxquantr570_done1707, rx558_pos, 0
  rxquantr570_loop1706:
    add $I11, rx558_pos, 1
    gt $I11, rx558_eos, rx558_fail1674
    substr $S10, rx558_tgt, rx558_pos, 1
    ne $S10, ucs4:"(", rx558_fail1674
    add rx558_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt571_01709
    nqp_push_label $P11, alt571_11714
    nqp_push_label $P11, alt571_21716
    nqp_rxmark rx558_bstack, alt571_end1708, -1, 0
    rx558_cur."!alt"(rx558_pos, "alt_nfa__27_1382484121.60108", $P11)
    goto rx558_fail1674
  alt571_01709:
    nqp_rxmark rx558_bstack, rxcap572_fail1711, rx558_pos, 0
    nqp_rxmark rx558_bstack, rxquantr573_done1713, -1, 0
  rxquantr573_loop1712:
    ge rx558_pos, rx558_eos, rx558_fail1674
    is_cclass $I11, .CCLASS_NUMERIC, rx558_tgt, rx558_pos
    unless $I11, rx558_fail1674
    add rx558_pos, 1
    nqp_rxpeek $I19, rx558_bstack, rxquantr573_done1713
    inc $I19
    inc $I19
    set rx558_rep, rx558_bstack[$I19]
    nqp_rxcommit rx558_bstack, rxquantr573_done1713
    inc rx558_rep
    nqp_rxmark rx558_bstack, rxquantr573_done1713, rx558_pos, rx558_rep
    goto rxquantr573_loop1712
  rxquantr573_done1713:
    nqp_rxpeek $I19, rx558_bstack, rxcap572_fail1711
    inc $I19
    set $I11, rx558_bstack[$I19]
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx558_pos)
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "n")
    goto rxcap572_done1710
  rxcap572_fail1711:
    goto rx558_fail1674
  rxcap572_done1710:
    goto alt571_end1708
  alt571_11714:
    ge rx558_pos, rx558_eos, rx558_fail1674
    substr $S11, rx558_tgt, rx558_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx558_fail1674
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail1674
    nqp_rxmark rx558_bstack, rxsubrule574_pass1715, -1, 0
  rxsubrule574_pass1715:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    goto alt571_end1708
  alt571_21716:
    ge rx558_pos, rx558_eos, rx558_fail1674
    substr $S11, rx558_tgt, rx558_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx558_fail1674
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    $P11 = rx558_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx558_curclass, "$!pos"
    lt $I11, 0, rx558_fail1674
    nqp_rxmark rx558_bstack, rxsubrule575_pass1717, -1, 0
  rxsubrule575_pass1717:
    rx558_cstack = rx558_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx558_pos, $P11, rx558_curclass, "$!pos"
    goto alt571_end1708
  alt571_end1708:
    nqp_rxcommit rx558_bstack, alt571_end1708
    add $I11, rx558_pos, 1
    gt $I11, rx558_eos, rx558_fail1674
    substr $S10, rx558_tgt, rx558_pos, 1
    ne $S10, ucs4:")", rx558_fail1674
    add rx558_pos, 1
    nqp_rxpeek $I19, rx558_bstack, rxquantr570_done1707
    inc $I19
    inc $I19
    set rx558_rep, rx558_bstack[$I19]
    nqp_rxcommit rx558_bstack, rxquantr570_done1707
    inc rx558_rep
  rxquantr570_done1707:
    goto alt560_end1681
  alt560_end1681:
    nqp_rxcommit rx558_bstack, alt560_end1681
    repr_bind_attr_int rx558_cur, rx558_curclass, "$!pos", rx558_pos
    store_lex unicode:"$\x{a2}", rx558_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_233_1382484119.90237' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx558_cur."!cursor_pass"(rx558_pos, "mod_internal", 'backtrack'=>1)
    .return (rx558_cur)
  rx558_restart1673:
    repr_get_attr_obj rx558_cstack, rx558_cur, rx558_curclass, "$!cstack"
  rx558_fail1674:
    unless rx558_bstack, rx558_done1672
    pop $I19, rx558_bstack
    if_null rx558_cstack, rx558_cstack_done1677
    unless rx558_cstack, rx558_cstack_done1677
    dec $I19
    set $P11, rx558_cstack[$I19]
  rx558_cstack_done1677:
    pop rx558_rep, rx558_bstack
    pop rx558_pos, rx558_bstack
    pop $I19, rx558_bstack
    lt rx558_pos, -1, rx558_done1672
    lt rx558_pos, 0, rx558_fail1674
    eq $I19, 0, rx558_fail1674
    nqp_islist $I20, rx558_cstack
    unless $I20, rx558_jump1675
    elements $I18, rx558_bstack
    le $I18, 0, rx558_cut1676
    dec $I18
    set $I18, rx558_bstack[$I18]
  rx558_cut1676:
    assign rx558_cstack, $I18
  rx558_jump1675:
    jump $I19
  rx558_done1672:
    rx558_cur."!cursor_fail"()
    .return (rx558_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_121_1382484119.90237") :anon :lex :outer("cuid_120_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx562_start
    .local string rx562_tgt
    .local int rx562_pos
    .local int rx562_off
    .local int rx562_eos
    .local int rx562_rep
    .local pmc rx562_cur
    .local pmc rx562_curclass
    .local pmc rx562_bstack
    .local pmc rx562_cstack
    rx562_start = self."!cursor_start_all"()
    set rx562_cur, rx562_start[0]
    set rx562_tgt, rx562_start[1]
    set rx562_pos, rx562_start[2]
    set rx562_curclass, rx562_start[3]
    set rx562_bstack, rx562_start[4]
    set $I19, rx562_start[5]
    store_lex unicode:"$\x{a2}", rx562_cur
    length rx562_eos, rx562_tgt
    eq $I19, 1, rx562_restart1687
    gt rx562_pos, rx562_eos, rx562_fail1688
    repr_get_attr_int $I11, self, rx562_curclass, "$!from"
    ne $I11, -1, rxscan563_done1694
    goto rxscan563_scan1693
  rxscan563_loop1692:
    inc rx562_pos
    gt rx562_pos, rx562_eos, rx562_fail1688
    repr_bind_attr_int rx562_cur, rx562_curclass, "$!from", rx562_pos
  rxscan563_scan1693:
    nqp_rxmark rx562_bstack, rxscan563_loop1692, rx562_pos, 0
  rxscan563_done1694:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt564_01696
    nqp_push_label $P11, alt564_11697
    nqp_rxmark rx562_bstack, alt564_end1695, -1, 0
    rx562_cur."!alt"(rx562_pos, "alt_nfa__26_1382484121.53967", $P11)
    goto rx562_fail1688
  alt564_01696:
    add $I11, rx562_pos, 1
    gt $I11, rx562_eos, rx562_fail1688
    substr $S10, rx562_tgt, rx562_pos, 1
    ne $S10, ucs4:"!", rx562_fail1688
    add rx562_pos, 1
    goto alt564_end1695
  alt564_11697:
    nqp_rxmark rx562_bstack, rxquantr565_done1699, -1, 0
  rxquantr565_loop1698:
    ge rx562_pos, rx562_eos, rx562_fail1688
    is_cclass $I11, .CCLASS_NUMERIC, rx562_tgt, rx562_pos
    unless $I11, rx562_fail1688
    add rx562_pos, 1
    nqp_rxpeek $I19, rx562_bstack, rxquantr565_done1699
    inc $I19
    inc $I19
    set rx562_rep, rx562_bstack[$I19]
    nqp_rxcommit rx562_bstack, rxquantr565_done1699
    inc rx562_rep
    nqp_rxmark rx562_bstack, rxquantr565_done1699, rx562_pos, rx562_rep
    goto rxquantr565_loop1698
  rxquantr565_done1699:
    goto alt564_end1695
  alt564_end1695:
    rx562_cur."!cursor_pass"(rx562_pos, 'backtrack'=>1)
    .return (rx562_cur)
  rx562_restart1687:
    repr_get_attr_obj rx562_cstack, rx562_cur, rx562_curclass, "$!cstack"
  rx562_fail1688:
    unless rx562_bstack, rx562_done1686
    pop $I19, rx562_bstack
    if_null rx562_cstack, rx562_cstack_done1691
    unless rx562_cstack, rx562_cstack_done1691
    dec $I19
    set $P11, rx562_cstack[$I19]
  rx562_cstack_done1691:
    pop rx562_rep, rx562_bstack
    pop rx562_pos, rx562_bstack
    pop $I19, rx562_bstack
    lt rx562_pos, -1, rx562_done1686
    lt rx562_pos, 0, rx562_fail1688
    eq $I19, 0, rx562_fail1688
    nqp_islist $I20, rx562_cstack
    unless $I20, rx562_jump1689
    elements $I18, rx562_bstack
    le $I18, 0, rx562_cut1690
    dec $I18
    set $I18, rx562_bstack[$I18]
  rx562_cut1690:
    assign rx562_cstack, $I18
  rx562_jump1689:
    jump $I19
  rx562_done1686:
    rx562_cur."!cursor_fail"()
    .return (rx562_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1382484119.90237") :anon :lex :outer("cuid_120_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 375
    .const 'Sub' $P5011 = 'cuid_232_1382484119.90237' 
    capture_lex $P5011 
    .local pmc fb_tmp_15 
    find_lex $P5001, "$/"
    unless_null $P5001, fallback1722
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5001, $P5002
  fallback1722:
    set fb_tmp_15, $P5001
    repr_defined $I5002, fb_tmp_15
    unless $I5002 goto if577_else1720 
    set $P5003, fb_tmp_15["quote_EXPR"]
    set $P5005, $P5003
    goto if577_end1721
  if577_else1720:
    null $P5004
    set $P5005, $P5004
  if577_end1721:
    unless_null $P5005, vivi_5781723
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_5781723:
    isfalse $I5001, $P5005
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if576_end1719 
    .const 'Sub' $P5007 = 'cuid_232_1382484119.90237' 
    capture_lex $P5007
    $P5008 = $P5007()
    set $P5009, $P5008
  if576_end1719:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1382484119.90237") :anon :lex :outer("cuid_233_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 376
    .lex "$n", $P101 
    .local pmc fb_tmp_16 
    .local pmc fb_tmp_17 
    .local pmc fb_tmp_18 
    .local pmc fb_tmp_19 
    .local pmc fb_tmp_20 
    .local pmc pkg_viv_tmp_5 
    .local pmc fb_tmp_21 
    .local pmc fb_tmp_22 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback1730
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5002, $P5003
  fallback1730:
    set fb_tmp_17, $P5002
    repr_defined $I5003, fb_tmp_17
    unless $I5003 goto if581_else1728 
    set $P5004, fb_tmp_17["n"]
    set $P5006, $P5004
    goto if581_end1729
  if581_else1728:
    null $P5005
    set $P5006, $P5005
  if581_end1729:
    unless_null $P5006, vivi_5821731
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_5821731:
    set fb_tmp_16, $P5006
    repr_defined $I5002, fb_tmp_16
    unless $I5002 goto if580_else1726 
    set $P5008, fb_tmp_16[0]
    set $P5010, $P5008
    goto if580_end1727
  if580_else1726:
    null $P5009
    set $P5010, $P5009
  if580_end1727:
    unless_null $P5010, vivi_5831732
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  vivi_5831732:
    set $S5001, $P5010
    isgt $I5001, $S5001, ""
    unless $I5001 goto if579_else1724 
    find_lex $P5012, "$/"
    unless_null $P5012, fallback1737
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5012, $P5013
  fallback1737:
    set fb_tmp_19, $P5012
    repr_defined $I5005, fb_tmp_19
    unless $I5005 goto if585_else1735 
    set $P5014, fb_tmp_19["n"]
    set $P5016, $P5014
    goto if585_end1736
  if585_else1735:
    null $P5015
    set $P5016, $P5015
  if585_end1736:
    unless_null $P5016, vivi_5861738
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5016, $P5017
  vivi_5861738:
    set fb_tmp_18, $P5016
    repr_defined $I5004, fb_tmp_18
    unless $I5004 goto if584_else1733 
    set $P5018, fb_tmp_18[0]
    set $P5020, $P5018
    goto if584_end1734
  if584_else1733:
    null $P5019
    set $P5020, $P5019
  if584_end1734:
    unless_null $P5020, vivi_5871739
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5020, $P5021
  vivi_5871739:
    set $N5001, $P5020
    box $P5023, $N5001
    set $P5022, $P5023
    goto if579_end1725
  if579_else1724:
    box $P5024, 1
    set $P5022, $P5024
  if579_end1725:
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*RX"
    unless_null $P5025, fallback1740
    nqp_get_sc_object $P5027, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5026, $P5027
    set pkg_viv_tmp_5, $P5026
    set fb_tmp_20, pkg_viv_tmp_5
    repr_defined $I5006, fb_tmp_20
    unless $I5006 goto if588_else1741 
    set $P5028, fb_tmp_20["%RX"]
    set $P5030, $P5028
    goto if588_end1742
  if588_else1741:
    null $P5029
    set $P5030, $P5029
  if588_end1742:
    unless_null $P5030, vivi_5891743
    new $P5031, 'Hash'
    set pkg_viv_tmp_5["%RX"], $P5031
    set $P5030, $P5031
  vivi_5891743:
    unless_null $P5030, vivi_5901744
    die "Contextual %*RX not found"
    box $P5032, "Contextual %*RX not found"
    set $P5030, $P5032
  vivi_5901744:
    set $P5025, $P5030
  fallback1740:
    find_lex $P5033, "$/"
    unless_null $P5033, fallback1749
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5033, $P5034
  fallback1749:
    set fb_tmp_22, $P5033
    repr_defined $I5008, fb_tmp_22
    unless $I5008 goto if592_else1747 
    set $P5035, fb_tmp_22["mod_ident"]
    set $P5037, $P5035
    goto if592_end1748
  if592_else1747:
    null $P5036
    set $P5037, $P5036
  if592_end1748:
    unless_null $P5037, vivi_5931750
    nqp_get_sc_object $P5038, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5037, $P5038
  vivi_5931750:
    set fb_tmp_21, $P5037
    repr_defined $I5007, fb_tmp_21
    unless $I5007 goto if591_else1745 
    set $P5039, fb_tmp_21["sym"]
    set $P5041, $P5039
    goto if591_end1746
  if591_else1745:
    null $P5040
    set $P5041, $P5040
  if591_end1746:
    unless_null $P5041, vivi_5941751
    nqp_get_sc_object $P5042, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5041, $P5042
  vivi_5941751:
    set $S5002, $P5041
    set $P5025[$S5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident" :subid("cuid_122_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 383
    .param pmc self 
    $P5001 = self."!protoregex"("mod_ident")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ignorecase>" :subid("cuid_123_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 384
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx595_start
    .local string rx595_tgt
    .local int rx595_pos
    .local int rx595_off
    .local int rx595_eos
    .local int rx595_rep
    .local pmc rx595_cur
    .local pmc rx595_curclass
    .local pmc rx595_bstack
    .local pmc rx595_cstack
    rx595_start = self."!cursor_start_all"()
    set rx595_cur, rx595_start[0]
    set rx595_tgt, rx595_start[1]
    set rx595_pos, rx595_start[2]
    set rx595_curclass, rx595_start[3]
    set rx595_bstack, rx595_start[4]
    set $I19, rx595_start[5]
    store_lex unicode:"$\x{a2}", rx595_cur
    length rx595_eos, rx595_tgt
    eq $I19, 1, rx595_restart1754
    gt rx595_pos, rx595_eos, rx595_fail1755
    repr_get_attr_int $I11, self, rx595_curclass, "$!from"
    ne $I11, -1, rxscan596_done1761
    goto rxscan596_scan1760
  rxscan596_loop1759:
    inc rx595_pos
    gt rx595_pos, rx595_eos, rx595_fail1755
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!from", rx595_pos
  rxscan596_scan1760:
    nqp_rxmark rx595_bstack, rxscan596_loop1759, rx595_pos, 0
  rxscan596_done1761:
    nqp_rxmark rx595_bstack, rxcap597_fail1763, rx595_pos, 0
    add $I11, rx595_pos, 1
    gt $I11, rx595_eos, rx595_fail1755
    substr $S10, rx595_tgt, rx595_pos, 1
    ne $S10, ucs4:"i", rx595_fail1755
    add rx595_pos, 1
    nqp_rxpeek $I19, rx595_bstack, rxcap597_fail1763
    inc $I19
    set $I11, rx595_bstack[$I19]
    repr_bind_attr_int rx595_cur, rx595_curclass, "$!pos", rx595_pos
    $P11 = rx595_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx595_pos)
    rx595_cstack = rx595_cur."!cursor_capture"($P11, "sym")
    goto rxcap597_done1762
  rxcap597_fail1763:
    goto rx595_fail1755
  rxcap597_done1762:
    nqp_rxmark rx595_bstack, rxquantr598_done1765, rx595_pos, 0
  rxquantr598_loop1764:
    add $I11, rx595_pos, 9
    gt $I11, rx595_eos, rx595_fail1755
    substr $S10, rx595_tgt, rx595_pos, 9
    ne $S10, ucs4:"gnorecase", rx595_fail1755
    add rx595_pos, 9
    nqp_rxpeek $I19, rx595_bstack, rxquantr598_done1765
    inc $I19
    inc $I19
    set rx595_rep, rx595_bstack[$I19]
    nqp_rxcommit rx595_bstack, rxquantr598_done1765
    inc rx595_rep
  rxquantr598_done1765:
    le rx595_pos, 0, rx595_fail1755
    is_cclass $I11, .CCLASS_WORD, rx595_tgt, rx595_pos
    if $I11, rx595_fail1755
    sub $I11, rx595_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx595_tgt, $I11
    unless $I11, rx595_fail1755
    rx595_cur."!cursor_pass"(rx595_pos, "mod_ident:sym<ignorecase>", 'backtrack'=>1)
    .return (rx595_cur)
  rx595_restart1754:
    repr_get_attr_obj rx595_cstack, rx595_cur, rx595_curclass, "$!cstack"
  rx595_fail1755:
    unless rx595_bstack, rx595_done1753
    pop $I19, rx595_bstack
    if_null rx595_cstack, rx595_cstack_done1758
    unless rx595_cstack, rx595_cstack_done1758
    dec $I19
    set $P11, rx595_cstack[$I19]
  rx595_cstack_done1758:
    pop rx595_rep, rx595_bstack
    pop rx595_pos, rx595_bstack
    pop $I19, rx595_bstack
    lt rx595_pos, -1, rx595_done1753
    lt rx595_pos, 0, rx595_fail1755
    eq $I19, 0, rx595_fail1755
    nqp_islist $I20, rx595_cstack
    unless $I20, rx595_jump1756
    elements $I18, rx595_bstack
    le $I18, 0, rx595_cut1757
    dec $I18
    set $I18, rx595_bstack[$I18]
  rx595_cut1757:
    assign rx595_cstack, $I18
  rx595_jump1756:
    jump $I19
  rx595_done1753:
    rx595_cur."!cursor_fail"()
    .return (rx595_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<ratchet>" :subid("cuid_124_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 385
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx600_start
    .local string rx600_tgt
    .local int rx600_pos
    .local int rx600_off
    .local int rx600_eos
    .local int rx600_rep
    .local pmc rx600_cur
    .local pmc rx600_curclass
    .local pmc rx600_bstack
    .local pmc rx600_cstack
    rx600_start = self."!cursor_start_all"()
    set rx600_cur, rx600_start[0]
    set rx600_tgt, rx600_start[1]
    set rx600_pos, rx600_start[2]
    set rx600_curclass, rx600_start[3]
    set rx600_bstack, rx600_start[4]
    set $I19, rx600_start[5]
    store_lex unicode:"$\x{a2}", rx600_cur
    length rx600_eos, rx600_tgt
    eq $I19, 1, rx600_restart1769
    gt rx600_pos, rx600_eos, rx600_fail1770
    repr_get_attr_int $I11, self, rx600_curclass, "$!from"
    ne $I11, -1, rxscan601_done1776
    goto rxscan601_scan1775
  rxscan601_loop1774:
    inc rx600_pos
    gt rx600_pos, rx600_eos, rx600_fail1770
    repr_bind_attr_int rx600_cur, rx600_curclass, "$!from", rx600_pos
  rxscan601_scan1775:
    nqp_rxmark rx600_bstack, rxscan601_loop1774, rx600_pos, 0
  rxscan601_done1776:
    nqp_rxmark rx600_bstack, rxcap602_fail1778, rx600_pos, 0
    add $I11, rx600_pos, 1
    gt $I11, rx600_eos, rx600_fail1770
    substr $S10, rx600_tgt, rx600_pos, 1
    ne $S10, ucs4:"r", rx600_fail1770
    add rx600_pos, 1
    nqp_rxpeek $I19, rx600_bstack, rxcap602_fail1778
    inc $I19
    set $I11, rx600_bstack[$I19]
    repr_bind_attr_int rx600_cur, rx600_curclass, "$!pos", rx600_pos
    $P11 = rx600_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx600_pos)
    rx600_cstack = rx600_cur."!cursor_capture"($P11, "sym")
    goto rxcap602_done1777
  rxcap602_fail1778:
    goto rx600_fail1770
  rxcap602_done1777:
    nqp_rxmark rx600_bstack, rxquantr603_done1780, rx600_pos, 0
  rxquantr603_loop1779:
    add $I11, rx600_pos, 6
    gt $I11, rx600_eos, rx600_fail1770
    substr $S10, rx600_tgt, rx600_pos, 6
    ne $S10, ucs4:"atchet", rx600_fail1770
    add rx600_pos, 6
    nqp_rxpeek $I19, rx600_bstack, rxquantr603_done1780
    inc $I19
    inc $I19
    set rx600_rep, rx600_bstack[$I19]
    nqp_rxcommit rx600_bstack, rxquantr603_done1780
    inc rx600_rep
  rxquantr603_done1780:
    le rx600_pos, 0, rx600_fail1770
    is_cclass $I11, .CCLASS_WORD, rx600_tgt, rx600_pos
    if $I11, rx600_fail1770
    sub $I11, rx600_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx600_tgt, $I11
    unless $I11, rx600_fail1770
    rx600_cur."!cursor_pass"(rx600_pos, "mod_ident:sym<ratchet>", 'backtrack'=>1)
    .return (rx600_cur)
  rx600_restart1769:
    repr_get_attr_obj rx600_cstack, rx600_cur, rx600_curclass, "$!cstack"
  rx600_fail1770:
    unless rx600_bstack, rx600_done1768
    pop $I19, rx600_bstack
    if_null rx600_cstack, rx600_cstack_done1773
    unless rx600_cstack, rx600_cstack_done1773
    dec $I19
    set $P11, rx600_cstack[$I19]
  rx600_cstack_done1773:
    pop rx600_rep, rx600_bstack
    pop rx600_pos, rx600_bstack
    pop $I19, rx600_bstack
    lt rx600_pos, -1, rx600_done1768
    lt rx600_pos, 0, rx600_fail1770
    eq $I19, 0, rx600_fail1770
    nqp_islist $I20, rx600_cstack
    unless $I20, rx600_jump1771
    elements $I18, rx600_bstack
    le $I18, 0, rx600_cut1772
    dec $I18
    set $I18, rx600_bstack[$I18]
  rx600_cut1772:
    assign rx600_cstack, $I18
  rx600_jump1771:
    jump $I19
  rx600_done1768:
    rx600_cur."!cursor_fail"()
    .return (rx600_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<sigspace>" :subid("cuid_125_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 386
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx605_start
    .local string rx605_tgt
    .local int rx605_pos
    .local int rx605_off
    .local int rx605_eos
    .local int rx605_rep
    .local pmc rx605_cur
    .local pmc rx605_curclass
    .local pmc rx605_bstack
    .local pmc rx605_cstack
    rx605_start = self."!cursor_start_all"()
    set rx605_cur, rx605_start[0]
    set rx605_tgt, rx605_start[1]
    set rx605_pos, rx605_start[2]
    set rx605_curclass, rx605_start[3]
    set rx605_bstack, rx605_start[4]
    set $I19, rx605_start[5]
    store_lex unicode:"$\x{a2}", rx605_cur
    length rx605_eos, rx605_tgt
    eq $I19, 1, rx605_restart1784
    gt rx605_pos, rx605_eos, rx605_fail1785
    repr_get_attr_int $I11, self, rx605_curclass, "$!from"
    ne $I11, -1, rxscan606_done1791
    goto rxscan606_scan1790
  rxscan606_loop1789:
    inc rx605_pos
    gt rx605_pos, rx605_eos, rx605_fail1785
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!from", rx605_pos
  rxscan606_scan1790:
    nqp_rxmark rx605_bstack, rxscan606_loop1789, rx605_pos, 0
  rxscan606_done1791:
    nqp_rxmark rx605_bstack, rxcap607_fail1793, rx605_pos, 0
    add $I11, rx605_pos, 1
    gt $I11, rx605_eos, rx605_fail1785
    substr $S10, rx605_tgt, rx605_pos, 1
    ne $S10, ucs4:"s", rx605_fail1785
    add rx605_pos, 1
    nqp_rxpeek $I19, rx605_bstack, rxcap607_fail1793
    inc $I19
    set $I11, rx605_bstack[$I19]
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx605_pos)
    rx605_cstack = rx605_cur."!cursor_capture"($P11, "sym")
    goto rxcap607_done1792
  rxcap607_fail1793:
    goto rx605_fail1785
  rxcap607_done1792:
    nqp_rxmark rx605_bstack, rxquantr608_done1795, rx605_pos, 0
  rxquantr608_loop1794:
    add $I11, rx605_pos, 7
    gt $I11, rx605_eos, rx605_fail1785
    substr $S10, rx605_tgt, rx605_pos, 7
    ne $S10, ucs4:"igspace", rx605_fail1785
    add rx605_pos, 7
    nqp_rxpeek $I19, rx605_bstack, rxquantr608_done1795
    inc $I19
    inc $I19
    set rx605_rep, rx605_bstack[$I19]
    nqp_rxcommit rx605_bstack, rxquantr608_done1795
    inc rx605_rep
  rxquantr608_done1795:
    le rx605_pos, 0, rx605_fail1785
    is_cclass $I11, .CCLASS_WORD, rx605_tgt, rx605_pos
    if $I11, rx605_fail1785
    sub $I11, rx605_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx605_tgt, $I11
    unless $I11, rx605_fail1785
    rx605_cur."!cursor_pass"(rx605_pos, "mod_ident:sym<sigspace>", 'backtrack'=>1)
    .return (rx605_cur)
  rx605_restart1784:
    repr_get_attr_obj rx605_cstack, rx605_cur, rx605_curclass, "$!cstack"
  rx605_fail1785:
    unless rx605_bstack, rx605_done1783
    pop $I19, rx605_bstack
    if_null rx605_cstack, rx605_cstack_done1788
    unless rx605_cstack, rx605_cstack_done1788
    dec $I19
    set $P11, rx605_cstack[$I19]
  rx605_cstack_done1788:
    pop rx605_rep, rx605_bstack
    pop rx605_pos, rx605_bstack
    pop $I19, rx605_bstack
    lt rx605_pos, -1, rx605_done1783
    lt rx605_pos, 0, rx605_fail1785
    eq $I19, 0, rx605_fail1785
    nqp_islist $I20, rx605_cstack
    unless $I20, rx605_jump1786
    elements $I18, rx605_bstack
    le $I18, 0, rx605_cut1787
    dec $I18
    set $I18, rx605_bstack[$I18]
  rx605_cut1787:
    assign rx605_cstack, $I18
  rx605_jump1786:
    jump $I19
  rx605_done1783:
    rx605_cur."!cursor_fail"()
    .return (rx605_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<dba>" :subid("cuid_126_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 387
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx610_start
    .local string rx610_tgt
    .local int rx610_pos
    .local int rx610_off
    .local int rx610_eos
    .local int rx610_rep
    .local pmc rx610_cur
    .local pmc rx610_curclass
    .local pmc rx610_bstack
    .local pmc rx610_cstack
    rx610_start = self."!cursor_start_all"()
    set rx610_cur, rx610_start[0]
    set rx610_tgt, rx610_start[1]
    set rx610_pos, rx610_start[2]
    set rx610_curclass, rx610_start[3]
    set rx610_bstack, rx610_start[4]
    set $I19, rx610_start[5]
    store_lex unicode:"$\x{a2}", rx610_cur
    length rx610_eos, rx610_tgt
    eq $I19, 1, rx610_restart1799
    gt rx610_pos, rx610_eos, rx610_fail1800
    repr_get_attr_int $I11, self, rx610_curclass, "$!from"
    ne $I11, -1, rxscan611_done1806
    goto rxscan611_scan1805
  rxscan611_loop1804:
    inc rx610_pos
    gt rx610_pos, rx610_eos, rx610_fail1800
    repr_bind_attr_int rx610_cur, rx610_curclass, "$!from", rx610_pos
  rxscan611_scan1805:
    nqp_rxmark rx610_bstack, rxscan611_loop1804, rx610_pos, 0
  rxscan611_done1806:
    nqp_rxmark rx610_bstack, rxcap612_fail1808, rx610_pos, 0
    add $I11, rx610_pos, 3
    gt $I11, rx610_eos, rx610_fail1800
    substr $S10, rx610_tgt, rx610_pos, 3
    ne $S10, ucs4:"dba", rx610_fail1800
    add rx610_pos, 3
    nqp_rxpeek $I19, rx610_bstack, rxcap612_fail1808
    inc $I19
    set $I11, rx610_bstack[$I19]
    repr_bind_attr_int rx610_cur, rx610_curclass, "$!pos", rx610_pos
    $P11 = rx610_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx610_pos)
    rx610_cstack = rx610_cur."!cursor_capture"($P11, "sym")
    goto rxcap612_done1807
  rxcap612_fail1808:
    goto rx610_fail1800
  rxcap612_done1807:
    le rx610_pos, 0, rx610_fail1800
    is_cclass $I11, .CCLASS_WORD, rx610_tgt, rx610_pos
    if $I11, rx610_fail1800
    sub $I11, rx610_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx610_tgt, $I11
    unless $I11, rx610_fail1800
    rx610_cur."!cursor_pass"(rx610_pos, "mod_ident:sym<dba>", 'backtrack'=>1)
    .return (rx610_cur)
  rx610_restart1799:
    repr_get_attr_obj rx610_cstack, rx610_cur, rx610_curclass, "$!cstack"
  rx610_fail1800:
    unless rx610_bstack, rx610_done1798
    pop $I19, rx610_bstack
    if_null rx610_cstack, rx610_cstack_done1803
    unless rx610_cstack, rx610_cstack_done1803
    dec $I19
    set $P11, rx610_cstack[$I19]
  rx610_cstack_done1803:
    pop rx610_rep, rx610_bstack
    pop rx610_pos, rx610_bstack
    pop $I19, rx610_bstack
    lt rx610_pos, -1, rx610_done1798
    lt rx610_pos, 0, rx610_fail1800
    eq $I19, 0, rx610_fail1800
    nqp_islist $I20, rx610_cstack
    unless $I20, rx610_jump1801
    elements $I18, rx610_bstack
    le $I18, 0, rx610_cut1802
    dec $I18
    set $I18, rx610_bstack[$I18]
  rx610_cut1802:
    assign rx610_cstack, $I18
  rx610_jump1801:
    jump $I19
  rx610_done1798:
    rx610_cur."!cursor_fail"()
    .return (rx610_cur) 
.end
.HLL "nqp"
.namespace []
.sub "mod_ident:sym<oops>" :subid("cuid_127_1382484119.90237") :anon :lex :outer("cuid_209_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 388
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_234_1382484119.90237' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_128_1382484119.90237' 
    capture_lex $P5008 
    .const 'Sub' $P5008 = 'cuid_235_1382484119.90237' 
    capture_lex $P5008 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local pmc rx614_start
    .local string rx614_tgt
    .local int rx614_pos
    .local int rx614_off
    .local int rx614_eos
    .local int rx614_rep
    .local pmc rx614_cur
    .local pmc rx614_curclass
    .local pmc rx614_bstack
    .local pmc rx614_cstack
    rx614_start = self."!cursor_start_all"()
    set rx614_cur, rx614_start[0]
    set rx614_tgt, rx614_start[1]
    set rx614_pos, rx614_start[2]
    set rx614_curclass, rx614_start[3]
    set rx614_bstack, rx614_start[4]
    set $I19, rx614_start[5]
    store_lex unicode:"$\x{a2}", rx614_cur
    length rx614_eos, rx614_tgt
    eq $I19, 1, rx614_restart1812
    gt rx614_pos, rx614_eos, rx614_fail1813
    repr_get_attr_int $I11, self, rx614_curclass, "$!from"
    ne $I11, -1, rxscan615_done1819
    goto rxscan615_scan1818
  rxscan615_loop1817:
    inc rx614_pos
    gt rx614_pos, rx614_eos, rx614_fail1813
    repr_bind_attr_int rx614_cur, rx614_curclass, "$!from", rx614_pos
  rxscan615_scan1818:
    nqp_rxmark rx614_bstack, rxscan615_loop1817, rx614_pos, 0
  rxscan615_done1819:
    repr_bind_attr_int rx614_cur, rx614_curclass, "$!pos", rx614_pos
    store_lex unicode:"$\x{a2}", rx614_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_234_1382484119.90237' 
    capture_lex $P5002
    $P5003 = $P5002()
    .const 'Sub' $P5004 = 'cuid_128_1382484119.90237' 
    capture_lex $P5004
    repr_bind_attr_int rx614_cur, rx614_curclass, "$!pos", rx614_pos
    $P11 = rx614_cur.$P5004()
    repr_get_attr_int $I11, $P11, rx614_curclass, "$!pos"
    lt $I11, 0, rx614_fail1813
    nqp_rxmark rx614_bstack, rxsubrule619_pass1832, -1, 0
  rxsubrule619_pass1832:
    rx614_cstack = rx614_cur."!cursor_capture"($P11, "0")
    repr_get_attr_int rx614_pos, $P11, rx614_curclass, "$!pos"
    repr_bind_attr_int rx614_cur, rx614_curclass, "$!pos", rx614_pos
    store_lex unicode:"$\x{a2}", rx614_cur
    $P5005 = $P101."MATCH"()
    set $P102, $P5005
    .const 'Sub' $P5006 = 'cuid_235_1382484119.90237' 
    capture_lex $P5006
    $P5007 = $P5006()
    rx614_cur."!cursor_pass"(rx614_pos, "mod_ident:sym<oops>", 'backtrack'=>1)
    .return (rx614_cur)
  rx614_restart1812:
    repr_get_attr_obj rx614_cstack, rx614_cur, rx614_curclass, "$!cstack"
  rx614_fail1813:
    unless rx614_bstack, rx614_done1811
    pop $I19, rx614_bstack
    if_null rx614_cstack, rx614_cstack_done1816
    unless rx614_cstack, rx614_cstack_done1816
    dec $I19
    set $P11, rx614_cstack[$I19]
  rx614_cstack_done1816:
    pop rx614_rep, rx614_bstack
    pop rx614_pos, rx614_bstack
    pop $I19, rx614_bstack
    lt rx614_pos, -1, rx614_done1811
    lt rx614_pos, 0, rx614_fail1813
    eq $I19, 0, rx614_fail1813
    nqp_islist $I20, rx614_cstack
    unless $I20, rx614_jump1814
    elements $I18, rx614_bstack
    le $I18, 0, rx614_cut1815
    dec $I18
    set $I18, rx614_bstack[$I18]
  rx614_cut1815:
    assign rx614_cstack, $I18
  rx614_jump1814:
    jump $I19
  rx614_done1811:
    rx614_cur."!cursor_fail"()
    .return (rx614_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1382484119.90237") :anon :lex :outer("cuid_127_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 388

    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_128_1382484119.90237") :anon :lex :outer("cuid_127_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local pmc rx616_start
    .local string rx616_tgt
    .local int rx616_pos
    .local int rx616_off
    .local int rx616_eos
    .local int rx616_rep
    .local pmc rx616_cur
    .local pmc rx616_curclass
    .local pmc rx616_bstack
    .local pmc rx616_cstack
    rx616_start = self."!cursor_start_all"()
    set rx616_cur, rx616_start[0]
    set rx616_tgt, rx616_start[1]
    set rx616_pos, rx616_start[2]
    set rx616_curclass, rx616_start[3]
    set rx616_bstack, rx616_start[4]
    set $I19, rx616_start[5]
    store_lex unicode:"$\x{a2}", rx616_cur
    length rx616_eos, rx616_tgt
    eq $I19, 1, rx616_restart1822
    gt rx616_pos, rx616_eos, rx616_fail1823
    repr_get_attr_int $I11, self, rx616_curclass, "$!from"
    ne $I11, -1, rxscan617_done1829
    goto rxscan617_scan1828
  rxscan617_loop1827:
    inc rx616_pos
    gt rx616_pos, rx616_eos, rx616_fail1823
    repr_bind_attr_int rx616_cur, rx616_curclass, "$!from", rx616_pos
  rxscan617_scan1828:
    nqp_rxmark rx616_bstack, rxscan617_loop1827, rx616_pos, 0
  rxscan617_done1829:
    nqp_rxmark rx616_bstack, rxquantr618_done1831, -1, 0
  rxquantr618_loop1830:
    ge rx616_pos, rx616_eos, rx616_fail1823
    is_cclass $I11, .CCLASS_WORD, rx616_tgt, rx616_pos
    unless $I11, rx616_fail1823
    add rx616_pos, 1
    nqp_rxpeek $I19, rx616_bstack, rxquantr618_done1831
    inc $I19
    inc $I19
    set rx616_rep, rx616_bstack[$I19]
    nqp_rxcommit rx616_bstack, rxquantr618_done1831
    inc rx616_rep
    nqp_rxmark rx616_bstack, rxquantr618_done1831, rx616_pos, rx616_rep
    goto rxquantr618_loop1830
  rxquantr618_done1831:
    rx616_cur."!cursor_pass"(rx616_pos, 'backtrack'=>1)
    .return (rx616_cur)
  rx616_restart1822:
    repr_get_attr_obj rx616_cstack, rx616_cur, rx616_curclass, "$!cstack"
  rx616_fail1823:
    unless rx616_bstack, rx616_done1821
    pop $I19, rx616_bstack
    if_null rx616_cstack, rx616_cstack_done1826
    unless rx616_cstack, rx616_cstack_done1826
    dec $I19
    set $P11, rx616_cstack[$I19]
  rx616_cstack_done1826:
    pop rx616_rep, rx616_bstack
    pop rx616_pos, rx616_bstack
    pop $I19, rx616_bstack
    lt rx616_pos, -1, rx616_done1821
    lt rx616_pos, 0, rx616_fail1823
    eq $I19, 0, rx616_fail1823
    nqp_islist $I20, rx616_cstack
    unless $I20, rx616_jump1824
    elements $I18, rx616_bstack
    le $I18, 0, rx616_cut1825
    dec $I18
    set $I18, rx616_bstack[$I18]
  rx616_cut1825:
    assign rx616_cstack, $I18
  rx616_jump1824:
    jump $I19
  rx616_done1821:
    rx616_cur."!cursor_fail"()
    .return (rx616_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1382484119.90237") :anon :lex :outer("cuid_127_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 388
    .local pmc fb_tmp_23 
    find_lex $P5001, "$/"
    $P5002 = $P5001."CURSOR"()
    find_lex $P5003, "$/"
    set fb_tmp_23, $P5003
    repr_defined $I5001, fb_tmp_23
    unless $I5001 goto if620_else1833 
    set $P5004, fb_tmp_23[0]
    set $P5006, $P5004
    goto if620_end1834
  if620_else1833:
    null $P5005
    set $P5006, $P5005
  if620_end1834:
    unless_null $P5006, vivi_6211835
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_6211835:
    $P5008 = $P5006."Str"()
    set $S5002, $P5008
    concat $S5001, "Unrecognized regex modifier :", $S5002
    $P5009 = $P5002."panic"($S5001)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1382484119.90237") :anon :lex :outer("cuid_205_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 392
    .const 'Sub' $P5079 = 'cuid_237_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_240_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_129_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_130_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_131_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_132_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_133_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_134_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_135_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_136_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_137_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_138_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_139_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_140_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_141_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_142_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_143_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_144_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_145_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_146_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_147_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_148_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_149_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_150_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_151_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_152_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_153_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_154_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_155_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_156_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_157_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_158_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_159_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_160_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_161_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_162_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_163_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_164_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_165_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_166_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_167_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_168_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_169_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_170_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_171_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_172_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_173_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_174_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_175_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_176_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_177_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_178_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_179_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_180_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_181_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_182_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_183_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_184_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_185_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_186_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_187_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_188_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_189_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_190_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_191_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_192_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_193_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_194_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_195_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_196_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_197_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_198_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_199_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_200_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_201_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_202_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_203_1382484119.90237' 
    capture_lex $P5079 
    .const 'Sub' $P5079 = 'cuid_204_1382484119.90237' 
    capture_lex $P5079 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .lex "&backmod", $P103 
    .lex "&capnames", $P104 
    .const 'Sub' $P5001 = 'cuid_237_1382484119.90237' 
    capture_lex $P5001
    set $P103, $P5001
    .const 'Sub' $P5002 = 'cuid_240_1382484119.90237' 
    capture_lex $P5002
    set $P104, $P5002
    .const 'Sub' $P5003 = 'cuid_129_1382484119.90237' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_130_1382484119.90237' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_131_1382484119.90237' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_132_1382484119.90237' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_133_1382484119.90237' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_134_1382484119.90237' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_135_1382484119.90237' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_136_1382484119.90237' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_137_1382484119.90237' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_138_1382484119.90237' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_139_1382484119.90237' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_140_1382484119.90237' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_141_1382484119.90237' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_142_1382484119.90237' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_143_1382484119.90237' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_144_1382484119.90237' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_145_1382484119.90237' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_146_1382484119.90237' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_147_1382484119.90237' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_148_1382484119.90237' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_149_1382484119.90237' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_150_1382484119.90237' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_151_1382484119.90237' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_152_1382484119.90237' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_153_1382484119.90237' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_154_1382484119.90237' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_155_1382484119.90237' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_156_1382484119.90237' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_157_1382484119.90237' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_158_1382484119.90237' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_159_1382484119.90237' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_160_1382484119.90237' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_161_1382484119.90237' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_162_1382484119.90237' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_163_1382484119.90237' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_164_1382484119.90237' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_165_1382484119.90237' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_166_1382484119.90237' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_167_1382484119.90237' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_168_1382484119.90237' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_169_1382484119.90237' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_170_1382484119.90237' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_171_1382484119.90237' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_172_1382484119.90237' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_173_1382484119.90237' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_174_1382484119.90237' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_175_1382484119.90237' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_176_1382484119.90237' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_177_1382484119.90237' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_178_1382484119.90237' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_179_1382484119.90237' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_180_1382484119.90237' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_181_1382484119.90237' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_182_1382484119.90237' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_183_1382484119.90237' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_184_1382484119.90237' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_185_1382484119.90237' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_186_1382484119.90237' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_187_1382484119.90237' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_188_1382484119.90237' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_189_1382484119.90237' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_190_1382484119.90237' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_191_1382484119.90237' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_192_1382484119.90237' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_193_1382484119.90237' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_194_1382484119.90237' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_195_1382484119.90237' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_196_1382484119.90237' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_197_1382484119.90237' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_198_1382484119.90237' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_199_1382484119.90237' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_200_1382484119.90237' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_201_1382484119.90237' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_202_1382484119.90237' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_203_1382484119.90237' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_204_1382484119.90237' 
    capture_lex $P5078
    .return ($P5078) 
.end
.HLL "nqp"
.namespace []
.sub "backmod" :subid("cuid_237_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1046
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$ast", _lex_param_0 
    .lex "$backmod", _lex_param_1 
    set $S5001, _lex_param_1
    iseq $I5001, $S5001, ":"
    unless $I5001 goto if622_else1836 
.annotate 'line', 1047
    $P5001 = _lex_param_0."backtrack"("r")
    goto if622_end1837
  if622_else1836:
    set $S5002, _lex_param_1
    iseq $I5002, $S5002, ":?"
    set $I5004, $I5002
    if $I5002 goto unless624_end1841 
    set $S5003, _lex_param_1
    iseq $I5003, $S5003, "?"
    set $I5004, $I5003
  unless624_end1841:
    unless $I5004 goto if623_else1838 
.annotate 'line', 1048
    $P5002 = _lex_param_0."backtrack"("f")
    set $P5006, $P5002
    goto if623_end1839
  if623_else1838:
    set $S5004, _lex_param_1
    iseq $I5005, $S5004, ":!"
    set $I5007, $I5005
    if $I5005 goto unless626_end1845 
    set $S5005, _lex_param_1
    iseq $I5006, $S5005, "!"
    set $I5007, $I5006
  unless626_end1845:
    box $P5005, $I5007
    set $P5004, $P5005
    unless $I5007 goto if625_end1843 
.annotate 'line', 1049
    $P5003 = _lex_param_0."backtrack"("g")
    set $P5004, $P5003
  if625_end1843:
    set $P5006, $P5004
  if623_end1839:
  if622_end1837:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "capnames" :subid("cuid_240_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1102
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_239_1382484119.90237' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_243_1382484119.90237' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_245_1382484119.90237' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_247_1382484119.90237' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_250_1382484119.90237' 
    capture_lex $P5024 
    .lex "%capnames", $P101 
    .lex "$rxtype", $P102 
    .lex "$ast", _lex_param_0 
    .lex "$count", _lex_param_1 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
.annotate 'line', 1104
    $P5003 = _lex_param_0."rxtype"()
    set $P102, $P5003
    set $S5001, $P102
    iseq $I5001, $S5001, "concat"
    unless $I5001 goto if627_else1846 
.annotate 'line', 1105
.annotate 'line', 1106
    $P5007 = _lex_param_0."list"()
    set $P5004, $P5007
    iter $P5006, $P5007
  for_next1857:
    unless $P5006, for_done1859
    shift $P5009, $P5006
  for_redo1858:
    .const 'Sub' $P5008 = 'cuid_239_1382484119.90237' 
    capture_lex $P5008
    $P5004 = $P5008($P5009)
    goto for_next1857
  for_done1859:
    goto if627_end1847
  if627_else1846:
    set $S5002, $P102
    iseq $I5002, $S5002, "altseq"
    set $I5004, $I5002
    if $I5002 goto unless633_end1863 
    set $S5003, $P102
    iseq $I5003, $S5003, "alt"
    set $I5004, $I5003
  unless633_end1863:
    unless $I5004 goto if632_else1860 
    .const 'Sub' $P5010 = 'cuid_243_1382484119.90237' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5023, $P5011
    goto if632_end1861
  if632_else1860:
    set $S5004, $P102
    iseq $I5005, $S5004, "subrule"
    set $I5007, $I5005
    unless $I5005 goto if646_end1891 
.annotate 'line', 1123
    $P5012 = _lex_param_0."subtype"()
    set $S5005, $P5012
    iseq $I5006, $S5005, "capture"
    set $I5007, $I5006
  if646_end1891:
    unless $I5007 goto if645_else1888 
    .const 'Sub' $P5013 = 'cuid_245_1382484119.90237' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5022, $P5014
    goto if645_end1889
  if645_else1888:
    set $S5006, $P102
    iseq $I5008, $S5006, "subcapture"
    unless $I5008 goto if650_else1901 
    .const 'Sub' $P5015 = 'cuid_247_1382484119.90237' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5021, $P5016
    goto if650_end1902
  if650_else1901:
    set $S5007, $P102
    iseq $I5009, $S5007, "quant"
    box $P5020, $I5009
    set $P5019, $P5020
    unless $I5009 goto if661_end1926 
    .const 'Sub' $P5017 = 'cuid_250_1382484119.90237' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if661_end1926:
    set $P5021, $P5019
  if650_end1902:
    set $P5022, $P5021
  if645_end1889:
    set $P5023, $P5022
  if632_end1861:
  if627_end1847:
    set $P101[""], _lex_param_1
    delete $P101["$!from"]
    delete $P101["$!to"]
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1382484119.90237") :anon :lex :outer("cuid_240_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1106
    .param pmc _lex_param_0 
    .const 'Sub' $P5013 = 'cuid_238_1382484119.90237' 
    capture_lex $P5013 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_25 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 1107
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1851:
    unless $P5006, for_done1853
    shift $P5008, $P5006
  for_redo1852:
    .const 'Sub' $P5007 = 'cuid_238_1382484119.90237' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1851
  for_done1853:
    set fb_tmp_25, $P101
    repr_defined $I5001, fb_tmp_25
    unless $I5001 goto if630_else1854 
    set $P5009, fb_tmp_25[""]
    set $P5011, $P5009
    goto if630_end1855
  if630_else1854:
    null $P5010
    set $P5011, $P5010
  if630_end1855:
    unless_null $P5011, vivi_6311856
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5011, $P5012
  vivi_6311856:
    store_lex "$count", $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1382484119.90237") :anon :lex :outer("cuid_239_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1108
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_24 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_24, $P5003
    repr_defined $I5001, fb_tmp_24
    unless $I5001 goto if628_else1848 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_24[$S5002]
    set $P5007, $P5004
    goto if628_end1849
  if628_else1848:
    null $P5006
    set $P5007, $P5006
  if628_end1849:
    unless_null $P5007, vivi_6291850
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_6291850:
    set $N5002, $P5007
    $P5009 = _lex_param_0."value"()
    set $N5003, $P5009
    add $N5001, $N5002, $N5003
    box $P5010, $N5001
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_243_1382484119.90237") :anon :lex :outer("cuid_240_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1112
    .const 'Sub' $P5010 = 'cuid_242_1382484119.90237' 
    capture_lex $P5010 
    .lex "$max", $P101 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    find_lex $P5002, "$count"
    set $P101, $P5002
.annotate 'line', 1114
    find_lex $P5006, "$ast"
    $P5007 = $P5006."list"()
    set $P5003, $P5007
    iter $P5005, $P5007
  for_next1885:
    unless $P5005, for_done1887
    shift $P5009, $P5005
  for_redo1886:
    .const 'Sub' $P5008 = 'cuid_242_1382484119.90237' 
    capture_lex $P5008
    $P5003 = $P5008($P5009)
    goto for_next1885
  for_done1887:
    store_lex "$count", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_242_1382484119.90237") :anon :lex :outer("cuid_243_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1114
    .param pmc _lex_param_0 
    .const 'Sub' $P5020 = 'cuid_241_1382484119.90237' 
    capture_lex $P5020 
    .lex "%x", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_28 
    .local pmc fb_tmp_29 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 1115
    find_lex $P5002, "$count"
    $P5003 = "&capnames"(_lex_param_0, $P5002)
    set $P101, $P5003
    set $P5004, $P101
    iter $P5006, $P101
  for_next1874:
    unless $P5006, for_done1876
    shift $P5008, $P5006
  for_redo1875:
    .const 'Sub' $P5007 = 'cuid_241_1382484119.90237' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next1874
  for_done1876:
    set fb_tmp_28, $P101
    repr_defined $I5002, fb_tmp_28
    unless $I5002 goto if641_else1879 
    set $P5009, fb_tmp_28[""]
    set $P5011, $P5009
    goto if641_end1880
  if641_else1879:
    null $P5010
    set $P5011, $P5010
  if641_end1880:
    unless_null $P5011, vivi_6421881
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5011, $P5012
  vivi_6421881:
    set $N5001, $P5011
    find_lex $P5013, "$max"
    set $N5002, $P5013
    isgt $I5001, $N5001, $N5002
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if640_end1878 
    set fb_tmp_29, $P101
    repr_defined $I5003, fb_tmp_29
    unless $I5003 goto if643_else1882 
    set $P5014, fb_tmp_29[""]
    set $P5016, $P5014
    goto if643_end1883
  if643_else1882:
    null $P5015
    set $P5016, $P5015
  if643_end1883:
    unless_null $P5016, vivi_6441884
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5016, $P5017
  vivi_6441884:
    store_lex "$max", $P5016
    set $P5018, $P5016
  if640_end1878:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_241_1382484119.90237") :anon :lex :outer("cuid_242_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1116
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_26 
    .local pmc fb_tmp_27 
    find_lex $P5001, "%capnames"
.annotate 'line', 1117
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_26, $P5003
    repr_defined $I5002, fb_tmp_26
    unless $I5002 goto if636_else1868 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_26[$S5002]
    set $P5007, $P5004
    goto if636_end1869
  if636_else1868:
    null $P5006
    set $P5007, $P5006
  if636_end1869:
    unless_null $P5007, vivi_6371870
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_6371870:
    set $N5001, $P5007
    set $N5002, 2
    islt $I5001, $N5001, $N5002
    set $I5005, $I5001
    unless $I5001 goto if635_end1867 
    find_lex $P5009, "%x"
    set fb_tmp_27, $P5009
    repr_defined $I5004, fb_tmp_27
    unless $I5004 goto if638_else1871 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_27[$S5003]
    set $P5013, $P5010
    goto if638_end1872
  if638_else1871:
    null $P5012
    set $P5013, $P5012
  if638_end1872:
    unless_null $P5013, vivi_6391873
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5013, $P5014
  vivi_6391873:
    set $N5003, $P5013
    set $N5004, 1
    iseq $I5003, $N5003, $N5004
    set $I5005, $I5003
  if635_end1867:
    unless $I5005 goto if634_else1864 
    set $I5006, 1
    goto if634_end1865
  if634_else1864:
    set $I5006, 2
  if634_end1865:
    box $P5015, $I5006
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_245_1382484119.90237") :anon :lex :outer("cuid_240_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1123
    .const 'Sub' $P5014 = 'cuid_244_1382484119.90237' 
    capture_lex $P5014 
    .lex "$name", $P101 
    .lex "@names", $P102 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 1124
    find_lex $P5003, "$ast"
    $P5004 = $P5003."name"()
    set $P101, $P5004
    set $S5001, $P101
    iseq $I5001, $S5001, ""
    unless $I5001 goto if647_end1893 
.annotate 'line', 1125
    find_lex $P5005, "$count"
    set $P101, $P5005
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"($P101)
  if647_end1893:
    set $S5002, $P101
    split $P5008, "=", $S5002
    set $P102, $P5008
    set $P5009, $P102
    iter $P5011, $P102
  for_next1898:
    unless $P5011, for_done1900
    shift $P5013, $P5011
  for_redo1899:
    .const 'Sub' $P5012 = 'cuid_244_1382484119.90237' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1898
  for_done1900:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_244_1382484119.90237") :anon :lex :outer("cuid_245_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1127
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless649_end1897 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless649_end1897:
    unless $I5003 goto if648_end1895 
.annotate 'line', 1128
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if648_end1895:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_247_1382484119.90237") :anon :lex :outer("cuid_240_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1132
    .const 'Sub' $P5026 = 'cuid_246_1382484119.90237' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_248_1382484119.90237' 
    capture_lex $P5026 
    .lex "%x", $P101 
    .local pmc fb_tmp_30 
    .local pmc fb_tmp_33 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 1133
    find_lex $P5006, "$ast"
    $P5007 = $P5006."name"()
    set $S5001, $P5007
    split $P5005, " ", $S5001
    set $P5002, $P5005
    iter $P5004, $P5005
  for_next1907:
    unless $P5004, for_done1909
    shift $P5009, $P5004
  for_redo1908:
    .const 'Sub' $P5008 = 'cuid_246_1382484119.90237' 
    capture_lex $P5008
    $P5002 = $P5008($P5009)
    goto for_next1907
  for_done1909:
.annotate 'line', 1137
    find_lex $P5010, "$ast"
    set fb_tmp_30, $P5010
    repr_defined $I5001, fb_tmp_30
    unless $I5001 goto if653_else1910 
    set $P5011, fb_tmp_30[0]
    set $P5013, $P5011
    goto if653_end1911
  if653_else1910:
    null $P5012
    set $P5013, $P5012
  if653_end1911:
    unless_null $P5013, vivi_6541912
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5013, $P5014
  vivi_6541912:
    find_lex $P5015, "$count"
    $P5016 = "&capnames"($P5013, $P5015)
    set $P101, $P5016
    set $P5017, $P101
    iter $P5019, $P101
  for_next1919:
    unless $P5019, for_done1921
    shift $P5021, $P5019
  for_redo1920:
    .const 'Sub' $P5020 = 'cuid_248_1382484119.90237' 
    capture_lex $P5020
    $P5017 = $P5020($P5021)
    goto for_next1919
  for_done1921:
    set fb_tmp_33, $P101
    repr_defined $I5002, fb_tmp_33
    unless $I5002 goto if659_else1922 
    set $P5022, fb_tmp_33[""]
    set $P5024, $P5022
    goto if659_end1923
  if659_else1922:
    null $P5023
    set $P5024, $P5023
  if659_end1923:
    unless_null $P5024, vivi_6601924
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5024, $P5025
  vivi_6601924:
    store_lex "$count", $P5024
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_246_1382484119.90237") :anon :lex :outer("cuid_247_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1133
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "0"
    set $I5003, $I5001
    if $I5001 goto unless652_end1906 
    set $N5001, _lex_param_0
    set $N5002, 0
    isgt $I5002, $N5001, $N5002
    set $I5003, $I5002
  unless652_end1906:
    unless $I5003 goto if651_end1904 
.annotate 'line', 1134
    set $N5004, _lex_param_0
    set $N5005, 1
    add $N5003, $N5004, $N5005
    box $P5001, $N5003
    store_lex "$count", $P5001
  if651_end1904:
    find_lex $P5002, "%capnames"
    set $S5002, _lex_param_0
    box $P5003, 1
    set $P5002[$S5002], $P5003
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_248_1382484119.90237") :anon :lex :outer("cuid_247_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1138
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_31 
    .local pmc fb_tmp_32 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "%capnames"
    set fb_tmp_31, $P5003
    repr_defined $I5001, fb_tmp_31
    unless $I5001 goto if655_else1913 
    $P5005 = _lex_param_0."key"()
    set $S5002, $P5005
    set $P5004, fb_tmp_31[$S5002]
    set $P5007, $P5004
    goto if655_end1914
  if655_else1913:
    null $P5006
    set $P5007, $P5006
  if655_end1914:
    unless_null $P5007, vivi_6561915
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_6561915:
    set $N5002, $P5007
    find_lex $P5009, "%x"
    set fb_tmp_32, $P5009
    repr_defined $I5002, fb_tmp_32
    unless $I5002 goto if657_else1916 
    $P5011 = _lex_param_0."key"()
    set $S5003, $P5011
    set $P5010, fb_tmp_32[$S5003]
    set $P5013, $P5010
    goto if657_end1917
  if657_else1916:
    null $P5012
    set $P5013, $P5012
  if657_end1917:
    unless_null $P5013, vivi_6581918
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5013, $P5014
  vivi_6581918:
    set $N5003, $P5013
    add $N5001, $N5002, $N5003
    box $P5015, $N5001
    set $P5001[$S5001], $P5015
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_250_1382484119.90237") :anon :lex :outer("cuid_240_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1141
    .const 'Sub' $P5030 = 'cuid_249_1382484119.90237' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_252_1382484119.90237' 
    capture_lex $P5030 
    .lex "$ilist", $P101 
    .lex "%astcap", $P102 
    .local pmc fb_tmp_34 
    .local pmc fb_tmp_35 
    .local pmc fb_tmp_36 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
.annotate 'line', 1142
    find_lex $P5003, "$ast"
    $P5004 = $P5003."subtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "item"
    box $P5005, $I5001
    set $P101, $P5005
.annotate 'line', 1143
    find_lex $P5006, "$ast"
    set fb_tmp_34, $P5006
    repr_defined $I5002, fb_tmp_34
    unless $I5002 goto if662_else1927 
    set $P5007, fb_tmp_34[0]
    set $P5009, $P5007
    goto if662_end1928
  if662_else1927:
    null $P5008
    set $P5009, $P5008
  if662_end1928:
    unless_null $P5009, vivi_6631929
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_6631929:
    find_lex $P5011, "$count"
    $P5012 = "&capnames"($P5009, $P5011)
    set $P102, $P5012
    set $P5013, $P102
    iter $P5015, $P102
  for_next1932:
    unless $P5015, for_done1934
    shift $P5017, $P5015
  for_redo1933:
    .const 'Sub' $P5016 = 'cuid_249_1382484119.90237' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next1932
  for_done1934:
    set fb_tmp_35, $P102
    repr_defined $I5003, fb_tmp_35
    unless $I5003 goto if665_else1935 
    set $P5018, fb_tmp_35[""]
    set $P5020, $P5018
    goto if665_end1936
  if665_else1935:
    null $P5019
    set $P5020, $P5019
  if665_end1936:
    unless_null $P5020, vivi_6661937
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5020, $P5021
  vivi_6661937:
    store_lex "$count", $P5020
    find_lex $P5022, "$ast"
    set fb_tmp_36, $P5022
    repr_defined $I5004, fb_tmp_36
    unless $I5004 goto if668_else1940 
    set $P5023, fb_tmp_36[1]
    set $P5025, $P5023
    goto if668_end1941
  if668_else1940:
    null $P5024
    set $P5025, $P5024
  if668_end1941:
    unless_null $P5025, vivi_6691942
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5025, $P5026
  vivi_6691942:
    set $P5029, $P5025
    unless $P5025 goto if667_end1939 
    .const 'Sub' $P5027 = 'cuid_252_1382484119.90237' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5029, $P5028
  if667_end1939:
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_249_1382484119.90237") :anon :lex :outer("cuid_250_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1144
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "$ilist"
    unless $P5003 goto if664_else1930 
    $P5004 = _lex_param_0."value"()
    set $P5005, $P5004
    goto if664_end1931
  if664_else1930:
    box $P5006, 2
    set $P5005, $P5006
  if664_end1931:
    set $P5001[$S5001], $P5005
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_252_1382484119.90237") :anon :lex :outer("cuid_250_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1146
    .const 'Sub' $P5018 = 'cuid_251_1382484119.90237' 
    capture_lex $P5018 
    .lex "%astcap", $P101 
    .local pmc fb_tmp_37 
    .local pmc fb_tmp_38 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 1148
    find_lex $P5002, "$ast"
    set fb_tmp_37, $P5002
    repr_defined $I5001, fb_tmp_37
    unless $I5001 goto if670_else1943 
    set $P5003, fb_tmp_37[1]
    set $P5005, $P5003
    goto if670_end1944
  if670_else1943:
    null $P5004
    set $P5005, $P5004
  if670_end1944:
    unless_null $P5005, vivi_6711945
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_6711945:
    find_lex $P5007, "$count"
    $P5008 = "&capnames"($P5005, $P5007)
    set $P101, $P5008
    set $P5009, $P101
    iter $P5011, $P101
  for_next1948:
    unless $P5011, for_done1950
    shift $P5013, $P5011
  for_redo1949:
    .const 'Sub' $P5012 = 'cuid_251_1382484119.90237' 
    capture_lex $P5012
    $P5009 = $P5012($P5013)
    goto for_next1948
  for_done1950:
    set fb_tmp_38, $P101
    repr_defined $I5002, fb_tmp_38
    unless $I5002 goto if673_else1951 
    set $P5014, fb_tmp_38[""]
    set $P5016, $P5014
    goto if673_end1952
  if673_else1951:
    null $P5015
    set $P5016, $P5015
  if673_end1952:
    unless_null $P5016, vivi_6741953
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5016, $P5017
  vivi_6741953:
    store_lex "$count", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_251_1382484119.90237") :anon :lex :outer("cuid_252_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1149
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "%capnames"
    $P5002 = _lex_param_0."key"()
    set $S5001, $P5002
    find_lex $P5003, "$ilist"
    unless $P5003 goto if672_else1946 
    $P5004 = _lex_param_0."value"()
    set $P5005, $P5004
    goto if672_end1947
  if672_else1946:
    box $P5006, 2
    set $P5005, $P5006
  if672_end1947:
    set $P5001[$S5001], $P5005
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_129_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 393
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_39 
    .local pmc fb_tmp_40 
    .local pmc fb_tmp_41 
    .local pmc fb_tmp_42 
    .local pmc fb_tmp_43 
.annotate 'line', 394
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 120
.annotate 'line', 396
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback1954
    nqp_get_sc_object $P5004, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5003, $P5004
    set fb_tmp_39, $P5003
    repr_defined $I5001, fb_tmp_39
    unless $I5001 goto if675_else1955 
    set $P5005, fb_tmp_39["$W"]
    set $P5007, $P5005
    goto if675_end1956
  if675_else1955:
    null $P5006
    set $P5007, $P5006
  if675_end1956:
    unless_null $P5007, vivi_6761957
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_6761957:
    unless_null $P5007, vivi_6771958
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5007, $P5009
  vivi_6771958:
    set $P5002, $P5007
  fallback1954:
    $P5010 = $P5002."sc"()
.annotate 'line', 397
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback1959
    nqp_get_sc_object $P5013, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5012, $P5013
    set fb_tmp_40, $P5012
    repr_defined $I5002, fb_tmp_40
    unless $I5002 goto if678_else1960 
    set $P5014, fb_tmp_40["$W"]
    set $P5016, $P5014
    goto if678_end1961
  if678_else1960:
    null $P5015
    set $P5016, $P5015
  if678_end1961:
    unless_null $P5016, vivi_6791962
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5016, $P5017
  vivi_6791962:
    unless_null $P5016, vivi_6801963
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5016, $P5018
  vivi_6801963:
    set $P5011, $P5016
  fallback1959:
    $P5019 = $P5011."code_ref_blocks"()
.annotate 'line', 399
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback1964
    nqp_get_sc_object $P5022, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5021, $P5022
    set fb_tmp_41, $P5021
    repr_defined $I5003, fb_tmp_41
    unless $I5003 goto if681_else1965 
    set $P5023, fb_tmp_41["$W"]
    set $P5025, $P5023
    goto if681_end1966
  if681_else1965:
    null $P5024
    set $P5025, $P5024
  if681_end1966:
    unless_null $P5025, vivi_6821967
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5025, $P5026
  vivi_6821967:
    unless_null $P5025, vivi_6831968
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5025, $P5027
  vivi_6831968:
    set $P5020, $P5025
  fallback1964:
    $P5028 = $P5020."load_dependency_tasks"()
.annotate 'line', 400
    find_dynamic_lex $P5029, "$*W"
    unless_null $P5029, fallback1969
    nqp_get_sc_object $P5031, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5030, $P5031
    set fb_tmp_42, $P5030
    repr_defined $I5004, fb_tmp_42
    unless $I5004 goto if684_else1970 
    set $P5032, fb_tmp_42["$W"]
    set $P5034, $P5032
    goto if684_end1971
  if684_else1970:
    null $P5033
    set $P5034, $P5033
  if684_end1971:
    unless_null $P5034, vivi_6851972
    nqp_get_sc_object $P5035, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5034, $P5035
  vivi_6851972:
    unless_null $P5034, vivi_6861973
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5034, $P5036
  vivi_6861973:
    set $P5029, $P5034
  fallback1969:
    $P5037 = $P5029."fixup_tasks"()
.annotate 'line', 401
    nqp_decontainerize $P5038, _lex_param_0
    unless_null _lex_param_1, fallback1976
    nqp_get_sc_object $P5039, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5039
  fallback1976:
    set fb_tmp_43, _lex_param_1
    repr_defined $I5005, fb_tmp_43
    unless $I5005 goto if687_else1974 
    set $P5040, fb_tmp_43["nibbler"]
    set $P5042, $P5040
    goto if687_end1975
  if687_else1974:
    null $P5041
    set $P5042, $P5041
  if687_end1975:
    unless_null $P5042, vivi_6881977
    nqp_get_sc_object $P5043, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5042, $P5043
  vivi_6881977:
    $P5044 = $P5042."ast"()
    $P5045 = $P5038."qbuildsub"($P5044, 1 :named("anon"), 1 :named("addself"))
    $P5046 = $P5001."new"($P5045, "P6Regex" :named("hll"), $P5010 :named("sc"), $P5019 :named("code_ref_blocks"), 0 :named("compilation_mode"), $P5028 :named("pre_deserialize"), $P5037 :named("post_deserialize"))
    $P5047 = _lex_param_1."!make"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "nibbler" :subid("cuid_130_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 405
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_44 
    unless_null _lex_param_1, fallback1980
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback1980:
    set fb_tmp_44, _lex_param_1
    repr_defined $I5001, fb_tmp_44
    unless $I5001 goto if689_else1978 
    set $P5002, fb_tmp_44["termseq"]
    set $P5004, $P5002
    goto if689_end1979
  if689_else1978:
    null $P5003
    set $P5004, $P5003
  if689_end1979:
    unless_null $P5004, vivi_6901981
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_6901981:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "termseq" :subid("cuid_131_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 407
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_45 
.annotate 'line', 408
    unless_null _lex_param_1, fallback1984
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback1984:
    set fb_tmp_45, _lex_param_1
    repr_defined $I5001, fb_tmp_45
    unless $I5001 goto if691_else1982 
    set $P5002, fb_tmp_45["termaltseq"]
    set $P5004, $P5002
    goto if691_end1983
  if691_else1982:
    null $P5003
    set $P5004, $P5003
  if691_end1983:
    unless_null $P5004, vivi_6921985
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_6921985:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "termaltseq" :subid("cuid_132_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 410
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_253_1382484119.90237' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_46 
    .local pmc fb_tmp_47 
    .local pmc fb_tmp_48 
    .local pmc fb_tmp_49 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 411
    unless_null _lex_param_1, fallback1990
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback1990:
    set fb_tmp_47, _lex_param_1
    repr_defined $I5002, fb_tmp_47
    unless $I5002 goto if694_else1988 
    set $P5003, fb_tmp_47["termconjseq"]
    set $P5005, $P5003
    goto if694_end1989
  if694_else1988:
    null $P5004
    set $P5005, $P5004
  if694_end1989:
    unless_null $P5005, vivi_6951991
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_6951991:
    set fb_tmp_46, $P5005
    repr_defined $I5001, fb_tmp_46
    unless $I5001 goto if693_else1986 
    set $P5007, fb_tmp_46[0]
    set $P5009, $P5007
    goto if693_end1987
  if693_else1986:
    null $P5008
    set $P5009, $P5008
  if693_end1987:
    unless_null $P5009, vivi_6961992
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_6961992:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback1997
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5012
  fallback1997:
    set fb_tmp_48, _lex_param_1
    repr_defined $I5004, fb_tmp_48
    unless $I5004 goto if698_else1995 
    set $P5013, fb_tmp_48["termconjseq"]
    set $P5015, $P5013
    goto if698_end1996
  if698_else1995:
    null $P5014
    set $P5015, $P5014
  if698_end1996:
    unless_null $P5015, vivi_6991998
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5015, $P5016
  vivi_6991998:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if697_end1994 
.annotate 'line', 412
.annotate 'line', 413
    nqp_get_sc_object $P5017, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5018 = $P5017."new"("altseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback2001
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5022
  fallback2001:
    set fb_tmp_49, _lex_param_1
    repr_defined $I5005, fb_tmp_49
    unless $I5005 goto if700_else1999 
    set $P5023, fb_tmp_49["termconjseq"]
    set $P5025, $P5023
    goto if700_end2000
  if700_else1999:
    null $P5024
    set $P5025, $P5024
  if700_end2000:
    unless_null $P5025, vivi_7012002
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5025, $P5026
  vivi_7012002:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next2003:
    unless $P5021, for_done2005
    shift $P5028, $P5021
  for_redo2004:
    .const 'Sub' $P5027 = 'cuid_253_1382484119.90237' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next2003
  for_done2005:
  if697_end1994:
.annotate 'line', 416
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_253_1382484119.90237") :anon :lex :outer("cuid_132_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 414
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconjseq" :subid("cuid_133_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 419
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_254_1382484119.90237' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_50 
    .local pmc fb_tmp_51 
    .local pmc fb_tmp_52 
    .local pmc fb_tmp_53 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 420
    unless_null _lex_param_1, fallback2010
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2010:
    set fb_tmp_51, _lex_param_1
    repr_defined $I5002, fb_tmp_51
    unless $I5002 goto if703_else2008 
    set $P5003, fb_tmp_51["termalt"]
    set $P5005, $P5003
    goto if703_end2009
  if703_else2008:
    null $P5004
    set $P5005, $P5004
  if703_end2009:
    unless_null $P5005, vivi_7042011
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_7042011:
    set fb_tmp_50, $P5005
    repr_defined $I5001, fb_tmp_50
    unless $I5001 goto if702_else2006 
    set $P5007, fb_tmp_50[0]
    set $P5009, $P5007
    goto if702_end2007
  if702_else2006:
    null $P5008
    set $P5009, $P5008
  if702_end2007:
    unless_null $P5009, vivi_7052012
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_7052012:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback2017
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5012
  fallback2017:
    set fb_tmp_52, _lex_param_1
    repr_defined $I5004, fb_tmp_52
    unless $I5004 goto if707_else2015 
    set $P5013, fb_tmp_52["termalt"]
    set $P5015, $P5013
    goto if707_end2016
  if707_else2015:
    null $P5014
    set $P5015, $P5014
  if707_end2016:
    unless_null $P5015, vivi_7082018
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5015, $P5016
  vivi_7082018:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if706_end2014 
.annotate 'line', 421
.annotate 'line', 422
    nqp_get_sc_object $P5017, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5018 = $P5017."new"("conjseq" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback2021
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5022
  fallback2021:
    set fb_tmp_53, _lex_param_1
    repr_defined $I5005, fb_tmp_53
    unless $I5005 goto if709_else2019 
    set $P5023, fb_tmp_53["termalt"]
    set $P5025, $P5023
    goto if709_end2020
  if709_else2019:
    null $P5024
    set $P5025, $P5024
  if709_end2020:
    unless_null $P5025, vivi_7102022
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5025, $P5026
  vivi_7102022:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next2023:
    unless $P5021, for_done2025
    shift $P5028, $P5021
  for_redo2024:
    .const 'Sub' $P5027 = 'cuid_254_1382484119.90237' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next2023
  for_done2025:
  if706_end2014:
.annotate 'line', 425
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_254_1382484119.90237") :anon :lex :outer("cuid_133_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 423
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termalt" :subid("cuid_134_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 428
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_255_1382484119.90237' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_54 
    .local pmc fb_tmp_55 
    .local pmc fb_tmp_56 
    .local pmc fb_tmp_57 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 429
    unless_null _lex_param_1, fallback2030
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2030:
    set fb_tmp_55, _lex_param_1
    repr_defined $I5002, fb_tmp_55
    unless $I5002 goto if712_else2028 
    set $P5003, fb_tmp_55["termconj"]
    set $P5005, $P5003
    goto if712_end2029
  if712_else2028:
    null $P5004
    set $P5005, $P5004
  if712_end2029:
    unless_null $P5005, vivi_7132031
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_7132031:
    set fb_tmp_54, $P5005
    repr_defined $I5001, fb_tmp_54
    unless $I5001 goto if711_else2026 
    set $P5007, fb_tmp_54[0]
    set $P5009, $P5007
    goto if711_end2027
  if711_else2026:
    null $P5008
    set $P5009, $P5008
  if711_end2027:
    unless_null $P5009, vivi_7142032
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_7142032:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback2037
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5012
  fallback2037:
    set fb_tmp_56, _lex_param_1
    repr_defined $I5004, fb_tmp_56
    unless $I5004 goto if716_else2035 
    set $P5013, fb_tmp_56["termconj"]
    set $P5015, $P5013
    goto if716_end2036
  if716_else2035:
    null $P5014
    set $P5015, $P5014
  if716_end2036:
    unless_null $P5015, vivi_7172038
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5015, $P5016
  vivi_7172038:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if715_end2034 
.annotate 'line', 430
.annotate 'line', 431
    nqp_get_sc_object $P5017, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5018 = $P5017."new"("alt" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback2041
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5022
  fallback2041:
    set fb_tmp_57, _lex_param_1
    repr_defined $I5005, fb_tmp_57
    unless $I5005 goto if718_else2039 
    set $P5023, fb_tmp_57["termconj"]
    set $P5025, $P5023
    goto if718_end2040
  if718_else2039:
    null $P5024
    set $P5025, $P5024
  if718_end2040:
    unless_null $P5025, vivi_7192042
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5025, $P5026
  vivi_7192042:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next2043:
    unless $P5021, for_done2045
    shift $P5028, $P5021
  for_redo2044:
    .const 'Sub' $P5027 = 'cuid_255_1382484119.90237' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next2043
  for_done2045:
  if715_end2034:
.annotate 'line', 434
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_255_1382484119.90237") :anon :lex :outer("cuid_134_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 432
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termconj" :subid("cuid_135_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 437
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_256_1382484119.90237' 
    capture_lex $P5030 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_58 
    .local pmc fb_tmp_59 
    .local pmc fb_tmp_60 
    .local pmc fb_tmp_61 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 438
    unless_null _lex_param_1, fallback2050
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2050:
    set fb_tmp_59, _lex_param_1
    repr_defined $I5002, fb_tmp_59
    unless $I5002 goto if721_else2048 
    set $P5003, fb_tmp_59["termish"]
    set $P5005, $P5003
    goto if721_end2049
  if721_else2048:
    null $P5004
    set $P5005, $P5004
  if721_end2049:
    unless_null $P5005, vivi_7222051
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_7222051:
    set fb_tmp_58, $P5005
    repr_defined $I5001, fb_tmp_58
    unless $I5001 goto if720_else2046 
    set $P5007, fb_tmp_58[0]
    set $P5009, $P5007
    goto if720_end2047
  if720_else2046:
    null $P5008
    set $P5009, $P5008
  if720_end2047:
    unless_null $P5009, vivi_7232052
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_7232052:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
    unless_null _lex_param_1, fallback2057
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5012
  fallback2057:
    set fb_tmp_60, _lex_param_1
    repr_defined $I5004, fb_tmp_60
    unless $I5004 goto if725_else2055 
    set $P5013, fb_tmp_60["termish"]
    set $P5015, $P5013
    goto if725_end2056
  if725_else2055:
    null $P5014
    set $P5015, $P5014
  if725_end2056:
    unless_null $P5015, vivi_7262058
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5015, $P5016
  vivi_7262058:
    set $N5001, $P5015
    set $N5002, 1
    isgt $I5003, $N5001, $N5002
    unless $I5003 goto if724_end2054 
.annotate 'line', 439
.annotate 'line', 440
    nqp_get_sc_object $P5017, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5018 = $P5017."new"("conj" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5018
    unless_null _lex_param_1, fallback2061
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5022
  fallback2061:
    set fb_tmp_61, _lex_param_1
    repr_defined $I5005, fb_tmp_61
    unless $I5005 goto if727_else2059 
    set $P5023, fb_tmp_61["termish"]
    set $P5025, $P5023
    goto if727_end2060
  if727_else2059:
    null $P5024
    set $P5025, $P5024
  if727_end2060:
    unless_null $P5025, vivi_7282062
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5025, $P5026
  vivi_7282062:
    set $P5019, $P5025
    iter $P5021, $P5025
  for_next2063:
    unless $P5021, for_done2065
    shift $P5028, $P5021
  for_redo2064:
    .const 'Sub' $P5027 = 'cuid_256_1382484119.90237' 
    capture_lex $P5027
    $P5019 = $P5027($P5028)
    goto for_next2063
  for_done2065:
  if724_end2054:
.annotate 'line', 443
    $P5029 = _lex_param_1."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_256_1382484119.90237") :anon :lex :outer("cuid_135_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 441
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$qast"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "termish" :subid("cuid_136_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 446
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_257_1382484119.90237' 
    capture_lex $P5017 
    .lex "$qast", $P101 
    .lex "$lastlit", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_62 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
.annotate 'line', 447
    nqp_get_sc_object $P5003, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5004 = $P5003."new"("concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5004
    box $P5005, 0
    set $P102, $P5005
    unless_null _lex_param_1, fallback2068
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5009
  fallback2068:
    set fb_tmp_62, _lex_param_1
    repr_defined $I5001, fb_tmp_62
    unless $I5001 goto if729_else2066 
    set $P5010, fb_tmp_62["noun"]
    set $P5012, $P5010
    goto if729_end2067
  if729_else2066:
    null $P5011
    set $P5012, $P5011
  if729_end2067:
    unless_null $P5012, vivi_7302069
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5012, $P5013
  vivi_7302069:
    set $P5006, $P5012
    iter $P5008, $P5012
  for_next2094:
    unless $P5008, for_done2096
    shift $P5015, $P5008
  for_redo2095:
    .const 'Sub' $P5014 = 'cuid_257_1382484119.90237' 
    capture_lex $P5014
    $P5006 = $P5014($P5015)
    goto for_next2094
  for_done2096:
.annotate 'line', 464
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_257_1382484119.90237") :anon :lex :outer("cuid_136_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 449
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_63 
    .local pmc fb_tmp_64 
    .local pmc fb_tmp_65 
    .local pmc fb_tmp_66 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 450
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5038, $P101
    unless $P101 goto if731_end2071 
.annotate 'line', 451
    find_lex $P5003, "$lastlit"
    set $P5005, $P5003
    unless $P5003 goto if734_end2077 
.annotate 'line', 452
    $P5004 = $P101."rxtype"()
    set $S5001, $P5004
    iseq $I5001, $S5001, "literal"
    box $P5006, $I5001
    set $P5005, $P5006
  if734_end2077:
    set $P5013, $P5005
    unless $P5005 goto if733_end2075 
.annotate 'line', 453
    nqp_get_sc_object $P5007, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
    set fb_tmp_63, $P101
    repr_defined $I5003, fb_tmp_63
    unless $I5003 goto if735_else2078 
    set $P5008, fb_tmp_63[0]
    set $P5010, $P5008
    goto if735_end2079
  if735_else2078:
    null $P5009
    set $P5010, $P5009
  if735_end2079:
    unless_null $P5010, vivi_7362080
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  vivi_7362080:
    $P5012 = $P5007."ACCEPTS"($P5010)
    isfalse $I5002, $P5012
    box $P5014, $I5002
    set $P5013, $P5014
  if733_end2075:
    unless $P5013 goto if732_else2072 
    find_lex $P5015, "$lastlit"
    find_lex $P5016, "$lastlit"
    set fb_tmp_64, $P5016
    repr_defined $I5004, fb_tmp_64
    unless $I5004 goto if737_else2081 
    set $P5017, fb_tmp_64[0]
    set $P5019, $P5017
    goto if737_end2082
  if737_else2081:
    null $P5018
    set $P5019, $P5018
  if737_end2082:
    unless_null $P5019, vivi_7382083
    nqp_get_sc_object $P5020, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5019, $P5020
  vivi_7382083:
    set $S5003, $P5019
    set fb_tmp_65, $P101
    repr_defined $I5005, fb_tmp_65
    unless $I5005 goto if739_else2084 
    set $P5021, fb_tmp_65[0]
    set $P5023, $P5021
    goto if739_end2085
  if739_else2084:
    null $P5022
    set $P5023, $P5022
  if739_end2085:
    unless_null $P5023, vivi_7402086
    nqp_get_sc_object $P5024, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5023, $P5024
  vivi_7402086:
    set $S5004, $P5023
    concat $S5002, $S5003, $S5004
    box $P5025, $S5002
    set $P5015[0], $P5025
    set $P5037, $P5025
    goto if732_end2073
  if732_else2072:
.annotate 'line', 456
.annotate 'line', 457
    find_lex $P5026, "$qast"
    $P5027 = _lex_param_0."ast"()
    $P5026."push"($P5027)
.annotate 'line', 458
    $P5028 = $P101."rxtype"()
    set $S5005, $P5028
    iseq $I5006, $S5005, "literal"
    set $I5009, $I5006
    unless $I5006 goto if742_end2090 
.annotate 'line', 459
    nqp_get_sc_object $P5029, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
    set fb_tmp_66, $P101
    repr_defined $I5008, fb_tmp_66
    unless $I5008 goto if743_else2091 
    set $P5030, fb_tmp_66[0]
    set $P5032, $P5030
    goto if743_end2092
  if743_else2091:
    null $P5031
    set $P5032, $P5031
  if743_end2092:
    unless_null $P5032, vivi_7442093
    nqp_get_sc_object $P5033, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5032, $P5033
  vivi_7442093:
    $P5034 = $P5029."ACCEPTS"($P5032)
    isfalse $I5007, $P5034
    set $I5009, $I5007
  if742_end2090:
    unless $I5009 goto if741_else2087 
    set $P5035, $P101
    goto if741_end2088
  if741_else2087:
    box $P5036, 0
    set $P5035, $P5036
  if741_end2088:
    store_lex "$lastlit", $P5035
    set $P5037, $P5035
  if732_end2073:
    set $P5038, $P5037
  if731_end2071:
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "quantified_atom" :subid("cuid_137_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 467
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5126 = 'cuid_258_1382484119.90237' 
    capture_lex $P5126 
    .lex "$qast", $P101 
    .lex "$sigmaybe", $P102 
    .lex "$sigfinal", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_67 
    .local pmc fb_tmp_68 
    .local pmc fb_tmp_69 
    .local pmc fb_tmp_70 
    .local pmc fb_tmp_72 
    .local pmc fb_tmp_73 
    .local pmc fb_tmp_74 
    .local pmc fb_tmp_75 
    .local pmc fb_tmp_76 
    .local pmc fb_tmp_77 
    .local pmc fb_tmp_78 
    .local pmc fb_tmp_79 
    .local pmc fb_tmp_80 
    .local pmc fb_tmp_81 
    .local pmc fb_tmp_82 
    .local pmc fb_tmp_83 
    .local pmc pkg_viv_tmp_6 
    .local pmc fb_tmp_84 
    .local pmc fb_tmp_85 
    .local pmc fb_tmp_86 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P103, $P5003
.annotate 'line', 468
    unless_null _lex_param_1, fallback2099
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5004
  fallback2099:
    set fb_tmp_67, _lex_param_1
    repr_defined $I5001, fb_tmp_67
    unless $I5001 goto if745_else2097 
    set $P5005, fb_tmp_67["atom"]
    set $P5007, $P5005
    goto if745_end2098
  if745_else2097:
    null $P5006
    set $P5007, $P5006
  if745_end2098:
    unless_null $P5007, vivi_7462100
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_7462100:
    $P5009 = $P5007."ast"()
    set $P101, $P5009
    unless_null _lex_param_1, fallback2105
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5010
  fallback2105:
    set fb_tmp_68, _lex_param_1
    repr_defined $I5002, fb_tmp_68
    unless $I5002 goto if748_else2103 
    set $P5011, fb_tmp_68["sigmaybe"]
    set $P5013, $P5011
    goto if748_end2104
  if748_else2103:
    null $P5012
    set $P5013, $P5012
  if748_end2104:
    unless_null $P5013, vivi_7492106
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5013, $P5014
  vivi_7492106:
    unless $P5013 goto if747_end2102 
.annotate 'line', 470
    unless_null _lex_param_1, fallback2109
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5015
  fallback2109:
    set fb_tmp_69, _lex_param_1
    repr_defined $I5003, fb_tmp_69
    unless $I5003 goto if750_else2107 
    set $P5016, fb_tmp_69["sigmaybe"]
    set $P5018, $P5016
    goto if750_end2108
  if750_else2107:
    null $P5017
    set $P5018, $P5017
  if750_end2108:
    unless_null $P5018, vivi_7512110
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5018, $P5019
  vivi_7512110:
    $P5020 = $P5018."ast"()
    set $P102, $P5020
  if747_end2102:
    unless $P102 goto if752_end2112 
.annotate 'line', 471
    nqp_get_sc_object $P5021, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5022 = $P5021."new"($P101, $P102, "concat" :named("rxtype"))
    set $P101, $P5022
  if752_end2112:
    unless_null _lex_param_1, fallback2117
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5023
  fallback2117:
    set fb_tmp_70, _lex_param_1
    repr_defined $I5004, fb_tmp_70
    unless $I5004 goto if754_else2115 
    set $P5024, fb_tmp_70["quantifier"]
    set $P5026, $P5024
    goto if754_end2116
  if754_else2115:
    null $P5025
    set $P5026, $P5025
  if754_end2116:
    unless_null $P5026, vivi_7552118
    nqp_get_sc_object $P5027, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5026, $P5027
  vivi_7552118:
    unless $P5026 goto if753_end2114 
    .const 'Sub' $P5028 = 'cuid_258_1382484119.90237' 
    capture_lex $P5028
    $P5029 = $P5028()
  if753_end2114:
    unless_null _lex_param_1, fallback2129
    nqp_get_sc_object $P5030, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5030
  fallback2129:
    set fb_tmp_72, _lex_param_1
    repr_defined $I5005, fb_tmp_72
    unless $I5005 goto if760_else2127 
    set $P5031, fb_tmp_72["separator"]
    set $P5033, $P5031
    goto if760_end2128
  if760_else2127:
    null $P5032
    set $P5033, $P5032
  if760_end2128:
    unless_null $P5033, vivi_7612130
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5033, $P5034
  vivi_7612130:
    unless $P5033 goto if759_end2126 
.annotate 'line', 480
.annotate 'line', 481
    $P5035 = $P101."rxtype"()
    set $S5001, $P5035
    iseq $I5006, $S5001, "quant"
    if $I5006 goto unless762_end2132 
.annotate 'line', 482
    $P5036 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback2139
    nqp_get_sc_object $P5037, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5037
  fallback2139:
    set fb_tmp_75, _lex_param_1
    repr_defined $I5009, fb_tmp_75
    unless $I5009 goto if765_else2137 
    set $P5038, fb_tmp_75["separator"]
    set $P5040, $P5038
    goto if765_end2138
  if765_else2137:
    null $P5039
    set $P5040, $P5039
  if765_end2138:
    unless_null $P5040, vivi_7662140
    nqp_get_sc_object $P5041, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5040, $P5041
  vivi_7662140:
    set fb_tmp_74, $P5040
    repr_defined $I5008, fb_tmp_74
    unless $I5008 goto if764_else2135 
    set $P5042, fb_tmp_74[0]
    set $P5044, $P5042
    goto if764_end2136
  if764_else2135:
    null $P5043
    set $P5044, $P5043
  if764_end2136:
    unless_null $P5044, vivi_7672141
    nqp_get_sc_object $P5045, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5044, $P5045
  vivi_7672141:
    set fb_tmp_73, $P5044
    repr_defined $I5007, fb_tmp_73
    unless $I5007 goto if763_else2133 
    set $P5046, fb_tmp_73["septype"]
    set $P5048, $P5046
    goto if763_end2134
  if763_else2133:
    null $P5047
    set $P5048, $P5047
  if763_end2134:
    unless_null $P5048, vivi_7682142
    nqp_get_sc_object $P5049, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5048, $P5049
  vivi_7682142:
    set $S5004, $P5048
    concat $S5003, "'", $S5004
    concat $S5002, $S5003, "' many only be used immediately following a quantifier"
    $P5050 = $P5036."panic"($S5002)
  unless762_end2132:
.annotate 'line', 485
    unless_null _lex_param_1, fallback2145
    nqp_get_sc_object $P5051, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5051
  fallback2145:
    set fb_tmp_76, _lex_param_1
    repr_defined $I5010, fb_tmp_76
    unless $I5010 goto if769_else2143 
    set $P5052, fb_tmp_76["separator"]
    set $P5054, $P5052
    goto if769_end2144
  if769_else2143:
    null $P5053
    set $P5054, $P5053
  if769_end2144:
    unless_null $P5054, vivi_7702146
    nqp_get_sc_object $P5055, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5054, $P5055
  vivi_7702146:
    $P5056 = $P5054."ast"()
    $P101."push"($P5056)
    unless_null _lex_param_1, fallback2153
    nqp_get_sc_object $P5057, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5057
  fallback2153:
    set fb_tmp_78, _lex_param_1
    repr_defined $I5013, fb_tmp_78
    unless $I5013 goto if773_else2151 
    set $P5058, fb_tmp_78["separator"]
    set $P5060, $P5058
    goto if773_end2152
  if773_else2151:
    null $P5059
    set $P5060, $P5059
  if773_end2152:
    unless_null $P5060, vivi_7742154
    nqp_get_sc_object $P5061, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5060, $P5061
  vivi_7742154:
    set fb_tmp_77, $P5060
    repr_defined $I5012, fb_tmp_77
    unless $I5012 goto if772_else2149 
    set $P5062, fb_tmp_77["septype"]
    set $P5064, $P5062
    goto if772_end2150
  if772_else2149:
    null $P5063
    set $P5064, $P5063
  if772_end2150:
    unless_null $P5064, vivi_7752155
    nqp_get_sc_object $P5065, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5064, $P5065
  vivi_7752155:
    set $S5005, $P5064
    iseq $I5011, $S5005, "%%"
    box $P5077, $I5011
    set $P5076, $P5077
    unless $I5011 goto if771_end2148 
.annotate 'line', 486
.annotate 'line', 487
    nqp_get_sc_object $P5066, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 488
    nqp_get_sc_object $P5067, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2158
    nqp_get_sc_object $P5068, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5068
  fallback2158:
    set fb_tmp_79, _lex_param_1
    repr_defined $I5014, fb_tmp_79
    unless $I5014 goto if776_else2156 
    set $P5069, fb_tmp_79["separator"]
    set $P5071, $P5069
    goto if776_end2157
  if776_else2156:
    null $P5070
    set $P5071, $P5070
  if776_end2157:
    unless_null $P5071, vivi_7772159
    nqp_get_sc_object $P5072, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5071, $P5072
  vivi_7772159:
    $P5073 = $P5071."ast"()
    $P5074 = $P5067."new"($P5073, "quant" :named("rxtype"), 0 :named("min"), 1 :named("max"))
    $P5075 = $P5066."new"($P101, $P5074, "concat" :named("rxtype"))
    set $P101, $P5075
    set $P5076, $P101
  if771_end2148:
  if759_end2126:
    unless_null _lex_param_1, fallback2164
    nqp_get_sc_object $P5078, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5078
  fallback2164:
    set fb_tmp_80, _lex_param_1
    repr_defined $I5015, fb_tmp_80
    unless $I5015 goto if779_else2162 
    set $P5079, fb_tmp_80["sigfinal"]
    set $P5081, $P5079
    goto if779_end2163
  if779_else2162:
    null $P5080
    set $P5081, $P5080
  if779_end2163:
    unless_null $P5081, vivi_7802165
    nqp_get_sc_object $P5082, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5081, $P5082
  vivi_7802165:
    unless $P5081 goto if778_end2161 
.annotate 'line', 492
    unless_null _lex_param_1, fallback2168
    nqp_get_sc_object $P5083, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5083
  fallback2168:
    set fb_tmp_81, _lex_param_1
    repr_defined $I5016, fb_tmp_81
    unless $I5016 goto if781_else2166 
    set $P5084, fb_tmp_81["sigfinal"]
    set $P5086, $P5084
    goto if781_end2167
  if781_else2166:
    null $P5085
    set $P5086, $P5085
  if781_end2167:
    unless_null $P5086, vivi_7822169
    nqp_get_sc_object $P5087, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5086, $P5087
  vivi_7822169:
    $P5088 = $P5086."ast"()
    set $P103, $P5088
  if778_end2161:
    unless $P103 goto if783_end2171 
.annotate 'line', 493
    nqp_get_sc_object $P5089, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5090 = $P5089."new"($P101, $P103, "concat" :named("rxtype"))
    set $P101, $P5090
  if783_end2171:
    unless $P101 goto if784_end2173 
.annotate 'line', 495
.annotate 'line', 496
    $P5091 = $P101."backtrack"()
    isfalse $I5017, $P5091
    box $P5122, $I5017
    set $P5121, $P5122
    unless $I5017 goto if786_end2177 
    find_dynamic_lex $P5092, "%*RX"
    unless_null $P5092, fallback2182
    nqp_get_sc_object $P5094, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5093, $P5094
    set pkg_viv_tmp_6, $P5093
    set fb_tmp_83, pkg_viv_tmp_6
    repr_defined $I5019, fb_tmp_83
    unless $I5019 goto if789_else2183 
    set $P5095, fb_tmp_83["%RX"]
    set $P5097, $P5095
    goto if789_end2184
  if789_else2183:
    null $P5096
    set $P5097, $P5096
  if789_end2184:
    unless_null $P5097, vivi_7902185
    new $P5098, 'Hash'
    set pkg_viv_tmp_6["%RX"], $P5098
    set $P5097, $P5098
  vivi_7902185:
    unless_null $P5097, vivi_7912186
    die "Contextual %*RX not found"
    box $P5099, "Contextual %*RX not found"
    set $P5097, $P5099
  vivi_7912186:
    set $P5092, $P5097
  fallback2182:
    set fb_tmp_82, $P5092
    repr_defined $I5018, fb_tmp_82
    unless $I5018 goto if788_else2180 
    set $P5100, fb_tmp_82["r"]
    set $P5102, $P5100
    goto if788_end2181
  if788_else2180:
    null $P5101
    set $P5102, $P5101
  if788_end2181:
    unless_null $P5102, vivi_7922187
    nqp_get_sc_object $P5103, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5102, $P5103
  vivi_7922187:
    set $P5120, $P5102
    if $P5102 goto unless787_end2179 
    unless_null _lex_param_1, fallback2192
    nqp_get_sc_object $P5104, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5104
  fallback2192:
    set fb_tmp_84, _lex_param_1
    repr_defined $I5020, fb_tmp_84
    unless $I5020 goto if794_else2190 
    set $P5105, fb_tmp_84["backmod"]
    set $P5107, $P5105
    goto if794_end2191
  if794_else2190:
    null $P5106
    set $P5107, $P5106
  if794_end2191:
    unless_null $P5107, vivi_7952193
    nqp_get_sc_object $P5108, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5107, $P5108
  vivi_7952193:
    set $P5118, $P5107
    unless $P5107 goto if793_end2189 
    unless_null _lex_param_1, fallback2198
    nqp_get_sc_object $P5109, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5109
  fallback2198:
    set fb_tmp_86, _lex_param_1
    repr_defined $I5023, fb_tmp_86
    unless $I5023 goto if797_else2196 
    set $P5110, fb_tmp_86["backmod"]
    set $P5112, $P5110
    goto if797_end2197
  if797_else2196:
    null $P5111
    set $P5112, $P5111
  if797_end2197:
    unless_null $P5112, vivi_7982199
    nqp_get_sc_object $P5113, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5112, $P5113
  vivi_7982199:
    set fb_tmp_85, $P5112
    repr_defined $I5022, fb_tmp_85
    unless $I5022 goto if796_else2194 
    set $P5114, fb_tmp_85[0]
    set $P5116, $P5114
    goto if796_end2195
  if796_else2194:
    null $P5115
    set $P5116, $P5115
  if796_end2195:
    unless_null $P5116, vivi_7992200
    nqp_get_sc_object $P5117, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5116, $P5117
  vivi_7992200:
    set $S5006, $P5116
    iseq $I5021, $S5006, ":"
    box $P5119, $I5021
    set $P5118, $P5119
  if793_end2189:
    set $P5120, $P5118
  unless787_end2179:
    set $P5121, $P5120
  if786_end2177:
    unless $P5121 goto if785_end2175 
    $P5123 = $P101."backtrack"("r")
  if785_end2175:
.annotate 'line', 497
    $P5124 = $P101."node"(_lex_param_1)
  if784_end2173:
.annotate 'line', 499
    $P5125 = _lex_param_1."!make"($P101)
    .return ($P5125) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_258_1382484119.90237") :anon :lex :outer("cuid_137_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 473
    .lex "$ast", $P101 
    .local pmc fb_tmp_71 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    find_lex $P5002, "$qast"
    if $P5002 goto unless756_end2120 
.annotate 'line', 474
    find_lex $P5003, "$/"
    $P5004 = $P5003."CURSOR"()
    $P5005 = $P5004."panic"("Quantifier quantifies nothing")
  unless756_end2120:
.annotate 'line', 476
    find_lex $P5006, "$/"
    unless_null $P5006, fallback2123
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  fallback2123:
    set fb_tmp_71, $P5006
    repr_defined $I5001, fb_tmp_71
    unless $I5001 goto if757_else2121 
    set $P5008, fb_tmp_71["quantifier"]
    set $P5010, $P5008
    goto if757_end2122
  if757_else2121:
    null $P5009
    set $P5010, $P5009
  if757_end2122:
    unless_null $P5010, vivi_7582124
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  vivi_7582124:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 477
    find_lex $P5013, "$qast"
    $P101."unshift"($P5013)
    store_lex "$qast", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "separator" :subid("cuid_138_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 502
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_87 
.annotate 'line', 503
    unless_null _lex_param_1, fallback2203
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback2203:
    set fb_tmp_87, _lex_param_1
    repr_defined $I5001, fb_tmp_87
    unless $I5001 goto if800_else2201 
    set $P5002, fb_tmp_87["quantified_atom"]
    set $P5004, $P5002
    goto if800_end2202
  if800_else2201:
    null $P5003
    set $P5004, $P5003
  if800_end2202:
    unless_null $P5004, vivi_8012204
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_8012204:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "atom" :subid("cuid_139_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 506
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5016 = 'cuid_259_1382484119.90237' 
    capture_lex $P5016 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_88 
    .local pmc fb_tmp_89 
    unless_null _lex_param_1, fallback2209
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback2209:
    set fb_tmp_88, _lex_param_1
    repr_defined $I5001, fb_tmp_88
    unless $I5001 goto if803_else2207 
    set $P5002, fb_tmp_88["metachar"]
    set $P5004, $P5002
    goto if803_end2208
  if803_else2207:
    null $P5003
    set $P5004, $P5003
  if803_end2208:
    unless_null $P5004, vivi_8042210
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_8042210:
    unless $P5004 goto if802_else2205 
.annotate 'line', 507
.annotate 'line', 508
    unless_null _lex_param_1, fallback2213
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5006
  fallback2213:
    set fb_tmp_89, _lex_param_1
    repr_defined $I5002, fb_tmp_89
    unless $I5002 goto if805_else2211 
    set $P5007, fb_tmp_89["metachar"]
    set $P5009, $P5007
    goto if805_end2212
  if805_else2211:
    null $P5008
    set $P5009, $P5008
  if805_end2212:
    unless_null $P5009, vivi_8062214
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_8062214:
    $P5011 = $P5009."ast"()
    $P5012 = _lex_param_1."!make"($P5011)
    set $P5015, $P5012
    goto if802_end2206
  if802_else2205:
    .const 'Sub' $P5013 = 'cuid_259_1382484119.90237' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if802_end2206:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_259_1382484119.90237") :anon :lex :outer("cuid_139_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 510
    .lex "$qast", $P101 
    .local pmc fb_tmp_90 
    .local pmc fb_tmp_91 
    .local pmc pkg_viv_tmp_7 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 511
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_lex $P5003, "$/"
    set $S5001, $P5003
    find_lex $P5004, "$/"
    $P5005 = $P5002."new"($S5001, "literal" :named("rxtype"), $P5004 :named("node"))
    set $P101, $P5005
    find_dynamic_lex $P5006, "%*RX"
    unless_null $P5006, fallback2219
    nqp_get_sc_object $P5008, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5007, $P5008
    set pkg_viv_tmp_7, $P5007
    set fb_tmp_91, pkg_viv_tmp_7
    repr_defined $I5002, fb_tmp_91
    unless $I5002 goto if809_else2220 
    set $P5009, fb_tmp_91["%RX"]
    set $P5011, $P5009
    goto if809_end2221
  if809_else2220:
    null $P5010
    set $P5011, $P5010
  if809_end2221:
    unless_null $P5011, vivi_8102222
    new $P5012, 'Hash'
    set pkg_viv_tmp_7["%RX"], $P5012
    set $P5011, $P5012
  vivi_8102222:
    unless_null $P5011, vivi_8112223
    die "Contextual %*RX not found"
    box $P5013, "Contextual %*RX not found"
    set $P5011, $P5013
  vivi_8112223:
    set $P5006, $P5011
  fallback2219:
    set fb_tmp_90, $P5006
    repr_defined $I5001, fb_tmp_90
    unless $I5001 goto if808_else2217 
    set $P5014, fb_tmp_90["i"]
    set $P5016, $P5014
    goto if808_end2218
  if808_else2217:
    null $P5015
    set $P5016, $P5015
  if808_end2218:
    unless_null $P5016, vivi_8122224
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5016, $P5017
  vivi_8122224:
    unless $P5016 goto if807_end2216 
.annotate 'line', 512
    $P5018 = $P101."subtype"("ignorecase")
  if807_end2216:
.annotate 'line', 513
    find_dynamic_lex $P5019, "$/"
    $P5020 = $P5019."!make"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "sigmaybe:sym<sigwhite>" :subid("cuid_140_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 517
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 518
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 523
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
    nqp_get_sc_object $P5003, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5004 = $P5003."new"("ws" :named("value"))
    $P5005 = $P5002."new"($P5004)
    $P5006 = $P5001."new"($P5005, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"), "ws" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<*>" :subid("cuid_141_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 526
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_92 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 527
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), 0 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 528
    unless_null _lex_param_1, fallback2227
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5004
  fallback2227:
    set fb_tmp_92, _lex_param_1
    repr_defined $I5001, fb_tmp_92
    unless $I5001 goto if813_else2225 
    set $P5005, fb_tmp_92["backmod"]
    set $P5007, $P5005
    goto if813_end2226
  if813_else2225:
    null $P5006
    set $P5007, $P5006
  if813_end2226:
    unless_null $P5007, vivi_8142228
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_8142228:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<+>" :subid("cuid_142_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 531
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_93 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 532
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), 1 :named("min"), -1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 533
    unless_null _lex_param_1, fallback2231
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5004
  fallback2231:
    set fb_tmp_93, _lex_param_1
    repr_defined $I5001, fb_tmp_93
    unless $I5001 goto if815_else2229 
    set $P5005, fb_tmp_93["backmod"]
    set $P5007, $P5005
    goto if815_end2230
  if815_else2229:
    null $P5006
    set $P5007, $P5006
  if815_end2230:
    unless_null $P5007, vivi_8162232
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_8162232:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<?>" :subid("cuid_143_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 536
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_94 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 537
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5003 = $P5002."new"("quant" :named("rxtype"), "item" :named("subtype"), 0 :named("min"), 1 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 538
    unless_null _lex_param_1, fallback2235
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5004
  fallback2235:
    set fb_tmp_94, _lex_param_1
    repr_defined $I5001, fb_tmp_94
    unless $I5001 goto if817_else2233 
    set $P5005, fb_tmp_94["backmod"]
    set $P5007, $P5005
    goto if817_end2234
  if817_else2233:
    null $P5006
    set $P5007, $P5006
  if817_end2234:
    unless_null $P5007, vivi_8182236
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_8182236:
    $P5009 = "&backmod"($P101, $P5007)
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "quantifier:sym<**>" :subid("cuid_144_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 541
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$min", $P102 
    .lex "$max", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_95 
    .local pmc fb_tmp_96 
    .local pmc fb_tmp_97 
    .local pmc fb_tmp_98 
    .local pmc fb_tmp_99 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P103, $P5003
.annotate 'line', 543
    unless_null _lex_param_1, fallback2239
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5004
  fallback2239:
    set fb_tmp_95, _lex_param_1
    repr_defined $I5001, fb_tmp_95
    unless $I5001 goto if819_else2237 
    set $P5005, fb_tmp_95["min"]
    set $P5007, $P5005
    goto if819_end2238
  if819_else2237:
    null $P5006
    set $P5007, $P5006
  if819_end2238:
    unless_null $P5007, vivi_8202240
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_8202240:
    $P5009 = $P5007."ast"()
    set $P102, $P5009
    box $P5010, -1
    set $P103, $P5010
    unless_null _lex_param_1, fallback2245
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5011
  fallback2245:
    set fb_tmp_96, _lex_param_1
    repr_defined $I5003, fb_tmp_96
    unless $I5003 goto if822_else2243 
    set $P5012, fb_tmp_96["max"]
    set $P5014, $P5012
    goto if822_end2244
  if822_else2243:
    null $P5013
    set $P5014, $P5013
  if822_end2244:
    unless_null $P5014, vivi_8232246
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5014, $P5015
  vivi_8232246:
    isfalse $I5002, $P5014
    unless $I5002 goto if821_else2241 
.annotate 'line', 545
    set $P103, $P102
    goto if821_end2242
  if821_else2241:
    unless_null _lex_param_1, fallback2251
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5016
  fallback2251:
    set fb_tmp_97, _lex_param_1
    repr_defined $I5005, fb_tmp_97
    unless $I5005 goto if825_else2249 
    set $P5017, fb_tmp_97["max"]
    set $P5019, $P5017
    goto if825_end2250
  if825_else2249:
    null $P5018
    set $P5019, $P5018
  if825_end2250:
    unless_null $P5019, vivi_8262252
    nqp_get_sc_object $P5020, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5019, $P5020
  vivi_8262252:
    set $S5001, $P5019
    isne $I5004, $S5001, "*"
    box $P5032, $I5004
    set $P5031, $P5032
    unless $I5004 goto if824_end2248 
.annotate 'line', 546
.annotate 'line', 547
    unless_null _lex_param_1, fallback2255
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5021
  fallback2255:
    set fb_tmp_98, _lex_param_1
    repr_defined $I5006, fb_tmp_98
    unless $I5006 goto if827_else2253 
    set $P5022, fb_tmp_98["max"]
    set $P5024, $P5022
    goto if827_end2254
  if827_else2253:
    null $P5023
    set $P5024, $P5023
  if827_end2254:
    unless_null $P5024, vivi_8282256
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5024, $P5025
  vivi_8282256:
    $P5026 = $P5024."ast"()
    set $P103, $P5026
    set $N5001, $P102
    set $N5002, $P103
    isgt $I5007, $N5001, $N5002
    box $P5030, $I5007
    set $P5029, $P5030
    unless $I5007 goto if829_end2258 
.annotate 'line', 548
    $P5027 = _lex_param_1."CURSOR"()
    $P5028 = $P5027."panic"("Empty range")
    set $P5029, $P5028
  if829_end2258:
    set $P5031, $P5029
  if824_end2248:
  if821_end2242:
.annotate 'line', 550
    nqp_get_sc_object $P5033, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5034 = $P5033."new"("quant" :named("rxtype"), $P102 :named("min"), $P103 :named("max"), _lex_param_1 :named("node"))
    set $P101, $P5034
.annotate 'line', 551
    unless_null _lex_param_1, fallback2261
    nqp_get_sc_object $P5035, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5035
  fallback2261:
    set fb_tmp_99, _lex_param_1
    repr_defined $I5008, fb_tmp_99
    unless $I5008 goto if830_else2259 
    set $P5036, fb_tmp_99["backmod"]
    set $P5038, $P5036
    goto if830_end2260
  if830_else2259:
    null $P5037
    set $P5038, $P5037
  if830_end2260:
    unless_null $P5038, vivi_8312262
    nqp_get_sc_object $P5039, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5038, $P5039
  vivi_8312262:
    $P5040 = "&backmod"($P101, $P5038)
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<[ ]>" :subid("cuid_145_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 554
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_100 
.annotate 'line', 555
    unless_null _lex_param_1, fallback2265
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback2265:
    set fb_tmp_100, _lex_param_1
    repr_defined $I5001, fb_tmp_100
    unless $I5001 goto if832_else2263 
    set $P5002, fb_tmp_100["nibbler"]
    set $P5004, $P5002
    goto if832_end2264
  if832_else2263:
    null $P5003
    set $P5004, $P5003
  if832_end2264:
    unless_null $P5004, vivi_8332266
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_8332266:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_146_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 558
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_101 
    .local pmc fb_tmp_102 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
.annotate 'line', 559
    nqp_get_sc_object $P5003, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
    nqp_decontainerize $P5004, _lex_param_0
    unless_null _lex_param_1, fallback2269
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5005
  fallback2269:
    set fb_tmp_101, _lex_param_1
    repr_defined $I5001, fb_tmp_101
    unless $I5001 goto if834_else2267 
    set $P5006, fb_tmp_101["nibbler"]
    set $P5008, $P5006
    goto if834_end2268
  if834_else2267:
    null $P5007
    set $P5008, $P5007
  if834_end2268:
    unless_null $P5008, vivi_8352270
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5008, $P5009
  vivi_8352270:
    $P5010 = $P5008."ast"()
    $P5011 = $P5004."qbuildsub"($P5010, 1 :named("anon"), 1 :named("addself"))
    $P5012 = $P5003."new"($P5011)
    set $P101, $P5012
.annotate 'line', 560
    nqp_get_sc_object $P5013, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2273
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5014
  fallback2273:
    set fb_tmp_102, _lex_param_1
    repr_defined $I5002, fb_tmp_102
    unless $I5002 goto if836_else2271 
    set $P5015, fb_tmp_102["nibbler"]
    set $P5017, $P5015
    goto if836_end2272
  if836_else2271:
    null $P5016
    set $P5017, $P5016
  if836_end2272:
    unless_null $P5017, vivi_8372274
    nqp_get_sc_object $P5018, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5017, $P5018
  vivi_8372274:
    $P5019 = $P5017."ast"()
    $P5020 = $P5013."new"($P101, $P5019, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5020
.annotate 'line', 562
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<'>" :subid("cuid_147_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 565
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_103 
    .local pmc fb_tmp_104 
    .local pmc fb_tmp_105 
    .local pmc pkg_viv_tmp_8 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
.annotate 'line', 566
    unless_null _lex_param_1, fallback2277
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2277:
    set fb_tmp_103, _lex_param_1
    repr_defined $I5001, fb_tmp_103
    unless $I5001 goto if838_else2275 
    set $P5004, fb_tmp_103["quote_EXPR"]
    set $P5006, $P5004
    goto if838_end2276
  if838_else2275:
    null $P5005
    set $P5006, $P5005
  if838_end2276:
    unless_null $P5006, vivi_8392278
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_8392278:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 567
    nqp_get_sc_object $P5009, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5010 = $P5009."ACCEPTS"($P101)
    unless $P5010 goto if840_end2280 
    $P5011 = $P101."value"()
    set $P101, $P5011
  if840_end2280:
.annotate 'line', 568
    nqp_get_sc_object $P5012, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5013 = $P5012."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2285
    nqp_get_sc_object $P5016, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5015, $P5016
    set pkg_viv_tmp_8, $P5015
    set fb_tmp_105, pkg_viv_tmp_8
    repr_defined $I5003, fb_tmp_105
    unless $I5003 goto if843_else2286 
    set $P5017, fb_tmp_105["%RX"]
    set $P5019, $P5017
    goto if843_end2287
  if843_else2286:
    null $P5018
    set $P5019, $P5018
  if843_end2287:
    unless_null $P5019, vivi_8442288
    new $P5020, 'Hash'
    set pkg_viv_tmp_8["%RX"], $P5020
    set $P5019, $P5020
  vivi_8442288:
    unless_null $P5019, vivi_8452289
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5019, $P5021
  vivi_8452289:
    set $P5014, $P5019
  fallback2285:
    set fb_tmp_104, $P5014
    repr_defined $I5002, fb_tmp_104
    unless $I5002 goto if842_else2283 
    set $P5022, fb_tmp_104["i"]
    set $P5024, $P5022
    goto if842_end2284
  if842_else2283:
    null $P5023
    set $P5024, $P5023
  if842_end2284:
    unless_null $P5024, vivi_8462290
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5024, $P5025
  vivi_8462290:
    unless $P5024 goto if841_end2282 
.annotate 'line', 569
    $P5026 = $P102."subtype"("ignorecase")
  if841_end2282:
.annotate 'line', 570
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<\">" :subid("cuid_148_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 573
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$quote", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_106 
    .local pmc fb_tmp_107 
    .local pmc fb_tmp_108 
    .local pmc pkg_viv_tmp_9 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
.annotate 'line', 574
    unless_null _lex_param_1, fallback2293
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2293:
    set fb_tmp_106, _lex_param_1
    repr_defined $I5001, fb_tmp_106
    unless $I5001 goto if847_else2291 
    set $P5004, fb_tmp_106["quote_EXPR"]
    set $P5006, $P5004
    goto if847_end2292
  if847_else2291:
    null $P5005
    set $P5006, $P5005
  if847_end2292:
    unless_null $P5006, vivi_8482294
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_8482294:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 575
    nqp_get_sc_object $P5009, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5010 = $P5009."ACCEPTS"($P101)
    unless $P5010 goto if849_end2296 
    $P5011 = $P101."value"()
    set $P101, $P5011
  if849_end2296:
.annotate 'line', 576
    nqp_get_sc_object $P5012, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5013 = $P5012."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2301
    nqp_get_sc_object $P5016, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5015, $P5016
    set pkg_viv_tmp_9, $P5015
    set fb_tmp_108, pkg_viv_tmp_9
    repr_defined $I5003, fb_tmp_108
    unless $I5003 goto if852_else2302 
    set $P5017, fb_tmp_108["%RX"]
    set $P5019, $P5017
    goto if852_end2303
  if852_else2302:
    null $P5018
    set $P5019, $P5018
  if852_end2303:
    unless_null $P5019, vivi_8532304
    new $P5020, 'Hash'
    set pkg_viv_tmp_9["%RX"], $P5020
    set $P5019, $P5020
  vivi_8532304:
    unless_null $P5019, vivi_8542305
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5019, $P5021
  vivi_8542305:
    set $P5014, $P5019
  fallback2301:
    set fb_tmp_107, $P5014
    repr_defined $I5002, fb_tmp_107
    unless $I5002 goto if851_else2299 
    set $P5022, fb_tmp_107["i"]
    set $P5024, $P5022
    goto if851_end2300
  if851_else2299:
    null $P5023
    set $P5024, $P5023
  if851_end2300:
    unless_null $P5024, vivi_8552306
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5024, $P5025
  vivi_8552306:
    unless $P5024 goto if850_end2298 
.annotate 'line', 577
    $P5026 = $P102."subtype"("ignorecase")
  if850_end2298:
.annotate 'line', 578
    $P5027 = _lex_param_1."!make"($P102)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<.>" :subid("cuid_149_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 581
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 582
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5002 = $P5001."new"("cclass" :named("rxtype"), "." :named("name"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^>" :subid("cuid_150_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 585
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 586
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "bos" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<^^>" :subid("cuid_151_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 589
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 590
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "bol" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$>" :subid("cuid_152_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 593
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 594
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "eos" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<$$>" :subid("cuid_153_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 597
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 598
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "eol" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<lwb>" :subid("cuid_154_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 601
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 602
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "lwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<rwb>" :subid("cuid_155_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 605
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 606
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5002 = $P5001."new"("anchor" :named("rxtype"), "rwb" :named("subtype"), _lex_param_1 :named("node"))
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<from>" :subid("cuid_156_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 609
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 610
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 612
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
.annotate 'line', 613
    nqp_get_sc_object $P5003, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5004 = $P5003."new"("!LITERAL" :named("value"))
.annotate 'line', 614
    nqp_get_sc_object $P5005, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5006 = $P5005."new"("" :named("value"))
    $P5007 = $P5002."new"($P5004, $P5006)
    $P5008 = $P5001."new"($P5007, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!from" :named("name"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<to>" :subid("cuid_157_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 617
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 618
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 620
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
.annotate 'line', 621
    nqp_get_sc_object $P5003, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5004 = $P5003."new"("!LITERAL" :named("value"))
.annotate 'line', 622
    nqp_get_sc_object $P5005, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5006 = $P5005."new"("" :named("value"))
    $P5007 = $P5002."new"($P5004, $P5006)
    $P5008 = $P5001."new"($P5007, "subrule" :named("rxtype"), "capture" :named("subtype"), "r" :named("backtrack"), "$!to" :named("name"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<bs>" :subid("cuid_158_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 625
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_109 
.annotate 'line', 626
    unless_null _lex_param_1, fallback2309
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback2309:
    set fb_tmp_109, _lex_param_1
    repr_defined $I5001, fb_tmp_109
    unless $I5001 goto if856_else2307 
    set $P5002, fb_tmp_109["backslash"]
    set $P5004, $P5002
    goto if856_end2308
  if856_else2307:
    null $P5003
    set $P5004, $P5003
  if856_end2308:
    unless_null $P5004, vivi_8572310
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_8572310:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<assert>" :subid("cuid_159_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 629
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_110 
.annotate 'line', 630
    unless_null _lex_param_1, fallback2313
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback2313:
    set fb_tmp_110, _lex_param_1
    repr_defined $I5001, fb_tmp_110
    unless $I5001 goto if858_else2311 
    set $P5002, fb_tmp_110["assertion"]
    set $P5004, $P5002
    goto if858_end2312
  if858_else2311:
    null $P5003
    set $P5004, $P5003
  if858_end2312:
    unless_null $P5004, vivi_8592314
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_8592314:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<var>" :subid("cuid_160_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 633
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_111 
    .local pmc fb_tmp_112 
    .local pmc fb_tmp_113 
    .local pmc fb_tmp_114 
    .local pmc fb_tmp_115 
    .local pmc fb_tmp_116 
    .local pmc fb_tmp_117 
    .local pmc fb_tmp_118 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    unless_null _lex_param_1, fallback2319
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2319:
    set fb_tmp_111, _lex_param_1
    repr_defined $I5001, fb_tmp_111
    unless $I5001 goto if861_else2317 
    set $P5004, fb_tmp_111["pos"]
    set $P5006, $P5004
    goto if861_end2318
  if861_else2317:
    null $P5005
    set $P5006, $P5005
  if861_end2318:
    unless_null $P5006, vivi_8622320
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_8622320:
    unless $P5006 goto if860_else2315 
    unless_null _lex_param_1, fallback2323
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5008
  fallback2323:
    set fb_tmp_112, _lex_param_1
    repr_defined $I5002, fb_tmp_112
    unless $I5002 goto if863_else2321 
    set $P5009, fb_tmp_112["pos"]
    set $P5011, $P5009
    goto if863_end2322
  if863_else2321:
    null $P5010
    set $P5011, $P5010
  if863_end2322:
    unless_null $P5011, vivi_8642324
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5011, $P5012
  vivi_8642324:
    set $N5001, $P5011
    box $P5019, $N5001
    set $P5018, $P5019
    goto if860_end2316
  if860_else2315:
    unless_null _lex_param_1, fallback2327
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5013
  fallback2327:
    set fb_tmp_113, _lex_param_1
    repr_defined $I5003, fb_tmp_113
    unless $I5003 goto if865_else2325 
    set $P5014, fb_tmp_113["name"]
    set $P5016, $P5014
    goto if865_end2326
  if865_else2325:
    null $P5015
    set $P5016, $P5015
  if865_end2326:
    unless_null $P5016, vivi_8662328
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5016, $P5017
  vivi_8662328:
    set $S5001, $P5016
    box $P5020, $S5001
    set $P5018, $P5020
  if860_end2316:
    set $P102, $P5018
    unless_null _lex_param_1, fallback2333
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5021
  fallback2333:
    set fb_tmp_114, _lex_param_1
    repr_defined $I5004, fb_tmp_114
    unless $I5004 goto if868_else2331 
    set $P5022, fb_tmp_114["quantified_atom"]
    set $P5024, $P5022
    goto if868_end2332
  if868_else2331:
    null $P5023
    set $P5024, $P5023
  if868_end2332:
    unless_null $P5024, vivi_8692334
    nqp_get_sc_object $P5025, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5024, $P5025
  vivi_8692334:
    unless $P5024 goto if867_else2329 
.annotate 'line', 636
.annotate 'line', 637
    unless_null _lex_param_1, fallback2339
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5026
  fallback2339:
    set fb_tmp_116, _lex_param_1
    repr_defined $I5006, fb_tmp_116
    unless $I5006 goto if871_else2337 
    set $P5027, fb_tmp_116["quantified_atom"]
    set $P5029, $P5027
    goto if871_end2338
  if871_else2337:
    null $P5028
    set $P5029, $P5028
  if871_end2338:
    unless_null $P5029, vivi_8722340
    nqp_get_sc_object $P5030, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5029, $P5030
  vivi_8722340:
    set fb_tmp_115, $P5029
    repr_defined $I5005, fb_tmp_115
    unless $I5005 goto if870_else2335 
    set $P5031, fb_tmp_115[0]
    set $P5033, $P5031
    goto if870_end2336
  if870_else2335:
    null $P5032
    set $P5033, $P5032
  if870_end2336:
    unless_null $P5033, vivi_8732341
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5033, $P5034
  vivi_8732341:
    $P5035 = $P5033."ast"()
    set $P101, $P5035
.annotate 'line', 638
    $P5036 = $P101."rxtype"()
    set $S5002, $P5036
    iseq $I5007, $S5002, "quant"
    set $I5010, $I5007
    unless $I5007 goto if875_end2345 
    set fb_tmp_117, $P101
    repr_defined $I5009, fb_tmp_117
    unless $I5009 goto if876_else2346 
    set $P5037, fb_tmp_117[0]
    set $P5039, $P5037
    goto if876_end2347
  if876_else2346:
    null $P5038
    set $P5039, $P5038
  if876_end2347:
    unless_null $P5039, vivi_8772348
    nqp_get_sc_object $P5040, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5039, $P5040
  vivi_8772348:
    $P5041 = $P5039."rxtype"()
    set $S5003, $P5041
    iseq $I5008, $S5003, "subrule"
    set $I5010, $I5008
  if875_end2345:
    unless $I5010 goto if874_else2342 
.annotate 'line', 639
    nqp_decontainerize $P5042, _lex_param_0
    set fb_tmp_118, $P101
    repr_defined $I5011, fb_tmp_118
    unless $I5011 goto if878_else2349 
    set $P5043, fb_tmp_118[0]
    set $P5045, $P5043
    goto if878_end2350
  if878_else2349:
    null $P5044
    set $P5045, $P5044
  if878_end2350:
    unless_null $P5045, vivi_8792351
    nqp_get_sc_object $P5046, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5045, $P5046
  vivi_8792351:
    $P5047 = $P5042."subrule_alias"($P5045, $P102)
    set $P5054, $P5047
    goto if874_end2343
  if874_else2342:
.annotate 'line', 641
    $P5048 = $P101."rxtype"()
    set $S5004, $P5048
    iseq $I5012, $S5004, "subrule"
    unless $I5012 goto if880_else2352 
.annotate 'line', 642
    nqp_decontainerize $P5049, _lex_param_0
    $P5050 = $P5049."subrule_alias"($P101, $P102)
    set $P5053, $P5050
    goto if880_end2353
  if880_else2352:
.annotate 'line', 644
.annotate 'line', 645
    nqp_get_sc_object $P5051, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5052 = $P5051."new"($P101, $P102 :named("name"), "subcapture" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5052
    set $P5053, $P101
  if880_end2353:
    set $P5054, $P5053
  if874_end2343:
    goto if867_end2330
  if867_else2329:
.annotate 'line', 649
.annotate 'line', 650
    nqp_get_sc_object $P5055, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 651
    nqp_get_sc_object $P5056, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
.annotate 'line', 652
    nqp_get_sc_object $P5057, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5058 = $P5057."new"("!BACKREF" :named("value"))
.annotate 'line', 653
    nqp_get_sc_object $P5059, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5060 = $P5059."new"($P102 :named("value"))
    $P5061 = $P5056."new"($P5058, $P5060)
    $P5062 = $P5055."new"($P5061, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5062
  if867_end2330:
.annotate 'line', 655
    $P5063 = _lex_param_1."!make"($P101)
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<~>" :subid("cuid_161_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 658
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@dba", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_119 
    .local pmc pkg_viv_tmp_11 
    .local pmc fb_tmp_120 
    .local pmc fb_tmp_121 
    .local pmc pkg_viv_tmp_10 
    .local pmc fb_tmp_122 
    .local pmc fb_tmp_123 
    .local pmc fb_tmp_124 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_dynamic_lex $P5002, "%*RX"
    unless_null $P5002, fallback2356
    nqp_get_sc_object $P5004, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5003, $P5004
    set pkg_viv_tmp_11, $P5003
    set fb_tmp_119, pkg_viv_tmp_11
    repr_defined $I5002, fb_tmp_119
    unless $I5002 goto if882_else2357 
    set $P5005, fb_tmp_119["%RX"]
    set $P5007, $P5005
    goto if882_end2358
  if882_else2357:
    null $P5006
    set $P5007, $P5006
  if882_end2358:
    unless_null $P5007, vivi_8832359
    new $P5008, 'Hash'
    set pkg_viv_tmp_11["%RX"], $P5008
    set $P5007, $P5008
  vivi_8832359:
    unless_null $P5007, vivi_8842360
    die "Contextual %*RX not found"
    box $P5009, "Contextual %*RX not found"
    set $P5007, $P5009
  vivi_8842360:
    set $P5002, $P5007
  fallback2356:
    exists $I5001, $P5002["dba"]
    unless $I5001 goto if881_end2355 
    new $P5010, 'ResizablePMCArray'
.annotate 'line', 659
    nqp_get_sc_object $P5011, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    find_dynamic_lex $P5012, "%*RX"
    unless_null $P5012, fallback2363
    nqp_get_sc_object $P5014, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5013, $P5014
    set pkg_viv_tmp_10, $P5013
    set fb_tmp_121, pkg_viv_tmp_10
    repr_defined $I5004, fb_tmp_121
    unless $I5004 goto if886_else2364 
    set $P5015, fb_tmp_121["%RX"]
    set $P5017, $P5015
    goto if886_end2365
  if886_else2364:
    null $P5016
    set $P5017, $P5016
  if886_end2365:
    unless_null $P5017, vivi_8872366
    new $P5018, 'Hash'
    set pkg_viv_tmp_10["%RX"], $P5018
    set $P5017, $P5018
  vivi_8872366:
    unless_null $P5017, vivi_8882367
    die "Contextual %*RX not found"
    box $P5019, "Contextual %*RX not found"
    set $P5017, $P5019
  vivi_8882367:
    set $P5012, $P5017
  fallback2363:
    set fb_tmp_120, $P5012
    repr_defined $I5003, fb_tmp_120
    unless $I5003 goto if885_else2361 
    set $P5020, fb_tmp_120["dba"]
    set $P5022, $P5020
    goto if885_end2362
  if885_else2361:
    null $P5021
    set $P5022, $P5021
  if885_end2362:
    unless_null $P5022, vivi_8892368
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5022, $P5023
  vivi_8892368:
    $P5024 = $P5011."new"($P5022 :named("value"))
    push $P5010, $P5024
    set $P101, $P5010
  if881_end2355:
.annotate 'line', 660
    nqp_get_sc_object $P5025, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 661
    unless_null _lex_param_1, fallback2371
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5026
  fallback2371:
    set fb_tmp_122, _lex_param_1
    repr_defined $I5005, fb_tmp_122
    unless $I5005 goto if890_else2369 
    set $P5027, fb_tmp_122["EXPR"]
    set $P5029, $P5027
    goto if890_end2370
  if890_else2369:
    null $P5028
    set $P5029, $P5028
  if890_end2370:
    unless_null $P5029, vivi_8912372
    nqp_get_sc_object $P5030, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5029, $P5030
  vivi_8912372:
    $P5031 = $P5029."ast"()
.annotate 'line', 662
    nqp_get_sc_object $P5032, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 663
    unless_null _lex_param_1, fallback2375
    nqp_get_sc_object $P5033, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5033
  fallback2375:
    set fb_tmp_123, _lex_param_1
    repr_defined $I5006, fb_tmp_123
    unless $I5006 goto if892_else2373 
    set $P5034, fb_tmp_123["GOAL"]
    set $P5036, $P5034
    goto if892_end2374
  if892_else2373:
    null $P5035
    set $P5036, $P5035
  if892_end2374:
    unless_null $P5036, vivi_8932376
    nqp_get_sc_object $P5037, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5036, $P5037
  vivi_8932376:
    $P5038 = $P5036."ast"()
.annotate 'line', 664
    nqp_get_sc_object $P5039, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 665
    nqp_get_sc_object $P5040, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
.annotate 'line', 666
    nqp_get_sc_object $P5041, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5042 = $P5041."new"("FAILGOAL" :named("value"))
.annotate 'line', 667
    nqp_get_sc_object $P5043, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    unless_null _lex_param_1, fallback2379
    nqp_get_sc_object $P5044, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5044
  fallback2379:
    set fb_tmp_124, _lex_param_1
    repr_defined $I5007, fb_tmp_124
    unless $I5007 goto if894_else2377 
    set $P5045, fb_tmp_124["GOAL"]
    set $P5047, $P5045
    goto if894_end2378
  if894_else2377:
    null $P5046
    set $P5047, $P5046
  if894_end2378:
    unless_null $P5047, vivi_8952380
    nqp_get_sc_object $P5048, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5047, $P5048
  vivi_8952380:
    set $S5001, $P5047
    $P5049 = $P5043."new"($S5001 :named("value"))
    $P5050 = $P5040."new"($P5042, $P5049, $P101 :flat)
    $P5051 = $P5039."new"($P5050, "subrule" :named("rxtype"), "method" :named("subtype"))
    $P5052 = $P5032."new"($P5038, $P5051, "altseq" :named("rxtype"))
    $P5053 = $P5025."new"($P5031, $P5052, "concat" :named("rxtype"))
    $P5054 = _lex_param_1."!make"($P5053)
    .return ($P5054) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<mod>" :subid("cuid_162_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 675
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_125 
    unless_null _lex_param_1, fallback2383
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback2383:
    set fb_tmp_125, _lex_param_1
    repr_defined $I5001, fb_tmp_125
    unless $I5001 goto if896_else2381 
    set $P5002, fb_tmp_125["mod_internal"]
    set $P5004, $P5002
    goto if896_end2382
  if896_else2381:
    null $P5003
    set $P5004, $P5003
  if896_end2382:
    unless_null $P5004, vivi_8972384
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_8972384:
    $P5006 = $P5004."ast"()
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<s>" :subid("cuid_163_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 677
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_126 
    .local pmc fb_tmp_127 
.annotate 'line', 678
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2387
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2387:
    set fb_tmp_126, _lex_param_1
    repr_defined $I5001, fb_tmp_126
    unless $I5001 goto if898_else2385 
    set $P5003, fb_tmp_126["sym"]
    set $P5005, $P5003
    goto if898_end2386
  if898_else2385:
    null $P5004
    set $P5005, $P5004
  if898_end2386:
    unless_null $P5005, vivi_8992388
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_8992388:
    set $S5002, $P5005
    downcase $S5001, $S5002
    unless_null _lex_param_1, fallback2391
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5007
  fallback2391:
    set fb_tmp_127, _lex_param_1
    repr_defined $I5003, fb_tmp_127
    unless $I5003 goto if900_else2389 
    set $P5008, fb_tmp_127["sym"]
    set $P5010, $P5008
    goto if900_end2390
  if900_else2389:
    null $P5009
    set $P5010, $P5009
  if900_end2390:
    unless_null $P5010, vivi_9012392
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  vivi_9012392:
    set $S5003, $P5010
    isle $I5002, $S5003, "Z"
    $P5012 = $P5001."new"("cclass" :named("rxtype"), $S5001 :named("name"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<b>" :subid("cuid_164_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 682
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_128 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 683
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2395
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2395:
    set fb_tmp_128, _lex_param_1
    repr_defined $I5002, fb_tmp_128
    unless $I5002 goto if902_else2393 
    set $P5004, fb_tmp_128["sym"]
    set $P5006, $P5004
    goto if902_end2394
  if902_else2393:
    null $P5005
    set $P5006, $P5005
  if902_end2394:
    unless_null $P5006, vivi_9032396
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9032396:
    set $S5001, $P5006
    iseq $I5001, $S5001, "B"
    $P5008 = $P5002."new"("\b", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 685
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<e>" :subid("cuid_165_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 688
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_129 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 689
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2399
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2399:
    set fb_tmp_129, _lex_param_1
    repr_defined $I5002, fb_tmp_129
    unless $I5002 goto if904_else2397 
    set $P5004, fb_tmp_129["sym"]
    set $P5006, $P5004
    goto if904_end2398
  if904_else2397:
    null $P5005
    set $P5006, $P5005
  if904_end2398:
    unless_null $P5006, vivi_9052400
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9052400:
    set $S5001, $P5006
    iseq $I5001, $S5001, "E"
    $P5008 = $P5002."new"("\e", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 691
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<f>" :subid("cuid_166_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 694
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_130 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 695
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2403
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2403:
    set fb_tmp_130, _lex_param_1
    repr_defined $I5002, fb_tmp_130
    unless $I5002 goto if906_else2401 
    set $P5004, fb_tmp_130["sym"]
    set $P5006, $P5004
    goto if906_end2402
  if906_else2401:
    null $P5005
    set $P5006, $P5005
  if906_end2402:
    unless_null $P5006, vivi_9072404
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9072404:
    set $S5001, $P5006
    iseq $I5001, $S5001, "F"
    $P5008 = $P5002."new"("\f", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 697
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<h>" :subid("cuid_167_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 700
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_131 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 701
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2407
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2407:
    set fb_tmp_131, _lex_param_1
    repr_defined $I5002, fb_tmp_131
    unless $I5002 goto if908_else2405 
    set $P5004, fb_tmp_131["sym"]
    set $P5006, $P5004
    goto if908_end2406
  if908_else2405:
    null $P5005
    set $P5006, $P5005
  if908_end2406:
    unless_null $P5006, vivi_9092408
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9092408:
    set $S5001, $P5006
    iseq $I5001, $S5001, "H"
    $P5008 = $P5002."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 703
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<r>" :subid("cuid_168_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 706
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_132 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 707
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2411
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2411:
    set fb_tmp_132, _lex_param_1
    repr_defined $I5002, fb_tmp_132
    unless $I5002 goto if910_else2409 
    set $P5004, fb_tmp_132["sym"]
    set $P5006, $P5004
    goto if910_end2410
  if910_else2409:
    null $P5005
    set $P5006, $P5005
  if910_end2410:
    unless_null $P5006, vivi_9112412
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9112412:
    set $S5001, $P5006
    iseq $I5001, $S5001, "R"
    $P5008 = $P5002."new"("\r", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 709
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<t>" :subid("cuid_169_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 712
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_133 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 713
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2415
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2415:
    set fb_tmp_133, _lex_param_1
    repr_defined $I5002, fb_tmp_133
    unless $I5002 goto if912_else2413 
    set $P5004, fb_tmp_133["sym"]
    set $P5006, $P5004
    goto if912_end2414
  if912_else2413:
    null $P5005
    set $P5006, $P5005
  if912_end2414:
    unless_null $P5006, vivi_9132416
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9132416:
    set $S5001, $P5006
    iseq $I5001, $S5001, "T"
    $P5008 = $P5002."new"("\t", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 715
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<v>" :subid("cuid_170_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 718
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_134 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 719
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2419
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2419:
    set fb_tmp_134, _lex_param_1
    repr_defined $I5002, fb_tmp_134
    unless $I5002 goto if914_else2417 
    set $P5004, fb_tmp_134["sym"]
    set $P5006, $P5004
    goto if914_end2418
  if914_else2417:
    null $P5005
    set $P5006, $P5005
  if914_end2418:
    unless_null $P5006, vivi_9152420
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9152420:
    set $S5001, $P5006
    iseq $I5001, $S5001, "V"
    $P5008 = $P5002."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 722
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<o>" :subid("cuid_171_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 725
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_135 
    .local pmc fb_tmp_136 
    .local pmc fb_tmp_137 
    .local pmc fb_tmp_138 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 727
    nqp_get_sc_object $P5002, "20A8B78604B6E989C5DC1D669DAFFA35168CF57C-1382484085.68816", 68
    unless_null _lex_param_1, fallback2425
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2425:
    set fb_tmp_135, _lex_param_1
    repr_defined $I5001, fb_tmp_135
    unless $I5001 goto if917_else2423 
    set $P5004, fb_tmp_135["octint"]
    set $P5006, $P5004
    goto if917_end2424
  if917_else2423:
    null $P5005
    set $P5006, $P5005
  if917_end2424:
    unless_null $P5006, vivi_9182426
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9182426:
    set $P5017, $P5006
    if $P5006 goto unless916_end2422 
    unless_null _lex_param_1, fallback2431
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5008
  fallback2431:
    set fb_tmp_137, _lex_param_1
    repr_defined $I5003, fb_tmp_137
    unless $I5003 goto if920_else2429 
    set $P5009, fb_tmp_137["octints"]
    set $P5011, $P5009
    goto if920_end2430
  if920_else2429:
    null $P5010
    set $P5011, $P5010
  if920_end2430:
    unless_null $P5011, vivi_9212432
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5011, $P5012
  vivi_9212432:
    set fb_tmp_136, $P5011
    repr_defined $I5002, fb_tmp_136
    unless $I5002 goto if919_else2427 
    set $P5013, fb_tmp_136["octint"]
    set $P5015, $P5013
    goto if919_end2428
  if919_else2427:
    null $P5014
    set $P5015, $P5014
  if919_end2428:
    unless_null $P5015, vivi_9222433
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5015, $P5016
  vivi_9222433:
    set $P5017, $P5015
  unless916_end2422:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 728
    unless_null _lex_param_1, fallback2438
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5019
  fallback2438:
    set fb_tmp_138, _lex_param_1
    repr_defined $I5005, fb_tmp_138
    unless $I5005 goto if924_else2436 
    set $P5020, fb_tmp_138["sym"]
    set $P5022, $P5020
    goto if924_end2437
  if924_else2436:
    null $P5021
    set $P5022, $P5021
  if924_end2437:
    unless_null $P5022, vivi_9252439
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5022, $P5023
  vivi_9252439:
    set $S5001, $P5022
    iseq $I5004, $S5001, "O"
    unless $I5004 goto if923_else2434 
.annotate 'line', 729
    nqp_get_sc_object $P5024, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if923_end2435
  if923_else2434:
.annotate 'line', 731
    nqp_get_sc_object $P5026, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if923_end2435:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<x>" :subid("cuid_172_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 734
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_139 
    .local pmc fb_tmp_140 
    .local pmc fb_tmp_141 
    .local pmc fb_tmp_142 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 736
    nqp_get_sc_object $P5002, "20A8B78604B6E989C5DC1D669DAFFA35168CF57C-1382484085.68816", 68
    unless_null _lex_param_1, fallback2444
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2444:
    set fb_tmp_139, _lex_param_1
    repr_defined $I5001, fb_tmp_139
    unless $I5001 goto if927_else2442 
    set $P5004, fb_tmp_139["hexint"]
    set $P5006, $P5004
    goto if927_end2443
  if927_else2442:
    null $P5005
    set $P5006, $P5005
  if927_end2443:
    unless_null $P5006, vivi_9282445
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9282445:
    set $P5017, $P5006
    if $P5006 goto unless926_end2441 
    unless_null _lex_param_1, fallback2450
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5008
  fallback2450:
    set fb_tmp_141, _lex_param_1
    repr_defined $I5003, fb_tmp_141
    unless $I5003 goto if930_else2448 
    set $P5009, fb_tmp_141["hexints"]
    set $P5011, $P5009
    goto if930_end2449
  if930_else2448:
    null $P5010
    set $P5011, $P5010
  if930_end2449:
    unless_null $P5011, vivi_9312451
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5011, $P5012
  vivi_9312451:
    set fb_tmp_140, $P5011
    repr_defined $I5002, fb_tmp_140
    unless $I5002 goto if929_else2446 
    set $P5013, fb_tmp_140["hexint"]
    set $P5015, $P5013
    goto if929_end2447
  if929_else2446:
    null $P5014
    set $P5015, $P5014
  if929_end2447:
    unless_null $P5015, vivi_9322452
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5015, $P5016
  vivi_9322452:
    set $P5017, $P5015
  unless926_end2441:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 737
    unless_null _lex_param_1, fallback2457
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5019
  fallback2457:
    set fb_tmp_142, _lex_param_1
    repr_defined $I5005, fb_tmp_142
    unless $I5005 goto if934_else2455 
    set $P5020, fb_tmp_142["sym"]
    set $P5022, $P5020
    goto if934_end2456
  if934_else2455:
    null $P5021
    set $P5022, $P5021
  if934_end2456:
    unless_null $P5022, vivi_9352458
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5022, $P5023
  vivi_9352458:
    set $S5001, $P5022
    iseq $I5004, $S5001, "X"
    unless $I5004 goto if933_else2453 
.annotate 'line', 738
    nqp_get_sc_object $P5024, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if933_end2454
  if933_else2453:
.annotate 'line', 740
    nqp_get_sc_object $P5026, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if933_end2454:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<c>" :subid("cuid_173_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 743
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_143 
.annotate 'line', 744
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2461
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2461:
    set fb_tmp_143, _lex_param_1
    repr_defined $I5001, fb_tmp_143
    unless $I5001 goto if936_else2459 
    set $P5003, fb_tmp_143["charspec"]
    set $P5005, $P5003
    goto if936_end2460
  if936_else2459:
    null $P5004
    set $P5005, $P5004
  if936_end2460:
    unless_null $P5005, vivi_9372462
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_9372462:
    $P5007 = $P5005."ast"()
    $P5008 = $P5001."new"($P5007, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "backslash:sym<misc>" :subid("cuid_174_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 747
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 748
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    set $S5001, _lex_param_1
    $P5003 = $P5002."new"($S5001, "enumcharlist" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 749
    $P5004 = _lex_param_1."!make"($P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<s>" :subid("cuid_175_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 752
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_144 
    .local pmc fb_tmp_145 
.annotate 'line', 753
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2465
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2465:
    set fb_tmp_144, _lex_param_1
    repr_defined $I5001, fb_tmp_144
    unless $I5001 goto if938_else2463 
    set $P5003, fb_tmp_144["sym"]
    set $P5005, $P5003
    goto if938_end2464
  if938_else2463:
    null $P5004
    set $P5005, $P5004
  if938_end2464:
    unless_null $P5005, vivi_9392466
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_9392466:
    set $S5002, $P5005
    downcase $S5001, $S5002
    unless_null _lex_param_1, fallback2469
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5007
  fallback2469:
    set fb_tmp_145, _lex_param_1
    repr_defined $I5003, fb_tmp_145
    unless $I5003 goto if940_else2467 
    set $P5008, fb_tmp_145["sym"]
    set $P5010, $P5008
    goto if940_end2468
  if940_else2467:
    null $P5009
    set $P5010, $P5009
  if940_end2468:
    unless_null $P5010, vivi_9412470
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  vivi_9412470:
    set $S5003, $P5010
    isle $I5002, $S5003, "Z"
    $P5012 = $P5001."new"("cclass" :named("rxtype"), $S5001 :named("name"), $I5002 :named("negate"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<b>" :subid("cuid_176_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 757
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_146 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 758
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2473
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2473:
    set fb_tmp_146, _lex_param_1
    repr_defined $I5002, fb_tmp_146
    unless $I5002 goto if942_else2471 
    set $P5004, fb_tmp_146["sym"]
    set $P5006, $P5004
    goto if942_end2472
  if942_else2471:
    null $P5005
    set $P5006, $P5005
  if942_end2472:
    unless_null $P5006, vivi_9432474
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9432474:
    set $S5001, $P5006
    iseq $I5001, $S5001, "B"
    $P5008 = $P5002."new"("\b", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 760
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<e>" :subid("cuid_177_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 763
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_147 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 764
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2477
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2477:
    set fb_tmp_147, _lex_param_1
    repr_defined $I5002, fb_tmp_147
    unless $I5002 goto if944_else2475 
    set $P5004, fb_tmp_147["sym"]
    set $P5006, $P5004
    goto if944_end2476
  if944_else2475:
    null $P5005
    set $P5006, $P5005
  if944_end2476:
    unless_null $P5006, vivi_9452478
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9452478:
    set $S5001, $P5006
    iseq $I5001, $S5001, "E"
    $P5008 = $P5002."new"("\e", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 766
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<f>" :subid("cuid_178_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 769
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_148 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 770
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2481
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2481:
    set fb_tmp_148, _lex_param_1
    repr_defined $I5002, fb_tmp_148
    unless $I5002 goto if946_else2479 
    set $P5004, fb_tmp_148["sym"]
    set $P5006, $P5004
    goto if946_end2480
  if946_else2479:
    null $P5005
    set $P5006, $P5005
  if946_end2480:
    unless_null $P5006, vivi_9472482
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9472482:
    set $S5001, $P5006
    iseq $I5001, $S5001, "F"
    $P5008 = $P5002."new"("\f", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 772
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<h>" :subid("cuid_179_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 775
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_149 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 776
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2485
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2485:
    set fb_tmp_149, _lex_param_1
    repr_defined $I5002, fb_tmp_149
    unless $I5002 goto if948_else2483 
    set $P5004, fb_tmp_149["sym"]
    set $P5006, $P5004
    goto if948_end2484
  if948_else2483:
    null $P5005
    set $P5006, $P5005
  if948_end2484:
    unless_null $P5006, vivi_9492486
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9492486:
    set $S5001, $P5006
    iseq $I5001, $S5001, "H"
    $P5008 = $P5002."new"(utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 778
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<r>" :subid("cuid_180_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 781
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_150 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 782
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2489
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2489:
    set fb_tmp_150, _lex_param_1
    repr_defined $I5002, fb_tmp_150
    unless $I5002 goto if950_else2487 
    set $P5004, fb_tmp_150["sym"]
    set $P5006, $P5004
    goto if950_end2488
  if950_else2487:
    null $P5005
    set $P5006, $P5005
  if950_end2488:
    unless_null $P5006, vivi_9512490
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9512490:
    set $S5001, $P5006
    iseq $I5001, $S5001, "R"
    $P5008 = $P5002."new"("\r", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 784
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<t>" :subid("cuid_181_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 787
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_151 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 788
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2493
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2493:
    set fb_tmp_151, _lex_param_1
    repr_defined $I5002, fb_tmp_151
    unless $I5002 goto if952_else2491 
    set $P5004, fb_tmp_151["sym"]
    set $P5006, $P5004
    goto if952_end2492
  if952_else2491:
    null $P5005
    set $P5006, $P5005
  if952_end2492:
    unless_null $P5006, vivi_9532494
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9532494:
    set $S5001, $P5006
    iseq $I5001, $S5001, "T"
    $P5008 = $P5002."new"("\t", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 790
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<v>" :subid("cuid_182_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 793
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_152 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 794
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2497
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2497:
    set fb_tmp_152, _lex_param_1
    repr_defined $I5002, fb_tmp_152
    unless $I5002 goto if954_else2495 
    set $P5004, fb_tmp_152["sym"]
    set $P5006, $P5004
    goto if954_end2496
  if954_else2495:
    null $P5005
    set $P5006, $P5005
  if954_end2496:
    unless_null $P5006, vivi_9552498
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9552498:
    set $S5001, $P5006
    iseq $I5001, $S5001, "V"
    $P5008 = $P5002."new"(utf8:"\n\x{b}\f\r\x{85}\u2028\u2029", "enumcharlist" :named("rxtype"), $I5001 :named("negate"), _lex_param_1 :named("node"))
    set $P101, $P5008
.annotate 'line', 797
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<o>" :subid("cuid_183_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 800
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$octlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_153 
    .local pmc fb_tmp_154 
    .local pmc fb_tmp_155 
    .local pmc fb_tmp_156 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 802
    nqp_get_sc_object $P5002, "20A8B78604B6E989C5DC1D669DAFFA35168CF57C-1382484085.68816", 68
    unless_null _lex_param_1, fallback2503
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2503:
    set fb_tmp_153, _lex_param_1
    repr_defined $I5001, fb_tmp_153
    unless $I5001 goto if957_else2501 
    set $P5004, fb_tmp_153["octint"]
    set $P5006, $P5004
    goto if957_end2502
  if957_else2501:
    null $P5005
    set $P5006, $P5005
  if957_end2502:
    unless_null $P5006, vivi_9582504
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9582504:
    set $P5017, $P5006
    if $P5006 goto unless956_end2500 
    unless_null _lex_param_1, fallback2509
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5008
  fallback2509:
    set fb_tmp_155, _lex_param_1
    repr_defined $I5003, fb_tmp_155
    unless $I5003 goto if960_else2507 
    set $P5009, fb_tmp_155["octints"]
    set $P5011, $P5009
    goto if960_end2508
  if960_else2507:
    null $P5010
    set $P5011, $P5010
  if960_end2508:
    unless_null $P5011, vivi_9612510
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5011, $P5012
  vivi_9612510:
    set fb_tmp_154, $P5011
    repr_defined $I5002, fb_tmp_154
    unless $I5002 goto if959_else2505 
    set $P5013, fb_tmp_154["octint"]
    set $P5015, $P5013
    goto if959_end2506
  if959_else2505:
    null $P5014
    set $P5015, $P5014
  if959_end2506:
    unless_null $P5015, vivi_9622511
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5015, $P5016
  vivi_9622511:
    set $P5017, $P5015
  unless956_end2500:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 803
    unless_null _lex_param_1, fallback2516
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5019
  fallback2516:
    set fb_tmp_156, _lex_param_1
    repr_defined $I5005, fb_tmp_156
    unless $I5005 goto if964_else2514 
    set $P5020, fb_tmp_156["sym"]
    set $P5022, $P5020
    goto if964_end2515
  if964_else2514:
    null $P5021
    set $P5022, $P5021
  if964_end2515:
    unless_null $P5022, vivi_9652517
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5022, $P5023
  vivi_9652517:
    set $S5001, $P5022
    iseq $I5004, $S5001, "O"
    unless $I5004 goto if963_else2512 
.annotate 'line', 804
    nqp_get_sc_object $P5024, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if963_end2513
  if963_else2512:
.annotate 'line', 806
    nqp_get_sc_object $P5026, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if963_end2513:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<x>" :subid("cuid_184_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 809
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$hexlit", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_157 
    .local pmc fb_tmp_158 
    .local pmc fb_tmp_159 
    .local pmc fb_tmp_160 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 811
    nqp_get_sc_object $P5002, "20A8B78604B6E989C5DC1D669DAFFA35168CF57C-1382484085.68816", 68
    unless_null _lex_param_1, fallback2522
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2522:
    set fb_tmp_157, _lex_param_1
    repr_defined $I5001, fb_tmp_157
    unless $I5001 goto if967_else2520 
    set $P5004, fb_tmp_157["hexint"]
    set $P5006, $P5004
    goto if967_end2521
  if967_else2520:
    null $P5005
    set $P5006, $P5005
  if967_end2521:
    unless_null $P5006, vivi_9682523
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9682523:
    set $P5017, $P5006
    if $P5006 goto unless966_end2519 
    unless_null _lex_param_1, fallback2528
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5008
  fallback2528:
    set fb_tmp_159, _lex_param_1
    repr_defined $I5003, fb_tmp_159
    unless $I5003 goto if970_else2526 
    set $P5009, fb_tmp_159["hexints"]
    set $P5011, $P5009
    goto if970_end2527
  if970_else2526:
    null $P5010
    set $P5011, $P5010
  if970_end2527:
    unless_null $P5011, vivi_9712529
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5011, $P5012
  vivi_9712529:
    set fb_tmp_158, $P5011
    repr_defined $I5002, fb_tmp_158
    unless $I5002 goto if969_else2524 
    set $P5013, fb_tmp_158["hexint"]
    set $P5015, $P5013
    goto if969_end2525
  if969_else2524:
    null $P5014
    set $P5015, $P5014
  if969_end2525:
    unless_null $P5015, vivi_9722530
    nqp_get_sc_object $P5016, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5015, $P5016
  vivi_9722530:
    set $P5017, $P5015
  unless966_end2519:
    $P5018 = $P5002."ints_to_string"($P5017)
    set $P101, $P5018
.annotate 'line', 812
    unless_null _lex_param_1, fallback2535
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5019
  fallback2535:
    set fb_tmp_160, _lex_param_1
    repr_defined $I5005, fb_tmp_160
    unless $I5005 goto if974_else2533 
    set $P5020, fb_tmp_160["sym"]
    set $P5022, $P5020
    goto if974_end2534
  if974_else2533:
    null $P5021
    set $P5022, $P5021
  if974_end2534:
    unless_null $P5022, vivi_9752536
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5022, $P5023
  vivi_9752536:
    set $S5001, $P5022
    iseq $I5004, $S5001, "X"
    unless $I5004 goto if973_else2531 
.annotate 'line', 813
    nqp_get_sc_object $P5024, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5025 = $P5024."new"($P101, "enumcharlist" :named("rxtype"), 1 :named("negate"), _lex_param_1 :named("node"))
    set $P5028, $P5025
    goto if973_end2532
  if973_else2531:
.annotate 'line', 815
    nqp_get_sc_object $P5026, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5027 = $P5026."new"($P101, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P5028, $P5027
  if973_end2532:
    $P5029 = _lex_param_1."!make"($P5028)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<c>" :subid("cuid_185_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 818
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_161 
.annotate 'line', 819
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless_null _lex_param_1, fallback2539
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2539:
    set fb_tmp_161, _lex_param_1
    repr_defined $I5001, fb_tmp_161
    unless $I5001 goto if976_else2537 
    set $P5003, fb_tmp_161["charspec"]
    set $P5005, $P5003
    goto if976_end2538
  if976_else2537:
    null $P5004
    set $P5005, $P5004
  if976_end2538:
    unless_null $P5005, vivi_9772540
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_9772540:
    $P5007 = $P5005."ast"()
    $P5008 = $P5001."new"($P5007, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    $P5009 = _lex_param_1."!make"($P5008)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_backslash:sym<any>" :subid("cuid_186_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 822
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 823
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    set $S5001, _lex_param_1
    $P5003 = $P5002."new"($S5001, "literal" :named("rxtype"), _lex_param_1 :named("node"))
    set $P101, $P5003
.annotate 'line', 824
    $P5004 = _lex_param_1."!make"($P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_187_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 827
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_162 
    .local pmc fb_tmp_163 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    unless_null _lex_param_1, fallback2545
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2545:
    set fb_tmp_162, _lex_param_1
    repr_defined $I5001, fb_tmp_162
    unless $I5001 goto if979_else2543 
    set $P5003, fb_tmp_162["assertion"]
    set $P5005, $P5003
    goto if979_end2544
  if979_else2543:
    null $P5004
    set $P5005, $P5004
  if979_end2544:
    unless_null $P5005, vivi_9802546
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_9802546:
    unless $P5005 goto if978_else2541 
.annotate 'line', 829
.annotate 'line', 830
    unless_null _lex_param_1, fallback2549
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5007
  fallback2549:
    set fb_tmp_163, _lex_param_1
    repr_defined $I5002, fb_tmp_163
    unless $I5002 goto if981_else2547 
    set $P5008, fb_tmp_163["assertion"]
    set $P5010, $P5008
    goto if981_end2548
  if981_else2547:
    null $P5009
    set $P5010, $P5009
  if981_end2548:
    unless_null $P5010, vivi_9822550
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  vivi_9822550:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 831
    $P5013 = $P101."subtype"("zerowidth")
    goto if978_end2542
  if978_else2541:
.annotate 'line', 833
.annotate 'line', 834
    nqp_get_sc_object $P5014, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5015 = $P5014."new"("anchor" :named("rxtype"), "pass" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5015
  if978_end2542:
.annotate 'line', 836
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_188_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 839
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_164 
    .local pmc fb_tmp_165 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    unless_null _lex_param_1, fallback2555
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2555:
    set fb_tmp_164, _lex_param_1
    repr_defined $I5001, fb_tmp_164
    unless $I5001 goto if984_else2553 
    set $P5003, fb_tmp_164["assertion"]
    set $P5005, $P5003
    goto if984_end2554
  if984_else2553:
    null $P5004
    set $P5005, $P5004
  if984_end2554:
    unless_null $P5005, vivi_9852556
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_9852556:
    unless $P5005 goto if983_else2551 
.annotate 'line', 841
.annotate 'line', 842
    unless_null _lex_param_1, fallback2559
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5007
  fallback2559:
    set fb_tmp_165, _lex_param_1
    repr_defined $I5002, fb_tmp_165
    unless $I5002 goto if986_else2557 
    set $P5008, fb_tmp_165["assertion"]
    set $P5010, $P5008
    goto if986_end2558
  if986_else2557:
    null $P5009
    set $P5010, $P5009
  if986_end2558:
    unless_null $P5010, vivi_9872560
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  vivi_9872560:
    $P5012 = $P5010."ast"()
    set $P101, $P5012
.annotate 'line', 843
    $P5013 = $P101."negate"()
    isfalse $I5003, $P5013
    $P101."negate"($I5003)
.annotate 'line', 844
    $P5014 = $P101."subtype"("zerowidth")
    goto if983_end2552
  if983_else2551:
.annotate 'line', 846
.annotate 'line', 847
    nqp_get_sc_object $P5015, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5016 = $P5015."new"("anchor" :named("rxtype"), "fail" :named("subtype"), _lex_param_1 :named("node"))
    set $P101, $P5016
  if983_end2552:
.annotate 'line', 849
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<|>" :subid("cuid_189_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 852
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "$name", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_166 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    unless_null _lex_param_1, fallback2563
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2563:
    set fb_tmp_166, _lex_param_1
    repr_defined $I5001, fb_tmp_166
    unless $I5001 goto if988_else2561 
    set $P5004, fb_tmp_166["identifier"]
    set $P5006, $P5004
    goto if988_end2562
  if988_else2561:
    null $P5005
    set $P5006, $P5005
  if988_end2562:
    unless_null $P5006, vivi_9892564
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9892564:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P102, $P5008
    set $S5002, $P102
    iseq $I5002, $S5002, "c"
    unless $I5002 goto if990_else2565 
.annotate 'line', 855
    box $P5009, 0
    set $P101, $P5009
    goto if990_end2566
  if990_else2565:
    set $S5003, $P102
    iseq $I5003, $S5003, "w"
    box $P5017, $I5003
    set $P5016, $P5017
    unless $I5003 goto if991_end2568 
.annotate 'line', 860
.annotate 'line', 861
    nqp_get_sc_object $P5010, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 863
    nqp_get_sc_object $P5011, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
    nqp_get_sc_object $P5012, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5013 = $P5012."new"("wb" :named("value"))
    $P5014 = $P5011."new"($P5013)
    $P5015 = $P5010."new"($P5014, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"), "" :named("name"))
    set $P101, $P5015
    set $P5016, $P101
  if991_end2568:
  if990_end2566:
.annotate 'line', 865
    $P5018 = _lex_param_1."!make"($P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<method>" :subid("cuid_190_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 868
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qast", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_167 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 869
    unless_null _lex_param_1, fallback2571
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5002
  fallback2571:
    set fb_tmp_167, _lex_param_1
    repr_defined $I5001, fb_tmp_167
    unless $I5001 goto if992_else2569 
    set $P5003, fb_tmp_167["assertion"]
    set $P5005, $P5003
    goto if992_end2570
  if992_else2569:
    null $P5004
    set $P5005, $P5004
  if992_end2570:
    unless_null $P5005, vivi_9932572
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_9932572:
    $P5007 = $P5005."ast"()
    set $P101, $P5007
.annotate 'line', 870
    $P101."subtype"("method")
.annotate 'line', 871
    $P101."name"("")
.annotate 'line', 872
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_191_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 875
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5101 = 'cuid_260_1382484119.90237' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_261_1382484119.90237' 
    capture_lex $P5101 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_168 
    .local pmc fb_tmp_169 
    .local pmc fb_tmp_170 
    .local pmc fb_tmp_171 
    .local pmc fb_tmp_178 
    .local pmc fb_tmp_179 
    .local pmc fb_tmp_180 
    .local pmc fb_tmp_182 
    .local pmc fb_tmp_183 
    .local pmc fb_tmp_184 
    .local pmc fb_tmp_185 
    .local pmc fb_tmp_186 
    .local pmc fb_tmp_187 
    .local pmc fb_tmp_188 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    unless_null _lex_param_1, fallback2575
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5003
  fallback2575:
    set fb_tmp_168, _lex_param_1
    repr_defined $I5001, fb_tmp_168
    unless $I5001 goto if994_else2573 
    set $P5004, fb_tmp_168["longname"]
    set $P5006, $P5004
    goto if994_end2574
  if994_else2573:
    null $P5005
    set $P5006, $P5005
  if994_end2574:
    unless_null $P5006, vivi_9952576
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_9952576:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
    unless_null _lex_param_1, fallback2581
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5009
  fallback2581:
    set fb_tmp_169, _lex_param_1
    repr_defined $I5002, fb_tmp_169
    unless $I5002 goto if997_else2579 
    set $P5010, fb_tmp_169["assertion"]
    set $P5012, $P5010
    goto if997_end2580
  if997_else2579:
    null $P5011
    set $P5012, $P5011
  if997_end2580:
    unless_null $P5012, vivi_9982582
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5012, $P5013
  vivi_9982582:
    unless $P5012 goto if996_else2577 
.annotate 'line', 878
.annotate 'line', 879
    unless_null _lex_param_1, fallback2587
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5014
  fallback2587:
    set fb_tmp_171, _lex_param_1
    repr_defined $I5004, fb_tmp_171
    unless $I5004 goto if1000_else2585 
    set $P5015, fb_tmp_171["assertion"]
    set $P5017, $P5015
    goto if1000_end2586
  if1000_else2585:
    null $P5016
    set $P5017, $P5016
  if1000_end2586:
    unless_null $P5017, vivi_10012588
    nqp_get_sc_object $P5018, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5017, $P5018
  vivi_10012588:
    set fb_tmp_170, $P5017
    repr_defined $I5003, fb_tmp_170
    unless $I5003 goto if999_else2583 
    set $P5019, fb_tmp_170[0]
    set $P5021, $P5019
    goto if999_end2584
  if999_else2583:
    null $P5020
    set $P5021, $P5020
  if999_end2584:
    unless_null $P5021, vivi_10022589
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5021, $P5022
  vivi_10022589:
    $P5023 = $P5021."ast"()
    set $P102, $P5023
.annotate 'line', 880
    nqp_decontainerize $P5024, _lex_param_0
    $P5025 = $P5024."subrule_alias"($P102, $P101)
    goto if996_end2578
  if996_else2577:
    set $S5002, $P101
    iseq $I5005, $S5002, "sym"
    unless $I5005 goto if1003_else2590 
    .const 'Sub' $P5026 = 'cuid_260_1382484119.90237' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5099, $P5027
    goto if1003_end2591
  if1003_else2590:
.annotate 'line', 891
.annotate 'line', 892
    nqp_get_sc_object $P5028, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 894
    nqp_get_sc_object $P5029, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
    nqp_get_sc_object $P5030, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5031 = $P5030."new"($P101 :named("value"))
    $P5032 = $P5029."new"($P5031)
    $P5033 = $P5028."new"($P5032, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5033
    unless_null _lex_param_1, fallback2622
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5034
  fallback2622:
    set fb_tmp_178, _lex_param_1
    repr_defined $I5006, fb_tmp_178
    unless $I5006 goto if1021_else2620 
    set $P5035, fb_tmp_178["arglist"]
    set $P5037, $P5035
    goto if1021_end2621
  if1021_else2620:
    null $P5036
    set $P5037, $P5036
  if1021_end2621:
    unless_null $P5037, vivi_10222623
    nqp_get_sc_object $P5038, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5037, $P5038
  vivi_10222623:
    unless $P5037 goto if1020_else2618 
.annotate 'line', 895
.annotate 'line', 896
    unless_null _lex_param_1, fallback2628
    nqp_get_sc_object $P5042, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5042
  fallback2628:
    set fb_tmp_180, _lex_param_1
    repr_defined $I5008, fb_tmp_180
    unless $I5008 goto if1024_else2626 
    set $P5043, fb_tmp_180["arglist"]
    set $P5045, $P5043
    goto if1024_end2627
  if1024_else2626:
    null $P5044
    set $P5045, $P5044
  if1024_end2627:
    unless_null $P5045, vivi_10252629
    nqp_get_sc_object $P5046, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5045, $P5046
  vivi_10252629:
    set fb_tmp_179, $P5045
    repr_defined $I5007, fb_tmp_179
    unless $I5007 goto if1023_else2624 
    set $P5047, fb_tmp_179[0]
    set $P5049, $P5047
    goto if1023_end2625
  if1023_else2624:
    null $P5048
    set $P5049, $P5048
  if1023_end2625:
    unless_null $P5049, vivi_10262630
    nqp_get_sc_object $P5050, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5049, $P5050
  vivi_10262630:
    $P5051 = $P5049."ast"()
    $P5052 = $P5051."list"()
    set $P5039, $P5052
    iter $P5041, $P5052
  for_next2634:
    unless $P5041, for_done2636
    shift $P5054, $P5041
  for_redo2635:
    .const 'Sub' $P5053 = 'cuid_261_1382484119.90237' 
    capture_lex $P5053
    $P5039 = $P5053($P5054)
    goto for_next2634
  for_done2636:
    set $P5098, $P5039
    goto if1020_end2619
  if1020_else2618:
    unless_null _lex_param_1, fallback2641
    nqp_get_sc_object $P5055, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5055
  fallback2641:
    set fb_tmp_182, _lex_param_1
    repr_defined $I5009, fb_tmp_182
    unless $I5009 goto if1030_else2639 
    set $P5056, fb_tmp_182["nibbler"]
    set $P5058, $P5056
    goto if1030_end2640
  if1030_else2639:
    null $P5057
    set $P5058, $P5057
  if1030_end2640:
    unless_null $P5058, vivi_10312642
    nqp_get_sc_object $P5059, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5058, $P5059
  vivi_10312642:
    set $P5097, $P5058
    unless $P5058 goto if1029_end2638 
.annotate 'line', 898
    set $S5003, $P101
    iseq $I5010, $S5003, "after"
    unless $I5010 goto if1032_else2643 
.annotate 'line', 900
    set fb_tmp_183, $P102
    repr_defined $I5011, fb_tmp_183
    unless $I5011 goto if1033_else2645 
    set $P5060, fb_tmp_183[0]
    set $P5062, $P5060
    goto if1033_end2646
  if1033_else2645:
    null $P5061
    set $P5062, $P5061
  if1033_end2646:
    unless_null $P5062, vivi_10342647
    nqp_get_sc_object $P5063, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5062, $P5063
  vivi_10342647:
    nqp_decontainerize $P5064, _lex_param_0
    nqp_decontainerize $P5065, _lex_param_0
    unless_null _lex_param_1, fallback2652
    nqp_get_sc_object $P5066, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5066
  fallback2652:
    set fb_tmp_185, _lex_param_1
    repr_defined $I5013, fb_tmp_185
    unless $I5013 goto if1036_else2650 
    set $P5067, fb_tmp_185["nibbler"]
    set $P5069, $P5067
    goto if1036_end2651
  if1036_else2650:
    null $P5068
    set $P5069, $P5068
  if1036_end2651:
    unless_null $P5069, vivi_10372653
    nqp_get_sc_object $P5070, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5069, $P5070
  vivi_10372653:
    set fb_tmp_184, $P5069
    repr_defined $I5012, fb_tmp_184
    unless $I5012 goto if1035_else2648 
    set $P5071, fb_tmp_184[0]
    set $P5073, $P5071
    goto if1035_end2649
  if1035_else2648:
    null $P5072
    set $P5073, $P5072
  if1035_end2649:
    unless_null $P5073, vivi_10382654
    nqp_get_sc_object $P5074, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5073, $P5074
  vivi_10382654:
    $P5075 = $P5073."ast"()
    $P5076 = $P5065."flip_ast"($P5075)
    $P5077 = $P5064."qbuildsub"($P5076, 1 :named("anon"), 1 :named("addself"))
    $P5078 = $P5062."push"($P5077)
    set $P5096, $P5078
    goto if1032_end2644
  if1032_else2643:
.annotate 'line', 901
    set fb_tmp_186, $P102
    repr_defined $I5014, fb_tmp_186
    unless $I5014 goto if1039_else2655 
    set $P5079, fb_tmp_186[0]
    set $P5081, $P5079
    goto if1039_end2656
  if1039_else2655:
    null $P5080
    set $P5081, $P5080
  if1039_end2656:
    unless_null $P5081, vivi_10402657
    nqp_get_sc_object $P5082, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5081, $P5082
  vivi_10402657:
    nqp_decontainerize $P5083, _lex_param_0
    unless_null _lex_param_1, fallback2662
    nqp_get_sc_object $P5084, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5084
  fallback2662:
    set fb_tmp_188, _lex_param_1
    repr_defined $I5016, fb_tmp_188
    unless $I5016 goto if1042_else2660 
    set $P5085, fb_tmp_188["nibbler"]
    set $P5087, $P5085
    goto if1042_end2661
  if1042_else2660:
    null $P5086
    set $P5087, $P5086
  if1042_end2661:
    unless_null $P5087, vivi_10432663
    nqp_get_sc_object $P5088, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5087, $P5088
  vivi_10432663:
    set fb_tmp_187, $P5087
    repr_defined $I5015, fb_tmp_187
    unless $I5015 goto if1041_else2658 
    set $P5089, fb_tmp_187[0]
    set $P5091, $P5089
    goto if1041_end2659
  if1041_else2658:
    null $P5090
    set $P5091, $P5090
  if1041_end2659:
    unless_null $P5091, vivi_10442664
    nqp_get_sc_object $P5092, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5091, $P5092
  vivi_10442664:
    $P5093 = $P5091."ast"()
    $P5094 = $P5083."qbuildsub"($P5093, 1 :named("anon"), 1 :named("addself"))
    $P5095 = $P5081."push"($P5094)
    set $P5096, $P5095
  if1032_end2644:
    set $P5097, $P5096
  if1029_end2638:
    set $P5098, $P5097
  if1020_end2619:
    set $P5099, $P5098
  if1003_end2591:
  if996_end2578:
.annotate 'line', 904
    $P5100 = _lex_param_1."!make"($P102)
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_260_1382484119.90237") :anon :lex :outer("cuid_191_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 882
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    .local pmc fb_tmp_172 
    .local pmc fb_tmp_173 
    .local pmc pkg_viv_tmp_12 
    .local pmc fb_tmp_174 
    .local pmc fb_tmp_175 
    .local pmc pkg_viv_tmp_13 
    .local pmc fb_tmp_176 
    .local pmc fb_tmp_177 
    .local pmc pkg_viv_tmp_14 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*RX"
    unless_null $P5003, fallback2594
    nqp_get_sc_object $P5005, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5004, $P5005
    set pkg_viv_tmp_12, $P5004
    set fb_tmp_173, pkg_viv_tmp_12
    repr_defined $I5003, fb_tmp_173
    unless $I5003 goto if1005_else2595 
    set $P5006, fb_tmp_173["%RX"]
    set $P5008, $P5006
    goto if1005_end2596
  if1005_else2595:
    null $P5007
    set $P5008, $P5007
  if1005_end2596:
    unless_null $P5008, vivi_10062597
    new $P5009, 'Hash'
    set pkg_viv_tmp_12["%RX"], $P5009
    set $P5008, $P5009
  vivi_10062597:
    unless_null $P5008, vivi_10072598
    die "Contextual %*RX not found"
    box $P5010, "Contextual %*RX not found"
    set $P5008, $P5010
  vivi_10072598:
    set $P5003, $P5008
  fallback2594:
    set fb_tmp_172, $P5003
    repr_defined $I5002, fb_tmp_172
    unless $I5002 goto if1004_else2592 
    set $P5011, fb_tmp_172["name"]
    set $P5013, $P5011
    goto if1004_end2593
  if1004_else2592:
    null $P5012
    set $P5013, $P5012
  if1004_end2593:
    unless_null $P5013, vivi_10082599
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5013, $P5014
  vivi_10082599:
    set $S5001, $P5013
    index $I5001, $S5001, ":sym<", 0
    box $P5015, $I5001
    set $P101, $P5015
    set $N5001, $P101
    set $N5002, 0
    islt $I5004, $N5001, $N5002
    unless $I5004 goto if1009_end2601 
    find_dynamic_lex $P5016, "%*RX"
    unless_null $P5016, fallback2604
    nqp_get_sc_object $P5018, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5017, $P5018
    set pkg_viv_tmp_13, $P5017
    set fb_tmp_175, pkg_viv_tmp_13
    repr_defined $I5007, fb_tmp_175
    unless $I5007 goto if1011_else2605 
    set $P5019, fb_tmp_175["%RX"]
    set $P5021, $P5019
    goto if1011_end2606
  if1011_else2605:
    null $P5020
    set $P5021, $P5020
  if1011_end2606:
    unless_null $P5021, vivi_10122607
    new $P5022, 'Hash'
    set pkg_viv_tmp_13["%RX"], $P5022
    set $P5021, $P5022
  vivi_10122607:
    unless_null $P5021, vivi_10132608
    die "Contextual %*RX not found"
    box $P5023, "Contextual %*RX not found"
    set $P5021, $P5023
  vivi_10132608:
    set $P5016, $P5021
  fallback2604:
    set fb_tmp_174, $P5016
    repr_defined $I5006, fb_tmp_174
    unless $I5006 goto if1010_else2602 
    set $P5024, fb_tmp_174["name"]
    set $P5026, $P5024
    goto if1010_end2603
  if1010_else2602:
    null $P5025
    set $P5026, $P5025
  if1010_end2603:
    unless_null $P5026, vivi_10142609
    nqp_get_sc_object $P5027, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5026, $P5027
  vivi_10142609:
    set $S5002, $P5026
    index $I5005, $S5002, utf8:":sym\x{ab}", 0
    box $P5028, $I5005
    set $P101, $P5028
  if1009_end2601:
    find_dynamic_lex $P5029, "%*RX"
    unless_null $P5029, fallback2612
    nqp_get_sc_object $P5031, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5030, $P5031
    set pkg_viv_tmp_14, $P5030
    set fb_tmp_177, pkg_viv_tmp_14
    repr_defined $I5009, fb_tmp_177
    unless $I5009 goto if1016_else2613 
    set $P5032, fb_tmp_177["%RX"]
    set $P5034, $P5032
    goto if1016_end2614
  if1016_else2613:
    null $P5033
    set $P5034, $P5033
  if1016_end2614:
    unless_null $P5034, vivi_10172615
    new $P5035, 'Hash'
    set pkg_viv_tmp_14["%RX"], $P5035
    set $P5034, $P5035
  vivi_10172615:
    unless_null $P5034, vivi_10182616
    die "Contextual %*RX not found"
    box $P5036, "Contextual %*RX not found"
    set $P5034, $P5036
  vivi_10182616:
    set $P5029, $P5034
  fallback2612:
    set fb_tmp_176, $P5029
    repr_defined $I5008, fb_tmp_176
    unless $I5008 goto if1015_else2610 
    set $P5037, fb_tmp_176["name"]
    set $P5039, $P5037
    goto if1015_end2611
  if1015_else2610:
    null $P5038
    set $P5039, $P5038
  if1015_end2611:
    unless_null $P5039, vivi_10192617
    nqp_get_sc_object $P5040, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5039, $P5040
  vivi_10192617:
    set $S5004, $P5039
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5010, $N5003
    substr $S5003, $S5004, $I5010
    box $P5041, $S5003
    set $P102, $P5041
    set $S5006, $P102
    set $S5007, $P102
    length $I5012, $S5007
    sub $I5011, $I5012, 1
    substr $S5005, $S5006, 0, $I5011
    box $P5042, $S5005
    set $P102, $P5042
.annotate 'line', 888
    nqp_get_sc_object $P5043, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_lex $P5044, "$/"
.annotate 'line', 889
    nqp_get_sc_object $P5045, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_lex $P5046, "$/"
    $P5047 = $P5045."new"($P102, "literal" :named("rxtype"), $P5046 :named("node"))
    $P5048 = $P5043."new"($P5047, "sym" :named("name"), "subcapture" :named("rxtype"), $P5044 :named("node"))
    store_lex "$qast", $P5048
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_261_1382484119.90237") :anon :lex :outer("cuid_191_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 896
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_181 
    find_lex $P5001, "$qast"
    set fb_tmp_181, $P5001
    repr_defined $I5001, fb_tmp_181
    unless $I5001 goto if1027_else2631 
    set $P5002, fb_tmp_181[0]
    set $P5004, $P5002
    goto if1027_end2632
  if1027_else2631:
    null $P5003
    set $P5004, $P5003
  if1027_end2632:
    unless_null $P5004, vivi_10282633
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_10282633:
    $P5006 = $P5004."push"(_lex_param_0)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<[>" :subid("cuid_192_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 907
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_262_1382484119.90237' 
    capture_lex $P5030 
    .lex "$clist", $P101 
    .lex "$qast", $P102 
    .lex "$i", $P103 
    .lex "$n", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_189 
    .local pmc fb_tmp_190 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P104, $P5004
    unless_null _lex_param_1, fallback2667
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5005
  fallback2667:
    set fb_tmp_189, _lex_param_1
    repr_defined $I5001, fb_tmp_189
    unless $I5001 goto if1045_else2665 
    set $P5006, fb_tmp_189["cclass_elem"]
    set $P5008, $P5006
    goto if1045_end2666
  if1045_else2665:
    null $P5007
    set $P5008, $P5007
  if1045_end2666:
    unless_null $P5008, vivi_10462668
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5008, $P5009
  vivi_10462668:
    set $P101, $P5008
.annotate 'line', 909
    set fb_tmp_190, $P101
    repr_defined $I5002, fb_tmp_190
    unless $I5002 goto if1047_else2669 
    set $P5010, fb_tmp_190[0]
    set $P5012, $P5010
    goto if1047_end2670
  if1047_else2669:
    null $P5011
    set $P5012, $P5011
  if1047_end2670:
    unless_null $P5012, vivi_10482671
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5012, $P5013
  vivi_10482671:
    $P5014 = $P5012."ast"()
    set $P102, $P5014
.annotate 'line', 910
    $P5015 = $P102."negate"()
    set $P5017, $P5015
    unless $P5015 goto if1050_end2675 
    $P5016 = $P102."rxtype"()
    set $S5001, $P5016
    iseq $I5003, $S5001, "subrule"
    box $P5018, $I5003
    set $P5017, $P5018
  if1050_end2675:
    unless $P5017 goto if1049_end2673 
.annotate 'line', 911
    $P102."subtype"("zerowidth")
.annotate 'line', 912
    nqp_get_sc_object $P5019, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 914
    nqp_get_sc_object $P5020, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5021 = $P5020."new"("cclass" :named("rxtype"), "." :named("name"))
    $P5022 = $P5019."new"($P102, $P5021, "concat" :named("rxtype"), _lex_param_1 :named("node"))
    set $P102, $P5022
  if1049_end2673:
    box $P5023, 1
    set $P103, $P5023
    set $N5001, $P101
    box $P5024, $N5001
    set $P104, $P5024
  while1051_test2676:
    set $N5002, $P103
    set $N5003, $P104
    islt $I5004, $N5002, $N5003
    box $P5028, $I5004
    set $P5027, $P5028
    unless $I5004 goto while1051_done2680 
  while1051_redo2678:
    .const 'Sub' $P5025 = 'cuid_262_1382484119.90237' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while1051_test2676 
  while1051_done2680:
.annotate 'line', 932
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_262_1382484119.90237") :anon :lex :outer("cuid_192_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 919
    .lex "$ast", $P101 
    .local pmc fb_tmp_191 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 920
    find_lex $P5002, "$clist"
    set fb_tmp_191, $P5002
    repr_defined $I5001, fb_tmp_191
    unless $I5001 goto if1052_else2681 
    find_lex $P5004, "$i"
    set $I5002, $P5004
    set $P5003, fb_tmp_191[$I5002]
    set $P5006, $P5003
    goto if1052_end2682
  if1052_else2681:
    null $P5005
    set $P5006, $P5005
  if1052_end2682:
    unless_null $P5006, vivi_10532683
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_10532683:
    $P5008 = $P5006."ast"()
    set $P101, $P5008
.annotate 'line', 921
    $P5009 = $P101."negate"()
    set $P5012, $P5009
    if $P5009 goto unless1055_end2687 
    $P5010 = $P101."rxtype"()
    set $S5001, $P5010
    iseq $I5003, $S5001, "cclass"
    set $I5005, $I5003
    unless $I5003 goto if1056_end2689 
    $P5011 = $P101."node"()
    set $S5002, $P5011
    isle $I5004, $S5002, "Z"
    set $I5005, $I5004
  if1056_end2689:
    box $P5013, $I5005
    set $P5012, $P5013
  unless1055_end2687:
    unless $P5012 goto if1054_else2684 
.annotate 'line', 922
    $P101."subtype"("zerowidth")
.annotate 'line', 923
    nqp_get_sc_object $P5014, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_lex $P5015, "$/"
.annotate 'line', 924
    nqp_get_sc_object $P5016, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5017 = $P5016."new"($P101, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
    find_lex $P5018, "$qast"
    $P5019 = $P5014."new"($P5017, $P5018, "concat" :named("rxtype"), $P5015 :named("node"), "zerowidth" :named("subtype"), 1 :named("negate"))
    store_lex "$qast", $P5019
    goto if1054_end2685
  if1054_else2684:
.annotate 'line', 927
.annotate 'line', 928
    nqp_get_sc_object $P5020, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_lex $P5021, "$qast"
    find_lex $P5022, "$/"
    $P5023 = $P5020."new"($P5021, $P101, "altseq" :named("rxtype"), $P5022 :named("node"))
    store_lex "$qast", $P5023
  if1054_end2685:
    find_lex $P5024, "$i"
    set tmp_2, $P5024
    set $N5002, tmp_2
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5025, $N5001
    store_lex "$i", $P5025
    .return (tmp_2) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_193_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 935
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_192 
    .local pmc fb_tmp_193 
    .local pmc fb_tmp_194 
.annotate 'line', 936
    unless_null _lex_param_1, fallback2694
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback2694:
    set fb_tmp_192, _lex_param_1
    repr_defined $I5001, fb_tmp_192
    unless $I5001 goto if1058_else2692 
    set $P5002, fb_tmp_192["quote_EXPR"]
    set $P5004, $P5002
    goto if1058_end2693
  if1058_else2692:
    null $P5003
    set $P5004, $P5003
  if1058_end2693:
    unless_null $P5004, vivi_10592695
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_10592695:
    unless $P5004 goto if1057_else2690 
.annotate 'line', 937
    unless_null _lex_param_1, fallback2698
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5006
  fallback2698:
    set fb_tmp_193, _lex_param_1
    repr_defined $I5002, fb_tmp_193
    unless $I5002 goto if1060_else2696 
    set $P5007, fb_tmp_193["quote_EXPR"]
    set $P5009, $P5007
    goto if1060_end2697
  if1060_else2696:
    null $P5008
    set $P5009, $P5008
  if1060_end2697:
    unless_null $P5009, vivi_10612699
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_10612699:
    $P5011 = $P5009."ast"()
    set $P5019, $P5011
    goto if1057_end2691
  if1057_else2690:
.annotate 'line', 938
    nqp_get_sc_object $P5012, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 49
    unless_null _lex_param_1, fallback2702
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5013
  fallback2702:
    set fb_tmp_194, _lex_param_1
    repr_defined $I5003, fb_tmp_194
    unless $I5003 goto if1062_else2700 
    set $P5014, fb_tmp_194["val"]
    set $P5016, $P5014
    goto if1062_end2701
  if1062_else2700:
    null $P5015
    set $P5016, $P5015
  if1062_end2701:
    unless_null $P5016, vivi_10632703
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5016, $P5017
  vivi_10632703:
    set $N5001, $P5016
    $P5018 = $P5012."new"($N5001 :named("value"))
    set $P5019, $P5018
  if1057_end2691:
    $P5020 = _lex_param_1."!make"($P5019)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_194_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 941
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5015 = 'cuid_263_1382484119.90237' 
    capture_lex $P5015 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_195 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 942
    nqp_get_sc_object $P5002, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 86
    $P5003 = $P5002."new"("list" :named("op"))
    set $P101, $P5003
    unless_null _lex_param_1, fallback2706
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5007
  fallback2706:
    set fb_tmp_195, _lex_param_1
    repr_defined $I5001, fb_tmp_195
    unless $I5001 goto if1064_else2704 
    set $P5008, fb_tmp_195["arg"]
    set $P5010, $P5008
    goto if1064_end2705
  if1064_else2704:
    null $P5009
    set $P5010, $P5009
  if1064_end2705:
    unless_null $P5010, vivi_10652707
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  vivi_10652707:
    set $P5004, $P5010
    iter $P5006, $P5010
  for_next2708:
    unless $P5006, for_done2710
    shift $P5013, $P5006
  for_redo2709:
    .const 'Sub' $P5012 = 'cuid_263_1382484119.90237' 
    capture_lex $P5012
    $P5004 = $P5012($P5013)
    goto for_next2708
  for_done2710:
.annotate 'line', 944
    $P5014 = _lex_param_1."!make"($P101)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_263_1382484119.90237") :anon :lex :outer("cuid_194_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 943
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "cclass_elem" :subid("cuid_195_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 947
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_264_1382484119.90237' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_265_1382484119.90237' 
    capture_lex $P5022 
    .const 'Sub' $P5022 = 'cuid_271_1382484119.90237' 
    capture_lex $P5022 
    .lex "$str", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_196 
    .local pmc fb_tmp_199 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    box $P5003, ""
    set $P101, $P5003
    unless_null _lex_param_1, fallback2715
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5004
  fallback2715:
    set fb_tmp_196, _lex_param_1
    repr_defined $I5001, fb_tmp_196
    unless $I5001 goto if1067_else2713 
    set $P5005, fb_tmp_196["name"]
    set $P5007, $P5005
    goto if1067_end2714
  if1067_else2713:
    null $P5006
    set $P5007, $P5006
  if1067_end2714:
    unless_null $P5007, vivi_10682716
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_10682716:
    unless $P5007 goto if1066_else2711 
    .const 'Sub' $P5009 = 'cuid_264_1382484119.90237' 
    capture_lex $P5009
    $P5010 = $P5009()
    goto if1066_end2712
  if1066_else2711:
    unless_null _lex_param_1, fallback2729
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5011
  fallback2729:
    set fb_tmp_199, _lex_param_1
    repr_defined $I5002, fb_tmp_199
    unless $I5002 goto if1074_else2727 
    set $P5012, fb_tmp_199["uniprop"]
    set $P5014, $P5012
    goto if1074_end2728
  if1074_else2727:
    null $P5013
    set $P5014, $P5013
  if1074_end2728:
    unless_null $P5014, vivi_10752730
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5014, $P5015
  vivi_10752730:
    unless $P5014 goto if1073_else2725 
    .const 'Sub' $P5016 = 'cuid_265_1382484119.90237' 
    capture_lex $P5016
    $P5017 = $P5016()
    set $P5020, $P5017
    goto if1073_end2726
  if1073_else2725:
    .const 'Sub' $P5018 = 'cuid_271_1382484119.90237' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1073_end2726:
  if1066_end2712:
.annotate 'line', 1027
    $P5021 = _lex_param_1."!make"($P102)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_264_1382484119.90237") :anon :lex :outer("cuid_195_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 950
    .lex "$name", $P101 
    .local pmc fb_tmp_197 
    .local pmc fb_tmp_198 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2719
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5002, $P5003
  fallback2719:
    set fb_tmp_197, $P5002
    repr_defined $I5001, fb_tmp_197
    unless $I5001 goto if1069_else2717 
    set $P5004, fb_tmp_197["name"]
    set $P5006, $P5004
    goto if1069_end2718
  if1069_else2717:
    null $P5005
    set $P5006, $P5005
  if1069_end2718:
    unless_null $P5006, vivi_10702720
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_10702720:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 952
    nqp_get_sc_object $P5009, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2723
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  fallback2723:
    set fb_tmp_198, $P5010
    repr_defined $I5003, fb_tmp_198
    unless $I5003 goto if1071_else2721 
    set $P5012, fb_tmp_198["sign"]
    set $P5014, $P5012
    goto if1071_end2722
  if1071_else2721:
    null $P5013
    set $P5014, $P5013
  if1071_end2722:
    unless_null $P5014, vivi_10722724
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5014, $P5015
  vivi_10722724:
    set $S5002, $P5014
    iseq $I5002, $S5002, "-"
    find_lex $P5016, "$/"
.annotate 'line', 954
    nqp_get_sc_object $P5017, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
    nqp_get_sc_object $P5018, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    $P5019 = $P5018."new"($P101 :named("value"))
    $P5020 = $P5017."new"($P5019)
    $P5021 = $P5009."new"($P5020, "subrule" :named("rxtype"), "method" :named("subtype"), $I5002 :named("negate"), $P5016 :named("node"))
    store_lex "$qast", $P5021
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_265_1382484119.90237") :anon :lex :outer("cuid_195_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 956
    .lex "$uniprop", $P101 
    .local pmc fb_tmp_200 
    .local pmc fb_tmp_201 
    .local pmc fb_tmp_202 
    .local pmc fb_tmp_203 
    .local pmc fb_tmp_204 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    find_lex $P5002, "$/"
    unless_null $P5002, fallback2733
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5002, $P5003
  fallback2733:
    set fb_tmp_200, $P5002
    repr_defined $I5001, fb_tmp_200
    unless $I5001 goto if1076_else2731 
    set $P5004, fb_tmp_200["uniprop"]
    set $P5006, $P5004
    goto if1076_end2732
  if1076_else2731:
    null $P5005
    set $P5006, $P5005
  if1076_end2732:
    unless_null $P5006, vivi_10772734
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_10772734:
    set $S5001, $P5006
    box $P5008, $S5001
    set $P101, $P5008
.annotate 'line', 958
    nqp_get_sc_object $P5009, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2741
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  fallback2741:
    set fb_tmp_201, $P5010
    repr_defined $I5003, fb_tmp_201
    unless $I5003 goto if1080_else2739 
    set $P5012, fb_tmp_201["sign"]
    set $P5014, $P5012
    goto if1080_end2740
  if1080_else2739:
    null $P5013
    set $P5014, $P5013
  if1080_end2740:
    unless_null $P5014, vivi_10812742
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5014, $P5015
  vivi_10812742:
    set $S5002, $P5014
    iseq $I5002, $S5002, "-"
    set $I5006, $I5002
    unless $I5002 goto if1079_end2738 
    find_lex $P5016, "$/"
    unless_null $P5016, fallback2745
    nqp_get_sc_object $P5017, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5016, $P5017
  fallback2745:
    set fb_tmp_202, $P5016
    repr_defined $I5005, fb_tmp_202
    unless $I5005 goto if1082_else2743 
    set $P5018, fb_tmp_202["invert"]
    set $P5020, $P5018
    goto if1082_end2744
  if1082_else2743:
    null $P5019
    set $P5020, $P5019
  if1082_end2744:
    unless_null $P5020, vivi_10832746
    nqp_get_sc_object $P5021, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5020, $P5021
  vivi_10832746:
    set $S5003, $P5020
    isne $I5004, $S5003, "!"
    set $I5006, $I5004
  if1079_end2738:
    set $I5012, $I5006
    if $I5006 goto unless1078_end2736 
    find_lex $P5022, "$/"
    unless_null $P5022, fallback2751
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5022, $P5023
  fallback2751:
    set fb_tmp_203, $P5022
    repr_defined $I5008, fb_tmp_203
    unless $I5008 goto if1085_else2749 
    set $P5024, fb_tmp_203["sign"]
    set $P5026, $P5024
    goto if1085_end2750
  if1085_else2749:
    null $P5025
    set $P5026, $P5025
  if1085_end2750:
    unless_null $P5026, vivi_10862752
    nqp_get_sc_object $P5027, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5026, $P5027
  vivi_10862752:
    set $S5004, $P5026
    isne $I5007, $S5004, "-"
    set $I5011, $I5007
    unless $I5007 goto if1084_end2748 
    find_lex $P5028, "$/"
    unless_null $P5028, fallback2755
    nqp_get_sc_object $P5029, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5028, $P5029
  fallback2755:
    set fb_tmp_204, $P5028
    repr_defined $I5010, fb_tmp_204
    unless $I5010 goto if1087_else2753 
    set $P5030, fb_tmp_204["invert"]
    set $P5032, $P5030
    goto if1087_end2754
  if1087_else2753:
    null $P5031
    set $P5032, $P5031
  if1087_end2754:
    unless_null $P5032, vivi_10882756
    nqp_get_sc_object $P5033, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5032, $P5033
  vivi_10882756:
    set $S5005, $P5032
    iseq $I5009, $S5005, "!"
    set $I5011, $I5009
  if1084_end2748:
    set $I5012, $I5011
  unless1078_end2736:
    find_lex $P5034, "$/"
    $P5035 = $P5009."new"($P101, "uniprop" :named("rxtype"), $I5012 :named("negate"), $P5034 :named("node"))
    store_lex "$qast", $P5035
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_271_1382484119.90237") :anon :lex :outer("cuid_195_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 962
    .const 'Sub' $P5046 = 'cuid_268_1382484119.90237' 
    capture_lex $P5046 
    .lex "@alts", $P101 
    .local pmc fb_tmp_205 
    .local pmc fb_tmp_237 
    .local pmc fb_tmp_238 
    .local pmc fb_tmp_239 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback2759
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  fallback2759:
    set fb_tmp_205, $P5005
    repr_defined $I5001, fb_tmp_205
    unless $I5001 goto if1089_else2757 
    set $P5007, fb_tmp_205["charspec"]
    set $P5009, $P5007
    goto if1089_end2758
  if1089_else2757:
    null $P5008
    set $P5009, $P5008
  if1089_end2758:
    unless_null $P5009, vivi_10902760
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_10902760:
    set $P5002, $P5009
    iter $P5004, $P5009
  for_next2907:
    unless $P5004, for_done2909
    shift $P5012, $P5004
  for_redo2908:
    .const 'Sub' $P5011 = 'cuid_268_1382484119.90237' 
    capture_lex $P5011
    $P5002 = $P5011($P5012)
    goto for_next2907
  for_done2909:
    find_lex $P5013, "$str"
    set $S5001, $P5013
    length $I5002, $S5001
    unless $I5002 goto if1176_end2911 
.annotate 'line', 1018
    nqp_get_sc_object $P5014, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_lex $P5015, "$str"
    find_lex $P5016, "$/"
    find_lex $P5017, "$/"
    unless_null $P5017, fallback2914
    nqp_get_sc_object $P5018, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5017, $P5018
  fallback2914:
    set fb_tmp_237, $P5017
    repr_defined $I5004, fb_tmp_237
    unless $I5004 goto if1177_else2912 
    set $P5019, fb_tmp_237["sign"]
    set $P5021, $P5019
    goto if1177_end2913
  if1177_else2912:
    null $P5020
    set $P5021, $P5020
  if1177_end2913:
    unless_null $P5021, vivi_11782915
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5021, $P5022
  vivi_11782915:
    set $S5002, $P5021
    iseq $I5003, $S5002, "-"
    $P5023 = $P5014."new"($P5015, "enumcharlist" :named("rxtype"), $P5016 :named("node"), $I5003 :named("negate"))
    $P5024 = $P101."push"($P5023)
  if1176_end2911:
    set $N5001, $P101
    set $N5002, 1
    iseq $I5005, $N5001, $N5002
    unless $I5005 goto if1179_else2916 
    set fb_tmp_238, $P101
    repr_defined $I5006, fb_tmp_238
    unless $I5006 goto if1180_else2918 
    set $P5025, fb_tmp_238[0]
    set $P5027, $P5025
    goto if1180_end2919
  if1180_else2918:
    null $P5026
    set $P5027, $P5026
  if1180_end2919:
    unless_null $P5027, vivi_11812920
    nqp_get_sc_object $P5028, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5027, $P5028
  vivi_11812920:
    set $P5045, $P5027
    goto if1179_end2917
  if1179_else2916:
    find_lex $P5029, "$/"
    unless_null $P5029, fallback2925
    nqp_get_sc_object $P5030, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5029, $P5030
  fallback2925:
    set fb_tmp_239, $P5029
    repr_defined $I5008, fb_tmp_239
    unless $I5008 goto if1183_else2923 
    set $P5031, fb_tmp_239["sign"]
    set $P5033, $P5031
    goto if1183_end2924
  if1183_else2923:
    null $P5032
    set $P5033, $P5032
  if1183_end2924:
    unless_null $P5033, vivi_11842926
    nqp_get_sc_object $P5034, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5033, $P5034
  vivi_11842926:
    set $S5003, $P5033
    iseq $I5007, $S5003, "-"
    unless $I5007 goto if1182_else2921 
.annotate 'line', 1022
    nqp_get_sc_object $P5035, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_lex $P5036, "$/"
.annotate 'line', 1023
    nqp_get_sc_object $P5037, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5038 = $P5037."new"($P101 :flat, "conj" :named("rxtype"), "zerowidth" :named("subtype"))
.annotate 'line', 1024
    nqp_get_sc_object $P5039, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5040 = $P5039."new"("cclass" :named("rxtype"), "." :named("name"))
    $P5041 = $P5035."new"($P5038, $P5040, "concat" :named("rxtype"), $P5036 :named("node"), 1 :named("negate"))
    set $P5044, $P5041
    goto if1182_end2922
  if1182_else2921:
.annotate 'line', 1025
    nqp_get_sc_object $P5042, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5043 = $P5042."new"($P101 :flat, "altseq" :named("rxtype"))
    set $P5044, $P5043
  if1182_end2922:
    set $P5045, $P5044
  if1179_end2917:
    store_lex "$qast", $P5045
    .return ($P5045) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_268_1382484119.90237") :anon :lex :outer("cuid_271_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 964
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_267_1382484119.90237' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_269_1382484119.90237' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_270_1382484119.90237' 
    capture_lex $P5021 
    .lex "$_", _lex_param_0 
    .local pmc fb_tmp_206 
    .local pmc fb_tmp_228 
    .local pmc fb_tmp_229 
    set fb_tmp_206, _lex_param_0
    repr_defined $I5001, fb_tmp_206
    unless $I5001 goto if1092_else2763 
    set $P5001, fb_tmp_206[1]
    set $P5003, $P5001
    goto if1092_end2764
  if1092_else2763:
    null $P5002
    set $P5003, $P5002
  if1092_end2764:
    unless_null $P5003, vivi_10932765
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5003, $P5004
  vivi_10932765:
    unless $P5003 goto if1091_else2761 
    .const 'Sub' $P5005 = 'cuid_267_1382484119.90237' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5020, $P5006
    goto if1091_end2762
  if1091_else2761:
    set fb_tmp_229, _lex_param_0
    repr_defined $I5003, fb_tmp_229
    unless $I5003 goto if1153_else2869 
    set $P5007, fb_tmp_229[0]
    set $P5009, $P5007
    goto if1153_end2870
  if1153_else2869:
    null $P5008
    set $P5009, $P5008
  if1153_end2870:
    unless_null $P5009, vivi_11542871
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_11542871:
    set fb_tmp_228, $P5009
    repr_defined $I5002, fb_tmp_228
    unless $I5002 goto if1152_else2867 
    set $P5011, fb_tmp_228["cclass_backslash"]
    set $P5013, $P5011
    goto if1152_end2868
  if1152_else2867:
    null $P5012
    set $P5013, $P5012
  if1152_end2868:
    unless_null $P5013, vivi_11552872
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5013, $P5014
  vivi_11552872:
    unless $P5013 goto if1151_else2865 
    .const 'Sub' $P5015 = 'cuid_269_1382484119.90237' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5019, $P5016
    goto if1151_end2866
  if1151_else2865:
    .const 'Sub' $P5017 = 'cuid_270_1382484119.90237' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if1151_end2866:
    set $P5020, $P5019
  if1091_end2762:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_267_1382484119.90237") :anon :lex :outer("cuid_268_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 965
    .const 'Sub' $P5142 = 'cuid_266_1382484119.90237' 
    capture_lex $P5142 
    .lex "$node", $P101 
    .lex "$lhs", $P102 
    .lex "$rhs", $P103 
    .lex "$ord0", $P104 
    .lex "$ord1", $P105 
    .local pmc fb_tmp_207 
    .local pmc fb_tmp_208 
    .local pmc fb_tmp_209 
    .local pmc fb_tmp_210 
    .local pmc fb_tmp_211 
    .local pmc fb_tmp_212 
    .local pmc fb_tmp_213 
    .local pmc fb_tmp_214 
    .local pmc fb_tmp_215 
    .local pmc fb_tmp_216 
    .local pmc fb_tmp_217 
    .local pmc fb_tmp_218 
    .local pmc fb_tmp_219 
    .local pmc fb_tmp_220 
    .local pmc fb_tmp_221 
    .local pmc fb_tmp_222 
    .local pmc fb_tmp_223 
    .local pmc fb_tmp_224 
    .local pmc fb_tmp_225 
    .local pmc fb_tmp_226 
    .local pmc fb_tmp_227 
    .local pmc pkg_viv_tmp_15 
    .local pmc tmp_4 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P104, $P5004
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P105, $P5005
    find_lex $P5006, "$_"
    set fb_tmp_208, $P5006
    repr_defined $I5002, fb_tmp_208
    unless $I5002 goto if1096_else2770 
    set $P5007, fb_tmp_208[0]
    set $P5009, $P5007
    goto if1096_end2771
  if1096_else2770:
    null $P5008
    set $P5009, $P5008
  if1096_end2771:
    unless_null $P5009, vivi_10972772
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_10972772:
    set fb_tmp_207, $P5009
    repr_defined $I5001, fb_tmp_207
    unless $I5001 goto if1095_else2768 
    set $P5011, fb_tmp_207["cclass_backslash"]
    set $P5013, $P5011
    goto if1095_end2769
  if1095_else2768:
    null $P5012
    set $P5013, $P5012
  if1095_end2769:
    unless_null $P5013, vivi_10982773
    nqp_get_sc_object $P5014, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5013, $P5014
  vivi_10982773:
    unless $P5013 goto if1094_else2766 
.annotate 'line', 969
.annotate 'line', 970
    find_lex $P5015, "$_"
    set fb_tmp_210, $P5015
    repr_defined $I5004, fb_tmp_210
    unless $I5004 goto if1100_else2776 
    set $P5016, fb_tmp_210[0]
    set $P5018, $P5016
    goto if1100_end2777
  if1100_else2776:
    null $P5017
    set $P5018, $P5017
  if1100_end2777:
    unless_null $P5018, vivi_11012778
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5018, $P5019
  vivi_11012778:
    set fb_tmp_209, $P5018
    repr_defined $I5003, fb_tmp_209
    unless $I5003 goto if1099_else2774 
    set $P5020, fb_tmp_209["cclass_backslash"]
    set $P5022, $P5020
    goto if1099_end2775
  if1099_else2774:
    null $P5021
    set $P5022, $P5021
  if1099_end2775:
    unless_null $P5022, vivi_11022779
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5022, $P5023
  vivi_11022779:
    $P5024 = $P5022."ast"()
    set $P101, $P5024
.annotate 'line', 972
    $P5025 = $P101."rxtype"()
    set $S5001, $P5025
    isne $I5005, $S5001, "literal"
    set $I5007, $I5005
    unless $I5005 goto if1106_end2787 
    $P5026 = $P101."rxtype"()
    set $S5002, $P5026
    isne $I5006, $S5002, "enumcharlist"
    set $I5007, $I5006
  if1106_end2787:
    box $P5029, $I5007
    set $P5028, $P5029
    if $I5007 goto unless1105_end2785 
.annotate 'line', 973
    $P5027 = $P101."negate"()
    set $P5028, $P5027
  unless1105_end2785:
    set $P5034, $P5028
    if $P5028 goto unless1104_end2783 
    set fb_tmp_211, $P101
    repr_defined $I5010, fb_tmp_211
    unless $I5010 goto if1107_else2788 
    set $P5030, fb_tmp_211[0]
    set $P5032, $P5030
    goto if1107_end2789
  if1107_else2788:
    null $P5031
    set $P5032, $P5031
  if1107_end2789:
    unless_null $P5032, vivi_11082790
    nqp_get_sc_object $P5033, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5032, $P5033
  vivi_11082790:
    set $S5003, $P5032
    length $I5009, $S5003
    set $N5001, $I5009
    set $N5002, 1
    isne $I5008, $N5001, $N5002
    box $P5035, $I5008
    set $P5034, $P5035
  unless1104_end2783:
    unless $P5034 goto if1103_end2781 
.annotate 'line', 971
    find_lex $P5036, "$/"
    $P5037 = $P5036."CURSOR"()
    find_lex $P5038, "$_"
    set $S5005, $P5038
    concat $S5004, "Illegal range endpoint in regex: ", $S5005
    $P5039 = $P5037."panic"($S5004)
  if1103_end2781:
    set fb_tmp_212, $P101
    repr_defined $I5011, fb_tmp_212
    unless $I5011 goto if1109_else2791 
    set $P5040, fb_tmp_212[0]
    set $P5042, $P5040
    goto if1109_end2792
  if1109_else2791:
    null $P5041
    set $P5042, $P5041
  if1109_end2792:
    unless_null $P5042, vivi_11102793
    nqp_get_sc_object $P5043, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5042, $P5043
  vivi_11102793:
    set $P102, $P5042
    goto if1094_end2767
  if1094_else2766:
.annotate 'line', 976
    find_lex $P5044, "$_"
    set fb_tmp_214, $P5044
    repr_defined $I5013, fb_tmp_214
    unless $I5013 goto if1112_else2796 
    set $P5045, fb_tmp_214[0]
    set $P5047, $P5045
    goto if1112_end2797
  if1112_else2796:
    null $P5046
    set $P5047, $P5046
  if1112_end2797:
    unless_null $P5047, vivi_11132798
    nqp_get_sc_object $P5048, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5047, $P5048
  vivi_11132798:
    set fb_tmp_213, $P5047
    repr_defined $I5012, fb_tmp_213
    unless $I5012 goto if1111_else2794 
    set $P5049, fb_tmp_213[0]
    set $P5051, $P5049
    goto if1111_end2795
  if1111_else2794:
    null $P5050
    set $P5051, $P5050
  if1111_end2795:
    unless_null $P5051, vivi_11142799
    nqp_get_sc_object $P5052, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5051, $P5052
  vivi_11142799:
    set $S5006, $P5051
    box $P5053, $S5006
    set $P102, $P5053
  if1094_end2767:
    find_lex $P5054, "$_"
    set fb_tmp_217, $P5054
    repr_defined $I5016, fb_tmp_217
    unless $I5016 goto if1118_else2806 
    set $P5055, fb_tmp_217[1]
    set $P5057, $P5055
    goto if1118_end2807
  if1118_else2806:
    null $P5056
    set $P5057, $P5056
  if1118_end2807:
    unless_null $P5057, vivi_11192808
    nqp_get_sc_object $P5058, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5057, $P5058
  vivi_11192808:
    set fb_tmp_216, $P5057
    repr_defined $I5015, fb_tmp_216
    unless $I5015 goto if1117_else2804 
    set $P5059, fb_tmp_216[0]
    set $P5061, $P5059
    goto if1117_end2805
  if1117_else2804:
    null $P5060
    set $P5061, $P5060
  if1117_end2805:
    unless_null $P5061, vivi_11202809
    nqp_get_sc_object $P5062, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5061, $P5062
  vivi_11202809:
    set fb_tmp_215, $P5061
    repr_defined $I5014, fb_tmp_215
    unless $I5014 goto if1116_else2802 
    set $P5063, fb_tmp_215["cclass_backslash"]
    set $P5065, $P5063
    goto if1116_end2803
  if1116_else2802:
    null $P5064
    set $P5065, $P5064
  if1116_end2803:
    unless_null $P5065, vivi_11212810
    nqp_get_sc_object $P5066, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5065, $P5066
  vivi_11212810:
    unless $P5065 goto if1115_else2800 
.annotate 'line', 979
.annotate 'line', 980
    find_lex $P5067, "$_"
    set fb_tmp_220, $P5067
    repr_defined $I5019, fb_tmp_220
    unless $I5019 goto if1124_else2815 
    set $P5068, fb_tmp_220[1]
    set $P5070, $P5068
    goto if1124_end2816
  if1124_else2815:
    null $P5069
    set $P5070, $P5069
  if1124_end2816:
    unless_null $P5070, vivi_11252817
    nqp_get_sc_object $P5071, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5070, $P5071
  vivi_11252817:
    set fb_tmp_219, $P5070
    repr_defined $I5018, fb_tmp_219
    unless $I5018 goto if1123_else2813 
    set $P5072, fb_tmp_219[0]
    set $P5074, $P5072
    goto if1123_end2814
  if1123_else2813:
    null $P5073
    set $P5074, $P5073
  if1123_end2814:
    unless_null $P5074, vivi_11262818
    nqp_get_sc_object $P5075, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5074, $P5075
  vivi_11262818:
    set fb_tmp_218, $P5074
    repr_defined $I5017, fb_tmp_218
    unless $I5017 goto if1122_else2811 
    set $P5076, fb_tmp_218["cclass_backslash"]
    set $P5078, $P5076
    goto if1122_end2812
  if1122_else2811:
    null $P5077
    set $P5078, $P5077
  if1122_end2812:
    unless_null $P5078, vivi_11272819
    nqp_get_sc_object $P5079, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5078, $P5079
  vivi_11272819:
    $P5080 = $P5078."ast"()
    set $P101, $P5080
.annotate 'line', 982
    $P5081 = $P101."rxtype"()
    set $S5007, $P5081
    isne $I5020, $S5007, "literal"
    set $I5022, $I5020
    unless $I5020 goto if1131_end2827 
    $P5082 = $P101."rxtype"()
    set $S5008, $P5082
    isne $I5021, $S5008, "enumcharlist"
    set $I5022, $I5021
  if1131_end2827:
    box $P5085, $I5022
    set $P5084, $P5085
    if $I5022 goto unless1130_end2825 
.annotate 'line', 983
    $P5083 = $P101."negate"()
    set $P5084, $P5083
  unless1130_end2825:
    set $P5090, $P5084
    if $P5084 goto unless1129_end2823 
    set fb_tmp_221, $P101
    repr_defined $I5025, fb_tmp_221
    unless $I5025 goto if1132_else2828 
    set $P5086, fb_tmp_221[0]
    set $P5088, $P5086
    goto if1132_end2829
  if1132_else2828:
    null $P5087
    set $P5088, $P5087
  if1132_end2829:
    unless_null $P5088, vivi_11332830
    nqp_get_sc_object $P5089, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5088, $P5089
  vivi_11332830:
    set $S5009, $P5088
    length $I5024, $S5009
    set $N5003, $I5024
    set $N5004, 1
    isne $I5023, $N5003, $N5004
    box $P5091, $I5023
    set $P5090, $P5091
  unless1129_end2823:
    unless $P5090 goto if1128_end2821 
.annotate 'line', 981
    find_lex $P5092, "$/"
    $P5093 = $P5092."CURSOR"()
    find_lex $P5094, "$_"
    set $S5011, $P5094
    concat $S5010, "Illegal range endpoint in regex: ", $S5011
    $P5095 = $P5093."panic"($S5010)
  if1128_end2821:
    set fb_tmp_222, $P101
    repr_defined $I5026, fb_tmp_222
    unless $I5026 goto if1134_else2831 
    set $P5096, fb_tmp_222[0]
    set $P5098, $P5096
    goto if1134_end2832
  if1134_else2831:
    null $P5097
    set $P5098, $P5097
  if1134_end2832:
    unless_null $P5098, vivi_11352833
    nqp_get_sc_object $P5099, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5098, $P5099
  vivi_11352833:
    set $P103, $P5098
    goto if1115_end2801
  if1115_else2800:
.annotate 'line', 986
    find_lex $P5100, "$_"
    set fb_tmp_225, $P5100
    repr_defined $I5029, fb_tmp_225
    unless $I5029 goto if1138_else2838 
    set $P5101, fb_tmp_225[1]
    set $P5103, $P5101
    goto if1138_end2839
  if1138_else2838:
    null $P5102
    set $P5103, $P5102
  if1138_end2839:
    unless_null $P5103, vivi_11392840
    nqp_get_sc_object $P5104, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5103, $P5104
  vivi_11392840:
    set fb_tmp_224, $P5103
    repr_defined $I5028, fb_tmp_224
    unless $I5028 goto if1137_else2836 
    set $P5105, fb_tmp_224[0]
    set $P5107, $P5105
    goto if1137_end2837
  if1137_else2836:
    null $P5106
    set $P5107, $P5106
  if1137_end2837:
    unless_null $P5107, vivi_11402841
    nqp_get_sc_object $P5108, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5107, $P5108
  vivi_11402841:
    set fb_tmp_223, $P5107
    repr_defined $I5027, fb_tmp_223
    unless $I5027 goto if1136_else2834 
    set $P5109, fb_tmp_223[0]
    set $P5111, $P5109
    goto if1136_end2835
  if1136_else2834:
    null $P5110
    set $P5111, $P5110
  if1136_end2835:
    unless_null $P5111, vivi_11412842
    nqp_get_sc_object $P5112, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5111, $P5112
  vivi_11412842:
    set $S5012, $P5111
    box $P5113, $S5012
    set $P103, $P5113
  if1115_end2801:
    set $S5013, $P102
    ord $I5030, $S5013
    box $P5114, $I5030
    set $P104, $P5114
    set $S5014, $P103
    ord $I5031, $S5014
    box $P5115, $I5031
    set $P105, $P5115
    set $N5005, $P104
    set $N5006, $P105
    isgt $I5032, $N5005, $N5006
    unless $I5032 goto if1142_end2844 
.annotate 'line', 991
    find_lex $P5116, "$/"
    $P5117 = $P5116."CURSOR"()
    find_lex $P5118, "$_"
    set $S5016, $P5118
    concat $S5015, "Illegal reversed character range in regex: ", $S5016
    $P5119 = $P5117."panic"($S5015)
  if1142_end2844:
    find_dynamic_lex $P5120, "%*RX"
    unless_null $P5120, fallback2849
    nqp_get_sc_object $P5122, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5121, $P5122
    set pkg_viv_tmp_15, $P5121
    set fb_tmp_227, pkg_viv_tmp_15
    repr_defined $I5034, fb_tmp_227
    unless $I5034 goto if1145_else2850 
    set $P5123, fb_tmp_227["%RX"]
    set $P5125, $P5123
    goto if1145_end2851
  if1145_else2850:
    null $P5124
    set $P5125, $P5124
  if1145_end2851:
    unless_null $P5125, vivi_11462852
    new $P5126, 'Hash'
    set pkg_viv_tmp_15["%RX"], $P5126
    set $P5125, $P5126
  vivi_11462852:
    unless_null $P5125, vivi_11472853
    die "Contextual %*RX not found"
    box $P5127, "Contextual %*RX not found"
    set $P5125, $P5127
  vivi_11472853:
    set $P5120, $P5125
  fallback2849:
    set fb_tmp_226, $P5120
    repr_defined $I5033, fb_tmp_226
    unless $I5033 goto if1144_else2847 
    set $P5128, fb_tmp_226["i"]
    set $P5130, $P5128
    goto if1144_end2848
  if1144_else2847:
    null $P5129
    set $P5130, $P5129
  if1144_end2848:
    unless_null $P5130, vivi_11482854
    nqp_get_sc_object $P5131, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5130, $P5131
  vivi_11482854:
    unless $P5130 goto if1143_else2845 
.annotate 'line', 993
  while1149_test2855:
    set $N5007, $P104
    set $N5008, $P105
    isle $I5035, $N5007, $N5008
    box $P5135, $I5035
    set $P5134, $P5135
    unless $I5035 goto while1149_done2859 
  while1149_redo2857:
    .const 'Sub' $P5132 = 'cuid_266_1382484119.90237' 
    capture_lex $P5132
    $P5133 = $P5132()
    set $P5134, $P5133
    goto while1149_test2855 
  while1149_done2859:
    set $P5141, $P5134
    goto if1143_end2846
  if1143_else2845:
.annotate 'line', 999
    new $P5139, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5139, while1150_handlers2863
    push_eh $P5139
  while1150_test2860:
    set $N5009, $P104
    set $N5010, $P105
    isle $I5036, $N5009, $N5010
    box $P5140, $I5036
    set $P5138, $P5140
    unless $I5036 goto while1150_done2864 
  while1150_redo2862:
    find_lex $P5136, "$str"
    set $S5018, $P5136
    set tmp_4, $P104
    set $N5012, tmp_4
    set $N5013, 1
    add $N5011, $N5012, $N5013
    box $P5137, $N5011
    set $P104, $P5137
    set $I5037, tmp_4
    chr $S5019, $I5037
    concat $S5017, $S5018, $S5019
    box $P5137, $S5017
    store_lex "$str", $P5137
    set $P5138, $P5137
    goto while1150_test2860 
  while1150_handlers2863:
    .get_results ($P5139)
    pop_upto_eh $P5139
    getattribute $P5139, $P5139, 'type'
    eq $P5139, .CONTROL_LOOP_NEXT, while1150_test2860
    eq $P5139, .CONTROL_LOOP_REDO, while1150_redo2862
  while1150_done2864:
    pop_eh 
    set $P5141, $P5138
  if1143_end2846:
    .return ($P5141) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_266_1382484119.90237") :anon :lex :outer("cuid_267_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 994
    .lex "$c", $P101 
    .local pmc tmp_3 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    find_lex $P5002, "$ord0"
    set tmp_3, $P5002
    set $N5002, tmp_3
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$ord0", $P5003
    set $I5001, tmp_3
    chr $S5001, $I5001
    box $P5002, $S5001
    set $P101, $P5002
    find_lex $P5003, "$str"
    set $S5003, $P5003
    set $S5006, $P101
    downcase $S5005, $S5006
    set $S5008, $P101
    upcase $S5007, $S5008
    concat $S5004, $S5005, $S5007
    concat $S5002, $S5003, $S5004
    box $P5004, $S5002
    store_lex "$str", $P5004
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_269_1382484119.90237") :anon :lex :outer("cuid_268_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1003
    .lex "$bs", $P101 
    .local pmc fb_tmp_230 
    .local pmc fb_tmp_231 
    .local pmc fb_tmp_232 
    .local pmc fb_tmp_233 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 1004
    find_lex $P5002, "$_"
    set fb_tmp_231, $P5002
    repr_defined $I5002, fb_tmp_231
    unless $I5002 goto if1157_else2875 
    set $P5003, fb_tmp_231[0]
    set $P5005, $P5003
    goto if1157_end2876
  if1157_else2875:
    null $P5004
    set $P5005, $P5004
  if1157_end2876:
    unless_null $P5005, vivi_11582877
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_11582877:
    set fb_tmp_230, $P5005
    repr_defined $I5001, fb_tmp_230
    unless $I5001 goto if1156_else2873 
    set $P5007, fb_tmp_230["cclass_backslash"]
    set $P5009, $P5007
    goto if1156_end2874
  if1156_else2873:
    null $P5008
    set $P5009, $P5008
  if1156_end2874:
    unless_null $P5009, vivi_11592878
    nqp_get_sc_object $P5010, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5009, $P5010
  vivi_11592878:
    $P5011 = $P5009."ast"()
    set $P101, $P5011
.annotate 'line', 1005
    $P5012 = $P101."rxtype"()
    set $S5001, $P5012
    iseq $I5003, $S5001, "enumcharlist"
    set $I5005, $I5003
    unless $I5003 goto if1162_end2884 
    $P5013 = $P101."negate"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1162_end2884:
    set $I5007, $I5005
    if $I5005 goto unless1161_end2882 
    $P5014 = $P101."rxtype"()
    set $S5002, $P5014
    iseq $I5006, $S5002, "literal"
    set $I5007, $I5006
  unless1161_end2882:
    unless $I5007 goto if1160_else2879 
    find_lex $P5015, "$str"
    set $S5004, $P5015
    set fb_tmp_232, $P101
    repr_defined $I5008, fb_tmp_232
    unless $I5008 goto if1163_else2885 
    set $P5016, fb_tmp_232[0]
    set $P5018, $P5016
    goto if1163_end2886
  if1163_else2885:
    null $P5017
    set $P5018, $P5017
  if1163_end2886:
    unless_null $P5018, vivi_11642887
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5018, $P5019
  vivi_11642887:
    set $S5005, $P5018
    concat $S5003, $S5004, $S5005
    box $P5020, $S5003
    store_lex "$str", $P5020
    set $P5031, $P5020
    goto if1160_end2880
  if1160_else2879:
.annotate 'line', 1008
    find_lex $P5021, "$/"
    unless_null $P5021, fallback2892
    nqp_get_sc_object $P5022, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5021, $P5022
  fallback2892:
    set fb_tmp_233, $P5021
    repr_defined $I5010, fb_tmp_233
    unless $I5010 goto if1166_else2890 
    set $P5023, fb_tmp_233["sign"]
    set $P5025, $P5023
    goto if1166_end2891
  if1166_else2890:
    null $P5024
    set $P5025, $P5024
  if1166_end2891:
    unless_null $P5025, vivi_11672893
    nqp_get_sc_object $P5026, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5025, $P5026
  vivi_11672893:
    set $S5006, $P5025
    iseq $I5009, $S5006, "-"
    unless $I5009 goto if1165_end2889 
.annotate 'line', 1009
    $P5027 = $P101."negate"()
    isfalse $I5011, $P5027
    $P5028 = $P101."negate"($I5011)
  if1165_end2889:
.annotate 'line', 1010
    find_lex $P5029, "@alts"
    $P5030 = $P5029."push"($P101)
    set $P5031, $P5030
  if1160_end2880:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_270_1382484119.90237") :anon :lex :outer("cuid_268_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1013
    .lex "$c", $P101 
    .local pmc fb_tmp_234 
    .local pmc fb_tmp_235 
    .local pmc fb_tmp_236 
    .local pmc pkg_viv_tmp_16 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    find_lex $P5002, "$_"
    set fb_tmp_234, $P5002
    repr_defined $I5001, fb_tmp_234
    unless $I5001 goto if1168_else2894 
    set $P5003, fb_tmp_234[0]
    set $P5005, $P5003
    goto if1168_end2895
  if1168_else2894:
    null $P5004
    set $P5005, $P5004
  if1168_end2895:
    unless_null $P5005, vivi_11692896
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_11692896:
    set $S5001, $P5005
    box $P5007, $S5001
    set $P101, $P5007
    find_lex $P5008, "$str"
    set $S5003, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback2901
    nqp_get_sc_object $P5011, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5010, $P5011
    set pkg_viv_tmp_16, $P5010
    set fb_tmp_236, pkg_viv_tmp_16
    repr_defined $I5003, fb_tmp_236
    unless $I5003 goto if1172_else2902 
    set $P5012, fb_tmp_236["%RX"]
    set $P5014, $P5012
    goto if1172_end2903
  if1172_else2902:
    null $P5013
    set $P5014, $P5013
  if1172_end2903:
    unless_null $P5014, vivi_11732904
    new $P5015, 'Hash'
    set pkg_viv_tmp_16["%RX"], $P5015
    set $P5014, $P5015
  vivi_11732904:
    unless_null $P5014, vivi_11742905
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5014, $P5016
  vivi_11742905:
    set $P5009, $P5014
  fallback2901:
    set fb_tmp_235, $P5009
    repr_defined $I5002, fb_tmp_235
    unless $I5002 goto if1171_else2899 
    set $P5017, fb_tmp_235["i"]
    set $P5019, $P5017
    goto if1171_end2900
  if1171_else2899:
    null $P5018
    set $P5019, $P5018
  if1171_end2900:
    unless_null $P5019, vivi_11752906
    nqp_get_sc_object $P5020, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5019, $P5020
  vivi_11752906:
    unless $P5019 goto if1170_else2897 
    set $S5006, $P101
    downcase $S5005, $S5006
    set $S5008, $P101
    upcase $S5007, $S5008
    concat $S5004, $S5005, $S5007
    box $P5022, $S5004
    set $P5021, $P5022
    goto if1170_end2898
  if1170_else2897:
    set $P5021, $P101
  if1170_end2898:
    set $S5009, $P5021
    concat $S5002, $S5003, $S5009
    box $P5023, $S5002
    store_lex "$str", $P5023
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "mod_internal" :subid("cuid_196_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1030
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_272_1382484119.90237' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc fb_tmp_240 
    .local pmc fb_tmp_241 
    .local pmc fb_tmp_242 
    unless_null _lex_param_1, fallback2931
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5001
  fallback2931:
    set fb_tmp_240, _lex_param_1
    repr_defined $I5001, fb_tmp_240
    unless $I5001 goto if1186_else2929 
    set $P5002, fb_tmp_240["quote_EXPR"]
    set $P5004, $P5002
    goto if1186_end2930
  if1186_else2929:
    null $P5003
    set $P5004, $P5003
  if1186_end2930:
    unless_null $P5004, vivi_11872932
    nqp_get_sc_object $P5005, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5004, $P5005
  vivi_11872932:
    set $P5023, $P5004
    unless $P5004 goto if1185_end2928 
.annotate 'line', 1031
.annotate 'line', 1032
    nqp_get_sc_object $P5006, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 55
    unless_null _lex_param_1, fallback2939
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_1, $P5007
  fallback2939:
    set fb_tmp_242, _lex_param_1
    repr_defined $I5003, fb_tmp_242
    unless $I5003 goto if1190_else2937 
    set $P5008, fb_tmp_242["quote_EXPR"]
    set $P5010, $P5008
    goto if1190_end2938
  if1190_else2937:
    null $P5009
    set $P5010, $P5009
  if1190_end2938:
    unless_null $P5010, vivi_11912940
    nqp_get_sc_object $P5011, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5010, $P5011
  vivi_11912940:
    set fb_tmp_241, $P5010
    repr_defined $I5002, fb_tmp_241
    unless $I5002 goto if1189_else2935 
    set $P5012, fb_tmp_241[0]
    set $P5014, $P5012
    goto if1189_end2936
  if1189_else2935:
    null $P5013
    set $P5014, $P5013
  if1189_end2936:
    unless_null $P5014, vivi_11922941
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5014, $P5015
  vivi_11922941:
    $P5016 = $P5014."ast"()
    $P5017 = $P5006."ACCEPTS"($P5016)
    unless $P5017 goto if1188_else2933 
    .const 'Sub' $P5018 = 'cuid_272_1382484119.90237' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5022, $P5019
    goto if1188_end2934
  if1188_else2933:
.annotate 'line', 1040
.annotate 'line', 1041
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("Internal modifier strings must be literals")
    set $P5022, $P5021
  if1188_end2934:
    set $P5023, $P5022
  if1185_end2928:
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_272_1382484119.90237") :anon :lex :outer("cuid_196_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1032
    .lex "$key", $P101 
    .lex "$val", $P102 
    .local pmc fb_tmp_243 
    .local pmc fb_tmp_244 
    .local pmc fb_tmp_245 
    .local pmc fb_tmp_246 
    .local pmc fb_tmp_247 
    .local pmc pkg_viv_tmp_17 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    find_lex $P5003, "$/"
    unless_null $P5003, fallback2946
    nqp_get_sc_object $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5003, $P5004
  fallback2946:
    set fb_tmp_244, $P5003
    repr_defined $I5002, fb_tmp_244
    unless $I5002 goto if1194_else2944 
    set $P5005, fb_tmp_244["mod_ident"]
    set $P5007, $P5005
    goto if1194_end2945
  if1194_else2944:
    null $P5006
    set $P5007, $P5006
  if1194_end2945:
    unless_null $P5007, vivi_11952947
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_11952947:
    set fb_tmp_243, $P5007
    repr_defined $I5001, fb_tmp_243
    unless $I5001 goto if1193_else2942 
    set $P5009, fb_tmp_243["sym"]
    set $P5011, $P5009
    goto if1193_end2943
  if1193_else2942:
    null $P5010
    set $P5011, $P5010
  if1193_end2943:
    unless_null $P5011, vivi_11962948
    nqp_get_sc_object $P5012, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5011, $P5012
  vivi_11962948:
    set $S5001, $P5011
    box $P5013, $S5001
    set $P101, $P5013
.annotate 'line', 1034
    find_lex $P5014, "$/"
    unless_null $P5014, fallback2953
    nqp_get_sc_object $P5015, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5014, $P5015
  fallback2953:
    set fb_tmp_246, $P5014
    repr_defined $I5004, fb_tmp_246
    unless $I5004 goto if1198_else2951 
    set $P5016, fb_tmp_246["quote_EXPR"]
    set $P5018, $P5016
    goto if1198_end2952
  if1198_else2951:
    null $P5017
    set $P5018, $P5017
  if1198_end2952:
    unless_null $P5018, vivi_11992954
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5018, $P5019
  vivi_11992954:
    set fb_tmp_245, $P5018
    repr_defined $I5003, fb_tmp_245
    unless $I5003 goto if1197_else2949 
    set $P5020, fb_tmp_245[0]
    set $P5022, $P5020
    goto if1197_end2950
  if1197_else2949:
    null $P5021
    set $P5022, $P5021
  if1197_end2950:
    unless_null $P5022, vivi_12002955
    nqp_get_sc_object $P5023, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5022, $P5023
  vivi_12002955:
    $P5024 = $P5022."ast"()
    $P5025 = $P5024."value"()
    set $P102, $P5025
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback2956
    nqp_get_sc_object $P5028, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5027, $P5028
    set pkg_viv_tmp_17, $P5027
    set fb_tmp_247, pkg_viv_tmp_17
    repr_defined $I5005, fb_tmp_247
    unless $I5005 goto if1201_else2957 
    set $P5029, fb_tmp_247["%RX"]
    set $P5031, $P5029
    goto if1201_end2958
  if1201_else2957:
    null $P5030
    set $P5031, $P5030
  if1201_end2958:
    unless_null $P5031, vivi_12022959
    new $P5032, 'Hash'
    set pkg_viv_tmp_17["%RX"], $P5032
    set $P5031, $P5032
  vivi_12022959:
    unless_null $P5031, vivi_12032960
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5031, $P5033
  vivi_12032960:
    set $P5026, $P5031
  fallback2956:
    set $S5002, $P101
    set $P5026[$S5002], $P102
.annotate 'line', 1036
    find_dynamic_lex $P5034, "$/"
    set $S5003, $P101
    iseq $I5006, $S5003, "dba"
    unless $I5006 goto if1204_else2961 
.annotate 'line', 1037
    nqp_get_sc_object $P5035, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5036 = $P5035."new"("dba" :named("rxtype"), $P102 :named("name"))
    set $P5037, $P5036
    goto if1204_end2962
  if1204_else2961:
    box $P5038, 0
    set $P5037, $P5038
  if1204_end2962:
    $P5039 = $P5034."!make"($P5037)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "qbuildsub" :subid("cuid_197_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1053
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("anon") :optional 
    .param int haz_param_3 :opt_flag 
    .param pmc _lex_param_4 :named("addself") :optional 
    .param int haz_param_4 :opt_flag 
    .param pmc _lex_param_5 :slurpy :named 
    .const 'Sub' $P5080 = 'cuid_273_1382484119.90237' 
    capture_lex $P5080 
    .lex "$code_obj", $P101 
    .lex "$scan", $P102 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$anon", _lex_param_3 
    .lex "$addself", _lex_param_4 
    .lex "%rest", _lex_param_5 
    .local pmc fb_tmp_248 
    .local pmc fb_tmp_252 
    .local pmc fb_tmp_253 
    .local pmc pkg_viv_tmp_18 
    .local pmc fb_tmp_254 
    .local pmc fb_tmp_255 
    .local pmc pkg_viv_tmp_19 
    .local pmc fb_tmp_256 
    .local pmc fb_tmp_257 
    .local pmc pkg_viv_tmp_20 
    if haz_param_2, default3015
    nqp_get_sc_object $P5076, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 108
    $P5077 = $P5076."new"()
    set _lex_param_2, $P5077
  default3015:
    if haz_param_3, default3016
    nqp_get_sc_object $P5078, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_3, $P5078
  default3016:
    if haz_param_4, default3017
    nqp_get_sc_object $P5079, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set _lex_param_4, $P5079
  default3017:
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P102, $P5002
    exists $I5001, _lex_param_5["code_obj"]
    unless $I5001 goto if1205_else2963 
    set fb_tmp_248, _lex_param_5
    repr_defined $I5002, fb_tmp_248
    unless $I5002 goto if1206_else2965 
    set $P5003, fb_tmp_248["code_obj"]
    set $P5005, $P5003
    goto if1206_end2966
  if1206_else2965:
    null $P5004
    set $P5005, $P5004
  if1206_end2966:
    unless_null $P5005, vivi_12072967
    nqp_get_sc_object $P5006, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5005, $P5006
  vivi_12072967:
    set $P5009, $P5005
    goto if1205_end2964
  if1205_else2963:
.annotate 'line', 1056
    nqp_decontainerize $P5007, _lex_param_0
    $P5008 = $P5007."create_regex_code_object"(_lex_param_2)
    set $P5009, $P5008
  if1205_end2964:
    set $P101, $P5009
    unless _lex_param_4 goto if1208_end2969 
.annotate 'line', 1058
.annotate 'line', 1059
    nqp_get_sc_object $P5010, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 74
    $P5011 = $P5010."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
    $P5012 = _lex_param_2."push"($P5011)
  if1208_end2969:
.annotate 'line', 1061
    $P5013 = _lex_param_2."symbol"(utf8:"$\x{a2}")
    if $P5013 goto unless1209_end2971 
.annotate 'line', 1062
    nqp_get_sc_object $P5014, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 74
    $P5015 = $P5014."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    _lex_param_2."push"($P5015)
.annotate 'line', 1063
    $P5016 = _lex_param_2."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
  unless1209_end2971:
.annotate 'line', 1066
    nqp_decontainerize $P5017, _lex_param_0
    $P5018 = "&capnames"(_lex_param_1, 0)
    $P5017."store_regex_caps"($P101, _lex_param_2, $P5018)
.annotate 'line', 1067
    nqp_decontainerize $P5019, _lex_param_0
    nqp_get_sc_object $P5020, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1382484078.58099", 3
    $P5021 = $P5020."new"()
    $P5022 = $P5021."addnode"(_lex_param_1)
    $P5019."store_regex_nfa"($P101, _lex_param_2, $P5022)
.annotate 'line', 1068
    nqp_decontainerize $P5023, _lex_param_0
    $P5023."alt_nfas"($P101, _lex_param_2, _lex_param_1)
.annotate 'line', 1070
    nqp_get_sc_object $P5024, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5025 = $P5024."new"("scan" :named("rxtype"))
    set $P102, $P5025
    .const 'Sub' $P5026 = 'cuid_273_1382484119.90237' 
    capture_lex $P5026
    $P5027 = $P5026()
    set _lex_param_2["orig_qast"], _lex_param_1
.annotate 'line', 1083
    nqp_get_sc_object $P5028, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    unless _lex_param_3 goto if1219_else2987 
.annotate 'line', 1087
    nqp_get_sc_object $P5029, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    $P5030 = $P5029."new"("pass" :named("rxtype"))
    set $P5074, $P5030
    goto if1219_end2988
  if1219_else2987:
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2993
    nqp_get_sc_object $P5033, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5032, $P5033
    set pkg_viv_tmp_18, $P5032
    set fb_tmp_253, pkg_viv_tmp_18
    repr_defined $I5005, fb_tmp_253
    unless $I5005 goto if1222_else2994 
    set $P5034, fb_tmp_253["%RX"]
    set $P5036, $P5034
    goto if1222_end2995
  if1222_else2994:
    null $P5035
    set $P5036, $P5035
  if1222_end2995:
    unless_null $P5036, vivi_12232996
    new $P5037, 'Hash'
    set pkg_viv_tmp_18["%RX"], $P5037
    set $P5036, $P5037
  vivi_12232996:
    unless_null $P5036, vivi_12242997
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5036, $P5038
  vivi_12242997:
    set $P5031, $P5036
  fallback2993:
    set fb_tmp_252, $P5031
    repr_defined $I5004, fb_tmp_252
    unless $I5004 goto if1221_else2991 
    set $P5039, fb_tmp_252["name"]
    set $P5041, $P5039
    goto if1221_end2992
  if1221_else2991:
    null $P5040
    set $P5041, $P5040
  if1221_end2992:
    unless_null $P5041, vivi_12252998
    nqp_get_sc_object $P5042, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5041, $P5042
  vivi_12252998:
    set $S5002, $P5041
    substr $S5001, $S5002, 0, 12
    isne $I5003, $S5001, "!!LATENAME!!"
    unless $I5003 goto if1220_else2989 
.annotate 'line', 1089
    nqp_get_sc_object $P5043, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    find_dynamic_lex $P5044, "%*RX"
    unless_null $P5044, fallback3001
    nqp_get_sc_object $P5046, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5045, $P5046
    set pkg_viv_tmp_19, $P5045
    set fb_tmp_255, pkg_viv_tmp_19
    repr_defined $I5007, fb_tmp_255
    unless $I5007 goto if1227_else3002 
    set $P5047, fb_tmp_255["%RX"]
    set $P5049, $P5047
    goto if1227_end3003
  if1227_else3002:
    null $P5048
    set $P5049, $P5048
  if1227_end3003:
    unless_null $P5049, vivi_12283004
    new $P5050, 'Hash'
    set pkg_viv_tmp_19["%RX"], $P5050
    set $P5049, $P5050
  vivi_12283004:
    unless_null $P5049, vivi_12293005
    die "Contextual %*RX not found"
    box $P5051, "Contextual %*RX not found"
    set $P5049, $P5051
  vivi_12293005:
    set $P5044, $P5049
  fallback3001:
    set fb_tmp_254, $P5044
    repr_defined $I5006, fb_tmp_254
    unless $I5006 goto if1226_else2999 
    set $P5052, fb_tmp_254["name"]
    set $P5054, $P5052
    goto if1226_end3000
  if1226_else2999:
    null $P5053
    set $P5054, $P5053
  if1226_end3000:
    unless_null $P5054, vivi_12303006
    nqp_get_sc_object $P5055, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5054, $P5055
  vivi_12303006:
    $P5056 = $P5043."new"("pass" :named("rxtype"), $P5054 :named("name"))
    set $P5073, $P5056
    goto if1220_end2990
  if1220_else2989:
.annotate 'line', 1090
    nqp_get_sc_object $P5057, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
.annotate 'line', 1091
    nqp_get_sc_object $P5058, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 74
    find_dynamic_lex $P5059, "%*RX"
    unless_null $P5059, fallback3009
    nqp_get_sc_object $P5061, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5060, $P5061
    set pkg_viv_tmp_20, $P5060
    set fb_tmp_257, pkg_viv_tmp_20
    repr_defined $I5009, fb_tmp_257
    unless $I5009 goto if1232_else3010 
    set $P5062, fb_tmp_257["%RX"]
    set $P5064, $P5062
    goto if1232_end3011
  if1232_else3010:
    null $P5063
    set $P5064, $P5063
  if1232_end3011:
    unless_null $P5064, vivi_12333012
    new $P5065, 'Hash'
    set pkg_viv_tmp_20["%RX"], $P5065
    set $P5064, $P5065
  vivi_12333012:
    unless_null $P5064, vivi_12343013
    die "Contextual %*RX not found"
    box $P5066, "Contextual %*RX not found"
    set $P5064, $P5066
  vivi_12343013:
    set $P5059, $P5064
  fallback3009:
    set fb_tmp_256, $P5059
    repr_defined $I5008, fb_tmp_256
    unless $I5008 goto if1231_else3007 
    set $P5067, fb_tmp_256["name"]
    set $P5069, $P5067
    goto if1231_end3008
  if1231_else3007:
    null $P5068
    set $P5069, $P5068
  if1231_end3008:
    unless_null $P5069, vivi_12353014
    nqp_get_sc_object $P5070, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5069, $P5070
  vivi_12353014:
    set $S5004, $P5069
    substr $S5003, $S5004, 12
    $P5071 = $P5058."new"($S5003 :named("name"), "lexical" :named("scope"))
    $P5072 = $P5057."new"($P5071, "pass" :named("rxtype"))
    set $P5073, $P5072
  if1220_end2990:
    set $P5074, $P5073
  if1219_end2988:
    $P5075 = $P5028."new"($P102, _lex_param_1, $P5074, "concat" :named("rxtype"))
    set _lex_param_1, $P5075
.annotate 'line', 1097
    _lex_param_2."push"(_lex_param_1)
    .return (_lex_param_2) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_273_1382484119.90237") :anon :lex :outer("cuid_197_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1071
    .lex "$q", $P101 
    .local pmc fb_tmp_249 
    .local pmc fb_tmp_250 
    .local pmc fb_tmp_251 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
    find_lex $P5002, "$qast"
    set $P101, $P5002
.annotate 'line', 1073
    $P5003 = $P101."rxtype"()
    set $S5001, $P5003
    iseq $I5001, $S5001, "concat"
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto if1211_end2975 
    set fb_tmp_249, $P101
    repr_defined $I5002, fb_tmp_249
    unless $I5002 goto if1212_else2976 
    set $P5004, fb_tmp_249[0]
    set $P5006, $P5004
    goto if1212_end2977
  if1212_else2976:
    null $P5005
    set $P5006, $P5005
  if1212_end2977:
    unless_null $P5006, vivi_12132978
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_12132978:
    set $P5008, $P5006
  if1211_end2975:
    unless $P5008 goto if1210_end2973 
    set fb_tmp_250, $P101
    repr_defined $I5003, fb_tmp_250
    unless $I5003 goto if1214_else2979 
    set $P5010, fb_tmp_250[0]
    set $P5012, $P5010
    goto if1214_end2980
  if1214_else2979:
    null $P5011
    set $P5012, $P5011
  if1214_end2980:
    unless_null $P5012, vivi_12152981
    nqp_get_sc_object $P5013, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5012, $P5013
  vivi_12152981:
    set $P101, $P5012
  if1210_end2973:
.annotate 'line', 1076
    $P5014 = $P101."rxtype"()
    set $S5002, $P5014
    iseq $I5004, $S5002, "literal"
    box $P5024, $I5004
    set $P5023, $P5024
    unless $I5004 goto if1216_end2983 
    find_lex $P5015, "$scan"
    set fb_tmp_251, $P101
    repr_defined $I5005, fb_tmp_251
    unless $I5005 goto if1217_else2984 
    set $P5016, fb_tmp_251[0]
    set $P5018, $P5016
    goto if1217_end2985
  if1217_else2984:
    null $P5017
    set $P5018, $P5017
  if1217_end2985:
    unless_null $P5018, vivi_12182986
    nqp_get_sc_object $P5019, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5018, $P5019
  vivi_12182986:
    push $P5015, $P5018
.annotate 'line', 1078
    find_lex $P5020, "$scan"
    $P5021 = $P101."subtype"()
    $P5022 = $P5020."subtype"($P5021)
    set $P5023, $P5022
  if1216_end2983:
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "alt_nfas" :subid("cuid_198_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1159
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5021 = 'cuid_275_1382484119.90237' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_276_1382484119.90237' 
    capture_lex $P5021 
    .lex "$rxtype", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$ast", _lex_param_3 
    .local pmc fb_tmp_258 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P101, $P5001
.annotate 'line', 1160
    $P5002 = _lex_param_3."rxtype"()
    set $P101, $P5002
    set $S5001, $P101
    iseq $I5001, $S5001, "alt"
    unless $I5001 goto if1236_else3018 
    .const 'Sub' $P5003 = 'cuid_275_1382484119.90237' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5020, $P5004
    goto if1236_end3019
  if1236_else3018:
    set $S5002, $P101
    iseq $I5002, $S5002, "subcapture"
    set $I5004, $I5002
    if $I5002 goto unless1238_end3026 
    set $S5003, $P101
    iseq $I5003, $S5003, "quant"
    set $I5004, $I5003
  unless1238_end3026:
    unless $I5004 goto if1237_else3023 
.annotate 'line', 1170
.annotate 'line', 1171
    nqp_decontainerize $P5005, _lex_param_0
    set fb_tmp_258, _lex_param_3
    repr_defined $I5005, fb_tmp_258
    unless $I5005 goto if1239_else3027 
    set $P5006, fb_tmp_258[0]
    set $P5008, $P5006
    goto if1239_end3028
  if1239_else3027:
    null $P5007
    set $P5008, $P5007
  if1239_end3028:
    unless_null $P5008, vivi_12403029
    nqp_get_sc_object $P5009, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5008, $P5009
  vivi_12403029:
    $P5010 = $P5005."alt_nfas"(_lex_param_1, _lex_param_2, $P5008)
    set $P5019, $P5010
    goto if1237_end3024
  if1237_else3023:
    set $S5004, $P101
    iseq $I5006, $S5004, "concat"
    set $I5008, $I5006
    if $I5006 goto unless1244_end3037 
    set $S5005, $P101
    iseq $I5007, $S5005, "altseq"
    set $I5008, $I5007
  unless1244_end3037:
    set $I5010, $I5008
    if $I5008 goto unless1243_end3035 
    set $S5006, $P101
    iseq $I5009, $S5006, "conj"
    set $I5010, $I5009
  unless1243_end3035:
    set $I5012, $I5010
    if $I5010 goto unless1242_end3033 
    set $S5007, $P101
    iseq $I5011, $S5007, "conjseq"
    set $I5012, $I5011
  unless1242_end3033:
    box $P5018, $I5012
    set $P5017, $P5018
    unless $I5012 goto if1241_end3031 
.annotate 'line', 1173
.annotate 'line', 1174
    $P5014 = _lex_param_3."list"()
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next3038:
    unless $P5013, for_done3040
    shift $P5016, $P5013
  for_redo3039:
    .const 'Sub' $P5015 = 'cuid_276_1382484119.90237' 
    capture_lex $P5015
    $P5011 = $P5015($P5016)
    goto for_next3038
  for_done3040:
    set $P5017, $P5011
  if1241_end3031:
    set $P5019, $P5017
  if1237_end3024:
    set $P5020, $P5019
  if1236_end3019:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_275_1382484119.90237") :anon :lex :outer("cuid_198_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1161
    .const 'Sub' $P5019 = 'cuid_274_1382484119.90237' 
    capture_lex $P5019 
    .lex "@alternatives", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1163
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3020:
    unless $P5004, for_done3022
    shift $P5008, $P5004
  for_redo3021:
    .const 'Sub' $P5007 = 'cuid_274_1382484119.90237' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3020
  for_done3022:
.annotate 'line', 1167
    find_lex $P5009, "$ast"
    nqp_get_sc_object $P5010, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 12
    $P5011 = $P5010."unique"("alt_nfa_")
    set $S5003, $P5011
    concat $S5002, $S5003, "_"
    time $N5001
    set $S5004, $N5001
    concat $S5001, $S5002, $S5004
    $P5009."name"($S5001)
.annotate 'line', 1168
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    find_lex $P5014, "$code_obj"
    find_lex $P5015, "$block"
    find_lex $P5016, "$ast"
    $P5017 = $P5016."name"()
    $P5018 = $P5012."store_regex_alt_nfa"($P5014, $P5015, $P5017, $P101)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_274_1382484119.90237") :anon :lex :outer("cuid_275_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1163
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1164
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    find_lex $P5005, "@alternatives"
.annotate 'line', 1165
    nqp_get_sc_object $P5006, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1382484078.58099", 3
    $P5007 = $P5006."new"()
    $P5008 = $P5007."addnode"(_lex_param_0)
    push $P5005, $P5008
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_276_1382484119.90237") :anon :lex :outer("cuid_198_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1174
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$code_obj"
    find_lex $P5004, "$block"
    $P5005 = $P5001."alt_nfas"($P5003, $P5004, _lex_param_0)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "subrule_alias" :subid("cuid_199_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1178
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "self", _lex_param_0 
    .lex "$ast", _lex_param_1 
    .lex "$name", _lex_param_2 
.annotate 'line', 1179
    $P5001 = _lex_param_1."name"()
    set $S5001, $P5001
    isgt $I5001, $S5001, ""
    unless $I5001 goto if1245_else3041 
    set $S5004, _lex_param_2
    concat $S5003, $S5004, "="
    $P5002 = _lex_param_1."name"()
    set $S5005, $P5002
    concat $S5002, $S5003, $S5005
    $P5003 = _lex_param_1."name"($S5002)
    goto if1245_end3042
  if1245_else3041:
.annotate 'line', 1180
    $P5004 = _lex_param_1."name"(_lex_param_2)
  if1245_end3042:
.annotate 'line', 1181
    $P5005 = _lex_param_1."subtype"("capture")
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "flip_ast" :subid("cuid_200_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1184
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_277_1382484119.90237' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_278_1382484119.90237' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$qast", _lex_param_1 
    .local pmc fb_tmp_259 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_3043
    .lex "RETURN", $P101
    nqp_get_sc_object $P5001, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148", 34
    type_check $I5001, _lex_param_1, $P5001
    if $I5001 goto unless1246_end3046 
    $P5002 = "RETURN"(_lex_param_1)
  unless1246_end3046:
.annotate 'line', 1186
    $P5003 = _lex_param_1."rxtype"()
    set $S5001, $P5003
    iseq $I5002, $S5001, "literal"
    unless $I5002 goto if1247_else3047 
    set fb_tmp_259, _lex_param_1
    repr_defined $I5003, fb_tmp_259
    unless $I5003 goto if1248_else3049 
    set $P5005, fb_tmp_259[0]
    set $P5007, $P5005
    goto if1248_end3050
  if1248_else3049:
    null $P5006
    set $P5007, $P5006
  if1248_end3050:
    unless_null $P5007, vivi_12493051
    nqp_get_sc_object $P5008, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5007, $P5008
  vivi_12493051:
    set $S5003, $P5007
    box $P5004, $S5003
    $P5009 = $P5004."reverse"()
    set $S5002, $P5009
    box $P5010, $S5002
    set _lex_param_1[0], $P5010
    goto if1247_end3048
  if1247_else3047:
.annotate 'line', 1189
    $P5011 = _lex_param_1."rxtype"()
    set $S5004, $P5011
    iseq $I5004, $S5004, "concat"
    unless $I5004 goto if1250_else3052 
    .const 'Sub' $P5012 = 'cuid_277_1382484119.90237' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5020, $P5013
    goto if1250_end3053
  if1250_else3052:
.annotate 'line', 1194
    $P5017 = _lex_param_1."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next3064:
    unless $P5016, for_done3066
    shift $P5019, $P5016
  for_redo3065:
    .const 'Sub' $P5018 = 'cuid_278_1382484119.90237' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next3064
  for_done3066:
    set $P5020, $P5014
  if1250_end3053:
  if1247_end3048:
    goto lexotic_3044
  lexotic_3043:
    .get_results (_lex_param_1)
  lexotic_3044:
    .return (_lex_param_1) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_277_1382484119.90237") :anon :lex :outer("cuid_200_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1189
    .lex "@tmp", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
  while1251_test3054:
    find_lex $P5002, "$qast"
    $P5003 = $P5002."list"()
    set $N5001, $P5003
    box $P5009, $N5001
    set $P5008, $P5009
    unless $N5001 goto while1251_done3058 
  while1251_redo3056:
.annotate 'line', 1191
    find_lex $P5004, "$qast"
    $P5005 = $P5004."list"()
    $P5006 = $P5005."shift"()
    $P5007 = $P101."push"($P5006)
    set $P5008, $P5007
    goto while1251_test3054 
  while1251_done3058:
  while1252_test3059:
    set $P5017, $P101
    unless $P101 goto while1252_done3063 
  while1252_redo3061:
.annotate 'line', 1192
    find_lex $P5010, "$qast"
    $P5011 = $P5010."list"()
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    $P5014 = $P101."pop"()
    $P5015 = $P5012."flip_ast"($P5014)
    $P5016 = $P5011."push"($P5015)
    set $P5017, $P5016
    goto while1252_test3059 
  while1252_done3063:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_278_1382484119.90237") :anon :lex :outer("cuid_200_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1195
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."flip_ast"(_lex_param_0)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_201_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1202
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .local pmc fb_tmp_260 
.annotate 'line', 1203
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3067
    nqp_get_sc_object $P5003, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    get_who $P5002, $P5003
    set fb_tmp_260, $P5002
    repr_defined $I5001, fb_tmp_260
    unless $I5001 goto if1253_else3068 
    set $P5004, fb_tmp_260["$W"]
    set $P5006, $P5004
    goto if1253_end3069
  if1253_else3068:
    null $P5005
    set $P5006, $P5005
  if1253_end3069:
    unless_null $P5006, vivi_12543070
    nqp_get_sc_object $P5007, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    set $P5006, $P5007
  vivi_12543070:
    unless_null $P5006, vivi_12553071
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5006, $P5008
  vivi_12553071:
    set $P5001, $P5006
  fallback3067:
    $P5009 = _lex_param_1."name"()
    $P5010 = $P5001."create_code"(_lex_param_1, $P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_202_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1207
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 1208
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_203_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1212
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 1213
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_204_1382484119.90237") :anon :lex :outer("cuid_236_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1217
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_279_1382484119.90237' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next3072:
    unless $P5004, for_done3074
    shift $P5006, $P5004
  for_redo3073:
    .const 'Sub' $P5005 = 'cuid_279_1382484119.90237' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next3072
  for_done3074:
.annotate 'line', 1222
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_279_1382484119.90237") :anon :lex :outer("cuid_204_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1219
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1220
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_280_1382484119.90237") :anon :lex :outer("cuid_205_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
.annotate 'line', 1227
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307", 26
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_282_1382484119.90237") :load :init
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .const 'Sub' $P5001 = 'cuid_281_1382484119.90237' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_205_1382484119.90237" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPHLL")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src/stage2/gen/NQPP6QRegex.nqp")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1382484078.58099"
    push $P5004, "src/stage2/QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "7A67D46DDEA3C60BB73DFB1CA4F76715F3D1212C-1382484072.59307"
    push $P5004, "src/stage2/NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "BUILD"
    push $P5004, "20A8B78604B6E989C5DC1D669DAFFA35168CF57C-1382484085.68816"
    push $P5004, "src/stage2/gen/NQPHLL.nqp"
    push $P5004, "slot_for_object"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "create_code"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start_all"
    push $P5004, "!cursor_start_cur"
    push $P5004, "!cursor_start_fail"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "identifier"
    push $P5004, "arg"
    push $P5004, "arglist"
    push $P5004, "TOP"
    push $P5004, "nibbler"
    push $P5004, "infixstopper"
    push $P5004, "rxstopper"
    push $P5004, "termseq"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "SIGOK"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "sigmaybe"
    push $P5004, "sigmaybe:sym<normspace>"
    push $P5004, "sigmaybe:sym<sigwhite>"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "sigil"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<unsp>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "cclass_backslash"
    push $P5004, "cclass_backslash:sym<s>"
    push $P5004, "cclass_backslash:sym<b>"
    push $P5004, "cclass_backslash:sym<e>"
    push $P5004, "cclass_backslash:sym<f>"
    push $P5004, "cclass_backslash:sym<h>"
    push $P5004, "cclass_backslash:sym<r>"
    push $P5004, "cclass_backslash:sym<t>"
    push $P5004, "cclass_backslash:sym<v>"
    push $P5004, "cclass_backslash:sym<o>"
    push $P5004, "cclass_backslash:sym<x>"
    push $P5004, "cclass_backslash:sym<c>"
    push $P5004, "cclass_backslash:sym<any>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "string_to_int"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "backend"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "exists_stage"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "ast"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "recursion_limit"
    push $P5004, "default_backend"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, "$!backend"
    push $P5004, ""
    push $P5004, "alt_nfa__1_1382484120.1679"
    push $P5004, "-'"
    push $P5004, "val"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "alt_nfa__2_1382484120.20199"
    push $P5004, "0"
    push $P5004, "alt_nfa__3_1382484120.32858"
    push $P5004, ")}]"
    push $P5004, ">"
    push $P5004, "alt_nfa__4_1382484120.3484"
    push $P5004, "&|~"
    push $P5004, "alt_nfa__5_1382484120.36235"
    push $P5004, "|"
    push $P5004, "&"
    push $P5004, "noun"
    push $P5004, "sigfinal"
    push $P5004, "alt_nfa__6_1382484120.54811"
    push $P5004, ":"
    push $P5004, "septype"
    push $P5004, "alt_nfa__7_1382484120.58204"
    push $P5004, "sym"
    push $P5004, "1"
    push $P5004, "2"
    push $P5004, "min"
    push $P5004, "max"
    push $P5004, "{"
    push $P5004, "alt_nfa__8_1382484120.72998"
    push $P5004, "alt_nfa__9_1382484120.7305"
    push $P5004, "alt_nfa__10_1382484120.74412"
    push $P5004, "alt_nfa__11_1382484120.8633"
    push $P5004, "alt_nfa__12_1382484120.87476"
    push $P5004, "\\"
    push $P5004, "GOAL"
    push $P5004, "key"
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "$@%&"
    push $P5004, "name"
    push $P5004, "alt_nfa__13_1382484121.00884"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "alt_nfa__14_1382484121.09159"
    push $P5004, "xX"
    push $P5004, "alt_nfa__15_1382484121.10623"
    push $P5004, "cC"
    push $P5004, "alt_nfa__16_1382484121.20048"
    push $P5004, "alt_nfa__17_1382484121.28619"
    push $P5004, "alt_nfa__18_1382484121.30221"
    push $P5004, "alt_nfa__19_1382484121.35973"
    push $P5004, "alt_nfa__20_1382484121.37272"
    push $P5004, "longname"
    push $P5004, "alt_nfa__21_1382484121.41187"
    push $P5004, "alt_nfa__22_1382484121.42326"
    push $P5004, "sign"
    push $P5004, "invert"
    push $P5004, "uniprop"
    push $P5004, "alt_nfa__23_1382484121.52907"
    push $P5004, "alt_nfa__24_1382484121.52983"
    push $P5004, "alt_nfa__25_1382484121.53019"
    push $P5004, "]\\"
    push $P5004, "n"
    push $P5004, "alt_nfa__27_1382484121.60108"
    push $P5004, "alt_nfa__28_1382484121.60165"
    push $P5004, "alt_nfa__26_1382484121.53967"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "82C8134F4F1F98F3955D960634CCE916B8CF0355-1382484066.7641"
    push $P5004, "src/stage2/gen/nqp-mo.nqp"
    push $P5004, "QRegex::P6Regex::World"
    push $P5004, "QRegex::P6Regex::Grammar"
    push $P5004, "alt_nfa__1_1382484086.01886"
    push $P5004, "alt_nfa__2_1382484086.05591"
    push $P5004, "alt_nfa__3_1382484086.1482"
    push $P5004, "alt_nfa__4_1382484086.14886"
    push $P5004, "alt_nfa__5_1382484086.19524"
    push $P5004, "alt_nfa__6_1382484086.28372"
    push $P5004, "alt_nfa__7_1382484086.29849"
    push $P5004, "alt_nfa__8_1382484086.36263"
    push $P5004, "alt_nfa__9_1382484086.41025"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "QRegex::P6Regex::Actions"
    push $P5004, "QRegex::P6Regex::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "2D75A9E3BEA240A82E5B17B1BB1078D757A67840-1382484075.48148"
    push $P5004, "src/stage2/QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "0B0C72E2184996CA924631B8722E3D0303B59EA5-1382484096.05537"
    push $P5004, "src/stage2/QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "Backend"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "01"
    push $P5004, "Ee"
    push $P5004, "+-"
    .const 'Sub' $P5005 = 'cuid_281_1382484119.90237' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1257_end3078 
    die "Repossession conflicts occurred during deserialization"
  if1257_end3078:
    .const 'Sub' $P5001 = "cuid_1_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_2_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_32_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1382484119.90237" 
    nqp_get_sc_object $P5002, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 209
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_205_1382484119.90237"
    new $P5002, 'ResizableStringArray'
    push $P5002, "GLOBALish"
    push $P5002, "$?PACKAGE"
    push $P5002, "EXPORT"
    push $P5002, "ParseShared"
    push $P5002, "NQPCursorRole"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 0
    push $P5003, $P5005
    nqp_get_sc_object $P5006, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 1
    push $P5003, $P5006
    nqp_get_sc_object $P5007, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1382484078.58099", 32
    push $P5003, $P5007
    nqp_get_sc_object $P5008, "E7AD4B42F22CE3E5A839229F2FDCC4FBE891C4E3-1382484078.58099", 35
    push $P5003, $P5008
    new $P5009, 'ResizableIntegerArray'
    push $P5009, 0
    push $P5009, 0
    push $P5009, 0
    push $P5009, 0
    push $P5009, 0
    $P5001."setup_static_lexpad"($P5002, $P5003, $P5009)
    .const "LexInfo" $P5001 = "cuid_207_1382484119.90237"
    new $P5002, 'ResizableStringArray'
    push $P5002, "$?PACKAGE"
    push $P5002, "$?CLASS"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 3
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 3
    push $P5003, $P5005
    new $P5006, 'ResizableIntegerArray'
    push $P5006, 0
    push $P5006, 0
    $P5001."setup_static_lexpad"($P5002, $P5003, $P5006)
    .const "LexInfo" $P5001 = "cuid_209_1382484119.90237"
    new $P5002, 'ResizableStringArray'
    push $P5002, "$?PACKAGE"
    push $P5002, "$?CLASS"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 5
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 5
    push $P5003, $P5005
    new $P5006, 'ResizableIntegerArray'
    push $P5006, 0
    push $P5006, 0
    $P5001."setup_static_lexpad"($P5002, $P5003, $P5006)
    .const "LexInfo" $P5001 = "cuid_236_1382484119.90237"
    new $P5002, 'ResizableStringArray'
    push $P5002, "$?PACKAGE"
    push $P5002, "$?CLASS"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 133
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 133
    push $P5003, $P5005
    new $P5006, 'ResizableIntegerArray'
    push $P5006, 0
    push $P5006, 0
    $P5001."setup_static_lexpad"($P5002, $P5003, $P5006)
    .const "LexInfo" $P5001 = "cuid_280_1382484119.90237"
    new $P5002, 'ResizableStringArray'
    push $P5002, "$?PACKAGE"
    push $P5002, "$?CLASS"
    new $P5003, 'ResizablePMCArray'
    nqp_get_sc_object $P5004, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 210
    push $P5003, $P5004
    nqp_get_sc_object $P5005, "A4A797B3CA569F3A823F8B8F3A66D17B6C35200A-1382484119.9605", 210
    push $P5003, $P5005
    new $P5006, 'ResizableIntegerArray'
    push $P5006, 0
    push $P5006, 0
    $P5007 = $P5001."setup_static_lexpad"($P5002, $P5003, $P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_281_1382484119.90237") :anon :lex :outer("cuid_282_1382484119.90237")
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1382484119.90237" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1382484119.90237" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_283_1382484119.90237") :load
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .const 'Sub' $P5001 = "cuid_205_1382484119.90237" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_284_1382484119.90237") :main
.annotate 'file', "src/stage2/gen/NQPP6QRegex.nqp"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_205_1382484119.90237" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end