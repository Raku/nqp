BAT          = @bat@
MOAR         = @moar@
MOAR_PREFIX  = @moar_prefix@
M_RUNNER     = nqp-m$(BAT)

M_STAGE0_DIR = src/vm/moar/stage0
M_STAGE1_DIR = gen/moar/stage1
M_STAGE2_DIR = gen/moar/stage2

M_STAGE0_NQP = $(MOAR) --libpath=$(M_STAGE0_DIR) $(M_STAGE0_DIR)/nqp.moarvm --bootstrap
M_STAGE1_NQP = $(MOAR) --libpath=$(M_STAGE1_DIR) $(M_STAGE1_DIR)/nqp.moarvm --bootstrap

NQP_MO_MOAR     = nqpmo.moarvm

MODULE_LOADER_MOAR = ModuleLoader.moarvm

CORE_SETTING_MOAR     = NQPCORE.setting.moarvm

QASTNODE_MOAR     = QASTNode.moarvm

QREGEX_MOAR     = QRegex.moarvm

HLL_MOAR       = NQPHLL.moarvm
M_HLL_SOURCES  = src/vm/moar/HLL/Backend.nqp $(COMMON_HLL_SOURCES)

MASTOPS_MOAR   = MASTOps.moarvm
MASTNODES_MOAR = MASTNodes.moarvm

QAST_MOAR     = QAST.moarvm
M_QAST_SOURCES  = \
  src/vm/moar/QAST/QASTRegexCompilerMAST.nqp \
  src/vm/moar/QAST/QASTOperationsMAST.nqp \
  src/vm/moar/QAST/QASTCompilerMAST.nqp \

P6QREGEX_MOAR     = NQPP6QRegex.moarvm

P5QREGEX_MOAR     = NQPP5QRegex.moarvm

NQP_MOAR     = nqp.moarvm
M_NQP_SOURCES= src/vm/moar/NQP/Ops.nqp $(COMMON_NQP_SOURCES)

M_SOURCES = \
  $(COMMON_SOURCES) \
  $(M_QAST_SOURCES) \
  $(M_HLL_SOURCES) \
  $(M_NQP_SOURCES) \
  src/vm/moar/ModuleLoader.nqp \

M_STAGE1_OUTPUT = \
  $(M_STAGE1_DIR)/$(NQP_MO_MOAR) \
  $(M_STAGE1_DIR)/$(MODULE_LOADER_MOAR) \
  $(M_STAGE1_DIR)/$(CORE_SETTING_MOAR) \
  $(M_STAGE1_DIR)/$(QASTNODE_MOAR) \
  $(M_STAGE1_DIR)/$(QREGEX_MOAR) \
  $(M_STAGE1_DIR)/$(HLL_MOAR) \
  $(M_STAGE1_DIR)/$(MASTOPS_MOAR) \
  $(M_STAGE1_DIR)/$(MASTNODES_MOAR) \
  $(M_STAGE1_DIR)/$(QAST_MOAR) \
  $(M_STAGE1_DIR)/$(P6QREGEX_MOAR) \
  $(M_STAGE1_DIR)/$(NQP_MOAR) \

M_STAGE2_OUTPUT = \
  $(M_STAGE2_DIR)/$(NQP_MO_MOAR) $(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR) \
  $(M_STAGE2_DIR)/$(CORE_SETTING_MOAR) $(M_STAGE2_DIR)/$(QASTNODE_MOAR) \
  $(M_STAGE2_DIR)/$(QREGEX_MOAR) $(M_STAGE2_DIR)/$(HLL_MOAR) \
  $(M_STAGE2_DIR)/$(MASTOPS_MOAR) $(M_STAGE2_DIR)/$(MASTNODES_MOAR) \
  $(M_STAGE2_DIR)/$(QAST_MOAR) $(M_STAGE2_DIR)/$(P6QREGEX_MOAR) \
  $(M_STAGE2_DIR)/$(NQP_MOAR) \

manifest:
	echo MANIFEST >MANIFEST
	git ls-files >>MANIFEST

release: manifest
	[ -n "$(VERSION)" ] || ( echo "\nTry 'make release VERSION=yyyy.mm'\n\n"; exit 1 )
	bash -c '[ "$$(cat VERSION)" == "$(VERSION)" ] || ( echo -e "\nVersion on command line and in VERSION file differ\n"; exit 1 )'
	[ -d nqp-$(VERSION) ] || ln -s . nqp-$(VERSION)
	$(PERL) -ne 'print "nqp-$(VERSION)/$$_"' MANIFEST |\
	    tar -zcv -T - -f nqp-$(VERSION).tar.gz
	rm nqp-$(VERSION)

distclean: realclean

realclean: clean
	$(RM_F) Makefile MANIFEST config.status nqp$(BAT)

testclean:

m-all: $(NQP_MOAR) $(M_RUNNER) $(P5QREGEX_MOAR)

m-install: m-all
	$(MKPATH) $(DESTDIR)$(BIN_DIR)
	$(MKPATH) $(DESTDIR)$(NQP_LIB_DIR)
	$(MKPATH) $(DESTDIR)$(NQP_LIB_DIR)/profiler
	$(CP) $(NQP_MO_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(MODULE_LOADER_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(CORE_SETTING_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(QASTNODE_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(QREGEX_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(HLL_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(MASTOPS_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(MASTNODES_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(QAST_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(P6QREGEX_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(NQP_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) $(P5QREGEX_MOAR) $(DESTDIR)$(NQP_LIB_DIR)
	$(CP) src/vm/moar/profiler/template.html $(DESTDIR)$(NQP_LIB_DIR)/profiler/template.html
	$(PERL) tools/build/install-moar-runner.pl "$(DESTDIR)" $(PREFIX) $(NQP_LIB_DIR) $(MOAR)

# FIXME:
M_CLEANUPS = *.moarvm  gen/moar/* $(M_RUNNER)

m-clean:
	$(RM_RF) $(M_CLEANUPS)

$(M_STAGE1_DIR): $(M_STAGE1_OUTPUT)

$(M_STAGE1_DIR)/$(NQP_MO_MOAR): $(M_STAGE0_DIR) $(NQP_MO_SOURCES)
	$(MKPATH) $(M_STAGE1_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(NQP_MO_SOURCES) > $(M_STAGE1_DIR)/$(NQP_MO_COMBINED)
	$(M_STAGE0_NQP) --setting=NULL --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=$(M_STAGE1_DIR)/$(NQP_MO_MOAR) $(M_STAGE1_DIR)/$(NQP_MO_COMBINED)

$(M_STAGE1_DIR)/$(MODULE_LOADER_MOAR): $(M_STAGE0_DIR) src/vm/moar/ModuleLoader.nqp
	$(M_STAGE0_NQP) --setting=NULL --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=$(M_STAGE1_DIR)/$(MODULE_LOADER_MOAR) src/vm/moar/ModuleLoader.nqp

$(M_STAGE1_DIR)/$(CORE_SETTING_MOAR): $(M_STAGE0_DIR) $(CORE_SETTING_SOURCES) $(M_STAGE1_DIR)/$(NQP_MO_MOAR) $(M_STAGE1_DIR)/$(MODULE_LOADER_MOAR)
	$(MKPATH) $(M_STAGE1_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(CORE_SETTING_SOURCES) > $(M_STAGE1_DIR)/$(CORE_SETTING_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting=NULL --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=$(M_STAGE1_DIR)/$(CORE_SETTING_MOAR) $(M_STAGE1_DIR)/$(CORE_SETTING_COMBINED)

$(M_STAGE1_DIR)/$(QASTNODE_MOAR): $(M_STAGE0_DIR) $(QASTNODE_SOURCES) $(M_STAGE1_DIR)/$(CORE_SETTING_MOAR)
	$(MKPATH) $(M_STAGE1_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QASTNODE_SOURCES) > $(M_STAGE1_DIR)/$(QASTNODE_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) --stable-sc=stage1 \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1_DIR)/$(QASTNODE_MOAR) $(M_STAGE1_DIR)/$(QASTNODE_COMBINED)

$(M_STAGE1_DIR)/$(QREGEX_MOAR): $(M_STAGE0_DIR) $(QREGEX_SOURCES) $(M_STAGE1_DIR)/$(QASTNODE_MOAR)
	$(MKPATH) $(M_STAGE1_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QREGEX_SOURCES) > $(M_STAGE1_DIR)/$(QREGEX_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) --stable-sc=stage1 \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE1_DIR)/$(QREGEX_MOAR) $(M_STAGE1_DIR)/$(QREGEX_COMBINED)

$(M_STAGE1_DIR)/$(HLL_MOAR): $(M_STAGE0_DIR) $(M_HLL_SOURCES) $(M_STAGE1_DIR)/$(QREGEX_MOAR)
	$(MKPATH) $(M_STAGE1_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_HLL_SOURCES) > $(M_STAGE1_DIR)/$(HLL_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=$(M_STAGE1_DIR)/$(HLL_MOAR) $(M_STAGE1_DIR)/$(HLL_COMBINED)

$(M_STAGE1_DIR)/$(MASTOPS_MOAR): $(M_STAGE0_DIR) $(M_STAGE1_DIR)/$(CORE_SETTING_MOAR) @moar_prefix@/share/nqp/lib/MAST/Ops.nqp
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=$(M_STAGE1_DIR)/$(MASTOPS_MOAR) @moar_prefix@/share/nqp/lib/MAST/Ops.nqp

$(M_STAGE1_DIR)/$(MASTNODES_MOAR): $(M_STAGE0_DIR) $(M_STAGE1_DIR)/$(MASTOPS_MOAR) @moar_prefix@/share/nqp/lib/MAST/Nodes.nqp
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=$(M_STAGE1_DIR)/$(MASTNODES_MOAR) @moar_prefix@/share/nqp/lib/MAST/Nodes.nqp

$(M_STAGE1_DIR)/$(QAST_MOAR): $(M_STAGE0_DIR) $(M_QAST_SOURCES) $(M_STAGE1_DIR)/$(HLL_MOAR) $(M_STAGE1_DIR)/$(MASTNODES_MOAR)
	$(MKPATH) $(M_STAGE1_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_QAST_SOURCES) > $(M_STAGE1_DIR)/$(QAST_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=$(M_STAGE1_DIR)/$(QAST_MOAR) $(M_STAGE1_DIR)/$(QAST_COMBINED)

$(M_STAGE1_DIR)/$(P6QREGEX_MOAR): $(M_STAGE0_DIR) $(P6QREGEX_SOURCES) $(M_STAGE1_DIR)/$(QAST_MOAR)
	$(MKPATH) $(M_STAGE1_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(P6QREGEX_SOURCES) > $(M_STAGE1_DIR)/$(P6QREGEX_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc --stable-sc=stage1 \
	    --output=$(M_STAGE1_DIR)/$(P6QREGEX_MOAR) $(M_STAGE1_DIR)/$(P6QREGEX_COMBINED)

$(M_STAGE1_DIR)/$(NQP_MOAR): $(M_STAGE0_DIR) $(M_STAGE1_DIR)/$(P6QREGEX_MOAR) $(M_SOURCES)
	$(MKPATH) $(M_STAGE1_DIR)/gen
	$(PERL) tools/build/gen-version.pl $(PREFIX) $(NQP_LIB_DIR) > $(M_STAGE1_DIR)/nqp-config.nqp
	$(PERL) tools/build/gen-cat.pl moar $(M_NQP_SOURCES) $(M_STAGE1_DIR)/nqp-config.nqp > $(M_STAGE1_DIR)/$(NQP_COMBINED)
	$(M_STAGE0_NQP) --module-path=$(M_STAGE1_DIR) --setting-path=$(M_STAGE1_DIR) \
	    --setting=NQPCORE --target=mbc --no-regex-lib --stable-sc=stage1 \
	    --output=$(M_STAGE1_DIR)/$(NQP_MOAR) $(M_STAGE1_DIR)/$(NQP_COMBINED)

$(M_STAGE2_DIR): $(M_STAGE1_OUTPUT)

$(M_STAGE2_DIR)/$(NQP_MO_MOAR): $(M_STAGE1_DIR) $(NQP_MO_SOURCES)
	$(MKPATH) $(M_STAGE2_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(NQP_MO_SOURCES) > $(M_STAGE2_DIR)/$(NQP_MO_COMBINED)
	$(M_STAGE1_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(NQP_MO_MOAR) $(M_STAGE2_DIR)/$(NQP_MO_COMBINED)

$(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR): $(M_STAGE1_DIR) src/vm/moar/ModuleLoader.nqp
	$(M_STAGE1_NQP) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR) src/vm/moar/ModuleLoader.nqp

$(M_STAGE2_DIR)/$(CORE_SETTING_MOAR): $(M_STAGE1_DIR) $(CORE_SETTING_SOURCES) $(M_STAGE2_DIR)/$(NQP_MO_MOAR) $(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR)
	$(MKPATH) $(M_STAGE2_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(CORE_SETTING_SOURCES) > $(M_STAGE2_DIR)/$(CORE_SETTING_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting=NULL --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(CORE_SETTING_MOAR) $(M_STAGE2_DIR)/$(CORE_SETTING_COMBINED)

$(M_STAGE2_DIR)/$(QASTNODE_MOAR): $(M_STAGE1_DIR) $(QASTNODE_SOURCES) $(M_STAGE2_DIR)/$(CORE_SETTING_MOAR)
	$(MKPATH) $(M_STAGE2_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QASTNODE_SOURCES) > $(M_STAGE2_DIR)/$(QASTNODE_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(QASTNODE_MOAR) $(M_STAGE2_DIR)/$(QASTNODE_COMBINED)

$(M_STAGE2_DIR)/$(QREGEX_MOAR): $(M_STAGE1_DIR) $(QREGEX_SOURCES) $(M_STAGE2_DIR)/$(QASTNODE_MOAR)
	$(MKPATH) $(M_STAGE2_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(QREGEX_SOURCES) > $(M_STAGE2_DIR)/$(QREGEX_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(QREGEX_MOAR) $(M_STAGE2_DIR)/$(QREGEX_COMBINED)

$(M_STAGE2_DIR)/$(HLL_MOAR): $(M_STAGE1_DIR) $(M_HLL_SOURCES) $(M_STAGE2_DIR)/$(QREGEX_MOAR)
	$(MKPATH) $(M_STAGE2_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_HLL_SOURCES) > $(M_STAGE2_DIR)/$(HLL_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(HLL_MOAR) $(M_STAGE2_DIR)/$(HLL_COMBINED)

$(M_STAGE2_DIR)/$(MASTOPS_MOAR): $(M_STAGE1_DIR) $(M_STAGE2_DIR)/$(CORE_SETTING_MOAR) @moar_prefix@/share/nqp/lib/MAST/Ops.nqp
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(MASTOPS_MOAR) @moar_prefix@/share/nqp/lib/MAST/Ops.nqp

$(M_STAGE2_DIR)/$(MASTNODES_MOAR): $(M_STAGE1_DIR) $(M_STAGE2_DIR)/$(MASTOPS_MOAR) @moar_prefix@/share/nqp/lib/MAST/Nodes.nqp
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(MASTNODES_MOAR) @moar_prefix@/share/nqp/lib/MAST/Nodes.nqp

$(M_STAGE2_DIR)/$(QAST_MOAR): $(M_STAGE1_DIR) $(M_QAST_SOURCES) $(M_STAGE2_DIR)/$(HLL_MOAR) $(M_STAGE2_DIR)/$(MASTNODES_MOAR)
	$(MKPATH) $(M_STAGE2_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(M_QAST_SOURCES) > $(M_STAGE2_DIR)/$(QAST_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(QAST_MOAR) $(M_STAGE2_DIR)/$(QAST_COMBINED)

$(M_STAGE2_DIR)/$(P6QREGEX_MOAR): $(M_STAGE1_DIR) $(P6QREGEX_SOURCES) $(M_STAGE2_DIR)/$(QAST_MOAR)
	$(MKPATH) $(M_STAGE2_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(P6QREGEX_SOURCES) > $(M_STAGE2_DIR)/$(P6QREGEX_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --no-regex-lib --target=mbc \
	    --output=$(M_STAGE2_DIR)/$(P6QREGEX_MOAR) $(M_STAGE2_DIR)/$(P6QREGEX_COMBINED)

$(M_STAGE2_DIR)/$(NQP_MOAR): $(M_STAGE1_DIR) $(M_STAGE2_DIR)/$(P6QREGEX_MOAR) $(M_SOURCES)
	$(MKPATH) $(M_STAGE2_DIR)/gen
	$(PERL) tools/build/gen-version.pl $(PREFIX) $(NQP_LIB_DIR) > $(M_STAGE2_DIR)/nqp-config.nqp
	$(PERL) tools/build/gen-cat.pl moar $(M_NQP_SOURCES) $(M_STAGE2_DIR)/nqp-config.nqp > $(M_STAGE2_DIR)/$(NQP_COMBINED)
	$(M_STAGE1_NQP) --module-path=$(M_STAGE2_DIR) --setting-path=$(M_STAGE2_DIR) \
	    --setting=NQPCORE --target=mbc --no-regex-lib \
	    --output=$(M_STAGE2_DIR)/$(NQP_MOAR) $(M_STAGE2_DIR)/$(NQP_COMBINED)

$(NQP_MOAR): $(M_STAGE2_OUTPUT)
	$(CP) $(M_STAGE2_DIR)/$(NQP_MO_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(CORE_SETTING_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(QASTNODE_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(QREGEX_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(HLL_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(MASTOPS_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(MASTNODES_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(QAST_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(P6QREGEX_MOAR) .
	$(CP) $(M_STAGE2_DIR)/$(NQP_MOAR) .

$(M_RUNNER): tools/build/gen-moar-runner.pl
	$(PERL) tools/build/gen-moar-runner.pl "$(MOAR)"

m-runner-default: m-all
	$(CP) $(M_RUNNER) nqp$(BAT)
	$(CHMOD) 755 nqp$(BAT)

m-runner-default-install: m-runner-default m-install
	$(CP) $(DESTDIR)$(BIN_DIR)/$(M_RUNNER) $(DESTDIR)$(BIN_DIR)/nqp$(BAT)
	$(CHMOD) 755 $(DESTDIR)$(BIN_DIR)/nqp$(BAT)

$(P5QREGEX_MOAR): $(P5QREGEX_SOURCES) $(NQP_MOAR) $(M_RUNNER)
	$(MKPATH) $(M_STAGE2_DIR)/gen
	$(PERL) tools/build/gen-cat.pl moar $(P5QREGEX_SOURCES) > $(M_STAGE2_DIR)/$(P5QREGEX_COMBINED)
	.@slash@$(M_RUNNER) --target=mbc --output=$(P5QREGEX_MOAR) \
	    $(M_STAGE2_DIR)/$(P5QREGEX_COMBINED)

m-bootstrap-files: $(M_STAGE2_OUTPUT)
	$(CP) $(M_STAGE2_DIR)/$(NQP_MO_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(MODULE_LOADER_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(CORE_SETTING_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(QASTNODE_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(QREGEX_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(HLL_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(MASTOPS_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(MASTNODES_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(QAST_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(P6QREGEX_MOAR) $(M_STAGE0_DIR)
	$(CP) $(M_STAGE2_DIR)/$(NQP_MOAR) $(M_STAGE0_DIR)

## testing

m-test: m-all
	$(PROVE) -r --exec ".@slash@$(M_RUNNER)" t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall t/concurrency

m-test-loud: m-all
	$(PROVE) -r -v --exec ".@slash@$(M_RUNNER)" t/nqp t/hll t/qregex t/p5regex t/qast t/moar t/serialization t/nativecall t/concurrency

m-core-test: $(M_RUNNER)
	$(PROVE) -r --exec ".@slash@$(M_RUNNER)" t/nqp

m-core-test-loud: $(M_RUNNER)
	$(PROVE) -r -v --exec ".@slash@$(M_RUNNER)" t/nqp

m-qregex-test: $(M_RUNNER)
	$(PROVE) -r --exec ".@slash@$(M_RUNNER)" t/qregex

m-qregex-test-loud: $(M_RUNNER)
	$(PROVE) -r -v --exec ".@slash@$(M_RUNNER)" t/qregex

# nqp::makefile <-- tells NQP::Configure to treat this file as a makefile,
#                   performing win32 slash and makefile conversions
